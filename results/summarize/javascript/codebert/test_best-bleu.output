0	Creates a new instance of Axios . js
1	Creates a cancel token .
2	Check whether a value is a ArrayBuffer .
3	Check whether the browser is valid .
4	Iterate over an object or array
5	shallow extend method
6	Writes a package . json manifest .
7	Process the response
8	Fetches the update for the current page and if it is valid .
9	Check if the current hot update needs to be updated
10	Format the error message
11	Pad a given number with precision padding
12	Parses a string segment in a buffer .
13	Parses segments of a buffer .
14	Converts an EQTT request to a PR .
15	Calculate an array of private key providers .
16	Creates a 32bit32 byte buffer .
17	Add an entropyArray to the integer array .
18	Generate entropy sample from the given entropy .
19	Decrypts a message .
20	Initializes entropy .
21	Convert the given input to another .
22	Verify the given data
23	Retrieves a hash of the given data .
24	Checks a message to see if it does not exist
25	Formats a FormGroup instance .
26	Create a loader for the given props .
27	Single Item component .
28	Represents a table .
29	Initialize an element .
30	Render a ButtonGroup .
31	A grid row .
32	Represents a form field .
33	Custom rendering for a card .
34	Single Item component .
35	Generate a comment
36	Represents a stat label
37	Read a meta meta .
38	Return a container .
39	Render a step group element
40	A divider for a divider .
41	Represents a header .
42	Creates a grid component .
43	Creates a breadcrumb breadcrumb
44	Stringifies the element of a card
45	Item constructor .
46	Used to render a grid column .
47	Customize an image
48	Render a card group .
49	Create a row row .
50	Return an event for a feed .
51	Creates a Tab pane
52	Displays list content for a list .
53	A button .
54	Represents a table cell .
55	Creates a breadcrumb divider .
56	Array list elements
57	Render the footer header .
58	Render a comment group .
59	Display a popup .
60	Segment segment .
61	Return a list of plain text lines
62	Render the given props .
63	short - style feed
64	Creates a placeholder element .
65	Convert Accordion to Accordion .
66	Constructs a placeholder image with a placeholder element .
67	Render a dropdown menu .
68	List icons for a list of icons
69	Render a Advertisement
70	Render a statistic group
71	Creates a Stats object .
72	Create a segment group .
73	Render table header .
74	Return a feed .
75	Render a LabelGroup
76	Return a feed of attributes
77	A DropdownDivider .
78	Representation of a feed summary .
79	Render step content for a step
80	Initialize an image .
81	Calculate the pixel ratio of a given canvas element
82	Set the background background
83	Create a sprite from the body and position it
84	Render the body
85	Update the body
86	Create Markdown pages
87	Returns true if the given value is a window object .
88	Normalizes options for default values .
89	Generate the summary of a summary .
90	Create the entry string for the given object .
91	Create a keyword
92	Check if ast is in ast
93	Formats the metadata of the given metadata .
94	Find package . json
95	Toggle class attribute on svg element
96	Maps an array of results into a single promise .
97	Creates a json document from a source directory
98	Duplicate an array
99	Generate Markdown file
100	flatten an object into a single object
101	Appends a substring to the list .
102	Sort a list of nodes in a queue
103	Sort the nodes in a tree
104	Draws the drawn nodes .
105	creates a new polygon node
106	Rotate a matrix .
107	Create a 4 matrix
108	Calculates a Pulse context
109	Process a loaded texture .
110	Check the zoom level for the image
111	Rotate a P3P perspective
112	Check to see if the given matrix is in place .
113	add event listeners
114	Get the number of XMP data
115	Display error message
116	Clear error message
117	Position a message on the screen
118	Get mouse position .
119	Triggers the mousemove event .
120	Handles double click on document .
121	Convert a mouse event to canvas
122	Handles mousemove events
123	Triggers the mouseup event .
124	Handles the touchend events
125	Event handler for document move .
126	Set mouse wheel events
127	Listen for keydown events
128	Listen for keydown .
129	Change the keydown
130	Animate the animation .
131	recalculates and rotations
132	Converted Quaternion to Quaternion
133	Calculates a quaternion unit .
134	Listen to orientation of orientation .
135	Render the canvas if needed
136	callback for scene loading
137	Creates hot spots .
138	Destroys hot spots .
139	render HOTP
140	Merge configs into the server
141	switch fullscreen mode
142	change fullscreen mode
143	This allows you to restrict a view of a texture to a certain element .
144	Stop the animation
145	Show error message
146	Load the scene
147	Stop orientation change
148	Fires an external event listener
149	Execute a function waiting for the current state
150	Returns mouse offset .
151	Parse a float .
152	Comparison function .
153	Returns the difference of another object
154	Extracts inline content from a string
155	Compile sass file
156	Creates a new instance of FormServices .
157	Creates a new Producer
158	Create a new Context object
159	Creates an alternative function for the captcha code .
160	Performs a request to cloud .
161	On request response .
162	Parses the response from the POST request .
163	Invoked when the request was successful
164	Get Metalsmith plugin
165	Get start position of the sidebar
166	Adds a function to the original object
167	Prepend a method to the obj .
168	Copy from file to destination directory
169	copy all templates in a directory
170	Create an app name from given path
171	Check if a directory exists
172	Handle exit code
173	Load a template with the given name and locals .
174	Main entry point .
175	Make a directory
176	Create a new option for the given option .
177	print error message
178	Writes a string to a file
179	Bind a function to a D3 .
180	Adjusts options for each package
181	Provides a middleware to handle debugging requests .
182	Event handler for rendering
183	Prefix all substrings in a string .
184	Create canvas data
185	Smooth area of a given area
186	Calculates the diagonal area for a given pixel coordinate
187	Calculates the diagonal area for a given edge .
188	Generate an array of patterns
189	Calculate an edge pattern
190	Calculates delta between left and right
191	lint - disable linear interpolations
192	check form field
193	Reset transfer to transfer .
194	check target button
195	Transforms input into transferability .
196	check target inputs
197	Move button to target form
198	update scroll positions
199	Get a score from a text
200	Calculate score from password .
201	check regular expression
202	Initialize the password
203	Encapsulates an instance of level up in the database .
204	Convert raw tx to raw chain
205	Initialize a transaction with given data .
206	Creates a txRejectedError
207	The request factory
208	Compile sass file
209	Load the bundle file
210	Parse a string .
211	Read an array of bytes from a binary array .
212	Handles the union of union selections in the union of the union queries .
213	Recursively walk all selections in the query .
214	Transform a column into an AST node .
215	Transform a column into an AST node .
216	Strips the connection to a query .
217	Flatten a list of fragments
218	Get the node represented by the query
219	Function returning a connection object based on the raw data .
220	Validate a row
221	Builds a WHERE key from the database table .
222	Clones a given object
223	Builds a string of length strings
224	Concatenate an array .
225	Concatenate a JSON value .
226	Replaces all strings with the given text .
227	Create a node with media .
228	Constructs a new MediaElement
229	Called when a media has loaded
230	Seek to a game .
231	Pause media .
232	The game .
233	The Media Manager
234	Clear the media .
235	Event handler for a media release .
236	Get the full path to the specified URI .
237	Converts a given URI into a CDATA file .
238	Convert an image to a local directory
239	Get file name from src
240	Context constructor .
241	Takes an array ofCapabilities and returns a unique map for unique capabilities
242	Compares the capabilities for the specified capability .
243	Determine if the given path is an cordova .
244	Cleans the project root
245	Recursively deletes svn folders from a given directory
246	List all plugins in a directory
247	Constructs a new hook runner .
248	Extracts the shbang interpreter from a script file .
249	Check if a hook is disabled
250	Checks to see if the cordova proxy is enabled .
251	Generate all hooks for a hook .
252	Get all plugins for a plugin
253	Get all app locations in a directory .
254	Get script scripts from config . xml
255	Get all plugin scripts .
256	Get all plugin scripts .
257	Ensures that the capabilities are unique .
258	Copy a file from one directory to another
259	Plugin specification constructor .
260	Get plugin path for a plugin file
261	Runs the platforms on the specified command .
262	Reads all available engines .
263	Get list of installed plugins
264	Get dependencies of a plugin .
265	Create a replacement change in the manifest .
266	Helper function to check if the plugin is valid
267	Get platform details from a directory
268	Extracts platform name from cordova platform .
269	Processes a message from the server
270	Execute the engine scripts
271	Create a package json from a plugin
272	Prepares the platforms for a project
273	Registers the given icon icon .
274	Returns a map of resource paths for a given resource name .
275	Finds the Android device for the given Android launch mode .
276	AndroidManifest implementation .
277	Helper function to check against the expected requirements .
278	Finds a version of semver version
279	List all required requirements for a project
280	Helper function to validate a task name
281	Normalize a travis tree
282	Take a travis model and extract it into a travis token
283	Transforms a travis tree .
284	Check whether a given group is ignored .
285	Get the dependency for a git dependency
286	Extracts an array of API services from a single service .
287	Extracts the normalized attribute values from the attribute value
288	Recursively sort node data
289	Creates the value of the numeric attribute of the given attribute string .
290	Removes numeric fields from the attribute list
291	Adds a facet to the schema
292	Adds a facet .
293	Adds a facet to the query .
294	Adds a constraint to the current facet .
295	Adds a tag to the tagFragment .
296	Remove facet .
297	Removes facet values from the specified facet .
298	Removes facet from a collection
299	Remove facet .
300	Remove facet from a facet
301	Remove facet values from a facet .
302	Remove a tag .
303	Toggles the facet of a facet .
304	Replace facets with a given facet
305	Checks if facet is defined in the current facet
306	Checks if the given facet is included .
307	Returns a list of computed properties that can be applied to this relation .
308	Sets the value of a query parameter
309	Updates the search parameters with the given parameters .
310	Retrieve the deepest path for a given facet
311	Runs command with the supplied arguments
312	Compile the AST
313	Compile shared files
314	Compile js files .
315	Compile a wi compiler
316	Returns the internal state of the plugin .
317	Apply a value to an array of values .
318	Creates a batch of events from the Firebase store .
319	Injecti configuration module .
320	Set default values for the given object .
321	Get the ID from the payload object .
322	Convenience function to create a new instance of the instanceStore
323	Parses a CSV file into an object and parses it as an object
324	Parses a JSON file
325	Parses a flat json file
326	Check whether propTypes is valid .
327	Call this function to guard errors .
328	Gets the closest DOM component from a DOM node .
329	Gets the instance component from a DOM node .
330	Gets the node from an instance of a DOM element .
331	Traverses a mouseLeave event .
332	Creates a prefix for event style property name .
333	This class is used to be used for debugging purposes .
334	Gets the composition event type from the top level .
335	Returns true if the top - top - level key is true .
336	Get the value for a given property
337	Gets the target element that is interactive
338	Traverses an event from the top - level events .
339	Listens for testing registration
340	Gets the DOM event target .
341	Create synthetic event handler
342	Sets the text content of a node .
343	Creates a dangerous string for the given style attribute .
344	This method is called after the rendering of the container being rendered .
345	Safely call this instance as unmount .
346	Creates a unique async expiration time .
347	Stringify content .
348	Get the options for a loader
349	Normalize a rule object
350	returns the parent of a node
351	Pure function to pure pure CSS clone .
352	Get offset .
353	Copies the viewport to the current viewport .
354	Gets the current node in the current tree .
355	Appends a TD element to the store .
356	append the current tree
357	Strip DOM element from selector
358	Retrieve PIDs by command name
359	Kill the app
360	Listens for a given port
361	Removes all the websocket handlers from the given session id .
362	Verify the application platform
363	Checks if a given URL is a local host .
364	Normalizes the given version number into a serial version
365	Replace the current project file ID with a new release file ID
366	Assign the current project file to the agent file .
367	Creates an additional extra script to be run on the platform .
368	Get the timestarts of the migration file .
369	Parse the container path
370	Push remote file to remote device
371	Pulls a remote file from the system
372	Pull a device from a remote device
373	Create a simulator
374	Get a test device
375	Build the DOM tree
376	Determines a collision .
377	Get the quadrant of the gamepad .
378	Polyfill for UrlParameters
379	Request queue request
380	Initialize MessageTracker
381	Iterate through the socket connection .
382	Initializes messages from the socket . io socket .
383	Initializes the client .
384	A Graph .
385	Remove a node
386	Iterate over an array .
387	Convert an array to a map .
388	create watcher for changes
389	Start watching for changes
390	Reads the template value and returns the result set .
391	Taken from utf16
392	Returns a peek that has a non - unicode escape escape .
393	Scan for JSX identifier
394	Gets the property name of a declaration .
395	Bind the given node into the list of referenced nodes .
396	Converts a node to a string representation
397	Escape the given identifier as a string .
398	Returns the enclosing block scope or not .
399	Check whether name is a declaration or not .
400	Checks whether a given identifier node is a variable name .
401	Convert a string to an array of Unicode characters .
402	Check if the given span is contained within another span
403	Check if a given token is part of a list .
404	Parse an entity name
405	Finds the first element that matches the specified position .
406	Returns the name of the imported entity from the entity of the entity name .
407	Resolve an entity name .
408	Returns true if the name is a reserved name .
409	Determines if a given export symbol is inside of the export assignment .
410	Returns the type of a property with the given name .
411	Return the type of the given node
412	Return the inferred type for a binding element
413	Return the inferred type of a variable
414	Return the type implied by a binding pattern
415	Return the type implied by an object binding pattern
416	Gets the local parameters that are declared in a class declaration
417	This function is called when the base constructor creates a base prototype of the base type of the base class .
418	Checks whether a given node is a type reference or not .
419	Creates a map of references which are mapped to this map .
420	Return the signatures of the union of the given types .
421	Resolves a property name if type is a member of object .
422	Calculate the effective type of a type parameter .
423	Gets the property descriptor for a given type .
424	This function propagates the flags of the type of a new type .
425	Determines the type of a generic type argument and returns the type implied by the interface .
426	Return the inferred type from a given alias if the given reference is a type reference .
427	Adds a set of types to the given set .
428	Check if a property is known in the object type .
429	Determines whether the type of two objects are related to the type of the object type . If the second argument is a deep comparison check if the object type does not check if the type is already known .
430	Check if a given type is a primitive type in a primitive type .
431	Checks whether a given node is assigned to a variable or not .
432	Determines the current type based on the given expression .
433	Returns the type of a parameter or undefined if no contextual parameter is given
434	Gets the contextual type of a variable declaration in a contextual type of a parameter or a parameter declaration .
435	Attempt to apply a type to a given type .
436	Returns true if the index of a contextual type is a contextual type .
437	Gets the contextual contextual type of an object literal or property literal .
438	Gets the contextual type of an element expression .
439	Gets the non - generic signature for a given type
440	Returns the contextual signature for a given node . If the contextual signature is a contextual type it will return the contextual type of the contextual signature that is the actual contextual type of the return value of the contextual type . If the contextual signature is a contextual type it will be returned .
441	Gets the property name from an attribute .
442	Check whether the given property access is valid .
443	Gets the name of a property accessorRef .
444	Try to find a single call signature from a single type .
445	Gets the arguments of a CallExpression node .
446	Gets the effective argument type for a given node .
447	Gets the effective argument type of a call expression .
448	Gets the effective argument of an argument .
449	Gets the effective argument node for an argument .
450	Returns the diagnostic message for the given argument node .
451	Resolve a CallExpression from a given node .
452	Checks whether or not a given node is recognized by a call expression .
453	Determines if a call expression is a valid expression .
454	Assigns all binding elements to the binding pattern .
455	Checks the type parameter
456	Gets the promised type of a promise .
457	Checks whether or not a decorator node is valid .
458	Check if a TypeExpression node is a constant declaration
459	Checks the type of an annotation expression .
460	Check the decorators of a node .
461	Ensures that the given identifier is in the current scope .
462	Check if a parameter declaration is valid .
463	Verifies the variable declaration of a variable declaration .
464	Checks if the provided iterable is valid .
465	Checks that the type parameter is declared
466	Checks whether a source is valid .
467	Copy the symbol into the given symbol with the given symbol name .
468	Returns the parent type of the given node or the parent node of the class declaration .
469	Get members of a given type .
470	Determines if a given node is referenced by a given symbol .
471	Gets the declaration of a given node .
472	Gets the referenced value of a node if it doesn t exist
473	Returns a temp variable name .
474	Emit files to the given source code .
475	Creates a unique name for the given flag name .
476	Generates a unique name for the given base name .
477	Encodes the sourcemap span .
478	Creates a temporary variable node for the given flags
479	Indents indentation of given node .
480	Emit a serializer expression for the given node .
481	Check if variable declaration is part of a variable declaration
482	Emit an assignment to a given name .
483	Emit an assignment to a reserved variable .
484	Ensure that the emit expression is a temporary variable .
485	Find the source file
486	Read a JSON file .
487	Parses a tsconfig text string to a json file
488	Removes named properties from a node
489	Determines whether or not a CallExpression node is in a call expression .
490	This method is like _ . indexOf except that it s a maximum argument that matches the rest of its arguments .
491	Finds a token in a given position
492	Finds the first token at the position of a given position .
493	Returns the JSX comment at the given position in the given position .
494	Strip the given name from the database .
495	fix token kind
496	Check if a list element contains a list element .
497	Find the nearest node in the given source file
498	Returns true if the given range contains errors .
499	Checks whether a given position is inside of a given position .
500	Returns the semantic diagnostics for the given file .
501	Extracts the given name from a given name .
502	Gets the scope of a given scope node .
503	Get object symbolic symbols for object literals and binding patterns .
504	Determines whether or not imports are available or not .
505	Returns the object literal of the context token associated with the given context token .
506	Filter namespaced attributes
507	Checks whether a node is access to a write access or not .
508	Retrieves the sign comments for the given signature file .
509	Checks whether or not a given value is a variable declaration .
510	Returns the type of a token in the given token type .
511	Gets the parameters of a given right side body .
512	calculates the score for a particular device
513	Extract origin response from the request
514	Transforms the touch move to the target element .
515	Check if the average velocity between two points
516	Binds touch events .
517	Return the duration of the event .
518	Set up event listeners for touchmove events .
519	Get the computed CSS property of an element
520	Apply CSS style
521	Sets the element transform
522	Determine the path to import paths .
523	Extract the payload
524	Set a chapter on the page
525	Calculate hash for a page
526	Handles the chapters in the editor
527	Insert an element at the specified position .
528	Create a dropdown menu
529	Create a new button
530	Removes all buttons from the specified ID
531	Remove all buttons .
532	Toggle the sidebar .
533	Filter summary with a path
534	Initializes the dropdown .
535	Initializes shortcuts
536	register a directive
537	Constructor for a Rule .
538	Create a new Tox instance
539	Gets the module index of the given config file
540	Parse a CSS file .
541	Creates a new Metadata object .
542	Validates the UUID of the dataset .
543	Represents a prepared query .
544	Thrown when a driver error is thrown .
545	Thrown when an error is thrown .
546	Construct a new busy connection
547	Merge contact options
548	Validates policy options
549	Validates the protocol options
550	Validates socket options
551	Validates the encoding options .
552	Sets the default values for the protocol .
553	Parse section .
554	Gets the data type name from an object .
555	Represents a FrameHeader .
556	Generate a timestamp for the specified date .
557	Represents a mutable long integer .
558	Creates a new aggregate .
559	Represents a connection .
560	Constructs a new TimeExecution function .
561	Creates a new DataSource .
562	Initialize a new DataSource .
563	A number of workers
564	Creates a new table .
565	A schema parser .
566	Type parser .
567	V3 parser .
568	Get the schema for the given version
569	Encode routing key to query
570	Get js files from directory
571	Creates a new schema function .
572	Copies a buffer .
573	Adds an error to the stack trace .
574	Logs a logger .
575	Receives properties of an object
576	Deep extend function
577	Creates an iterator over an array .
578	Converts iterator to an array .
579	binary search function
580	Insert an item into the array .
581	Ensure that a function is a valid function
582	Generates a string repeated times
583	Wraps the handler function for the given options .
584	Creates a white list of child policies
585	Event constructor .
586	A frame reader .
587	Creates a new Connection object .
588	Gets a clock id from a clock ID
589	Get node identifier
590	Calculate ticks if possible
591	Add ticks to the given date
592	Creates a buffer
593	Encapsulates an encoder .
594	Returns number of leading zeros .
595	Index constructor .
596	Calculates the list of files for a given tag
597	Loads the mode from the editor .
598	Function to update scrollbars .
599	Starts the blinking .
600	Returns the coordinate of a line at the specified position .
601	Updates the doc at the given range in the document .
602	Update the selection .
603	Highlight a line .
604	Get the value of an override
605	Represents a flow .
606	Remove an event
607	Trigger an event .
608	Loads the event data for the web Explorer .
609	Generate a unique file name
610	Handles all the files in the queue .
611	Create an input element
612	Initializes the click event on the DOM element .
613	The method to remove all DOM nodes
614	Determine whether the files are uploaded
615	Determine if all uploaded files have been uploaded
616	Start the next upload .
617	Process each file in the list of files .
618	Removes the specified file
619	Get the file by id .
620	Calculates the speed of the file .
621	Update the upload handler .
622	The default event handler
623	Start the upload handler .
624	Initialize the flow .
625	Returns the progress of each chunk in the stream .
626	Determines whether all the chunks have completed .
627	Calculates the speed of the file .
628	Reads the webpack file .
629	Start the test request
630	Read the file .
631	Handle the status of the request
632	Get a GET request .
633	Evaluate options
634	Iterate over an object
635	Create the json table
636	Check if the user is valid
637	Insert the table content into the database
638	Count the number of records in the table
639	Update row .
640	Create a getter for a header .
641	Create a new Task
642	Representation of an array param to a file name .
643	Maintains transformation of transformation
644	Represents a range parameter .
645	Creates a new instance of the configuration .
646	Constructs a Cloudable binary application .
647	Determine the mode of the given env variable
648	Determines the lodash object .
649	The base configuration object
650	Finalize resource type
651	Constructor for Drag .
652	Iterate over the given object .
653	Reduce the specified function to an array of keys .
654	Checks if the given value is a plain object .
655	Sort log messages by type
656	Creates DOM nodes and attributes .
657	Add a CSS class name to an element
658	Toggle class on element .
659	Get the pointer position of a pointer
660	Appends content to an element .
661	Returns a cached data object for the given element .
662	Checks if an element has a data object .
663	Removes an element from the data cache .
664	Helper function to handle multiple events
665	Removes an event listener from the given element .
666	bind events on an event
667	Setup setup functions .
668	Set auto timeout
669	Set text content
670	return a throttled function
671	Determine if type is valid
672	Constructor for the Component .
673	Helper function to check range ranges
674	Retrieves a function in a range of ranges .
675	Create a time range from a time range
676	Returns an array of time ranges .
677	Constructs a TextStream .
678	Get the file extension for a given path .
679	load a track
680	Constructs a color object
681	detect the player support for a player player .
682	Checks if the value is a valid option
683	Checks progress of the progress event
684	Tries to find the first truthy value for the given configuration .
685	Mark a plugin .
686	Trigger a setup event .
687	Creates a new plugin
688	Creates a new plugin instance
689	Play a video
690	Number of bytes
691	Sets the colors for each bar in the data section
692	Broadcast a message to all modules
693	Setup the window resize event .
694	Initialize the breakpoint
695	Create a new Handlebars environment .
696	Renders options
697	Set up the message
698	Redraw the number of slides
699	Initialize the module .
700	Returns information about the tab .
701	Get or get a property from an object .
702	Calculates the viewport position of the window
703	Checks if the current version is enabled for the latest version
704	Parses a version string .
705	Create cell accessor .
706	List all projects .
707	Get environment variables from process .
708	Filter environment variables .
709	Merges multiple plugins into one .
710	Register a template in the cache
711	Returns a function that can be used as a template
712	Render a single engine
713	Remove a socket from a local socket
714	add a connection to the session
715	Returns status of a job .
716	Prepare a job with the given options
717	Kill model attributes
718	Set the body of the request body .
719	Verifies the POST body parameter list
720	Generate a new project
721	Check if req . user has redirect to login
722	Verify that the user is authorized .
723	Block compiler .
724	Find nested folders
725	Resolve absolute paths
726	Finds all libraries in the app .
727	Fix file contents .
728	Create accessor function
729	Get accessor functions .
730	Parse the AST .
731	Check that all references in the data reference .
732	Initialize the Program instance
733	Sets a single option .
734	Run the runtime
735	Aborts the loading process .
736	Return the registered event type .
737	Unregister a listener for the specified event
738	Bind a listener to the specified event .
739	Check if cap capability is a valid map .
740	Returns the version of the shim if available
741	Removes the SWF element from the DOM
742	Check if url is origin
743	Module constructor .
744	find index of array
745	Compares two arrays of needles .
746	Finds the intersection of two arrays .
747	Parses the size of a string .
748	Add a field to the record .
749	Iterate over each field value
750	Validates CSS class
751	Adds class name to an object if it exists
752	Add class on object
753	Get the style for the given element .
754	Calculates the x y position of a node .
755	Get the x and y coordinates of a node
756	Get element s size
757	remove all events
758	Prepend content to Blob
759	Rotate image
760	Calls a list of entries recursively .
761	Encode a URL
762	Creates a Header .
763	Extract header value from response .
764	Sets the current MIME type .
765	Send data to the server
766	Callback for XHR .
767	Extend target with another object
768	Destroy the image
769	Defines getters and setters for a given property
770	Define a property .
771	An error .
772	Calculate rotation matrix
773	Calculate e .
774	computes how many other points are equal
775	compute distance between two references
776	returns the ticks of all ticks
777	Use auto period format to figure out what we need to figure out the date format .
778	Validates the given chart model
779	return an array of ticks
780	Rounds a number to a precision
781	Merge default values .
782	Suggest a random tick number of ticks
783	Detect number separators
784	Returns transformer used to transform the file tree .
785	Validate information .
786	Handle a resource
787	warn a node
788	Returns the closest reference to the reference .
789	Get the hash of a URI
790	read map from source map
791	Middleware for the current request
792	Parse IP address
793	Get the value of the given property
794	Retrieves a single sub - funnel
795	Applies middleware to a container
796	Add middleware function
797	Create a new provider
798	Create a new Provider
799	Create a new service
800	Create a new Service
801	Create a service instance
802	Define a single property
803	Define nested value inside container
804	Bind value into value .
805	Define a constant
806	Decorates a decorated function
807	Creates a factory instance
808	Populate the given value .
809	Register a service
810	Reset a list of providers .
811	Throws an error if the given node is invalid .
812	Determines whether or not an event declaration is of an event declaration or not .
813	Registers a handler to be executed inside a contract
814	Finds the variable declaration of a given variable declaration
815	Reports the program in the program
816	Removes the ident identifier from the given identifier .
817	Check all functions in contract declarations
818	Check call expression
819	Checks the program statement to see if it exists .
820	Finds all fixes in the given source code .
821	Find top level declarations in the top level node
822	Inspects block statement .
823	Gets the text of a node .
824	Check for variable declaration declaration
825	Processes the rule context for the given rule
826	Resolve the source for the upstream filter .
827	Resolve plugin config for a plugin
828	Writes the supplied configuration file .
829	Lints a given source code .
830	Lint a file
831	Creates an instance of CliOptions .
832	Validates a list of options .
833	Check node .
834	Checks if a value is a hexadecimal string .
835	Simplified library .
836	Creates a player player .
837	Play instrumentation .
838	Returns true if the given library has a given name .
839	wrap a promise - returning function in a promise
840	Start the git hook
841	Resolve ignore options
842	Require a prop .
843	Convert a prop to 1 value .
844	Create a babel parser for babel .
845	Creates an image loader .
846	Parses a CSV loader .
847	Creates a css loader .
848	Prepend a new entry to the root entry
849	Main build function
850	Recursively merges two data .
851	Set default value for a default type
852	Shorthand for validation
853	Convert VueType to Vue type
854	Validate a value
855	Custom Event constructor
856	Initializes a custom Event constructor .
857	Cleans up all runtime events .
858	Add runtime events to runtime .
859	normalize event coordinates
860	Listener for the pointerup event .
861	Event handler for mousemove events .
862	Add tracking point
863	Calculate and update target position
864	Start the drag gesture
865	step 5 . 5ms
866	returns the bounds of the bounding box
867	returns a map of components names
868	Append new log to newline and write new lines to the new file .
869	Seek to read data from EDR
870	Creates a job based on a sandbox
871	Cassanova .
872	Creates a new webworker .
873	Returns a wrapped function that can be used to wrap this promise .
874	Merges all entries in the destination array .
875	Wrap a function with a list of listeners .
876	Given a callback returns a wrapped callback with the same length asynchronously .
877	Returns a directory containing the specified directory contents .
878	Creates a new async function and returns a function that can be invoked concurrently
879	Makes an async function iterable .
880	Makes a non - async function .
881	Recursively traverse the given object .
882	Convert a thunk into a promise .
883	Get the list of files of a directory
884	Copy the scoped index to another one .
885	Move the index to another one
886	Checks if index exists
887	Load a module .
888	Parses the Accepts language .
889	Parse the language language .
890	Gets the language priority for this language .
891	Get the index for a specific language .
892	Returns the preferred language in the list of supported languages .
893	compares two strings
894	Parses the accept - charset string .
895	Parses a string and returns the charset .
896	Returns the priority for the given charset .
897	Get the index of the specified charset .
898	Returns the preferred charset based on the supported options .
899	Parses the encoding of the given string .
900	Gets the priority for the specified index .
901	Returns the preferred encoding of the accepted options .
902	Parses a multipart media .
903	Parse media type .
904	Determine the media type based on a media type .
905	Parse a media type .
906	Computes the preferred media type based on the Accepts
907	Get the number of quotes in a string .
908	Splits a pair of key and value pairs .
909	Splits a Media Collection
910	Splits the parameters into parameters .
911	Loads webpack config .
912	Assign a key to an object
913	Parses filter string into a filter string
914	Evaluate a page and return the result
915	Waits for a page on the page
916	Main constructor function
917	Return a list of colors
918	Creates a cube for RGB pixels .
919	Convert colors array to an array of RGB values
920	Compress an array of colors .
921	Convert data to RGB
922	Start a download of a file .
923	Loads the options
924	Create a channel
925	Handle error .
926	Create a new app connection
927	Handle connection error
928	Simple application .
929	Throws an error if app is provided .
930	Parse a shard string
931	Compare two nodes
932	dispatch native DOM events
933	helper function for creating MC addresses
934	Returns the data type of the given value .
935	Get data from event data
936	Defines a redis descriptor for the given key
937	Define callbacks for callbacks
938	Define a custom EventEmitter prototype .
939	Get wrapper for the given event
940	Wraps the event target .
941	Gets the listeners of the specified event target .
942	Define an event descriptor
943	Creates a custom CustomEventTarget object .
944	Determine file upload
945	Called when a batch count is done
946	Handler for the mouse pointer
947	Initialize a new TeamCity reporter .
948	Convert a integer to a number .
949	Deserialize a JSON string
950	Serialize a JSON document .
951	Serializes a JSON object
952	Returns a function that can be used to define a virtual module .
953	Get the filename for a hash
954	Match a semver to a semver version
955	Match the given protocol protocol
956	returns true if two arrays are equal
957	Get source rule string
958	Creates a timeline .
959	find method by class prototype
960	dump files to list of files
961	A package .
962	Build the package . json
963	Clear temporary files
964	Abort the process
965	Run the provided content with the given handler .
966	Patch patches .
967	Executes patches with the given content .
968	The dependencies object
969	Check if the text property is valid
970	Formats a given HTML URI .
971	Formats the HTML URI
972	Generate a HTML URI .
973	module . exports
974	Makes a 32 - bit 32 - bit hash .
975	Makes a 32 - bit hash .
976	Binds all keys to an object and creates a new scope for the given object .
977	Set the parent helper
978	replace key attribute value
979	Removes the last node from the list
980	Change the value of a node
981	Gets the next node in the queue
982	Update the value of a path
983	Constructor from Node
984	Remove a given node
985	Process the nodes of an AST node .
986	Matches nodes in a given node .
987	Rehydrate an object .
988	Render an Element
989	Check that feature is included in a feature
990	Generate names of entity names .
991	Deep copy of configs
992	Loads configuration from Github
993	Get base params
994	Gets a config of a file
995	Define a property on an object
996	Swap the logger .
997	Inject the manifest into the page .
998	Injects the SWP tag .
999	Inject async loading page .
1000	React to css .
1001	Execute a child process
1002	Runs a child process using a child process .
1003	Calculates the slope of the line .
1004	Returns true if the attribute is a reserved name .
1005	Create markup for the given attribute .
1006	Traps a top - level event by using event bubbling .
1007	Creates a new update queue
1008	Mounts a class instance .
1009	Refresh the current state and update it if needed .
1010	Returns true if the last time should be yielded .
1011	Delete a property from a DOM node
1012	recursively update the properties of the DOM
1013	Simplistic implementation
1014	Creates an exporterStrategy .
1015	Constructor for Backbone .
1016	Constructs a new function call .
1017	Creates a new channel .
1018	Create a new MongoDB connection .
1019	Dragging object constructor .
1020	Represents a set of known expressions .
1021	Sorts an array of operators according to a comparator .
1022	Extracts values from the program arguments
1023	Creates a function that invokes the program for the program .
1024	Process the cycle in the cycle evaluation
1025	select the target tree by executing the evaltions
1026	Perform the steps of the cycle
1027	Apply a function to all arguments
1028	Define a block of the flow .
1029	Call this function .
1030	Define a flow .
1031	Pad str with length
1032	Shorthand Curve
1033	A SMART pair
1034	Create a gulp file .
1035	Register a listener for an event
1036	Removes an event listener from the specified object
1037	View constructor .
1038	Construct a new Product
1039	Create a new Cartcar
1040	functions for retry
1041	Convert commit date to date
1042	Unbinds all events
1043	Refresh the current series .
1044	Creates a google login instance .
1045	create a cell
1046	Returns the string of the enum values of a given enum
1047	Converts a Long type to Long String .
1048	Creates a random mapper
1049	Takes a date and returns a string representing the day of time .
1050	Factory for logging functions
1051	Run the request queue
1052	Create a JSONP request
1053	Validate the parameter value
1054	Convert a parameter to an array of type declarations
1055	Convert a yaml - param declaration declarations to an array of arguments
1056	An ngram parser .
1057	Collect all scenarios from a DOM element .
1058	Sends changes to the server
1059	Render the specified AD element
1060	Unmounts a panel
1061	Applies data to the server .
1062	Creates a new table .
1063	Handles the action from the collection .
1064	req . filter
1065	Attach a component to the store
1066	Initialize the store .
1067	Unregisters a store .
1068	Dispatch data to a table
1069	Filter table by id .
1070	move the table to the given direction
1071	Keyboard menu .
1072	Handles row selection
1073	Extract value from node
1074	Maps a value to an object or array .
1075	Filter obj .
1076	Finds all elements of the specified object in the given array .
1077	Add an item to an array .
1078	Replace item in array according to array amount
1079	Finds the intersection of two arrays .
1080	Removes an event listener from the specified object .
1081	Suspend event with specified actionName .
1082	This function is called when a dependent property is changed .
1083	Sets a property on an object .
1084	Sets the value of the key .
1085	Removes a key from the List .
1086	Iterates over the collection and executes the callback on each key .
1087	Disconnects this binding .
1088	Filter functions .
1089	Represents a container in a container .
1090	Registers a factory .
1091	Removes a fullName
1092	Returns the resolver for a fullName
1093	Adds a type injection .
1094	Adds injection to the injection configuration .
1095	Adds a factory injection .
1096	Get a parent .
1097	Check if a parent is present .
1098	Iterates over all the objects and calls the callback .
1099	Returns the normalized string for the given string .
1100	Set the value of a property to the current value .
1101	Removes a property from the current set of values .
1102	Create a new class prototype
1103	Gets the meta property of a given key .
1104	Check if a property exists .
1105	Returns the set of elements without the specified value .
1106	Returns a new Map .
1107	Invoked when the object observable is observable .
1108	Called when the object observable or all objects have changed .
1109	Reduce computed property to an array of computed properties .
1110	Adds all the specified objects to the receiver .
1111	Removes all objects in the specified enumerable .
1112	Sends an event to the specified event .
1113	Creates a new promise which will be resolved when the promise is resolved .
1114	Sends a promise to the current value of this promise
1115	Adds action parameters to the props object .
1116	Argument action .
1117	Adds an item to the array .
1118	Removes an item at the specified index .
1119	Gets the last item in the array
1120	Representation of an array operation .
1121	Match with an array operation .
1122	Finds an operation at the specified index .
1123	Removes an item at the specified index .
1124	Observes all the content of the content for each item in the array .
1125	Removes all objects in the array .
1126	Removes the enumerable properties of this object .
1127	Removes the last element from the set .
1128	Finds a child element by its id .
1129	Set the className of the element .
1130	Get or set an element with the given name .
1131	Get an attribute .
1132	Returns the current HTML string of the element s innerHTML
1133	Sets up event listeners for the application .
1134	Registers an event listener on the given root element .
1135	Returns the nearest ancestor instance of the given class .
1136	Finds the closest parent for a property .
1137	Finds the parent view of a given class .
1138	Adds a buffer to the render buffer .
1139	Removes the class from the DOM .
1140	Applies the attribute bindings to the current value .
1141	Sets the value of a property for the given attribute .
1142	Splits property class name into an object .
1143	draw a child view
1144	Removes the rendered buffer .
1145	Clears a view .
1146	Removes a view from the DOM
1147	Calls the specified event with the specified name and event name . If the view exists it will return false otherwise .
1148	Removes a child view from the DOM .
1149	Handles a child view .
1150	Called when a child view is removed .
1151	Sets the content of the specified content .
1152	Trigger an action .
1153	Evaluates a property on the given object
1154	Renders a view into a template .
1155	Binds a child view to the specified property
1156	Add the auto - phase check if there is a markdown element .
1157	Terminates all transition handlers .
1158	Add views to the router
1159	Traverse the given controller and render it .
1160	Tries to find the model with the given name
1161	Get the properties for the given model .
1162	Get a controller instance .
1163	Connect to the specified outlet .
1164	Registers the current route .
1165	Transitions the link to the link .
1166	Replaces the route with the provided args .
1167	Checks if an outlet belongs to the specified outlet
1168	Destroys the outlet .
1169	Get the fragment identifier of the page .
1170	Internal method to handle history changes
1171	Register a callback when the URL has been clicked .
1172	Run the router .
1173	Resolves a full name by name
1174	Find a template by name .
1175	Register the router
1176	Runs all initializers and initializes them if needed .
1177	Call this function until the readiness of the current application is ready .
1178	Initializes the custom events dispatcher and sets up the custom event dispatcher .
1179	Create a Container with Ember .
1180	Observes the given record and changes to the observer .
1181	Adds an observer to this collection .
1182	Return a list of all namespaced names .
1183	Register a callback to be called when a callback is called .
1184	unregisterWaiter registers for this event .
1185	Restore original versions of the test methods .
1186	Wrap method with a callback function
1187	Converts an object descriptor to a Property descriptor .
1188	Normalize attribute descriptor .
1189	Returns true if the given object is a new one or not .
1190	Gets a trap function
1191	Registers a property on a type .
1192	Clones the object .
1193	Searches an object .
1194	Wrap an extension object .
1195	Delete a property
1196	Recursively iteratee .
1197	Gets all the keys of the specified object .
1198	Gets all the keys of this object .
1199	Makes a method that calls a method on an object and returns a method .
1200	Create a new Object with the specified properties .
1201	Serializes the record
1202	Serializes the given attribute into the JSON representation of the record
1203	Serializes a relation to an object
1204	Format the relationship for a record
1205	Extract the extract from the given payload .
1206	Removes an object from the given payload .
1207	Saves the record in the array .
1208	Adds a record to the Record .
1209	Add a record to the database .
1210	Returns a unique ID for the given type and record .
1211	Retrieves a record for the given type
1212	Finds all instances of the given type .
1213	Reloads a record from the given record .
1214	Recursively finds all records in the given object .
1215	Determine if a record has been registered
1216	Get a record from the database .
1217	Fetch the given record from the given type
1218	Returns the record for the given type
1219	Unload and destroy all records .
1220	Filters the given type and records in the database .
1221	Reset all records in the database .
1222	Called when the record was updated .
1223	Assigns a new record to the original record .
1224	Returns the record mapping for the given type .
1225	Adds a record to the database .
1226	Adds a new payload to the given type .
1227	Sets the metadata for a given model .
1228	Creates a new record
1229	Adds saved records to the saved record .
1230	Recursively clone an object
1231	Called when the attribute has changed .
1232	Check if the attribute has changed .
1233	Sends a transaction to the server .
1234	This method is called when a change occurs .
1235	Sets the association of this relation .
1236	Saves the model on the server .
1237	Reload a record
1238	Sets the value of the given attribute .
1239	Iterates over all attributes and calls the callback function .
1240	Iterates over all attributes and calls the callback function .
1241	This will be called once after a property has been added to the constructor
1242	Iterates over all the relationships .
1243	Checks if the records are changed
1244	Does the given record in the given array .
1245	Update the array of records in the given array
1246	Convert records array to a record array
1247	Creates a record array and stores the record in the database .
1248	Create a filtered record in the store
1249	Creates a new RecordArray instance
1250	Adds a record to the given array of records .
1251	Adds the loadingArrays to the stack .
1252	Serialize the record .
1253	Finds all registered items in the store .
1254	Format the fixture for the given type
1255	Serialize record to a given record .
1256	Normalize the type and normalize the hash
1257	Normalizes the record with the given payload .
1258	Normalizes the primary payload into the primary key .
1259	Normalizes the payload for the given type .
1260	Serializes a type in the hash table .
1261	Format the association for a relation .
1262	Get the content of a type
1263	Get data for type
1264	Request a record
1265	Create a POST request
1266	Delete a record
1267	Build the url for the specified type .
1268	Ajax request method
1269	Constructor for an inflector .
1270	Converts a key to a unique id .
1271	Serializes the record into a serialized record
1272	Serializes the association for a relation .
1273	Converts a string into a camel case
1274	Convert camelCase to camelCase .
1275	Function to add an association to the root type
1276	Serializes the associations of a relation .
1277	Update the embedded record .
1278	Updates the payload according to the type of the given type .
1279	Converts a type to its name .
1280	Get an error object
1281	Parses a key - value query string into an object
1282	Set or update an attribute
1283	Compiles the given nodeList .
1284	Adds group helper functions to group links .
1285	Replace an element with another one
1286	Evaluate array declaration
1287	Checks whether the requestUrl is the same as the same origin URL .
1288	Recursively traverse DOM nodes .
1289	WebSocket client .
1290	Creates a new Connection object
1291	Create a markdown node with type and attributes .
1292	Create a new JSDoc request .
1293	Reads the bootstrap from the bootstrap file .
1294	Fix tsconfig . ts configuration
1295	Checks if the reference file exists .
1296	Install native native script package .
1297	fix package . json
1298	fix main entry point
1299	Fix ignore file ignore pattern
1300	Displays the help for the script
1301	Creates a function that invokes func with the given arguments .
1302	Attempt to describe a native JavaScript object .
1303	Extracts the object associated with the given callbacks .
1304	Set the value of the given callFrameFrame for the given callbacks .
1305	Validate a tile .
1306	2 . 2 . 2 . 2
1307	Constructs a new errors object with the provided data .
1308	Creates a zip file .
1309	Execute a command
1310	Convert file to string
1311	Merge YAML contents from one file and merge them together .
1312	Loades a settings file from a settings folder .
1313	Determines the kss class if needed .
1314	print error and exit
1315	Get the local bucket name from the config .
1316	Builds the nested layouts
1317	Builds a configuration based on the given options
1318	Builds a lambda
1319	Send a response to the console
1320	Convert an object to a string
1321	Creates an array of sources .
1322	Open a popup
1323	Opens a custom exec function .
1324	Opens a popup
1325	Opens a popup
1326	Gets tag range
1327	Checks whether the given HTML tag is between the opening tag .
1328	Gets whether the given editor should be applied to given context .
1329	Returns completions for a given document
1330	Retrieve completions for given editor .
1331	Generate style snippets from the given registry .
1332	Get markup snippets from the given registry .
1333	Extracts the prefix of match .
1334	Validates a marker
1335	Toggles a boolean value .
1336	Determine if attributes are changed
1337	Get the listener for the given property
1338	Creates a new Property
1339	Represents an image
1340	ship task to ship
1341	Inject template function .
1342	Returns a function that checks size with size of the raw size
1343	Add two 64 - bit integers wrapping at 2^64 .
1344	Constructs a DataStream .
1345	Gets the sandboxed map from an AST
1346	Break the sandbox into the given sandbox expression .
1347	Parses the given sandboxes
1348	Get usage information for an AST node .
1349	Wrap an MDAST event so it doesn t need to wipe them .
1350	pipe items
1351	matches if html block
1352	the main function
1353	Binding helper .
1354	Position a row in the rect .
1355	finds the class hierarchy
1356	Convert an object to a string
1357	Increment if the line is in block and if it is not in block .
1358	Recursively wrap line conditions
1359	Checks if the given decision is true .
1360	Count the number of lines
1361	Change the anonymous function name to anonymous function .
1362	Recursively wrap conditionals
1363	Define a new module
1364	Calculate coverage for the test .
1365	Add mixins to a mixin object
1366	Recursively merge the properties in the right object .
1367	Returns a deep copy of the config object .
1368	Extracts the dependencies of a module that should be included in the modules folder
1369	Merge config objects .
1370	Adds merged plugins to lint config .
1371	generate compiled code
1372	Wraps the given code in an extension object .
1373	Determine the correct type .
1374	3 . 3D Transform
1375	Go to the drone .
1376	This function returns the delta to the scroll position of the drone to scroll to the screen .
1377	parse config options
1378	Parse an HTML document
1379	Convert the buffer to a tarball
1380	Makes a URL and converts it to a string
1381	Asynchronously read the file from the given options .
1382	Convert an error to a string
1383	Check for response types
1384	Ensure that node is a promise
1385	Prepare write to file
1386	Parses an HTML string and parses it to a sitemap
1387	Run the actual input .
1388	Opens the input
1389	Perform input
1390	Takes a value and returns a normalized function .
1391	If no options specified will be used .
1392	Pre - process options .
1393	Return the path for the page path
1394	Determine the index for the page .
1395	Invokes the generator function with the given options .
1396	Creates a new URL map
1397	Determine if path exists
1398	Returns the path of the phantomjs executable .
1399	Creates a new PhantomJS worker .
1400	Preprocess options .
1401	Start listening to a single file .
1402	Creates a synchronous lock handler
1403	Notify the Notification class
1404	Start a notification .
1405	Add a file to the filesystem
1406	Check if a file exists
1407	Remove a file
1408	Removes the specified file
1409	Write the snapshot to the page
1410	Check if the user is allowed for comments .
1411	Get a robot url
1412	Read robots file
1413	Bubble up a bunch of values .
1414	Returns an array of the elements between a and b
1415	Calculates the current timestamp
1416	Extract server options from a URL .
1417	Prepare the params for the query string .
1418	Strip trailing slash .
1419	Get a copy of the properties object .
1420	Add event to the server
1421	Prepare request parameters
1422	Add a request to the server
1423	Get the metrics
1424	Makes an HTTP request
1425	Returns a sorted array of promises .
1426	Returns the next sibling after the given parent node .
1427	Classify a value .
1428	Factory to create a factory instance .
1429	Create function that binds columns to the database
1430	The implementation of ZeroClip class .
1431	generate a random sentence
1432	Backup constructor .
1433	Build css .
1434	Runs the series of tasks in series .
1435	Filter type by documentType
1436	Pad the given value with padding length .
1437	Resolves collection definitions
1438	Assigns user s roles to the user .
1439	Gets all channels for a channel .
1440	Output the help .
1441	Return a human readable representation of a argument
1442	Validates the given property list of properties in the provided object .
1443	Build the path for the given item stack .
1444	Get business ID from BEM
1445	Returns a default sync channel which can be used to sync
1446	Returns true if the given value is a valid date string .
1447	Takes an ISO 8601 timezone and returns the timezone offset .
1448	Compares two numbers if a is less than the given amount
1449	Compares two dates .
1450	Convert the given value into an ISO 8601 time zone number
1451	Starts all Nails
1452	Stop the exit code
1453	send message to entity
1454	Delete an entity from the database
1455	Saves the entity to the process .
1456	Get module from file
1457	Get entity context
1458	Get a module
1459	Process sources object .
1460	Generate the catalog log data .
1461	Log a module
1462	Generate AMP instances
1463	Build directory recursively
1464	Generate PID
1465	save the cache
1466	Calls the modules cache
1467	Calls the ModuleExports
1468	Stop the broker cache
1469	Load a protocol module
1470	Remove a directory
1471	Get mouse position
1472	Proxy redirect function .
1473	Injects the proxy header for the given request .
1474	Parses a proxy config .
1475	Parse config .
1476	Parses a configuration map .
1477	parse command line arguments
1478	Parses the command line argument and calls the callback with the given arguments .
1479	Parse the forward rule .
1480	Get an error object
1481	Update the state of a branch
1482	Fetches branch information for the given driver
1483	Initializes the branch for the given driver
1484	Convert a buffer to an array
1485	Convert a buffer to a string
1486	Compare two buffers
1487	Returns a merged list of files in the working directory
1488	Returns a merges in the tree of the working directory
1489	Find the SHA of a file at the given path .
1490	Prepare the commit options for a working repository
1491	Flush the commit branch .
1492	Format messages with colors
1493	Push a remote branch to the local store
1494	Pulls a branch from the repository
1495	Compares the tree of a branch references .
1496	Resolves conflicts with given tree
1497	Merge commits into a commit tree
1498	Gets the resolved entry of a tree that should be resolved .
1499	Add a blob to the cache
1500	Get the tree of a repository
1501	Normalize a commit to a commit .
1502	Normalizes a commit to a commit .
1503	Return the file size of the repository .
1504	Synchronously read a file .
1505	Determine if file path exists
1506	Remove a file at the specified path .
1507	Move a file or directory to a new filepath
1508	Determine if the state has changed .
1509	Initializes the default connection
1510	Configure Nails server
1511	Configures the express application .
1512	Configures the proxy server
1513	Clean up all rules
1514	Sets a file change in the history .
1515	Reverts all changes in the repository .
1516	Reverts the given file at the given path of the given file .
1517	Reverts a repository s contents of a given repository
1518	Reverts all tracked changes
1519	Normalize path .
1520	Check if path exists
1521	Recursively read a list of files recursively
1522	Moves files to a directory
1523	Creates a new branch
1524	Updates the current branch for a given branch
1525	Removes a branch from the store
1526	Fetches a blob from the local storage
1527	Retrieve OAuth2 token .
1528	Kolodoc object .
1529	Convert features array to a string
1530	Maps a feature name to an index .
1531	Adds features to a set of features .
1532	Converts a set of features to an array of features .
1533	Converts an array of hash names into an array containing keywords .
1534	Convert feature array to hash table name
1535	Convert an array of arrays to a hash .
1536	Performs a set of super labels on the given model .
1537	Given a data set of labels create a super label for the given dataset .
1538	Recursively classify the given tree .
1539	Constructs a new binary class .
1540	Constructor for features
1541	Sets the weight of the class .
1542	Constructs a new classifier .
1543	Assert PFT
1544	Calculates and labels for expected CSS class .
1545	Calculates the explanation for a given class .
1546	Prepare the explanation for the given input .
1547	Train the given dataset
1548	Convert the given model string into a map of features
1549	Convert features into a relation table
1550	Simplification module constructor
1551	Train the given dataset
1552	Convert a linear model string to mapLabels
1553	Set labels on labels
1554	Initialize the multiclass .
1555	Concatenate options arrays and arrays of options
1556	Preprocess each node in test order .
1557	Filters relations in a relation
1558	Returns all files that match the given filter name .
1559	Traverse the bundle and return all resources .
1560	Returns a list of resources that match the given filter .
1561	Returns a list of bundles that match the given filter name .
1562	Get the path to the bundle path
1563	Creates a seed instance .
1564	Creates a new bundle
1565	Called when a given path is loaded .
1566	Checks if a file path matches the specified rule .
1567	Process a bundle .
1568	Registers a bundle .
1569	Returns true if the response contains a filter .
1570	Gets the package version from the given package .
1571	Deserialize a list of dependencies
1572	Synchronously load a directory .
1573	Copy keys from src to src object
1574	Bundle constructor .
1575	helper function to get base scale and scale
1576	A buffer buffering
1577	Build gulp task .
1578	Convert a line into an array of chunks .
1579	Prints the usage command .
1580	remove items from an array
1581	Imports CSS files to import .
1582	Validate the plural placeholders
1583	Get groups by text
1584	Traverse the given json object and apply the callback
1585	Recursive function to find all dependencies
1586	Parses a query string into an object
1587	Convert an object into a string
1588	Compile a string .
1589	Bind events to a dom element
1590	initialize this class
1591	adapted from jquery
1592	query the value of a jq value from a jquery
1593	Decorates all required modules for a given module .
1594	Invoke coverage .
1595	Shortcut .
1596	Find elements by name
1597	Upload the coverage report to the server
1598	Constructs a new Task HTTP HTTP HTTP HTTP HTTP HTTP HTTP
1599	Execute git command
1600	Defines the slug error .
1601	Creates a scoped CSS object from a scoped element
1602	Combines the given CSS template with the given CSS template string .
1603	Construct an InvalidSlugError .
1604	Asserts that a build has the same commit .
1605	Trims the trailing slash .
1606	Parse options .
1607	Convert obj to a string
1608	Render all pages
1609	Get the git git path from a git repository
1610	Get the content of the robots file .
1611	Compile the index . html
1612	Sort the mention array
1613	Finds an individual emoji in a string .
1614	Takes a function and turns it into a single function .
1615	Processes a regular expression .
1616	Parses a selector .
1617	Creates a new index
1618	Creates a new migration table .
1619	Creates a new seed table .
1620	close the database
1621	Parse params
1622	Return true if the props passed in .
1623	Execute the Cli CLI
1624	Determines whether the log level is allowed for the log level
1625	Get the value of the radio button .
1626	creates a map of attribute names
1627	Bootstrap the model
1628	This is called when the controller changes
1629	Listen for changed radio changes
1630	Parse cookies .
1631	Search for a cookie
1632	Sets cookie value .
1633	Checks if the cookie is valid .
1634	Formats the given string of messages .
1635	Create zoom range path
1636	Synchronously synchronize the zoom level .
1637	Add a selection to the chart .
1638	Applies selection to the chart .
1639	Create the select path
1640	Synchronizes the selection .
1641	Initialize data watcher
1642	Initialize data watcher
1643	Add guid to the data model
1644	Returns a function that loads an entity .
1645	Generate action values
1646	Generates action creator for given action type .
1647	Generates a random number between min and max values .
1648	Log action details to the console
1649	Removes a subscriber from a subscriber .
1650	Removes all callbacks for the given events .
1651	Subscribes to a list of callbacks
1652	Gets the events for a given channel .
1653	Returns all subscribers for a given channel
1654	Subscribe to a given channel .
1655	Unsubscribes a specific event from a given channel .
1656	Sends a subscriber to the stream
1657	remove a subscriber from the channel
1658	Execute the handler function
1659	Sets up the subscriber for the given event .
1660	Resolves a namespace with the given namespace .
1661	Returns a function that can return a promise which can be resolved once
1662	Creates a callback for the given context .
1663	Executes a function and resolves the resolved promise
1664	Creates a fake instance of a fake module .
1665	Returns true if obj is a jQuery object .
1666	Determine if an event is an Event .
1667	Add methods to the module s methods and add them to the module s methods
1668	Wrap a method with the given interface
1669	Register a fake module
1670	Maps a module instance to the given module id and returns it .
1671	Start a multi - module instance
1672	Prepare the init function for a single object
1673	Start a single module
1674	Start a single module .
1675	Creates a new instance of the given module and calls the callback function with the given properties .
1676	Creates a function that will be applied to the provided template object
1677	Start all available modules
1678	Stop module .
1679	Clear the instances of the module instance
1680	Stop a single module instance
1681	Stop all available modules .
1682	Stop the module by id .
1683	Removes a module from the given map .
1684	Delete the given module
1685	the main function
1686	Get the value of the picker property .
1687	Set the value of the picker
1688	Get the value of the picker element
1689	Creates a Markdown serializer for Markdown docs .
1690	Convert Markdown text into a markdown document
1691	Take a suite and return the last stack
1692	Enter a root node in the tree .
1693	Add a new snapshot of current node
1694	Push a new snapshot code to the current state .
1695	Transform suite into suite .
1696	transform a snapshotList into a string representation
1697	Builds a suite header string .
1698	Determine if a string should be escaped .
1699	Returns the default path for a given suite path
1700	Creates a list of files for a given limit list
1701	Formats a list of cached warnings for a given list .
1702	Generates a preprocessor for the snapshot .
1703	Plugin plugin for singleline .
1704	Replace empty lines with newlines .
1705	Creates a new block of blocks .
1706	Checks if entity has any entity list .
1707	Convert hex value to hex string
1708	Convert CSS rule to HTML markup .
1709	Initialize Analytics
1710	Debug namespace
1711	Determines if obj is an ArrayBuffer
1712	{{{ 1
1713	Decodes a string .
1714	Poller constructor .
1715	If we are going to abort the transition from the transport .
1716	Cleanup the listener
1717	Backoff constructor
1718	Extract comments from a string .
1719	Binds the ng model to the ng model .
1720	Initialize the UI
1721	this is a helper function
1722	add an api object
1723	Get the JSON data for a remote resource
1724	Split a method name into a method name .
1725	Copy the request to the remote server
1726	Create stack trace from prepareStackTrace
1727	Global stdout handler .
1728	Create a hook for output .
1729	Bind to the stream .
1730	Wraps provided function in interceptor .
1731	find nearest option
1732	Handles the double rounding function .
1733	Adds frame to array .
1734	Returns a transformer that transforms an HTML node .
1735	Factory for creating nested nodes .
1736	Patch all node s children with a number .
1737	the main function
1738	Return a set of properties on a node .
1739	Patch node .
1740	Fires an event .
1741	Creates a delegate delegate to the specified root element .
1742	Create a new Module instance
1743	Converts the structure into a binary array
1744	Adds a query to the query .
1745	Helper function to handle nested query parameters
1746	Creates a new knex instance .
1747	Closes all instances of the registry .
1748	Highlight a HJS highlight .
1749	Render processor .
1750	Creates a color for a marker
1751	Template node literal
1752	creates a promise - returning function that resolves when a file is complete .
1753	Walks the results
1754	calculate the block number of blocks
1755	Read a stream .
1756	Read a Uint8Array .
1757	Read header .
1758	Reads a keyword summary summary .
1759	Read keyword index .
1760	Read a key block .
1761	Reads the keyword block table .
1762	Read a record summary .
1763	Read the record block of the given record .
1764	Read a block definition .
1765	Read a key from an object
1766	Find a word
1767	Maps an array to the end of a phrase
1768	Remove the next phrase in the array
1769	Get the first key that matches a phrase
1770	Match list of elements
1771	Check if a modifier key is valid .
1772	Creates a key string from a modifier key .
1773	Override a keydown event with the selected textarea .
1774	Override default key press events
1775	Execute a hook for an extension .
1776	Decode an AMP message into a Promise .
1777	Creates a new PPT
1778	helper function to read a backup
1779	Starts a callback with the given options .
1780	Format the quantity of a resource
1781	Format the value of a resource
1782	Format a value in the data buffer .
1783	Formats the specified value into a format object
1784	Format the given value as a string
1785	Formats input arguments
1786	Merge config from files
1787	Parses a property statement
1788	Extracts string literal from closing bracket expression
1789	Parse string literal
1790	Parse a numeric literal
1791	Parse AST .
1792	Take a function and turn it into a single function .
1793	Match the given array .
1794	Compile the given AST nodes .
1795	Get the name of a tag .
1796	Eat attribute value
1797	Checks if the given string is quoted .
1798	Utility function to get a value from an obj
1799	read xml file
1800	Append the ui source code to a uri .
1801	Prints error message .
1802	Compile a model
1803	Add properties to the table
1804	Creates a debounce function .
1805	matches babel if needed .
1806	Finds a table for a given model
1807	Log an error
1808	calls callback with passed arguments
1809	Finds element inside a template element .
1810	Generates a map of validators messages for the given element .
1811	Adds a class to the server
1812	configure the path
1813	connect to the mongo database
1814	Start a shell .
1815	Load all files
1816	wrap the function to create a new one
1817	Default error handler
1818	Generate a scaffolding from an HTML table .
1819	Save the object to the database
1820	create a new picker
1821	Recursively traverse all files
1822	Check if path is included
1823	Test if path is a directory
1824	Recursively process all picker files .
1825	Process a single file
1826	Initialize the http server
1827	Adds an element to the array by the given sort order .
1828	Given a config object return a function that converts it to an object
1829	Encodes a transaction .
1830	Calculate the difference between two dates
1831	init error handler
1832	Get the day difference
1833	Consumes a pair of pair from a pair
1834	Consumes an array
1835	Returns true if the given character is a valid identifier .
1836	Called when the requested object is finished
1837	Parses a JSON file .
1838	Handle next level
1839	Handle the next or upgrade
1840	Decrypt an encrypted content .
1841	Encrypt input with encrypted text
1842	Encrypt the specified content .
1843	Unpack encrypted content
1844	Derive a password from a password
1845	Generate p2kh2 key .
1846	Creates an encoder .
1847	Creates a decoder and returns a decoder .
1848	Implementer algorithm .
1849	Calculate the renaming algorithm .
1850	Single curve .
1851	Run a single path
1852	draw paths for all paths
1853	Update the selection .
1854	returns true if there are no data selected
1855	Returns true if two dimensional arrays have the same dimension
1856	Converts the given key and value into a JSX version
1857	Determines whether or not a given property has been transformed .
1858	Creates a new ReadFileCache .
1859	Called when the request completes .
1860	Agent constructor .
1861	returns a debug message for the given error
1862	Creates a new Request .
1863	Processes the request options
1864	Triggers an event handler .
1865	make a request
1866	Get a response from a request .
1867	Extend a constructor with the given class name .
1868	Create a new class prototype .
1869	Create a new constructor .
1870	Create a new headers object
1871	Parses the given icon .
1872	Decode the given options .
1873	Generate the encoder .
1874	Encode a user request
1875	Construct a 4x4 matrix .
1876	Creates a new instance of a CustomError class
1877	Constructs a new matrix .
1878	Creates a 2D vector .
1879	Creates a new Quaternion with the given arguments .
1880	Takes a 3D vector and a 3x3 x and y and y values .
1881	Creates the Snabbbar container
1882	init an element
1883	Override default options
1884	Create a new BeaconBar instance .
1885	Represents a transformation matrix .
1886	A Triangle object represents a set of Triangle components .
1887	Executes a bash command .
1888	Run a command
1889	Function to normalize the passed pattern options .
1890	Determine the path to the shell .
1891	Memory - class
1892	reduce cost to calculate cost
1893	Recursive traversal of the specified node
1894	Load providers .
1895	Executes one or more arguments
1896	Iterate over an array .
1897	Iterates over an array .
1898	Set the selected dates
1899	Starts the server
1900	Show server success
1901	Prints the current page .
1902	Copies properties from an interface to a set of properties
1903	Initialize a new token
1904	Sends an HTTP request
1905	Generate a new access token
1906	Creates an error object
1907	Create a address book
1908	Edit a book
1909	Remove a address from an address book
1910	Retrieve all book
1911	Get all the emails
1912	Add an email to the book
1913	Retrieve an address
1914	Get cost cost
1915	List all activities
1916	Retrieve all the activities
1917	Get all categories
1918	Retrieve all badges by id
1919	Create a new contact
1920	Add a new sender .
1921	Activate an activation code .
1922	Get a list of recipients .
1923	Retrieves all the information for a given email address
1924	Remove an email from a book
1925	Get all the emails
1926	Add a black list to the blacklist .
1927	Remove from the blacklist .
1928	Get the email info for a particular ID
1929	minified html
1930	Write output to html
1931	Create a Cookie instance
1932	Set cookie value
1933	Get cookie value
1934	Delete a cookie .
1935	Delete all keys on the object
1936	2 . 2 . 3
1937	Clone a gallery item
1938	Upload a local file to local storage
1939	Deletes a single bucket
1940	returns a function that dispatches the middlewares
1941	Return the next date
1942	DELETE action
1943	Request a service
1944	Get an identifier for an Identifier
1945	Gets integrations from the schemas
1946	Transform a schedule action
1947	Fetch all the items for a service .
1948	Send a request to an adapter
1949	Convert the schema to a schema definition
1950	Creates a mongoose mapping
1951	Maps the response data to a service .
1952	Read tail and append tail information to head
1953	Gets the amount of buffers .
1954	Transforms an array of pipelines into a single pipeline .
1955	Convert query params to objects
1956	Sets up the Queue
1957	Retrieve the metadata for a particular service
1958	Applies the SET action to the service .
1959	Set the metadata of a service
1960	Exports the namespace schema
1961	returns a reference to the definition
1962	Checks if value is a card list .
1963	Locates the options for the select type
1964	Determines whether an element is supported by an identifier .
1965	Expire expired service
1966	transform a range into a range
1967	Transforms a selection anchor
1968	Match endpoints
1969	Create an action object .
1970	Creates an authorization object .
1971	builds a request from an action data
1972	Get a service definition
1973	Sync action .
1974	Create a gulp instance
1975	Compile colors .
1976	Constructor for Browserify .
1977	Creates an instance of the endpoint
1978	Processes the messages according to the Swagger API .
1979	Create a new app instance .
1980	Represents a top level matrix .
1981	Encode a string to an S3 URI .
1982	write the expected json to the actual json
1983	Writes all source code
1984	Writes the map
1985	Represents a single node .
1986	Node .
1987	Node .
1988	Creates initial init methods
1989	Write content to file
1990	Detects whether a selectors should be applied to a given selector
1991	Parse a line of text
1992	The base interface for creating a common unit interface .
1993	A Composition matrix .
1994	Creates an array of vector objects
1995	Builds a matcher function
1996	Return true if the container node is a container container container .
1997	Return the common ancestor for a node
1998	Parse style attributes
1999	Calculates the distance between two nodes .
2000	Initialize a new Lexer with the given options .
2001	Initialize the Lexer .
2002	Report error .
2003	Create a new lexer
2004	Add a lexer
2005	Generate a list of arguments
2006	Create a function name
2007	parses a lexer
2008	Add a rule block .
2009	Create a node
2010	Initialize a new Lexer .
2011	Execute the recursive function
2012	Validates the current input string .
2013	Evaluate the AST .
2014	notify hook hook
2015	Pause a paused request
2016	Pause the request to play paused
2017	mim directory
2018	Copy a buffer to a string .
2019	Attempts to parse a single string .
2020	Build base config
2021	Send message to platform
2022	Generate a username
2023	Links a user to the login page .
2024	Links provider to user .
2025	Default error handler .
2026	Default error handler
2027	Register a provider
2028	Register an OAuth2 provider .
2029	Register a provider .
2030	Handles a user if the user is authenticated or a user is logged in .
2031	Creates a callback for the Auth service .
2032	Returns a callback for a passport login token .
2033	get provider path
2034	Get provider token for path
2035	A middleware to require the requested role
2036	Find layers that have been found in the layer
2037	Get the CRS object for the specified country object
2038	Update the group s layers .
2039	Parses the layers in the map .
2040	Removes layers from the map .
2041	Returns the bounds of the region .
2042	Calls the method on all markers within the group .
2043	Returns true if the layer group is tracked .
2044	Initialize the map
2045	Remove the map from the map
2046	Remove element from given array
2047	Replaces the layer with the new layer
2048	Converts the child marker to an array of markers .
2049	Handle zoom in the map bounds
2050	Handle child coordinates
2051	Fires the group
2052	Fires the markers in the map
2053	When the layer is spinner we need to remove the spider from the map
2054	Adds a marker to the given location .
2055	create an interpolation string
2056	Create a helper function for a specific number
2057	Creates a template engine .
2058	A job for a job .
2059	A worker .
2060	Handle drag events
2061	Returns the index of the first element in the array .
2062	Constructor for a child process
2063	Get included files
2064	Fetches default arguments
2065	Parses the package . json .
2066	Extracts the arguments of bower . json .
2067	ensure that the main entry point is an array of arguments .
2068	Constructor for TorAgent
2069	Runs the specified image .
2070	shutdown implementation
2071	Sets ip limit on device limit .
2072	Sets the brightness of an address .
2073	clear display of devices
2074	Helper function to format a number of integers .
2075	Generate code for a comment .
2076	Create a class instance
2077	Check if a path exists
2078	Initialize the server
2079	find dependencies by dependency
2080	remove dependency dependencies
2081	Defines a series of Columns .
2082	This is the function to execute when something is done .
2083	Recursively finds one or more objects that match the specified value
2084	Find all objects that match target object .
2085	Represents an influxDB connection
2086	Creates a function that can be used to report messages for a given handler .
2087	Starts the usage of a report .
2088	Gets a list of API calls .
2089	Builds an options object .
2090	Builds a list of commands .
2091	Initialize the Router .
2092	Get port by protocol
2093	Recursively clear all child scripts .
2094	Index of objects in an array
2095	Gets the value of all elements of an ElementList
2096	Gets the value of a static property .
2097	Determine if a variable is modified
2098	Get the configuration for the webpack extensions
2099	Check if the given string is escaped .
2100	Execute a regular expression
2101	Replace matches in a string
2102	send the message to the server
2103	Parse message from the hash
2104	JWT token factory
2105	Save the signature to the store
2106	Render the response
2107	Returns a JSON representation of this object .
2108	Verify a token
2109	Create JWT token middleware .
2110	Create a valid JWT token .
2111	Create a component instance
2112	Create a module factory
2113	Convenience middleware for connecting to Redis .
2114	in middleware
2115	Middleware handler
2116	Event handler for the categoryId property
2117	The selected state
2118	Creates a new Service for the specified value .
2119	Characteristic represents a Characteristic for the specified Characteristic .
2120	Migrate to the database .
2121	Migrate to the database .
2122	Normalizes objectStoreStores before processing .
2123	Validates the SchemaDescriptorProperties of the given SchemaDescriptorDescriptorDescriptorDescriptorDescriptorProps
2124	Returns a list of records from the given key .
2125	Turn a compound key path object into a compound object .
2126	Iterate over a given cursor object and call the callback on each request .
2127	Handle the request callback
2128	Fetch all records in objectStore .
2129	Fetches the records from the given index .
2130	Writes a file to a file .
2131	Run specified transaction in transactionStore
2132	Convert to native style direction
2133	Create an index .
2134	Fetches the next page from the database .
2135	Execute the specified listeners
2136	Resolves the given state .
2137	Iterates over a record and executes the results .
2138	Returns the inserted record in the sorted array .
2139	Finds the insert index in the given record
2140	Prepares the collection to be used to prepare the query result
2141	process sort operations
2142	Step 1 . 2 . 1
2143	Generates a storage query based on the storage path .
2144	Transforms a query string to a Cursor .
2145	Open a database connection .
2146	Rejects connection to a connection
2147	Execute the given schema listeners .
2148	Takes a filter object and splits it into a single field path .
2149	Generates an array of field paths for a given object .
2150	set the value at the specified field path
2151	Gets the value of a field at the given field path .
2152	Upgrades the native database store .
2153	Create a container element .
2154	Displays the main section for the app
2155	Creates a Client object
2156	Represents a light bulb .
2157	Convert content to a plain text .
2158	Converts an object into a HTML representation .
2159	Default error handler .
2160	Write a chunk to the stream .
2161	End the stream
2162	Cleanup event handlers
2163	Calls the error handler .
2164	Remove npm modules from a directory
2165	list saving the snapshot
2166	perform request data
2167	Generate a new request
2168	Initialize a new packet .
2169	Constructs a Date object
2170	Creates a page for the given request .
2171	Create svg files
2172	Build command line parameters
2173	Generate parameters for shapefile parameters
2174	Run the watcher function
2175	Creates a purge API request .
2176	Returns a unifyModifyModifier .
2177	mock constructor .
2178	Iterate over an object
2179	Merges the source object into the target .
2180	Creates an object with the given parameters .
2181	Merges properties from a single property into the destination object .
2182	Merges the properties of one object into another .
2183	Merges properties of the source object into the destination object .
2184	Mixin instances .
2185	Make a directory if it doesn t exist .
2186	Get the latest deployer information
2187	create a new system
2188	link system to remote system
2189	list containers for a given identifier
2190	Process the container definition
2191	build the target container
2192	Load a target .
2193	Process the target and deploys the target to the target system .
2194	Deploy the revision to the repository
2195	list of identifiers in the system
2196	Gets the revision of the given identifier
2197	Compile the system .
2198	Commit the given identifier to the system
2199	Finalize source code
2200	Injects the app .
2201	Fix all files in the registry
2202	Recursively find all files in a given directory .
2203	Loads all of the included files .
2204	Write the registry .
2205	build the container for the given container
2206	Find the container for the specified target
2207	Set app constants
2208	builds the list of git repositories
2209	push system data to system
2210	remove system information
2211	Parse the DOM tree .
2212	Processes the meta data .
2213	Adds a child node to this collection .
2214	remove child node
2215	Insert a child element into the tree .
2216	Generate a document
2217	Load the system .
2218	Create a new repository
2219	sync the system
2220	Remove unregisters a system user from system
2221	write file to filesystem
2222	Fetch the revision of the system
2223	get the json file
2224	Get the version of the given system revision .
2225	Get the shim for the given environment .
2226	Get the targets from the system .
2227	Search a HEAD revision for the given identifier .
2228	Initialize the emoji configuration
2229	Returns an array of all targets for the container deployed on topology
2230	Create a new relation
2231	Add submodel
2232	Add a relation to the relation .
2233	Add a relation to the relation .
2234	Prepares the relations to be removed .
2235	Add a relation to a collection
2236	Get a collection for a given type .
2237	Get the model name
2238	Return the id for the given type .
2239	Retrieves a collection from the given type
2240	Adds a model to the collection
2241	Replace a Model with a specified id
2242	Removes a model from the collection .
2243	Checks if a relation has relations .
2244	Removes all relations from this collection .
2245	Constructs a new KeyStore instance .
2246	Add a model to the collection .
2247	Bind a collection to the collection .
2248	Loads the associated KeyContents from the collection .
2249	Retrieves the models for a given key .
2250	Converts a Model instance to JSON .
2251	Creates and returns a new element .
2252	XHR implementations .
2253	Represents a bitmap .
2254	Return a canonical value for the given stack
2255	Ensures that a value is empty .
2256	Calculates the word index of the first word .
2257	Compile module .
2258	validate a function pipeline
2259	Timer constructor .
2260	Process tokens .
2261	Creates a new Template .
2262	Checks to see if a function is allowed .
2263	Get program data
2264	Initialize the secure webhook endpoint .
2265	Make a POST request
2266	Verify the signature against the incoming XHR .
2267	Updates the ref s refs
2268	Constructs a Docker CommandManager .
2269	Dynamically setup a deep path
2270	Prints a gulp command .
2271	Formats text .
2272	Inits a gulp task docs .
2273	Returns a function that logs a winston logger .
2274	Returns true if the object is a Promise .
2275	Checks whether a given function has arguments .
2276	Runs a race task .
2277	Define a task .
2278	work with await args
2279	Set timeout .
2280	Handle timeout
2281	Run a single function
2282	runs the async function
2283	Reset all internal structures
2284	Setup hook .
2285	Get the value of a comment tag .
2286	Checks file list against white list
2287	Initialize the orthogonal geometry
2288	Invoked when the user has changed
2289	Observes the remove observer for the given node .
2290	Parses expression chains into a chain of expressions .
2291	Parses a function expression and returns the result
2292	Parse expression .
2293	Add references to the expressions .
2294	wrap next function
2295	async assert is an error
2296	Creates a function that invokes func with the given arguments .
2297	Get open brace expressions
2298	Checks whether the given operator should be considered a separator .
2299	Checks whether the given token is a closing brace of the next token in parentheses .
2300	Check whether the given token should be ignored .
2301	Check whether the given token should be closed or not .
2302	define an enumerable property
2303	Converts a number to an integer .
2304	Converts a length argument to an integer .
2305	constructor for arrayIterator methods
2306	Create a new promise that resolves with the given action .
2307	DEPRECATED
2308	Creates a function that accepts a value and returns a promise .
2309	Add control events
2310	Event handler for mouseup events
2311	Reports a given spacing after a given token .
2312	Reports the start of the first token before the given token
2313	Reports the spacing before a node
2314	generate the destination point
2315	Retrieves the value of a key from a hash .
2316	Get git paths .
2317	Lookup the github login info for a github repo .
2318	Unpack a message into the output hash .
2319	Calculate hash of a public key
2320	Generates a public key for an RSA key .
2321	Initialize the command line if it exists
2322	Check to see if the node exists .
2323	installs the specified package
2324	Prompts the user for a specific node .
2325	Check and install new nodes
2326	Sets the list of references to the executable .
2327	Asynchronously install .
2328	Represents a set of elements for the elements that are attached to an element .
2329	Creates a new eventSubject with the expected value for the given subject
2330	Initialize a new PromiseSubject .
2331	Retrieves a value for a given key .
2332	Resolves references recursively
2333	Format a string with the given options .
2334	Format a JSON object
2335	Export a public key to public key .
2336	Finds the primary key in the primary key .
2337	Format a map
2338	Loads a key from the store .
2339	Merge default values .
2340	Generate the expiration date for the cache .
2341	Generates a cache header for the cache .
2342	Determine if the specified expiry has expired .
2343	Formats a set of values into a set of values .
2344	Format an array .
2345	Reset data .
2346	Serialize an object
2347	explore the given data
2348	Creates a failure message for a given value .
2349	A user .
2350	Process the input files
2351	Creates a folder in the destination folder
2352	Copy the temporary directory to the repository
2353	Makes a temporary folder and writes a new temp file .
2354	Checks if path has changed
2355	remove temporary paths
2356	replace content with new content
2357	Copies the directory and creates the new folder
2358	Reads the given text into an array of tokens .
2359	Constructs a Keystone Client
2360	find all parents
2361	Find all children of the given class name .
2362	Creates a list of hierarchical hierarchies of the hierarchy .
2363	Create a list of HTML for a list of classes .
2364	Parse a parent class .
2365	A Tag .
2366	Check if the option passed in command line .
2367	A schema .
2368	A relationship for a child
2369	The Manifest class .
2370	A feature .
2371	Get cookie value from cookie
2372	Register a function to call when a plugin is invoked .
2373	Information about a change .
2374	get github repo
2375	Push a branch to the remote
2376	Sync synchronously .
2377	Run async function
2378	A comment .
2379	paths the specified directory
2380	watch a directory
2381	starts the watcher
2382	check if directory exists
2383	if file exists
2384	Decorate function .
2385	Create a mock Date object
2386	Move the time .
2387	Create a scheduler
2388	Get a scheduled schedule
2389	Run schedule schedule tasks
2390	Start logging function
2391	A form of a name .
2392	A OAuth2 .
2393	Forces a value inside a range .
2394	Insert an item into another list .
2395	Validate props .
2396	Event constructor .
2397	Creates an ast object wrapper .
2398	A feedback .
2399	A reservation .
2400	A search .
2401	Iterate over an array .
2402	Calls a function with the given arguments and returns the result .
2403	Creates a function that calls the given function once .
2404	Remove duplicates from an array .
2405	Returns a new array with unique elements that are unique
2406	Create an instance of Base .
2407	Memoize a pattern .
2408	Multiplies n times into n .
2409	Return true if node should be wrapped inside a node
2410	Initialize curly brackets
2411	Wrap array elements into a string
2412	Format a char
2413	Checks whether or not a string is padded .
2414	Extends an instance of GeoGlob .
2415	Matches a list of patterns against a list of patterns .
2416	Synchronize data from source
2417	Read source stream from source
2418	Generate a list of tasks
2419	Gets all tasks
2420	Generate a list of patterns based on the given patterns .
2421	Convert positive patterns into an array of positive patterns .
2422	Takes a negative array of negative patterns and returns an array of negative positives .
2423	Takes a list of patterns and groups that match the given patterns
2424	Convert the pattern groups into a regular expression .
2425	Iterates over all local patterns that match a negative negative negative pattern .
2426	Convert a simple pattern group to a regular expression
2427	match is a wildcard
2428	Normalizes the cache entries .
2429	Load a single file
2430	Write the file to disk .
2431	Load an object from the cache
2432	Delete a document
2433	Set a value in the cache
2434	loops over a part of the loop
2435	Filter files with given patterns
2436	Matches a list of files against the given pattern .
2437	Return true if filepath matches the given pattern .
2438	Test if a given file is contained in the given pattern .
2439	Checks if a file matches the specified patterns
2440	Matches provided objects against the given object keys .
2441	Return a function that matches the given pattern .
2442	Transform a regular expression into a regular expression
2443	Wrap the glob pattern into a regular expression
2444	Generate a file from the glob string .
2445	Recursively collapse any characters that match a string .
2446	Expands a string into an exponential expression .
2447	Splits a string of whitespace into an array of strings .
2448	Filter an array using a callback function .
2449	Generate an extension object .
2450	Wrap inner text
2451	Convert a given pattern into a regular expression .
2452	helper function for deep copy
2453	Advances the current character to the end of the input .
2454	The base class for sourcemap .
2455	Compare the position of the given mapping function .
2456	Compare table positions .
2457	Applies a sourcemap to a source map
2458	Represents a code request .
2459	Clear a buffer .
2460	Create a new Node .
2461	adapted from root
2462	Create a new Parser with the given options .
2463	Report an error .
2464	register a compiler
2465	Initialize the parser .
2466	The Parser class
2467	Add parser handlers .
2468	Adds a set of tokens to the list .
2469	Removes the set of elements from the set .
2470	Gets the last node in the stack .
2471	Parse a given string .
2472	creates a new character node
2473	Parse delimiter .
2474	Parse input .
2475	Initialize a new parser .
2476	Mixin compiler .
2477	End a buffer .
2478	Convert a range to a regex pattern .
2479	Create a hook function
2480	Wrap a plugin function .
2481	Memoize functions .
2482	Create a proxy for an object property
2483	Extend a sub class with prototype
2484	Register a directory recursively
2485	Creates a container based on the status of a container
2486	Get list of files
2487	read directory structure
2488	Convert a property name to attribute name .
2489	Generates commands from the origin container
2490	Create an instance of Clients
2491	Generate the task planner
2492	Starts the process
2493	Stop the stripping text
2494	Creates a new Definition
2495	Register a type .
2496	Creates a function that will be called when the promise is set .
2497	Applies set of arguments to the set of arguments .
2498	Define a set of property types .
2499	Creates a Promise
2500	Set the progress of a task .
2501	Represents a promise
2502	This function is called when the performer is resolved
2503	Constructs a new decoder .
2504	creates a css rule
2505	Generate media queries for a breakpoint
2506	Destroy the link
2507	Load config from the Grunt config file
2508	Save the config file
2509	Get server options
2510	Returns a list of resource resources
2511	Format an object into a URL .
2512	Get a ray from a ray
2513	Get the URL for a flight preference
2514	fetch the base url
2515	Module constructor
2516	Extract names from function function
2517	Get all known values .
2518	Updates an individual contact
2519	Get element by class
2520	Subscribes to a template .
2521	Creates the signature of the function .
2522	Finds the darkest color based on the index of the color
2523	Updates color color for node
2524	Update the main structure .
2525	Center the graph .
2526	Detect if not already been set
2527	Applies the related nodes to the linked list .
2528	Finds an element within the given node
2529	Calculates the coordinates of an element .
2530	Get SVG element
2531	Hide the context menu
2532	returns whether this node is connected to other nodes
2533	click on the control
2534	Called when the control changes
2535	Handle control menu
2536	Triggered by node context menu .
2537	Mouseover event handler for control node .
2538	zoom to the flyout
2539	click context menu
2540	Shows the context menu menu .
2541	Mouse down menu menu
2542	Handles mouseout events
2543	Called when the graph is resized
2544	This function is called on each tick
2545	Recursively recycle the graph .
2546	Reverse the graph links .
2547	Update UI menu .
2548	Update the UI
2549	Updates the table width of the table .
2550	Returns the zoom level for the graph .
2551	get window width
2552	Initialize the css class
2553	Default success handler
2554	Respond with a failure .
2555	Performs a request
2556	Do the http server
2557	Create server .
2558	Adds a listener to an element
2559	Create a new reply .
2560	Serves the parts of the tree
2561	Processes the given files in the source directory .
2562	Package . js
2563	Initialize a new Ebus - util .
2564	Create a new ApiClient
2565	Gets the first index of value in an array .
2566	Get the url for the current division .
2567	Create a new Customer
2568	Creates a shallow copy of an object .
2569	Formats a message with options .
2570	Creates a zip file .
2571	Distribute a zip file to a directory
2572	Copies the compressed file into a temporary directory .
2573	Extracts the source file into a temporary directory
2574	make a directory
2575	Initialize a new fabric .
2576	Reads file .
2577	Iterate over the entity collection .
2578	Check if file is JS
2579	Test if value is empty .
2580	click on menu
2581	Represents a shell stream .
2582	Constructor for Class .
2583	Extend the constructor
2584	Generate getter for a property .
2585	Generate a new object
2586	Generates the JavaScript documentation for this instance .
2587	Reads the contents of a file .
2588	Reads the contents of a file .
2589	Processes the specified file .
2590	The Log Events
2591	Logs a creation event .
2592	Logs an event
2593	Report the events to the log file
2594	Get the Scope for a team
2595	Construct a new article translation
2596	Create a new macro action .
2597	Map objects to another object
2598	Given a list of results return a promise .
2599	messages of teams
2600	Returns the index of the first element in the given primitive .
2601	Parses a XHR response
2602	Add dependencies to the file
2603	batch form contains a list of forms
2604	Parse input .
2605	generate the lunr url
2606	A reconnecting WebSocket constructor .
2607	Gets the first index of an array .
2608	Writes the given path to the parent .
2609	Check if main files exist
2610	Encapsulates the internal state of an object .
2611	Add an object to this collection
2612	generate a chunk of items
2613	Get an id for a property
2614	Apply the extended objects
2615	Serializer .
2616	Create the factory
2617	generate the factory
2618	Serializes the current instance .
2619	Generates a set of properties .
2620	Creates a client object
2621	Implementation of ImageLoader
2622	Load an array of images
2623	when src is loaded
2624	Convert images to an array of images
2625	sort images in src
2626	Builds default values from environment list
2627	validate an id
2628	remove duplicated values
2629	set function definition
2630	set callback function
2631	Base class for the update
2632	Resource constructor .
2633	Generate a container slug
2634	get directory contents
2635	Load a chunk of chunks
2636	Make a package . json object
2637	Opens a container archive
2638	Check container resource container
2639	Create a new UserPreference
2640	Returns an updater function for the given comment node .
2641	Update the comments in the file
2642	Get the annotation of a comment node .
2643	Generates a location .
2644	Create a new macro
2645	Sort a sorted array using a sort function .
2646	Pivot point for a pivot .
2647	Partition partition function
2648	Inserts an element in a sorted array
2649	Search for a specific page
2650	Create a pipe stream
2651	Wrap all child methods in the prototype chain
2652	Connect events to stdout
2653	Add event handlers
2654	Recursively resolve routes .
2655	Builds a function from the resource
2656	Gets the API key from the FAP environment variable .
2657	Get resource by name
2658	Sign a message
2659	Hash a message
2660	Adds signature headers for the given body .
2661	Waits until the given variable has been satisfied
2662	Waits until an attribute exists
2663	Render a view into the DOM .
2664	Destroy the current view
2665	Recursively merge objects
2666	Parse the quality .
2667	Converts a hex color from HEX to RGB .
2668	Check if a given command exists .
2669	Execute a command and return a promise .
2670	Initialize the plugin
2671	Change all versions of the page
2672	Add property settings to an article
2673	Render a page
2674	Reset an article
2675	load the google font style
2676	Sorts elements by type
2677	Creates a babelog .
2678	Checks the given model from the given data model .
2679	Scope the page .
2680	Processes a FunctionExpression node
2681	Create application .
2682	Updates parser .
2683	Create a new Company
2684	In the angular AST from the AST
2685	Find all callCandidates for node .
2686	Follow a reference to a FunctionExpression
2687	close the app server
2688	Transforms the input body with the password provided .
2689	Returns the length of a given val .
2690	Calculate COLG data for table
2691	Determines whether a string matches the short pattern
2692	Check if the callExpression has a require call .
2693	Subscribe to a bus
2694	Create a new git repo
2695	Recursively recovery a key from the public key
2696	Calculate the validity of the public key
2697	Add permissions to the view
2698	Sets the permissions to a view
2699	Creates a new DAO instance .
2700	The Model constructor .
2701	Creates a proxy for a model .
2702	Creates a proxy for the model
2703	Get a model by name
2704	Detect destination type .
2705	Randomness material .
2706	Iterates over each color in the collection .
2707	Get image coordinates
2708	Gets the color of the image .
2709	Adjusts the size of the rainbow .
2710	Writes the PNG image to PNG
2711	Convert image to base64 string
2712	Recursively inspects the values of a b
2713	Produces a public function that will be used to create a benchmark
2714	get ignore files
2715	Render input to terminal
2716	Calculates the color for the given index .
2717	Render errors .
2718	Gets the resource for a resource
2719	Update an existing resource
2720	Returns a new object with properties from the given schema
2721	Creates a new yaml schema based on the given options
2722	Load a configuration file
2723	Loads theme .
2724	Get the theme from an object .
2725	Write a file to the destination directory .
2726	Initializes the passed options
2727	Reduce the build configuration
2728	Write a destination to the destination .
2729	Serialize a new Map .
2730	Convert an object s attributes to a JS object .
2731	Converts a value to an array .
2732	Generates a random dom element id .
2733	Transforms an object
2734	Transforms an array of values to a string .
2735	Represents a REST request .
2736	makes a copy of the map
2737	Registers a component .
2738	Returns the widget for the given component
2739	registers the environment variable
2740	Serializes the node to a DOM node .
2741	Get an attribute .
2742	Creates an instance of the instances of the contextual rule .
2743	Inserts currentorters list .
2744	Sets the index of the current collection .
2745	Sorts the Sorts array using this function .
2746	Finds the first item in the array according to the comparator
2747	Changes the value of the attribute
2748	Get the checkbox .
2749	Sets focus on input element .
2750	Blur the input element .
2751	Sets the selection range
2752	Format a date according to the specified date
2753	Adds a date to the interval .
2754	Returns the maximum date between two dates
2755	Convert a date to a date
2756	Get default options for the message type
2757	Parse the given message with the given options .
2758	Return a logger .
2759	Assign default options
2760	Find all pages
2761	Write output .
2762	convert callback to callback
2763	Checks if the current tunnel is running
2764	Installs the selenium connection if necessary
2765	Initialize the browser
2766	run each mocha
2767	endregion session helper
2768	Updates the job with the given sauce job
2769	Finish the grunt task
2770	Render response body .
2771	Set multiple option values
2772	Merge default options
2773	Test key .
2774	remove source object from source object
2775	Adds reducer to scope .
2776	Removes a scope from a scope .
2777	Remove reducer from scope
2778	Converts a value to an integer .
2779	Writes an error to the file
2780	Flush messages to the console
2781	Gets a configuration from a file .
2782	Check if file is ignored
2783	Extract styles from a string .
2784	Reads the commit plugin .
2785	Loads file plugins .
2786	Sets a DOM element .
2787	Sets the class names of this element .
2788	Sets the width of the canvas .
2789	Get the style for the given dom element .
2790	Set the style for the DOM element .
2791	Returns the viewport size .
2792	Returns true if the element is transparent
2793	Prints progress
2794	{{{ 1
2795	Decodes a UTF - 8 encoded string
2796	Generates a random nonce
2797	Creates a header string
2798	Convert signature string to signature string
2799	Generate an authentication secret
2800	set new values
2801	Get the values of all slots .
2802	Add translations for given locale .
2803	Sets up the first button pressed in the UI .
2804	Sets up the buttons according to the current button .
2805	Select the value .
2806	Creates a new RPC RPC
2807	Channel constructor .
2808	Add a function to the system
2809	Extract meta data from a README .
2810	Add a comment .
2811	Checks the given keyword token .
2812	ECMA - 262 13
2813	ECMA - 262 12 . 2 . 4 . 4 . 4 . 4 . 5
2814	ECMA - 262 12 . 4 Postfix Expressions
2815	ECMA - 262 12 . 7 Unary Operators
2816	Re - sets the binding pattern to the given expression .
2817	ECMA - 262 12 . 2 Expression
2818	ECMA - 262 13 . 3 The return statement
2819	Extend object by extend
2820	Recursively truncates the lines of the given width .
2821	Checks if the given argument is an absolute path .
2822	repeat a string repeated times
2823	Remove duplicates from an array .
2824	print error and log
2825	wrap command with shell args
2826	Write a directory to a file
2827	Sync directory recursively .
2828	split path into an array
2829	Write stdout to stdout
2830	Format the console .
2831	Creates a GNTP protocol .
2832	Creates an instance of Growly .
2833	Initialize a new Command instance .
2834	The base implementation of _ . difference without support for iteratee shorthands .
2835	Get next token from position
2836	first argument param is a function identifier
2837	unless expression is a destructor expression
2838	Asserts that getter getster .
2839	Checks if value is an object .
2840	Run a command
2841	exclude args from nargs
2842	set args from config
2843	Add aliases to an object .
2844	Check if a key is set of aliases .
2845	Guess the type of a flag .
2846	Calculate the max width of each table .
2847	normalize multiple aliases
2848	Creates a string representation of a default value .
2849	Find the value for attribute names
2850	Set new passport s properties
2851	write a string to file
2852	Create a directory
2853	Check if a path is empty
2854	Defines a database definition
2855	Redirect to the previous action
2856	Creates a gulp request request
2857	Handles JSON response from the server .
2858	Splits the header into the header
2859	Scrolls to the given position .
2860	Scroll the container to the visible element .
2861	Scrolls to the specified position
2862	Initialize the new constraints .
2863	add actions to actions
2864	Builds a string from the given pattern
2865	Upload file transfer
2866	Download a file transfer
2867	Filters the filter .
2868	Iterate over all items .
2869	Loops over each element in the collection returning a new array with the given values .
2870	Removes an item from the collection .
2871	Remove all items from the collection .
2872	Returns the index of the given item
2873	Determines if an item is present in the collection
2874	Returns a copy of this collection .
2875	Find the index of the first item in the list
2876	A shallow copy of this Collection .
2877	Change the month title of the month
2878	Sets the title of the year text .
2879	Builds an array of year labels .
2880	Creates the name of the month .
2881	Determine if the user is accessible for the current user
2882	Gets the backcase text for the given button .
2883	Creates a proxy for an element
2884	Metalsmith plugin
2885	Default map function
2886	Schedule a job in the queue
2887	Defines a validator for the given type
2888	undefine a primitive type
2889	Check if the value is a validator function .
2890	Returns a list of all declared types
2891	Check if a comment is modified .
2892	Get the SETTING parameter .
2893	Load settings .
2894	Converts the specified size string to a unit .
2895	Formats the form of the HTML element .
2896	Returns the maximum width of the viewport .
2897	Gets the current orientation of the viewport .
2898	Observer constructor
2899	Enable the initializer
2900	Compares two arrays .
2901	Compares two values .
2902	Converts a JSON object into a RGBA object .
2903	Sorts an array .
2904	Sorts items according to the items array .
2905	Apply a function to the specified function
2906	Detect the device class
2907	Detects if the browser is mobile .
2908	Write to a CSV file
2909	Inserts an array at the beginning of the array .
2910	Remove a model or a list of models .
2911	Remove a model from the collection .
2912	Determine if this path is the root
2913	Retrieves the data of a view with the given data .
2914	Clears the template cache for a given Marionette
2915	Clears a template property from the cache
2916	Clears the template for a view .
2917	Creates a copy of the given cache entry .
2918	Creates a cached template for the given view
2919	Updates the data cache of the jquery data .
2920	Registers a new instance of the view with the given name and namespace .
2921	Determine if the given object is a component type .
2922	Create a custom error type
2923	Get the registered handler for the specified name
2924	Execute a named command
2925	Sets an event on a hash object .
2926	Iterate over all bindings
2927	Add a callback to the deferred action .
2928	Swap the view .
2929	Destroy the contents of the view .
2930	Add regions to the region object .
2931	Adds a region to the region
2932	Clear all the regions .
2933	Remove a given region
2934	Loads a template with the given options .
2935	Get compiled template from the cache
2936	Render a template with the given template .
2937	Merge template helpers .
2938	Bind events to the model s behavior .
2939	Delegates the event s delegateEvents to the View s behavior .
2940	Unbinds all model events that are bound to the collectionEvents
2941	Destroys this instance .
2942	Resets the ui bindings of this element .
2943	Trigger the event on the parent .
2944	Returns the deepest child views of this view .
2945	Serializes the collection .
2946	Renders the template with the specified template
2947	Bind events to the collection
2948	Adds a child to the collection .
2949	Attempts to reorder the children of this view .
2950	Render the collection .
2951	Add child models
2952	Removes the models at the end of the collection
2953	Displays an empty view in the collection .
2954	Adds a child view to the collection .
2955	Renders the child view .
2956	Render a view .
2957	Create a new child view for the specified child view
2958	Removes a view from the view .
2959	Return a cached document fragment .
2960	Insert a child view into the collection
2961	Saves a child at the specified index .
2962	Destroys the collection .
2963	Returns a list of views .
2964	Configure the initial events for the collection .
2965	Serialize the model .
2966	Renders the rendered view into the DOM .
2967	Renders the template with the specified data .
2968	Initialize the regions in the region .
2969	Override the render method to render the regions
2970	Destroys the view
2971	Adds regions to the region manager
2972	Initializes regions with the given options .
2973	Initializes the region manager
2974	Get the class for a given option .
2975	Converts a view to an array of behaviors .
2976	Set handlers for a specific action .
2977	Adds a trigger to the view
2978	Default event handler .
2979	Create the module .
2980	Internal method to initialize regions with the given options .
2981	Initializes the region manager
2982	Callback for the radio controller .
2983	Stop the sub - modules
2984	Add a module definition to the specified app .
2985	Adds a module to the parent module .
2986	get the signature of function name
2987	Get the URL of the path .
2988	Move an entry into the destination directory
2989	Get the parent directory from the specified device
2990	Calls the callback on the root directory and returns the promise
2991	Create the file system recursively
2992	Create a file .
2993	Returns an array of the objects sorted by key
2994	this is the loop
2995	Constructs a multi - key cache .
2996	pipe a function into a new function
2997	Creates a raw HTML markup for a single comment
2998	Create a template for a given template .
2999	Builds a template
3000	Defines a Model .
3001	Represents a model .
3002	Point is an API
3003	Sets the current tab bar .
3004	Constructs two points .
3005	Returns the distance between two line segments .
3006	Protocol constructor .
3007	Called when the timeout is received
3008	Get the number of characters .
3009	copied from source to dest
3010	Copies a source file .
3011	Define a property on an object .
3012	PUBLIC FUNCTIONS This method can be used to add a method to a tracked object .
3013	Gets list of property names from object
3014	Constructs a new Session instance
3015	Sets the content of this container .
3016	Convert XHTML attributes to a DOM node .
3017	Clone this node .
3018	Block for init nodes
3019	Create a block element .
3020	Customizer functions
3021	wrap the object s events to prevent the event from being invoked
3022	Creates an iterator for accessor functions .
3023	Execute property accessor .
3024	Event handler .
3025	Called when the script is loaded .
3026	Remove duplicate properties from an object
3027	Returns a shallow copy of the hash
3028	Convert hash properties to camel case
3029	Returns an array with all key properties that are unique .
3030	Finds all matched objects matching a selector .
3031	Is the specified selector?
3032	Decorates the given Router and returns an instance of the TraceTracker
3033	Executes a SQL statement .
3034	Retrieves the item at the given index .
3035	Creates a payload
3036	Check the expected type of the given object .
3037	Assign key value to target object
3038	Function used to compare two nodes .
3039	Finds all nodes in the tree .
3040	Request a file system for the specified file system
3041	Creates an instance of the request
3042	Returns true if the field exists in the database
3043	Creates a package . json file .
3044	Before watching for changes
3045	Add a filter to the list of filters .
3046	Removes a filter function from the list of filters .
3047	Returns a function that merges the result of the source object into the destination object .
3048	Creates a function that calls the result of the source function and returns a result .
3049	Snapchat class constructor
3050	Sanitize double quotes
3051	Create a new object
3052	Generate ID for id
3053	Parse selectors
3054	Find the given object in the database .
3055	Validate that all fields are valid .
3056	Check that the given field exists in the database
3057	Find a child relation
3058	Get type of db
3059	parses and returns an object containing the results of a query
3060	Returns true if obj matches the next element
3061	Add contents to the contents of the contents .
3062	Add a list of top - level cells to the top of the top level
3063	Creates an array of action handlers for actions .
3064	Event handler for the transaction
3065	Handle the transaction
3066	Gets the transaction from the given options .
3067	Calls a method with the given parameters
3068	Generate a rpc transaction
3069	Send a message to the server
3070	Sync this request buffer .
3071	Performs a call to a specific action
3072	submit a form
3073	Fix inline inline styles .
3074	Create plain text files for a given resource
3075	Determines whether the RocketPackage executable is installed or not .
3076	Initialize Route with the given HTTP method and options .
3077	A transport for Telemetry transport
3078	get random value from array
3079	Returns a random number of elements in the array .
3080	Initialize a new Response .
3081	Response handler .
3082	Send a response
3083	Set header value
3084	Callback for response
3085	Validate the arguments of the expected type .
3086	Process the remaining arguments of the expected range .
3087	Handle available arguments
3088	Checks whether the expected value is at least one of the expected options .
3089	Returns the number of optional options for the given value .
3090	Common function to find the required dependencies of a value .
3091	Match actual arguments
3092	Throws an error if the given value is an instance of the given type .
3093	Determine if the given type is valid .
3094	Gets the type of a value .
3095	Creates a string representation of a type .
3096	Applies filters to current form
3097	Get the state of a single property with the given options
3098	Validate a model
3099	truncate max characters
3100	Try to load less files .
3101	Validate index .
3102	Add routes for pie pies .
3103	UUID Generates a UUID
3104	Generates a random string
3105	Convert a string to a Uint8Array
3106	Convert a string to a Buffer
3107	Hides a back button
3108	Logs a message in the log .
3109	Copy a file to a destination
3110	Synchronously copies the contents of the source file to the destination file
3111	Replace match file contents
3112	Unlinks the specified file in the given location .
3113	Checks if a directory exists .
3114	Checks if a file exists .
3115	Returns all subdirectories for a given base directory
3116	Resolves the path to an array .
3117	Returns the list of directories that match the specified directory .
3118	Higher order function for sorting
3119	Reduce the list of directories to an array .
3120	Hide the menu from the side .
3121	Shows the menu based on the given side .
3122	Rotate the menu according to the given side
3123	Hides the menu of the menu .
3124	Shows the menu for the given side .
3125	Initialize a new adapter
3126	Get the hierarchical hierarchy
3127	Get the backend config
3128	get a backend config
3129	get backend config
3130	save a file
3131	Get overrides from a backend
3132	Helper for wrapping the promise
3133	utility function to handle errors
3134	Apply data to a data model
3135	Check if the array contains the values of the array
3136	Remove absolute URL .
3137	Parses url .
3138	A Tab instance
3139	Convert an object into a string
3140	Returns an object containing anchor coordinates .
3141	Iterates over all items .
3142	Called from the file system
3143	Assert that the element s text content contains the specified element .
3144	Initialize the container .
3145	Bind the item to the container
3146	Finds the specified index .
3147	Loads a script .
3148	Injects a script element into the page .
3149	Read a partial file
3150	Generate the data for record
3151	Add a new provider
3152	Remove a provider
3153	Initialize the viewport .
3154	Get a controller for the given controller name
3155	Called when the component is destroyed
3156	Removes an item from the list .
3157	Removes all items .
3158	Set the active item
3159	Get all items
3160	Check if clickable element exists
3161	Convert a number to a maximum if possible
3162	Convert a value to a numeric value .
3163	Raises the precision of the given value .
3164	Log request middleware
3165	Convert object to Date .
3166	Middleware .
3167	Define a route
3168	Build the REST resource URL .
3169	Create a password hash .
3170	Parses a JSON document .
3171	Decorates a node for a model .
3172	Saves the current node
3173	Removes the specified node .
3174	Destroys this element .
3175	Destroys this node .
3176	Insert a node into the specified element .
3177	Removes this node from the DOM tree .
3178	Remove all nodes .
3179	Sorts this collection .
3180	Expand the node
3181	Collapse the node
3182	dispatch the next function in the future
3183	Initialize the mask
3184	Generate a unique id for an element .
3185	Copies properties from source to destination object .
3186	Clean up the DOM cache
3187	Adds an action to the pipeline .
3188	Deprecate a configuration property
3189	Initialize a new Store
3190	Represents a node .
3191	split array into string
3192	Configures a redux store .
3193	Create an observable
3194	Initialize the Drag instance .
3195	get relative path
3196	Rebuild path
3197	Lookup a logging level for a logging level .
3198	Log a message to the console
3199	Checks if path is a simple id .
3200	Validates the given key node .
3201	Accepts a single node and if required .
3202	Remove an item from the array .
3203	Compile input into result .
3204	Reduces the document content into its children .
3205	Create a new Node .
3206	add a promise to the queue
3207	Handle next range
3208	Purge all queued tasks in the queue
3209	Set new values .
3210	Get all fields
3211	Returns the current selection .
3212	Checks if point is within a point
3213	Execute a single command sequence of multiple commands
3214	Replace references in a given syntax tree .
3215	Generate unique name
3216	Replace class declarations with classnames .
3217	Transform variable declaration or declaration
3218	Create a new Item
3219	Invoked when a node is clicked .
3220	Binds events on an array of elements .
3221	Update the transparent mask
3222	Return a copy of two items
3223	Initialize a new DOM element .
3224	Change track of data
3225	Returns the parents of this model .
3226	Returns the model at the index of the given index .
3227	Gets the nearest ancestor for the given function .
3228	Get the dependency tree
3229	Gets the model query .
3230	Generate a token
3231	Fetch the user password for a user
3232	Send a new email to the user .
3233	Sorts the issues in parallel
3234	Remove duplicates from the user .
3235	Extract a sub - task task number from the super - body .
3236	Takes an array of issues and returns a formatted version of the issues that are passed to the server
3237	Merges issues with issues .
3238	Sprite constructor .
3239	Produces a callback that will be called when a callback is called .
3240	List all available adapters
3241	Loads the adapter configuration for a specific adapter
3242	Write a adapter to a adapter
3243	Render files .
3244	eslint - disable - next
3245	Gets the context for a template .
3246	Compile a page to the index file
3247	Checks whether a node is a named function .
3248	Gets the config for a given function node
3249	Checks the spacing of a function node
3250	Applies config properties to this instance .
3251	Binds events to an event .
3252	Execute a new interval
3253	Method to validate an operation
3254	Called when an operation fails .
3255	Creates a URL for the current request
3256	Set the date formatter .
3257	Select the given picker .
3258	Clone an object
3259	Implementation of Impromptu plugin .
3260	Initialize the component
3261	Removes the class from the class list .
3262	Hide the animation .
3263	Show the animation .
3264	Sets the size of this rectangle .
3265	Adds a component to the viewport
3266	Computes the current alignment of the given element
3267	Set the alignment to the current alignment
3268	Get the parent element of a selector
3269	Destroys this Template .
3270	Handles a click event on the list item .
3271	Backbone back
3272	Go to the specified node .
3273	Hoist the program body from a program
3274	Parses the detail ID from the vehicle id
3275	Formats the details of the test details .
3276	Retrieves information about an application by its id .
3277	Checks for payment
3278	Called on Purchase
3279	Complete a transaction
3280	initialize a Key
3281	Invokes a function with the given arguments
3282	check change event
3283	Get all field values
3284	Sets the values of all fields in the given group .
3285	refresh text content
3286	Process params object .
3287	success callback
3288	Initialize a new Collection .
3289	Find item by filter .
3290	Create an instance of Task with the given options .
