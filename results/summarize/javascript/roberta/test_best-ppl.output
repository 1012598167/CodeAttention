0	Create a new instance
1	Cancel a promise
2	Check if a view is a buffer
3	Checks if the current browser is a regular browser .
4	Iterate over an object
5	Merge two objects .
6	Create a new package
7	Initialize the response
8	Applies the update to the update .
9	Check if the update is updated
10	Returns a formatted error message .
11	Converts a number to decimal format
12	Converts a segment into a buffer .
13	Converts a buffer into an array of segments .
14	Parses the given text and returns a Promise
15	Creates a new KeyMap instance .
16	Generate a random bytes array
17	Creates an array of entropy statistics .
18	Returns the number of bytes at the given index .
19	Takes a JSON string and converts it into a JSON .
20	Initialize entropy key .
21	Convert a matrix to a matrix
22	Verify the given data
23	Restore data from buffer
24	Invokes a reply .
25	Constructs a FormGroup .
26	Initialize the loader .
27	Create a new content
28	Constructs a new table .
29	Constructs a new rail .
30	Create a new button
31	Constructs a grid grid grid .
32	Constructs a new form .
33	Create a new content with the given content
34	Create an instance of an Element .
35	Create a comment for the given url
36	Checks whether a given token is a number
37	Creates a new meta content .
38	Constructs a React Element .
39	Constructs a new step element .
40	Creates a new divider .
41	Create a new Header
42	Create a new grid
43	Creates a new breadcrumb instance .
44	Creates a new component .
45	Creates a new item with the specified items .
46	Properties of a grid .
47	Return the image size of an item
48	Constructs a new CardGroup .
49	Create a row .
50	Creates a new event .
51	Creates a new TabContainer .
52	Create a list of content
53	Create a button for a button
54	Constructs a table cell .
55	Creates an instance of an object .
56	Create a message list
57	Returns true if the header is a table .
58	Create a comment node .
59	Shows an element .
60	Constructs a new Segment instance .
61	Creates a new placeholders object .
62	Returns the content of the given element .
63	Create a new Feed instance
64	Creates a placeholders object .
65	Creates a new Carousel .
66	Create an image placeholders
67	Creates a new dropdown menu .
68	Create a list of icons
69	Create a comment
70	Creates a new instance of the given stat .
71	Creates a new Statistic value .
72	Constructs a new Segment instance .
73	Constructs a table header .
74	Constructs a new Feed event .
75	Create a group of labels
76	Creates a new instance of the API .
77	Creates a divider .
78	Generate a summary for a summary
79	Create an instance of a step
80	Create an instance of an image .
81	Returns a function that can be used to compare the canvas .
82	Set the background canvas
83	Get a sprite from a sprite .
84	Add a frame to the render function
85	Adds a body to the body .
86	Creates a list of pages
87	Check if a given object is a wrapper .
88	Normalizes the given options with the given options .
89	Generate MarkdownDoc
90	Returns a string representation of a String .
91	Create a token
92	Checks whether a given string is in an array of ast .
93	Transform a list of metadata names into an object
94	Search for package . json
95	Create a new class
96	Create an array of source objects .
97	Returns a JSON representation of the source .
98	Convert array to array
99	Create a markdown file
100	Flattens an array of options .
101	Add a new element to the list
102	Sorts a node in a list
103	Sort a node
104	Draws a graph
105	Creates a new MultipseNode .
106	Convert a matrix to a matrix
107	Creates a 4 - 4 matrix
108	Creates a frustum .
109	Apply a texture to the specified image .
110	Check if the current zoom level
111	Rotate a 4 - 4 matrix
112	Checks if a viewport is in the viewport
113	Create a new image layer
114	Get the tag number
115	Display error message
116	Clear error message
117	Handle the message
118	Returns the mouse position of the mouse event .
119	Handler for mousemove event
120	Handle click events
121	Convert mouse event to canvas
122	Handle mouse move
123	Handle mouseup event
124	Handle mouse event
125	Handle mouse move event
126	Handle mouse wheel event
127	Handle keypress event
128	Handle keydown event
129	Change the key value of a key
130	Returns the animation .
131	Handle animation frame
132	Converts a quaternion to a quaternion
133	Returns the quaternion of the quaternion
134	Handle the orientation of the event
135	This function is called when the rendering is ready
136	This function is called when the rendering is ready
137	Helper function to create the hotmost properties
138	Removes all the hot - sites
139	Gets the hot - position of the given object .
140	Creates a new instance of the scene
141	Toggle fullscreen mode
142	Change fullscreen mode
143	Creates a new viewport .
144	Stop animation .
145	Load the toolbar
146	Loads a scene
147	Stop the orientation
148	Trigger an event .
149	Creates a function that waits for the specified function
150	Returns the offset of the mouse event .
151	Parse float precision
152	Compare two interfaces .
153	Adds two numbers .
154	Extracts the content from the source file .
155	Builds a sass file .
156	Creates a new instance of the options .
157	The base implementation of the base class
158	Create a new Context object .
159	The default options .
160	Creates a new CloudCloud instance .
161	Invoked when the request is received
162	Called when the request has been created
163	Returns a promise that resolves to the API .
164	Returns a list of assets from the given file .
165	Returns the start of the sidebar
166	Create a new object with the specified arguments
167	Define a function to iterate over obj .
168	Copy template to file
169	Create a copy of the template
170	Create a name for the given name
171	Empty a directory
172	Asynchronously exit .
173	Load a template
174	Create a new view
175	Create a directory
176	Returns a function that can be used to create a custom option .
177	Prints a warning message .
178	Writes the specified file .
179	Creates a function .
180	Adjusts the options for the given options .
181	Creates a debug tool .
182	Load the event handler
183	Prefix the prefix of a string
184	Create a canvas
185	Creates a new rectangle of the given area .
186	Calculates the area of a given rectangle
187	Calculate the points of a pattern
188	Generate an array of points for a given pattern
189	Applies a pattern to a pattern
190	Returns the right side of the given two arrays
191	Converts a string to a DDL
192	Formats the formatter .
193	Resets the caret position
194	Checks if the target is active
195	Creates the source context for the textarea .
196	Returns the target of the target control .
197	Checks to see if the target belongs to the target element
198	Update the scroll position
199	Returns the score of the given text .
200	Calculate password
201	Checks if a string matches a regular expression .
202	Initialize the progress bar
203	Constructs a new instance of an interface .
204	Helper function to add properties to the chain
205	Adds data to the database
206	Create a rejected error
207	Create a new request
208	Compile a sass file
209	Loads a file
210	Parse a parser .
211	Returns a copy of the array .
212	Returns a list of SQL nodes that are selected .
213	Returns an array of SQL nodes .
214	Generate a column name
215	Convert a namespace to a namespace
216	Strip connection to a connection
217	Creates a shallow copy of a fragment
218	Create a new sql query
219	Create a new connection to the server
220	Returns an array of rows
221	Sorts the keys in order by the query .
222	Returns a copy of the given function .
223	Create a string from a string
224	Concat an array of strings into a single array .
225	Converts a value to a JavaScript object .
226	Replace placeholders in a string
227	Create a new MediaNode
228	Constructs a new AudioMedia object .
229	Constructs a media reporter .
230	Retrieve the time of the media
231	Stop the media
232	Returns a new media
233	Constructs a new MediaCapture .
234	Create a new instance of a file .
235	Called when the node is loaded
236	Get the full url for a full url
237	Returns a promise that resolves to a CDN
238	get uri
239	Parse a URI
240	Create a new context
241	Returns a promise that resolves to the capabilities .
242	Compares two states .
243	Checks if a cordova URL is a cordova URL
244	Returns the root project root
245	Recursively deletes the given svn .
246	Finds all the files in the given directory
247	Initialize the hook .
248	Extracts the audio chunk
249	Returns true if the hook is enabled .
250	Called when a channel is ready
251	Returns a hook for the application .
252	Returns a list of plugins for the plugin
253	Returns a promise that resolves to the application .
254	Returns a promise that resolves to the config .
255	Returns a list of plugins for a plugin
256	Returns a list of all plugins that are installed .
257	Ensure that the capabilities have the capabilities .
258	Helper function to copy a new file
259	Creates a new Suite instance
260	Get plugin file path
261	Creates a new platform .
262	Returns a list of projects .
263	Returns a list of projects .
264	Returns a list of all dependencies for a given plugin
265	Create a new file from the manifest .
266	Helper function to check if a plugin is valid
267	Returns a promise that resolves to the platform .
268	Remove name from platform
269	Convert a message to a string
270	Returns an array of engine engines .
271	Create a package
272	Builds a list of platforms
273	Get the icon size from the given icon
274	Creates a list of resources for a given path
275	Finds the default version of the given platform .
276	Creates a new Android Android Android .
277	Returns an array of required requirements .
278	Find a version of a given version
279	List all required requirements
280	Creates a new task
281	Creates a new YAML string .
282	Returns a new version of the given file .
283	Traverse the trapezas .
284	Determines whether the given file should be ignored .
285	Returns a promise that resolves to the repository .
286	Extracts the service data from a service
287	Extracts the results of a single polygon
288	Recursive function to recursively
289	Returns the value of the query parameter .
290	Returns a new array with the added values .
291	Adds a hierarchical hierarchical hierarchical hierarchy to the hierarchy .
292	Adds the value to the given facet .
293	Sets the value of the given facet .
294	Helper function to add a relationship between two expressions .
295	Adds a tag to the tag .
296	Removes the specified facet of the specified facet .
297	Helper function to remove the friction between two expressions .
298	Removes topologically from the hierarchy .
299	Remove the value from the given facet .
300	Extracts the value of the given facet .
301	Checks whether the given value is a dynamic transition .
302	Removes the given tag attribute .
303	Toggles the given value to the given facet .
304	Checks whether a matrix is functional or not .
305	Checks if the given value is a component .
306	Determine if the given value is a component
307	Returns a function that can be used to generate the rest of the rest .
308	Set the parameter to the query .
309	Sets the parameters of the query .
310	Returns a function that can be used to generate a hierarchical structure
311	Runs a child process
312	Compile a list of expressions .
313	Compile the shared files
314	Creates a new JSX module .
315	Creates a new WMS object .
316	Sets the plugin state of the plugin
317	Creates an array of values .
318	Creates a new batch of batches .
319	Create a new Firebase module
320	Sets the values of the given object .
321	Get a serialized payload
322	Create a Firebase factory
323	Parse a CSV file
324	Parse a JSON file .
325	Converts a json object into a json object .
326	Checks if a component is valid .
327	Invoked when a callback is invoked .
328	Returns the closest DOM node in the DOM .
329	Gets the DOM node from the DOM .
330	Get a node from a DOM node
331	Recursively traverse a mouse event
332	Creates a new style property for the given event name
333	Constructs a new instance of the interface .
334	Returns the type of the event type
335	Returns true if the fallback end event is a fallback event .
336	Get the value of a property
337	Returns true if the element is active
338	Returns true if the target element is a valid event .
339	Listen for the given request to the target .
340	Returns the event target for the given document .
341	Constructs a select event .
342	Sets the text content of a node .
343	Create a style string from a string
344	Returns a promise that resolves to the given node .
345	Unmounts a component .
346	Creates a new expiration expiration .
347	Stringify the given content
348	Get the loader for the given loader
349	Normalize a rule
350	Finds the parent node of a given node .
351	Returns a shallow copy of a node
352	Calculate the position of a node
353	Returns the viewport coordinates of the viewport .
354	Returns the first child of the given node
355	Appends a message to the target .
356	Appends the tree to the tree
357	Removes the specified type from the selector
358	Returns a promise that resolves to the PID .
359	Sends a pattern to the app
360	Returns a promise that resolves to the port .
361	Removes all websocket clients from the server .
362	Verify that the platform platform is installed .
363	Checks whether a URL is localhost
364	Normalize a version
365	Update the project file
366	Resets the project to the project
367	Returns a new version of the project
368	Returns a promise that resolves to the installer .
369	Returns a promise that resolves to a remote container .
370	Push a remote file to a remote file
371	Retrieve a remote model from a remote file .
372	Attempt to retrieve a remote device .
373	Create a new device
374	Returns a new version of the test .
375	Selects all elements in the data model
376	Returns true if the element intersects a collision .
377	Creates a new game object .
378	Parses a search string .
379	Create a new queue
380	Creates a new Message instance
381	Connect to a socket
382	Initializes the socket .
383	Initializes a new Socket client .
384	Create a new Graph
385	Remove a node from a path
386	Iterate over an array .
387	Convert an array to an array
388	Create a watcher for a given file
389	Starts the watch timer .
390	Sets the value of a template
391	Converts a UTF - 16 UTF - 16 UTF - 16 UTF - 16 UTF - 16 UTF - 16 - 16 - bit UTF - 16 UTF - 16 - bit UTF - 16 - 16 - 16 - bit UTF - 16 chars
392	Returns a copy of the Unicode string
393	Check if token is a JSX identifier
394	Returns the name of a given symbol declaration .
395	Add a node to the tree
396	Returns the position of a node
397	Returns an identifier for a given identifier
398	Gets the enclosing node in the given scope .
399	Checks whether a given name is a given name .
400	Checks whether a given node is a class name .
401	Returns an array of characters in a string .
402	Returns true if the specified span is a span .
403	Checks whether or not a given node is a list of tokens .
404	Parse a single entity name .
405	Finds the first position of a given element
406	Returns the name of the given entity
407	Returns the name of an entity .
408	Checks whether a member is a member name or not .
409	Returns true if the given export symbol is a symbol .
410	Returns the type of the given type .
411	Returns the type of the given element .
412	Returns the type of the given element
413	Returns the type of the given parameter .
414	Returns the type of the given element
415	Gets the type of the given object type
416	Returns the type parameter for the given type
417	Returns the base constructor for the given base class .
418	Checks whether a given node is a given type .
419	Creates a map of symbols that are not visible .
420	Returns the union of the given union type
421	Return the type of the given object
422	Returns the type of the given type .
423	Gets the type of a given type .
424	Returns the type of the given type .
425	Get the type of a given type
426	Returns the type of the given identifier
427	Adds a set of types to the given type .
428	Checks whether a given type is a given type .
429	Determines whether a given type is the same type .
430	Checks whether a given node is a number
431	Checks whether or not a given node is within a given symbol .
432	Returns the type of the given type .
433	Returns the contextual type of the given parameter .
434	Returns the contextual type of the given parameter .
435	Applies a type to a given type .
436	Returns true if the given type is a valid signature type
437	Returns true if the given literal literal is a literal literal .
438	Returns the contextual type of the given expression .
439	Returns the signature for the given type
440	Returns the contextual signature of the given type .
441	Returns the attribute name for the specified attribute .
442	Checks whether or not a property access to a class .
443	Returns the index of the given property name .
444	Returns true if the given signature matches the given type .
445	Returns a list of expressions .
446	Checks whether the given node is a parent or not .
447	Gets the effective type of a node .
448	Gets the value of a given argument .
449	Gets the arguments of an argument node .
450	Helper function to determine whether or not a node is a decoder
451	Returns a function that resolves a node to a given node .
452	Returns a Promise that resolves to the given node .
453	Checks whether a node is a call expression .
454	Assigns the type of a binding element .
455	Checks whether a parameter is a parameter .
456	Returns a promise that resolves to a Promise
457	Checks whether a node is a decorator .
458	Checks whether a given node is a given type .
459	Checks whether or not a given node is a type .
460	Check if decorators are valid .
461	Checks whether or not a given node is a reference .
462	Returns the initializer for the given parameter .
463	Checks whether a given node is a variable declaration or not .
464	Checks if an element is an iterable .
465	Returns true if the given parameter type is valid .
466	Checks whether a node is a worker .
467	Copies a symbol from the given symbol .
468	Returns the type of the given class .
469	Returns the properties of the given type .
470	Returns a promise that resolves to the given symbol .
471	Checks to see if a given name exists .
472	Checks whether a given node is referenced by a given node .
473	Returns the default export name
474	Creates a new object with the given arguments .
475	Creates a temporary flag for the given name .
476	Returns the name of the given name
477	Returns the source map of the given source map .
478	Creates a temporary variable name
479	Returns true if the node is a new line or not .
480	Emit a node to a given operator
481	Checks if a variable declaration is a variable declaration
482	Emit a value to a given identifier
483	Evaluate the identifier for a given identifier
484	Ensure the identifier expression is a regular expression .
485	Checks if a file exists .
486	Read a configuration file .
487	Parse a config file .
488	Remove static properties from a node .
489	Returns the node of the given node list
490	Gets the maximum value for the given parameter .
491	Gets the position of a given position .
492	Finds the token of the given file .
493	Returns the position of the given tag
494	Strip quotes from a string
495	Check if token is a token
496	Returns true if the element is a parent node
497	Finds the end of the given node .
498	Returns true if the given range is a valid range .
499	Checks whether a comment is inside a comment
500	Returns a promise that resolves with the given name .
501	Returns the completion name for a given name .
502	Gets the location of a given token .
503	Returns true if the given object contains the given symbol .
504	Returns a function that can be used to determine whether or not .
505	Returns the context object for the given context object .
506	Filter JSX attributes
507	Checks whether a given node is a member expression .
508	Returns the help help help for the help help
509	Returns true if the given component has the given name .
510	Check if token is a token
511	Returns an object that represents the right side of the left side of the right side .
512	Calculates the status of a server
513	Create an origin request
514	Returns a new transform function .
515	Returns true if the angle is a distance
516	Binds events to an element .
517	The default handler for the specified type .
518	Handle touch events
519	Returns the value of the transform
520	Set the value of an element
521	Apply transform to transform
522	Get the path for the plugin
523	Get the payload
524	Adds a new page to the current page
525	Returns the content of a section
526	Handles the content of the page .
527	Inserts the parent element at the specified index .
528	Creates a new dropdown .
529	Create a new button
530	Removes the specified button
531	Remove all buttons from the list
532	Helper function to toggle the state in the sidebar
533	filter the summary
534	Initializes the dropdown .
535	Initialize the sidebar
536	Add a directive
537	A directive .
538	Creates a new Tox instance .
539	Creates a new module for the given module .
540	Parse CSS files
541	Metadata constructor .
542	Check if the given type is valid .
543	Create a new query
544	Define a driver error .
545	Returns a promise that resolves to the host
546	Returns a promise that resolves to a connection .
547	Extend a list of options
548	Creates a new options object .
549	Validates the protocol options
550	Validates the socket options .
551	Ensure options are valid .
552	Sets the default protocol for the given protocol .
553	Get the name of an object
554	Returns the type of the given code
555	Header constructor .
556	Generate a timestamps .
557	Creates a new LongBuffer .
558	Initialize a new aggregate .
559	Create a new Host instance
560	Creates a new ripple operation .
561	Constructs a new DataTable .
562	Constructor for DataSource
563	Execute the client
564	Constructs a new DataTable .
565	Creates a new Schema .
566	Creates a new Schema .
567	Creates a new Schema object .
568	Returns a new version of the schema
569	Encode a route
570	Returns a list of files .
571	Creates a new function instance .
572	Copy buffer to buffer
573	FIXME FIXME
574	Create a new logger
575	Converts an object to camelCase
576	Recursively extend two objects .
577	Creates an iterator over an array .
578	Converts iterator to array .
579	Returns a function that can be used to compare two values .
580	Inserts an item into the sorted array .
581	Validate function .
582	Returns a string with the given value .
583	Creates a wrapper for a wrapper .
584	Creates a new white list of white list
585	The default event handler .
586	Read a frame buffer .
587	Creates a connection object .
588	Get a clock identifier from a clock ID
589	Generate a node identifier
590	Returns a list of ticks
591	Get the ticks of a given tick
592	Generate a timer
593	Encoder class .
594	Returns the number of leading zeros
595	Initialize a new instance
596	Returns a list of files
597	Loads the CodeMirror mode .
598	Returns the scrollbars of the scrollbar .
599	Starts the display of the cursor
600	Calculates the position of the line
601	Update the document in the document
602	Sets the selection .
603	Create a new line
604	Returns a copy of an object with the specified properties .
605	Create a new Flow instance
606	Remove event listeners
607	Default event handler for the specified event
608	Returns a copy of the event
609	Generate a unique identifier
610	Handles all events in the queue
611	Create a new dom element
612	Helper function to add dom events to the DOM
613	Remove all nodes from the DOM
614	Returns true if all files are uploaded
615	Returns true if all files are uploaded
616	Handles the upload of the next chunk
617	Add a list of files to the queue
618	Remove a file from the queue
619	Returns true if file is unique
620	Returns the average of the upload .
621	Sets the size of the upload .
622	Get the progress of the progress
623	Handles all the chunks in the queue .
624	Creates a new Stream
625	Returns the contents of the current chunk .
626	Returns true if the contents are available .
627	Returns the size of the upload .
628	Reads and parses a web file
629	Initialize the XMLHttpRequest .
630	Initialize the process .
631	Returns true if the file is ready
632	Creates a new FormData object
633	Evaluate the given options .
634	Iterate over an array of objects
635	Create a new table
636	Returns true if the file is valid .
637	Inserts table content into table
638	Counts the number of rows in the table
639	Create a new row
640	Returns the header name for the given header .
641	Define a class
642	Parse a parameter .
643	Creates a new Transform object .
644	Generate a parameter
645	Create a new configuration .
646	Create a new CloudFront instance
647	Returns a promise that resolves to the specified mode .
648	Resolves a LL file .
649	Create a config object
650	Returns the resource type of the resource
651	Creates a new Drag object .
652	Iterate over an object .
653	Creates a new object .
654	Checks if a value is a plain object .
655	Logs the given type to the console .
656	Create an element
657	Add a class to the element
658	Add a class to the DOM element
659	Returns the position of an element
660	Appends content to an element
661	Get data from an element
662	Returns true if the element has a data property
663	Remove data from element ID
664	Handle multiple events
665	Remove an event handler
666	Create an event handler .
667	Initializes the video .
668	Prepares a callback to be used when the window is ready
669	Sets the content of the given element .
670	Creates a new throttled function which invokes fn once per milliseconds .
671	Returns true if the given type is a valid event type .
672	Initialize a new Component .
673	Returns a function that can be used to perform a range .
674	Returns the value of a range
675	Creates a new TimeRange object .
676	Creates an array of dates from the given range .
677	Create a list of cue cues
678	Extract file extension from file extension .
679	Loads a serializer from a string
680	Constructs a RGBA color .
681	This function is called when the user has changed .
682	Parses the value of an option
683	Check progress progress
684	Finds the first primary edge of the first test .
685	Add plugin to plugin
686	trigger an event
687	Create a plugin instance
688	Create a plugin instance
689	Create a new player
690	Returns a byte number
691	Sets the color of the chart
692	Sends a message to the module
693	Initializes the Dialog
694	Create a breakpoint for a breakpoint .
695	Create a new instance of the template
696	Generate a custom option
697	Returns the size of the canvas
698	Creates a number of buttons
699	Create a new template file
700	Creates a new tab object .
701	Returns an object with the given options .
702	Returns the viewport size of the viewport
703	Check if the version is a new version
704	Converts a string to a string
705	Constructor for a cell
706	Get all projects
707	Initialize the config .
708	Filter the env variables from the environment
709	Returns a list of plugins that can be merged into one .
710	Register a template
711	Generate a plugin
712	Render the engine
713	Remove all sockets .
714	Connect to the connection .
715	Returns the status of the job
716	Prepare a job
717	Destroys an array of attributes
718	Set the POST request body
719	Returns the body of a request .
720	Create a new project
721	Retrieve the user s login page .
722	Returns true if the user is authorized .
723	Block for text output
724	Recursively find a nested app
725	Returns a list of all files in the given directory
726	Returns a list of libraries for the given library
727	Returns a Promise that resolves to disk .
728	Create an accessor function .
729	Get accessor .
730	Parse the given string .
731	Checks if the given directory exists .
732	Initialize a new instance
733	Set an option
734	Initialize the module
735	Aborts the file ready state .
736	Get the type of the specified type
737	Remove a listener for the specified event
738	Unbinds the specified function .
739	Returns a RegExp instance .
740	Returns the flash version number
741	Remove the SWF object from the DOM
742	Returns the origin of the given URL
743	Constructor for the constructor
744	Checks if a value exists in an array
745	Returns a new array with the given values .
746	Returns true if two arrays are equal .
747	Returns the size of a string .
748	Add a value to the field
749	Generates a list of fields .
750	Returns true if the class is a class name
751	Add a class to the DOM element
752	Creates a new class instance
753	Returns the style name of the specified style .
754	Returns the root node of the given node .
755	Returns the size of an Element
756	Returns the width of an element
757	Remove an event from an object
758	The base implementation of the blob
759	Rotate the image to the given image
760	Get a list of entries
761	Returns a promise that resolves to the given URL
762	Sets the value of the request .
763	Get the response from the response
764	Constructs a mime mime .
765	Send data to client
766	Helper function to create a new state object
767	Merge two objects .
768	Destroy the image
769	Define a setter function
770	Define a property on an object
771	Creates a SyntaxError .
772	Creates a 4 - bit matrix
773	Create a new flip .
774	Calculate the contents of a matrix
775	Checks whether or not a matrix is in the same order .
776	Returns a list of ticks
777	Format date format
778	Validates the chart model
779	Returns true if the ticks should be ignored
780	Convert a number to a number
781	Returns a copy of the source object .
782	Determines whether a given interval should be used
783	Detects the given number of numbers .
784	Utility function to create a new transformer
785	Checks whether a file is valid .
786	Loads a resource
787	Log all nodes in a given node
788	Returns the closest ancestor to the given path
789	Get a hash
790	Get the current position of the current map
791	Returns the base path for the request
792	Creates a new IP address .
793	Returns an object with the given name
794	Returns a new instance of the given container
795	Apply a middleware to the middleware
796	Register a middleware function
797	Create a new provider
798	Create a new provider
799	Creates a new Service
800	Create a new service
801	Create a factory
802	Define a property
803	Sets the value of a container
804	Sets the value of a container
805	Returns a constant .
806	Decorator for decorator
807	Create a factory instance
808	Create a new instance
809	Register a service
810	Resets a new array of providers .
811	Throw an AST node
812	Checks whether a given node is an event .
813	Register an event .
814	Detect variable declarations
815	Returns a promise that resolves to the given function .
816	Removes a variable identifier from a given identifier .
817	Returns a function that checks if a node is a function .
818	Check if a call expression is a function call .
819	Checks whether or not a node is an ExpressionStatement .
820	Returns a promise that resolves to the error message .
821	Evaluates the top level of a given level declaration
822	Reports a block of the given block .
823	Returns the node of the given node .
824	Checks for a variable declaration
825	Creates a new rule object .
826	Finds the power of a given rule .
827	Resolve plugin name
828	Write config file to disk
829	Lint - disable - line errors
830	Lint a file
831	Creates a new CLI options object .
832	Returns a list of options
833	Check if a node is visible .
834	Returns true if the given string is a literal .
835	Creates a new FontFont instance .
836	Creates a new Player .
837	Creates a new playlist .
838	Checks if the system exists
839	Returns a Promise .
840	Create a watcher
841	Recursively resolve the ignore object
842	Returns true if a prop exists .
843	Converts a single property to an array .
844	Create a babel plugin
845	Create image loader
846	Loads a CSV file .
847	Create a new loader
848	Prepend entry to the entry
849	Build a webpack build
850	Merge two objects into one .
851	Set the default value for the specified type
852	Creates a new validator instance .
853	Convert a name to a type
854	Validate a type .
855	Create a custom event
856	Initializes a custom event
857	Clean up event listeners
858	Called when all events are ready
859	Normalize touch event .
860	Handles the mouse event .
861	Handles mouse move events
862	Add a point to the tracked point
863	Update the position of the frame
864	Called when the drag is ready
865	Calculate the position of an element
866	Returns true if the bounding box is bounding box
867	Initializes the comp files .
868	Create a new log file
869	Evaluates the data in the data array .
870	Create a new job
871	Create a new instance
872	Create a new task
873	Returns a Promise that resolves to a Promise .
874	Returns a new array with the same length
875	Creates a new listener .
876	Wrap a callback with a new listener
877	Returns a list of directories recursively
878	Returns a function that can be used to create a function which can be used to create a function which can be used to create a function .
879	Creates a new async function .
880	Returns a function that can be used to create a new async function .
881	Recursively traverses an object .
882	Returns a promise that resolves to a promise .
883	Returns a list of files
884	Creates a copy of the index .
885	Move index to index
886	Check if the index exists
887	Load a module
888	Parse the accepted language .
889	Parse a language string .
890	Returns the priority of the given language
891	Get the language specification
892	Returns a list of supported languages .
893	Compare two values
894	Returns the accepted charset
895	Parses a regular expression .
896	Returns the priority of the given prefix
897	Returns the specified spec
898	Checks that the charset has been accepted .
899	Parses a string into a string .
900	Returns the priority for the given index .
901	Returns a promise that resolves to the specified version .
902	Parses the accepted response .
903	Parse media type
904	Returns the priority of the given media
905	Create a media type
906	Returns a list of media types .
907	Returns the count of the given string .
908	Splits a pair of key pairs into a pair of key pairs .
909	Splits a media array
910	Splits the parameters into a string .
911	Load webpack config
912	Assign an object to the given path
913	Returns a copy of the filter string
914	Evaluate a page
915	Wait for a page
916	Create a new PhantomJS instance .
917	Returns a promise for the canvas
918	Create a cube matrix
919	Convert image data to color format
920	Compress a list of colors .
921	Converts data to an array of data
922	Create a new file
923	Create a copy of the options
924	Create a channel
925	Error handler .
926	Create a new connection
927	Error handler .
928	Creates a new Application .
929	Create an array of channels
930	Helper function to parse shim for shim
931	Compare two nodes
932	Dispatches an event on the DOM node .
933	Create a new connection
934	Returns the value of the given type .
935	Create a new event .
936	Define a custom redirect function .
937	Define a call to a function .
938	Define a custom event .
939	Returns a wrapper around a wrapper .
940	Wraps an event .
941	Returns an array of listeners .
942	Defines the attribute of the specified event .
943	Define a custom event target
944	Retrieve a file for a file
945	Checks if all files have finished
946	Handler for mousemove events
947	Constructs a new reporter instance .
948	Converts a number to a number .
949	Parse a JSON string .
950	Serialize a document .
951	Serialize JSON
952	Define a virtual module
953	Get the name of the filename .
954	Returns true if the semver is a semver .
955	Returns true if the protocol is a valid target .
956	Returns true if two arrays are equal .
957	Returns a string representation of a rule
958	Returns a promise that resolves with the given arguments .
959	Helper method to get a method from a method
960	Returns a list of files
961	Runs the package . json
962	Creates a new Form
963	Remove temporary directory
964	Abort the configuration
965	Create a sandbox with the given context .
966	Returns a promise that resolves to the format .
967	Create a sandbox with the given context .
968	Constructor for a module
969	Checks whether a script is loaded
970	Returns the URI of a URI
971	Get the content of a URI
972	Retrieve the config for a page
973	Set global variables
974	Convert a 3232 hash to a 32 bit32 hash
975	Converts a 32 - bit hash to a 32 - bit array
976	Binds a set of properties to an object
977	Returns a copy of the setter .
978	Replace the value of a node with a new value
979	Remove a node from the list .
980	Change the value of a node
981	Returns the next node in the list
982	Handle change event
983	Constructs a new node instance .
984	Removes a node from the tree .
985	Finds all nodes in the given scope
986	Creates a new node with the given scope .
987	Recurse through the given scope .
988	Creates a function that renders an HTML element .
989	Checks for a given feature
990	Create an entity name .
991	Merge multiple configs
992	Loads a YAML file .
993	Get params from baseUrl
994	Loads the given config .
995	Define a property
996	Create a logger
997	Injects the manifest .
998	Injects the SWF data .
999	Inject async into async
1000	Create a react - renderable react component
1001	Execute a child process
1002	Spawn a child process
1003	Calculates the distance between two points .
1004	Set attribute value
1005	Create a custom markup for the given property
1006	Returns a listener for the event .
1007	Create a new Queue
1008	Create a new component instance
1009	Returns a promise that resolves to the given root .
1010	Determine if a value should be fulfilled
1011	Remove property value from node
1012	Helper function to update DOM elements
1013	Compile a process .
1014	Creates a new instance of the Backbone
1015	The Backbone constructor .
1016	Define a function that calls the callback function .
1017	Create a new channel
1018	Create a new connection
1019	Create a new DragDrop instance .
1020	Creates a new GraphQL .
1021	Sorts the date between two dates .
1022	Returns a promise that resolves with the given arguments .
1023	Returns a promise that resolves with the given arguments .
1024	Processes a regular expression .
1025	Creates a list of targeted actions .
1026	Processes the given node and returns the result .
1027	Apply arguments to the specified function .
1028	Define a flow .
1029	Returns a new block of this block .
1030	Execute a flow .
1031	Pads a string .
1032	Creates a SMST curve .
1033	Creates a new SMTP pair .
1034	Generate a JS API
1035	Adds an event handler to the queue
1036	Remove an event listener for the specified event
1037	Create a new view
1038	Product class .
1039	Creates a new Carto .
1040	This function is called when a promise is resolved .
1041	Converts a date string to a date .
1042	Unbinds the mouse event .
1043	Sets the value of the chart
1044	Creates a new googleUser instance .
1045	Converts a cell to a cell
1046	Returns a string representation of an object
1047	Converts an object to a string
1048	Random constructor .
1049	Returns true if the date is a date
1050	Creates a new logger instance
1051	Runs a socket request .
1052	Send a script to the server
1053	Validate a parameter .
1054	Returns a promise that resolves to the given parameter .
1055	Creates a function that can be used to specify a configuration object .
1056	Creates a new NNodes object
1057	Returns a copy of the dom element
1058	Check for changes
1059	Create a new DOM element
1060	Remove the popup .
1061	Get the value of the filter
1062	Create a new table
1063	Sets the action on the page
1064	Apply filters to the server
1065	Add a component to the store
1066	Initializes the component .
1067	Remove a component from the store .
1068	Represents a table
1069	Sets the action for the given action .
1070	Displays an action to the action .
1071	Assigns a row .
1072	Gets the row for a row .
1073	Extracts the value of an attribute .
1074	Iterates over each element in the map .
1075	Creates a new filter function .
1076	Returns an array of elements in an array
1077	Adds an item to the array .
1078	Replace all objects in an array
1079	Returns the array of two arrays .
1080	Remove an event listener
1081	Respond to the given target .
1082	Determine if a property has changed .
1083	Set a property on an object
1084	Add a new value to the list
1085	Remove a property from the list
1086	Iterates over each value of the callback
1087	Removes the binding of the object .
1088	Apply a function to a promise .
1089	Initialize a new Container .
1090	Register a factory
1091	Removes the given name
1092	Returns the name of the given name .
1093	Add a type to the injection
1094	Returns an instance of injection name .
1095	Add a factory to the factory
1096	Returns a copy of the parent .
1097	Returns true if the given key exists .
1098	Creates a new binding .
1099	Converts string to camel case
1100	Set the value of a property .
1101	Returns the value of a property .
1102	Create a new class
1103	Returns the computed property of a computed property .
1104	Checks if a property exists .
1105	Returns the value of this element
1106	Returns an array of the elements in this collection .
1107	Remove an element from the list .
1108	Add a new observable to the array
1109	Creates a new array of computed properties .
1110	Add multiple objects to this collection .
1111	Remove all properties from this object .
1112	Send an event to the specified event
1113	Returns a promise that resolves to a given entity .
1114	Define a promise
1115	Returns an object with the given actions .
1116	Define action handler
1117	Adds an array of items to the array .
1118	Returns a new array with the index in the array .
1119	Returns a new array with the given index .
1120	Represents an array of numbers .
1121	Constructs a new Array .
1122	Finds an index in an array of operations .
1123	Finds the item in the given index .
1124	Creates a new content instance
1125	Removes an item from the collection .
1126	Sets the length of this element .
1127	Returns a copy of this collection .
1128	Finds an element by its id .
1129	Add a class to the element .
1130	Returns a new attribute with the specified attributes .
1131	Returns a new element with the specified name .
1132	Returns the current element of the specified element .
1133	Adds event listeners to the event .
1134	Create an event handler
1135	Returns a new instance of the given view .
1136	Returns the parent of the given view
1137	Returns the parent of the given view .
1138	Create a new instance of the template .
1139	Sets the value of a property .
1140	Sets the value of the given attribute .
1141	Sets the value of an attribute .
1142	Returns a string representation of a classpath
1143	Create a new child view
1144	Render a view
1145	Remove all rendered children
1146	Remove a view from the DOM
1147	trigger an event
1148	Remove a child view from the DOM
1149	Add a child view to the DOM
1150	Remove a view from the DOM
1151	Create a new content instance
1152	Returns a new instance of the specified action .
1153	Returns a function that can be used in a bindable property .
1154	Render a DOM element
1155	Creates a new HandleView instance
1156	This function is called when the template is ready .
1157	Handler for the state of the event .
1158	Initialize the router
1159	Initialize the route
1160	Returns the model for the given model .
1161	Returns a copy of a model
1162	Returns a new instance of the controller
1163	Remove a parent view from the parent
1164	Create a new view model
1165	Checks if a node is active
1166	Returns a function that can be used to create a route
1167	Checks whether a view is a view .
1168	Returns a new outlet .
1169	Returns the location of the current location
1170	Update the history
1171	Called when the browser is clicked
1172	Sets the root path to the root .
1173	Returns the name of the given name .
1174	Returns the name of the template .
1175	Returns the main module
1176	Initializes the initializer .
1177	Checks if the application is ready .
1178	The default event handler fired when the plugin is initialized
1179	Create a new Ember instance
1180	Adds a record to the record .
1181	Sets the type of a record .
1182	Returns a new instance of the namespace .
1183	Adds a new instance to the queue
1184	Returns a new instance of the stack .
1185	Removes the test methods from the server
1186	Creates a new prototype .
1187	Converts a descriptor to a descriptor
1188	Convert property descriptor to a descriptor
1189	Returns true if the descriptor is a valid descriptor .
1190	Returns a Promise that resolves to a handler .
1191	Sets a value by name .
1192	Returns a promise that resolves to the target .
1193	Wraps the given target object .
1194	Returns the extension of the extension .
1195	Delete a property
1196	Returns a function that iterates over the target .
1197	Returns a Promise that resolves to the specified object .
1198	Returns an object that inherits from an object .
1199	Returns a function that can be used to create a wrapper around the constructor .
1200	Load an object
1201	Serializes a key into a JSON object .
1202	Create a new record
1203	Serializes the given type .
1204	Create a new record
1205	Returns a copy of the store .
1206	Deletes the given value
1207	Saves an array of values to a record .
1208	Adds a record to the collection .
1209	Create a new record .
1210	Returns true if the given adapter exists
1211	Returns a new instance of the given type
1212	Returns a new instance of the given ID
1213	Retrieve an adapter for a record
1214	Creates a new instance of the adapter .
1215	Returns true if the given type exists .
1216	Create a new record
1217	Returns the adapter for the given type .
1218	Returns the record type of the given type .
1219	Remove a record from the collection .
1220	Returns a new instance of the given record
1221	Create a new record
1222	This method is called by the adapter .
1223	Create a new record
1224	Creates a new EmberMap instance
1225	Add a new model
1226	Add a payload to the payload
1227	Add a new model
1228	Create a new record
1229	Adds a new record to the record
1230	Creates a deep clone of the given object .
1231	Add a message to the server
1232	Retrieve the content of the attribute
1233	Sets the result of the model .
1234	The default event handler fired when the user has changed .
1235	Sets up a binding .
1236	Save a model to the server
1237	Refreshes the model
1238	Sets the value of the given attribute .
1239	Binds a callback to a callback
1240	Converts a callback to all attributes
1241	Sets the value of a property .
1242	Returns a list of all bindings
1243	Set new record changes
1244	Add a record to the given array
1245	Updates the record in the given array
1246	Create a record for the given type .
1247	Create a record for the given record
1248	Creates a new record with the given type .
1249	Creates a new adapter instance
1250	Add a record to the array
1251	Loads the given record .
1252	Generate a record
1253	Returns a new instance of the store
1254	Create a fixture for a fixture type
1255	Returns a serializer for a given type
1256	Adds a property to the hash .
1257	Creates a new instance of the given type .
1258	Converts the given payload into a single array .
1259	helper function to create an array
1260	Serialize a record
1261	Get the type of a property
1262	Returns a promise that resolves to the given type .
1263	Returns a promise for a given type .
1264	Create a record
1265	Create a new record
1266	Delete a record
1267	Returns a URL relative to the given path .
1268	Create a new AJAX request
1269	Create a new rule
1270	Returns a new instance of the given type
1271	Serialize a record
1272	Get the type of a property
1273	Converts string to camelCase
1274	Converts camelCase to camelCase
1275	Recursively unbinds the given type .
1276	Returns a promise that resolves to the record .
1277	Adds a new attribute to the store .
1278	Add a component
1279	Converts the given type to a string .
1280	Returns a promise that resolves to the XHR .
1281	Convert an object to a string
1282	Create a new attribute
1283	Compile a list of nodes in the tree
1284	Creates an array of elements for the element
1285	Replace an element with a new one .
1286	Creates an array of expressions .
1287	Returns true if the request is the same origin .
1288	traverse all child nodes
1289	Create a new client
1290	Create a new connection
1291	Create a set of attributes
1292	Send a request to the server
1293	Processes a Bootstrap bootstrap file .
1294	Returns a config object .
1295	Returns a string representation of the file .
1296	Convert a JavaScript module to a native JavaScript object
1297	Get the package . json
1298	Get the main module .
1299	Checks if a file should be ignored .
1300	Prints the user to the console .
1301	Creates a new instance of the provided arguments .
1302	Creates a new instance of the remote object .
1303	Returns a Promise that resolves to the given value .
1304	Sets the value of a call to a callback .
1305	Validates a JSON object .
1306	Create a new model
1307	Handle errors
1308	Creates a zip file .
1309	Execute a command .
1310	Read a file .
1311	Converts a YAML file to a YAML file .
1312	The base implementation of _ . js
1313	Determine the base class
1314	Log an error to the console
1315	Get the bucket for a bucket
1316	Builds a new config object
1317	Builds a new configuration object
1318	Build a lambda config
1319	Send a response to the server
1320	Convert options to a string
1321	Merge two objects .
1322	Open a popup
1323	Creates a popup for the popup
1324	Open a popup
1325	Opens a popup
1326	Returns the contents of the given range
1327	Returns a list of characters in a range
1328	Returns true if the given text is a style attribute .
1329	Returns a promise that resolves to the specified style .
1330	Returns a promise that can be used for snippets in the editor
1331	Returns a copy of the given CSS selector
1332	Generate Markdown markup for a template
1333	Extract a prefix from a string
1334	Checks whether the editor is valid .
1335	Set the value of the property
1336	Returns true if the attribute has changed .
1337	Returns an event handler for the given property
1338	Create a copy of a model
1339	Initialize a new Image
1340	Create a task
1341	Inject template .
1342	Returns the size of the buffer
1343	Creates a new 64 - bit implementation of the given type .
1344	Constructs a new Stream .
1345	Returns an object that can be used to create a new object .
1346	Breaks a sandbox with the given name .
1347	Removes an object from the sandbox .
1348	Returns a function that returns a list of events .
1349	Remove event handlers
1350	Removes all items from the DOM .
1351	Returns true if the given inline option is inline .
1352	Load a module
1353	Recursively update the hierarchy
1354	Creates a new row
1355	Returns a map of class names .
1356	Stringify an object
1357	Counts the number of line segments
1358	Wraps a condition with a condition .
1359	Returns true if the given condition is a condition .
1360	Add a label to the stack
1361	Returns a function that can be used to assign a function to its name .
1362	Wraps the given condition .
1363	Create a new module
1364	Calculate the stats for a report
1365	Creates a new config object .
1366	Merge two objects .
1367	Returns a copy of the config .
1368	Returns a list of dependency files for a given path
1369	Computes the configuration of the given config object .
1370	Add a list of bundles to the bundle
1371	Constructs a new JS object .
1372	Convert code to JS code
1373	Get the module type .
1374	Create a new transform matrix
1375	The mouse wheel .
1376	Creates a new delta .
1377	Convert data to raw data format
1378	Parse the given URL .
1379	Returns a copy of the file .
1380	Get the url for a given url
1381	Reads a file .
1382	Returns a promise that resolves to the console .
1383	Returns a JSON response object
1384	Returns a promise that resolves to a node .
1385	Prepare a write file
1386	Parses a sitemap file and returns it
1387	Generate a generator
1388	Generate a generator
1389	Generate an array of sources
1390	Normalizes a JSON object .
1391	Returns a promise that resolves to the missing options .
1392	Prepare options
1393	Returns the output path for the given path
1394	Maps a page to a file
1395	Creates a new generator .
1396	Returns a promise that resolves to the page .
1397	Checks if a path exists .
1398	Returns the PhantomJS phantomJS module .
1399	Creates a new instance of the given input .
1400	Prepare options
1401	Create a new listener for the given input
1402	Create a lock
1403	Construct a new Notification .
1404	Start the poller
1405	Add a file to the queue
1406	Check if a file exists
1407	Remove the file
1408	Remove a file
1409	Writes the file to the page
1410	Add a line to the page
1411	Get the default options
1412	Get the default options
1413	Create an array of values .
1414	Returns a copy of the array .
1415	Returns the timestamp of the given ms .
1416	Get the url of the server
1417	Parse params
1418	Strips a trailing slash .
1419	Returns a copy of an object .
1420	Adds events to the event .
1421	Creates a new request object
1422	Convert request to request queue
1423	Get a list of metrics
1424	Send a request to the server
1425	Returns a promise that will be resolved when all of all promises are resolved .
1426	Finds the node of a given node
1427	Returns a string representation of a vowel .
1428	Create a list of expressions .
1429	Returns a function that can be used to create a ctx .
1430	Creates a new EObject instance
1431	Generate a random word
1432	Create a new Backbone .
1433	Generate a css file
1434	Creates a new task
1435	Returns a copy of the document type
1436	Returns the length of the given length .
1437	Returns a promise that resolves to the collection .
1438	Assign user permissions to user .
1439	Returns a promise that resolves to all channels .
1440	Outputs the help message to the console .
1441	Returns true if the given argument is readable .
1442	Ensure that an object is valid .
1443	Build a list of items in the stack
1444	Gets the current id of the dialog
1445	Returns a function that can be used to synchronously synchronously
1446	Checks if a string value is a valid Date object
1447	Converts an ISO 8601 timezone to an ISO 8601 timezone .
1448	Compare two values .
1449	Compares two dates .
1450	Converts an ISO 8601 timezone to an ISO 8601 timezone
1451	Returns a Promise that resolves to the start of a Promise
1452	Exit Node
1453	Send a message to the host
1454	Delete a entity
1455	Save a single entity
1456	Get a module
1457	Get the Entity Entity instance
1458	Get the module name
1459	Create a list of sources .
1460	Generate a module .
1461	Log a module
1462	Build the importers
1463	Build a directory recursively
1464	Generate a UUID
1465	Creates a new cache
1466	Create a new module
1467	Creates a new cache object
1468	Stop the broker
1469	Returns a Promise that resolves to the graph .
1470	Removes a module .
1471	Returns a mouse move event .
1472	Sends a rule to the server
1473	Returns an array of HTTP headers for a request .
1474	Parse the config file .
1475	Parse the contents of a config object .
1476	Returns a map of the config object .
1477	Parse command line arguments
1478	Parse command line arguments
1479	Returns a promise that resolves to a rule .
1480	Creates an error with the given code .
1481	Updates the working state of the working directory
1482	Fetch a branch from a branch
1483	Creates a new driver
1484	Ensures that buffer is a buffer .
1485	Ensures that a string is valid .
1486	Returns true if two buffers are equal .
1487	Returns a promise that resolves to the working set .
1488	Returns a list of entries in the tree
1489	Finds a file in the given path .
1490	Returns a promise that resolves to the repository .
1491	Flush the given branch
1492	Format a message
1493	Returns a promise that resolves to the driver
1494	Pulls a branch from a tree
1495	Compares and returns a reference for a given reference .
1496	Recursively resolve the conflict tree
1497	Creates a new commit object .
1498	Get a list of entries in the tree
1499	Adds a new blob to the cache .
1500	Returns a promise that resolves to the repository .
1501	Create a new commit object
1502	Returns a promise that resolves to the repository .
1503	Get a file for a given file
1504	Read a string from a file .
1505	Returns true if file exists .
1506	Remove a file
1507	Helper function to move a file from a file .
1508	Returns true if file is changed
1509	Create a proxy for the connection
1510	Create an instance of Nocks
1511	Configures the express application .
1512	Create a proxy for the proxy server
1513	Clean up all files
1514	Set the change state of a file
1515	Reverse all changes in the current state
1516	React to a file in the working directory .
1517	React to the working directory
1518	Reverse all the files in the given list
1519	Returns the path of the given path .
1520	Check if a path exists
1521	Read all files in a directory
1522	Move files to a directory
1523	Create a new branch
1524	Helper function to update a branch
1525	Remove a branch from a branch
1526	Returns a promise that resolves to the given object .
1527	Returns a promise that resolves to the request .
1528	Creates a kodyt object .
1529	Converts a feature array to a feature array
1530	Add feature to feature
1531	Add feature to feature
1532	Add a feature to the feature array
1533	Converts a feature array to a feature array
1534	Converts a feature array to a feature array
1535	Creates a new array of arrays .
1536	Extract a list of labels
1537	Generate a list of data labels
1538	Recursively classify a tree node
1539	Constructs a binary binary binary string .
1540	Constructs a new weight .
1541	Sets the weight of all classes .
1542	Initialize a new class with the given prefix .
1543	Returns true if the current values are equal .
1544	Create a new class for the given class .
1545	Checks whether the given class is valid .
1546	Returns an array of the classes that are not valid .
1547	Initialize the dataset
1548	Returns a string representation of a model
1549	Creates a new feature for the given feature name
1550	Creates a LLinear object .
1551	Initialize the dataset
1552	Returns a string representation of a model
1553	Add a label to the label
1554	Initializes the module .
1555	Concat an array of options with the given options .
1556	returns a list of nodes
1557	Filters the relation for a relation .
1558	Returns a list of all the files
1559	Get a list of resources
1560	Returns a list of resources
1561	Returns a list of bundles that match the given name .
1562	Returns a promise that resolves to the given path .
1563	Create a new package
1564	Create a new bundle
1565	Loads a single bundle .
1566	Returns true if the given path matches the given rule .
1567	Get a list of resource files
1568	Returns a list of resources .
1569	Returns true if the given filter matches the given filter .
1570	Returns a list of packages .
1571	Returns an array of all the keys in the tree
1572	Creates a new bundle .
1573	Returns a copy of the source object .
1574	Bundle constructor .
1575	Generate scale scale scale
1576	Creates a new stream of messages .
1577	Builds the gulp function .
1578	Returns a new chunk of the given string .
1579	Returns a promise that resolves with the given options .
1580	Removes all elements from the array .
1581	Extracts a CSS bundle from a file .
1582	Validates a placeholders object
1583	Returns a list of text items
1584	Traverse the given json object
1585	Finds all the dependencies of the given package .
1586	Parse a query string into an object
1587	Stringify an object
1588	Takes an HTML string and adds it to the DOM .
1589	Binds events to an element
1590	Initializes the constructor .
1591	Create a new widget
1592	Returns the value of the specified Element
1593	Returns a promise that resolves to the module
1594	Generate a list of services
1595	Constructs a new Shortline .
1596	Finds an element by name .
1597	Create a report
1598	Create a new http request
1599	Creates a git repository .
1600	Creates an error object .
1601	Create a scoped version of the given scope
1602	Returns a copy of the given CSS
1603	Constructs a new UrlError .
1604	Checks whether the build is a commit .
1605	Remove a trailing slash .
1606	Parse the given options .
1607	Serialize a string .
1608	Render a page
1609	Get the url of the git repository
1610	Creates a list of files .
1611	Compile the index file
1612	Sorts list by name .
1613	Find an array of emoji
1614	Fetches all connected functions
1615	Create a regular expression for a given type .
1616	Returns a string representation of a selector .
1617	Create a new index
1618	Inserts a table
1619	Inserts a table
1620	Called when the callback is done
1621	Parse parameter options
1622	Returns true if the given prop is false otherwise .
1623	Creates a new image with the given path
1624	Returns true if the log level should be allowed
1625	Get the value of the radio button
1626	Returns a transformer that can be used to add a radio button
1627	Set the radio button
1628	Set the default value
1629	Set the radio button
1630	Returns a copy of the given object .
1631	Returns a copy of the given object .
1632	Create a new cookie
1633	Check if the browser is set .
1634	Format a message
1635	Create a new range
1636	Creates a new chart
1637	Add a chart
1638	Apply the selection to the chart .
1639	Creates a copy of the selected options .
1640	Creates a new chart .
1641	Create a watcher
1642	Create a watcher
1643	Add an identifier to the chart
1644	Loads a entity .
1645	Generate action values
1646	Creates an action creator for the given action type .
1647	Returns a random number between two dates
1648	Logs a message to the console
1649	Remove a subscriber from the list
1650	Remove all event listeners for a given event
1651	Adds all events to the queue
1652	Returns a promise that resolves to the given channel
1653	Returns a list of subscribers for a given channel
1654	Add a channel to the channel
1655	Unsubscribe from a channel
1656	Subscribe to a channel
1657	Unsubscribe from a channel
1658	Handle an event handler
1659	Publish a channel
1660	Resolves a namespace to a namespace
1661	Returns a promise that resolves to a promise .
1662	Returns a promise that resolves to a promise .
1663	Returns a promise that resolves to a promise
1664	Create a fake module
1665	Returns true if the given object is a jQuery object .
1666	Returns true if the given object is an event target .
1667	Add a module to the module
1668	Returns a function that wraps a method
1669	Register a module
1670	Sets a module id to a module instance
1671	Create a new module instance
1672	Initializes the init function .
1673	Create a new module instance
1674	Create a new module instance
1675	Helper function to create a new module
1676	Creates a function that sets the value of the object property .
1677	Get all the modules for a given module .
1678	Stop a single module
1679	Destroys a module
1680	Remove a module .
1681	Stop all the modules
1682	Stop a single module
1683	Removes a module from the given map
1684	Delete a module
1685	Generate the main function
1686	Returns the value of the picker
1687	Get the value of the picker
1688	Returns the value of the input element
1689	Serializes a markdown markdown into a markdown markdown .
1690	Converts a snippet into a document .
1691	Returns the state of the specified suite .
1692	Adds a suite to the tree
1693	Create a new snapshot instance
1694	Push the current node into the current state
1695	Transform a suite into a suite
1696	Convert a single snapshot to a list of files
1697	Generate a suite
1698	Parse delimiters .
1699	Resolves the file path to the suite
1700	Convert a list of snapshots to a list
1701	Formats a list of warnings for a given number
1702	Provides a snapshot of a snapshot of a snapshot of a file .
1703	Create a newline plugin
1704	Replace a new string with the newline
1705	Creates a new block of the editor .
1706	Returns true if the given list contains the given list
1707	Converts a hex color to RGB
1708	Render a rule
1709	Creates a new instance of the factory
1710	Log a debug message .
1711	Returns true if obj is a Buffer
1712	Helper function to encode a string .
1713	Convert a string to a string
1714	Poll constructor .
1715	Initialize a new transport .
1716	Remove all listeners .
1717	The default constructor .
1718	Parse a string .
1719	Initialize the model
1720	Create a widget
1721	Returns a promise that resolves to a string .
1722	Add a new api
1723	Get the content of a remote JSON file
1724	Splits a method into a method
1725	Copy a remote client
1726	Create an error object
1727	Utility function to capture stdout
1728	Create a new stream
1729	Unregister a stream
1730	Wraps a function in a stream .
1731	Get the value of the select box
1732	Rounds two numbers
1733	Add a frame to the queue
1734	Creates a new node .
1735	Converts a node to a node
1736	Returns a Node .
1737	This method is called by the queue
1738	Set a node .
1739	Add a node to the node
1740	Bind event listener
1741	Create a delegate delegator
1742	Create a module with the given options .
1743	Returns a promise that resolves to the structure .
1744	Adds a date to the query
1745	Helper function to create a knex object
1746	Create a new instance
1747	Called when all registered all the registry has been destroyed .
1748	Parse language code .
1749	Render source code
1750	Create an arrow color for the given color
1751	Returns the length of the given value
1752	Saves the contents of a file .
1753	Returns a promise that resolves to the results .
1754	Computes the value of a key .
1755	Reads the specified buffer .
1756	Returns a Promise that resolves to the specified buffer .
1757	Read a header from a header .
1758	Reads the index of a key
1759	Return the index of the given keyword
1760	read a block
1761	Checks if a key is in a table
1762	Read a record
1763	Read a record
1764	Read a block .
1765	Read a block from an object
1766	Find a word
1767	Reduce a list of words to an array
1768	Returns a copy of a phrase .
1769	Returns a promise that resolves to a phrase .
1770	Returns true if the specified element matches the specified list
1771	Returns true if the modifier key is a modifier .
1772	Creates a function that adds a key function to the function .
1773	Handles a keydown event on the document .
1774	Handles key press events .
1775	Execute a list of hooks
1776	Create an AMP message
1777	Creates a new GPT .
1778	Reads and parses the given buffer
1779	Returns a promise that resolves to the queue .
1780	Formats a number into a number .
1781	Formats the value of a tag
1782	Format data into a string
1783	Formats a JSON object .
1784	Formats the given value into a string .
1785	Formats a list of methods
1786	Merge config files
1787	Parse properties from a node
1788	Extracts the literal text from a string .
1789	Parses the given string .
1790	Helper function to parse a literal string .
1791	Converts an AST to an AST
1792	Creates a function that wraps a function .
1793	Returns true if the array matches the specified array
1794	Compile a node
1795	Get the type of a tag
1796	Adds an attribute value to the stream .
1797	Checks whether or not a given string is a string .
1798	Set the default value
1799	Reads a xml file .
1800	Add the ui
1801	Logs a message to the console .
1802	Compile a model
1803	Add props to the list
1804	Creates a function that invokes the given function .
1805	Converts a babel function to babel
1806	Returns an array of tagged tags
1807	Logs an error .
1808	Returns a promise that resolves with the given name .
1809	Finds the input element .
1810	Returns an array of validation messages for the given element
1811	Create a new class
1812	Creates a new tool .
1813	Connect to mongo database
1814	Initialize a new shell .
1815	Execute all files
1816	Returns a function that wraps a message .
1817	Handle errors
1818	Helper function to generate a flat structure
1819	Save a file
1820	Create a new picker
1821	Checks if a file is selected
1822	Determine if the path is a directory
1823	Determines if a directory exists
1824	Processes all files .
1825	Processes a file .
1826	Initializes the HTTP server
1827	Sorts the first element in the array
1828	Convert object to object
1829	Create a new transaction
1830	Returns the difference between two dates
1831	Create an error handler
1832	Returns the difference between two dates .
1833	Consumes a pair of stream pairs .
1834	Consumes an array of elements .
1835	Returns true if the given identifier is a string
1836	Called when a socket is loaded
1837	Create a JSON file
1838	Push the given level to the given level .
1839	Event handler for the event
1840	Extracts the contents of the specified key .
1841	Encrypts the encrypted message .
1842	Encrypts the specified command .
1843	Unpack encrypted content from encrypted content
1844	Generate a password from a password
1845	Convert a password to a password
1846	Converts a stream to a stream
1847	Converts a buffer to a Buffer
1848	Generate a random symbol
1849	Creates a new Seeker .
1850	Returns true if the css points are applied
1851	Add a color to the tree
1852	Create a new bundle
1853	Update the current selection
1854	Checks if a texture is needed
1855	Returns true if two dimensions are equal .
1856	Converts a property value to a new property
1857	Returns true if the given property should be transformed
1858	Read a file .
1859	Fetch all requests
1860	Create an instance of Cookie .
1861	Convert a message to an error
1862	Create an instance of Cookie
1863	Process the request options
1864	React to the response
1865	Returns a string representation of the request .
1866	Set a cookie
1867	Returns a new instance of the header .
1868	Set the header .
1869	Set the headers for a header
1870	Create a new header
1871	Returns an array of codec values .
1872	Returns a promise that resolves with the given options .
1873	Converts the table to a table format
1874	Encode a user s auth token
1875	Creates a new Vec2 object .
1876	Constructor for constructor
1877	Represents a 4 - 4 matrix .
1878	Create a new Vec2
1879	Creates a new quaternion object .
1880	Creates a new Vec2 object .
1881	Creates a wrapper for the specified container
1882	Add an event listener .
1883	Returns an object with the default options .
1884	Create a new instance
1885	Constructs a Transform object .
1886	Creates a new Triangle object .
1887	Builds a bash command
1888	Creates an error object .
1889	Returns an array of glob patterns .
1890	Gets the bash shell .
1891	Create a new MemoryTable instance .
1892	Determine the cost of this component
1893	Recursively walk all subviews
1894	Creates a new instance of the provided config .
1895	Adds a callback to the stack .
1896	Iterate over an array .
1897	Iterate over each item in array .
1898	Adds a new date to the specified date
1899	Initialize the server
1900	Show the info for the user
1901	Logs the request
1902	Set the value of a property
1903	Initialize a new storage
1904	Send a request to the server
1905	Returns a promise that resolves to the user .
1906	Returns an error message .
1907	Create a new page
1908	Edit a book
1909	Remove a book
1910	Get a book
1911	Returns a promise that resolves to the specified email
1912	Create a new email
1913	Get a specific email
1914	Returns the payment price
1915	List all channels
1916	Get a book
1917	Returns a promise that will be sent to the database
1918	Returns a promise that will be sent to the client .
1919	Create a new channel
1920	Add sender to sender
1921	Send a message to the sender
1922	Get sender message from sender
1923	Get an email
1924	Remove all emails from the email store
1925	Returns a promise that resolves to the email address .
1926	Adds a black list to the blacklist .
1927	Remove a list from the blacklist
1928	Get the email from the email ID
1929	Prepare file content
1930	Write the output file to the server
1931	Create a new Cookie
1932	Set a cookie
1933	Read a cookie
1934	Deletes the options .
1935	Remove the specified enumerable .
1936	Creates a function that returns a new instance of the function .
1937	Create a clone of an item
1938	Create a new file
1939	Remove a file from the bucket
1940	Sets the action handler for the given action
1941	Returns a promise that resolves to a schedule .
1942	Delete action
1943	Fetch a service
1944	Get the identity of an entity
1945	Returns an object with the given schemas .
1946	Returns a promise that resolves to the target
1947	Get an action from a service
1948	Send a request to the server
1949	Generate a schema for a given schema
1950	Returns a promise that resolves to the given map .
1951	Creates a new response object from the service
1952	Reads the tail of the tail
1953	Returns the length of a string .
1954	Creates a new object with the given pipeline .
1955	Convert query params to query
1956	Define the scheduler
1957	Get meta data
1958	Set a set of action
1959	Set meta data
1960	Converts a namespace to a namespace
1961	Returns the definition for the given name
1962	Returns true if the given value matches the given constraints
1963	Finds an option with the given options .
1964	Returns true if the given identifier is a valid identifier .
1965	Clears the service
1966	Transforms a range to a range
1967	Takes an anchor range and converts it to a range .
1968	Returns the endpoint for the given endpoint
1969	Create an action .
1970	Returns an object with the given schemas .
1971	Get an action from a request .
1972	Returns a function that can be used to create a service .
1973	Synchronously create a set of data
1974	Creates a new gulp instance .
1975	Returns the output of the specified color .
1976	Create a new browser instance
1977	Applies a request to a service
1978	Create a middleware function
1979	Creates a new app instance .
1980	Constructs a matrix .
1981	Generate a URI for a URI
1982	Create a new file
1983	Write the source file to the server
1984	Create a new item
1985	Creates a new Node
1986	Create a new node
1987	Create a new node with the given attributes .
1988	Initializes the constructor .
1989	Applies content to a file
1990	Detects the selectors from the selectbox
1991	Parse a line of text .
1992	The constructor .
1993	Constructs a matrix
1994	Returns a new vector with the given size .
1995	Builds a match for the specified attribute .
1996	Returns true if the given object is the same
1997	Returns the first sibling of the given object .
1998	Parse style formatting .
1999	Returns the distance between two nodes
2000	Initialize a new Lexer .
2001	Constructs a new file .
2002	Logs a message to the console .
2003	Create a new instance of the given variable
2004	Create a new AST node
2005	Creates a new child of the specified type .
2006	Create a new instance of the given type .
2007	Creates a new instance of the given type .
2008	Create a blank block
2009	Create a node
2010	Add a new line to the list .
2011	Executes the specified function .
2012	Evaluates the input .
2013	Initialize the file .
2014	Send a message to the console
2015	Reset the duration of this instance .
2016	Sets the duration of the request .
2017	Create a new mkdir instance
2018	Copies a string to a buffer .
2019	Parses a single string into a simple plain object .
2020	Create a base config object
2021	Send a notification to the system
2022	Generate a user name for a user
2023	Sends an API request to the endpoint
2024	Checks whether the token is successful
2025	Creates an error handler
2026	Create an error handler
2027	Add a provider to the provider
2028	Register an authentication provider
2029	Register a provider token for a provider
2030	Adds a user to the user .
2031	Provides a callback to be used when the user sends to the client .
2032	Authenticate the token s token .
2033	Returns a promise that resolves to the provider .
2034	Get the provider token for a provider
2035	Returns true if the user has a role .
2036	Finds the layer in the layer
2037	Creates a new CRS object .
2038	Update the map
2039	adds the layers to the layer
2040	Removes an array of layers
2041	Returns the bounds of the specified group .
2042	Applies a method to the top - level layer
2043	Removes the specified layer from the given layer .
2044	Constructs a new map .
2045	Destroys the overlay
2046	Removes an item from an array
2047	Add a new marker to the cluster
2048	Returns a promise that resolves to the given storage .
2049	Creates a new zoom level .
2050	Adds a marker to the map
2051	This function is called when the flyout is ready
2052	Creates a new marker
2053	Removes the layer
2054	Add a new location to the map
2055	Extract data from a path
2056	Creates a new page
2057	Create a template function
2058	A collection of data .
2059	Create a new Worker instance
2060	Handle drag event
2061	Returns the index of this element
2062	Object .
2063	Returns an array of the excluded files .
2064	Returns the default callback for the given arguments .
2065	Get the main package . json
2066	Get bower bower . json
2067	Returns the main function for a module .
2068	Creates a new Agent object .
2069	Runs a regular expression
2070	Shut down the network
2071	Sets the maximum size of the device to be used to set the device size .
2072	Sets the brightness of the transmitter
2073	clear the display
2074	Convert number to number
2075	Get the code for a given code .
2076	Create a set of options
2077	Checks if a given path exists .
2078	Get locales for locales
2079	Get the value of a given object
2080	Removes all files in given directory
2081	Create a series of series .
2082	Check if value is a function
2083	Recursively find a target object .
2084	Finds all targets in a given target
2085	Create a new connection with the given options .
2086	Create a handler function for a given handler .
2087	Returns a promise that resolves to the process .
2088	Get a list of tags
2089	Builds an array of options .
2090	Builds a table .
2091	Initialize a new Route with the given options .
2092	Returns the default protocol for a given port
2093	Checks if a script node is empty
2094	Returns the index of the given object
2095	Gets the value of an ElementExpression .
2096	Gets the static value of a node .
2097	Checks whether a given variable is a variable .
2098	Returns the index of the provided config .
2099	Returns true if the given index is escaped .
2100	Replace a string with a regular expression
2101	Replace a match with a string
2102	Send a message to the server
2103	Parse a message
2104	Create a JWT token .
2105	Signal cookie .
2106	Returns a set of cookies
2107	Get the current token .
2108	Check if token is valid
2109	Create a JWT token .
2110	Create a JWT token .
2111	Initialize a new component
2112	Define a module
2113	Resolve a list of options
2114	Handle reducer
2115	Returns a function that can be used to send the event handler
2116	Handles the selection of a single category .
2117	Handles the mouseup event .
2118	Constructs a new Characteristic instance .
2119	Characteristic constructor .
2120	Migrate the version to the database
2121	Returns a promise that resolves to the database .
2122	Converts an object to an array of objects
2123	Returns a JSON schema for the given schema
2124	Returns a list of items
2125	Converts a single key object into a single object .
2126	Iterate over a promise
2127	Returns a promise that resolves to the request .
2128	Fetch all objects from the store
2129	Returns a promise that resolves to the given object .
2130	Write a file to the output folder
2131	Run the given callback
2132	Returns a promise that resolves to a string .
2133	Creates a new instance of the index .
2134	Fetch the next page
2135	Execute all listeners
2136	Resolves the state of the current state .
2137	Returns a new Record with the given index .
2138	Inserts a record into the records array .
2139	Finds the index of the given index .
2140	Creates a new instance of the given storage .
2141	Creates a function that can be used to reduce a list of slots
2142	Creates a new instance of the given filter .
2143	Creates a new instance of the given storage
2144	Returns a promise that resolves to the query .
2145	Creates a new database connection
2146	Returns a promise that resolves to a connection .
2147	Execute migrations
2148	Splits a filter object into a single object
2149	Generate an object for the given fields
2150	Set the value of a path
2151	Returns the value of a single object .
2152	Updates the schema for the given schema .
2153	Create a container element
2154	Create a new section
2155	Creates a new DT client .
2156	Constructor .
2157	Create a plain text content
2158	Returns a JSON representation of a JSON document
2159	Returns a JSON representation of the error .
2160	Writes the specified chunk to the stream .
2161	Helper function to write messages .
2162	Cleanup event listeners
2163	Handle an event .
2164	Remove git directories
2165	List all the files
2166	Get session data
2167	Create a new request
2168	Set the payload .
2169	Get a date from a date
2170	Create a new page
2171	Returns a promise that resolves to the image .
2172	Creates a CSV string for the specified parameters
2173	Returns the shape of the image
2174	Watcher for watcher
2175	Creates a new instance of the repository
2176	Creates an object with the attributes .
2177	Create a mock instance
2178	Recursively resolve object .
2179	Merge two objects .
2180	Create a new constructor .
2181	Merge property from source object into target
2182	Merge a property into another object
2183	Merge the source object into another .
2184	Adds an instance of Mixin .
2185	Creates a directory recursively .
2186	Retrieve the target system
2187	Create a new system
2188	Define a system
2189	Retrieve a list of containers
2190	Returns a promise that resolves to the system .
2191	Returns a promise that resolves to a container .
2192	Returns a promise that resolves to a given target .
2193	Returns a promise that resolves to a given target .
2194	Send a notification to a given target
2195	Return a list of all the system IDs
2196	Returns a promise that resolves to a given target .
2197	Compile a system file
2198	Returns a promise that resolves to the system .
2199	Finalize the report
2200	Injects the code into the code .
2201	Returns a list of files .
2202	Find all the files in the given directory
2203	Load all packages
2204	Write the registry to disk
2205	Build a container for a container
2206	Returns a list of container names .
2207	Applies the app to the app
2208	Get the system file system
2209	Register a system
2210	Create a new system
2211	Create a root component
2212	Processes an element .
2213	Add a child element to the DOM
2214	Destroy a node
2215	Adds a child element to the element
2216	Generate a repo
2217	Returns a promise that resolves to the repository .
2218	Create a new repository
2219	Create a new module
2220	Unregister a system
2221	Write a file to disk
2222	Returns a promise that resolves to a given target .
2223	Returns a promise that resolves to the repository .
2224	Returns a promise that resolves to a given target .
2225	Returns a promise that resolves to the given system .
2226	Returns a promise that resolves to the target system .
2227	Returns the name of the given system .
2228	Returns an object with the given options .
2229	Returns a list of registered containers
2230	Create a new relation .
2231	Returns the model of the given model
2232	Adds a relation to the relation .
2233	Creates a new instance of the given enumerable .
2234	Creates a new instance of the relation .
2235	Add a model to the collection
2236	Returns a model instance
2237	Returns the model name
2238	Returns an object that can be used in the model .
2239	Returns the type of the given item
2240	Remove a model from the collection
2241	Create a new instance of a model .
2242	Remove a model from the collection .
2243	Returns true if the given model is true .
2244	Remove all references from the collection
2245	Creates a new item .
2246	Add a model to the collection .
2247	Adds a listener to the collection .
2248	Returns a list of all items associated with the given key .
2249	Adds a model to the database
2250	Returns a copy of the model
2251	Creates a new element
2252	Creates a new x - y - axis attribute
2253	Creates a new Bitmap instance
2254	Converts a property to an object .
2255	Converts a value to a value .
2256	Returns the last digit of the document
2257	Compile a module
2258	Returns a function that can be used to create a function .
2259	Constructs a timer .
2260	This function is called when the token is ready .
2261	Create a new Template instance
2262	Creates a function that invokes a function .
2263	Read data from file
2264	Calls the webhook endpoint with the given endpoint .
2265	Create a form request
2266	Ensure that the request is valid .
2267	Updates the specified refs .
2268	Creates a new Dockerfile .
2269	Creates a deep copy of the object .
2270	Prints gulp tasks
2271	Format a string with the given width .
2272	Creates a new Task
2273	Create a new logger
2274	Returns true if the given promise is a Promise .
2275	Creates a function that calls the callback with the provided arguments .
2276	Creates a new form of the current task .
2277	Add a task to the queue
2278	Creates a function that can be called for each argument
2279	Create a new timeout
2280	Creates a new async task .
2281	Executes a function with the given context .
2282	Returns a promise that resolves to a promise .
2283	Reset the constructor
2284	Define a hook
2285	Get a comment from the given comment
2286	Checks if a list of whitespace
2287	Constructs a new Geometry .
2288	Handle change event
2289	Adds a node to the observer .
2290	Parses the chain of a ChainExpression
2291	Returns a function that can be used to parse the link .
2292	Parses and returns an array of links .
2293	Add references to the list of references
2294	Creates a function that invokes the next function in the queue .
2295	Assertion .
2296	Creates a function that calls the arguments passed to the arguments object .
2297	Returns an array of open brackets .
2298	Returns true if the given token is open
2299	Returns true if the given space is closed
2300	Returns true if the given token is open .
2301	Returns true if the given token is closed
2302	Define a config object
2303	Converts a number to an integer .
2304	Returns the length of a string .
2305	Creates an Iterator for the given object .
2306	Returns a promise that resolves to a Promise .
2307	Returns a promise that resolves to a promise .
2308	Returns a promise that resolves to a promise .
2309	Trigger an event .
2310	Handles click events
2311	Reports a node with a given token .
2312	Reports a given token .
2313	Reports a given token .
2314	Converts the given latitude to the given latitude .
2315	Get the value of a key
2316	Returns a promise that resolves to the user .
2317	Returns a promise that resolves to the Github API .
2318	Convert the output output to a string
2319	Generate a public key
2320	Returns an array of public key pairs .
2321	Executes a command .
2322	Returns a new NPM instance .
2323	Install a package
2324	Prompt for node
2325	Install a node
2326	Executes a remote location
2327	Returns a new NPM package .
2328	Constructs a Snowflake Subject .
2329	Constructs a new Subject .
2330	Creates a Promise .
2331	Returns a copy of the given reference .
2332	Recursively resolve references .
2333	Format a string with the given options .
2334	Format an object literal
2335	Converts a public key to a public key .
2336	Returns a new version of the given key
2337	Formats an array of values .
2338	Loads a given URL .
2339	Creates a new cache object for the given control .
2340	Creates a new cache object .
2341	Generate an error for the response
2342	Returns true if the expired expired expired
2343	Format an array of values .
2344	Formats an array of values into a string .
2345	Reset the data
2346	Serialize a JSON object
2347	Convert an object to an array
2348	Creates a new Subject object .
2349	Create a new instance
2350	Get the content of a file
2351	Create a new folder
2352	Copy a temp directory to a temporary directory
2353	Create a new temporary folder
2354	Returns a copy of the file
2355	Returns a copy of the file .
2356	Replaces the content with the given content
2357	Copy a directory to another destination directory
2358	Reads an array of tokens .
2359	Create a new Keystone client
2360	Find all parents of the png
2361	Finds all children of the given class name .
2362	Builds a hierarchical hierarchical hierarchical hierarchy .
2363	Create a list of all children
2364	Constructs a doclet .
2365	Construct a new Tag .
2366	Helper function to get an option
2367	Abstract error .
2368	Create a new child .
2369	Creates an instance of the metadata .
2370	Feature a feature .
2371	Returns a copy of the cookie
2372	Add a plugin to the queue
2373	Information about a change .
2374	Generate a git repo
2375	Push a remote repo
2376	Synchronously synchronously synchronously .
2377	Called when the child process is finished
2378	Comment constructor .
2379	Watch directory changes
2380	Create a watcher
2381	Start watching files
2382	Check if a directory exists
2383	Send a notification to the file
2384	Decorates a function and returns a function .
2385	Create a new Date .
2386	Moves the time to the time
2387	Creates a new scheduler .
2388	Get a schedule
2389	Returns a new array of dates
2390	Starts the given db .
2391	Create a new name
2392	Creates a new OAuth2 object .
2393	Returns the value of a value in a range
2394	Helper function to insert a position into an array
2395	Validate props .
2396	Initialize a new Event .
2397	Create a tool .
2398	Information about a feedback .
2399	A record .
2400	Information about a search .
2401	Iterate over an array .
2402	Wraps a safe function in a safe way .
2403	Returns a function that can be called once .
2404	Returns a copy of the given array .
2405	Returns an array with all elements in the given array .
2406	Base constructor .
2407	Creates a memoized function for the given pattern .
2408	Creates a new array .
2409	Check if the node is in the queue
2410	Create a pattern for the given pattern .
2411	Parse a regexp string into an object
2412	Formats a pad .
2413	Returns true if two arrays are added
2414	Creates an instance of Splitter .
2415	Returns true if the given array matches the specified pattern
2416	Returns a copy of the source list .
2417	Reads from source stream .
2418	Generate tasks
2419	Creates a list of tasks
2420	Generate a list of patterns
2421	Converts a pattern to a list of patterns
2422	Returns a list of patterns that represent patterns .
2423	Returns a list of patterns for a given pattern
2424	Converts a pattern to a group
2425	Returns a list of patterns that match the given pattern .
2426	Converts a pattern to a pattern
2427	Returns true if the pattern matches the pattern
2428	Remove all files in the cache
2429	Load a file
2430	Writes the file to the specified path
2431	Load a document
2432	Remove a file from the cache
2433	Set a value in the cache
2434	Returns a deep copy of the chain .
2435	Returns a list of files that match the given pattern .
2436	Checks if a file matches a pattern
2437	Checks if a pattern matches a pattern
2438	Checks if a pattern matches a pattern
2439	Returns true if the pattern matches the pattern
2440	Creates a new object with the given keys .
2441	Checks if a pattern matches a pattern
2442	Converts a regular expression to a regular expression
2443	Returns a copy of the glob .
2444	Create a regular expression
2445	Collapse a string
2446	Creates an array of strings .
2447	Splits a string into whitespace .
2448	Filters out the given array .
2449	Returns a string representation of the input string .
2450	Returns a wrapper around a prefix .
2451	Create a regular expression .
2452	Create a deep copy of the given object
2453	Advances to the given character .
2454	Constructs a source map for the source map .
2455	Compares two objects .
2456	Compares the values between two objects .
2457	Converts source to source map
2458	Called when a request is finished
2459	Called when a stream is received .
2460	Create a new node
2461	Appends a node to a string .
2462	Constructs a new Parser instance .
2463	Add a message to the node
2464	Create a new node
2465	Parse the source map .
2466	Create a new Parser instance .
2467	Add a handler to the specified type .
2468	Add a token to the stack
2469	Returns a new instance of the specified type .
2470	Returns the last node in the stack
2471	Parse the given string .
2472	Set the type of the specified type .
2473	Returns true if the current node is a parent .
2474	Parses a list of types .
2475	Initialize the input .
2476	Initialize the source map .
2477	Returns the end of the buffer .
2478	Converts a pattern to a range
2479	Adds a function to the specified type .
2480	Create a new plugin instance
2481	Returns the result of the memoized function .
2482	Define a function that can be used to define a property on the object .
2483	Register a subview
2484	Register a directory
2485	Set the status of a container
2486	Read all files
2487	Reads a directory recursively .
2488	Returns the name of the given property name
2489	Generate a list of commands
2490	The constructor .
2491	Create a new task
2492	Checks if a pattern is visible
2493	Shows a message to the server
2494	Create a new page
2495	Register a handler for a given type .
2496	Returns a promise that resolves to a promise .
2497	Creates a new set of arguments .
2498	Adds a set of properties to the set .
2499	Create a promise
2500	Creates a new promise .
2501	Creates a new Promise .
2502	Respond to the given state .
2503	Constructs a new Metadata object .
2504	Create a CSS rule
2505	Create a breakpoint
2506	Destroy a link
2507	Loads the configuration from the server
2508	Saves the specified file to the Gruntfile
2509	Returns a set of options
2510	Returns a list of resources
2511	Format an object with the given URL .
2512	Returns the point of a ray
2513	Get a list of preferred flights
2514	Fetch a remote URL
2515	Load a module .
2516	Returns a function that can be used to get the name of the function name .
2517	Returns a copy of the change .
2518	Update a list of properties
2519	Create a CSS selector by name .
2520	Subscribes to a template .
2521	Generates a signature for the given name .
2522	Returns the index of the specified color
2523	draw the color node
2524	The main main function
2525	Creates a new graph .
2526	Detects all nodes in the current nodes .
2527	Add a node to the tree
2528	Finds a node with a given selector
2529	Returns the coordinate of the element
2530	Get the svg element
2531	Hide the context menu
2532	Checks whether a node is connected to another node .
2533	Called when the control has changed
2534	Updates the control state of the control
2535	Handles the control of the control
2536	Called when the control is clicked
2537	Triggered when a node is clicked
2538	Zoom the control
2539	Shows the context menu
2540	Shows the context menu
2541	Event handler for mouse move events
2542	Handle mouseout event
2543	Resize the popup
2544	Create a new transform function
2545	Recursively clone graph nodes
2546	Reverse all links in the graph .
2547	Creates a new UI element
2548	Initialize the UI element .
2549	Update the table position of the table
2550	Returns the size of the given node
2551	Get window width
2552	Returns true if the user has been rendered .
2553	Respond to the GET command .
2554	Respond to the command .
2555	Create a route
2556	Create an HTTP server
2557	Create a server
2558	Adds an event listener to the element .
2559	Create a new comment .
2560	Executes a file in the tree
2561	Create a list of files
2562	Create a module
2563	Initialize a new instance .
2564	Create a new Api client
2565	Returns the first index of the first item in the array
2566	Get the url for a given url
2567	Create a new Customer .
2568	Copy properties from obj to obj
2569	Returns a promise that resolves to the formatter .
2570	Creates a zip file .
2571	Extracts a zip file from a zip file .
2572	Creates a new archive of the given file .
2573	Compress a tar .
2574	Create a directory .
2575	Constructs a new Array .
2576	Reads a file .
2577	Convert an object into an array
2578	Returns true if file is a JS file .
2579	Checks if a value is empty .
2580	Handle the click event
2581	Represents a Shell command .
2582	Create a new constructor
2583	Creates a new instance of the DOM .
2584	Creates a new base64 encoded string .
2585	Generate a hash
2586	Creates a JavaScript variable .
2587	Creates a new buffer .
2588	Reads the contents of a stream .
2589	Creates a new JavaScript file .
2590	Constructs a new logger .
2591	Create an event object
2592	Logs an event to the execution
2593	Create a log file
2594	Gets the center of a team
2595	Creates a new article .
2596	Creates a new action .
2597	Returns a copy of the source object .
2598	Returns a promise that resolves to a promise .
2599	Checks if a team is enabled
2600	Returns the index of the given array
2601	Loads the data from the queue .
2602	Add a file to the list of files
2603	Creates an array of elements
2604	Parse JSON .
2605	Get a list of routes
2606	Create a reconnecting connection
2607	Returns the first index of the first item in the array
2608	Writes a file to the tree .
2609	Returns a list of all files
2610	Constructs a new Object .
2611	Add obj to the tree
2612	Returns a string representation of a file .
2613	Returns the name of a property .
2614	Extend the tree
2615	Returns a string representation of a property
2616	Creates a new factory
2617	Generate a JSDoc object
2618	Returns a string representation of this instance .
2619	Getter for getter
2620	Creates a new NPM client .
2621	The image loader
2622	Load all images
2623	Load all images
2624	Converts an image to an array of images
2625	Sorts an array of images
2626	Returns a function that can be used to build a list of environment variables .
2627	Validate an ID
2628	Returns an array of objects
2629	Sets a function to execute a function
2630	Helper function that sets a callback
2631	Create a new instance .
2632	Create a new Resource .
2633	Build a resource container
2634	Check if a directory exists
2635	Asynchronously read a section from a directory .
2636	Returns a promise that resolves to a container .
2637	Load a container
2638	Load a container
2639	Create a new preference
2640	Returns a promise that resolves to a given error .
2641	Returns true if the given AST node is an AST .
2642	Returns a promise that resolves to the given node .
2643	Returns a string representation of a file
2644	Create a new object
2645	Creates a shallow copy of the array .
2646	Returns a new vector with two points
2647	Shows two arrays .
2648	Creates a new sort function .
2649	Search for a page
2650	Creates a new pipe with the given arguments .
2651	Wrapper around child methods
2652	Connect to events
2653	Helper function to handle errors
2654	Resolve the given path
2655	Creates a function that calls the callback with the given options .
2656	Get the key for the API key
2657	Get a resource
2658	Signs a message .
2659	Hash message .
2660	Generate the headers for a request
2661	Waits for a variable in a variable
2662	Creates a new attribute with the given value .
2663	Remove a view from the DOM .
2664	Remove a view from the DOM
2665	Merge two objects .
2666	Returns the value of a string .
2667	Get the lightness of the lightness
2668	Checks if a path exists .
2669	Executes a promise with the specified command .
2670	Initialize the plugin
2671	Updates the version of the current page .
2672	Helper function to add fields to the editor
2673	Render an article
2674	Update an article
2675	Loads a css url
2676	Sorts a list of elements by name .
2677	Initialize the transform function
2678	Set the data model
2679	Get a list of users for a given user
2680	Convert a node to an array
2681	Create a new application .
2682	Define the chai configuration
2683	Internal constructor .
2684	Assigns the given AST node .
2685	Returns true if the node represents a call expression .
2686	Checks whether a node has a reference .
2687	Simple shutdown function
2688	Transforms a request to the database
2689	Returns the value of a string .
2690	Returns the table of the table .
2691	Returns true if the string matches a string
2692	Checks whether a node is a call expression .
2693	Create an event listener
2694	Creates a git repository .
2695	Returns a promise that resolves to the given key .
2696	Returns a promise that will be used to decode the results of the input
2697	Adds the permissions to the view
2698	Sets the permissions of the view .
2699	Creates a new DataModel instance .
2700	Create a new Model instance
2701	Create a new model
2702	Create a proxy for a model .
2703	Returns a copy of a model
2704	Detects the destination type of the given type
2705	Generate a random number
2706	Sets the color of this color .
2707	Returns the size of the canvas
2708	Returns the color of the given color
2709	Returns the size of the image .
2710	Generate a file
2711	Convert image to base64
2712	Compares two objects .
2713	Asserts that a function returns true .
2714	Get ignored options
2715	Render input
2716	Computes the color based on the selected color
2717	Render error message
2718	Get a list of resources
2719	Perform a GET request
2720	Creates a new object with the given values .
2721	Create a schema for the given schema
2722	Load a YAML file .
2723	Loads the default theme .
2724	Create a theme .
2725	Write destination file to destination
2726	Initialize the default options
2727	Compile sass files
2728	Write options to disk
2729	Converts a map to a JavaScript object
2730	Convert an object to a string .
2731	Converts a value to an array
2732	Generates a random HTML generator .
2733	Returns a string representation of an object
2734	Returns a string representation of a property
2735	Represents a REST HTTP response .
2736	Returns a promise that resolves to the map
2737	Register a new component
2738	Create a widget
2739	Returns a promise that resolves to JSDoc .
2740	Returns a string representation of a node
2741	Returns the name of the specified element
2742	Initializes the rules for the specified rules .
2743	Returns a list of all the current state .
2744	Returns a new index of the specified index .
2745	Removes all the current state of the specified list
2746	Returns the index of the given sort .
2747	Set the attribute value
2748	Create a checkbox .
2749	Sets focus to the specified element .
2750	Returns the blur .
2751	Set the selection
2752	Format a date
2753	Converts a Date object into a Date .
2754	Returns the minimum of the given date .
2755	Converts a date to a date
2756	Get the options for a message
2757	Parse the given message type .
2758	Prints a message to the console .
2759	Assign default options
2760	Get a list of all the pages
2761	Returns the result of the source code
2762	Returns a function that invokes the passed arguments .
2763	Checks if the tunnel exists
2764	Initialize the selenium driver
2765	Create a browser instance
2766	Run the mocha .
2767	Called when the session has finished
2768	Creates a new job with the given name
2769	Finish the process
2770	Render the response
2771	Merge option values
2772	Merge default options
2773	Returns true if the given key matches the given key .
2774	Get source object from source object
2775	Add reducer to reducer
2776	Remove a scope .
2777	Replace a reducer with a reducer
2778	Converts a value to an integer .
2779	Create a new error object
2780	Flush error messages
2781	Read config .
2782	Check if a pattern is ignored
2783	Extract styles from a block
2784	Read the package . json file
2785	Loader plugin files
2786	Removes a class name from the DOM .
2787	Returns a list of class names .
2788	Set the width of the canvas
2789	Returns a copy of the specified style .
2790	Sets the value of a style property .
2791	Returns the size of the viewport .
2792	Returns true if the element is visible .
2793	Prints a counter .
2794	Encode a string to a string
2795	Helper function to decode a string .
2796	Generate a random length
2797	Returns a string representation of the header
2798	The base implementation of _ . signature
2799	Generate a private key .
2800	Set the value of the slot
2801	Returns the value of the specified item .
2802	Adds translations to the given locale .
2803	Sets all the buttons in the list
2804	Add a new button to the list
2805	Returns a copy of the store
2806	Represents a contact .
2807	Create a new channel
2808	Returns a promise that resolves to a given function .
2809	Extract the description of a description
2810	Adds comment to the given comment
2811	Check if token is a keyword
2812	Parse initializer constructor
2813	Creates a FunctionExpression object .
2814	Creates a new Postfix
2815	Creates a unary expression for a given unary expression .
2816	Creates a pattern for the given pattern
2817	Creates a new ExpressionExpression
2818	Creates a new ReturnStatement .
2819	Extend an object with the given properties
2820	Refresh the text of the given text
2821	Returns true if the given attr is an empty string
2822	Returns a repeat of the given string .
2823	Returns true if the given set is set .
2824	Logs an error to the console
2825	Returns a function that wraps a command .
2826	Returns true if a directory exists .
2827	Creates a directory recursively .
2828	Splits a path to a path
2829	Update the stdout
2830	Format a color .
2831	Creates a new NPM client .
2832	Create a new Grow instance .
2833	Represents a command .
2834	The base implementation of _ . values without support for arrays .
2835	Returns a copy of the next token .
2836	Returns the identifier for the specified property
2837	Assigns the value of a property .
2838	Asserts that a value is a string .
2839	Returns true if the given value is an object .
2840	Run the test suite
2841	Makes an array of arguments .
2842	Loads the given config .
2843	Extend obj with obj
2844	Checks for a set of aliases
2845	Gets the type of a given type .
2846	Returns the width of the table .
2847	Normalize aliases .
2848	Returns a string representation of a property
2849	Returns the attribute name for the given attribute .
2850	Retrieve the transactions for a passport
2851	Writes a string to a file .
2852	Create a directory
2853	Check if a directory exists
2854	Create a new database
2855	Returns a copy of the page
2856	Creates a gulp request .
2857	Handle the response
2858	Splits a header into a single line .
2859	Scrolls to the specified position .
2860	Scroll the container to the container .
2861	Scrolls an element to the specified position .
2862	Initialize the modal .
2863	adds actions to actions
2864	Returns a copy of the given pattern
2865	Creates a new file upload .
2866	Returns a copy of the file .
2867	Add a property to the filter list
2868	Iterates over a list of items .
2869	Creates a new collection .
2870	Removes an item from the list .
2871	Remove all items from this collection .
2872	Get the index of an item
2873	Returns true if the specified item has the specified key .
2874	Returns a copy of the range
2875	Returns a list of items in a given scope .
2876	Returns a copy of this object .
2877	Creates a new month item
2878	Creates a new item in the calendar .
2879	Returns an array of dates for the given slot
2880	Returns the name of the calendar
2881	Check if user is active
2882	Returns the text of the text box
2883	Creates a new element with the specified coordinates .
2884	Metalsmith plugin
2885	Returns a function that returns a map of headers .
2886	Executes a job
2887	Defines a validator for the given type .
2888	Checks if a given type is valid .
2889	Checks if the given value is valid .
2890	Returns a list of registered names for the given type .
2891	Check if a comment is part of a comment
2892	Returns a set of paths for the specified set .
2893	Loads the contents of a file .
2894	Returns the number of units .
2895	Returns the form of the form
2896	Returns the width of the viewport .
2897	Returns the orientation of the viewport
2898	Initialize the overlay
2899	Initializes the Dialog .
2900	Compares two objects .
2901	Compares two objects .
2902	Creates a new object with the given options .
2903	Sorts the items in the sorted order
2904	Sorts the items in the sorted order
2905	Apply a function to a function .
2906	Detects a device .
2907	Checks if the window is visible .
2908	Create a new CSV file
2909	Creates an array of elements .
2910	Remove a model from the collection .
2911	Remove a model from the collection .
2912	Returns the root path
2913	Get a view from a template
2914	Clears the template .
2915	Called when the template is loaded
2916	Clears a template view .
2917	Creates a copy of the cache .
2918	Create a template for the given template .
2919	Adds data to the data store
2920	Create a new instance of the given namespace
2921	Checks to see if a given parameter is a constructor .
2922	Create an error object
2923	Returns a promise that resolves to the handler .
2924	Create a command
2925	Binds event listeners
2926	Iterate over all bindings
2927	Add a promise to the callback
2928	Destroy a view
2929	Destroy a view
2930	Add a region to the region
2931	Add a region
2932	Remove all regions
2933	Remove a region
2934	Create a template for a template
2935	Returns a copy of the template
2936	Render a template
2937	Returns a copy of the template .
2938	Bind events to the model
2939	The default event handlers
2940	Unbinds events to the modelEvents .
2941	Destroys this instance .
2942	Creates a new instance of the UI .
2943	Returns the layout of the parent element .
2944	Returns all children of the given view .
2945	Returns a copy of the collection
2946	Render the template
2947	Initialize the collection
2948	Add a child to the collection
2949	Finds the items in the model
2950	Creates a new collection of the collection
2951	Add children to this collection
2952	Adds a model to the collection
2953	Show an empty view
2954	Adds a child to the view
2955	Add a view to the DOM
2956	Render a view
2957	Adds a child view to the parent view
2958	Remove a child view
2959	Creates a new DOM element .
2960	Adds a child view to the collection
2961	Finds the children of a given element
2962	Destroys this collection .
2963	Remove a view from the view
2964	Initialize the collection
2965	Returns a copy of the model
2966	Render the view
2967	Render the template
2968	Initializes the regions in the collection .
2969	Sets up the render method
2970	Destroy this view
2971	Adds a region to the region
2972	Add region regions
2973	Add region region to region
2974	Returns a copy of the class
2975	Creates a new instance of the behavior .
2976	Sets the behavior of a behavior .
2977	Add a trigger to the trigger
2978	Add route to route
2979	Create a module
2980	Adds a region to the region .
2981	Add a region to the region
2982	Create a new channel
2983	Stop the preprocess
2984	Add a module to the module
2985	Adds a module to the module .
2986	Returns the name of a file .
2987	Returns the path for a component
2988	Returns a new source to the destination directory
2989	Returns a promise that resolves to the application .
2990	Creates a new configuration file .
2991	Creates a new config object .
2992	Create a new file
2993	Creates an array of objects .
2994	Create a function that calls the callback to the parent .
2995	Creates a new multi - key object .
2996	Creates a new instance of the passed arguments .
2997	Creates a new html string .
2998	Creates a new Template .
2999	Constructs a Template Template .
3000	Define a model
3001	Create a new model
3002	Creates a new Point
3003	Checks if a tab is active .
3004	Define two points
3005	Returns the point of the line segment
3006	Initializes a new Socket
3007	Handle timeout .
3008	Returns width .
3009	Get source source source
3010	Helper function to create a destination file
3011	Add a property to the tracked object
3012	Returns a list of registered method names .
3013	Returns a list of object objects
3014	Initialize the database
3015	Loads the content of the document
3016	Returns a copy of this object .
3017	Returns a shallow copy of the node
3018	Check if node is part of a node
3019	Create a new DOM node
3020	Creates a customizer for the given opts .
3021	Creates a function that invokes fn with the given arguments .
3022	Creates a new accessor .
3023	Updates the value of an accessor .
3024	Remove the lifecycle .
3025	Create a new instance of the plugin
3026	Remove properties from an object
3027	Converts a hash to a hash
3028	Converts camel case to camel case
3029	Returns true if the hash matches the given array
3030	Returns a copy of the given selector
3031	Returns a component that matches the specified selector .
3032	Constructor for the router
3033	Helper function to execute a transaction
3034	Returns the index of the specified item .
3035	Create a new level
3036	Checks if the given type is valid .
3037	Assign properties to target object
3038	Compares two nodes .
3039	Returns the root node of this node
3040	Create a new FileSystemFile
3041	Creates a new request .
3042	Create a new field
3043	Create a package
3044	Prepare default options
3045	Creates a new filter .
3046	Remove all current filters
3047	Creates a function that merges the result of the source object into the result .
3048	Creates a function that returns a function that invokes a function with the result of the result .
3049	Create a new instance of the instance
3050	Returns the value of a string .
3051	Create a new object
3052	Returns a string with the given id
3053	Parses a selection token .
3054	Returns the schema for the given schema .
3055	Validate a type
3056	Checks if a given schema exists .
3057	Determines whether a node has a relationship .
3058	Returns a new instance of the given type .
3059	Returns the result of a query .
3060	Returns true if obj is a string
3061	Add content to the container
3062	Create the top - level
3063	Create a new instance of this class
3064	Calls the callback with the given options .
3065	Create a new transaction
3066	Get a set of options
3067	Add a method to the queue
3068	Get a transaction object
3069	Send a response to the queue
3070	Send request to request
3071	Create a transaction
3072	Send a request to the server
3073	Create an inline block for inline block .
3074	Stuff all the files in the plain text
3075	Returns a promise that resolves to the network .
3076	Route constructor .
3077	Creates a transport .
3078	Gets the value of an array .
3079	Generate a random number
3080	Response constructor .
3081	Parse the response body .
3082	Handle the response
3083	Set header header value .
3084	Handle the response
3085	Returns a promise that resolves to the given arguments .
3086	Returns the expected arguments for the given parameter .
3087	Extracts the arguments from the arguments array .
3088	Returns true if the expected value is a valid array .
3089	Returns true if the given value matches the given index .
3090	Returns the value of the expected type
3091	Returns a list of expected values .
3092	Returns the value of a given type .
3093	Checks if a given type is valid .
3094	Returns the value of the given type .
3095	Returns the type of the given type .
3096	Get the parent url
3097	Get the state of a resource
3098	Validate a resource
3099	Removes a string from a string .
3100	Try to render a file .
3101	Returns true if the array is valid .
3102	Load a single route
3103	Generate a random number
3104	Generate a random string
3105	Converts a string to a Uint8Array .
3106	Converts a String to a Buffer
3107	Creates a new button with the specified button .
3108	Add a warning message to the cluster
3109	Copy file to destination
3110	Copy files to the source file
3111	Replaces the contents of the file in the specified directory
3112	Remove all files in the specified directory
3113	Validates a directory
3114	Checks if a file exists .
3115	Returns a list of files in the given directory
3116	Resolves a directory recursively
3117	Resolves directory recursively
3118	Compare two values
3119	Returns a list of directories recursively .
3120	Hide the given menu .
3121	Creates a new layer with the given dimensions .
3122	Applies the menu to the menu
3123	Hide the menu
3124	Hide a menu
3125	Initializes the adapter .
3126	Get a hierarchical hierarchical hierarchy
3127	Returns the config .
3128	Get the backend configuration
3129	Read backend file
3130	Save data to disk
3131	Returns a list of all files in the given db
3132	This function is called when done .
3133	Helper function to throw errors
3134	Extracts the data from the cache .
3135	Returns true if the given array contains the given values .
3136	clean up a filepath
3137	Parses a query string into an object
3138	Create a new tab element .
3139	Converts an object to a JSON string .
3140	Creates a new anchor .
3141	Iterates over each item in the scope .
3142	Returns a promise that resolves to the application .
3143	Checks if a text element matches the specified text
3144	Creates a new viewport .
3145	Initialize the scrollbar .
3146	Returns the index of the given item
3147	Loads a script
3148	Loads a script tag
3149	Checks if a file exists .
3150	Create a new record
3151	Create a new provider
3152	Get a new provider
3153	Create the application
3154	Returns a new instance of the controller
3155	Add a new item to the store
3156	Remove an item from the list .
3157	Removes an item from the list
3158	Set the active active item .
3159	Gets all elements in an array .
3160	Returns true if the element is selected
3161	Converts a number into a number .
3162	Returns a new value with the given value .
3163	Converts a value to a fixed precision .
3164	Log a request .
3165	Converts a Date object to an object
3166	Convert the middleware to the middleware
3167	Define a route
3168	Get the URL for a resource path
3169	Create a new password with the given password
3170	Creates an array of JSON objects .
3171	Create a node
3172	Sets the current node of this node .
3173	Remove a node from the tree
3174	Destroy this node .
3175	Destroy all the nodes
3176	Adds a new node to the list
3177	Removes a node from the DOM .
3178	Destroys this node .
3179	Sorts a node by its sort order .
3180	Expand the callback
3181	Collapse the node
3182	Returns a function that calls the handler to the target .
3183	Create a mask .
3184	Returns a DOM element ID
3185	Merge one object into another .
3186	Remove all listeners from the cache
3187	add action to action
3188	Defines a property on the object
3189	Initialize a new Store with the given name .
3190	Create a node .
3191	Returns a string representation of the array
3192	Create a new store
3193	Initialize the class .
3194	Initialize DragDrop .
3195	Helper function to find a relative location
3196	Re - re - re - re - re - re - render
3197	Finds the level of a given level
3198	Logs a message to the console .
3199	Returns true if the path is a simple path .
3200	Create a new key
3201	Validate a node
3202	Accept an array .
3203	Compile the output .
3204	Helper function to reduce a list of mutations in a DOM node
3205	Create a new Node
3206	Returns a promise that resolves to the queue .
3207	Returns a promise that resolves to the queue .
3208	flush all queued functions
3209	Set the value of the record
3210	Returns a list of all the items in a container
3211	Returns the first occurrence of the given field
3212	Returns true if the point is within the specified point
3213	Executes a command and returns a promise .
3214	Replace all references in a given namespace
3215	Generate unique variable name
3216	Replace all classes in a class
3217	Checks if a variable declaration is a variable declaration
3218	Represents an item .
3219	Sets the first item in the list
3220	Create an event handler .
3221	Sets up the specified space .
3222	Returns a copy of the array .
3223	Initialize the toolbar for the given tool .
3224	Set new data .
3225	returns a new model
3226	Returns the index of the model
3227	Gets the parent model
3228	Returns a copy of this object .
3229	Extracts the model from the given path .
3230	Generate a random bytes
3231	Returns a promise that resolves to the user .
3232	Create a new email address
3233	Returns a sorted array of issues .
3234	Returns a promise that resolves to the user .
3235	Extracts the number of issues from a task
3236	Returns an array of issues .
3237	Merge issues with issues .
3238	Creates a new swagger instance .
3239	Fetch data from server
3240	List all available adapters
3241	Read the adapter configuration
3242	Create a adapter for a configuration file .
3243	Render files
3244	Handles all the files in the server
3245	Returns the context for the given context .
3246	Render a page
3247	Checks whether a node is a function .
3248	Returns a function that can be used for a given function
3249	Checks if a node is a function
3250	Create a new instance
3251	Bind event listeners
3252	Adds a function to the queue
3253	Execute the operation on the server
3254	Set a response
3255	Returns a promise that resolves to the server
3256	Set the date value of a date
3257	Sets the value of the selection .
3258	Create a clone of an object
3259	Initialize a new Pulse
3260	Initializes the component .
3261	Adds a new class to the DOM .
3262	Set the animation
3263	Show the animation
3264	Set the width of the canvas
3265	Add a component to the viewport
3266	Add a component to the component
3267	Set the alignment
3268	Returns the parent component that matches the specified selector .
3269	Destroy this component
3270	Triggers an item in a list
3271	Returns true if the current node is active
3272	Creates a leaf leaf from the leaf leaf .
3273	Returns a function that can be used to create a function that can be used to create a function which can be used to generate a function .
3274	Parse Carousel .
3275	Format the details of the details of the given details .
3276	Get a table by id
3277	Returns true if the payment is available
3278	Returns a promise that resolves to the device
3279	Returns a promise that resolves to the store
3280	Initialize a new Key
3281	Creates a function from a source object .
3282	Checks if a change event has changed .
3283	Returns an array of values that have the same values .
3284	Set multiple values .
3285	Refresh the store
3286	Convert params to a string
3287	Create a new instance of the store
3288	Create an instance of Collection .
3289	Finds a model with the given filter .
3290	Create a new grunt .
