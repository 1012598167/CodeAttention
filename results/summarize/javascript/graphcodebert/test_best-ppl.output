0	Create an instance of Axiosx
1	Creates a new cancellation token .
2	Checks if value is an array .
3	Checks if the browser is a standard browser .
4	Iterate over an object
5	Extends the properties of the object onto another object .
6	Writes the package manifest .
7	Process the message received from the bundle
8	Checks if the update was updated .
9	Check if the current update update is updated
10	Format a message into a string
11	Pad a number to a number
12	Parse a segment .
13	Returns an array of segments .
14	Parses the given qRRcode .
15	Calculates the private key provider for the given key .
16	Creates a random bytes random bytes
17	Adds an entropy entropy to the given array .
18	Count entropy entropy entropy
19	Decrypts a message .
20	Initializes entropy .
21	Convert the given value into a matrix .
22	Verify a given data hash .
23	Calculates the hash of the given data .
24	Finds the comments in the given message .
25	Formats a FormGroup .
26	Render a loader .
27	Render item content .
28	Constructs a new table .
29	Create a rail element .
30	Constructs a button group .
31	The grid row .
32	Formats a form field
33	Render a card content .
34	Render an item .
35	Create a comment for a comment .
36	Provide a statistic label
37	Create a FeedMeta .
38	Render a container element .
39	Create a step group
40	Divide a divider .
41	Provide a header element .
42	The grid class .
43	Create a breadcrumb .
44	Render a card description .
45	Divide an item group
46	Render grid column .
47	Render an item
48	Render a card group .
49	Create a table row .
50	Feed event .
51	Construct a Tab pane .
52	List List content .
53	Creates a Button with the specified text .
54	Create a table cell .
55	Create a breadcrumb divider .
56	Render a message list .
57	Render a table header .
58	Provide a comment group
59	Creates a new Reveal element .
60	Initialize a new Segment .
61	Create a placeholder line element .
62	Creates a new Renderer .
63	Create a feed element .
64	Create a placeholder element .
65	Render an accordion accordion .
66	Creates a placeholder image element .
67	The Dropdown menu .
68	List a list of items .
69	Render an Advertisement element .
70	Initialize a statgroup .
71	Generate a statistic
72	Constructs a new SegmentGroup .
73	Create a tableHeaderCellHeader .
74	Provide a feed event .
75	A label group .
76	Create a feed element .
77	Creates a divider divider .
78	Provide a Feed Summary .
79	Render the step content
80	Image element .
81	Returns the pixel ratio of the given canvas
82	Set background color
83	Create a sprite from the body
84	Render the body of a body
85	Initialize a new body .
86	Create a list of pages
87	Determines if the given object is a wrapper .
88	Normalizes event handler for event handlers .
89	Generate a summary summary
90	Creates a new item string .
91	Create a new token
92	Returns true if the given ast is in the AST .
93	Transforms the metadata of the given token
94	Returns the package for a given filepath
95	Toggle class
96	Returns a new array of resolved values .
97	Create a JSONDoc from the source directory .
98	Remove duplicated arrays
99	Create a Markdown file
100	Flatten an object .
101	append a string to the list
102	Sort the multi - level nodes
103	Sort the multiseNode
104	Handles multiple triangles
105	Creates a new multi - line node
106	Rotate a matrix
107	Make a 4 - 4 matrix .
108	Calculates a p3 p .
109	Process a texture
110	Check if the level is zoom level
111	Rotates a p p px by a px p .
112	Checks if the given vector is in the given matrix
113	Initializes the image .
114	Get a number from a string
115	Display an error message
116	Clear the error message
117	Display an info message
118	Get the mouse position of the container
119	Event handler for the document .
120	Handle mouse click event
121	Convert mouse position to coordinates
122	Set the position of the document .
123	Event handler for mouseup events
124	Handler for mousemove event .
125	Handle document move
126	Handle mouse wheel events
127	Event handler for the document .
128	Change the keyup event .
129	Change the value of a keydown .
130	Animate animation .
131	An orientation .
132	Converts quaternion to quaternion
133	Computes quaternion to quaternion
134	Handle orientation .
135	Initialize the canvas
136	Initialize the scene
137	Creates the hot spots .
138	Destroys all hot spots
139	Render the hot spot
140	Merges the config into the default config .
141	Toggle fullscreen mode .
142	Handle fullscreen mode
143	Returns the height of the viewport .
144	Stop animation
145	Display the dialog
146	Load the scene
147	Stop orientation
148	Fires an event .
149	Wait for a given latch function .
150	Get the mouse position of an element
151	Parse the given value .
152	Subscribes to another object .
153	Returns the difference between two numbers .
154	Remove inline resources from a string
155	Builds a Sassass file
156	Constructor for the FormIO resource .
157	Creates a new base producer instance .
158	Create a new context object .
159	This is a function that takes a url and an error message .
160	Performs a scraper request .
161	Handle request response
162	Parses a request response .
163	Execute a callback
164	Metalsmith plugin .
165	Calculates the start position of the document .
166	Wrap a method on an object .
167	Adds a function to the given object .
168	Copy a template from a template
169	Copy a template to another directory
170	Create an app name .
171	Check if a directory is empty
172	Exit the process
173	Load a template
174	Main entry point
175	Create a directory
176	Create an option .
177	Prints warning message .
178	write a string to a file
179	Binds a function to a function .
180	Adjust platform options
181	Middleware to create a server side server
182	Load the viewport
183	Prefix prefix to prefix
184	Create a canvas element
185	Smoothly smooth area
186	Calculates the diagonal area for a given pixel .
187	Calculates a diagonal area for a given pattern .
188	Generate a list of patterns
189	Transform a pattern into a pattern
190	Calculates the delta between two left and right .
191	Calculate a bearear linear linear linear linearear
192	check form data
193	Reset the transfer
194	Check if the element is selected
195	Check input controls
196	Displays input controls .
197	Move checkbox control
198	Updates the scroll position of the scroll position .
199	Get a score from a score
200	Calculates the score of the password
201	Check if a string is repeated
202	Initialize the new password
203	Initializes a new level array of levels .
204	Fixes the raw properties of the transaction object .
205	Initialize the transaction data .
206	Represents a transaction error .
207	Creates a new RPC request .
208	Compile sass file
209	Try to require a cyclicfile and return it
210	Run the mathmath function
211	Read an array of bytes from a buffer .
212	Recursively traverses the union of the union node .
213	Handles the selections of the GraphQL nodes .
214	Convert an AST node to a child node .
215	Convert a key to an AST node .
216	Stripe connection connection .
217	Splits a list of fragments into an array of fragments
218	Get a node from a database
219	Convert an array node into a connection object
220	Validates an array of rows
221	Generate a query expression for the given key .
222	Returns a deep copy of an object .
223	Build a string for a given length .
224	Concatenate an array .
225	Converts the given value to a string .
226	Replace all placesholders in a string .
227	Create an Audio instance
228	Starts the media node .
229	Play the media .
230	Calculates the current media position .
231	Pause media .
232	Called when the media time is playing
233	Start the MediaCapture command .
234	Stop capturing media capture .
235	Called when the media has been released .
236	Returns the full path for the given file .
237	Convert the given cdv file to an array of Windows .
238	Convert a file to an absolute path
239	Convert a URI to a path
240	Context constructor .
241	Returns an array of unique capabilities .
242	Compare two capabilities .
243	Check if a directory is a directory
244	Cleans the project root folder .
245	Recursively deletes svn folders
246	Returns an array of plugins in a directory
247	Runs hook runner .
248	Extracts the shebang interpreter .
249	Check if a given hook is disabled
250	Instantiates the native version of the native command .
251	Returns a list of hooks for a given hook .
252	Returns all hooks for a given hook .
253	Returns an array of application hooks for a given directory .
254	Get script scripts from config file .
255	Get the paths for a plugin .
256	Get all plugins for a hook
257	Ensure that the given capabilities are unique .
258	Helper function to copy a file to another directory
259	The plugin spec .
260	Get the path of a plugin file
261	Run platform platform .
262	Returns an array of platforms
263	Get the list of plugins from the xml file .
264	Get the dependencies of a given plugin
265	Create a new copy of the given file .
266	Check that the plugin is valid .
267	Get platform information from a directory
268	Get the platform name from the given name
269	Process a message
270	Call the engine scripts
271	Create a package . json
272	Prepare platforms
273	Convert android icon to Android
274	Returns an array of images for a given type
275	Returns the Android mode for Android mode .
276	Android Manifest class .
277	Checks if the unmet requirements are equal .
278	Tries to find a version of a list
279	List all required requirements
280	Validates task name
281	Takes a travis doc and adds it to the array
282	Remove travisibles from the given array .
283	Transforms travis y - y - y - y - y - y - y - y - y - y - y - y - y - yaml .
284	Checks if a given file is ignored .
285	Get the github url for a given repository
286	Calculates an array of apis .
287	Returns the values of the given attribute value .
288	Sort the tree recursively .
289	Adds a numeric number to the query .
290	Clears the numeric number of numbers .
291	Adds a hierarchical constraint to the query .
292	Adds a facet to the query list .
293	Adds a filter expression to the query .
294	Adds a value to the query list .
295	Adds a tag to the query list .
296	Removes a facet from the query .
297	Removes a facet from a list .
298	Removes a hierarchical hierarchy from the schema .
299	Remove a facet from the query list .
300	Remove a facet from the query list .
301	Removes a value from the query list .
302	Remove a tag from the given tag .
303	Toggles the given facet .
304	Adds a hierarchical facet to the query .
305	Returns true if the given facet is specified .
306	Returns true if the given facet is excluded .
307	Gets the list of all available expressions .
308	Set a query parameter
309	Set query parameters
310	Get the path for a given facet .
311	Run a child process
312	Compiles an array of arguments into an object .
313	Compile all shared libraries
314	Compile the js script .
315	Compile a WebAssembly
316	Returns a plugin instance .
317	Helper function for helpers
318	Make a firebasechange event .
319	Initiate an instance of Firebase .
320	Merge default values into default values .
321	Get the id of the payload
322	Creates a new FirebaseStore instance .
323	Parses a CSV file .
324	Parses a JSON file
325	Parses a flat json file .
326	Check that props types are valid .
327	Invoke a callback .
328	Returns the closest DOM node instance .
329	Returns the instance of React component instance .
330	Gets the state of an instance node .
331	Traverses an event .
332	Creates a prefix for the given style property name .
333	Defines a warning object .
334	Gets the composition event type for composition .
335	Determines whether the top - level composition is a composition of composition .
336	Returns the value of the given node
337	Returns the target element for the input event .
338	Handles the mouseup event .
339	Listen to the document .
340	Gets the document target object .
341	Constructs a select event .
342	Sets the text of a node .
343	Generates a style string for the given styles .
344	Appends the child state of the container to the child process .
345	Unmounts a component .
346	Creates a new async expiration time .
347	Stringify the given content .
348	Get the loader options
349	Normalize a rule
350	Find the parent of a given node
351	pure helper function
352	Get the offset of the node .
353	Convert the viewport to the viewport
354	Get the second child of the tree .
355	Appends previous item to the previous position .
356	Appends the current node to the tree .
357	Remove the view from the given selector
358	Tries to find the pid of the specified pattern
359	Kill app process
360	Get the list of PIDs for the given port
361	Removes all websocket handlers from a session
362	Verifies the platform platform .
363	Returns true if the given URL is a local host .
364	Convert a platform version to a platform
365	Updates the project id of the project file .
366	Move the project folder to the project folder
367	Returns an object that will be used to build the configuration file for the given platform .
368	Calculates the current time stamp .
369	Parses a container path to a remote path
370	Push a file to a remote file
371	Attempts to pull a remote file from the remote system .
372	Pulls a remote device from a remote device
373	Create a new simulator
374	Get an existing simulator
375	Initialize all objects .
376	Check if an element has collision .
377	Calculates the right position of the button
378	Creates a new urlParamsParamsParamsParamsParams .
379	Create a new request queue
380	Create a new message tracker
381	Connects a connection to the server
382	Initialize a new socket connection
383	Initialize a new client .
384	Initialize a new graph .
385	Called when a node is active
386	Iterates over an array .
387	Convert an array to a map .
388	Creates a new list of files to be watched
389	Start watcher timer
390	Parses the template and returns the result of the template
391	Encodes a utf16 string into a string .
392	Parses a unicode escape character .
393	Scan JSX identifier
394	Returns a property name for a given node .
395	Binds the children of the given node .
396	Returns a string representation of a given node .
397	Unescape an identifier
398	Gets the block scope of a given node .
399	Checks whether a given name is a variable or not .
400	Checks whether a given node is an identifier .
401	Convert a string to an array of characters .
402	Determines whether the given text contains the given element .
403	Check if a given token is a list
404	Parses an entity name .
405	Finds the highest level at the beginning of the given position .
406	Calculates the symbol of the given entity name .
407	Resolve an entity name .
408	Checks whether a given name is a member name .
409	Checks whether a given symbol is a symbol or not .
410	Returns the type of the given property .
411	Returns the type of the binding of the given node .
412	Returns the type of the given binding element .
413	Returns the contextual type of the given variable .
414	Get the type of the given element .
415	Get the type of an object binding pattern .
416	Get the local type parameter parameters for a given symbol type
417	Resolve the base constructor of the given type .
418	Checks whether a given node is a valid type .
419	Creates an array of symbols that are referenced in this object .
420	Returns an array of signatures that match the given type .
421	Returns the property of the given object .
422	Returns the base type of the given type .
423	Returns the property of a given type .
424	Returns the propagation of the given type .
425	Returns the type of a given class or type .
426	Get the type of a given symbol .
427	Adds all types to the specified types .
428	Checks whether a given property is a known property .
429	Determines whether the given source is an object .
430	Check if a given type is a generic type .
431	Checks whether a given node is a variable or not .
432	Tells the given type of the given type .
433	Returns contextual type of contextual parameter .
434	Returns the contextual type of the given node .
435	Apply contextual type to a mapper .
436	Checks whether the given type is a contextual type .
437	Returns the contextual type of the given object literal .
438	Gets the contextual type of an element .
439	Returns the non - generic type of the given type .
440	Returns contextual type of contextual type .
441	Returns the property name of the given attribute .
442	Checks to see if a property is access or not .
443	Returns the property name for the given index .
444	Returns the call signature for a given type .
445	Get arguments of a given node .
446	Gets the effective argument type of an argument .
447	Gets the effective argument type of an argument .
448	Gets the effective argument of a given node .
449	Gets the effective argument of an argument .
450	Returns a warning message for the given node .
451	Resolve a decorator for a call expression .
452	Determines the signature of the given node .
453	Checks the call expression for a call expression .
454	Assigns the type elements of a given node .
455	Validates a type parameter .
456	Returns a promise for the given promise .
457	Check if the given node is a decorator .
458	Checks the type of an AST node .
459	Check whether a node is an expression .
460	Check decorators for decorators .
461	Checks whether the given node is a variable .
462	Validates the initializer of the given parameter .
463	Check the variable declaration of a variable declaration
464	Checks the element type of an iterable .
465	Validates the type of the given type .
466	Check the source file .
467	Copy a symbol to a symbol .
468	Returns the parent type of the given node .
469	Extract properties from a given type .
470	Gets the references of a given node .
471	Gets the references of a given node .
472	Retrieves the value of the given node .
473	Get the export name for the export variable
474	Emit files to target file .
475	Creates a temporary variable name for the given flag .
476	Make sure the name is unique .
477	Encode source map to source map .
478	Create a temporary variable name
479	Indicates if the given node is indented .
480	Emits an expression with the left operator .
481	Determines whether or not the start of a variable declaration .
482	Emit an assignment .
483	Create a temporary variable assignment for the given expression .
484	Ensure an identifier is an identifier
485	Finds the source file by name .
486	Reads a configuration file from a file .
487	Parses the text text into a JSON string
488	Remove dynamic properties
489	Gets the arguments of an argument node .
490	Returns the index of the invalid parameters that match the given parameters .
491	Search for a given position in a given position
492	Finds the given position of the given position in the given position .
493	Returns the JSDoc at the given position .
494	Remove quotes from a string
495	Make a token for a given container
496	Checks whether the given node is a list element .
497	Finds the node of the given range
498	Returns true if the given range matches the given range .
499	Checks if a given position is inside a comment
500	Returns the semantic diagnostics for the given file .
501	Get the completion name from the given identifier
502	Gets the scope node of a given token
503	Determines whether or not a given object literal or not .
504	Determines whether or not a list of imports or not .
505	Returns the object literal for the given context .
506	Filters attributes from attributes
507	Checks whether a given node is writable .
508	Returns a list of signature items for the given file .
509	Checks whether a given variable is a variable or not .
510	Class to classify a token type
511	Gets the parameters of an assignment .
512	Calculates the score for the given error .
513	The origin of the origin request .
514	Translate a drag event to a drag .
515	Checks to see if the tabbangles are valid .
516	Binds touch events to an element .
517	The default event handler .
518	Create touchstart event
519	Get the transform of an element
520	Set style property value
521	Sets the element of an element .
522	Sanitize module paths
523	Extract the payload from the given token .
524	Set the current chapter
525	Get a hash for a specific chapter
526	Called when the page is clicked
527	Insert an element at the specified index .
528	Create a dropdown menu
529	Create a button
530	Remove a button
531	Remove button buttons
532	Toggle the sidebar
533	Filter summary summary
534	Initializes the plugin .
535	Initializes navigation shortcuts .
536	Create a directive
537	Rule class .
538	Takes a Tox constructor .
539	Gets the index of the file in the config file .
540	Parses a CSS file
541	Creates a new metadata object .
542	Recursively checks the union of the given type
543	Initialize a new Preparing query
544	Error class .
545	Represents a connection error .
546	Represents a connection error .
547	Extends an object with the user options .
548	Validate policies
549	Validates the protocol options .
550	Validates the socket options object .
551	Validate the encoding options .
552	Sets default options for default options .
553	Get the type of a list
554	Get the data type for a given type
555	Represents a frame header .
556	Generate a new timestamp
557	Creates a new Mutable object .
558	A aggregate aggregation .
559	Represents a host connection .
560	Creates a new CPU policy .
561	Constructs a new MaterialView .
562	Initialize a new DataCollection .
563	Run a single test .
564	Constructs a new table .
565	Creates a new V1 instance .
566	Creates a new V2 instance .
567	Creates a new V3 instance .
568	Gets the schema for the given version
569	Encode routing key
570	Get all js files
571	The Schema constructor .
572	Copy a buffer to a buffer .
573	Fix the error stack trace
574	Logs an error .
575	Convert an object to an object
576	Recursively extend the target object
577	Creates an iterator iterator .
578	Convert iterator to an array
579	Binary search
580	Insert an item into an array .
581	Validate a function
582	Repeat the value of a string
583	Returns a promise that is wrapped in the callback function .
584	Creates a new whitelist policy .
585	Creates a new EventDebounced instance .
586	Create a new frame reader
587	Connection constructor .
588	Generate a BufferId from a Buffer .
589	Generate a random node id
590	Calculate ticks for ticks
591	Get the time of a given date
592	Generate a buffer of time
593	Encodes an encoder .
594	Returns the number of leading zeros .
595	Index of a single index .
596	Sort list of files
597	Change the current mode .
598	Update scrollbars
599	Starts the cursor .
600	Calculates the line at the given position .
601	Updates a new document .
602	Update the selection .
603	Highlight the given line .
604	Get a property from an object
605	Create a new Flow instance
606	Remove an event handler
607	Trigger an event
608	Tries to load the list of files .
609	Generate a unique id
610	Send all files to the queue .
611	Creates a new input element .
612	Adds event listeners to the DOM .
613	Removes the event listeners from the DOM .
614	Determine if the upload is uploaded
615	Check if the uploaded files are uploaded .
616	Uploads the next chunk to the queue .
617	Adds a list of files to the flow .
618	Remove a file
619	Returns true if the file has a unique identifier
620	Calculates the size of the file .
621	Called when the upload is uploaded .
622	Handles a file event .
623	Abort all chunks .
624	Start the flow
625	Calculate progress progress
626	Determines whether this chunk has finished .
627	Returns the size of the uploaded file .
628	Read a webpack file
629	Initialize XHR .
630	Start the file
631	Determines whether the request was uploaded .
632	Process request request .
633	Evaluates a function to a function .
634	Iterate over an object
635	Create a table
636	Check if file is valid
637	Inserts table content into table .
638	Counts all records in the table
639	update row data
640	Create a getter for the given string .
641	Represents a single parameter .
642	Array constructor .
643	A transformation parameter .
644	A Range parameter .
645	Creates a new instance of the configuration object .
646	Creates a Cloudinary instance .
647	Determines the mode of the given argv .
648	Tries to resolve a lodash object .
649	The default config .
650	Finalize the resource type
651	Constructs a Drag instance .
652	Iterate over an object
653	Applies a function to an object .
654	Checks if value is a plain object .
655	Log a message by type
656	Creates a new DOM element .
657	Adds a CSS class to an element
658	Toggles a class on an element .
659	Get the pointer position of an element
660	Append content to an element .
661	Get the data for the element .
662	Determines whether an element has data .
663	Remove data from an element .
664	Execute multiple events
665	Removes a listener from an element .
666	Handler for event handlers
667	Automatically setup autocomplete events
668	Set timeout timeout
669	Set text content
670	Creates a new function that will throttled by the given function .
671	Checks if an event type is valid .
672	Constructs a new component instance .
673	Checks to see if a range is valid
674	Returns a range of range value .
675	Create a time range object
676	Create an array of time ranges
677	Constructs a TextTrackList .
678	Get the extension of a file .
679	Load a track
680	Construct a new RGBA color
681	Check if the player has a volume
682	Parses the given option value and returns the value if none .
683	check progress event
684	Tries to find the first choice source pair .
685	Mark a plugin
686	Trigger a plugin event
687	Creates a basic plugin instance .
688	Creates a new plugin instance
689	Load a video .
690	Logs the length of the given length .
691	Set the colors
692	Publish a message to the module
693	Initialize the browser window .
694	Get the breakpoint
695	Create a new Handlebars object .
696	Generate options for an option .
697	Set the size of the message
698	Redraw the chart
699	Update module config
700	Returns an object that can be used in the data table .
701	Get the value of a property or default value
702	Calculates the viewport
703	Checks the latest version of the latest version
704	Parses a version string into an array
705	Accessor for cell accessor
706	Get all projects
707	Get the config from the config object .
708	Return a copy of an env object
709	Merges a list of plugins into an array .
710	Register a template
711	Get a plugin template
712	Render a file
713	Remove a socket
714	Add a connection to the connection .
715	Get status status
716	Prepare a job
717	Kill all attributes
718	Set the body of the request body .
719	Middleware that checks the body of the request .
720	Create a new project
721	Middleware to redirect user .
722	Check if the user is authorized .
723	Main block block
724	Find nested list of nested arrays
725	returns absolute paths to absolute paths
726	Finds an array of libraries for an app
727	Fix the plist file into a list of plist
728	Generate accessor for accessor .
729	Get accessor functions
730	Execute a JavaScript expression .
731	Check to see if a binary file exists
732	Initialize the runtime
733	Set an option
734	Run the runtime runtime
735	Abort the file .
736	Get event by name
737	Remove an event listener
738	Bind a callback to an event
739	Checks if the specified value is valid .
740	Returns the browser version of the browser .
741	Removes SWF object from DOM
742	Checks if the given url is origin .
743	Create a new class
744	Returns the index of the given array .
745	Returns an array of strings that matches the given array .
746	Returns the intersection of the array .
747	Parses a string into a string
748	Add a field to the field .
749	Get the value of the field
750	Checks if the given object is a class name
751	Add a className to an object
752	Remove class name from object
753	Get a computed style of an Element
754	Calculates the position of the given node .
755	Get the position of an element
756	Get the dimensions of an element .
757	Remove all events
758	Preload the data from the server .
759	Rotate image to image
760	Get an array of entries
761	Makes an XHR request .
762	Set a header header
763	Get the cookie header
764	Set the mime type
765	Send a request to the server
766	Abort the upload request .
767	Recursively extend objects to target object
768	Destroy the image
769	Define getter function
770	Define a property
771	Error class .
772	Calculates the quaternion
773	Calculate the inverse of the matrix
774	Checks to see if it is a b
775	Checks if there is two points .
776	Modify all ticks in ticks
777	Calculates the time interval for the given interval .
778	Validates the chart model
779	Returns an array of ticks of ticks
780	Rounds a number
781	Merges the given source object into a new object .
782	Suggests a number of ticks in a domain
783	Detect number separators
784	Creates a transformer for a given file .
785	Validates the references to the given file .
786	Process a resource
787	Warn a list of all nodes .
788	Get the closest path for the given path
789	Get the hash of a URI
790	Get the prev value from the map
791	Fix relative path to the current directory
792	Convert a IPv4 address to an integer
793	Retrieves a value from an object
794	Get a nested value by name
795	Applies a middleware to the specified container
796	Adds a middleware to the specified name .
797	Create a provider
798	Add a new provider
799	Create a new service
800	Create a service
801	Creates a service factory .
802	Define a value
803	Creates a nested object .
804	Define a value .
805	Define a constant
806	Add a decorator to a container
807	Creates a new instance of an instance
808	Get a new bottle by name
809	Register a service
810	Remove a list of providers
811	Throws an error if invalid
812	Checks whether an event is an expression .
813	Register an event name
814	Inspects the variable declaration of a variable .
815	Indicates the program .
816	Remove an identifier from an identifier .
817	Inspects all functions in the contract tree .
818	Check for call expression
819	Check to see if there is no pragma .
820	Applies an error message to the source code .
821	Inspects the top level of the top level .
822	Check the block statement .
823	Returns the source text of the given node .
824	Check variable declarations
825	Creates a new context object .
826	Resolve the source config for the source
827	Resolve a plugin config
828	Writes the configuration file to the console .
829	Lint the given source code
830	Lint a file
831	Creates the lint - line options object .
832	Validates an array of options .
833	Check whether the given node is a file .
834	Checks if a literal is a hexadecimal string .
835	Font class .
836	Creates a new sound player .
837	Play a sound .
838	Determine if a library has a library
839	Wraps a promise .
840	Start watching changes
841	Resolve the ignore option .
842	Check if a property exists
843	Validates the value of a property .
844	The babel loader .
845	Create an image loader
846	Create a csv loader .
847	The css loader
848	Prepend a single entry to the config .
849	Build the webpack build
850	Recursively merge data into two objects .
851	Adds a default value to the default value .
852	Create a validator for a type
853	Creates a new Vue type
854	Validates the given value .
855	Create a new DOM event
856	Initialize a custom event
857	Clean up the event listeners
858	Adds event listeners to the runtime .
859	normalize an event
860	Triggered when a pointer is pressed .
861	Triggered when a pointer is clicked
862	Add tracking points to the stack
863	Update the target .
864	Start a delay .
865	Animation loop .
866	Calculates the bounds of the bounding box
867	Read all components
868	Appends a new file to the given file .
869	Asynchronously read the data from the given stream .
870	Creates a new job job
871	Creates a sandbox instance
872	WebSocket constructor .
873	PURE_IMPORTS_START _util_execor .
874	Returns a union of union objects .
875	Wrap a function with a list of listeners .
876	Wrap a callback with the given listeners .
877	Tries to find the largest directory .
878	Creates a new async function that returns a promise that will return a promise .
879	Creates a new async iterator .
880	Creates a function that returns a non - async iterator .
881	Recursively traverses the given object .
882	Convert a promise into a promise .
883	Get list of files
884	Copy a scoped index to a new index
885	Move a new index to another index
886	Check if an index exists
887	Load a module
888	Parses a list of languages .
889	Parses a language string into a single language .
890	Returns the language priority for the given language .
891	Parse a specifier .
892	Returns the preferred languages for the given language .
893	Compares two arrays .
894	Parses the charset .
895	Parses the given string .
896	Returns the priority priority for the given charset .
897	Parse a string into a string .
898	Returns the preferred charset for the given language .
899	Parses the encoding of a string .
900	Get the encoding priority for a given encoding .
901	Returns the preferred encoding of the preferred encoding .
902	Parses a list of media types .
903	Parse the media type .
904	Returns the priority priority for the given type .
905	Detect media type
906	Returns the preferred preferred types of the preferred media types .
907	Counts the number of quotes
908	Split a string into an object
909	Split media types into an array of media types .
910	Split a string into an array of parameters .
911	Loads the webpack config .
912	Assign a value to an object
913	Returns the value of the filter string
914	Evaluate a function on a page
915	Waits for a given page
916	Initialize a ghost worker
917	Get an array of colors
918	Create a cubehelper
919	Convert colors to image data
920	Compress an array of colors .
921	Convert a colormap to a colormap
922	Start a remote file .
923	Initialize a new merge operation .
924	Create a new channel
925	error handler
926	Create an app connection
927	error handler
928	Application class .
929	Assert that the given app is a message .
930	Parse a shard function
931	Check if nodes are equal
932	dispatch an event
933	join multiple channels
934	Get the data type of the given value .
935	Get data from event object
936	Create a redirect descriptor for the given event .
937	Creates a call descriptor for a given event .
938	Defines a custom event on the prototype .
939	Returns a wrapper for the given proto .
940	Wrap event with event target
941	Returns the listeners of the given event target .
942	Defines an event descriptor for an event .
943	Create a custom event target
944	Upload a single file
945	Called when the callback is done .
946	Handler for mouse events
947	Constructor .
948	Convert an integer to a number
949	Deserialize a JSON string
950	Stringify a given value .
951	Serialize a BSON object .
952	Create a virtual module
953	Get the filename
954	Check if the current version is a semver version
955	Match a callback against the given protocol .
956	Determines if two arrays are equal .
957	Get the source rule string
958	Calculates the arguments for a given scope type
959	Search for a class
960	dump all files
961	Zip a package
962	Upload the form data
963	clear temporary directory
964	Abort the process
965	Parses the given content into a context object .
966	add patches to the pattern
967	Parses all patches in the template .
968	Constructs a node .
969	Check if reset is resized
970	Format a uri
971	Convert urls to output urls
972	Convert uri to absolute path
973	Load a global object from a map
974	The 32 - bit implementation of hash
975	pure32 implementation
976	Bind keys to the given object
977	Set the parent node
978	Replace a node with the given value .
979	Removes the last node from the list .
980	Change the value of a node
981	Gets the next node in the active active nodes .
982	Create a function that calls a callback on the target object .
983	Constructs a new top level node .
984	Normalize the node .
985	Process nodes in template
986	Match all nodes in the document
987	Recursively rehydrate the given document .
988	Render the renderer
989	Check to see if the feature is valid
990	Convert entity names to string
991	Returns a deep copy of the config .
992	Load a YAML file from the repository .
993	Get the base params for a given parameter
994	Get the config for a given file
995	Define a property
996	Replace logger with logger
997	Inject the manifest .
998	Injects the SWAP tag into the body .
999	Injects the async load - page .
1000	Create a react - renderer .
1001	Execute a child process
1002	Spawns a child process .
1003	Calculates the slope of the given vector
1004	Checks whether the given attribute is a value .
1005	Returns the markup for the given property .
1006	Returns an event listener for an element .
1007	Creates a new updateQueue .
1008	Mounts a component instance .
1009	Requests the current node .
1010	Returns true if the next tick is valid .
1011	Delete value from node
1012	Updates the DOM properties of the DOM element .
1013	Simplify a worker with the given code .
1014	Creates a new retry strategy .
1015	Constructs a new retryoff .
1016	Creates a new function call .
1017	Channel constructor .
1018	Initialize a new connection .
1019	Create a dragable instance .
1020	Creates a new conjunction with the given expression .
1021	Sorts the intervals of the given conjunction .
1022	Converts program arguments into an array .
1023	Creates a function that returns a function that returns a function that updates the program .
1024	Process a sequence of observations .
1025	Creates a new list of actions that are applied to the given AST tree .
1026	Performs the execution of the program .
1027	Apply a function to the given object .
1028	Define a flow to the flow
1029	Execute a flow block .
1030	Execute a function .
1031	Pads a string to a string .
1032	Creates a new S3 curve
1033	Creates a new S3 pair pair
1034	Creates a new static file .
1035	Adds event listener to obj
1036	Remove an event listener
1037	View constructor .
1038	Represents a product .
1039	Creates a new cart item .
1040	Invoked when the promise is rejected .
1041	Helper function to fix the correct date field .
1042	Unbinds event listeners
1043	Updates the current position of the widget .
1044	Creates a new GoogleLogin instance .
1045	Calculates a set of cells
1046	Get the value of an enum
1047	Converts an object to an object .
1048	Create a new random instance
1049	Returns a human readable date
1050	Creates a logger instance .
1051	Run the requestQueueQueueQueue .
1052	Parses a JSONPP request .
1053	Validate parameter value
1054	Convert yargs to yargs
1055	Convert yargs to yargs
1056	Creates a new NgramParser instance .
1057	Collects scenarios from an element .
1058	Notify all files in the server
1059	Renders the children of the component .
1060	Unmounts the component .
1061	Filter data .
1062	Create a new table .
1063	Handle an action .
1064	Check if the data is received .
1065	Binds to the store .
1066	Initialize the store .
1067	Remove listeners from the store .
1068	Request the DataTable
1069	Filter table .
1070	Parses a table .
1071	Dispatches a table .
1072	Select a row
1073	Extract attribute value from node
1074	Iterates over obj and invokes the callback function .
1075	Filters the given object .
1076	Returns the index of all elements in an array .
1077	Adds an item to the array .
1078	Replace an object with an array of objects .
1079	Returns the intersection of two arrays .
1080	Removes a listener from an object .
1081	Suspends a listener on an object .
1082	Determine if the property has changed .
1083	Sets a property on an object .
1084	Adds a value to the map .
1085	Remove a key from the map .
1086	Iterates over all keys and values .
1087	Disconnect from the given object .
1088	Filters an array of promises .
1089	A container .
1090	Registers a factory .
1091	Removes a full name from the registry .
1092	Returns a resolved name for the given name .
1093	Adds a type to the specified type .
1094	Adds an injection to the container .
1095	Adds type injection to the factory .
1096	Get the value of a key
1097	Returns true if the given key exists .
1098	Iterates over all properties
1099	Converts a string to camelcase .
1100	Increment the value of the specified property .
1101	Removes a property from the specified value .
1102	Create a new class
1103	Returns a computed property for a given property .
1104	Re - rejects an object with the specified value .
1105	Returns a subset of the given value .
1106	Returns an array containing the properties of the keys .
1107	The underlying implementation of _ .
1108	Invoked when the receiver changes .
1109	Represents a computed computed property .
1110	Add multiple objects to this object .
1111	Removes all objects from this object .
1112	Trigger an event .
1113	Creates a new promise .
1114	Resolve a promise .
1115	Sets the action handlers for the given action .
1116	Send an action to the action .
1117	Insert an array into an array .
1118	Remove an item from the array index .
1119	Add an operation operation to an array .
1120	Array operation .
1121	Match an array operation .
1122	Finds an operation at the given index .
1123	Removes an operation at the specified index .
1124	Sets an array of properties on the content .
1125	Replace an array of objects in this collection .
1126	Removes the length of the enumerable .
1127	Removes the specified element from the list .
1128	Finds child element by id
1129	Adds a CSS class to the element .
1130	Get the value of an element .
1131	Get the value of an element .
1132	Get the innerHTML of this element .
1133	Adds event listeners to the application .
1134	Registers a handler for the given event .
1135	Returns the nearest ancestor of a given class .
1136	Returns the nearest ancestor of the given property .
1137	Returns the nearest ancestor of a given class .
1138	Compile the template into the buffer .
1139	Change the binding of the property
1140	Applies the attribute bindings to the buffer .
1141	Sets the value of an attribute .
1142	Get class name from path
1143	Adds a child view to the buffer .
1144	Destroy the view
1145	Clears all child views .
1146	Destroys a view .
1147	Trigger an event
1148	Sets the child views of a child view .
1149	Internal method called when a child view changes .
1150	Removes a child view from the collection .
1151	Updates the content of the given content .
1152	Trigger an action .
1153	Evaluates a function that evaluates the given property .
1154	Renders a template into a buffer .
1155	Binds a property to the given property .
1156	Checks to see if there is an error .
1157	Remove all handlers from the state .
1158	Initialize the router .
1159	Render a controller .
1160	Attempts to find the parent model .
1161	Get properties from a model
1162	Look up a controller .
1163	Connect a view to the parent view
1164	Registers a change event on the view .
1165	Handles the link to the link .
1166	Replace a new route with the given target .
1167	Checks whether a given view is a view .
1168	Destroy the connection
1169	Get the hash of the current page .
1170	Replace the current state with the current state .
1171	Binds a callback to the current URL .
1172	Sets the path to the current path .
1173	Resolve a full name .
1174	Get the template name from the given name .
1175	Get the router
1176	Initializes the Ember .
1177	Advances the application .
1178	Initialize the dispatcher .
1179	Creates a new Ember instance .
1180	Observes a record on the given type .
1181	Called when the given type has changed .
1182	Returns an array of namespaced namespaces .
1183	Add a listener to the queue .
1184	Removes a listener from the queue .
1185	Remove all helpers .
1186	Wrap a callback with a callback
1187	Returns a property descriptor for an object .
1188	Create a property descriptor for the given attributes .
1189	Returns true if the given descriptor is valid .
1190	Returns a trap with a given name .
1191	Get a value for a given name .
1192	Checks the value of an object .
1193	Signs an object .
1194	Checks to see if the target is wrapped .
1195	Deletes a property .
1196	Traverses an iterable .
1197	Returns an array of keys for the given object .
1198	Returns the own enumerable keys of the object .
1199	Creates a wrapper around a primitive method .
1200	Load an object from the object .
1201	Serializes the given record .
1202	Serializes the given value into a JSON object .
1203	Serializes a relationship to a JSON object .
1204	Helper function to set the fields of the given record .
1205	Extract data from the store .
1206	Set the meta data for the given type
1207	Saves an array to the RecordArray .
1208	Internal method called when a record has changed .
1209	Creates a new Record instance .
1210	Returns an id for the given type .
1211	Find a record by id
1212	Iterates over the given type .
1213	Reload a record .
1214	Loads an array of records .
1215	Returns true if the given type has a given id .
1216	Get a record by id
1217	Loads a single query .
1218	Returns an array of records for a given type .
1219	Unload all records from the given type .
1220	Returns a record containing the specified record .
1221	Commit all pending operations .
1222	Updates the original record .
1223	Assign a record to a record .
1224	Returns the record mapping for a given type .
1225	Adds a new record to the specified type .
1226	Push a payload into the store .
1227	Sets the metadata metadata for a given type .
1228	Creates a new Record instance .
1229	Adds new records to the given record .
1230	Returns a deep copy of an object .
1231	Adds an attribute to the attribute .
1232	React to a new value .
1233	Set the value of the record .
1234	Rollback back back to the previous state .
1235	Suspends a relationship to another relation .
1236	Saves the current model .
1237	Reloads a record in this record .
1238	Sets the value of the record .
1239	Iterates over the attributes of the model .
1240	Iterates over all attributes of the model .
1241	Adds an observer to the prototype .
1242	Iterates over all relationships
1243	Clear the changed records .
1244	Adds a record to the given record .
1245	Update all records in the given type .
1246	Create a list of records array .
1247	Create a new RecordArray instance .
1248	Create a new RecordArray instance .
1249	Create a new RecordArray instance .
1250	Adds an array of Records to the RecordList .
1251	Loads an array of RecordArrays .
1252	Serialize a record .
1253	Returns a promise that resolves with the given type .
1254	Returns an array of fixtures for a given type .
1255	Serialize a record .
1256	Normalizes the given type .
1257	Normalizes the primary record .
1258	Normalizes the primary data into an array .
1259	Normalizes the data model into the store .
1260	Serialize a record .
1261	Adds a relationship to a JSON object .
1262	Returns a URL for a given type .
1263	Get a list of IDs for a given type
1264	Create a record for a given type
1265	Updates a record with the given type .
1266	Delete a record
1267	Returns the path for the given type .
1268	Performs an AJAX request .
1269	Initialize an inflector .
1270	Returns an id for the given key .
1271	Serializes a record in the given type .
1272	Maps a relationship to a JSON object .
1273	Returns a singular case .
1274	Converts a camel case to camel case
1275	Updates the relationship with the given type .
1276	Serializes relations to a JSON object .
1277	Updates the primary field in the database .
1278	Updates the payload with the given type .
1279	Converts a type into a plural case .
1280	Creates an error object .
1281	Parses a query string into an object
1282	Sets the value of an attribute .
1283	Recursively compile all nodes in the tree .
1284	Creates a wrapper for the group element .
1285	Replace a new node with the given element .
1286	ECMA - 262 12
1287	Returns true if the given requestUrl is the same .
1288	Traverses the given node .
1289	Client class .
1290	Create a new connection .
1291	Creates a function that returns a function that will return a function that will return a markdown function .
1292	Sends a server to the server
1293	Process a bootstrap file .
1294	Fix the tsconfig config object .
1295	Fixes a reference file to a reference .
1296	Fix package package . json
1297	Fix package . json
1298	Fix the main module .
1299	fix gitignore
1300	Show the help command
1301	Creates a function that binds a function to the passed object .
1302	Converts an object into a JavaScript object .
1303	Resolves an object into an object .
1304	Sets the value of the given value in the given function .
1305	validate tile
1306	This function is used to process associations .
1307	Handle errors .
1308	Generate a zip file
1309	Executes a command .
1310	convert a file to a string
1311	Merges two YAML files .
1312	Loads a kane instance .
1313	Determines the kele class for the given options
1314	Logs an error .
1315	Get the default bucket bucket
1316	Build a nested list of nested templates
1317	Builds a css command
1318	Build a Lambda function
1319	Send a response to the response
1320	Convert an options object into a string .
1321	Copies properties from source to target .
1322	Open a popup
1323	Opens a popup with the given options .
1324	Opens a popup
1325	Opens a popup for a popup
1326	Returns the contents of the current selection range .
1327	Checks if the given tag is between the given range
1328	Checks whether the given position is a given position .
1329	Returns an array of stylesheet styles for a given position .
1330	Returns the completions for the given editor .
1331	Generate stylesheet
1332	Get the markup of the given registry
1333	Extract prefix from the given string
1334	Checks if the given marker is valid .
1335	Toggles the value of a property .
1336	Returns true if the given attribute has changed .
1337	Returns an event handler for the given property .
1338	Create a derived property
1339	Image constructor .
1340	Register a task .
1341	Inject template .
1342	Default check function that checks the size of the given size .
1343	Add 64 - bit integers to 64 - bit integers .
1344	Initialize a new DataStream .
1345	Returns a map of all variables in the sandbox
1346	Break an AST node into a sandbox
1347	Removes the sandbox variable from the environment variable
1348	Get all events
1349	Removes all items from the list
1350	Remove all items
1351	Check if option is an option
1352	Removes the module from the queue
1353	Rebuild a hierarchy .
1354	Positions a row to a row
1355	Create a tree from a list of classes
1356	Stringify an object .
1357	Counts the number of lines
1358	Wrap a conditional condition
1359	Checks if a node is a single condition .
1360	Counts the label
1361	Add an anonymous function to an anonymous function
1362	wrap conditionals
1363	define a module
1364	Calculates the coverage report .
1365	Adds a mixin to the config .
1366	Recursively merge the properties of the given object .
1367	Returns a deep copy of the config object
1368	Returns an array of paths to be relative to the path
1369	Merges a config object into another .
1370	Extract plugins from the lmdlint config
1371	Parses a JS code into an object .
1372	Wrap a module with the given options .
1373	Get module type
1374	Transform a matrix
1375	Zoom event handler
1376	Calculates the zoom delta .
1377	Parses a config object into an object
1378	Parse the url and parse it into an array of URLs .
1379	Convert a file to a string
1380	Get a remote url
1381	Get a file from a file
1382	Returns an error object .
1383	helper function to check response
1384	Creates a promise that resolves to a Promise .
1385	Create a directory
1386	Parses a sitemap sitemap sitemap .
1387	Run the input input
1388	Read input from the source file
1389	Generate input input
1390	Normalize a function to normalize a function .
1391	Obtains a default value from the provided options .
1392	Prepares the required options for the given options .
1393	Get the output path for a page
1394	Returns the index file path for the given options .
1395	Prepare the generator function for the generator
1396	Generate the input file
1397	Check if path exists
1398	Returns the path to the PhantomJS executable .
1399	Spawns a worker
1400	Prepare the options for the given options .
1401	Poll for all files
1402	Creates a lock for a lock .
1403	Notification constructor .
1404	Start watcher
1405	Add a snapshot to the specified file .
1406	Check if file exists
1407	Remove a file
1408	Remove a remote file
1409	Save snapshot file
1410	Check if the given line is allowed
1411	Get the robots url
1412	Read the robots file
1413	Bubble an array of values
1414	returns an array of ranges
1415	Gets the last time .
1416	Parses the given URL into an object .
1417	Encode a query string
1418	Remove trailing trailing trailing trailing trailing slash
1419	Returns a copy of the original object .
1420	add event to event queue
1421	Prepare request object
1422	Send a request to the queue
1423	Get metrics object
1424	Make an HTTP request
1425	returns all promises
1426	Gets the next position of a given parent node .
1427	Class to classify a letter .
1428	Creates a function that accepts a list of strings .
1429	Create a function that binds to the database .
1430	Implementation of ES6 instance .
1431	Generate a text text
1432	Create a new Backbone instance .
1433	Compile css files .
1434	Runs a sequence in series .
1435	Filters the type of the document type .
1436	Pads the value of the given value .
1437	Resolves a collection of items in a collection
1438	Assigns the user s roles to the user .
1439	Returns all channels for the given doc .
1440	Outputs help help with help
1441	Returns a human readable name .
1442	Validates the object s properties of the given object .
1443	Build the path for the item stack
1444	Gets the business id of a business id .
1445	Convert all sync channels to a sync channel .
1446	Checks if the given value is an ISO 8601 date .
1447	normalize timezone timezone
1448	Compares two arrays .
1449	Compare two dates .
1450	Normalizes the timezone value .
1451	Start all workers
1452	Stop all workers
1453	Send a message
1454	Deletes an entity
1455	save an entity to the cache
1456	Get a file
1457	Get the entity context for this entity .
1458	Get a module
1459	Validate the sources object .
1460	Generate the module catalog catalog .
1461	Log a module
1462	Builds an array of instances
1463	Recursively build directory
1464	Generate a pid
1465	Save the current cache
1466	Called from the modules cache
1467	Create a new module instance
1468	Stop all workers
1469	Get the protocol of the given protocol
1470	Remove a directory from a directory
1471	Get mouse position
1472	Inject a proxy request
1473	Inject proxy headers into proxy headers .
1474	Parses a config file into a JSON file .
1475	Parses the contents of the given object .
1476	Parses the given map .
1477	Parses the command line arguments .
1478	Parses a command line argument
1479	Parses a forward rule .
1480	Creates a new error object .
1481	Update working state
1482	Fetches branches for the current working branch
1483	Initializes the repository .
1484	Convert a buffer to an array
1485	Ensure a buffer is a string .
1486	Check if two buffers are equal
1487	Gets the merged file set of files .
1488	Returns a list of merged files in the tree .
1489	Returns the SHA of the file at the given path .
1490	Creates a commit builder for the current working tree .
1491	Flush the commit branch to the current branch
1492	Format a list of messages .
1493	Push a remote branch to the driver
1494	Pull a remote branch
1495	Checks to see if the given branch is commits .
1496	Tries to solve the conflict in the tree .
1497	Creates a new merge of the given tree .
1498	Get the resolved entries of the tree .
1499	Adds a blob to the cache .
1500	Get the contents of a directory
1501	Create a new commit object
1502	Normalizes a list of commits .
1503	Get a file s contents .
1504	Asynchronously read a file .
1505	Checks if a file exists
1506	Remove a file from a file path .
1507	Moves a file at the specified file path .
1508	Determines whether a file has changed .
1509	Configure the connection
1510	Create a new nock instance
1511	Configures an express application .
1512	Configures the LAP proxy server .
1513	Clean up all sockets
1514	Set a change in the current working directory .
1515	Revert the current working state
1516	Reverts a file in the current working directory
1517	Revert the current working directory
1518	Reverts all changes in the repository .
1519	normalize path
1520	Determines whether a path is a directory .
1521	Returns a list of files recursively
1522	Move files to directory
1523	Create a branch
1524	Updates a branch
1525	Delete a branch
1526	Fetch a blob from the cache
1527	Create a new OAuth2 token .
1528	Creates a new instance
1529	Convert an array of features into a string
1530	Add a feature index to the map
1531	Add features from a hash table .
1532	Convert a hash into an array of features
1533	Create an array of features from a hash array
1534	Creates a hashMap from an array of features .
1535	Convert arrays to an array of arrays .
1536	Initialize the super label for the given sample .
1537	Generates the superlab data for the given dataset .
1538	Recursively classify a tree .
1539	Constructs a classifier .
1540	Constructs a new model .
1541	Create a new weight
1542	Class for classifiers
1543	Increment a number .
1544	Computes the confusion for the given class .
1545	Returns an explanation for the given class .
1546	An explanation of the expected class .
1547	Train a batch .
1548	Convert a feature into an array of features .
1549	Generate an array of features for a given dataset .
1550	Constructs a new ML linear linear regression
1551	Start training batch
1552	Convert a model into an array of maps .
1553	Iterates over the given samples
1554	Constructs a classifier .
1555	Concat an array of data arrays .
1556	Preorder the tree recursively .
1557	Filters the relations for the given relation .
1558	Get all files for a given bundle
1559	Walk all resources from the given bundle
1560	Get all resources
1561	Returns an array of all bundles in the list .
1562	Get the bundle path for the given path
1563	Initialize a new package .
1564	Create a new bundle
1565	Load a ruleset from a full path
1566	Checks if a given path is a relative path
1567	Add a resource to the bundle
1568	Add a resource
1569	Validate the filter object
1570	Returns the lowest priority of the given package .
1571	Determine all the seeds of the given list
1572	Add a bundle to the bundle
1573	Returns a copy of the source object
1574	Bundle constructor .
1575	Create a base scale for the given type
1576	Buffers a buffer with the given options .
1577	Build gulp gulp task
1578	Split a string into a string .
1579	Prints usage
1580	Remove array from array
1581	extract styles from a bundle
1582	Validates placeholders for each language .
1583	Groups messages from the gettext items
1584	Traverses the given json object .
1585	Finds all available dependencies for a given file .
1586	Parses a query string into an object
1587	Stringify an object
1588	Compile a single argument into a string .
1589	binds events to an element
1590	Initialize the constructor .
1591	Compile an element into the DOM .
1592	Get the value of the value
1593	Takes a module and returns a promise
1594	Runs the coverage report .
1595	Creates a new Shortline instance .
1596	Find elements by name
1597	Send a coverage report
1598	Constructor for Travis API requests
1599	Execute a git command
1600	Creates a slugDetector .
1601	Creates a css css selector for the given html string .
1602	Combine css css css with scoped styles .
1603	Throws an error message .
1604	Checks to see if the build commit commits .
1605	Trims the trailing slash .
1606	Remove options from the parser
1607	serialize an object
1608	Render all pages
1609	Get path from git url
1610	Get the robots file path
1611	Compile index .
1612	Sort a list of mentions
1613	Search for an emoji
1614	Wraps a function in a fiber .
1615	Processes a regular expression .
1616	Get number of CSS selector
1617	Create an index .
1618	Insert a migration into the database .
1619	Inserts a seed table .
1620	Called from the database
1621	Parses the parameters into an object
1622	Checks if the given props is a function .
1623	Clone gifs
1624	Returns true if the given level is a log level .
1625	Gets the value of the value .
1626	Generate a map of boolean attribute names
1627	Initialize a new instance
1628	Initialize the directive
1629	Attaches radio events to radio button
1630	Parse cookies
1631	Get an array of cookies
1632	Set a cookie
1633	Checks the state of the cookie .
1634	Format the given string .
1635	Create a zoom range
1636	Synchronously synchronizes the zoom mode .
1637	Add multiple selections
1638	Apply selection selection
1639	Create a list of selectors
1640	Synchronously synchronizes the selected selection
1641	Create a watcher instance .
1642	Create a watcher for the given watcher .
1643	Add an identifier to the identifier
1644	Load a single entity .
1645	Generate action object
1646	Creates an action creator for a given type .
1647	Returns a random delay between min and min .
1648	Logs the state of the action to the current state .
1649	Removes all subscribers from the given list .
1650	Removes all subscribers for the given event .
1651	Adds an array of listeners to the queue
1652	Returns an array of events for the given channel .
1653	Returns an array of subscribers for the given event
1654	Subscribe to a channel
1655	Unsubscribe from a particular channel
1656	Add an event listener to the queue
1657	Removes all subscribers from the given event .
1658	Execute an error handler
1659	Dispatches the given event .
1660	Resolve namespace from namespace
1661	Returns a function that returns a promise that resolves to a promise .
1662	Creates a function that returns a promise that will be used to callbacks for the given type .
1663	Execute a promise
1664	Create a fake module
1665	Checks if an object is a jQuery object .
1666	Returns true if the given object is an event .
1667	Add properties to the module
1668	Wrap a method to call a method on the given instance
1669	Register a fake module
1670	Set a module instance
1671	Start a single module
1672	The function called when the constructor is called .
1673	Start a single module
1674	Start a singleton
1675	Create a new instance of a module
1676	Creates a function that creates a callback function for a given property .
1677	Start all modules
1678	Stop a module
1679	Destroys a module instance .
1680	Stop a module
1681	Stop all modules
1682	Stop a singleton instance
1683	Removes a module from the given module .
1684	Delete a module
1685	Main entry point
1686	Get the value of the picker property
1687	Set the value of the value
1688	Get the value of the value .
1689	Creates a new markdown serializer .
1690	Convert a markdown markdown into a unified section
1691	Exit the suite .
1692	Adds a suite to the suite .
1693	Adds a snapshot to the current suite .
1694	Push a snapshot to the current state .
1695	Transform a suite into a suite
1696	Transform a snapshot list into a list of objects .
1697	Generate a suite header string
1698	Create a new escaped string .
1699	Returns the path for the given suite .
1700	Formats a list of snapshots to a list .
1701	Formats a list of warnings .
1702	Creates a new preprocessor instance .
1703	Provide a single line plugin .
1704	Replace newlines with the given string .
1705	Creates a new content of the given editor .
1706	Returns true if the character has all entities
1707	Convert a hex string to RGB
1708	Validate CSS rule
1709	Create a new Analytics instance
1710	Module constructor .
1711	Check if given object is a Buffer
1712	Encodes a number into a string .
1713	Decodes a string into a string .
1714	Poller .
1715	Called when the transport fails .
1716	Remove all listeners
1717	Initialize a new Backbone .
1718	Extract comments from a string
1719	Binds the widget to the ngModel
1720	Create a new instance
1721	Determines the word of a word
1722	Add a new api to the server
1723	Gets the JSON data from the remote server .
1724	Splits a method name into an object .
1725	Copy a remote request to remote server
1726	Get the stack trace
1727	capture a child process to stdout
1728	Create a function that binds a stream to a stream .
1729	Start a capture event .
1730	Wrap a function in a stream .
1731	Get nearest value in selected option
1732	Round the number of numbers .
1733	Adds an array of frames to the array .
1734	Produces a transformer that returns a transformer .
1735	Create a new concatenation .
1736	Patch a single node .
1737	Execute the queue
1738	Create a setter for the given node .
1739	Update the value of a node .
1740	Fire an event
1741	Creates a delegate event listener .
1742	Load a module
1743	Writes a structure to a binary array .
1744	Adds a where clause to the given column .
1745	Handles the knex parameters for a query .
1746	Create a knex instance
1747	Closes all instances of the given registry .
1748	Mark the highlightJS code .
1749	Render the given processor .
1750	Create a arrow arrow
1751	Parses the value of the value node .
1752	Creates a copy of a file .
1753	Return an array of results from the given array
1754	Finds a value in an array .
1755	Read a readable stream .
1756	Read a buffer from the buffer .
1757	Read header section
1758	Read a key summary
1759	Read a key index
1760	Read a key block
1761	This function is called when the key is provided .
1762	read record summary
1763	Reads a record from the input stream .
1764	Read the definition of a block
1765	Read an object from the input stream
1766	Find the word for the given key
1767	Reduce the array of phrases in a phrase .
1768	Recursively shrink all words in a phrase .
1769	Searches the vars from a phrase .
1770	Match a list of elements in an array
1771	Check if a modifier key is valid
1772	Creates a function that creates a key based on the modifier key .
1773	Override keydown .
1774	Override default keypress event .
1775	Execute a list of extensions .
1776	Parse an Imap message .
1777	Creates a new GPT object .
1778	helper function to read a backup
1779	Creates a function that invokes fn with the given token .
1780	Format a quantity into a number .
1781	Format the value of the quantity
1782	Format the given value .
1783	Format the given value into an object
1784	Format the given value into a string .
1785	Format the fields in the schema .
1786	Read the config object from the config file
1787	Parses a given node .
1788	Extracts a string literal .
1789	Parses a string literal .
1790	ECMA - 262 12
1791	ECMA - 262 13
1792	Creates a new curry function .
1793	Match an array of matcher
1794	Iterates over a given AST node .
1795	Get tag name
1796	Consume attribute value
1797	Checks if a given character is a string .
1798	Get the default value for the given key
1799	Reads XML from a path
1800	Appends the source source to the application .
1801	Log an error message .
1802	Compile a model
1803	Generate a list of props
1804	Creates a function that debounce a function to a given amount of milliseconds .
1805	helper function for babel
1806	Finds a list of fields in a model
1807	Log an error message
1808	Call a function to call this function .
1809	Find the input element .
1810	Get the validation messages for the given element .
1811	Register a class
1812	Get a config object
1813	Connect to the database
1814	Start a shell .
1815	Loads all files in the current directory .
1816	Wrap a function that calls the function with the given arguments .
1817	Handle errors .
1818	{{{ 1
1819	Save the database .
1820	Pick a picker instance
1821	Recursively walk the list of files
1822	Check if a file is a file
1823	Check if a directory is a directory
1824	Process all files in a directory
1825	Processes a single file .
1826	Initialize the http server
1827	Returns the first element in an array .
1828	Create an object with the specified config .
1829	Create a HTTP transaction object .
1830	Returns the date difference between two dates .
1831	Initialize an error handler
1832	Calculates the date difference between two dates .
1833	Consume a pair of pair
1834	Consume an array from an array
1835	Check if an identifier is an identifier
1836	Invoked when the pool is done
1837	Get the json file .
1838	Handles an event to the level .
1839	Handles a change event .
1840	Decrypts GCM data .
1841	Encrypts a text block using CBC algorithm .
1842	Encrypts a text block .
1843	Unpack encrypted content
1844	Derive key from password
1845	Derive key from password
1846	Create a binary stream
1847	Create a decoder stream .
1848	Reverse a random distribution
1849	Reverse algorithm
1850	Render a single curve
1851	Render a color
1852	Draws paths
1853	Handle brush updates
1854	Get selected data
1855	Returns true if the given dimension is two arrays .
1856	Convert a value to a property
1857	Gets the property of the given property .
1858	Constructs a new ReadFileCacheCache .
1859	Called when the resource is finished
1860	Initialize a new instance with the given options .
1861	Inspects the given message .
1862	Initialize a new HTTP request .
1863	Process request options
1864	Trigger an event on the response
1865	Log a request
1866	Parses the given raw response into the request object .
1867	Adds an object to the prototype chain .
1868	Adds headers to the object .
1869	Adds headers to the object .
1870	Adds an object to the prototype chain .
1871	Try to find a codec .
1872	Convert the given options to a string .
1873	Convert the given encoding to a buffer .
1874	Encodes a user - auth auth object .
1875	Constructs a new vector .
1876	Create a new error message .
1877	Represents a matrix .
1878	Creates a new vec2 instance
1879	Creates a new Quaternion
1880	Constructs a new vec3 instance .
1881	Creates an item in the browser .
1882	Add an event listener
1883	Returns a copy of the options object .
1884	Vuebar plugin
1885	Represents a matrix .
1886	Constructor for a triangle
1887	Executes a bash shell command .
1888	Execute a command
1889	Create options for given pattern
1890	Returns the path for the bash shell .
1891	Memory driver driver
1892	Determine the cost of all items
1893	Recursively walk a subnode
1894	Set the arguments of the arguments .
1895	Execute a function .
1896	Iterates over an array .
1897	Iterates over an array .
1898	Set the list of dates
1899	start server
1900	show success success
1901	Logs the request to the server
1902	Helper function to set the properties of an interface .
1903	Initialize a new token
1904	Send an HTTP request
1905	Gets the access token from the API .
1906	Return an error object
1907	Create a new address
1908	Edit an address
1909	Remove an address
1910	Retrieve an address
1911	Get email from a book
1912	Add an email to a book
1913	Get an email information
1914	Retrieves a number from a book
1915	Retrieve a list of campaigns
1916	Get a specific informations info
1917	Get a report statistic by name
1918	Retrieve a report statistic by a book
1919	Create a new campaign
1920	Add a sender to the sender
1921	Activates a sender with the given email address .
1922	Get the sender email .
1923	Get global information about an email
1924	Remove an email from an email address
1925	Get email statistics
1926	Add blacklist to blacklist
1927	Remove blacklist from email list
1928	Get email information
1929	minified file
1930	Write a file to the output directory
1931	Create a new Cookie instance
1932	Set a cookie
1933	Read a cookie from a cookie .
1934	Delete a key
1935	Remove all properties from the map .
1936	Creates a curry function .
1937	Clone the gallery item .
1938	upload a local file
1939	delete a file
1940	Create an action handler
1941	Returns the next date in the schedule
1942	Delete an action
1943	Request a service .
1944	Get an identifier
1945	Main integrations function
1946	Convert a scheduler to an action
1947	Fetches an item from the service .
1948	Sends a request to an adapter
1949	Generate a JSON object
1950	Generate a mapping function for the given data .
1951	Map a service to a service endpoint
1952	Read the tail of the tail of the tail
1953	Returns the length of the tails of the tails
1954	Prepare an array of pipeline functions
1955	Cast query params to the given data
1956	Create a queue
1957	Get a GET request
1958	Send a set action
1959	Set a metadata request
1960	Export JSON schema into JSON schema
1961	Create a reference to the given definition .
1962	Checks if the given value is a list .
1963	Find an option for the given choice
1964	Returns true if the given identifier is a code element .
1965	Delete expired data
1966	Transform range to string
1967	Transform a selection anchor to another .
1968	Returns a function that matches the given endpoint
1969	Create an action object
1970	Middleware for a request
1971	Create a request from an action
1972	Get the service definition for a given type
1973	Synchronously synchronously synced data .
1974	Create a new gulp instance
1975	creates a new array of lines
1976	Constructs a new module .
1977	Maps a request to a service .
1978	Process a message in a message
1979	Creates a mapper instance .
1980	Constructs an element matrix matrix .
1981	Convert a string to public URL .
1982	helper function to write expectations
1983	Generate source file
1984	Write labels to datamap
1985	Represents a node .
1986	Node node .
1987	Node constructor .
1988	Create a new instance
1989	Creates a new content with the given content .
1990	Detects the name of the given selector
1991	Parse bookmarks
1992	The common interfaceality for a matrix .
1993	Computes a class matrix matrix .
1994	Creates a new vector with the given size .
1995	Build attribute matcher
1996	Determine if a container is a container
1997	Returns the common ancestor of the given object .
1998	Parse styles from a string
1999	Calculates the distance between two nodes .
2000	Initialize a new Lexer .
2001	Initialize the parser .
2002	Throw an error .
2003	Adds a variable to a given type .
2004	Creates a new Lexer .
2005	Parse arguments .
2006	Create a new lexer .
2007	Create a new lexer .
2008	Add a new Lexer .
2009	Create a node .
2010	Reads the given string .
2011	Execute all functions
2012	Evaluate input characters .
2013	Reads the input into an array .
2014	Send an error message
2015	Pause a request .
2016	Resume a tick .
2017	Create a temporary directory
2018	Copy a string to a buffer .
2019	Parse a string .
2020	Get the base config for the given library
2021	Post a notification
2022	Generate a username
2023	Send an error response
2024	Respond to the link token .
2025	Default error handler
2026	Middleware error handler
2027	Register a provider
2028	Register an OAuth2 provider .
2029	Register a token provider
2030	Authentication handler for social link .
2031	Creates a passport callback .
2032	Create a new passport token middleware .
2033	Get the callback for the given path
2034	Get a provider token from a path
2035	Middleware to check if the user has a role
2036	Finds the layer of the map .
2037	Defines a map to a map
2038	Update the layer
2039	Load layers from the map
2040	Removes layers from the map .
2041	Get the bounds of this group .
2042	Iterates over all layers in the map group .
2043	Returns true if the given layer is removed .
2044	Shows the map .
2045	Remove the feature from the map
2046	Removes the specified object from the array
2047	Add a new layer to the cluster
2048	Get all the markers in this group .
2049	Calculates the bounds of the cluster
2050	Update the bounds of a marker
2051	Run the slider animation
2052	start the spiderer
2053	Remove a layer from the map
2054	Add a marker to the map
2055	Interpolate a path
2056	Returns a list of pages based on index .
2057	Create a new template engine .
2058	Represents a job .
2059	Worker constructor .
2060	Handle drag events
2061	Returns the index of the specified element .
2062	Create a new tor instance
2063	Get the list of included files
2064	Returns an array of default paths for default paths
2065	Get the arguments from the package . json
2066	Returns a list of bower - json
2067	Checks if the main file is an array
2068	Initialize a tor agent .
2069	Runs in the cache
2070	Sets the state of the specified address .
2071	Set the scan limit
2072	Set the brightness of the given address .
2073	clear all display devices
2074	Display a number
2075	Generate code for a comment .
2076	Set the validation options
2077	Check if a given path exists
2078	Initialize a new locale .
2079	recursively add dependencies to the location
2080	Remove duplicates from cyclic dependencies
2081	Constructs a new series of options .
2082	This function is called when the value is ready .
2083	Removes elements from target .
2084	Finds all occurrences of the given target .
2085	Initialize a new Logger .
2086	Create a handler for a given message .
2087	Start the process .
2088	Returns a new reporter instance .
2089	Build a list of options
2090	Builds a list of commands .
2091	Router constructor
2092	Get the default port
2093	Recursively remove all scripts .
2094	Returns the index of the specified object
2095	Gets the array of values for the given node .
2096	Get the value of the given node
2097	Determine if a given variable is writable .
2098	Returns the default configuration for the given extension .
2099	Returns true if the given index is escaped .
2100	Replaces the given matcher with the given string .
2101	replace the matcher with the given matcher
2102	send a message to the socket
2103	Parse message
2104	JWT token
2105	Stores the data in the store .
2106	Send a token to the server .
2107	Returns a copy of this token .
2108	Verifies the given token .
2109	Create a new JWT
2110	Validate the JWT token .
2111	Create a component instance
2112	Create a descriptor for a module
2113	Starts a consul client .
2114	Middleware to handle servers
2115	Middleware
2116	Select a single category
2117	Event handler for the selected state
2118	A Service .
2119	A Characteristic characteristic
2120	Migrate the given version of the given schema
2121	Migrate the given version to the database .
2122	Takes an object and normalizes it into an object .
2123	Validates the schema of the given schema .
2124	List all records in the given storage .
2125	Takes a compound key and normalizes it into a single object .
2126	Iterate over a cursor iteration .
2127	Handle cursor iteration .
2128	Fetch all records for the given object .
2129	Fetch all records in the given object .
2130	Write data to a file
2131	Run a transaction with an object store .
2132	Convert a cursor direction to a native cursor direction .
2133	Create an index
2134	Fetches the next page in the given storage .
2135	Execute an event listener .
2136	Resolve the state of the given state
2137	Run a query .
2138	Inserts a sorted record into a sorted array .
2139	Returns the insert index of the given record .
2140	Prepare query for the given query
2141	Prepare the sort order to sort the sort order .
2142	Prepare the filter function for the given storage .
2143	Selects the storage for the given storage .
2144	Prepares the order of the order of the given query .
2145	Open a connection
2146	Handle connection error .
2147	Execute the given schema .
2148	Split the given filterField into a single object
2149	Generate an array of field paths
2150	Set the value of the given field
2151	Get the value of the given field path
2152	Updates the given object store .
2153	Create a container element .
2154	Main section
2155	Client class .
2156	Represents a light device .
2157	Create a plain text text .
2158	Convert a JSON array into a string representation .
2159	Generate an error message
2160	Write a stream to the stream .
2161	End event handler .
2162	Remove all event listeners
2163	Handle error .
2164	Remove all files
2165	Saves the snapshot of the snapshot
2166	Get session data
2167	Create a new request
2168	Initialize a new PQP message .
2169	Constructs a new Date instance .
2170	Fetch a page from the given request .
2171	Create a new layer parameters for the given format .
2172	add csv parameters to csv
2173	add shape parameters to shape
2174	Start watcher
2175	Leafka API
2176	Create a new options object .
2177	Create a mock instance
2178	Iterate over an object
2179	Copies properties from source object to target .
2180	Creates a new instance of the given proto .
2181	Merges a property into the source object .
2182	Merges the property of the property into the destination object .
2183	Merges a property into another object .
2184	Mixin mixins .
2185	Make a directory recursively
2186	Get target revision
2187	Create a new system
2188	Link system system system .
2189	List containers
2190	Fetches the target of the target
2191	Build all targets for a given revision
2192	Load target target
2193	Deploy the target revision
2194	Deploy a revision
2195	list revision information
2196	Get a revision
2197	Compile system information
2198	commit a system
2199	Called when we ve finished
2200	Injects the application .
2201	Fix all files in the registry
2202	Find all files in a directory
2203	Load all files and directories
2204	Write the registry to the registry .
2205	build a container
2206	Find a container for a container
2207	Sets the app constrains .
2208	Create the system .
2209	Register system .
2210	Remove a system
2211	Process the component .
2212	Process the DOM element
2213	Add a child node
2214	Remove a child
2215	Adds a child element .
2216	Generate a template file
2217	Check if the system is system .
2218	Create a new repository
2219	Link system .
2220	Unregister a system link
2221	Write a file to the filesystem
2222	Get a revision
2223	Get a system definition
2224	Get revision revision
2225	Get the tag name
2226	Get the targets from the system
2227	Get revision id
2228	Returns the default config for the given base config .
2229	Find all targets in the topology
2230	Creates a new relation instance .
2231	Adds submodels to the super model
2232	Add a relation to the relation .
2233	Add an orphanation relation .
2234	Removes an orphanation relation .
2235	Create a new relation
2236	Returns a collection of collections for a given type .
2237	Get a model scope by name
2238	Get the id of the given item .
2239	Returns an object with the given type
2240	Adds a model to the collection .
2241	Creates a new relation instance .
2242	Remove a model from a collection .
2243	Checks whether this relation is a relation .
2244	Removes the relations from the relation .
2245	Sets the value of a key .
2246	Add a relation to this collection .
2247	Adds a new collection to the collection .
2248	Sets the keys of a collection .
2249	Updates a relation with a given key .
2250	Returns a serialized version of the model .
2251	Create a model from the server .
2252	X - x - x - x - x - x - x - x - x - x - x - x - x - x - x - x - x - x - x - x - x - x - x - x - x - x - x - x - x - x - x - x - x - x - x - x - x - x - x - x - x - x - x - x - x - x - x - x - x - x - x - x - x - x - x - x - x - x - x - x - x - x - x - x -
2253	Represents a bitmap .
2254	Returns an array of objects recursively .
2255	Returns an empty string representation of the given value .
2256	Calculates the length of the word .
2257	Compile the module .
2258	Throws an array of functions .
2259	Initialize a new timer .
2260	Called when the token is processed
2261	Template constructor .
2262	Creates a function that allows a function to be used to limit a limit
2263	Get the data from the program .
2264	Sets the websocket connection to the server .
2265	Make a form request
2266	Verify the incoming request .
2267	Updates the references .
2268	Manages the Dockercommand command
2269	Create a new object
2270	Prints a list of tasks .
2271	Formats a text column .
2272	Implements a gulp task .
2273	Logs a message to the console .
2274	Check if an item is a Promise
2275	Checks if a callback is a callback function .
2276	Add a race condition to the queue .
2277	Define a task
2278	Wait for a request .
2279	Set timeout timeout .
2280	Timeout handler for timeout
2281	Run a function on a given function
2282	Run a list of tasks
2283	Reset the object .
2284	Add a hook to a list of hooks .
2285	Get a tag by name
2286	Checks if a file is a list of patterns
2287	Creates a new instance of Bails .
2288	Called when the file changes .
2289	Create a remove observer
2290	Parses the property chain of the given expression .
2291	Parse a function .
2292	Parses a link expression into a string
2293	Adds references to the references .
2294	Creates a function that calls the next function in the queue .
2295	helper for assert
2296	Creates a function that binds a function to a function .
2297	Get an exception object
2298	Checks if the given token is a closing brace for the given operator .
2299	Checks whether the given token is a closing brace or not .
2300	Checks if the given token is a separator .
2301	Checks if the given token is a closing bracket or not .
2302	Define a configurable property
2303	Converts an integer to an integer .
2304	Converts a string to an integer .
2305	Creates an array iterator .
2306	Creates a promise that resolves to a promise .
2307	Creates a function executor executor executor executor .
2308	Creates a function that returns a promise that resolves to a promise .
2309	Creates a new event .
2310	Default event handler .
2311	Reports a trailing whitespace .
2312	Reports a trailing whitespace .
2313	Reports a trailing whitespace .
2314	Generate the destination point for the destination distance
2315	Retrieves the value of the given key .
2316	Get git list of git repositories
2317	Lookup the user s username
2318	Unpack a message from a message .
2319	Calculate a RSA hash for a public key .
2320	Generate an RSA key
2321	Get the command line
2322	Check if node exists
2323	install npm package
2324	Prompt to prompt
2325	Check if node is installed
2326	List all npm versions
2327	Check if the package is installed
2328	Creates an array of all elements that are passed to each element .
2329	PURE_IMPORTS_END
2330	Creates a new subject with the given value .
2331	Retrieves a value from the store .
2332	Recursively resolve references recursively .
2333	Format a string .
2334	Format an object .
2335	Export a public key
2336	Get the primary key for the primary key .
2337	Format a map .
2338	Load a URL from a URL .
2339	Merges the cache of the cache .
2340	Generate expiry for the given headers .
2341	Generate the cache headers for the given value .
2342	Determine if a time is expired
2343	Format a set .
2344	Format an array .
2345	Reset the store .
2346	Recursively convert data to json
2347	Recursively explode data into an object .
2348	Represents a subject .
2349	A User .
2350	Process the destination directory
2351	Create directory
2352	Create temporary directory
2353	update the temp folder
2354	Get the name of the file name
2355	Splits the tmp directory into a temporary directory
2356	Replace the content of the given content
2357	Create temporary directory
2358	Parse an array of tokens .
2359	Creates a new Keystone client .
2360	Find all parents of a p
2361	Finds all direct children of a given class
2362	Create a hierarchical hierarchy list of classes .
2363	Create a list of children list of classes
2364	Parses the parent class
2365	A tag .
2366	Handle an option .
2367	An error .
2368	A child relationship .
2369	A metadata .
2370	A feature set of features .
2371	Get a cookie from a cookie .
2372	Bind a function to a plugin
2373	Information about a change .
2374	Add a remote repo
2375	Push a branch to a remote branch
2376	run the child process
2377	Run a child process
2378	A comment .
2379	Watch directory changes
2380	add a directory
2381	Start watching files
2382	check directory
2383	notify if the path is notify
2384	Decorate a function .
2385	Create a mock date object
2386	Moves the current time .
2387	Create a scheduler
2388	Unscheduler .
2389	Runs scheduled scheduler
2390	Starts the gc GCG collection .
2391	Information about a name .
2392	A OAuth2 instance .
2393	Returns the value of the given value .
2394	Insert an item into another list .
2395	Validate props
2396	Event constructor .
2397	Creates a new AST object .
2398	Information about a feedback info .
2399	Represents a reservation .
2400	Information about a search .
2401	Iterates over an array .
2402	Call a function that calls a callback with the given arguments .
2403	Creates a function that calls a function on the passed function .
2404	Remove duplicates from array
2405	Creates a new unique set of elements .
2406	Base class .
2407	Memoize a pattern .
2408	multiply a queue with n times
2409	Checks to see if the node is balanced
2410	Create a new string from the given pattern .
2411	Wrap array delimiters into a string
2412	Format a character with padding
2413	Check if two arrays are equal
2414	Extend an instance of RegExp .
2415	Match a list of all occurrences of the given list
2416	Retrieves a list of objects from a source object .
2417	Produces a readable stream .
2418	Generate task tasks
2419	Returns a list of tasks for the given source
2420	Generate a list of glob patterns
2421	Converts a pattern to a list of patterns
2422	Converts a list of patterns to a list of patterns .
2423	Returns a list of patterns from the base directory .
2424	Converts a pattern group into an array of patterns
2425	Returns a list of patterns that match the given base pattern
2426	Convert a pattern to a task group
2427	Match an entry against the given pattern .
2428	Updates the files in the cache
2429	Load a file or directory
2430	Update the persisted json file
2431	Load a cache object
2432	Delete a document
2433	Sets a cache value in the cache
2434	this is the next part of the file
2435	Match files in a list of files
2436	Iterates over a list of files .
2437	Checks if a filepath is a regular expression .
2438	Determines whether a given pattern is a regular expression .
2439	Determines if a file matches the specified pattern .
2440	Iterates over an object with the given keys .
2441	Creates a function that matches the given filename .
2442	Convert a glob to a RegExp
2443	Wrap a glob pattern into a glob pattern .
2444	Creates a regular expression from a glob string .
2445	Collapse a string .
2446	Parses the given string .
2447	Split a string into a single space .
2448	Filters an array of elements from a callback .
2449	Get the extension from a string .
2450	Wrap a regular expression into a string .
2451	Converts a given pattern to a regular expression .
2452	Copies a value into a single object .
2453	Advances to the next char .
2454	Creates an instance of sourcemap .
2455	Compares a mapping to the given position .
2456	Compares a mapping to a list of positions .
2457	Computes the source url for the given source map
2458	Corker request .
2459	Clears a buffer .
2460	Node constructor .
2461	Appends a value to an array .
2462	Initialize a new Parser instance .
2463	Throw an error .
2464	Process a compiler .
2465	Parses the given AST .
2466	Initialize Parser .
2467	Add a parser to the parser
2468	Adds a token to the stack .
2469	Removes the specified type from the stack .
2470	Returns the last node of the given node
2471	Parse the given string .
2472	Create a new set of tokens .
2473	Evaluate the next token .
2474	Parses the given token .
2475	Parse the input string .
2476	Mixin helper .
2477	End a UTF8 string .
2478	Convert range to regexp
2479	Add a function to a function .
2480	Wrap a plugin with the given type
2481	Creates a function that memoizes a memoized function .
2482	Creates a new instance of the given object .
2483	Create a sub - register
2484	Register a directory recursively
2485	Convert a container to a container
2486	Get list of files
2487	read directory structure
2488	Converts the given attribute name into an attribute .
2489	Generate commands from the origin container .
2490	The main class .
2491	Creates a new scheduler .
2492	Set the pattern to the pattern .
2493	Reset the pattern
2494	Create a new instance
2495	Register a handler
2496	Creates a function that returns a function that will call this function .
2497	Execute a set of arguments .
2498	Trigger a set of objects .
2499	Creates a new promise .
2500	Creates a function that will call this function .
2501	Represents a Promise .
2502	This function is called when a listener is done .
2503	Constructs a new decoder instance .
2504	Create CSS rule
2505	Create breakpoints
2506	Destroys the definition
2507	Loads the configuration from the config file
2508	Save the config file
2509	Get server options
2510	Get all resources
2511	Format an object with a url
2512	Checks whether a ray is a ray .
2513	Get the scope URL for a particular time
2514	Fetch a fetch from the server
2515	Create a new instance of methods
2516	Get parameter names from a function
2517	Get the list of changed properties
2518	Updates the current instance .
2519	Finds an element by selector .
2520	Process a sub - template .
2521	Generate a function for the given parameters .
2522	Calculates the value for the given index
2523	Update node color
2524	Update the main control box
2525	Center the graph of the graph
2526	Check if all nodes are visible
2527	Fills all related nodes in the graph .
2528	Finds an element by name
2529	Get the coordinates of an element
2530	Get svg element
2531	Hides the context menu for a node
2532	Returns true if two nodes are connected
2533	Click handler for the control
2534	Update the level of the control
2535	Handles the control menu .
2536	Handler for click events .
2537	Handles the mouseover event .
2538	Zoom to the graph
2539	Show node context menu context
2540	Called when the node is clicked
2541	Triggered when a node is clicked
2542	Triggered when a node is active
2543	Resize the graph
2544	Calculates the animation
2545	Recursively recycle the graph
2546	Reverse links to the graph .
2547	Update menu items
2548	Updates the visibility of the control .
2549	Updates the height of the table .
2550	Returns the zoom level of the node .
2551	Get window width
2552	Initialize the CSS test
2553	Default success handler .
2554	Default error handler .
2555	Create a new request
2556	Create an http server
2557	Create a server instance
2558	Attach an event listener to an element
2559	reply .
2560	Serves a git file
2561	Process a list of files in a directory
2562	Package module .
2563	Ebusbus .
2564	Api client .
2565	Gets the first index of the given value .
2566	Get a scope for a division
2567	Customizer .
2568	Creates a copy of an object .
2569	Format a message with default options .
2570	Copy a directory to another directory
2571	Extracts a zip file from a zip file .
2572	Copy a tarball to a directory
2573	Extract a tarball from a tar file
2574	Make a directory
2575	Iterates over a fabricator and returns a fabricator .
2576	Readorators from filepath
2577	Creates a function that iterates over an object .
2578	Check if a file is a function
2579	Checks if value is empty .
2580	Called when the menu is clicked
2581	Creates a new shell stream .
2582	Constructor for a new class
2583	Extend this object with another .
2584	Encode binary data into a string
2585	Generate a hash for a property
2586	Create a new instance of the component
2587	Convert a buffer to a buffer .
2588	Streams a readable stream .
2589	Called when the file changes .
2590	Initialize a new Agent .
2591	Logs an event to the agent list
2592	Logs the execution of an event
2593	Report an event
2594	Get scope url
2595	The article translation .
2596	A macro action .
2597	Map object properties to object
2598	Returns a promise that resolves to a list of promises .
2599	DEPRECATED
2600	Gets the index of the given primitive .
2601	This function is called when a promise is done .
2602	Add a new file to the list of files
2603	Add multiple forms to the batch .
2604	Parse a JSON string .
2605	Get a scoped url
2606	Initialize a new WebSocket connection .
2607	Returns the first index of the first element in the array .
2608	Recursively write the given path to the tree .
2609	if the main files exist in the main directory
2610	Constructs a new object
2611	Adds an object to the polynomial
2612	Generate a list of items
2613	Get a property name
2614	Apply all the objects recursively .
2615	Generate a JavaScript object .
2616	Generate the factory for the given index .
2617	Create a function that can be used to create a function that can be used to create a function that can be used to create a function .
2618	Returns a string representation of this object .
2619	Gets the value of an object .
2620	Client constructor .
2621	Implementation of ImageLoader .
2622	Load all images
2623	Load image
2624	Convert images to images
2625	Sort all images
2626	Builds a function that returns a function that returns a function that will return the default value for the given environment variable .
2627	validate id
2628	Get an array of duplicates
2629	Set a function to call the function
2630	Set a callback
2631	Initialize a new Case .
2632	A resource .
2633	Creates a new resource container
2634	Get all content of the container
2635	Get the contents of a chunk
2636	Make a container
2637	Opens a container container
2638	Open a resource container
2639	The UserPreferences instance .
2640	Creates a new updater instance .
2641	Update the AST node
2642	Get the node of a comment node
2643	Returns a string representation of the line number .
2644	Create a new macro instance .
2645	Sorts an array .
2646	Calculates the pivot pivot .
2647	Partition the pivot partition .
2648	Sorts an array .
2649	Search for a page
2650	Create a pipe stream to a pipe
2651	Wrap child methods on child process
2652	Connect to stdout events
2653	Adds event handlers to the pipeline .
2654	Resolve the given route path
2655	Builds a function from a resource
2656	Get the API key for the current application .
2657	Get a resource
2658	Sign a message
2659	Hash a message
2660	Adds signature headers to HMAC object
2661	Wait for a given variable expression
2662	Wait until an element has been specified
2663	Set the current view
2664	Hide the current view
2665	Recursively merge two objects .
2666	Parses the value of a string .
2667	Get the brightness of a hexadecimal color .
2668	Check if command exists
2669	Executes a promise
2670	Initialize the dynamic list
2671	Change all versions of the current version
2672	Adds an article settings object to an object
2673	Render an article
2674	Renders an article
2675	Load google fonts
2676	Sort an array of elements by order by order by sorting the order by order .
2677	Returns a function that returns a new node with the given filter .
2678	Get the model from the scope
2679	Get the url for the parameters
2680	Process node expressions
2681	Create an application .
2682	Enable chai .
2683	Create a new Company .
2684	Infer the type of an AST node
2685	Returns an array of candidate candidates for a given node .
2686	Finds the reference of a given node .
2687	shutit server
2688	Transforms the input data into a JSON object .
2689	Convert a string to a number .
2690	Calculate colgroup
2691	Determines whether the given string is valid .
2692	Checks whether a node is a call expression .
2693	Subscribes a listener to an event
2694	Create a git repository .
2695	Calculate public key from public key
2696	Calculates the probability of the public key .
2697	Set the permissions of the user .
2698	Sets the permissions of the user .
2699	Implements the DAO implementation .
2700	Initialize a new Model .
2701	Creates a new Model instance .
2702	Create a model proxy for a model
2703	Get a value from a model
2704	Detect destination type
2705	Generate random color
2706	Iterates over each color in the map
2707	Retrieves the color of the image
2708	Set a color
2709	Convert the image to a buffer
2710	Convert the image to a buffer
2711	Convert image to base64
2712	Finds the deepest depth of an array
2713	Creates a new phantomite instance .
2714	Get the ignore path
2715	Render the input
2716	Calculates the color of the selected field
2717	Render an error message
2718	Performs a GET request .
2719	Updates the content of a given URL .
2720	Iterates over the properties of the input object .
2721	Create a YAML type for a given type .
2722	Read a YAML file .
2723	Load a theme
2724	Load a theme
2725	Write a directory to the destination directory .
2726	Initialize the options
2727	redis . js
2728	Reduce a string to a redis .
2729	Returns a string representation of a map .
2730	Converts an object into a JS object .
2731	Parses the given value .
2732	Generate a unique guid
2733	Returns a string representation of an object .
2734	Generate an array of nested arrays .
2735	A REST response object .
2736	Iterates over the given map .
2737	Registers a new component .
2738	Returns a widget instance
2739	Router function
2740	Serialize a DOM node .
2741	Get the value of an attribute .
2742	Initialize a new EventSchema .
2743	Add a list oforters .
2744	Sets an array of sorts by the given index .
2745	Removes the given list of rules .
2746	Returns the index of the first item in the array .
2747	Sets the value of an attribute .
2748	Get checked value
2749	Sets focus .
2750	Disable the input element .
2751	Set the selection range
2752	Format a date .
2753	Returns a date based on interval value .
2754	Calculates the number of days between min and min .
2755	Calculates a date based on the given unit .
2756	Get the options for a message type
2757	Parses the given message type .
2758	Create stdout handler for stdout
2759	Helper function to assign an object to the default options .
2760	Generate a list of pages
2761	Write the result to the stream
2762	Returns a function that calls the given callback with the given parameter .
2763	Checks if the currentenium server is running
2764	Install a selenium server
2765	Initialize a browser instance
2766	run mocha
2767	End session
2768	Update a job with the given result
2769	Finish grunt task
2770	Render an HTTP response
2771	Merges a value into an option
2772	Merge default options
2773	Main entry point
2774	Search objects recursively
2775	Adds a reducer to the scope
2776	Remove a configuration
2777	Replace a list of reducers with the given state
2778	Converts the given value to an integer .
2779	Writes an error message to a file .
2780	flush messages to console
2781	Read config from file
2782	Check if file is ignored
2783	Extract styles from a block
2784	Reads the preprocessing hook for the given commit .
2785	Load file plugins
2786	Removes a class from the DOM .
2787	Set the class name for the specified class
2788	Set the size of the image
2789	Get the computed style of a CSS property .
2790	Sets the value of a CSS property .
2791	Returns the viewport size of the element .
2792	Determines whether the given CSS property is a CSS property .
2793	Prints a counter to the console .
2794	Encodes a string into a string .
2795	Decodes a string into a string .
2796	Generate a random number
2797	Convert a request to a header string
2798	Convert the signature to a base string
2799	Generate a signature for the application .
2800	Sets the values of the values of the values .
2801	Get the value of the slot .
2802	Adds translations to the given locale .
2803	Updates the buttons in the list .
2804	Removes the buttons from the buttons
2805	Set the value of the record
2806	RPC RPC method
2807	Channel constructor .
2808	Creates a function that takes a function and returns a promise .
2809	Extracts the description from a string .
2810	Adds a comment to the given position .
2811	Checks the given keyword .
2812	ECMA - 262 12
2813	Parses a property expression
2814	ECMA - 262 13
2815	ECMA - 262 13
2816	Reverses an AssignmentPattern .
2817	ECMA - 262 13
2818	ECMA - 262 13
2819	Extend a new object with properties
2820	Refreshes the text of the given text .
2821	Determines if a file is absolute
2822	Repeats a string to a string .
2823	Returns a unique set of unique elements .
2824	Log error message
2825	Wrap a command in a shell command
2826	Writes a directory to a directory
2827	Create a directory recursively
2828	Splits a path into an array
2829	Updates the stdout of the console .
2830	Returns a string representation of arguments .
2831	GTPTPTP file
2832	Constructor .
2833	Represents a command .
2834	The base implementation of _ .
2835	Gets the next token of the given token .
2836	Identify an identifier
2837	Parse destructor
2838	Asserts that the value is a string .
2839	Check if provided object is an object .
2840	Run a command
2841	Eat n arguments
2842	Set a config file
2843	extend aliases
2844	Check if a key is set
2845	Guess type type .
2846	Get the width of the table
2847	normalize aliases
2848	Returns a default value for the given value .
2849	Find attribute value
2850	Get an array of passport objects
2851	write a string to a file
2852	Create a directory
2853	Check if a path is empty
2854	Defines a database .
2855	Redirect to the previous action .
2856	Creates a GRL request .
2857	Handle an error response
2858	Splits a header into a header string .
2859	Scrolls to the given position .
2860	Scrolls to the viewport .
2861	Scrolls to the given position .
2862	Initialize a new instance .
2863	Add action to list of actions
2864	Creates a new pattern with the given length .
2865	Upload a file to the server .
2866	Download a remote file
2867	Filters the filter .
2868	Iterates over each item .
2869	Iterates over a collection .
2870	Removes an item from this collection .
2871	Remove all items from this collection .
2872	Returns the index of the item in this collection .
2873	Returns true if the given item is contained in this collection .
2874	Returns a copy of this array .
2875	Returns the index of the item in the list
2876	Returns a copy of this collection .
2877	Updates the month title of the month
2878	Set the title of the given year
2879	Calculate the year of the month
2880	Returns an object for the calendar field
2881	Returns true if the user is visible
2882	Returns the text of the back button
2883	Return a phantom element
2884	Metalsmith plugin .
2885	Default map function to default headers
2886	Schedule a job .
2887	Defines a validator .
2888	Undefine a validator
2889	Checks if the given value is valid .
2890	Get all the names of all types
2891	Check if the given comment is valid .
2892	Get the value of a path .
2893	Load the settings from a config object .
2894	Returns the size of the CSS unit .
2895	Serialize the form of a form
2896	Returns the document width of the viewport .
2897	Returns the orientation of the viewport .
2898	Initialize a new observable .
2899	Initialize the start event .
2900	Compare two arrays .
2901	Compares two arrays .
2902	Convert a json object into an object .
2903	Sorts an array according to the given comparator .
2904	Sort the items by the given mapping .
2905	Apply a function to a function .
2906	Detects a device class
2907	Detects window width .
2908	Create a CSV file
2909	Insert an array into an array .
2910	Remove a model .
2911	Remove a model from the collection .
2912	Checks if the current path is root .
2913	Fetch the template data from the given view .
2914	Clears the template cache .
2915	Clears a template from a template .
2916	Clears the view s template cache
2917	Returns a copy of the cache object .
2918	Create a template cache for the given template .
2919	Updates the data data for the given element .
2920	Adds a namespace alias to the cache
2921	Checks if the given error is an error .
2922	Create a custom error type
2923	Returns a function that will call the handler for the given name .
2924	Execute a command .
2925	Bind events to an event
2926	Iterates over an array of events
2927	Add a callback to the callback .
2928	Swap the viewport .
2929	Empty the current view
2930	Add regions to regions .
2931	Adds a region to the specified region .
2932	Remove all regions .
2933	Remove a region from this region .
2934	Load a template .
2935	Returns the compiled template .
2936	Render a template with the given data .
2937	Returns a copy of the target object .
2938	Binds events to the model s behaviors .
2939	Override default behavior to delegate events
2940	Unbinds events from a view .
2941	Destroys the instance .
2942	Initialize the ui bindings .
2943	Trigger a method on a view .
2944	Returns an array of nested views .
2945	Serialize a collection .
2946	Render the template .
2947	Binds events to the collection .
2948	Adds a child view to this collection .
2949	Reverse the view .
2950	Renders the collection .
2951	Add children to this collection .
2952	Returns a sorted array of models .
2953	Renders an empty view .
2954	Adds a child view to this collection .
2955	Add a child view .
2956	Render a view
2957	Create a new child view
2958	Remove a child view .
2959	Create a documentFragment fragment .
2960	Insert a child view into the collection .
2961	Adds a child view to the current view .
2962	Destroys the view .
2963	Remove all child views
2964	Binds events to the collection .
2965	Serialize a model .
2966	Renders the view .
2967	Render the template .
2968	Initialize a new region .
2969	Renders the regions in the regions .
2970	Destroy the region
2971	Add regions to regions
2972	Sets regions to regions .
2973	Initialize the region manager .
2974	Returns the default behavior for a given key .
2975	Parse a list of behaviors .
2976	Set trigger handlers for the given behavior .
2977	Adds a trigger trigger to a view .
2978	Handler for the route
2979	Create a module instance
2980	Set regions to regions .
2981	Initialize region manager .
2982	Initialize the radio methods
2983	Stop the module
2984	Adds a module to the given app .
2985	Adds a module to the parent module .
2986	Get a function name from a function
2987	Get the path of the path .
2988	Moves the specified entry in the specified directory .
2989	Get the parent directory
2990	Get the directory recursively
2991	Retrieves the file system .
2992	Write a file to the specified file .
2993	Returns an array of sorted keys .
2994	Recursive function
2995	Creates a new cache cache .
2996	Creates a function that applies a function to the first argument .
2997	Creates a new HTMLElement .
2998	Create a template for a template .
2999	Returns the template for the given template language .
3000	Define a Model instance
3001	A Model .
3002	Create a new point
3003	Changes the tab bar to the current tab
3004	Constructs a new Point instance .
3005	Find the line segment from a line segment
3006	Initialize a new socket socket .
3007	Timeout timeout callback
3008	Get the width of a string .
3009	Copies files from source to destination .
3010	Copy file to destination directory
3011	Add properties to the tracked object
3012	Add methods to the tracked object
3013	Returns a list of properties for an object
3014	Internal method to synchronous synchronously
3015	Set the content of the specified block .
3016	Returns a copy of this object .
3017	Clones this node .
3018	Initialize a block if it exists .
3019	Create a block element
3020	Custom accessor functions
3021	Wraps event handlers for the given object
3022	Create accessor for accessors .
3023	Updates the accessor of the accessor .
3024	The lifecycle listener .
3025	Handle lifecycle .
3026	Remove all properties from an object
3027	Convert a hash to a hash
3028	Convert hash to camelcase
3029	Returns an array of properties for the given hash
3030	Execute a list of selectors
3031	Checks whether a given component is a component .
3032	Decorates a list of intervals that are connected to the server
3033	Execute a SQLTransaction .
3034	Returns an object with the given index .
3035	Create a new payload
3036	Check if the given array is valid .
3037	Assign properties to a parent object .
3038	Compares two nodes .
3039	Returns an array of nodes that are contained in the tree .
3040	Request a file system .
3041	Sends an operation to the given operation .
3042	Check if field exists
3043	Create a project folder
3044	Prepend options to watch
3045	Applies filters to the given index .
3046	Remove all filters
3047	Creates a wrapper function that returns the result of the result object .
3048	Returns a function that checks the result of the given function .
3049	Initialize a new instance .
3050	Sanitize double quotes
3051	Constructs a new Property .
3052	Create a new id
3053	Parse selectors
3054	Check if type exists
3055	validate fields
3056	Check if type exists
3057	Check a child relationship
3058	Get an object for a specific type
3059	Convert a single result into an array of records
3060	Returns true if the given object matches the given object .
3061	Add a list of contents
3062	adds top - level list to top - bottom
3063	Create a new action .
3064	Respond to the transaction .
3065	Called when a transaction is received .
3066	Get a transaction from a transaction
3067	Calls a method on a transaction .
3068	Transform a transaction object into an object
3069	Send a transaction
3070	Send a call to the queue
3071	Called when a form is received
3072	Performs a single POST request
3073	Fix inline block
3074	Stores plain text files in the specified directory .
3075	Determines whether the webpack executable is installed .
3076	Initialize a new Route .
3077	Decorates a Telemetry transport .
3078	Get a random value
3079	Returns an array of random numbers .
3080	Response constructor .
3081	Set the response body .
3082	Send a response .
3083	Set header value
3084	Parses the response .
3085	Validates the given arguments array .
3086	Checks to see if the given arguments are expected .
3087	Checks to see if there is an error .
3088	Checks whether the given argument is an array .
3089	Counts the number of occurrences of the expected value .
3090	Counts the number of occurrences of the given value .
3091	Returns an error message .
3092	Throws an error if value is an error .
3093	Returns true if the given type is valid .
3094	Returns the type of the given value .
3095	Get the name of a type
3096	Appends the request parameters to the request .
3097	Get a state property from the given options
3098	validate a model
3099	Remove a string from a string .
3100	Attempts to render a CSS file .
3101	Validates an array index
3102	add all routes
3103	Generate a UUID
3104	Generate a random string
3105	Convert string to UInt8Array
3106	Convert a string to a Buffer
3107	Hides the backButton button .
3108	Log a message .
3109	Copy a file to the destination .
3110	Copy all files in the given directory
3111	Replace the given file with the given path .
3112	Unlinks all files in the given location
3113	Validates a directory
3114	Checks if a file exists
3115	Returns an array of subdirectories with the given base directory .
3116	Resolve path to absolute path
3117	Returns a list of directories that match the given directory
3118	Comparator function for sorting
3119	Reduce all directories to a directory
3120	Hide the menu
3121	Navigate to the menu
3122	Hides the left side of the menu .
3123	Hide the menu from the left side .
3124	Shows the specified menu .
3125	Initializes a filesystem .
3126	Get the hierarchy of the hierarchy
3127	Get the list of configs
3128	Get a config for a backend
3129	Get a file from a backend
3130	Save a file
3131	Get the overrides of the given backend
3132	Execute callback
3133	helper to handle errors
3134	Get the rootor for the root .
3135	Determine if array is in array
3136	Remove relative path
3137	Get ajquery object from a string
3138	Initialize a new tab .
3139	Convert an object to a string
3140	Get the anchor position of an element .
3141	Iterates over each item in the collection .
3142	Get a file entry
3143	Compares the text content of the given element .
3144	Initialize the container .
3145	Initialize the container
3146	Get a list item by index
3147	Create a script
3148	Loads a script at the given url .
3149	Read a partial file
3150	Write the data to the record .
3151	Add a provider
3152	Get a provider from the provider .
3153	Initialize the application .
3154	Get a controller instance
3155	Adds an item to the DOM .
3156	Removes an item from the list .
3157	Removes all items from the list .
3158	Set the active item .
3159	Returns all items in the list .
3160	Determine if the input element is selected
3161	Convert a number to a number
3162	Returns the value of the given value .
3163	Reverse the given value
3164	Log logger
3165	Recursively convert object to object
3166	Middleware .
3167	Define a route
3168	Get the URL for a resource .
3169	Create a new password hash
3170	Create a query string for the given object .
3171	Decorate a node
3172	Update the current node
3173	Removes a node from the DOM .
3174	Destroy this node .
3175	Destroys all child nodes
3176	Inserts a node into another node .
3177	Remove this node from this node .
3178	Remove all child nodes
3179	Sorts the children of this node .
3180	Expands the node in the tree
3181	Collapse the tree .
3182	Add the next function to the queue .
3183	Create a mask element
3184	Generate id for an element
3185	Copies properties from source object to destination object .
3186	Destroys a DOM node
3187	Adds an action to the specified action .
3188	Deprecate a property
3189	Create a new Store instance .
3190	Node .
3191	concatenate array
3192	Configure the redux store .
3193	Create a new observable instance
3194	Initializes the DragDrop instance .
3195	Get a relative path from a root
3196	Rebuild a relative path
3197	Tries to lookup the given level .
3198	Logs a console .
3199	Checks if a path is an identifier
3200	Replace a value in a node .
3201	Check if required node is required
3202	Accepts an array of items in an array .
3203	Execute a compiled function .
3204	Reduce the children of the given record .
3205	Creates a new Node instance .
3206	Add a promise to the queue
3207	Run the next item in queue
3208	Remove all queued tasks from queue
3209	Set new record
3210	Returns an array of all fields in the container .
3211	Returns the currently focused field
3212	Returns true if the given point is within the given point
3213	Execute a command sequence
3214	Replace all references in the given ast
3215	Generate a unique name
3216	Replace class declarations with class names .
3217	Parse variable declaration
3218	Initialize a new Item .
3219	Initialize a new handler .
3220	Binds events to a given element .
3221	Draw the pattern
3222	Returns a function that returns the value of the given array .
3223	Initializes a new DOM element
3224	Set the value of the data
3225	Returns an array of all parents of this model .
3226	Get a model by index
3227	Returns the first ancestor that matches the given predicate .
3228	Get the value of a path .
3229	Get the data of the given dataset .
3230	Generate a random token
3231	Create a new reset password
3232	Send a password to the user .
3233	Sort issues sorted issues .
3234	Determines a list of identities .
3235	Extract the sub - task number of tasks from a super task
3236	Formats the issues of issues into a list of issues .
3237	Merge issues with issues with issues
3238	Creates a new Spinter instance
3239	Creates a callback function that will return a callback that will be called when the callback is returned .
3240	List available adapters
3241	Reads a config file from an adapter
3242	Write a config file to the adapter
3243	Render all files
3244	Handles the translations of the given locale .
3245	Get the context for the given context
3246	Render the index
3247	Checks whether a node is a named function .
3248	Determines whether a given node is a boolean or not .
3249	Checks the parentheses for a function node .
3250	Applies the configuration to the config object .
3251	Binds an event emitter .
3252	Sets the specified delay .
3253	Process an operation .
3254	Handle an error .
3255	Get the URL for the given request .
3256	Update the date format .
3257	Select the picker
3258	Returns a copy of an object .
3259	Initialize a new importer .
3260	Initializes the component .
3261	Removes a class from the specified class
3262	Hide the control .
3263	Show the visible component .
3264	Set the size of the image
3265	Aligns the component to the specified component
3266	Returns true if the specified element is aligned to the current element .
3267	Set alignment info
3268	Returns the nearest ancestor of this node .
3269	Destroys the component .
3270	Navigate to the tree
3271	Backward back to the last node
3272	Go to the given node .
3273	Hoist all functions in the given program .
3274	Parses a vehicle id from an item
3275	Formats the details of the details object .
3276	Get an object by id
3277	Checks to see if the device is successful
3278	Purchase the product of a device .
3279	Called from the API
3280	Construct a new key
3281	Apply a function to a given function .
3282	Trigger a checkbox
3283	Get all values
3284	Checks if all fields are checked
3285	Refresh the store
3286	Process a query string
3287	Creates a new instance of the user .
3288	Initialize a new Collection .
3289	Finds the first item in this collection .
3290	Initialize a new instance .
