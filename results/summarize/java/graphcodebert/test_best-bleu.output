0	Emit a value to the queue .
1	Wrap an ObservableSource .
2	Returns a stream that contains all the elements in this sequence .
3	Observes a ConnectableObservable .
4	Creates a new processor with the specified capacityHint .
5	Creates a new processor .
6	Try to subscribe a single value to a single Publisher
7	Creates a sequence that maps a scalar value to a Publisher
8	Reset all handlers .
9	Creates a Maybe from a Completable .
10	Creates a Maybe from a single source .
11	Retries a retry of a given number of times .
12	Throws a NullPointerException if the object is null .
13	Gets the identity function .
14	Converts a value to a Callable .
15	Creates a function that returns a single value .
16	Creates a cast function .
17	Creates a new reusable subject .
18	Creates a new unicast subject .
19	Create a new subject with capacityHint .
20	Creates a reusable subject .
21	Gets an error .
22	Waits until there is an error or throws an exception .
23	Waits for the task to complete .
24	Drains the max loop .
25	Requests that a subscription has been requested .
26	Called after completion .
27	Completes the current value .
28	Returns the value of the property .
29	Returns the value associated with this notification .
30	Validates the given Disposable .
31	Atomically sets the next AtomicReference to the given AtomicReference .
32	Validates an upstream subscription .
33	Atomically sets the AtomicReference to the next AtomicReference .
34	Cap a long
35	Multiply a long value .
36	Atomically adds the given number to the available slot .
37	Converts a Throwable to a NullPointerException .
38	Adds an element to the tail .
39	Shutdown the purge thread .
40	Create a scheduled thread pool .
41	Sets the subscription .
42	Loops through the queue .
43	If the given error is a RuntimeException it will be wrapped in a RuntimeException .
44	Flatten the given exception into a list .
45	Throws an exception if the given type is an exception .
46	Clears all resources .
47	Returns the number of resources in this channel .
48	Try to apply a scalarX map to an ObservableSource .
49	Creates an Observable that maps a value to a scalar value .
50	Accepts a notification .
51	Accepts a notification .
52	Starts the producer .
53	Start the queue .
54	Inserts an element into the queue .
55	Returns the disposed resource .
56	Completes the stream .
57	Indicates that this task has completed .
58	Terminates the task .
59	Concatenates a sequence of items to a Stream .
60	Concatenate a sequence of elements using the provided function .
61	Returns a sequence of the elements in this sequence .
62	Await for the consumer
63	Request a number of bytes from the stream .
64	Adds a subscriber to the queue .
65	Removes the subscriber .
66	Observes a connectable flowable .
67	Parses the annotations for a method .
68	Sets the delay in milliseconds .
69	Creates an error response .
70	Calculate the delay in milliseconds .
71	Generate sample data for a given username and password .
72	Returns the HttpMethod instance of the given method .
73	Search for a user .
74	Encodes the given raw password .
75	Checks whether the given raw password matches the given encoded password .
76	Perform version checks .
77	Determines whether checks should be disabled .
78	Gets the spring - core version .
79	Set attribute exchange configurationurer .
80	Configure the OAuth2 client configurationurer .
81	Configure the OAuth2 resource server configurationurer .
82	Registers a channel request matcher for this application .
83	Compare dn with specified value .
84	Retrieve an entry by its attributes .
85	Searches the parameters for a given filter and returns a set of values .
86	Performs a search for multiple LDAP attributes .
87	Search for a single entry .
88	Builds a new search control .
89	Lookup a list of parent ACLs .
90	Builds a WebAuthenticationDetails object from J2EE roles .
91	Creates the embedded server definition .
92	Create servlet filter .
93	Creates the jaas filter .
94	Creates a new type resolver builder .
95	Registers the spring security filter chain .
96	Returns a token for the given series id .
97	Returns a list of authorities for the user .
98	Returns a new cipher instance .
99	Asserts that all required properties are set .
100	Checks whether a security context is required .
101	Checks whether the pre - authenticated principal has been changed .
102	Performs the authentication process .
103	Checks the content length .
104	Maps a collection of authorities to a set of authorities .
105	Set login processing URL
106	Update the authentication defaults .
107	Updates the access defaults .
108	Maps the given value to a string .
109	Extracts a cookie from the request .
110	Encode a cookie .
111	Sets a cookie .
112	Resolves an argument .
113	Get the query string from the given pattern .
114	Gets the service port .
115	Returns the principal of the authenticated user .
116	Deletes the current session .
117	Authenticate a user .
118	Builds a provider URL from a list of server URLs .
119	Sets the context environment properties .
120	Returns the redirect URL .
121	Render the Ui suffix .
122	Initialize the user details service .
123	Gets the UserDetailsService .
124	Adds the pkce parameters .
125	Determine if the request requires authentication .
126	Checks whether a ticket request requires authentication .
127	Proxy ticket request .
128	Checks if the current user is authenticated .
129	Determine whether a proxy request should be configured .
130	Create a method security expression root .
131	Gets the JWK set .
132	URL encode a string .
133	Get a collection of authorities based on the current user .
134	Load user by assertion .
135	Extract the Principal from the current thread .
136	Concatenates multiple byte arrays into a new one .
137	Creates a portion of a byte array .
138	Get a list of authorities for the given attributes .
139	Pre - process the map .
140	Returns a collection of granted authorities .
141	Adds a granted authority to the result .
142	Extract the J2EE principal from the request .
143	Gets a shared object .
144	Builds the redirect URL for the given request .
145	Invokes the interceptor method .
146	Converts a name to a role .
147	Converts a list of roles to a string .
148	Processes the auto login cookie .
149	Handle a login attempt .
150	Attempts to switch to a user .
151	Exit user .
152	Sets the redirect user URL .
153	Display the public index .
154	Spring security filter .
155	Decodes a JWT .
156	Performs authorization using the access expression .
157	Checks to see if the resource is authorized .
158	Convert a JWT to a collection of authorities .
159	Generates a CSRF token for the given request .
160	Display admin permission .
161	Display the addPermission for the given contact .
162	Add a permission .
163	Deletes a permission .
164	Returns the role with the given default role prefix .
165	Creates a UserDetailsResourceFactory bean from a string .
166	Returns the values of the specified attribute .
167	Get the value of the first attribute with the given name .
168	Encodes a CharSequence into a byte array .
169	Decodes a byte array .
170	Lookup the parameter names for a given class .
171	Adds a new contact .
172	Find config attributes .
173	Add a security method .
174	Get all ConfigAttributes
175	Checks whether the given method is a match .
176	Configures any request that matches any request matcher .
177	Handle bind exception .
178	Returns a random contact
179	Removes the authentication exception from the session .
180	Gets the field on the given class .
181	Create service url .
182	Create redirect url .
183	Extract prefix from enc pass .
184	This method is called by the application .
185	Checks the stack .
186	Returns an array of registered types .
187	Extracts the cause from a throwable .
188	Register access manager .
189	Convert a collection of authorities to a Set .
190	Compare two byte arrays .
191	Sets the default failure url .
192	Sets whether hidden inputs should be resolved .
193	Build the request URL .
194	Checks if the given URL is an absolute URL .
195	Creates an attribute list for the given identifier .
196	Extracts the identifier from the given result set .
197	Inserts entries in acl .
198	Creates an object identity .
199	Updates the object identity .
200	Saves the request .
201	Creates a matcher that matches the given paths .
202	Matches any server web exchange .
203	Returns a new decryptor with the given password and salt .
204	Creates a text encryptor with the given password and salt .
205	Creates a new encryptor that encryptor with a given password .
206	Writes the headers to the response .
207	Determine the target URL .
208	Determine the target URL .
209	Sets the target URL parameter .
210	Gets the directory with the immediate parent .
211	Build a distinguished name .
212	Creates the shared objects .
213	Loops through the login config loop .
214	Returns the current date
215	Parse a date .
216	Updates the cache .
217	Sets authentication details .
218	Determine the security name for a subject .
219	Determine the list of groups for a user .
220	Changes the password of the current user .
221	Build a distinguished name from the group .
222	Called when the session is exceeded .
223	Copy details from source to destination
224	Returns a list of chains matching the specified request .
225	Returns a list of filters for a given URL .
226	Gets the application context .
227	Returns the full dn of a given dn .
228	Sets session attributes .
229	Sets the basic authentication scheme .
230	Add filters .
231	Adds a filter for REST requests .
232	Creates a new authentication scheme .
233	Creates an authentication scheme .
234	Creates an authentication scheme .
235	Adds a proxy to the given URI .
236	Print response .
237	Return a configured config .
238	Returns the default charset .
239	Sets the default object mapper configuration .
240	Sets the object mapperFactory to use .
241	Sets the configured config .
242	Sets the session config .
243	Sets the object mapper config .
244	Sets the configured json config .
245	Sets the configured xml configuration .
246	Sets the encoder config .
247	Configure a header configuration .
248	Sets the async config .
249	Sets the mock mvc config .
250	Configure multi part config .
251	Sets the mock mvc parameter configuration .
252	Sets the configured matcher configuration .
253	Set the certificate auth settings .
254	Declare the given namespaces .
255	Declares a namespace with a namespace URI .
256	Perform a HTTP request .
257	Sets the headers for this request .
258	Sets proxy .
259	Sets the control name .
260	Sets a header .
261	Set basic auth credentials .
262	Start NTLM credentials .
263	Creates a new headers from the given header and additional headers .
264	Reset the configuration .
265	Sets request header .
266	Build the response .
267	Applies a value to the cookie matcher .
268	Matches a cookie matcher .
269	Matches an expiry date that matches the expiry date .
270	Applies a cookie matcher to the cookie .
271	Applies a path to the cookie matcher .
272	Matches a cookie that matches the secured condition .
273	Applies httpOnly condition to the cookie .
274	Matches a cookie by its version .
275	Applies a cookie filter to the response .
276	Expect a header with a given name .
277	Expect a header with the given name .
278	Expect a cookie with the given name .
279	Specify the host to use .
280	Returns a number configuration for a number .
281	Sets the default parser type .
282	Default implementation of default log configuration .
283	Enable logging of request and response if validation fails .
284	Creates an HTTP request based on the given parameters .
285	Default part configuration .
286	Add an attribute .
287	Add a header to the request .
288	Add multi part part .
289	Add additional result handlers .
290	Sets parameter .
291	Returns a new HTTP client configuration .
292	Sets the HTTP client configuration .
293	Sets the HTTP client configuration .
294	Retrieves a response from the endpoint .
295	Returns the integer value for the given path .
296	Returns the byte value for the given path .
297	Returns the Short value for the given path .
298	Gets the float value .
299	Gets the double .
300	Returns the long value .
301	Gets the content of the request .
302	Gets a map .
303	Gets the object at the given path .
304	Sets the body of the request .
305	Adds a cookie to the request .
306	Adds a parameter to the request .
307	Adds a parameter to the request .
308	Apply a form params update strategy .
309	Logs the response to the given output stream .
310	Create a new cookies .
311	Remove entries from the cache .
312	Index bindings by this level .
313	Gets a binding .
314	Converts a constant string binding .
315	Cleans a binding .
316	Remove a failed binding .
317	Gets the internal dependencies of a given binding .
318	Creates an uninitialized binding .
319	Gets all parameter injectors .
320	Binds an injector to the provider .
321	Binds the logger instance .
322	Search for misplaced binding annotations .
323	Checks whether a method overrides a method .
324	Initializes the delegate .
325	Returns the type of provider .
326	Resolve the given types .
327	Canonicalize a type .
328	Prepare the builtin converters .
329	If the given class loader is null return the same classloader .
330	Checks if the given class loader has the same version of the given class loader .
331	Returns true if the given member is a public function .
332	Fix the given key .
333	Requests that a member is injected .
334	Validates all pending injections .
335	Creates a new instance of this class .
336	Adds the dispatcher to the request .
337	Creates a scope using the specified scope .
338	Ensures that the given scoping is annotated .
339	Normalize the given path .
340	Returns annotation instance .
341	Determine whether or not the given annotation is stored at runtime .
342	Find a scope annotation .
343	Gets the binding annotation .
344	Returns the name of a key .
345	Initializes the delegate .
346	Adds a binding to the given binder .
347	Gets the constructor injector .
348	Returns true if the given interceptor has a scope annotation .
349	Creates a new RealMapBinder from the given Binder .
350	Gets the key for the given key .
351	Creates a new instance .
352	Replace the source with the original source .
353	Returns a module that contains the given module .
354	Gets the assisted methods .
355	Checks if a type is defined .
356	Returns true if the given constructor has matching parameters .
357	Returns the dependencies for the given ctor .
358	Removes the dependencies from the Dependency .
359	Checks if the given set of dependencies is valid .
360	Gets the binding from the current injector .
361	Invokes the specified method with the given arguments .
362	Creates an error message for the given key .
363	Installs a set binder .
364	Gets the key for a new item .
365	Finds the next filter .
366	Returns true if at least one inject method has an annotation .
367	Gets the injection point .
368	Gets the dependencies for this instance .
369	Returns a module for the given module .
370	Gets the annotation for the given method .
371	Gets the line number for the given member .
372	Initialize this instance .
373	Creates a continuation of the given callable .
374	Transforms a callable to a request .
375	Validate and validate the given value .
376	Gets the member .
377	Creates the members injector .
378	Gets the injectors .
379	Returns a new instance for the given type and annotation strategy .
380	Returns a strategy for the given annotation .
381	Returns a strategy for the given annotation type .
382	Removes the stacktrace from a throwable .
383	Gets the binding source .
384	Formats a collection of error messages .
385	Creates a new message with the given message format and arguments .
386	Creates a new formatted message with the specified detail message and message format .
387	Creates a new message with the given source and arguments .
388	Convert an object to an object .
389	Returns true if the given class should be skipped .
390	Gets the source code for the given module class names .
391	Main method .
392	Adds a new dependency .
393	Push a state onto this context .
394	Construct an initializable instance .
395	Creates an instance of the given provider .
396	Process a connection event .
397	Adds a connection event processor .
398	Get the result of a task .
399	Lrows an unchecked exception .
400	Register a remoting processor
401	Registers the default processor
402	Gets the processor for a command code .
403	Tries to get a cached URL .
404	Decodes the protocol code .
405	Retrieve all connections from the pool .
406	Scan all pools .
407	Gets a connection from the remote server .
408	Create a new connection and reconcile it if necessary .
409	Remove a task from the pool .
410	Healculate connection pool if needed .
411	create a connection
412	Closes a connection .
413	Called when a connection is closed .
414	Closes the connection .
415	Sets an attribute .
416	Register a user processor
417	Registers a user processor .
418	Dispatch request to user processor
419	Deserialize a request command .
420	Pre - processes a remoting request .
421	log event log
422	Debug log .
423	Process a message .
424	Perform a invoke call with a remote command .
425	Handles an invocation request .
426	Convert a bit set to a byte value .
427	Convert integer value to BitSet
428	Adds a new reconnect task .
429	Stops this heartbeat .
430	Convert a request to a remoting command
431	Filter a list of connections
432	Monitor connection pools
433	Close fresh select connections
434	Gets a system property .
435	Prints the info log at the given format .
436	Checks if the request is a request timeout .
437	Gets the user processor by class name .
438	Returns a random connection from the list of connections .
439	Gets the value of the given key .
440	Get a property value .
441	Resolve response object from remote address
442	Returns the response object .
443	Converts a ResponseCommand to a Throwable .
444	Determine the detail message .
445	Create an RpcServerException from a Throwable
446	Print the connection trace log
447	Returns a new event loop group .
448	Parse remote address from channel .
449	Returns the local address of the given channel .
450	Gets the remote IP address .
451	Get the remote host name from the channel .
452	Returns the local IP address of the channel .
453	Retrieves the remote port from the channel .
454	Get local port from channel .
455	Parse socket address to host IP address .
456	Adds a connection to the list .
457	Removes a connection from the pool .
458	Returns the current connection .
459	Registers a custom serializer for a class .
460	Gets the custom serializer for a class .
461	Registers a custom serializer for a command .
462	Gets the custom serializer for a command code .
463	Starts the connection monitor .
464	Check whether the remote peer is connected to the given remote address .
465	Initialize write buffer water mark
466	Returns a new frame for the given opcode .
467	Writes to socket .
468	Sets the code .
469	Validate the given payload .
470	Updates the payload .
471	Checks whether a given protocol is acceptable .
472	Translate length limit .
473	Translate a single frame check packet size .
474	Generate the final key .
475	Process a continuous frame .
476	Processes binary data .
477	Logs runtime exception .
478	Process a text frame .
479	Processes a continuous frame if it is valid .
480	Processes a frame if it is not finished .
481	Process a closing frame .
482	Checks the buffer size .
483	Get the payload from byte buffers .
484	Returns the total size of the buffer list .
485	Translate handshake http request .
486	Translate a HTTP client HTTP client .
487	Decode frames .
488	Sends a connection error response .
489	Sends a connection to the client .
490	Generate HTTP response for an error .
491	Send a text message to the WebSocket .
492	Resets the connection .
493	Start connect thread .
494	Returns the port of the web socket .
495	Send the handshake .
496	Sets the connection lost timeout .
497	Stop the connection lost timer .
498	Start the connection lost timer .
499	Restarts the connection lost monitor .
500	Handles a connection lost .
501	Cancel the connection lost timer .
502	Called when a websocket handshake is received as a server .
503	Sends a ping frame .
504	Stop listening for connections .
505	Returns the port .
506	Performs additional read .
507	Accepts a connection .
508	Performs a read .
509	Performs a batch write .
510	Initialize selector and server thread .
511	Ensure that the thread is started .
512	Shutdown server shutdown .
513	Gets the socket associated with the connection .
514	Broadcast data to all connected clients .
515	Broadcasts a text to all connected clients .
516	Broadcasts a message to all clients .
517	Fill the frames for a specific draft .
518	Transfer a buffer to another byte buffer .
519	Starts the entity manager .
520	Get an EntityManager .
521	Executes a transaction .
522	Converts the given arguments to a Scala buffer .
523	Wraps the given arguments if necessary .
524	Gets a localized message .
525	Gets a localized message .
526	Checks if the given language is defined in the given language .
527	Selects the preferred language .
528	Gets the preferred language .
529	Sets the language .
530	Adds bindings for the given modules .
531	Adds custom bindings for this application .
532	Sets the bindings .
533	Apply any overrides from the given modules .
534	Sets overrides for this application .
535	Sets the overrides .
536	Disable this module .
537	Execute the function .
538	Executes the request .
539	Gets an existing file at the given relative path .
540	Enables binding .
541	Convenience method for creating a tuple .
542	Static factory method for creating tuples .
543	Convert a prepared ExecutionContext to an Executor
544	Creates a default persistence configuration .
545	Creates a default JPAC configuration .
546	Creates a new instance from a map of key - value pairs .
547	Builds a string that contains a string .
548	Creates a flow that contains a JSON node .
549	Adds a constraint validator .
550	Creates a new instance of a constraint validator .
551	Gets a matching method .
552	Handles a request response .
553	Handles a bad request .
554	Handles a forbidden request .
555	Handles a notFound request .
556	Handles an error .
557	Logs an internal error .
558	Converts a throwable to a useful exception .
559	Handles an error .
560	Handles an error .
561	Creates a documentation handler based on the given files .
562	Creates a documentation handler from a directory .
563	Creates a doc handler from a directory and a jar file .
564	Creates a documentation handler based on a given directory and a jar file .
565	Creates a documentation handler from a jar file .
566	Consumes the data stream .
567	Creates an HttpEntity from content .
568	Creates a HttpEntity from a string .
569	Create a chunked entity .
570	Creates a response with the given status code and content .
571	Send a response with a status code .
572	Sets response status code with given status code .
573	Send response with given status code .
574	Reports a file status with a specific status code .
575	Find a user by id .
576	Select a language from a collection of languages .
577	Returns a unique URL that is unique .
578	Adds a fragment to the url .
579	Returns the absolute URL for the given request .
580	Returns the web socket URL .
581	Adapts a connection to a connection .
582	Returns a function that returns a connection function .
583	Creates a new server for a router .
584	Convert an object to JSON .
585	Convert a JsonNode to an object .
586	Parse the given string into a JsonNode
587	Parse a JSON document from a stream .
588	Returns the relative path between startPath and targetPath .
589	Returns canonical path .
590	Returns a list of displayable constraints .
591	Extracts a constraint from a constraint .
592	Timeout a completion stage .
593	Checks whether the given array is assignable to the given class array .
594	Parse cron expression .
595	Get next cron interval .
596	Creates an ahc client .
597	Creates a new application builder .
598	Displays a POJO .
599	Adds a string value to the session .
600	Saves a message to flash .
601	Qualify the binding key with the specified instance .
602	Returns a binding key with the specified annotation .
603	Converts this Binding to a Java type .
604	Converts this binding to a Java binding .
605	Converts this binding to a Java binding .
606	Converts this BindingKey to the given key .
607	Converts this binding into a Java binding .
608	Returns available languages .
609	Returns the preferred language .
610	Creates a new evolution reader .
611	Creates a new evolution reader for default evolution .
612	Cleans the contents of the database .
613	Load a configuration loader .
614	Loads a module loader function .
615	Loads the given modules .
616	Loads the given modules .
617	Loads the given modules .
618	Loads the given bindings .
619	Creates a new GuiceApplicationBuilder .
620	Encodes a cookie .
621	Gets the entity manager .
622	Gets the entity manager stack .
623	Pushes an EntityManager to the stack .
624	bypassing a pipeline .
625	Properly bypass the pipeline .
626	Create a sequence of actor ref .
627	Convert error arguments to an empty list .
628	Fills the form with the given value .
629	Gets the validation errors .
630	Returns the errors as JSON .
631	Returns the value associated with the given key .
632	Fill the content with the given value .
633	Parses the given text into a typed object
634	Parses the given text .
635	Print object .
636	Prints a type .
637	Print a value to a string .
638	Register format converter .
639	Register a formatter for a given class .
640	Register a formatatter for an annotation .
641	Encodes a cookie .
642	Get a list of nodes matching the given path .
643	Converts a list to a Seq .
644	Converts an array to a Seq .
645	Creates a varargs from an array .
646	Accepts a JSON input stream .
647	Creates a WebSocket .
648	Check if the given object is accessible .
649	Returns the cost of a primitive promotion .
650	Calculate the total transformation cost for the given executable arguments .
651	Returns the cost of the object transformation .
652	Gets the message at the specified language .
653	Gets the message for the given list of messages .
654	Creates a new database using the default driver configuration .
655	Create a new ParallelSorter .
656	quick sort algorithm
657	Performs a merge sort .
658	Invokes the method .
659	Cast a numeric type
660	Load an argument at the given index .
661	Emit a field instruction .
662	Add zero or null to the stack .
663	Unbox the current value .
664	Process an array .
665	null if null is null
666	Resolves all registered bridges .
667	Retrieves a list of methods from a superclass and interfaces .
668	Filters all constructors in the given class .
669	Sets the superclass .
670	Get a field .
671	Adds a method .
672	Returns the cardinality of the value
673	Sets the naming policy .
674	Finds methods matching the given names and descriptors .
675	Resolve a child path .
676	Reads a string from a file .
677	Sets the host of the request .
678	Creates a new request with the specified method and destination .
679	Create a CONNECT request
680	Create a GET request
681	Create a POST request
682	Create a new PUT request
683	Create a PATCH request
684	Create a DELETE request
685	Create a HEAD request
686	Create a TRACE request
687	Create a OPTIONS request
688	Sets the path .
689	Sets the cookies header .
690	Add a query parameter .
691	Add a query to the map .
692	Sets the query string .
693	Returns the query string .
694	The host url .
695	Sets basic authentication header .
696	Sets the host header .
697	Builds the request .
698	Send a request and receive a response .
699	Removes a range of ranges from a range .
700	Returns the length of the exception table .
701	Collects all action interceptors .
702	Collects the action filters .
703	Collect the action results .
704	Collects all action runs .
705	Sets a simple property .
706	Returns the value of the specified property .
707	Extract the reference from the property name .
708	Gets the writer .
709	Sets an object reference .
710	Get object reference by name .
711	Lookup an object reference .
712	Returns the descriptor for the given table reference .
713	Finds a table descriptor by column ref .
714	Gets the table alias .
715	Register a table reference .
716	Lookup a table reference .
717	Registers a hint .
718	Serialize a single value .
719	Inject attributes .
720	Inject parameters .
721	Inject uploaded files .
722	Convert property name to column name .
723	Convert column name to property name .
724	Converts a column name to column name .
725	Stores the value at the given index .
726	Prepare get value .
727	Gets all wrappers .
728	Resolves a wrapper class .
729	Creates a new wrapper .
730	Convert path separators to system path .
731	Gets the path .
732	Splits a filename into parts .
733	Relative path function .
734	Register a custom class
735	Sets the action config .
736	Starts the war .
737	Configure defaults .
738	Registers adoc components .
739	Excludes given jars .
740	Include the given jars .
741	Include entries .
742	Excludes entries .
743	Scan a jar file .
744	Scans classpath for classes .
745	Returns the signature of a class .
746	Add classes to scan .
747	Starts the entry .
748	Create a new transaction .
749	Gets the default scope .
750	Gets or creates a new scope .
751	Registers the specified scope with the specified type .
752	Decodes a char array .
753	Generate a CSRF token .
754	Makes sure the token set is valid .
755	Checks if a CSRF token exists in the session .
756	Creates a bean copy from the given object .
757	Creates a copy of this bean .
758	Set property .
759	Initialize the entity .
760	Resolves a scope .
761	Registers a bean definition .
762	Register a bean .
763	Remove all beans with the given type .
764	Resolve beans for a given type .
765	Registers the specified bean with the specified parameters .
766	Registers a property injection point .
767	Registers a setInjectionPoint .
768	Registers a method .
769	Registers init methods for a bean .
770	Registers the destroy methods for the specified bean .
771	Registers a provider with the specified name and method name .
772	Registers a provider with the given name and arguments .
773	Iterate over all beans of a given type .
774	Defines the given parameters .
775	Intercept the given action request .
776	Resolve Java version .
777	Pushes an int to the stack .
778	Check that the argument index is valid .
779	Create a field name .
780	Create a method name .
781	Load special method arguments .
782	Loads the arguments for a static method .
783	Loads the arguments for a method .
784	Load a method argument .
785	Store method argument .
786	Prepare the return value .
787	Create a signature key .
788	Generate a new array .
789	Store a byte array into an array .
790	Extract encoding from content type .
791	Returns true if the given flags are empty .
792	Resolve auth bearer token from request .
793	Requests that the user has authentication .
794	Prepares a download request for a file .
795	Adds the content disposition to the response .
796	Gets all cookies with the given name .
797	Reads the request body from a reader .
798	Read request body from stream .
799	Stores the context path in the request context .
800	Stores the context path in the servlet context .
801	Checks if a parameter is a GET parameter .
802	Prepares an array of parameters .
803	Copy parameter values from ServletRequest to attributes .
804	Invokes the body .
805	Renders the body .
806	Renders the given body to a string .
807	Invokes the init methods .
808	Call destroy methods .
809	Creates a new bean instance .
810	Inject parameters .
811	Rewrite the action path .
812	Adds a header .
813	Put the value into the map .
814	Put base property .
815	Put profile property .
816	Gets the specified profile .
817	Resolve macro values .
818	Extract a map from profiles .
819	Streamtoword from a byte array
820	Hashes a password .
821	Checks if a hashed password .
822	Reads all bytes from the input stream .
823	Read bytes from the input stream .
824	Parse the action .
825	Resolves the action configuration .
826	Detects and registers an action alias .
827	Reads the action interceptors .
828	Reads the action filters .
829	Read package action path .
830	Read method action path .
831	Parses the method alias .
832	Create an action runtime .
833	Updates the response .
834	Applies an advice to the given target class .
835	Inject target into proxy
836	Visits an annotation .
837	Returns the real name of the given name .
838	Resolve a named name .
839	Lookup the TypeData for a given class .
840	Lookup the TypeData for a given class .
841	Lookup the type data for a class .
842	Resolve a name .
843	Resolve real name .
844	Returns the file content .
845	Copy bootstrap methods from input stream .
846	Sets the major version and class name .
847	Puts constant pool .
848	Puts bootstrap methods .
849	Adds a constant field ref .
850	Adds a constant method ref .
851	Adds a constant member reference to the constant pool .
852	Adds a new entry for a constant member reference .
853	Adds a constant or float or float to the constant pool .
854	Adds a constant or float entry to the constant pool .
855	Adds a long or double constant to the constant pool .
856	Adds a constant entry to the constant pool .
857	Adds a constant name to the constant pool .
858	Adds a constant name and type .
859	Adds a string to the constant pool .
860	Adds a UTF8 entry to the symbol table .
861	Adds a constant method handle to the constant pool .
862	Adds a constant method handle .
863	Adds a constant or invoke dynamic method .
864	Adds a constant or invoke dynamic or invoke dynamic method .
865	Adds a constant or invoke dynamic reference to the constant pool .
866	Adds a constant or invoke dynamic or invoke dynamic reference .
867	Adds a constant string to the constant pool .
868	Adds a constant reference to the buffer .
869	Adds a bootstrap method .
870	Adds a new type to the table .
871	Generate a hash for a name .
872	Clear all entries .
873	Returns all values with the given name .
874	Returns an iterator over the elements in this map .
875	Returns a list of all entries in this map .
876	Increases the capacity if necessary .
877	Appends a range of characters to the buffer .
878	Visit an annotation .
879	Visit the end of the method .
880	Create the first chain delegate .
881	Creates the chain delegate chain .
882	Parse a path .
883	Adds a field to the path .
884	Configure servlet context .
885	Execute the next method .
886	Returns an array of FieldDescriptors .
887	Create bean definition for registration .
888	Convert JTA transaction mode to DbTransactionMode .
889	Reads the property .
890	Adds all entries from the given map .
891	Appends a buffer to this buffer .
892	Write the objects to a writer .
893	Write the objects to the output stream .
894	Writes the content to the stream .
895	Get a value as a string .
896	Returns the Integer value associated with the given key .
897	Get a long value .
898	Get a Double value .
899	Get a float value .
900	Get a value .
901	Adds a value to the object .
902	Sets the folder .
903	Receives all messages that match the given filter .
904	Updates the flags for the given email .
905	Closes the folder if it is opened .
906	Look up a named parameter .
907	Create alias .
908	Performs the actual validation .
909	Adds a validation violation .
910	Sets the mime data .
911	Sets the download file .
912	Sets the target .
913	Sets the target class .
914	Sets the target class .
915	Processes the class .
916	Create proxy .
917	Define the target class .
918	Creates a new instance of this class .
919	Dumps the class in debug folder .
920	Adds the from address .
921	Set the recipient address .
922	Creates a new recipient .
923	Set the reply recipient address .
924	Set the recipient address .
925	Adds a text message with the specified encoding .
926	Creates a new email message with the specified encoding .
927	Sets a header .
928	Gets a system property .
929	Returns the boolean value for the given name .
930	Gets the int value .
931	Gets the long value .
932	Returns the resolved parameters for the method .
933	Serialize a key and value .
934	Lookup an alias .
935	Resolves an alias .
936	Resolve the result path .
937	Resolve result path string .
938	Gets the index of the last index of a slash .
939	Gets the last index of a dot after slash .
940	Gets the index of the first dot after a slash .
941	Strips the last letter from a name .
942	Resolve schema name .
943	Resolve column descriptors .
944	Initialize this sketch with the specified key array .
945	Calculate a mix .
946	demix y z .
947	Sets the key schedule .
948	Initialize the header with the given key message .
949	Encrypt a block .
950	Converts a byte array into a long array .
951	Removes any bounding .
952	Returns the path .
953	Zips the given file .
954	Gzip the given file .
955	Ungzip the given file .
956	List a zip file .
957	Unzip a zip file into a directory .
958	Adds a file to a ZIP output stream .
959	Adds content to a ZIP output stream .
960	Returns the field descriptor with the given name and declared flag .
961	Returns a property descriptor with the given name and declared flag .
962	Sets the request bundle name for this request .
963	Sets the session locale .
964	Gets the session locale .
965	Filters the parameters for a bean name .
966	Set profiles .
967	Gets a little - endian integer from the buffer at the given offset .
968	Reads the input stream into a byte array .
969	Returns the label for the given bytecode .
970	Reads the offset of a type annotation .
971	Read element values .
972	Read the verification type information .
973	Read bootstrap methods attribute .
974	Returns all constructors for the class .
975	Gets the ctor descriptor matching the given arguments .
976	Gets the request map .
977	Creates the request map .
978	Convert an array to a long array .
979	Initialize the servlet .
980	Register a file consumer .
981	Add a file to the search path .
982	Add a file to the search path .
983	Includes the given patterns .
984	Excludes given patterns .
985	Adds a file to the path list .
986	Finds all files .
987	Initialize the list .
988	Returns an iterator over all files .
989	Resolve the bean wiring .
990	Resolves the bean name .
991	Gets the output writer .
992	Gets the output stream .
993	Returns the class name for this type .
994	Returns the descriptor for a constructor .
995	Creates a method descriptor .
996	Creates a method descriptor .
997	Append the descriptor .
998	Returns the size of this array .
999	Gets the arguments and returns the size of the arguments .
1000	Mark this transaction as rollback .
1001	Commit or rollback .
1002	Rollback all resources associated with this transaction .
1003	Request a resource .
1004	Removes the name from the stack .
1005	Write a string .
1006	Writes a unicode .
1007	Writes a char sequence .
1008	Sets the logging error log level .
1009	Sets the region .
1010	Checks whether the value is contained in the value .
1011	Registers a pseudo function .
1012	Lookup a pseudo function .
1013	Visit a method .
1014	Visit an annotation .
1015	Generate the static init block .
1016	Makes the proxy constructor .
1017	Process all super classes .
1018	Returns the index of the last element in the specified range .
1019	Adds the given string .
1020	Replace ASM instructions .
1021	Collect attribute prototype .
1022	Register default types .
1023	Register a custom type .
1024	Lookup the SqlType for the given class .
1025	Lookup a SqlType .
1026	Create a proxy for SOCKS4 proxy .
1027	Create a proxy for SOCKS5 proxy .
1028	Create a HTTP proxy configuration
1029	Returns the total number of threads in the current thread .
1030	Get the total number of transactions with the given status .
1031	Associate a transaction .
1032	Continue a transaction .
1033	Lookup a resource manager for the given resource type .
1034	Creates a proxy object .
1035	Append the path .
1036	Align a string to the left and pad it to the given size .
1037	Pretty print a value .
1038	Converts a string to a camel - case string .
1039	Formats a paragraph .
1040	Convert tabs to spaces .
1041	Escape the given string .
1042	Unescapes the given string .
1043	Resolves a bean by its name .
1044	Get a bean by name .
1045	Initialize bean definition .
1046	Invokes a provider definition .
1047	Register a bean with the specified wiring mode .
1048	Sets a bean property .
1049	Gets a bean property .
1050	Shutdown the container .
1051	Resolve parameters for a given method or constructor .
1052	Render the body .
1053	Returns value .
1054	Closes this node .
1055	Creates an element node .
1056	Adds a new tag .
1057	Removes the last child node if it is empty .
1058	Returns the query string .
1059	Gets the action class name .
1060	Calculates the to index .
1061	Iterate over a collection .
1062	Iterate an array .
1063	Replaces substrings with another string .
1064	Replaces substrings with another string .
1065	Replaces the substring of a string with another .
1066	Replaces the first substring of s .
1067	Replaces the first substring of s .
1068	Replaces the last occurrence of the substring with the given string .
1069	Replaces the last occurrence of the substring with the given character .
1070	Returns the substring of the given string .
1071	Remove the given character from the string .
1072	Checks if all strings are empty .
1073	Checks if all strings are blank .
1074	To string array .
1075	Changes the first character of the string .
1076	Converts a string to title .
1077	Compress the chars of a string .
1078	Checks if startS starts with given index ignoring case .
1079	Checks whether a string ends with a given character .
1080	Returns the number of occurrences of the given substring ignoring case .
1081	Compares two strings ignoring case .
1082	Returns the index of the first non - whitespace .
1083	Strips the first character from a string .
1084	Strips the given character from the given string .
1085	Strips the given character from the given string .
1086	Strips the given character from the given string .
1087	Strips from a string .
1088	Crop a list of strings .
1089	Removes all whitespace characters from the source string .
1090	Removes all whitespace characters from a string .
1091	Returns the index of the first occurrence of a substring within the left boundary .
1092	Join a collection of objects into a single string .
1093	Join an array of objects using the given separator .
1094	Convert charset to string .
1095	Checks if the char at the given index is equal to the given character .
1096	Surrounds a string with the given prefix and suffix .
1097	Prefix a string .
1098	Suffends a string .
1099	Cut the first occurrence of the given substring .
1100	Cut from string .
1101	Cut a prefix from a string .
1102	Cut a suffix from a string .
1103	Cut the string with the given prefix and suffix .
1104	Inserts the specified substring at the given offset .
1105	Repeats a string of number of times .
1106	Reverse a string .
1107	Returns the longest common prefix between two strings .
1108	Find the common prefix .
1109	Shortcut to shorten a string .
1110	Converts a string to upper case .
1111	Removes double quotes from the given string .
1112	Convert byte array to hex string .
1113	Convert a string to a byte array .
1114	Detect the first quote character .
1115	Visit a property .
1116	Visit an enum .
1117	Visits an annotation .
1118	Register an entity type .
1119	Register an entity type .
1120	Remove an entity descriptor .
1121	Creates an entity instance of the specified type .
1122	Sets the target interface .
1123	Inject target field .
1124	Look up the annotated properties of a given class .
1125	Detect database OOM based on connection provider .
1126	Closes the output stream .
1127	Writes a single byte to the output stream .
1128	Checks if a session id is invalid .
1129	Returns the name of the email .
1130	Writes the data to a byte array .
1131	Write the data source to a file .
1132	Write the message to the output stream .
1133	Appends an argument to the given descriptor .
1134	Prepend a type .
1135	Changes the return type .
1136	Updates the content of the matched element .
1137	Register a type converter .
1138	Lookup a type converter .
1139	Selects a query .
1140	Execute a collection of selectors .
1141	Processes a list of selectors .
1142	Selects the first node matching the query .
1143	Walk all descendants recursively .
1144	Walk the root node and add it to result list .
1145	Selects the given node and adds it to the result list .
1146	Checks whether the given node matches the given css selector .
1147	Unpack cMap from packed string .
1148	Refresh the buffer .
1149	Gets a page .
1150	Remove the select .
1151	remove from FROM clause
1152	Remove the last order by clause .
1153	Decode HTML .
1154	Detects a name from a char array .
1155	Builds an ORDER BY clause .
1156	Builds a page SQL statement .
1157	Resolve column names and properties .
1158	Finds a column by column name .
1159	Finds a column by its property name .
1160	Returns the property name for the given column name .
1161	Returns the column name for the specified property .
1162	Replies the value of the id property .
1163	Sets the id value of the given object .
1164	Returns the key value for the given object .
1165	Append a string to this buffer .
1166	Sets the index .
1167	Expand the capacity of the array .
1168	Calculate length .
1169	Creates a message for the scripting detection .
1170	Creates a proxy bean .
1171	Generate the loop body .
1172	Initialize the cache .
1173	Checks whether a file should be accepted .
1174	Use a watch file .
1175	Start polling .
1176	Triggers a file change event .
1177	Adds an enumeration to the list .
1178	Returns the size of the field info table .
1179	Puts the field information into the given byte vector .
1180	Creates a new target .
1181	Write property value .
1182	Adds content to a writer .
1183	Parse a page .
1184	Writes the decorator content to the writer .
1185	Writes a region to a writer .
1186	Starts the server .
1187	Runs a process .
1188	Get the store .
1189	Create a gzip response stream .
1190	Initializes the widget .
1191	Append alias .
1192	Append column name .
1193	Adds a new rule .
1194	Apply the given filter to the given value .
1195	Processes includes .
1196	Processes excludes .
1197	Gets the pseudo class name .
1198	Adds all elements in the specified collection .
1199	Finds the index of the given element .
1200	Bind an annotation configuration .
1201	Registers an action configuration .
1202	Lookup an action configuration .
1203	Pass the given action config to the given type .
1204	Setup system properties .
1205	Validates the given value against the given value .
1206	Find the last table node .
1207	Fills child elements .
1208	Registers session bean data .
1209	Gets the session data .
1210	Initialize this proxy .
1211	Adds a method init method .
1212	End the bundle .
1213	Add a profile .
1214	Extracts profiles and adds them to the given key .
1215	Add the given value to the cache .
1216	Convert a typed type descriptor to a class name .
1217	Convert a type reference to a type name .
1218	Convert a typed type to a signature .
1219	Convert a type to a type ref .
1220	Add a list of consumers to this consumer .
1221	Creates a collection .
1222	Convert an object to a collection .
1223	Convert value to collection
1224	Convert a Collection to a Collection
1225	Convert a primitive array to a collection of objects
1226	Adds the line number .
1227	Makes the given visitor visit this label .
1228	Puts a forward reference to the given byte vector .
1229	Adds a reference to the stack .
1230	Resolve references .
1231	Mark all the basic blocks belonging to this label .
1232	Add all successors to the subroutine of a subroutine .
1233	Compare digits .
1234	Fixes the given character .
1235	Put a byte into this buffer .
1236	Writes two byte values .
1237	Put a 16 - bit short .
1238	Writes a 12 - byte 16 - bit integer into this buffer .
1239	Writes two 16 bytes .
1240	Put an int value into this ByteVector .
1241	Writes two four bytes .
1242	Adds a long to the buffer .
1243	Puts a byte array into this ByteVector .
1244	Enlarges the array to the given size .
1245	Authenticate user via http session .
1246	Authenticate user via token .
1247	Authenticate user via basic auth .
1248	Gets the value for the given locale and key .
1249	Gets the resource bundle .
1250	Get the element at the given index .
1251	Sets the id of the entity .
1252	Saves an entity .
1253	Updates an entity .
1254	Update property .
1255	Updates property value .
1256	Find an entity by id .
1257	Finds an entity by property name and value .
1258	Finds a single entity .
1259	Delete an entity by ID .
1260	Delete an entity .
1261	Returns the number of entities for the given type .
1262	Increases the specified property .
1263	Decreases a property .
1264	Find related entities
1265	Lists all entities of the given type .
1266	Clears all attributes .
1267	Returns a set of entries .
1268	Associates the specified value with the specified key .
1269	Removes the value associated with the specified key .
1270	Get the current stack trace .
1271	Returns the stack trace of the given exception .
1272	Gets the stack trace .
1273	Gets the exception chain .
1274	Convert an exception to a string .
1275	Convert an exception chain to a string .
1276	Builds the full message .
1277	Unwraps the given Throwable .
1278	Register as consumer .
1279	Accepts the given component class .
1280	Returns the class loader .
1281	Gets a resource as a stream .
1282	Gets a resource as a stream .
1283	Gets the class as a stream .
1284	Gets the resource as a stream .
1285	Creates a new route chunk .
1286	Find or create a child with the given value .
1287	Parses the request .
1288	Convert value to collection .
1289	Invokes the setter method .
1290	Sets the element at the specified index .
1291	Create a bean property .
1292	Extract the type of a bean property .
1293	Stops the authentication session .
1294	Starts the auth token .
1295	To date .
1296	To Calendar object .
1297	Define a proxy .
1298	Adds a check .
1299	Resolve validation context .
1300	Adds all properties for the specified class .
1301	Adds the given annotation checks to the given property descriptor .
1302	Collect annotation checks .
1303	Copy default properties from annotation .
1304	Encodes the given source string into a string .
1305	Uri Encode a string .
1306	Encodes the scheme component .
1307	Encodes the given URI host .
1308	Encodes the URI port .
1309	Encodes the given URI path .
1310	Encodes the given URI query .
1311	Encodes the query parameter .
1312	Encodes the given fragment .
1313	Gets the properties of the class .
1314	Returns an array of all PropertyDescriptors for this type .
1315	Gets the cookies header .
1316	Sets the response content encoding .
1317	Closes the connection .
1318	Filter the given scope .
1319	Prints the list of routes .
1320	Encrypt a byte array .
1321	Decrypts a byte array .
1322	Convert a map to a bean .
1323	Convert a list to a bean type
1324	Sets the property value .
1325	Generates a map .
1326	Compares two column descriptors .
1327	Sets the default HTTP header .
1328	Send a request .
1329	Send a request .
1330	Adds default headers .
1331	Reads all cookies from the response .
1332	Adds cookies to the request .
1333	Sends an email .
1334	Sets the subject .
1335	Sets the sent date .
1336	Sets the headers .
1337	Sets the person from the email address .
1338	Sets the recipient addresses .
1339	Adds the message body part .
1340	Sets the content of a part .
1341	Create a body part .
1342	Get Content - Type header .
1343	Saves the result set .
1344	Closes all registered ResultSets .
1345	Closes the query .
1346	Closes this query .
1347	Sets the fetch size .
1348	Sets the max rows .
1349	Executes an update .
1350	Executes the count query .
1351	Retrieves the set of generated columns .
1352	Gets the query string .
1353	Creates a proxy for the given target object .
1354	Create a collection from an iterator .
1355	Create a stream from an iterator .
1356	Compares two objects .
1357	Sets the default wiring mode .
1358	Prints the message and stack trace .
1359	Returns the name of the caller class .
1360	Shorten a class name .
1361	Excludes the given types .
1362	Serializes the given object to the given appendable .
1363	Serialize an object to a string .
1364	Clone the given object using serialization .
1365	Writes an object to a file .
1366	Reads an object from a file .
1367	Convert an object to a byte array .
1368	Convert a byte array to an object .
1369	Resolve the mapped types for the given types .
1370	Create a table names for types .
1371	Reads the value of a column .
1372	Cache the entities cache .
1373	Resolve provider definition .
1374	Applies to the given table name .
1375	Checks if a connection is valid .
1376	Render a view .
1377	Locate target .
1378	Returns the output writer .
1379	Returns output stream .
1380	Write content to response .
1381	Sets the content type .
1382	Print string .
1383	Login using basic authentication .
1384	Convert a token to a JSON response .
1385	Login via basic auth .
1386	Logout the user .
1387	Convert URL to container file .
1388	Creates a directory if it does not exist .
1389	Create a directory if it does not exist .
1390	Copy a file .
1391	Copy a directory .
1392	Moves the given file to the given destination directory .
1393	Moves a directory .
1394	Deletes a directory and its contents .
1395	Reads the contents of a file into a char array .
1396	Reads the contents of a file into a char array .
1397	Write characters to a file .
1398	Write a string to a file .
1399	Appends a string to the destination file .
1400	Read bytes from a file .
1401	Write bytes to a file .
1402	Append bytes to a file .
1403	Copies a file or directory .
1404	Deletes a file .
1405	Creates a temporary directory .
1406	Checks if a file is binary .
1407	Checks if a directory is identical .
1408	Checks if the given file and destination are identical .
1409	Prints usage information for a given command .
1410	Resolves an action method .
1411	Registers an action .
1412	Register a path alias .
1413	Moves to the next iteration .
1414	Construct a char array from a char array .
1415	Executes the proxy .
1416	Checks if this input string matches the given array of characters .
1417	Returns a char sequence .
1418	Creates an array of URLs for a class .
1419	Set the BCC address .
1420	Registers a serializer for a given type .
1421	Lookup a serializer for the given type .
1422	Parse a multipart request stream .
1423	Gets the value of the specified parameter .
1424	Gets parameter values .
1425	Gets the value of a file parameter .
1426	Gets the uploaded files .
1427	Initialize .
1428	Parse the template .
1429	Find the macro end .
1430	Count the number of escapes in the given macro .
1431	Build a query string from a multi - map .
1432	Parse a query string .
1433	Prepare header parameter name .
1434	Extracts the media type .
1435	Render the given node as HTML .
1436	Generate inner HTML for the given node .
1437	Configure this servlet .
1438	Resets the internal state .
1439	Sets the parser .
1440	Replace the type associated with the given path .
1441	Parse the given string into a list of objects .
1442	Parse the given string as a Map .
1443	Resolve a lazy value .
1444	Skip an object .
1445	Parses a string .
1446	Parse string content .
1447	Parses a Unicode character .
1448	Parse the content of an unquoted string content .
1449	Parse a number .
1450	Parse an array content .
1451	Creates an empty constructor .
1452	Creates a method wrapper .
1453	Resolve the raw type name .
1454	Resolve a reference from a property value .
1455	Resolve references and references to bean references .
1456	Read references from annotation .
1457	Builds default bean references .
1458	Build default reference .
1459	Remove duplicate names .
1460	Convert a list of references to an array of beans .
1461	Converts an annotation value into an array of beans .
1462	Runs the given consumer .
1463	Finds a method in a class .
1464	Finds a constructor matching the given parameter types .
1465	Resolve all interfaces of a class .
1466	Compare two parameter arrays .
1467	Force access to the given object .
1468	Creates a new instance of the specified class .
1469	Get all superclasses of a class .
1470	Returns the child class of the given instance .
1471	Returns the JAR file associated with the given class .
1472	Sleep for a given number of milliseconds .
1473	Sleeps .
1474	Wait for an object to finish .
1475	Creates a thread factory .
1476	Get the current value .
1477	Visit a parameter .
1478	Visits an annotation .
1479	Visits a type annotation .
1480	Visit a parameter .
1481	Visits a field instruction .
1482	Visits a method instruction .
1483	Visits a invokeDynamic instruction .
1484	Visits a jump instruction .
1485	Generate a multi - array instruction .
1486	Visits a try catch block .
1487	Visits a local variable annotation .
1488	Convert properties to a writer .
1489	Processes the input stream .
1490	Returns the next element .
1491	Moves to the next element .
1492	Joins the given arrays into a single array of objects .
1493	Joins the given arrays into a new one .
1494	Resizes the buffer to the given size .
1495	Append an element to the buffer .
1496	Removes a portion of a buffer .
1497	Gets the index of the first occurrence of the given value .
1498	Gets the index of the first occurrence of the given value .
1499	Returns the index of the first occurrence of the given substring in the given array .
1500	Enable XHTML mode .
1501	Parse content .
1502	Parse the tag .
1503	Compute the stack and local stack and local variables .
1504	Ends the current basic block with a successor .
1505	Collect attribute prototype .
1506	Inject context .
1507	Registers a pseudo class .
1508	Lookup a pseudo class .
1509	Invokes an action .
1510	Returns a list of all property names for a given class .
1511	Resolve properties .
1512	Checks whether the given property matches the given rule .
1513	Resolve method injection points .
1514	Reads configuration parameters .
1515	Sends the bundle file to the response .
1516	Lookup the bundle file for the given bundle id .
1517	Gets the bundle file .
1518	Register a bundle .
1519	Creates a hash for the given source .
1520	Creates the bundle .
1521	Removes all bundle files .
1522	Fix relative urls .
1523	Update column .
1524	Create table ref name .
1525	Gets the current Db Session .
1526	Convert an object to a single type array .
1527	Parses the signature of a method signature .
1528	Resolves set injection points .
1529	Checks if the given property type matches the property type .
1530	Opens the connection for query .
1531	Opens a transaction .
1532	Close a transaction .
1533	Commits a transaction .
1534	Rollback a transaction .
1535	Creates a new Properties object from a file .
1536	Create a new Properties object from a string .
1537	Load properties from a string .
1538	Get a subset of properties by prefix .
1539	Loads properties from classpath .
1540	Gets a property .
1541	Resolve all variables in a Properties object .
1542	Resolve property .
1543	Resolve scope .
1544	Get transaction mode .
1545	Register annotations .
1546	Read transaction annotation .
1547	Processes the given node .
1548	Matches an element .
1549	Processes the given node at the given index .
1550	Unescapes the given value .
1551	Build a list of JRE packages .
1552	Clones this node .
1553	Detaches this node from its parent .
1554	Adds child nodes .
1555	Inserts a child node at the specified index .
1556	Inserts a child before another node .
1557	Inserts the specified child nodes before this node .
1558	Inserts a child node into this node .
1559	Inserts children after ref .
1560	Removes all child nodes .
1561	Find a child node with the given name .
1562	Returns child nodes matching the given predicate .
1563	Checks the validity of this node .
1564	Initialize the childElementNodes
1565	Initialize the index of siblingNames .
1566	Initialize childNodes .
1567	Changes the owner document of the node .
1568	Gets the previous sibling name .
1569	Returns the text content of this element .
1570	Get the HTML for this node .
1571	Returns the inner HTML for the element .
1572	Visit all child nodes .
1573	Get the CSS path .
1574	Handles a decora tag .
1575	Called when an id attribute starts .
1576	Defines a tag definition .
1577	Adds a proxy aspect .
1578	Adds a mapping for the given root package .
1579	Add root package of action .
1580	Find the root package for the given action path .
1581	Resolve validation message .
1582	Remove duplicate names .
1583	Add a name pattern to the properties file .
1584	Iterate over all targets .
1585	Iterate over all targets in the given scope .
1586	Iterate over all targets in the given scope .
1587	Extract parameter values from parameters .
1588	Creates targets .
1589	Creates an action method argument .
1590	Handle session creation .
1591	Handle session destruction .
1592	Appends the given value to the end of the array .
1593	Appends the contents of the given JsonArray to this array .
1594	Removes the element at the given position .
1595	Resolves the target value .
1596	Sends the target not found .
1597	Converts a value to a string .
1598	Register an action filter .
1599	Gets the pseudo function name .
1600	Resolve property injection points .
1601	Creates a SOCKS proxy socket .
1602	Returns the count of all attributes .
1603	Gets the result set .
1604	Checks if c equals one character .
1605	Gets the index of the first occurrence of the given CharSequence .
1606	Gets the index of the first occurrence of the given character in the given index .
1607	Add command line arguments .
1608	Adds an environment variable .
1609	Run the process .
1610	Invokes a listener .
1611	Copy values from another Frame .
1612	Returns the abstract type for the given type .
1613	Get the abstract type from the descriptor .
1614	Sets the input frame .
1615	Gets the abstract type .
1616	Sets the local type .
1617	Adds an abstract type to the output stack .
1618	Pushes an abstract type .
1619	Pop the given number of elements .
1620	Pop the stack at the given descriptor .
1621	Adds an initialized type .
1622	Gets the initialized type .
1623	Writes an abstract type .
1624	Prune expired entries .
1625	Schedules pruning .
1626	Visit a module .
1627	Visit a host .
1628	Visit an outer class .
1629	Visits an annotation .
1630	Visit a nested member .
1631	Visit an inner class .
1632	Visits a field .
1633	Get the current thread session
1634	Close the current thread .
1635	Creates the execution array .
1636	Invokes the action method .
1637	Reads the request body from the request .
1638	Calculates the index of the first item of a page .
1639	Returns the index of first item in page request .
1640	Checks whether the given value matches the criteria .
1641	Converts a char array to a byte array .
1642	Find the index of the first difference in the given index .
1643	Resolves the node name .
1644	Resolves the attribute name .
1645	Renders an attribute .
1646	Load properties from a file .
1647	Load properties from a file .
1648	Load props from an input stream .
1649	Load properties from a map .
1650	Load properties from a map .
1651	Loads properties from classpath .
1652	Returns the value of the specified key .
1653	Sets a value for a key .
1654	Extract properties from target map .
1655	Extract data to target map
1656	Extract sub props .
1657	Extracts the inner map with the given prefix .
1658	Adds an inner map .
1659	Resolve active profiles .
1660	Returns the names of all profiles .
1661	Get profiles for a given property key name .
1662	Adds a property injection point .
1663	Adds a set InjectionPoint .
1664	Adds a method injection point .
1665	Add init method points .
1666	Add destroy method points .
1667	Resolves the target class .
1668	Inject target field into given target object .
1669	Gets the target wrapper type .
1670	Find a field by its name .
1671	Returns the type of the field .
1672	Resolves the key type of the field .
1673	Returns the component type for this field .
1674	Create a JsonResult from an object .
1675	Constructs a JSON result from an exception .
1676	Resolve the HTTP method from a method name .
1677	Match a pattern .
1678	Determine the loading strategy .
1679	Resolves the resource loading strategy .
1680	Loads a class .
1681	Gets the resource .
1682	Wait for the current thread to finish .
1683	Detect annotation type .
1684	Build an InjectionPoint based on an annotation value .
1685	Visits all transient properties .
1686	Returns an array of URLs for the given class loader .
1687	Sets the bean .
1688	Update the bean .
1689	Loads the property descriptor .
1690	Returns the getter for the property .
1691	Returns the setter for the property .
1692	Connects to DOM .
1693	Adds an iterator to the iterator .
1694	Prints the logo .
1695	Stop the joy .
1696	Creates a new socket .
1697	Create SSLSocket .
1698	Returns the default SSLSocketFactory .
1699	Returns the socket factory for the given proxy type .
1700	Creates a random string of the specified number of characters .
1701	Creates a number of characters in the specified range .
1702	Creates a random range of characters .
1703	Creates a new array instance .
1704	Injects the value into the given object .
1705	Converts the given value to the given target type .
1706	Visit a service .
1707	Creates a default type cache .
1708	Puts a value into this context .
1709	Returns all methods for this class .
1710	Returns the IP address for the given hostname .
1711	Get ip as int .
1712	Checks whether the input string is a valid IP address v4 .
1713	Returns the host name of an IP address .
1714	Downloads bytes from given URL .
1715	Downloads a string from the specified URL .
1716	Downloads a file from the given URL .
1717	Injects all targets .
1718	Invokes the outject method .
1719	Connects to a remote host and port .
1720	Connects to the specified host and port .
1721	Gets the index of a primitive class .
1722	Loads a class .
1723	Load array class .
1724	Shutdown the container .
1725	Creates a binary search .
1726	Create a binary search for an array of elements .
1727	Excludes given exceptions .
1728	Includes the given include patterns .
1729	Includes all properties of the given template .
1730	Sets the start tag .
1731	Register a component
1732	Resolve the column s SQL type .
1733	Preprocesses SQL .
1734	Create a new ResultSet mapper .
1735	Find generated key .
1736	Populates the entity with the generated keys .
1737	Create wrapper object .
1738	Sets a bean .
1739	Sets a map of parameters .
1740	Set multiple objects .
1741	Inserts a chunk after this chunk .
1742	Lookup an entity type .
1743	Find column descriptor by column reference .
1744	Resolve table alias .
1745	Resolves the given object .
1746	Appends spaces to the given StringBuilder .
1747	Returns an enumeration of file parameter names for this request .
1748	Includes the specified page .
1749	Gets the servlet path .
1750	Returns the request URI .
1751	Resolve parameter names .
1752	Start the petite container
1753	Stop this process .
1754	Sets the subject subject .
1755	Method allow to filter a message ID .
1756	Filter by address .
1757	Method allow to search for a recipient .
1758	Add a cc address .
1759	Add a bcc address .
1760	Add a flags filter .
1761	Add a flag to the email filter .
1762	Method allow to search for received date .
1763	Appends a Sent date search term .
1764	Method allow to add a size filter .
1765	Appends a search term .
1766	Appends an OR term to the list of email filters .
1767	Appends a NOT filter .
1768	Appends the given search term to the current one .
1769	Converts a byte array to Base32 string .
1770	Convert a value to a byte array .
1771	Determines whether the request is eligible for the request .
1772	Validates the given object .
1773	Validate given target .
1774	Add a profile .
1775	Enable profiles .
1776	Checks if a set of profiles matches a profile .
1777	Parse the request body .
1778	Convert to milliseconds .
1779	Adds the given Julian date to this date .
1780	Subtract this date from another date .
1781	Sets the values of an integer .
1782	Initializes the parser .
1783	Emit a comment .
1784	Report an error .
1785	Creates a hash of the pbkdf2 .
1786	Calculate PBKDF2 key .
1787	Converts a hex string to a byte array .
1788	Resolve provider definitions .
1789	Sets the name of the attachment .
1790	Sets the content id from the file if it is not specified .
1791	Resolve content type .
1792	Parse a type signature .
1793	Compute the size of the attributes .
1794	Put module attributes .
1795	Decode a string .
1796	Decodes a query string .
1797	Start the database .
1798	Check the connection provider .
1799	Visit a method .
1800	Visit all super classes .
1801	Create a method signature .
1802	Convert an array of objects into a CSV string .
1803	Converts a CSV line into an array of strings .
1804	Resolve a CtorInjectionPoint .
1805	Creates a class reader .
1806	Gets the class reader for the given proxy .
1807	Encrypt a string .
1808	Decrypt a string
1809	Gets a logger .
1810	Sets the cookie name .
1811	Create an action request .
1812	Create wrapper .
1813	Destroys the bean .
1814	Shutdown all registered beans .
1815	Returns a list of received messages .
1816	Starts the ClusteredService .
1817	Runs reporting .
1818	Prints an error message .
1819	Print rate .
1820	Creates a mapped byte buffer .
1821	Closes this session .
1822	Executes the current thread .
1823	Computes the current position .
1824	Inserts a vector .
1825	Append padding .
1826	Closes this session .
1827	Poll for an error response .
1828	Send a replay request .
1829	Event about an available image .
1830	Event when an unavailable image is unavailable .
1831	Get channel status reader
1832	Read channel status .
1833	Sets the limit .
1834	Appends a range of bytes to the buffer .
1835	Consumes a sequence of fragments .
1836	Create a new mapped byte buffer for the aeron file .
1837	Creates a snapshot of the counters .
1838	Creates a default header .
1839	Put a key buffer .
1840	Encapsulate a counter message .
1841	Connect to Aeron .
1842	Try to create a connection .
1843	Send close session request .
1844	Starts broadcasting request .
1845	Send a stop request .
1846	Queues a replay request .
1847	Stops the buffer .
1848	Queues a list of record counts .
1849	Lists records for a URI request .
1850	Send a list recording request .
1851	Extends recording .
1852	Gets the recording position request .
1853	Send stop position request .
1854	Adds a list of subscriptions to the server .
1855	Checks whether the given channel matches the given tag .
1856	Returns the destination address for the given channel URI .
1857	Returns a description of this channel .
1858	Adds a transport transport .
1859	Inserts a packet into the buffer .
1860	Find controlToggle .
1861	Put a parameter .
1862	Gets the channel tag .
1863	Gets the entity tag .
1864	Adds session id to channel .
1865	Get the tag value .
1866	Append padding for the term .
1867	Updates the publisher limit .
1868	Allocates a counter .
1869	Returns the label name for the given type id .
1870	Scans for available padding .
1871	Reset the builder .
1872	Validates the builder .
1873	Sets the prefix .
1874	Sets the media media .
1875	Sets control mode .
1876	Sets the term length .
1877	Sets the term offset .
1878	Sets the linger value .
1879	Opens the datagram channel .
1880	Closes this connection .
1881	Checks whether a buffer is valid .
1882	Receives a datagram address .
1883	Creates a retransmit action .
1884	Process timeouts .
1885	Convert a system status status to its string representation .
1886	Allocate a counter .
1887	Resets the vector .
1888	Validates this buffer .
1889	Computes the length of a vector .
1890	Calculate the producer window length based on the term buffer size .
1891	Checks that the desired socket buffers are valid
1892	Validates the given page size .
1893	Checks that the session id range is valid .
1894	Validate timeout .
1895	Sets the error code .
1896	Resets this leader .
1897	Returns a string representation of the cluster members .
1898	Adds the member status information for the given list of members .
1899	Close all member publications .
1900	Checks whether the given array of members has active quorum .
1901	Calculate the rank of all members .
1902	Resets the log positions of each member .
1903	Checks whether the given position is reached by the given position .
1904	Returns true if all members have a vote on full count .
1905	Checks if the members of the cluster members have a higher priority .
1906	Determine the member .
1907	Validates that the member s members are the same
1908	Checks whether two cluster members are same .
1909	Checks to see if the given candidate is compatible .
1910	Returns true if the given candidate is a quorum candidate .
1911	Checks if member endpoints is not duplicate .
1912	Find the member index .
1913	Removes a member from old members array .
1914	Get the member id .
1915	Maps an existing CNC file to a file .
1916	Is the driver active?
1917	Is the driver active?
1918	Check if the driver is active .
1919	Request to terminate a CNC file .
1920	Gets the length of a frame in a buffer .
1921	Writes the length of a frame in a buffer .
1922	Writes the type of the frame .
1923	Writes the flags for the given frame .
1924	Writes the given term term to the buffer .
1925	Encodes the given term id into the buffer .
1926	Find counter id by recording id .
1927	Find counter id by session id .
1928	Gets recording id .
1929	Check if a counter is active .
1930	Adds an application specific feedback message .
1931	Reloads all entries from disk .
1932	Returns the last term .
1933	Creates a plan for the Aeron archive .
1934	Creates a recovery plan .
1935	Append a term .
1936	Append a snapshot .
1937	Updates the log position .
1938	Adds a tombstone entry .
1939	Closes the connection .
1940	Inserts vectors in the queue .
1941	Unblock a log .
1942	Returns the channel value .
1943	Set channel .
1944	Checks that the given term length is valid .
1945	Validates the given page size .
1946	Sets the active term count .
1947	Computes the position of the term .
1948	Compute log length .
1949	Stores the default frame header .
1950	Applies the default header .
1951	Rotate log .
1952	Initialises the tail with the given partition index .
1953	Calculates the term offset from the raw bytes .
1954	Gets the tail of the segment .
1955	Atomically sets the raw tail field .
1956	Create a token buffer
1957	Allocates a counter .
1958	Finds the counter id .
1959	Returns true if the given counter has a replay flag .
1960	Gets the snapshot recording id .
1961	Convert a short to a char array .
1962	Sets the channel .
1963	Offers a buffer to the cluster .
1964	Wraps a buffer .
1965	Commits the buffer length .
1966	Aborts this frame .
1967	Main method .
1968	Cleanup resources .
1969	Returns the position of this frame .
1970	Allocate a counter .
1971	Finds the counter id for the given service id .
1972	Creates a snapshot of the counters .
1973	Allocates a new counter .
1974	Closes this connection .
1975	Dispatches a recording descriptor .
1976	Adds a new slab to the pool .
1977	Sets the byte at the given index .
1978	Adds statistics .
1979	Calculates the range ranges for a given filter .
1980	Creates a group type .
1981	Create struct type .
1982	Annotate a message .
1983	End the next bit packed run .
1984	Read one structure .
1985	Reads all footers from a file .
1986	Read all footers from a summary file .
1987	Read the file footer from the given file .
1988	Reads the next row group .
1989	Read the next row group .
1990	Reads a dictionary .
1991	Adds a new writer .
1992	Remove a writer .
1993	Updates the total allocation .
1994	Registers a call back .
1995	Starts the job .
1996	Starts a new block .
1997	Initialize a new chunk .
1998	Writes a dictionary page .
1999	Writes a data page .
2000	Writes a chunk of data .
2001	Terminates a block .
2002	Copies a range of bytes from a stream to another .
2003	Closes the file .
2004	Merges a list of metadata files .
2005	Merges a list of files with the given configuration .
2006	Write the metadata file with all job summary level .
2007	Merges the given FileMetaData into the given MetaData .
2008	Reads the value .
2009	Determine if the given schema is a null value .
2010	Returns the first non - null element of the array or null if none .
2011	Creates a value from the given schema .
2012	Creates a ThriftMetaData object from the extra meta data .
2013	Convert thrift class to ThriftMetaData
2014	Returns the extra meta data .
2015	Writes a null value .
2016	Writes a new page .
2017	Initializes this instance .
2018	Allocates the values buffer .
2019	Checks the index of an enum .
2020	Calculates the bit widths for a delta block buffer .
2021	Throws an exception if the given exception is an exception .
2022	Get statistics for a column type .
2023	Gets a builder for the given primitive type .
2024	Merges the given statistics into this object .
2025	Get the non - null value from the given schema
2026	Creates a new TaskAttemptContext .
2027	Invoke a method .
2028	Prints the members of this class .
2029	Merges all fields from another group into another one .
2030	Initialize the counter loader
2031	Get a filter based on the configuration .
2032	Get a list of footers .
2033	Generates a list of ParquetSplits for a given row group .
2034	Writes a single message .
2035	Validates the fields that match the given parquet schema .
2036	Serialize a proto class .
2037	Creates a new Direct CodecFactory .
2038	Makes sure that all required fields are present .
2039	Checks a set .
2040	Reads the file meta data .
2041	Closes the record writer .
2042	Set the schema for this job .
2043	Add a descriptor to the Parquet type .
2044	Throws an exception if the column type is valid .
2045	Checks that the given long is checked .
2046	Creates a schema mapping from an arrow schema .
2047	Creates a schema mapping from a parquet schema .
2048	Creates a schema mapping from an arrow schema and a parquet schema .
2049	Writes a header to the parquet file .
2050	Skips over the next record .
2051	Write an object to the given configuration .
2052	Removes the value from the cache .
2053	Adds a new entry to the cache .
2054	Returns the current value for the specified key .
2055	Writes the given value to the given schema .
2056	Writes the value without conversion .
2057	Sets the given glob pattern .
2058	Output content to console .
2059	Open input stream
2060	Creates an unbound record filter .
2061	Convert a struct type
2062	Create a list wrapper for a list type .
2063	Creates a type for a list of elements .
2064	Gets the merged key value metadata .
2065	Get a Parquet input split .
2066	Gets a map of field names by name .
2067	Resolve schema access to requested schema .
2068	Gets the input files from the input files .
2069	Check that the input files are valid .
2070	Gets the input files from a directory .
2071	Creates a page filter that returns a page filter .
2072	Returns a list consumer that delegates to the given consumer .
2073	Initialize the map .
2074	Merges a tuple into a single tuple .
2075	Sum up all tuples of the given tuple .
2076	Read a struct
2077	Read a map entry .
2078	Writes an int .
2079	Read a little - endian integer from the input stream .
2080	Sets the schema for the given job .
2081	Creates a topic if it doesn t already exist .
2082	Duplicate a pipeline stage .
2083	Create a stage .
2084	Create interceptor beans .
2085	Create interceptor bean .
2086	Parse an Avro schema
2087	Convert milliseconds to days .
2088	Extract the Avro schema from a record .
2089	Upgrade a list of configs .
2090	Returns the length of the message .
2091	Copy the blobstore resources to the staging folder
2092	Resets all columns .
2093	Reports a thread health report .
2094	Registers a thread health gauge .
2095	Stores control hub configurations .
2096	Checks whether the given webCredential matches the given webCredential .
2097	Checks whether the given pipeline needs to be upgraded .
2098	Upgrade the given stage .
2099	Upgrades a stage .
2100	Upgrades the given service if needed .
2101	Upgrades a stage if needed .
2102	Get fields to null .
2103	Checks whether the given name is a system class .
2104	Adds the given element to the list .
2105	Adds an element at the end of the list .
2106	Returns the value associated with the given key or default value if the value is not present .
2107	Adds reported errors if needed .
2108	Retrieves a descriptor from a file .
2109	Get all file descriptors from given set .
2110	Populates default values from a file descriptor map .
2111	Returns the descriptor for the given message type .
2112	Converts a protobuf object to sdc field .
2113	Converts a record into a protobuf message .
2114	Translate a field into a protobuf message .
2115	Upgrades a list of Config objects to Jersey versions .
2116	Check connection .
2117	Convert from kudu type .
2118	Create field .
2119	Intercept all records .
2120	Returns the text .
2121	Add missing configurations to a stage .
2122	Parses the response .
2123	Adds response headers to record .
2124	Write response header to record .
2125	Write response header to record header .
2126	Saves the metadata .
2127	Configure client .
2128	Parses the request headers and returns the result .
2129	Increments the source offset by the given amount .
2130	Parses the paginated result .
2131	Add response headers .
2132	Resolve request headers .
2133	Processes the response .
2134	Checks if a property is defined .
2135	Convert a DataParserException to a DataParserException .
2136	Convert a DataGeneratorException to a DataGeneratorException .
2137	Reads credentials file .
2138	Get preview of a pipeline .
2139	Copy characters to the buffer .
2140	Removes duplicates from the set .
2141	This method is used to purge an empty batch .
2142	Returns the index of the next main line .
2143	Resolve a chunk .
2144	Close a connection .
2145	Escape a quoted string .
2146	Create flow control settings .
2147	Returns the channel provider .
2148	Puts a batch into the data channel .
2149	Compiles an expression into a Grok instance .
2150	Checks to see if the given expression matches the regular expression .
2151	Adds a dictionary from an input stream .
2152	Adds a dictionary .
2153	Stop the aggregator .
2154	Rolls the aggregators over the current data window .
2155	Serialize an object .
2156	Deserialize JSON string .
2157	Deserialize a JSON object .
2158	Checks whether the given record exists and throws an exception .
2159	Evaluates an EL expression and returns the result .
2160	Generate an inner field from the original list .
2161	Extract the table name from a metadata record .
2162	Get the database name from a metadata record .
2163	Get the internal field from a metadata record .
2164	Extract the location from a metadata record .
2165	Get custom location .
2166	Extract the avro schema from a metadata record .
2167	Extract data format from metadata record
2168	Create a new schema metadata field builder .
2169	Validate partition information .
2170	Returns the partition path .
2171	Serialize a schema to an HdfS file .
2172	Sets the parameter index .
2173	Gets configuration .
2174	Parse an RFC 3164 time string .
2175	Formats the given template .
2176	Start a batch .
2177	Checks whether a record contains all required fields .
2178	Filters a list of field names .
2179	Send onRecordErrorException to handler .
2180	Parses a jar name and returns an optional dependency .
2181	Parses the given URL .
2182	Returns a singleton instance of CouchbaseConnector .
2183	Closes the client .
2184	Validate the Couchbase configuration .
2185	Gets the label from a string code .
2186	Verify that a dependency exists .
2187	Reads a secret from the vault .
2188	Get the operation type from the header .
2189	Writes a document to the bucket .
2190	Build a mutation .
2191	Creates the SQL string for a table .
2192	Configure the authentication .
2193	Takes messages and returns them .
2194	Commits an offset .
2195	Handles an error .
2196	Injects the given stage .
2197	Get a list of stage definitions
2198	Gets the publisher definition .
2199	Format the given column name .
2200	Format the given value .
2201	Get pipeline configuration
2202	Create a new pipeline fragment
2203	Get a list of pipelines
2204	Import a pipeline fragment .
2205	Resolves the directory path .
2206	Gets the operation code from a record .
2207	Get the path to the given column
2208	Retrieves an enriched event from the pipeline .
2209	Gets a runner from the queue .
2210	Gets the next item from the queue .
2211	Returns a runner to the queue .
2212	Destroys this container .
2213	Validates that the container is not destroyed .
2214	Checks if a stream exists .
2215	Get the last shard id for the given stream name .
2216	Processes a queue .
2217	Checks if the exception is a data error .
2218	Calculates the column hash for a record
2219	Compare two files .
2220	Retrieves the PID of a process .
2221	Validate fields to hash .
2222	Convert a user to a proxy user
2223	Roll rolling a stats .
2224	Creates a snapshot of the statistics .
2225	Create a directory if it does not already exist .
2226	Writes all records in batch .
2227	Writes a batch of records to the batch .
2228	Write objects to the cache .
2229	Triggers no more data event .
2230	Detects a new partition .
2231	Updates record header for HDFS .
2232	Processes a group .
2233	Checks whether two stages are the same .
2234	Main entry point .
2235	Configure auth and build client .
2236	Resolve request headers .
2237	Get the HttpMethod .
2238	Adds bindings to the bindings .
2239	Gets the value of a field in a record .
2240	Load schema from schema registry .
2241	Registers a schema .
2242	Loads schema from schema registry .
2243	Gets the schema id for the given subject .
2244	Load schema from schema registry .
2245	Write schema id .
2246	Detects a schema id .
2247	Gets default values from schema .
2248	Parses a message .
2249	Logs the details of the validation results .
2250	Gets bad records from an error sink .
2251	Initialize the generator .
2252	Gets the outward edge vertices for the given vertex .
2253	Gets the forward edge vertices that are connected to the given vertex .
2254	Serialize offset map
2255	Deserialize an offset map
2256	Queues a report .
2257	Get report .
2258	Checks if SDC checkpoint exists .
2259	Writes the offsets to the main offset file .
2260	Deletes the given blob .
2261	Handles an error .
2262	Handle archive .
2263	Returns a reader for the current file reader .
2264	Releases a reader .
2265	Sets the base URL .
2266	Adds a default header .
2267	Parses a date .
2268	Encode a string
2269	Get client .
2270	Initialize connection .
2271	Get table metadata .
2272	Create bulk Inetter .
2273	Create a builder for an event .
2274	Builds a schema from a schema
2275	Convert the given string to an operation type .
2276	Adds jars to the given configuration .
2277	Adds jars to the job configuration .
2278	Checks the field order by name .
2279	Checks whether the condition expression matches the given field name .
2280	Calculates the offset lag for a file offset
2281	Entry point for premain .
2282	Returns the parallelism of this topic .
2283	Runs a query .
2284	Creates a LinkedHashMap from a list of fields .
2285	Gets the table description .
2286	Validates that the table accepts inserts .
2287	Gets the type of a field .
2288	Checks if the field type is nullable .
2289	Get the schema for a table
2290	Gets the column properties .
2291	Returns the class for the given type name .
2292	Initialize the Aerospike client .
2293	Determine the topic .
2294	Upgrades a list of data format configurations to v4 .
2295	Returns an input stream for reading .
2296	Returns an OutputStream for writing to the file .
2297	Checks whether the file exists .
2298	Parses a file permission string .
2299	Checks that all services are available .
2300	Creates a new aggregator instance .
2301	Gets the aggregator unit .
2302	Creates the aggregator data .
2303	Creates a group by aggregator .
2304	Starts the window .
2305	Stops the aggregator .
2306	Rolls all aggregators over the window end time .
2307	Acquires a login manager .
2308	Release the login manager .
2309	Convert a glob pattern to a regular expression .
2310	Lists all objects in S3 .
2311	Stop this pipeline .
2312	Retrieves a batch of pipes for the given idle time .
2313	Creates a failure snapshot .
2314	Convert a record to a bound statement .
2315	Sets the given configuration .
2316	Generate lookup key .
2317	Handles partitioning mode .
2318	Reads a line into a StringBuilder .
2319	Rolls the usage timer .
2320	Enable dpm .
2321	Disables the dpm .
2322	Normalize the base URL .
2323	Retrieve user token .
2324	Logout request
2325	Updates the auth token file .
2326	Updates the dpm configuration .
2327	Create a schema field for the given field .
2328	Returns the schema for the given field .
2329	Retrieves the decimal scale or - 1 if the attribute does not exist .
2330	Returns the default value for the given schema .
2331	Initialize metrics metrics if needed .
2332	Compare two files .
2333	Returns the group index of the given group .
2334	Get a list of group names
2335	Returns true if the given string is an escaped character .
2336	Returns true if the given position is a slash .
2337	Checks whether a character class is inside a character class .
2338	Counts the number of open parens in the given string .
2339	Extract group information from a named pattern .
2340	Replaces all occurrences of a regular expression with a replacement string .
2341	Handle a GET request .
2342	Refresh the schema for the given schema and table
2343	Returns true if transactions expired .
2344	Get offset .
2345	Reads the next line .
2346	Returns empty stage .
2347	Convert a string to a number .
2348	Parses a single part .
2349	Parses the record values .
2350	Get primary keys .
2351	Creates the mapping for the given column and parameter values .
2352	Returns the SQL type name for the given field .
2353	Returns the table name .
2354	Sets the primary keys for this record .
2355	Handle a SQLException .
2356	Processes the pipeline .
2357	Prepare the given batch context .
2358	Finish the given batch context .
2359	Flattens the entire record .
2360	Creates a stage runtime .
2361	Execute onRecord error .
2362	Convert columns to parameters .
2363	Returns the condition for the given partition column .
2364	Validates that the given offset is stored .
2365	Returns the requested bundle content generator definitions .
2366	Returns non - empty arguments .
2367	Gets the operation .
2368	Converts a number of bytes to display in human readable format .
2369	Checks whether the current live file matches the current live file .
2370	Get the number of files that match the given live file .
2371	Checks if a name is whitelisted .
2372	Returns true if the expected versions match the expected version .
2373	Main method .
2374	Propagate runtime configuration .
2375	Validate the report description .
2376	Creates a new JdbcRecordWriter .
2377	Create a new JdbcRecordWriter .
2378	Upgrade configs to v1 .
2379	Extract named groups from raw data .
2380	Queues a commit message .
2381	Creates an embedded SDC .
2382	Sets fields in a record .
2383	Gets a list of all pipelines that have changed .
2384	A convenience method for receiving ack .
2385	Creates a gauge .
2386	Gets the columns to parameters .
2387	Generate header attributes .
2388	Validate the record .
2389	Handle old temp files
2390	Get input stream .
2391	Get a file reader .
2392	Write Parquet file .
2393	Checks whether input field is encrypted .
2394	Checks if input field is encrypted .
2395	Checks input field input .
2396	Checks input input field .
2397	Encrypt field .
2398	Changes the parent pattern .
2399	Append the given replacement to the given string buffer .
2400	Returns a map of matching groups .
2401	Replaces all occurrences of this pattern with the given replacement string .
2402	Ensures that the avro schema exists in the given config .
2403	Returns the value of the given variable .
2404	Creates the start event .
2405	Creates a stop event .
2406	Fix offset .
2407	Extract value as runtime type .
2408	Add a partition query .
2409	Alter table properties query .
2410	Describe a database .
2411	Executes the given query .
2412	Execute a query .
2413	Executes pipeline .
2414	Iterate through all pipelines .
2415	Gets the offset commit trigger .
2416	Determine whether the pipeline should be stopped .
2417	Accepts an exception and executes it .
2418	Evaluate the insert ID for a record .
2419	Gets the value of the given field .
2420	Sets the specified fragment in record .
2421	Sets the document in the record .
2422	Sets the n1QL query row in record .
2423	Handles the whole file data format .
2424	Returns true if the incomplete transactions contain the specified seqno .
2425	Internal helper method to set the context class loader .
2426	Sets the creator for the stage creator .
2427	Logout the user .
2428	Sets the exceptions .
2429	Replace all variables in path .
2430	Ensures that the classloader is permitted to access the given path .
2431	Starts the emrBatch .
2432	Determine the directory path .
2433	Renames a temporary file .
2434	Should roll .
2435	Matches the given string against the given pattern .
2436	Gets the file offsets .
2437	Returns the remaining wait time .
2438	Gets the offsets lag .
2439	Create and initialize the stage .
2440	Create a stage delegation definition .
2441	Creates a new stage instance .
2442	Gets the value of a metric .
2443	Find the end of the header end .
2444	Gets the body size .
2445	Save a byte buffer into a temporary file
2446	Create a new SSLServerSocketFactory using the given key and passphrase .
2447	Returns the mime type for a file .
2448	Handle interceptors .
2449	Stop all connections .
2450	Adds the default routes .
2451	Send the response to the given output stream .
2452	Send the request body to the output stream .
2453	Creates a fixed length response .
2454	Determine whether or not the content type should be used .
2455	Sets a cookie .
2456	Removes all cookies from the queue .
2457	Decode the given base64 value .
2458	Encodes the given value .
2459	Sets the table name .
2460	Extract the name of the principal .
2461	Registers a session repository filter .
2462	Finds the principal from the session .
2463	Get session by id .
2464	Retrieves the JNDI name from the given model node .
2465	Get the canonical name of a view method .
2466	Registers the given synchronization .
2467	Called after the completion of the list has been completed .
2468	Get the current transaction
2469	Determine if all the kernel beans exist .
2470	Returns true if the given persistence unit name matches the cache region .
2471	Get the list of server config dependencies .
2472	Decrease the read lock count .
2473	Increment the read lock count .
2474	Add a service .
2475	Calculate the restore expiration calculation .
2476	Add search dependencies
2477	Make the top - level bda from static modules .
2478	Create the metadata for a POJO framework .
2479	Sets the config name and file .
2480	Gets the security metadata .
2481	Get the servlet url patterns mappings .
2482	Get the servlet class mapping .
2483	Resolve the binding .
2484	Retrieves the names of available connections .
2485	Parses the core environment element .
2486	Parse the process id environment element .
2487	Returns the path address of the given operation .
2488	Sets the path address on the given operation node .
2489	Returns the value of an attribute .
2490	Returns true if the given operation is included in the given operation .
2491	Creates a composite operation .
2492	Creates an ADD operation .
2493	Creates an operation with the given address and index .
2494	Creates a read - attribute operation .
2495	Creates a write - attribute operation .
2496	Creates an undefine operation .
2497	Replies the context .
2498	Adds a factory for a given scheme scheme .
2499	Removes a factory for a given scheme scheme .
2500	Loads multiple providers .
2501	Modify the deployment .
2502	Set the endpoints for the given deployment .
2503	Modify the context root .
2504	Gets the transport class name .
2505	Sets the run as identity .
2506	Pop run as identity .
2507	Process management .
2508	Injects a property on an object .
2509	Checks if the given class and property types match .
2510	Finds a method .
2511	Finds the field with the given name and field type .
2512	Initialize the options .
2513	Derived information from a request .
2514	Runs a standalone JDR report .
2515	Gets the JDR report .
2516	Registers a resource adapter deployment .
2517	Unregister a resource adapter deployment .
2518	Registers transformations for the given subsystem .
2519	Writes the parameters to the output stream .
2520	Read an exception .
2521	Gets the lock owner .
2522	Releases the lock .
2523	Adds a log .
2524	Adds the CDI parameter to the deployment .
2525	Returns the component view .
2526	Invokes the endpoint .
2527	Get the view method for the given component method .
2528	Checks if the given sei method matches the given view method .
2529	Create management statistics resource .
2530	Gets the EJB security meta data for the specified endpoint .
2531	Gets the next domain .
2532	Ensure that the two security domains are same .
2533	Sets the IDL name .
2534	Gets the relative name .
2535	Creates a new JNDIName from the given name .
2536	Process the xml
2537	Handles a request .
2538	Returns true if the current transaction is in a transaction .
2539	Get the transaction synchronization registry .
2540	Get the connection factory .
2541	Gets the last component of a Name .
2542	Returns true if the given name is empty .
2543	Gets a name not found exception .
2544	Creates a naming exception with the specified message and cause .
2545	Create a naming exception with the given message and cause .
2546	Construct a CannotProceedException with the given name and name .
2547	Returns a naming enumeration .
2548	Renders the given name to the given value .
2549	Returns the ActiveMQ component control .
2550	Parse connection attributes .
2551	Create a component instance .
2552	Gets the virtual file for the REST application .
2553	Resolves the runtime name .
2554	Creates a builder for a listener definition .
2555	Get a primitive analysis .
2556	Gracefully wait for all threads to finish .
2557	Gets the url patterns .
2558	Get the servlets metadata .
2559	Get the servlet mappings .
2560	Gets the metadata of the given JBossWebMetaData object .
2561	Get the login config metadata for the given JBossWebMetaData object .
2562	Gets the context parameters .
2563	Get the web resource collections metadata .
2564	Gets the init params .
2565	New security constraint meta data .
2566	Creates a new web resource collection metadata .
2567	Creates a new JBossServletMetaData .
2568	Creates a new servlet mapping .
2569	New auth constraint metadata .
2570	New user data constraint metadata .
2571	New param value meta data .
2572	New param value meta data .
2573	Registers interceptors for the given component .
2574	Process the injection targets .
2575	Shutdown the container .
2576	Get the JNDI name from the model .
2577	Resolve an attribute .
2578	Gets the type of a URL pattern .
2579	Is a pooled connection factory .
2580	Is external pooled connection factory .
2581	Gets the activeMQ server name .
2582	Gets the default persistence unit name .
2583	Start the activity .
2584	Unregister the activity .
2585	Suspend the activity .
2586	Resume the deployment .
2587	Called when an invocation has completed .
2588	Called when a transaction is created .
2589	Binds this resource to the naming store .
2590	Unbound resources .
2591	Gets the service name for a capability .
2592	Create the resources for the deployment .
2593	Gets all class loaders from the deployment unit .
2594	Returns true if the persistence unit file is needed .
2595	Determine whether the given persistence unit is a two phase bootstrap .
2596	Determine whether or not the default data source should be used .
2597	Determine whether or not the transaction manager should be skipped .
2598	Create an ORB object based on the supplied parameters .
2599	Initialize an ORB for the given applicationlet .
2600	Initialize the connect method handles
2601	Sets the active naming store .
2602	Validate default values
2603	Check the type of a parameter .
2604	Look up the default value annotation .
2605	Validate base type .
2606	Returns an array of all registered entity managers .
2607	Convert a transaction status code to a human readable string .
2608	Adds the cache dependencies for the given cache type .
2609	Extract dialects .
2610	Determine the dialect for the database .
2611	Identify dialect .
2612	Checks the database .
2613	Converts the given string to a scheduler date .
2614	Sets the node name .
2615	Marks a deployment unit .
2616	Read parameters from input stream .
2617	Writes the retval to the output stream .
2618	Writes an exception to the output stream .
2619	Performs a lookup .
2620	Begin a new SFSB call .
2621	Ends the call stack .
2622	Get the current call stack invocation .
2623	Push a call to the SFSB call stack .
2624	Pop the call stack .
2625	Get the current call .
2626	Add dependencies to the deployment .
2627	Process all managed beans .
2628	Process phase listeners .
2629	Returns the type IDL name for the given class .
2630	Insert a primitive value into a CORBA Any object .
2631	Convert Java IDL identifier to IDL name .
2632	Returns true if the given string is a reserved IDL keyword .
2633	Returns the signature for a class .
2634	Returns the signature of a method .
2635	Returns the primitive type name for a primitive type .
2636	Get BatchPermission by name .
2637	Gets the transaction scoped entity manager .
2638	Adds the specified value to the map .
2639	Convert a security role definition to a ModelNode .
2640	Returns the most recent timestamp for the given timer .
2641	Loads all timers associated with a timed object .
2642	Get the directory for the given timed object id .
2643	Adds a listener to the specified target scope .
2644	Remove a listener .
2645	Fire an event .
2646	Closes a value .
2647	Adds a credential to the subject .
2648	Create an object instance .
2649	Adds a tx management interceptor for a view .
2650	Sub substring of given string builder .
2651	Create transport configuration .
2652	Adds a WAR resource adapter name to the deployment unit .
2653	Gets the root deployment unit .
2654	Gets the service name .
2655	Create a view configuration object .
2656	Create an injection source .
2657	Returns the view interceptors for the given method .
2658	Adds view interceptor to all registered methods .
2659	Adds a view interceptor for a method .
2660	Returns the client interceptors for a given method .
2661	Adds a client interceptor to all registered methods .
2662	Adds a client interceptor for a method .
2663	Adds private data .
2664	Logs an unexpected element .
2665	Returns the list of JAXB Endpoints associated with the deployment .
2666	Retrieves a list of POJO endpoints from a deployment unit .
2667	Gets the endpoint name .
2668	Gets the endpoint class name .
2669	Returns the servlet metadata for the given name .
2670	Returns the required attachment .
2671	Gets an optional attachment .
2672	Gets the JBossWebMetaData from a deployment unit .
2673	Gets the named port component meta data .
2674	Retrieves the EJBEnd endpoint from the given class name .
2675	Gets the context root from the deployment .
2676	Load a class by name .
2677	Returns a resource URL .
2678	Returns all resources with the given name .
2679	Lists the resources for the given path .
2680	Pop the call stack .
2681	Get the entity manager for the given name .
2682	Registers after completion .
2683	Process the deployment .
2684	Update server configuration .
2685	Checks if all public fields are public .
2686	Creates a new HTTP endpoint .
2687	Creates a new deployment model .
2688	Determine whether the deployment is a JAXRS deployment .
2689	Sets the next timeout .
2690	Sets the timer state .
2691	Merge deployment data .
2692	Add component dependency .
2693	Add dependencies for remote transactions .
2694	Returns all container interceptors .
2695	Checks if the specified method is a level of the specified method .
2696	Checks that only one element is required .
2697	Returns the type associated with the given name .
2698	Gets the component type .
2699	Returns a resource definition for the given keystore .
2700	Returns a resource definition for the key manager .
2701	Returns a resource definition for the ESSron trust manager .
2702	Parses the given name .
2703	Convert an ins string into a Vector of Strings .
2704	Parse a name component .
2705	This method is called when the object is being deleted .
2706	Convert a CORBA object to a reference object .
2707	Authenticate a user .
2708	Is type matched .
2709	Lookup a binding .
2710	Unbinds the specified JNDI name .
2711	Utility method to instantiate the bean .
2712	Configure a bean .
2713	Dispatches a lifecycle join request .
2714	Returns the current selector .
2715	Convert a name to a bean name .
2716	Convert a class to an instance name .
2717	Replies the class with the given name .
2718	Processes the deployment annotations .
2719	PostParse the properties of the persistence_xml file .
2720	Validates the given descriptor .
2721	Create the deployment descriptor .
2722	Create the web application descriptor .
2723	Determine the authentication method for the deployment .
2724	Processes the deployment .
2725	Handles a stateless session bean .
2726	Creates a stub class .
2727	Returns an anonymous object id for an anonymous object .
2728	get PersistenceProvider list
2729	Clear the cache of deployment specific providers .
2730	Adds a persistence provider to the deployment list .
2731	Find the parent ModuleClassLoader .
2732	Add deployment dependencies .
2733	Add persistence unit services .
2734	Sets annotation indexes .
2735	Gets the persistence providerAdaptor .
2736	Saves the PersistenceProviderAdaptor associated with the deployment unit .
2737	Lookup persistence provider .
2738	Returns the annotations associated with the given uris .
2739	Build the EJB meta data .
2740	Build the bean meta data .
2741	Refresh the participant .
2742	Get a container analysis .
2743	Lookup the done for the given class .
2744	Creates a new container analysis for the given class .
2745	Gets the IDL module name .
2746	Converts an integer to a hexadecimal string .
2747	Converts a long to a hexadecimal string .
2748	Determine whether the method is an accessor method .
2749	Determine whether the method is a mutator method .
2750	Returns true if the method has non - application exceptions .
2751	Replies the name for an accessor .
2752	Returns the attribute write name .
2753	Fixup operation names .
2754	Fixup the case .
2755	Escapes an IR Name .
2756	Parses the environment element .
2757	Parses the default context propagation element .
2758	Process all element attributes .
2759	Load a persistent provider module by name .
2760	Creates a add operation handler .
2761	Add deployment dependencies .
2762	Checks whether the given model is marshallable .
2763	Gets the method interface from the invocation .
2764	Creates a session .
2765	Infer the destination name from the given address .
2766	Registers endpoint handlers for the given endpoint class .
2767	Gets the job names for the given job .
2768	Initialize the job .
2769	Returns the URI of the request .
2770	Creates a new ResolveResult using the supplied URL and env .
2771	Lookup a named object by name .
2772	Adds an object to the context .
2773	Calls the unbind method .
2774	Returns a list of bindings for the specified name .
2775	Calls destroy .
2776	Destroys a subcontext .
2777	Calls bind new context .
2778	Create a subcontext .
2779	Lookup a link by name .
2780	Adds a property to the environment .
2781	Removes a property from the environment .
2782	Adds the transformations to the builder .
2783	Parses the credential .
2784	Remove a security domain
2785	Lookup the JNDI for the given context .
2786	Create a ModularReference for the given type and factory .
2787	Create a new ModularReference .
2788	Create a ModularReference for the given type and address .
2789	Gets the LocalIDLType for a given TypeCode .
2790	Wait for the given controller to become up .
2791	Compute the masked password .
2792	Initializes the security vault .
2793	Initializes the security vault .
2794	Print a description of an attribute .
2795	Prints the vault configuration .
2796	Returns the configuration for the vault .
2797	Checks that the given value is not null .
2798	Gets the deployment service name .
2799	Insert a value into an Any object
2800	Checks whether the given JNDiPermission implies this permission .
2801	Gets the action string .
2802	Gets the name of the log file .
2803	Send a state change notification .
2804	Determine the state to bind to a CORBA object .
2805	Returns the value for the given type .
2806	Returns the context service name for this component .
2807	Returns all interceptors defined in this class .
2808	Adds a method interceptor for a method .
2809	Adds a service name .
2810	Returns the component interceptors for the given method .
2811	Gets the interceptor interceptors for a method .
2812	Adds a view interceptor for a method .
2813	Adds a new interceptorFactory to the list of AroundConstructors .
2814	Adds a postConstructorFactory to this container .
2815	Adds a preDestroyInterceptor to the registry .
2816	Adds a pre - pass interceptor to this container .
2817	Adds a new interceptor to be activated .
2818	Sets the component factory .
2819	Remove the JNDI aliases from the context .
2820	Inject the client context .
2821	Returns the context service name for a component .
2822	Returns the context service name for the given application and module name .
2823	Returns the bindInfo for the given environment .
2824	Returns the bind info for a given JNDI name .
2825	Returns a cache that caches all domains .
2826	returns a list of ValueMembers
2827	Returns an array of ValueMembers for this type code .
2828	Creates the subsystem root .
2829	Parses a configuration element .
2830	Start the naming service .
2831	Add a Weld Integration .
2832	Returns the service name for the job operator .
2833	Add a component .
2834	Add a message destination .
2835	Get the view components for a given view type .
2836	Get the components for a given component .
2837	Retrieves the views associated with the given component name .
2838	Resolve a message destination .
2839	Builds the transformers
2840	Reject attribute with default value .
2841	Rename an attribute .
2842	Pop the identity from the context cache .
2843	Loads the module IDs and their dependencies .
2844	Checks the validity of the version .
2845	Computes the slot for the given version .
2846	Get the type code for a given constant .
2847	Add a TypeCode for a given class .
2848	Create a module definition .
2849	Add interfaces from the given container .
2850	Get the abstract base value definitions .
2851	Adds a class .
2852	Add an interface definition .
2853	Add a value definition .
2854	Add an exception definition .
2855	Gets the class level injection type .
2856	Checks whether transactions are enabled .
2857	Initialize the controller .
2858	Close the context .
2859	Checks whether the given method is allowed to be invoked .
2860	Check if transaction sync is allowed .
2861	Retrieves all component classes for the given deployment .
2862	Gets the timers for the current transaction .
2863	Removes extra parameters from the map .
2864	Extract parameters from the model .
2865	Converts a Java Type to a Class .
2866	Converts the value of a property to an object type .
2867	Gets the types associated with the given values .
2868	Checks whether the given types are equal .
2869	Returns the next binding .
2870	Get more bindings .
2871	Creates a new binding .
2872	Observes health check procedures .
2873	Cleanup resources .
2874	Returns the CORBA object for the given locator .
2875	Returns a handle for the given locator .
2876	Converts a node to an enum value .
2877	Skips over the specified amount of bytes .
2878	Throws an exception if the elements are not present .
2879	Adds a component description .
2880	Add a set of class loaders .
2881	Unbind the specified name .
2882	Lookup a name .
2883	Returns a list of properties .
2884	Returns a list of bindings for the specified name .
2885	Adds a factory .
2886	Save a set of context objects .
2887	Create IO subsystem .
2888	Creates the migration handler .
2889	Gets a bean from the pool .
2890	Calculate the operation analysis map .
2891	Collects metrics for a resource .
2892	Prepare the deployment .
2893	Deploys the deployment .
2894	Publish the web application .
2895	Stop the deployment .
2896	Start the deployment .
2897	Registers an endpoint configuration .
2898	Retry the timer .
2899	Performs post - timeout processing .
2900	Get the declared methods of a class
2901	Get the declared fields of a class
2902	Get a constructor .
2903	Get a named method .
2904	Adds the active messaging extension .
2905	Checks whether a parameter is allowed by the resource type .
2906	Migrate a generic transport .
2907	Cancels the task .
2908	Runs this task if it is not cancelled .
2909	Sets the type of the property .
2910	Returns true if this clause can be executed in the given target .
2911	Estimates the number of conditions for a given class .
2912	Find all classes in the directory .
2913	Find all classes that implement the given interface .
2914	Gets the generic type of a field .
2915	Evaluates the passed in record .
2916	Derive the type of a field .
2917	Updates record .
2918	Find record by ID
2919	Get the minimal set of nodes for a sharded query .
2920	This is a helper method which moves all the rows from a flattened WHERE clause into a list of where clauses .
2921	Add order by projection .
2922	Extract sub - queries .
2923	Checks if is from cluster .
2924	Handle class with index .
2925	Returns true if the given class is a diamond hierarchy .
2926	Get order direction .
2927	Returns true if the given key condition requires multiple index lookup .
2928	Returns the best index for the given indexes .
2929	Builds the index search descriptor for fulltext .
2930	Calculate the common factor between two indexes .
2931	Creates a new document field handling strategy .
2932	Allow the user to execute the operation .
2933	Checks if the user has defined rule .
2934	Returns a string representation of the server status .
2935	Initialize the system database .
2936	Load local databases .
2937	Invoked when a member is removed .
2938	Evaluates a new lock manager .
2939	Selects the lock manager from the cluster .
2940	Commits the transaction .
2941	Rolls back the transaction .
2942	Updates the identity after a record commit .
2943	Update record cache after rollback .
2944	Prepare a file .
2945	Atomically moves the source file to the target .
2946	Gets disjoint patterns .
2947	Executes the given local node .
2948	Add characters to the builder .
2949	Returns true if the connection is connected .
2950	Merges two ByteBuffers into a short
2951	Split a short into two buffers .
2952	Execute the command .
2953	Put single value into index .
2954	Removes the given key from the map .
2955	Execute the query .
2956	Run the first query .
2957	Creates a new file .
2958	Checks to see if the portion of the file is valid .
2959	Replaces content file with new content .
2960	Execute a command .
2961	Send a request to the network .
2962	Add a new host .
2963	Sends a request to the server .
2964	Returns the current database connection .
2965	Gets a connection .
2966	Kills the connection .
2967	Interrupt a channel .
2968	Disconnect a channel .
2969	Push the configuration to clients .
2970	Swaps the entries at the given index .
2971	Release all locks .
2972	Synchronize all registered entities .
2973	Update the metadata .
2974	Move the iterator to the last record .
2975	Reads the next character .
2976	Execute the query .
2977	On asynchronous replication error .
2978	Registers a compression algorithm .
2979	Get the limit of concurrent files .
2980	Returns true if this clause is allowed on the given target .
2981	Move the buffer .
2982	Fill a number of bytes .
2983	Execute the execution until a return value is found .
2984	Execute full execution .
2985	Evaluate a record .
2986	Execute the query .
2987	Loads a database configuration .
2988	Parses the command request .
2989	Execute the command .
2990	Updates the schedule starting at the given start node .
2991	Adds a new index definition .
2992	Creates a projection that splits the expression .
2993	Determine the type of a result .
2994	Returns the collate for the given document .
2995	Returns the value of the property .
2996	Moves the probe value .
2997	Execute the DROP .
2998	Build an ODocument from a file .
2999	Checks if the password matches the password .
3000	Converts the input string to a hash function .
3001	Checks if the given algorithm is supported by PBKDF2 .
3002	Creates the index .
3003	Get all vertices in the graph
3004	Returns an iterable over all edges in the graph
3005	Gets the partition key .
3006	Gets the distributed timeout .
3007	Gets the features that are available for this class .
3008	Checks if a changes container is filled up .
3009	Parses the timeout value .
3010	Parses the lock .
3011	Creates a cluster .
3012	Frees all entries of the given cluster .
3013	Start profiling .
3014	Shutdown the database .
3015	Create a singleton result set .
3016	Grant an access to a resource .
3017	Revoke a rule .
3018	Executes the DELETE query .
3019	Bind parameters .
3020	Reduces all entries in the table .
3021	Returns the index of the specified item .
3022	Spread the given integer .
3023	Creates an index .
3024	Drops all indexes associated with this property .
3025	Returns the index .
3026	Returns the linked class .
3027	Serializes the model to a JSON document .
3028	Removes a listener .
3029	Register a database .
3030	Timeout a request .
3031	Returns a deep copy of this database .
3032	Merges the given value into this bag .
3033	Replaces the delegate .
3034	Transform result .
3035	Execute the cluster .
3036	Closes all pooled databases .
3037	Invoked when storage is unregistered .
3038	Returns a set of function names .
3039	Replies the names of all collate factories .
3040	Returns the names of all registered commands .
3041	Gets the size and type of the field .
3042	Write a response status code .
3043	Write the response headers
3044	Write records .
3045	Write a record
3046	Send this response .
3047	Send a stream
3048	Open a database .
3049	Closes the database .
3050	Waits for a collection to change .
3051	Decreases a component operation .
3052	Push the performance counters into the snapshot .
3053	Pushes a write cache counter onto the snapshot .
3054	Pushes storage counters onto the snapshot .
3055	Pushes a WALCountersHolder onto the snapshot .
3056	Push the statistics for the given component .
3057	Stop the write cache flush timer .
3058	Stop the fuzzy checkpoint timer .
3059	Stop the full checkpoint timer .
3060	Stop the commit timer .
3061	Stop the WAL record timer .
3062	Stop the write timer .
3063	Parses the given SQL statement .
3064	Initialize receive messages .
3065	Starts the check disconnect timer .
3066	Removes the record .
3067	Sets the property value .
3068	Remove a property .
3069	Checks if a class exists in the schema .
3070	Wrap the cursor .
3071	Define an attribute strategy .
3072	Define an attribute strategy .
3073	Returns a list of new record entries for the given class .
3074	Get record entries by cluster id .
3075	Adds a new index entry .
3076	Merges two sets .
3077	Updates the entity .
3078	Returns true if this clause can be executed in an index .
3079	Prepare keys .
3080	Writes a single page to the buffer .
3081	Reads a page from the disk .
3082	Truncate the specified page .
3083	Opens the file .
3084	Check if replication is active .
3085	Gets the new node strategy .
3086	Checks if the given cluster is synchronous .
3087	Checks if the given cluster is read - only .
3088	Get a map of server cluster names .
3089	Get a set of servers from a list of cluster names .
3090	Checks if a server contains all clusters .
3091	Checks if a server contains a cluster
3092	Returns a list of available servers .
3093	Gets a list of all the servers in the configuration .
3094	Get the cluster names of the specified INode .
3095	Get the names of clusters owned by the specified server .
3096	Returns the cluster owner .
3097	Returns the cluster owner .
3098	Gets the configured servers .
3099	Returns a set of registered servers .
3100	Returns the set of data centers .
3101	Get write quorum .
3102	Is sharded .
3103	Gets the list of servers .
3104	Gets the data center of a server .
3105	Gets the global read quorum .
3106	Gets the write quorum for a given server .
3107	Get the cluster configuration .
3108	Gets the data center .
3109	Clear the initialization stack .
3110	Gets an index .
3111	Drops an index .
3112	Add a new vertex with the given id .
3113	Add an edge .
3114	Retrieves a vertex from the graph .
3115	Get all vertices of the given class .
3116	Get all edges of the given class .
3117	Gets the edge corresponding to the given id .
3118	Reuse a database .
3119	Shuts down the context .
3120	Returns the base type of the vertex .
3121	Returns the type of the given type .
3122	Create a new vertex type .
3123	Drops a vertex type .
3124	Gets the edge type .
3125	Create an edge type .
3126	Gets an element by its id .
3127	Drops an element index .
3128	Creates an index for an element .
3129	Removes a specific listener .
3130	Fire exception event .
3131	Stops monitoring .
3132	Register a MBean .
3133	Unregister MBean with given storage id and storageId
3134	Fetch the write cache counters .
3135	Fills the statistics in the memory cache .
3136	Fetch all statistics for the given component .
3137	Compress the given json string .
3138	Returns the value of the specified property .
3139	Detaches an object from the cache .
3140	Gets the version of an object .
3141	Execute a command .
3142	Marks the given object as dirty .
3143	Unbinds the given object .
3144	Replies the set of index types .
3145	Replies the set of engine engines .
3146	Get a list of missing nodes .
3147	Returns a list of servers which should be sent to the cluster .
3148	Gets the best response group .
3149	Compute the quorum response .
3150	Returns the list of received responses .
3151	Gets the execution plan .
3152	Returns true if this clause is allowed on the given target .
3153	Replies the library library .
3154	Release a database engine
3155	Returns the next available position .
3156	Update the size of this bag .
3157	Gets the object at the given index .
3158	Checks if the given index can be used by the given index .
3159	Returns the index of the first character within the specified string .
3160	Jump to next white space .
3161	Returns the index of this character in the specified string .
3162	Sets the fetch plan .
3163	Enqueue a repair record .
3164	Cancel a record .
3165	Enqueue a cluster
3166	Gets the dependencies for a pattern .
3167	Create a new instance of the given class .
3168	Register entity classes .
3169	Register entity classes for the given class .
3170	Sets the entity handler .
3171	Acquires a DB .
3172	Get the number of available connections for the given user .
3173	Acquires a DB .
3174	Execute synchronization of a cluster .
3175	Lookup a provider with the given class loader .
3176	Check the cache memory configuration .
3177	Convert a JSON Object to a Vertex object .
3178	Creates an edge from a JSON object .
3179	Convert an element to a JSON object .
3180	Convert an element to an object node .
3181	Execute an import .
3182	Returns the current status of the current job .
3183	Returns a map of active data centers of all registered servers .
3184	Extracts the algorithm name from a cipherTransform .
3185	Creates an OMMetricKey from a given key config .
3186	Creates an asymmetric key from a file .
3187	Create an asymmetric key from an input stream .
3188	Encrypt a byte array
3189	Serializes the asymmetric key to an OutputStream .
3190	Save a symmetric key to a keystore .
3191	Sets child .
3192	Adds an element to the unique result .
3193	Gets the value of the field .
3194	Authenticate user .
3195	Get a map entry .
3196	Gets the record .
3197	Read the current record .
3198	Gets a transaction graph .
3199	Returns a new graph for this database .
3200	Setup database pool .
3201	Returns the named property .
3202	Stops a transaction .
3203	Parse a statement .
3204	Gets the next token .
3205	Gets the token at the given index .
3206	Generate ParseException .
3207	Returns an iterator over all vertices in the graph .
3208	Remove this vertex .
3209	Adds an edge to the graph .
3210	Add an edge to the graph .
3211	Get the connection class name .
3212	Get a connection .
3213	Processes the list of records that were detected in the database .
3214	Returns a map of methods for this context .
3215	Execute a task on a local node .
3216	Get the number of nodes with the given status .
3217	Backup operation .
3218	Wait for next retry .
3219	Returns the argument at the given index .
3220	Checks if the request contains any parameters .
3221	Connects to the server .
3222	List all databases .
3223	Retrieves information about a server .
3224	Checks if a database exists .
3225	Drops a database .
3226	Free a database .
3227	Release a database .
3228	Gets cluster status .
3229	Execute the index .
3230	Gets a new active graph .
3231	Parses a retry .
3232	Saves the record .
3233	Deletes the record .
3234	Gets the authentication header .
3235	Authenticate a user .
3236	Checks if the user is authorized .
3237	Runs the server .
3238	Adjusts the line and column indices for a token .
3239	Sets the bucket index .
3240	Gets the pointer for a bucket .
3241	Ends an atomic operation .
3242	Acquires an exclusive lock on an atomic operation .
3243	Changes the maximum amount of memory in memory cache .
3244	Try to create a server socket .
3245	Read parameters .
3246	Shutdown LogManager
3247	Add an item to the store .
3248	Removes the entry from the map .
3249	Acquires an entry .
3250	Returns the value associated with the given key .
3251	Clear all entries .
3252	Closes the entry .
3253	Empty read buffers .
3254	Adds a task to the state buffer .
3255	Invoked after a read .
3256	Put entry in read buffer .
3257	Returns the nearest power of two given value .
3258	Handles a push request .
3259	Convert the value into an enumeration .
3260	Convert all entries in the underlying map .
3261	Get a serializer for the given type .
3262	Add the shutdown handler .
3263	Get engine by engine name .
3264	Execute a simple optimization .
3265	Execute a query .
3266	Creates a new state .
3267	Authenticate an OAuth token .
3268	Creates the metadata .
3269	Attempts to acquire a read lock .
3270	Gets the current vertex .
3271	Returns the unique identifier for this element .
3272	Sets the property .
3273	Removes the value of a property .
3274	Clear the contents of this bucket .
3275	Deletes this bucket .
3276	End the batch import .
3277	Create a vertex .
3278	Parses a strategy word .
3279	Retrieve position information from embedded collection .
3280	Execute the query .
3281	Fixes a link .
3282	Fill a record .
3283	Sets the version of the record .
3284	Gets the record type .
3285	Initialize database instance .
3286	Prints the stack trace .
3287	Execute index query .
3288	Convert the item to record .
3289	Register command instance .
3290	Create a server user configuration .
3291	Analyze condition .
3292	Create the indexed property .
3293	Attaches all fields of the given object to the given object .
3294	Gets the index class .
3295	Sets the next value .
3296	Truncate this class .
3297	Adds a base class .
3298	Adds the cluster ids to the index .
3299	Serialize a link to a buffer .
3300	Releases a pointer to the pool .
3301	Checks if there is unreleased memory leaks .
3302	Clear all internal pointers .
3303	Convert a byte array to an int .
3304	On open .
3305	Installs the cluster with the given class .
3306	Dump the server status .
3307	Returns the index of the first occurrence of the given object .
3308	Gets the first index of an object in an array .
3309	Gets the cluster names .
3310	Handle a result .
3311	Returns the temporary rid counter .
3312	Reports a tooltip .
3313	Parse a fetch plan .
3314	Parses the no - cache flag .
3315	Optimized sort .
3316	Returns the current status of the batch .
3317	Executes the command .
3318	Handle an error .
3319	Puts an index value .
3320	Rolls back the given micro - transaction .
3321	Execute a command .
3322	Register a cluster .
3323	Sets the specified property .
3324	Execute the CREATE CLASS .
3325	Execute the sync command .
3326	Delete record .
3327	Calls the hooks of the specified type .
3328	Delete the record .
3329	Counts the number of views in the database .
3330	Get the number of classes in the database .
3331	Activate the record on the current thread .
3332	Registers an encryption algorithm .
3333	Returns the index of the relative position of the given position .
3334	Parses an optional word .
3335	Parses the next word .
3336	Parses the next characters .
3337	Parses the next keyword .
3338	Check if the parser has a separator .
3339	Execute the command .
3340	Clear configuration files .
3341	Returns the offset of this buffer as a byte array .
3342	Extract the token .
3343	Obtains an access token for the resource .
3344	Copy the access token .
3345	Checks if there is more characters .
3346	Read a line from a byte array .
3347	Read a line from the buffer .
3348	Skips over the specified number of bytes .
3349	Skips the specified number of bytes .
3350	Checks that the given offset and length is valid .
3351	Implements the sort algorithm .
3352	Swap two elements .
3353	Performs a quick sort .
3354	MurmurHash3 function .
3355	MurmurHash3 function .
3356	Writes a byte buffer .
3357	Truncate the file .
3358	Changes the position of the underlying stream .
3359	Notifies that the consumer has failed .
3360	Waits for all the tasks to complete .
3361	Executes the given query .
3362	Returns a list of schemas that can be compaction targets .
3363	Deletes snapshots .
3364	Returns a hash code for a field .
3365	Checks whether two positions are equal .
3366	Removes all schemas that have been referenced by a closure .
3367	Called when the announcement is successful .
3368	Called when a cycle is completed .
3369	Reads the header tags .
3370	Extracts the primary key from an object .
3371	Clear all segments .
3372	Reads ordinals from a stream .
3373	Returns the size of the sparse set .
3374	Returns the field value .
3375	Copies the contents of the given ByteData into this buffer .
3376	Copies data from srcPos to destPos .
3377	Returns true if this SegmentedByteArray is equals .
3378	Copies bytes from src to destPos .
3379	Copy bytes from srcPos to destPos and destPos .
3380	Reads a sequence of bytes from an input stream .
3381	Writes len bytes to an output stream .
3382	Ensures that the given segment index exists .
3383	Gets the position of a field .
3384	Calculates the size of buckets and total number of buckets .
3385	Determine whether a dataset has a collection schemas .
3386	Generate the files for the given directory .
3387	Generate files forollow schemas .
3388	Returns true if the given key matches the given ordinal .
3389	Gets the record key .
3390	Creates a field path for a primary key .
3391	Create a field path for hash index .
3392	Create a field path for a prefix index .
3393	Put an object into the table .
3394	Initialize the internal data structures
3395	Returns true if the cache contains the specified key .
3396	Gets the percentage of the change .
3397	Add a field to the list of objects for the specified type .
3398	Returns a list of schemas ordered by their name .
3399	Initialize with default version defaults .
3400	Gets the value at the given index .
3401	Find records that match the given field name and value .
3402	Finds records matching the given field name and value .
3403	Set element match paths .
3404	Sets the element key paths .
3405	Calculate the indexes .
3406	Restores the state of the journal .
3407	Runs a cycle .
3408	Excludes the primary key .
3409	Excludes objects that are not referenced by this object .
3410	Write a HttpBlob header to the stream
3411	Calculates the heap footprint of each type .
3412	Writes the data to the specified buffer .
3413	Writes a fixed - length integer .
3414	Writes a fixed - length 64 - bit long .
3415	Adds an ordinal to the pool .
3416	Sorts the freeOrdinals .
3417	Generates a hash for the given array of fields .
3418	Creates a hash value for the given key .
3419	Resize storage .
3420	Find a free ordinal .
3421	Sets up the pointers for write operations .
3422	Compares the given serialized representation with the given key .
3423	Grows the key array .
3424	Rehash the given key .
3425	Create an empty key array .
3426	Checks if two fields are equal
3427	Finds a specific type .
3428	Swap a ReadStateHelper to a ReadStateHelper
3429	Calculate the hash table size .
3430	Actual compaction cycle .
3431	Writes a snapshot of the state machine .
3432	Writes the delta to the given output stream .
3433	Adds schema names to the given set if it doesn t exist .
3434	Normalize a field path .
3435	Reindex the hash index .
3436	Finds all matching matches .
3437	Trigger an async refresh with a random delay .
3438	Triggers refresh .
3439	Adds a shallow diff for a particular type .
3440	Calculates the type diff .
3441	Writes a 64 - bit long .
3442	Writes a vInt to the stream .
3443	Writes a VInt to the byte array at the given position .
3444	Read a VInt from the stream .
3445	Read a long value from the stream .
3446	Adds the child view .
3447	Refresh the size of the loading buttons .
3448	Update the UI for the mode .
3449	Performs a pull event .
3450	Overrides the scroll by the specified delta .
3451	Adds a new rule with the given name and value .
3452	Adds the given facts to the given rule .
3453	Creates a new builder .
3454	Creates a new rule builder .
3455	Returns a builder for the specified rule .
3456	Returns a builder for the specified result type .
3457	Creates a new rule .
3458	Creates a new rule builder .
3459	Creates a new AuditableRule .
3460	Creates an instance of the given rule .
3461	Gets the annotated field .
3462	Gets the first annotated method .
3463	Gets an annotation .
3464	Registers an Auditable rule .
3465	Updates the status of the given rule .
3466	Returns the rule status map .
3467	Sets the result type .
3468	Adds an action to the rule .
3469	Adds an action to the rule .
3470	Resets the default value .
3471	Adds a new rule to the rule book .
3472	Gets the pojo rules .
3473	Reads an empty line .
3474	Convert a list of Services to an array of Services .
3475	Gets the ports from the build configuration .
3476	Extract port mapping from configuration .
3477	Parses a port mapping configuration .
3478	Add port if not null .
3479	Remove or return a port from the list .
3480	Add missing ports to the service .
3481	Append image stream resource .
3482	Checks whether the port matches the given int or string .
3483	Converts a service name to a port .
3484	Returns the host and port for the given service name .
3485	Puts the value if it doesn t already exist .
3486	Merges the given map with the given map .
3487	Merge two maps .
3488	Put all values in map if not null .
3489	Waits until the given pod is ready .
3490	Validates a KubernetesId .
3491	Converts an object to a list of objects .
3492	Gets the resource version .
3493	Checks if a pod is ready .
3494	Gets the current context .
3495	Checks whether the given list builder contains a route with the given name .
3496	Checks whether a project has a resource .
3497	Read and validate the content of a file .
3498	Convert an EnvVar to an EnvVar list .
3499	Merge resources .
3500	Merges the given map and removes empty strings .
3501	Checks whether a pod is a localisation .
3502	Reads a configuration file .
3503	Adds a port if it is valid .
3504	Generate docker json configuration string
3505	Looks up a plugin configuration .
3506	Gets the secret configuration .
3507	Downloads a file at a given URL .
3508	Compare two versions .
3509	Merges the profile with the specified profile and configuration .
3510	Lookup a profile .
3511	Read all profiles from classpath .
3512	Read all profiles from classpath .
3513	Finds the profile file for the given directory .
3514	Get a list of profiles for the given extension .
3515	Read a list of profiles from an input stream .
3516	Gets the image pull policy .
3517	Determine if OpenShift mode is currently running .
3518	Get the replica count .
3519	Returns the first child element with the given name .
3520	Installs a Template .
3521	Remove tags with given name .
3522	Apply a new namespace
3523	Applies a project .
3524	Applies a project request .
3525	Returns the namespace for the given entity .
3526	Invoked when an error occurs .
3527	Creates the default Kubernetes .
3528	Enrich the Kubernetes
3529	Gets environment variables .
3530	Convert duration duration to seconds .
3531	Parses the duration in milliseconds .
3532	Scans the output directory for files matching the given pattern .
3533	Disables OpenShift features .
3534	Checks whether a service has an Ingress rule .
3535	Parses the content of a file .
3536	Creates the generator context .
3537	Extracts the generator configuration .
3538	Creates the Enricher context .
3539	Extracts enricher configuration from configuration .
3540	Returns default icon .
3541	Copies all files from the given app build directory .
3542	Load a properties file from a URL .
3543	Gets the boot version from the given Maven project .
3544	Creates a list of service objects .
3545	Enrich enricher .
3546	Gets the raw configuration .
3547	Returns the flattened map .
3548	Extract the config from the watcher profile .
3549	Gets the singleton template from the list .
3550	Gets the date from the build date .
3551	Gets the value for the given key .
3552	Gets a configuration parameter .
3553	Prepare processors .
3554	Adds the configuration to the builder .
3555	Gets the from mode .
3556	Determine the name of the image .
3557	Returns the registry .
3558	Returns whether or not the platform is online .
3559	Gets the service URL .
3560	Returns the boolean value of the given property .
3561	Creates a new JestClient .
3562	Create internal node .
3563	Scan plugins .
3564	Converts JSON string to American Express rewards balance .
3565	Handles the payment balance .
3566	Construct a PayPal payment resource from a JSON string .
3567	Performs an HTTP GET request .
3568	Perform an HTTP POST request .
3569	Create a new VenmoConfiguration from JSON .
3570	Collect device data from a fragment .
3571	Collect device data .
3572	Collect paypal device data .
3573	Gets the client metadata id .
3574	Checks if the signature of a package is valid .
3575	Get a property as a string .
3576	Parse a list of payment method nonce
3577	Gets the browser checkout configuration .
3578	Gets the billing agreement config .
3579	Executes a GET request .
3580	Posts a POST request to the server .
3581	Performs a POST request .
3582	Starts a transaction .
3583	Renders a local payment request .
3584	Adds a listener .
3585	Removes the given listener .
3586	Requests a Billing Agreement .
3587	Handles an activity result .
3588	Parses the paypal request .
3589	Converts a list of words to a dictionary .
3590	Removes a word from the dictionary .
3591	Converts a list of tokens to a list of strings .
3592	Extract phrases from a tokenizer .
3593	Detokenize a list of tokens .
3594	Fetches a buffer from a channel .
3595	Join a list of NAL units into a byte buffer .
3596	Joins a list of NAL units into a buffer .
3597	Returns the profile for the specified integer .
3598	Calculate the precision of the given number of taps .
3599	Reads to the next marker .
3600	Reads the next marker .
3601	Returns the maximum frame number .
3602	Modify a file .
3603	Copies all fragments from src to dst .
3604	Gets the duration of a track .
3605	Convert a frame to a time value .
3606	Convert a time value to a frame .
3607	Checks whether the media has been edited .
3608	Converts the edited duration to a media time .
3609	Get the qt frame number for the given media frame
3610	Returns the qt player time for a movie
3611	Converts a timecode track into a timecode frame .
3612	Converts a timecode track into a formatted string .
3613	Calculate a 7 value .
3614	Utility function to set a value in a list .
3615	Checks whether this color space matches this color space .
3616	returns a smaller size
3617	Creates a Demuxer
3618	Reads the data from the cache .
3619	Creates a WAV header .
3620	Create a WAV header from a list of headers .
3621	Parses the audio data .
3622	Encodes a symbol .
3623	Reads a decoder file .
3624	Splits a movie into two tracks .
3625	Decodes a single frame .
3626	Set the bit - endian flag .
3627	Determines the integrity of a buffer .
3628	Converts a picture into a video frame
3629	Encodes the given value into a base64 - encoded length .
3630	Returns the length of the given long value .
3631	Add a packet .
3632	Reposition the reader .
3633	Decode a binary bin .
3634	Decodes a binary bypass .
3635	Gets the next marker .
3636	Returns a sample frequency for an integer .
3637	Assigns to the target plane .
3638	Starts a new block in the given block .
3639	Computes the coefficients of a block
3640	Calculate all digits in the block .
3641	Concatenates two bits .
3642	Rewind a value in reverse order .
3643	Rewind a range in reverse order .
3644	Seeks to the next key frame
3645	Get the pixel buffer for the first frame .
3646	Gets the change point ID for the given lng .
3647	Converts a byte array into an int array .
3648	Converts an array of ints into a byte array .
3649	Converts a Float into a float buffer .
3650	Creates a float from a float buffer .
3651	Interleave a byte buffer into the output buffer .
3652	Converts a buffer into an array of bytes .
3653	Returns the size of the video track .
3654	Builds the group out of the boxes .
3655	Builds the swipe map .
3656	Read a batch of data from a ByteBuffer .
3657	Read a 32 - bit integer .
3658	Calculate the median
3659	Encode a picture .
3660	Encode an IDR frame .
3661	Encode a PFrame .
3662	Returns a list of supported codecs .
3663	Returns a list of supported tags .
3664	Adds a reference to the list .
3665	Deletes all references .
3666	Deletes all valid references .
3667	Loads a library .
3668	Try to find a library .
3669	Deletes all temporary files .
3670	Returns the default layout for the given channels .
3671	Gets the audio channel from the given layout .
3672	Create a new media packet .
3673	Gets the version information .
3674	Returns the default time base .
3675	Make a new demuxer .
3676	Play a video .
3677	Display the image at the correct time .
3678	Create a new codec descriptor .
3679	Prints a configuration option .
3680	Registers a factory for the given protocol prefix .
3681	Generates a unique name .
3682	Make a new audio resampler .
3683	The list of supported video frames .
3684	The supported video format .
3685	The supported audio sample rates .
3686	The supported audio formats .
3687	The supported audio channel layouts .
3688	Sets a flag .
3689	Sets a 2 - bit flag .
3690	Returns a new decoder
3691	Returns the current Demuxer
3692	Returns a list of supported formats .
3693	Make a filter graph .
3694	Returns the type of the filter
3695	Get a ByteBuffer for a given offset .
3696	Creates an audio frame .
3697	Resample the input picture .
3698	Validates the supplied image .
3699	Validates the given media picture .
3700	Gets the filter graph .
3701	Gets the metadata of the video .
3702	Gets the CPUArch from a java cpu .
3703	Gets the CPUArch from a string representation .
3704	Gets the OS family from the operating system name .
3705	Gets the OS family from a string .
3706	Play a sound .
3707	Load a library .
3708	Sets the major version of a library .
3709	Load a candidate library .
3710	Initialize search paths .
3711	Checks whether a library is already loaded .
3712	Record the recorded screen .
3713	Deletes this thread .
3714	Returns a stream for the specified position .
3715	Returns the current Muxer
3716	Make a set script transaction .
3717	Decodes base58 string .
3718	Generate a random seed .
3719	Gets a transaction .
3720	get transactions for a given address
3721	Retrieves the transactions for a given address .
3722	Returns the sequence of blocks in the given range .
3723	Get a single block .
3724	Sends a transaction .
3725	Send a script to a private key account .
3726	Compile a script .
3727	Write primitive array .
3728	Flush the buffer .
3729	Writes an object to memory .
3730	Read the class info for this file
3731	Writes the given object into the given buffer .
3732	Sets the data for the mmFFF data .
3733	Returns the specificity of a given class .
3734	Resizes the underlying store to the required memory .
3735	Removes an entry from the set .
3736	Write an ASCII string .
3737	Sets the output stream .
3738	Create a JSTConfiguration with the given parameters .
3739	Create a new structure configuration .
3740	This method calculates the size of an object not a byte array
3741	Clears all cached objects .
3742	Gets the object input .
3743	Gets the object input .
3744	Create an object input copy from a byte array .
3745	Gets the object output .
3746	Register a cross - platform mapping .
3747	Gets the CP name for a given class .
3748	Write int .
3749	Writes a raw int .
3750	Write int .
3751	Write an array .
3752	Writes a raw name into the buffer .
3753	Gets a cached field info for this field .
3754	Called when the object has been written .
3755	Called when an object has been written .
3756	Get the FSTClazzInfo for the given field .
3757	Write array .
3758	Set the buffer .
3759	Writes a primitive array .
3760	Finishes tracking changes .
3761	snapshot changes from origin to origin
3762	Register an object .
3763	Writes an object into a byte array .
3764	Reads an object from the stream .
3765	Read a byte array from the buffer .
3766	Reads a 32 - bit integer .
3767	Move the buffer back .
3768	Enables or disables the thread pool .
3769	Starts the cassandra daemon .
3770	Cleans data from Cassandra .
3771	copy file from classpath to directory
3772	Prints all thread information about this thread .
3773	Checks if the remote port has been taken .
3774	Returns an empty subscriber state .
3775	Reads all the op descriptors from the classpath .
3776	Calculate the output shape .
3777	Performs a logical OR operation on a complex number .
3778	Test if ndarray is satisfied
3779	Performs the logical AND operation on the specified dimension
3780	Perform logical OR operation
3781	Apply condition to ndarray
3782	Get the first index
3783	Produces a FlatProperties object .
3784	Creates a FunctionProperties object from FlatProperties .
3785	Convert a collection of FunctionProperties to a representation of the FlatBuffer .
3786	Sets the exception .
3787	Set the exception if it is null .
3788	Merges two lists into a list of coordinates .
3789	Partition a list by chunk .
3790	Convert an onnx type to the nd4j type .
3791	Shutdown the transport .
3792	Gets the architecture of the current device .
3793	Convert a column to an image
3794	Pooling 2D images
3795	Creates a CompressionDescriptor from a byte buffer .
3796	Partitions the list into batches .
3797	Verify that all arrays have the same dimension
3798	Sets the opType
3799	Linear interpolation function
3800	Convert a collection of matrices into a flattened array
3801	Apply bilinear products on a tensor
3802	Create a complex ndarray from a data array .
3803	Create a complex number vector with a given value
3804	Create a complex vector with a given value
3805	Determines if the journal should be replicated .
3806	Subtract two complex numbers .
3807	Calculate the natural of a complex number .
3808	ceil of a complex number
3809	Negate a complex number .
3810	Returns the absolute value of a complex number .
3811	Raises a complex number to a complex number .
3812	Creates an Aeron context .
3813	Binaryarization for a given threshold
3814	Sample a dataset
3815	Get memory footprint
3816	Convert an exception to a string .
3817	Returns the simple hostname of the given full hostname .
3818	Convert an array of Strings to a string .
3819	Converts a byte array into a hex string .
3820	Get the values from the given string .
3821	Splits the given string using the given escape character .
3822	Splits the given string using the given separator .
3823	Find the next character in the given string .
3824	Escape special characters .
3825	Joins the given strings using the given separator .
3826	Converts a string to camelize .
3827	Replaces all tokens in the given template with their replacement values .
3828	Gets the stack trace .
3829	Inverse matrix
3830	Returns the number at the specified number .
3831	Checks whether the read is on the host side .
3832	Checks whether access is on device side .
3833	Create shape information .
3834	Create shape information .
3835	Checks if the shape is a vector
3836	Get the order for an ndarray
3837	Calculate the offset for the shape
3838	Convert an array of indices to an array of indices .
3839	Gets a short from the buffer .
3840	Reallocate a new data buffer .
3841	Copies a number of bytes at a specific stride .
3842	Returns a constant buffer for a given float array
3843	Returns the Kafka URI for the Kafka broker .
3844	Compute the power function of an array
3845	Log scalar function .
3846	Maximum function with a scalar value
3847	Max function .
3848	Minimum function .
3849	Computes the minimum element of two arrays .
3850	Stabilize the ndarray
3851	Expm 1
3852	Log1p function .
3853	Prepare the bounds for x
3854	Adjusts the scheme to fit in bounds
3855	Returns the next dataset .
3856	compute the QR decomposition
3857	Build the allocation shape
3858	Checks if a file exists in the system environment variable .
3859	Read data from input stream
3860	Checks the tail of the last command .
3861	Create an ndarray from a ndarray
3862	Create an ndarray from a file
3863	Allocate memory for this workspace
3864	Attaches a lock on this thread .
3865	Checks whether the server is started .
3866	Executes the given op .
3867	flush the queue
3868	Returns an input stream to the resource .
3869	Gets the device id for a thread .
3870	Attaches a thread to a device .
3871	Gets the next available device .
3872	Gets the operating system name .
3873	Calculate the ARCH type .
3874	Publish an ndarray
3875	Starts the instrumentation application .
3876	Creates a data buffer .
3877	Intercepts a op .
3878	Add two complex numbers .
3879	Process the message .
3880	Avg pooling 3d operation .
3881	Depth - wise conv2d operation .
3882	Resets all variables .
3883	Returns the string representation of the given Op .
3884	Store and allocate a new array
3885	Returns the shape of this variable
3886	Evaluate the output
3887	Compress a double array
3888	Flatten the array of complex numbers .
3889	Center the given shape
3890	Truncate a complex ndarray
3891	Pad the specified number of elements with the specified number of zeros
3892	Returns the index of the element with the highest value .
3893	copy a vector
3894	Sends a vector aggregation .
3895	Returns the gamma value .
3896	Returns the square root of a square .
3897	Returns the root of a given number .
3898	Returns the root of a power of n .
3899	Returns the exponent of the given number .
3900	Calculate the exponential number .
3901	Raises x to y .
3902	Rounds a number to n .
3903	Returns the sin of a number .
3904	Returns the tan of the specified number .
3905	Calculate the cosh function .
3906	Compute the sinh function .
3907	an tanh function .
3908	Compute the inverse of a number .
3909	Calculate the power of a number .
3910	Gamma function .
3911	Performs a broadBBP .
3912	Returns a BigDecimal with the specified number of d .
3913	Scales the given BigDecimal with the given precision .
3914	Convert an error to precond value .
3915	Put the function for the given id
3916	Get input arguments
3917	Update the vector for the given variable name
3918	Put the shape for the given variable name
3919	Associate an array with the given SDVariable
3920	Gets property for given function instance .
3921	Add a property to the network
3922	Adds a function to the list of output functions .
3923	Add function arguments for given variables .
3924	Has args boolean .
3925	Evaluate the pipeline .
3926	Create a new variable with the specified shape
3927	Assigns an array with the specified shape
3928	Creates a new SDVariable with the specified shape
3929	Remove argument from function .
3930	Sets the gradient for the given variable name
3931	Average pooling 3d operation .
3932	The gruell operation .
3933	Execute a list of differential functions
3934	Create a While statement .
3935	Execute the function .
3936	Execute the function
3937	Execute backward and return result
3938	Adds a place holder variable .
3939	Allocate memory for a given number of bytes
3940	Returns the length for a given opType .
3941	Returns a descriptor for the given type .
3942	Get the type from the context
3943	Get op number by name
3944	Destroy all workspaces for current thread
3945	Print the allocation statistics for the current thread .
3946	trim matrix
3947	Receive an ndarray
3948	Execute the accumulation operation
3949	Perform threshold decode .
3950	Gets the node name .
3951	Invoke the given scalar operation on the target dimension
3952	Assert that no workspaces are currently open
3953	Returns the log - likelihood of the given labels
3954	Request a new tick .
3955	Tries to fetch a toe .
3956	Releases the object to Bee
3957	Returns the current access state .
3958	Build an environment
3959	Processes the clipboard .
3960	Initialize the current dataset
3961	Init garbage collector threads
3962	Returns device pointer .
3963	This method is used to synchronize local memory data structures
3964	Applies the gradient at the given iteration
3965	This method blocks until the given point is available .
3966	Create an ndarrayIndex from a given matrix
3967	Returns the properties for this function .
3968	Returns true if this function has placeholder inputs .
3969	Perform the diff operation .
3970	Format an INDArray .
3971	Imports a given graph .
3972	Convert an array to a blob
3973	Load a complex number from a blob
3974	Saves the data .
3975	Copy the real values of this complex matrix to the given array
3976	Copy the imaginary elements of this complex matrix into the given array
3977	Sets the epsi of this complex number .
3978	Copies values from another complex array to this one .
3979	Get the rows of a matrix
3980	Put a row at a row
3981	Put column of a column
3982	Subtraction of two complex INDArrays
3983	Add two ndarray
3984	Subtracts the result of this complex matrix .
3985	Add two complex numbers .
3986	Assigns a number to this complex array
3987	Returns a copy of this matrix .
3988	Returns eigenvalues of a matrix
3989	Calculates the generalized eigenvalues of A and B
3990	Returns the maximum element of a complex matrix .
3991	Copies the elements of two complex arrays .
3992	Computes the product of a complex number .
3993	Iterate over rows and row vectors
3994	Counts the number of elements that are not zero
3995	Performs the given reduction .
3996	Returns a no - arg constructor for the given class .
3997	Returns a MethodHandle for the given class .
3998	Invokes the given method handle with the given parameters .
3999	Gets the first annotation of the given type .
4000	Gets a declared annotation on the given class .
4001	Checks if a declared annotation is present on the given class .
4002	Creates a proxy for the given result and result .
4003	Loads the given entity .
4004	Saves the given pojo .
4005	Create a MemcacheService from memcacheService .
4006	Gets the metadata for the specified kind .
4007	Queries a keys - only query .
4008	Queries a key query .
4009	Performs a normal query .
4010	Queries a projection query .
4011	Performs a count query .
4012	Partition the iterator .
4013	Loads results from the given keys .
4014	Returns a message for the given path .
4015	Creates a key for the given object .
4016	Compare two objects with identity hash code .
4017	Converts raw raw data to a Key .
4018	Converts a typed Key to a Java Key .
4019	Gets the kind of the entity .
4020	Returns true if the given type is missing .
4021	Determine if a super type is a supertype of a super type .
4022	Get exact super types of a given type .
4023	Capture a type .
4024	Gets the translator for the given type key .
4025	Gets the populator .
4026	Checks whether the given class is index instruction .
4027	Returns true if the given method is of interest .
4028	Returns a list of all the properties of the given class .
4029	Gets the key metadata .
4030	Get the value for the given key .
4031	Execute the transaction .
4032	Fetch pending entities .
4033	Adds the indexed discriminators .
4034	Registers a translator .
4035	Gets the collection component type .
4036	Gets the key type .
4037	Creates a forward path .
4038	Gets the final path .
4039	Returns the string representation of this node .
4040	Returns the depth of this path .
4041	Put a collection of buckets .
4042	Empty all keys in the cache .
4043	Put all buckets in the cache if they are untouched .
4044	Retrieve the values from the memcache .
4045	Returns the keys of the given buckets .
4046	Recursively searches the class hierarchy for the given class .
4047	Saves the entity to the container .
4048	Sets the id of the given pojo .
4049	Returns the raw parent of the given pojo .
4050	Register a translator for the given type key .
4051	Checks if two types have a common subtype .
4052	Transforms the given owner type .
4053	Look up an annotation on this type .
4054	Adds all values from another session .
4055	Loads a key into the chain .
4056	Executes the round .
4057	Translates a raw result into a Map .
4058	Fetches a set of entities .
4059	Loads the given entity .
4060	Convenience method to create a raw key .
4061	Converts a Key to a raw Key .
4062	Extracts the id value from the given key .
4063	Converts a string to a Google Cloud Datastore key .
4064	Creates a transactional object with transactionless .
4065	Executes a transactional transaction .
4066	Runs a transactional transaction .
4067	Checks if the given value matches the given conditions .
4068	Returns an Objectify that can be used to instantiate the object .
4069	Returns an asynchronous datastore if cache is enabled .
4070	Get the metadata for the given object .
4071	Allocate a number of keys in the datastore .
4072	Opens a new stack .
4073	Close the given object .
4074	Makes sure that index is homogeneous .
4075	Creates a Ref object
4076	Retrieves the object from the cache .
4077	Add a value to the list .
4078	Returns true if this task is done .
4079	Generate if conditions .
4080	Finishes the engine .
4081	Gets the container of the specified type .
4082	Gets the Stat object for a specific kind .
4083	Unwraps the given exception .
4084	Returns the translator for the given type key .
4085	Gets the translator for the given type .
4086	Creates a translator for the given type key .
4087	Loads the entity into a POJO .
4088	Tries to load a property from the given container .
4089	Sets the value of a property .
4090	Saves the value .
4091	Gets the property value .
4092	Writes all extensions to the message .
4093	Writes a category .
4094	Writes a list of categories .
4095	Process the given snippet .
4096	Returns the bids for the given bid response .
4097	Search for a specific bid .
4098	Updates the list of bids in the given response .
4099	Removes bid bids from the response .
4100	Returns the set of imps that match the specified bid request .
4101	Reads all extendable extensions .
4102	Returns true if the current token is empty .
4103	Registers a custom reader for the given class .
4104	Register a custom writer for a given class .
4105	This method is called to process the snippets .
4106	Process fields .
4107	Updates the given set of objects using the given updater .
4108	Filters all objects that match the given filter .
4109	Gets the current name .
4110	Reads the next token .
4111	Starts parsing an array .
4112	Peek the current token .
4113	Writes a boolean field to the given JSON generator .
4114	Writes a list of strings to the given JSON generator .
4115	Writes a list of integers .
4116	Writes a list of longs to the given JSON generator .
4117	Writes a list of enums to the given JSON generator .
4118	Creates a new URL .
4119	Fixes pure query parameters .
4120	Gets the host segments of a URL .
4121	Get the host of a URL .
4122	Converts a URL to URL .
4123	Load parameter list from storm configuration
4124	Extract config element from configuration .
4125	Returns the protocol for the given URL .
4126	Generate a WWC info message .
4127	Extract refresh URL .
4128	Returns the metadata for the outlink .
4129	Filters metadata .
4130	Adds a scheduled URL to the queue .
4131	Checks a field name .
4132	Gets the charset name .
4133	Get charset from content content .
4134	Retrieves the charset from a buffer .
4135	Checks whether the given byte array is sniffed .
4136	Sets a value for a key .
4137	Gets the first value of the specified keys .
4138	Convert a list of cookies to a list of cookies
4139	Check if cookie match to url
4140	Creates a cache key for the given URL .
4141	Get the robot rules set from the cache .
4142	Extract meta tags from a doc fragment .
4143	Ack .
4144	Checks whether the given URL matches the given metadata .
4145	Filter the given URL string .
4146	Read rules from a file .
4147	Process query elements .
4148	Loads the navigation filters from storm configuration .
4149	Add a record format
4150	Calculate how many queries should be executed .
4151	Checks if a query is triggered .
4152	Load ParseFilters from storm configuration .
4153	Append a node to the current node .
4154	Add ignorable whitespace .
4155	Add a processing instruction .
4156	Add a comment .
4157	Add a CDATA section .
4158	Filter a DTD declaration .
4159	Receive notification of a prefix mapping .
4160	Returns the canonical value for the given URL .
4161	Trims the specified text .
4162	Checks a duration for a custom interval .
4163	Loads the URL filters from storm configuration .
4164	Sets the total count of the wheel .
4165	Resolves size and state based on given size and state .
4166	Sets the drawable for the empty item .
4167	Sets the angle of the wheel .
4168	Updates the currently selected position .
4169	Invalidates the wheel item drawable .
4170	Convert a relative position to a wheel position
4171	Updates the velocity based on the specified delta time .
4172	Get the contrast color
4173	Clamp a value to the upper limit .
4174	Writes the Coveralls data to a JSON writer .
4175	Gets the data as a ByteBuffer .
4176	Sets the string value of this array .
4177	Creates a 1D String array based on the rank of the string .
4178	Create an ArrayChar from a String .
4179	Creates an ArrayChar from an ArrayObject .
4180	Creates a char array from a String array .
4181	Gets the time interval .
4182	Display this window .
4183	Show this frame if it is not iconified .
4184	Creates a size estimate for a grid .
4185	Main entry point for Grib1 .
4186	Creates a unit name .
4187	Creates a unit name .
4188	Creates a plural .
4189	Returns true if the given date is included in this interval .
4190	Intersect this range with another .
4191	Extend this range to another date range .
4192	Extend this period .
4193	Sets the start date .
4194	Sets the end date .
4195	Sets the duration .
4196	Calcculates the duration in seconds .
4197	Adds a bean to the menu .
4198	Prints a YYEAR error .
4199	Returns the name of the node .
4200	Returns a string representation of the parameters .
4201	Open the file .
4202	Compute the bounds for a bounding rectangle .
4203	Synchronize the UI
4204	Compute a chunked chunking .
4205	Register a watcher .
4206	Process events .
4207	Sets the reference date .
4208	Opens a feature dataset .
4209	Wrap a network .
4210	Checks if the given feature type is ok .
4211	Finds a feature type from a NetCD file .
4212	Write the catalog
4213	Convert catalog to HTML
4214	Returns the CSS link .
4215	Get the user head
4216	Creates a dynamic catalog for the given path .
4217	Add all services in the catalog .
4218	Initialize the HTTP session .
4219	Get content as string .
4220	Upload content to given URL .
4221	Returns the front page .
4222	Create a catalog .
4223	Extract the geospatial coverage .
4224	Gets a single dataset or by type name .
4225	Returns true if two VertCoordinate values are nearly equal .
4226	Creates a new unit ID .
4227	Parse an attribute spec .
4228	Read the top level data .
4229	Convert two shorts into an int .
4230	Convert an array of bytes to an int .
4231	Gets a Date from julian days and msecs .
4232	Makes sure that the name is valid .
4233	Returns true if the given name is a valid netcdf3 object name .
4234	Open a file for writing .
4235	Read record data from a file .
4236	Read record data .
4237	Fill non - record variables .
4238	Converts a time index into a time struct .
4239	Create a Time Struct from a Calendar .
4240	Checks whether a given string contains a template .
4241	Adds a server side function .
4242	Get a BoolFunction by name .
4243	Returns the function with the given name .
4244	Loads a new function .
4245	Returns the level name for a grid record .
4246	Returns a description of a level .
4247	Gets the level unit .
4248	Get the type of the projection .
4249	Determine if a grid record represents a vertical coordinate .
4250	Is the given record?
4251	Create a CoordinateTransform from an attribute container .
4252	Creates a dummy transformation variable .
4253	Create a projection object from a coverage matrix .
4254	Main method for testing
4255	Saves the info window .
4256	Returns the chronology for this chronology .
4257	Writes a number to the stream .
4258	Write an atomic array .
4259	Output bytes .
4260	Output a range of bytes .
4261	Finish the initialization .
4262	Construct a calendar range from a DateRange .
4263	Creates a GBD2 GDS .
4264	Parses the given text into the given DDS .
4265	Perform DASparse .
4266	Swap the header fields .
4267	Reads a frame from a grid record .
4268	Main method for testing
4269	Write an A constraint
4270	Writes the headers to the file .
4271	Write the operations
4272	Reads all files in the given directory and logs them .
4273	Scans a log file .
4274	Determine the type of the grid .
4275	Find a grid by parameter .
4276	Reads a set of data .
4277	Unpack the data .
4278	Gets the QR grid .
4279	Unpack the Grib1 data .
4280	Reads the Grib2 data .
4281	Prints out the grid .
4282	Read the next byte .
4283	Creates a new calendar date with the specified fields .
4284	Creates a calendar date .
4285	Obtains a calendar date from the given milliseconds .
4286	Creates a new CalendarDate with the specified number of milliseconds .
4287	Parses an udunits string .
4288	Returns the difference between two dates .
4289	Create an atomic variable .
4290	Setup download parameters .
4291	Escapes a string .
4292	Create a list of slices from a list of ranges .
4293	Unwraps the given file .
4294	Determines if a list of dimensions contains a variable length .
4295	Compute the effective shape .
4296	Add a date to a date .
4297	Multiply by one .
4298	Divide by one .
4299	Divide this Unit into one by one .
4300	This method is called to raise an exception .
4301	Convert this object to a derived unit .
4302	Converts a float array to a derived unit .
4303	Convert this object to a double value .
4304	Returns the canonical representation of this unit .
4305	Reads the contents of the given section into an ArrayIterable .
4306	Reads the data from this record .
4307	Flattens a list of station features .
4308	Finds a service by name .
4309	Returns the size of the gate .
4310	Gets the start of the gate .
4311	Returns the number of gateways for the given data type .
4312	Writes an XML document to an output stream .
4313	Returns the preferred layout size for this component .
4314	Verify that a descendant dataset is a descendant of a dataset .
4315	Convenience method to generate a catalog .
4316	Returns a new instance of a CalendarDateUnit with the given name and udunit .
4317	Factory method for creating a new instance of CalendarDateUnit with the given string .
4318	Creates a new calendar date unit .
4319	Calculate the offset from a reference date .
4320	Convert a double value to a calendar date .
4321	Gets the quantity dimension .
4322	Checks whether a file is a valid file .
4323	Reads a mapping from a UNIData file .
4324	Read data from a VAR file .
4325	Reads the int data from a regular expression .
4326	Read data from a VAR file .
4327	Returns the elevation for the given angle .
4328	Calculate the next step .
4329	Calculate the azul angle .
4330	Calculate data .
4331	Calculate the YEAR
4332	Creates and returns a vertical transform that can be used to transform a given dataset .
4333	Sets the debug flags .
4334	Enable or disable index .
4335	Read a series of data from a variable .
4336	Returns true if the variable is missing .
4337	Get the LatLon bounding box
4338	Finalize the structure .
4339	Tab by tab stop .
4340	Pad a string to a given width .
4341	Returns a string padded with the specified width .
4342	Returns a string padded with the specified width .
4343	Format a byte size .
4344	Displays the given value .
4345	Show the difference between decimal places and decimal places .
4346	Create a string representation of the shape
4347	Finish the slice .
4348	Returns a string representation of the constraint .
4349	Compose two slices .
4350	Applies the index to the slice .
4351	Dump a byte buffer .
4352	Dump the contents of a byte buffer .
4353	Returns the type of the given element .
4354	Gets the type of the Earth .
4355	Decodes a vlen data column .
4356	Decode vlen data .
4357	Extracts the content from a URL .
4358	Gets the text content of the specified URL .
4359	Filter the content of a file .
4360	Reads data from a file into a byte channel .
4361	Adds all attributes to this model .
4362	Removes the specified attribute .
4363	Removes an attribute .
4364	Gets the time offsets in milliseconds .
4365	Adds an ActionSource listener
4366	Convert a string to a Date
4367	Get the standard date from the given text .
4368	Gets the date origin .
4369	Returns the date in milliseconds .
4370	Make a date from a double .
4371	Calculate the time unit .
4372	Converts a double value into a standard date string .
4373	Get the grid spacing in meters .
4374	Adds the dimensions to a netcdf file .
4375	Creates a coordinate axis .
4376	Compiles the given projection .
4377	Adds parameters to the given variable .
4378	Adds a coordinate system variable .
4379	Calculate the start of the grid .
4380	Create the Stereographic projection .
4381	Create the mercator .
4382	Calculate the MSG geostationaryary information .
4383	Sets the coordinate of the x y coordinate .
4384	Read a dataset element .
4385	Read a dataset scan .
4386	Reads metadata content from an URL .
4387	Returns the level type of the message .
4388	Checks whether the given file is a valid file .
4389	Write an array of bytes .
4390	Sets the clear name .
4391	Returns the name of a coordinate for a given axis .
4392	Returns the name of the coordinate for a given axis .
4393	Returns the XML representation of the error .
4394	Builds a DAP exception with the given code and code .
4395	Breaks down a level variable .
4396	Creates a new coordinate axis with the given values .
4397	Creates new variables based on the given level .
4398	Creates a time coordinate axis from a reference variable .
4399	Remove a float from a float .
4400	Writes grib to netcdf .
4401	Wraps the given ncdfFile if needed .
4402	Opens a file .
4403	Clear the coordinate system
4404	Gets the coordinate axis with the specified type .
4405	Find a coordinate axis by full name .
4406	Find a coordinate system by its name .
4407	Find a coordinate transform by name .
4408	Determine if the given set of enhanced enhancement is needed .
4409	set values of a variable
4410	Sets the values for a variable .
4411	Creates an Array with the given string values .
4412	Returns the index of this frame .
4413	returns null if file exists
4414	Returns a list of features that intersect the specified bounding box .
4415	Discretize data .
4416	Merge another ThreddsMetadata into this one .
4417	Adds a documentation .
4418	Removes the documentation for the specified type .
4419	Gets the maximum bytes starting from the given offset .
4420	Checks if a given netfile isMine .
4421	Gets the XML file for the given dataset .
4422	Extracts a list of convention names from an attribute value .
4423	Builds convention attribute .
4424	Builds the coordinate system .
4425	Finds the coordinate axes in the given dataset .
4426	Extracts the coordinate system references from a dataset .
4427	Make the coordinate system for a given dataset .
4428	Make sure that the coordinate system is valid .
4429	Determine if the given variable is a coordinate axis .
4430	Add a coordinate to the given dimension .
4431	Set a subset of this catalog .
4432	Sets the dataset filter .
4433	Marks a dataset .
4434	delete datasets
4435	Initialize the GET request
4436	Counts the value matching the given name .
4437	Adds a new definition .
4438	Compares this row with another column .
4439	Compare two boolean rows .
4440	Returns the group scope .
4441	Pass all reserved attributes to the DAP node .
4442	Returns true if the given time range is valid .
4443	Returns true if this scanner is available .
4444	Register a class with the given name .
4445	Register a DSP class .
4446	Returns true if the specified DSP class is registered .
4447	Unregisters a dsp .
4448	Creates a new grib2 table .
4449	Gets the forecast time interval size .
4450	Gets the forecast time interval .
4451	Gets the Vert . x position .
4452	Finalize the layout .
4453	Sorts the datelist .
4454	Gets the file associated with the given fileno .
4455	Finds a variable in a dataset .
4456	Finds a variable in a dataset .
4457	Returns the name of the variable with the given attribute .
4458	Finds a variable in the struct .
4459	Find a nested structure .
4460	Determines whether a dataset contains a structured record .
4461	Get a literal value from a dataset .
4462	Get a feature type from a dataset .
4463	Get variable name from dataset .
4464	Returns a coordinate value .
4465	Calculate the distance between two points .
4466	Returns the coordinate values for this axis .
4467	Returns a sub - section of this axis .
4468	Finds the index which is closest to the given target .
4469	Returns the name of the extension .
4470	Add an action .
4471	Returns a match for the given path .
4472	Entry point for the project .
4473	Returns the index within the specified range of bytes .
4474	Adds a picture to the cache .
4475	Report the cache contents .
4476	Stop background loading
4477	This method stops background loading of one picture .
4478	Create a GET method
4479	Create a new HTTP method .
4480	Generate a random float .
4481	Generate a random count .
4482	Reads the data for a variable .
4483	Get a file system provider .
4484	Reads the stations table .
4485	Get the index of the group
4486	Remove the data variable with the given name .
4487	Convert HGT2 height to meters
4488	This method tries to read all data .
4489	Set the number of colors
4490	Calculate the transformation from the screen bounds .
4491	Convert a URI to an AuthScope object .
4492	Called by the end of the list .
4493	Checks if this factor is reciprocal of the given factor .
4494	Gets catalog .
4495	Finds the index of the given element .
4496	Reads the metadata content from a URL .
4497	Reads the metadata content from a dataset .
4498	This method is called to add the metadata content to the mdataJdom element .
4499	Validate the content of the catalog .
4500	This method processes a CatalogGenConfig element .
4501	Read a dataset source element .
4502	Read datasetNamer element .
4503	Read a dataset filter element .
4504	Read a single ResultService element .
4505	Create an element that represents the catalogGenConfig .
4506	Create an element that represents a dataset source .
4507	Create the element that represents a Dataset .
4508	Create an element that represents a dataset filter .
4509	Create the element that represents the result service .
4510	Returns true if the given flag is set .
4511	Construct the menu .
4512	Adds the given preferences to the given menu .
4513	Loads parameters from a table .
4514	Create a parameter from a list of words .
4515	Get a parameter by name
4516	Read the contents of the CDM file .
4517	Reads into a byte array .
4518	Replace the filespec with the given namespec .
4519	Sets the stnId and variable type information .
4520	Process the input
4521	Prints information about a formatter .
4522	Reads the bitmap from the given file .
4523	Sets the netcdf file .
4524	Sets the debug flags
4525	Parses a name .
4526	Returns true if the given structure is a group .
4527	Gets the dimension for a given variable .
4528	Searches the given dimension creating it if necessary .
4529	Construct a list of dimensions from a dods array .
4530	Determine if the given type is an unsigned integer .
4531	This method reads DataDDS from a CE file .
4532	Gets the icon .
4533	Gets an image resource .
4534	Create a custom cursor based on an image .
4535	Read data from a given layout file .
4536	Read data from a stream .
4537	Read fill data .
4538	Create a primitive array of data type .
4539	Converts a byte array to UTF - 8 charset .
4540	Convert a char array to a byte array .
4541	Convert a byte array to a char array
4542	Converts a ParsedSectionSpec into an Array
4543	Creates an ArrayStructure object from a section spec .
4544	Get the string representation of a scalar .
4545	Get the structure at the given index .
4546	Returns an Array object for a record .
4547	Creates the structure members .
4548	Adds dimensions to a Netcdf file .
4549	Creates a crawdable dataset .
4550	Normalize a path .
4551	Adds an explicit dataset .
4552	Adds a dataset scan .
4553	Finalize the dataset .
4554	Creates the datasets .
4555	Returns a random dataset .
4556	Create a dataset .
4557	Put the resource control
4558	Add a point to the polygon
4559	Gets the bb upper bound of this polygon
4560	Returns the lower lower lower lower bound of this polygon
4561	Validates the parameters .
4562	Checks if the given dataset matches the given dataset .
4563	Add all point features from a given dataset .
4564	Parses the constraint expression .
4565	Evaluates all clauses .
4566	Prints the constraint .
4567	Makes sure that the nc file is valid .
4568	Sets the shared dimensions for the given variable .
4569	Checks whether the given list of unknownDims is in the list of known dimensions
4570	Search for a group with the given name .
4571	Reads the content of the Xlink .
4572	Returns the standard URI of the document .
4573	Sets the projection class .
4574	Add a component to this layout
4575	Invalidate this layout .
4576	Remove a layout component
4577	Returns the minimum layout size for the given container .
4578	Layout the given target .
4579	Determine if a coordinate system is a radial coordinate system .
4580	Returns the maximum radius .
4581	Opens a new URL .
4582	Convert geographic coordinates to sat coordinate .
4583	Converts a sat - coordinate to Earth .
4584	Convert a GO to geographic coordinates
4585	Convert a scan geometry to a sweep angle .
4586	Convert sweep angle to scan geometry
4587	Sets the runtimes .
4588	Write a point observation dataset to a file .
4589	Rewrite a point dataset .
4590	Returns an ArraySequence with the given member name .
4591	Returns the full name of this node .
4592	Returns a unique ID .
4593	Get the access of the specified service type .
4594	Find a dataset by name .
4595	Gets the parent catalog .
4596	Get a list of metadata for this catalog .
4597	Finds a service by name .
4598	Returns the variables for the given vocabulary .
4599	Find all catalog references in a list of datasets .
4600	Escapes a path .
4601	Creates a new array with a given dimension .
4602	Extracts extrapInterpolation from a series of values .
4603	Compute the rho function .
4604	Returns the detail information .
4605	Create a structure for the gemreader .
4606	Create a dummy variable .
4607	Create a new parameter .
4608	Add global attributes .
4609	Returns the size of the stn variable .
4610	Get a 1D Array for the given data type
4611	Gets the transition state .
4612	the syntax error .
4613	Prints a reduce function .
4614	Read DMR header .
4615	Reads an error .
4616	Read data from input stream .
4617	Reads the header .
4618	Convert an ISO - 8601 string to a Date
4619	Read a table from a URL .
4620	Transfers a group into another group .
4621	Gets the stn file for the given location .
4622	Open a file .
4623	Returns the beginning of a given index .
4624	Gets the end of the index .
4625	Creates a collection of all run times .
4626	Sets the edit value .
4627	Gets the data type for the given format .
4628	This function converts a cartesian coordinate to aLLF coordinate .
4629	Cleans a unit .
4630	Cleans a name .
4631	Checks whether the given string is unitless .
4632	Factory method to create a note for the given namespace .
4633	Returns the unique identifier for a given variable note .
4634	Parse DAS data .
4635	Find a DodsV by name
4636	Find the dataV for a given DodsV
4637	Find a child by index
4638	Returns the parent group .
4639	Gets the dimension .
4640	Returns the index of the given dimension .
4641	Gets the value of the units attribute .
4642	Get the shape as a section
4643	Returns a copy of this variable .
4644	Sets the enum value for this variable .
4645	Reads a range of data .
4646	Reads a string .
4647	Reads the data .
4648	Reads the data .
4649	Writes the CDL definition to the output .
4650	For debugging only
4651	Sets the data type .
4652	Sets the dimensions for this shape .
4653	Reset the shape
4654	Sets the dimensions of this variable .
4655	Reset the dimensions of this variable .
4656	Sets the specified dimension .
4657	Sets the data for this variable .
4658	Get all dimensions
4659	Sets the maximum bounding box .
4660	Finalize the graph .
4661	Get all datasets .
4662	Determine whether the path ends with the dsp extension .
4663	Opens the CDDD .
4664	Builds the DMR .
4665	Build the sequence types for a given variable .
4666	Builds the DAP dimension references .
4667	Finds a matching enum .
4668	Returns the core dimension set .
4669	Scans a buf file .
4670	Process a buffered message .
4671	Handle a POST request .
4672	Get the transformation for this scene object .
4673	Determine if the map should be rotated .
4674	Get the map area of this map area .
4675	Converts a world coordinate to screen coordinates .
4676	Perform panning .
4677	Zoom the screen .
4678	Calculate the pixel coordinates from the bounding box .
4679	Adds a listener to the list
4680	Remove a listener
4681	Sends an event to all registered listeners .
4682	Sends an event to all registered listeners .
4683	Print a command .
4684	Prints a command to the output .
4685	Prints the data of a variable .
4686	Reads data from a variable section .
4687	Prints a structure data structure .
4688	Prints the contents of an Array to a PrintWriter .
4689	Prints an Array to a PrintWriter .
4690	Writes an ncDF file to the given writer .
4691	Read an attribute .
4692	Adds a parameter to the coordinate transform .
4693	Main entry point .
4694	Read the given slice .
4695	Returns true if the given grid record is positive up .
4696	Checks whether this unit is compatible .
4697	Creates a label .
4698	Sets a bit offset .
4699	Read bits from the stream .
4700	Convert a set of bits to an int .
4701	Open a connection to the given URL .
4702	Get the DAS data .
4703	Get DDS for a given CE
4704	Completes the given CE .
4705	Convert a projection to a LatLonPoint .
4706	Creates the IDV dataset catalog .
4707	Converts a range to IDV compatible range .
4708	Checks if the file is valid .
4709	Handles the attributes of the Snack .
4710	Handles the attributes of the sensor .
4711	Reads the root element from the provided location .
4712	Remove illegal characters from the text .
4713	Convert a string .
4714	Escapes a string .
4715	Unescapes a string .
4716	Decode backslash .
4717	Convert backslash to backslash .
4718	Adds global attributes to the network .
4719	Swap two short values at the given offset .
4720	Swap two int values at the specified offset .
4721	Swaps a double value from a byte array .
4722	Swap a float .
4723	Swap a double .
4724	Convert a short to a byte array .
4725	Convert an int to a byte array .
4726	Convert a long to a byte array .
4727	Create a new VerticalTransform .
4728	Convert this model to a XML document .
4729	Calculate the c .
4730	Start XML .
4731	Write the features .
4732	Add a list of levels to the list of levels .
4733	Add dimensions to a netcdf file .
4734	Adds the data to a netcdf file .
4735	Adds a coordinate transform to a group .
4736	Get the index of the given record .
4737	Exit the cache .
4738	Gets a file or directory .
4739	Returns a file or null if it does not exist
4740	Prints the contents of the cache .
4741	Recursively remove all files from a directory .
4742	Calculates the bearing between two points .
4743	Calculates the bearing between two points .
4744	Main method for testing .
4745	Searches for a point in the given Earth .
4746	Returns a LatLonPoint from the given Point .
4747	Returns a LatLonPoint from the given latitude and maximum coordinates .
4748	Start a picture in thread .
4749	Loads a picture .
4750	Loads a picture from the image .
4751	Stop the image .
4752	Stop the image if it does not already exist .
4753	Gets the size of the image .
4754	Set the buffered image
4755	Returns the standard URI of this dataset .
4756	Make a data descriptor .
4757	Transfers information from two lists
4758	Counts bits .
4759	Compare two DataDescriptors
4760	Loads the header .
4761	Loads the data .
4762	Returns the field with the given name .
4763	Get a double value by name .
4764	Get a string field by name .
4765	Get a boolean field by name .
4766	Returns the name of the field at the given index .
4767	Returns an array of field names .
4768	Dump the dump of a Dbase file .
4769	Returns the attributes for this entry .
4770	Sets the specified attribute .
4771	Remove an attribute .
4772	Returns the parent group .
4773	Returns the parent of this node .
4774	Get the escaped name .
4775	Returns the path of this node .
4776	Returns the path of this group .
4777	Computes the FQN .
4778	Returns true if this entry is a top level .
4779	Build the data structure .
4780	Puts a bean .
4781	Get a list .
4782	Returns the object associated with the given key .
4783	Reads the data from a file .
4784	Prints the constraint .
4785	Prints a compound instance .
4786	Writes the given Element as a String .
4787	Write the given element to the given file .
4788	Write the given element to the given output stream .
4789	Write the given element to the given writer .
4790	Create a dimension element .
4791	Create a projection for the given attributes .
4792	Get an integer array from the coordinate system .
4793	Get a base unit .
4794	Returns a du unit .
4795	Creates a base unit .
4796	Creates a derived unit .
4797	Returns the SI class .
4798	Returns the coordinate element of this axis .
4799	Find the index that is closest to the given target .
4800	Sets the set of coverage values .
4801	Opens a feature dataset .
4802	Open a feature dataset .
4803	Annotate a dataset
4804	Read data from a Grib1 file .
4805	Parse the URI .
4806	Returns a canonical version of the given string .
4807	Normalize the units .
4808	Compile the dataset .
4809	Initialize the metadata object
4810	Returns the value associated with the specified key .
4811	Associates the specified key with the specified value .
4812	Gets the date .
4813	Print the XML attributes for a given DAP node .
4814	Print an XML attribute .
4815	Returns true if the given attribute is a special attribute .
4816	Prints the dimensions of a variable .
4817	Returns true if the given file is a valid file .
4818	Sets the area attributes for the area .
4819	Sets the navigation attributes for the given variable .
4820	Convert the given string to the corresponding value .
4821	Sets the attributes for the given image .
4822	Finds the coordinates for a given predicate .
4823	Returns the coordinate name for a given axis .
4824	Returns the coordinate axis for a given dataset type .
4825	Finds the first coordinate that matches the given type .
4826	Find the dimension of a given axis .
4827	Finds the best coordinate system for the given dataset .
4828	Find the dependent axis .
4829	Gets a variable by name .
4830	Deserialize data from a stream .
4831	Reads a marker .
4832	Writes a marker
4833	Report a fatal error .
4834	Creates a series of times .
4835	The demo demo
4836	Convert member members to String array
4837	Gets the parameter list .
4838	Sets the animations .
4839	Sets the currently selected station .
4840	Redraws the region
4841	Deserialize this rectangle .
4842	Writes the object to the stream .
4843	Merge the given UnitDBImpl with this one .
4844	Add a unit .
4845	Adds a symbol .
4846	Gets a unit by its id .
4847	Adds a new unit .
4848	Add a unit .
4849	Add a unit to the map .
4850	Adds the installed information to a menu .
4851	Searches the file starting at the given position .
4852	Read the dataset .
4853	Serialize the output .
4854	Gets the parameter values from the rdd data .
4855	Creates a copy of this projection .
4856	Opens a feature dataset .
4857	Opens the feature dataset .
4858	Opens the given dataset .
4859	Adds information about an InvocationSet to a Netty .
4860	Removes duplicates from the given list .
4861	Adds a new partition .
4862	Opens a mutable collection .
4863	Get an instance to match on the match target .
4864	Get an instance to match on target path .
4865	Write a queryability to a file
4866	Read a structure from a file .
4867	Loads a picture .
4868	Sets the buffered image .
4869	Zoom the screen to fit .
4870	Paints the screen .
4871	Takes a date and returns the date of the date
4872	This method is used to extract information from an int array .
4873	Calculate a date from an int array .
4874	Calculate the day of the week .
4875	Convert a vertical coordinate to a vertical coordinate .
4876	Reverses a range of integers starting at a given index .
4877	Get the grid packing name .
4878	Get data type
4879	Read data from an input stream .
4880	Write dods to an output stream
4881	Gets the tag enum .
4882	Returns next image .
4883	Returns the number of dap entries for the given type .
4884	Returns the sum of all elements in an array .
4885	Sets the spatial grid .
4886	Sets the overlap
4887	Clear the grid .
4888	Marks the specified rectangle in the grid .
4889	Finds the intersection between the specified rectangle .
4890	Finds the intersection of the specified point .
4891	Finds the object in the grid .
4892	Returns the squared distance between the given cell and the given point .
4893	Get or create a base unit .
4894	Search for a service fragment .
4895	Searches the file path for the given url .
4896	Decodes the service type .
4897	Checks if the given location is a dods directory .
4898	Checks if a given location is a DAP4 file .
4899	Send a variable to a stream
4900	Return the suffix of a fqn .
4901	Return the prefix of a given fqn .
4902	Locates a file .
4903	Locates a relative file relative to a relative path .
4904	Extract data from buffer .
4905	Returns the structure path of the given variable .
4906	Returns null if the given string is empty .
4907	Join an array of Strings into a single string .
4908	Determine whether the given path contains a drive letter .
4909	Extract a list of protocol protocols from a URL .
4910	Convert an index to a list of slices .
4911	Convert a DAPVariable to a list of dimensions .
4912	Returns true if the slices are contiguous
4913	Returns true if a list of slices is single point
4914	Convert a list of slices to an index .
4915	Read data from an input stream .
4916	Sets the station information .
4917	Sets the short names .
4918	Read a configuration from a catalog .
4919	Adds a decl to this group .
4920	Updates the group list .
4921	Returns the dap variable with the given name .
4922	Determine the type of a variable .
4923	Gets the statistic type .
4924	Sets the coverage .
4925	Returns the range iterator .
4926	Sets defaults for this client .
4927	Gets the sessionID .
4928	Set the maximum number of redirects
4929	Enable or disable sessions .
4930	Closes this proxy .
4931	Sets authentication and proxy properties .
4932	Track a session .
4933	Sets the global credentials provider for the given scope .
4934	Validates a URL
4935	Creates an index .
4936	Compute the stride for a given shape .
4937	Create a new index .
4938	Reduces the number of elements in this index .
4939	Returns a new index with the specified dimension
4940	Returns a new index of this index .
4941	Performs a permutation of this index .
4942	Get index iterator .
4943	Returns the current element .
4944	Sets the index .
4945	Sets the current value of the specified dimension .
4946	Sets the values of this index .
4947	Returns the name of the time interval .
4948	Converts a calendar to a calendar date range .
4949	Creates a list of date strings .
4950	Create a list of parameters for a given part .
4951	Creates a list of stations from the RPM file .
4952	Create a station from a header file .
4953	Returns a list of the station keys of the network .
4954	Returns a list of dates .
4955	Returns the index of a station with the given ID .
4956	Returns the file type .
4957	Adds indentation .
4958	Sets the indent level .
4959	Read or create an index from a single file .
4960	Add a directory scan to the collection .
4961	Returns true if a scan is needed .
4962	Checks if there is a scan in the cache .
4963	Sets the debug flags .
4964	Adds a variable to the model .
4965	Writes the data to the file .
4966	Validate an XML document .
4967	Returns a string representation of this constraint .
4968	Sets the original variable .
4969	Reads and returns the data .
4970	Implementation of read .
4971	Checks if the variable is needed .
4972	Convert Array to ArrayStructure
4973	Recursively convert the member information to the member variables .
4974	Find the variable with the given org name .
4975	looks to see if a variable has data
4976	Enhances the variables with the given mode .
4977	Check if a resource control is allowed
4978	Returns an empty sequence .
4979	Generate an ArraySequence .
4980	Create a sequence for the gemreader .
4981	Add the vertical coordinate attribute .
4982	Read the specified XML asynchronously .
4983	Reads an InvCatalog from a string .
4984	Read the catalog from a String reader .
4985	Writes the catalog to the output stream
4986	Get a metadata converter
4987	Returns a unitless ID .
4988	Multiply by one .
4989	Divide by one .
4990	Copies the input array into the specified output array .
4991	Checks if the given unit is compatible .
4992	Write a simple geometry .
4993	Write a point .
4994	Write a linestring .
4995	Write a polygon .
4996	Pull a named attribute from a node .
4997	Get a list of all child nodes .
4998	Parses the response .
4999	Pass all reserved attributes to the DAP node .
5000	Returns a string representation of the subset of the given variable range .
5001	Creates an ArrayStructure from an ArrayStructure .
5002	Sets the data of a member .
5003	Creates an ArrayStructure based on the given shape
5004	Returns the type of a geometry variable .
5005	Make a station - series feature .
5006	Compile an AST node .
5007	Compile a filter expression .
5008	Define a dim definition .
5009	Create an ArrayView for the given index .
5010	Checks whether this rectangle is contained in the supplied rectangle .
5011	Extend a point .
5012	Extend this rectangle .
5013	Intersect the bounds of this rectangle .
5014	Adds two arrays .
5015	Returns true if the shape is conformable
5016	Checks if two shapes are conformable
5017	Convert an Array to a DataType
5018	Copy elements from a Array to a new Array
5019	Copy all boolean values from an Array to the result
5020	Copies all elements from an Array to the result
5021	Returns the min and max value of an Array .
5022	Sets the elements in the Array to a double value .
5023	Create a catalog builder for this catalog .
5024	Factory method to create a projection .
5025	Unescapes the given identifier .
5026	Decode a string .
5027	Unescapes a URL .
5028	Escapes a string with reserved chars .
5029	Unescapes a string .
5030	Tokenizes an escaped name .
5031	Returns the index of the first occurence of the given character .
5032	Convert backslash to DAP characters .
5033	Read an atomic scalar .
5034	Gets the path of a cursor .
5035	Get the UIDefaults for a given class and property .
5036	Gets the JComponent corresponding to the given JComponent .
5037	Compile the top variables .
5038	Compile a structure array .
5039	Compile a DAP structure .
5040	Compile a sequence variable .
5041	Compile a sequence .
5042	Read a little endian long .
5043	Returns the field with the given name .
5044	Returns the value of the specified field .
5045	Sets the value of the specified field .
5046	Adds a new field to the table .
5047	Adds a CheckBox field .
5048	Adds a date field .
5049	Adds a double field .
5050	Adds a int field .
5051	Adds a Password field .
5052	Adds a text field .
5053	Adds a text field .
5054	Adds a text area field .
5055	Adds a heading .
5056	Add a component to the layout .
5057	Adds a row to the layout component .
5058	Find the currently active frame .
5059	Gets the cell spacing .
5060	Returns the set of factors .
5061	Multiply this dimension by another dimension .
5062	Returns an array of factors with the specified power .
5063	Determines if this dimension is a reciprocal of factors .
5064	Returns true if this factor is a dimensionless dimensionless .
5065	Creates a new instance of grib1 param table .
5066	Create a new instance of Grib1ParamTables .
5067	Adds a parameter table lookup .
5068	Adds a parameter table .
5069	This method is called to raise an exception to an appropriate unit .
5070	Convert an array of float to a derived unit .
5071	Initialize unit table .
5072	Create a vertical variable .
5073	Peek the name of the descriptor .
5074	Grab a short from a byte array .
5075	Gets an int from a byte array .
5076	Reads a float from the byte array .
5077	Reads a double from the byte array .
5078	Execute an alias .
5079	Register a symbol .
5080	Create a converter
5081	Sets the structure data .
5082	Sets the feature data .
5083	Draw the image .
5084	Gets the shape list .
5085	Processes the input stream .
5086	Read a buffer into a byte array .
5087	Reads more bytes from the input stream .
5088	Read bytes from the input stream .
5089	Skip n bytes .
5090	Adds the dimensions to a Netcdf file .
5091	Finds the index of a record .
5092	Checks to see if the given file is valid .
5093	Reads the header and parses it .
5094	Reads data from a section .
5095	Read one row data .
5096	Creates the variables from a dataset .
5097	Creates a type for a given variable .
5098	Fire a map area event .
5099	Set the map area .
5100	Set the area of the map area .
5101	Set the center area of the map .
5102	Set the projection object
5103	Adds the actions to the given menu .
5104	This method is used to redraw the graphics process
5105	Change screen size .
5106	Set the selected variable .
5107	Returns a double value at the specified offset .
5108	Read the double value at the specified index .
5109	Returns the object at the given index .
5110	Returns the detector name for the given ent_id .
5111	Reads a scaled int .
5112	Find a parameter by name ignoring case .
5113	returns true if there are more messages in the undirectet
5114	Switches to big endian .
5115	Gets the time steps per file .
5116	Returns the file name at the specified index .
5117	Gets the file names based on the data structure .
5118	Get the path to DDF file .
5119	Returns the full path for the given filename .
5120	Adds a Chsub .
5121	Convert a reference date to a time coordinate .
5122	Read a WMO file .
5123	Returns the uncompressed data .
5124	Generate code for the special graphic symbol .
5125	Processes a circle .
5126	Checks the product header .
5127	Parses the number of vector arrow .
5128	Parses the code for a code point .
5129	Parses the unlinked vector .
5130	Gets the levels .
5131	Get the levels for a dual interval .
5132	Adds a variable .
5133	Adds a parameter .
5134	Uncompress a buffer .
5135	Get an unsigned integer from a byte array .
5136	Gets a number from a byte array .
5137	Convert a byte array to an object .
5138	Perform DMR .
5139	Returns the current state of the DAP request .
5140	Sends an error message .
5141	Set anchor point .
5142	Stretch the canvas .
5143	Gets the bounds of the rectangle .
5144	Returns the bounds of the last point .
5145	Format the given text .
5146	Replace the data variables from the given structure .
5147	Throw an exception if the array size is ok .
5148	Read two bytes from a file .
5149	Reads a unsigned integer from a file .
5150	Reads three bytes from a file .
5151	Read a 2 - bit unsigned integer from a file .
5152	Read a 3 - byte integer from a file .
5153	Read a 4 - byte float from a file .
5154	Calculate a 4 - digit 4 .
5155	Reads an int from a file .
5156	Counts the number of bits in a bitmap .
5157	Creates a copy of this projection .
5158	Returns the WGS84 representation of this object .
5159	Escape a string .
5160	Unescapes a string .
5161	Splits a string into a list of slashes .
5162	Generate the network inv .
5163	Gets the service special .
5164	Get the number of projected components .
5165	Gets the reference time .
5166	Creates a new ArrayStructureBBsection .
5167	Main entry point .
5168	Read a record .
5169	Checks if a given file isMine .
5170	Create a projection for a given dataset .
5171	Acquires the file reader .
5172	Returns true if the value is before the specified date .
5173	Returns true if this date is before the specified date .
5174	Determines if this value is after the specified date .
5175	Sets the value at the given index .
5176	Adds a CoordinateSystem to this variable .
5177	Sets the units string .
5178	Gets the units attribute of this variable .
5179	Initializes the dialog .
5180	Read a catalog .
5181	Processes a list of datasets .
5182	Recursively read all catalog files from a directory .
5183	Returns true if the given lon is within the range bounds .
5184	Convert latitude to string .
5185	Convert lon to string .
5186	Compare this quantity by name .
5187	Gets the selected dataset .
5188	Sets the selected dataset .
5189	Creates a tree path from the given node .
5190	Open the catalog .
5191	Sets the catalog .
5192	Sets the catalog .
5193	Find the variable alias for a given variable .
5194	Writes a vInt to the stream .
5195	Writes a range of characters .
5196	Read chars from the input stream .
5197	Set debug flags
5198	Adds a member .
5199	Removes a member .
5200	Returns a list of member names
5201	Returns the member with the given name .
5202	Reads the bitmap from the given file .
5203	Restores the state of the column .
5204	Returns the currently selected rows .
5205	Gets the model index of the model .
5206	Returns the value of a member .
5207	Returns a double value for the given member .
5208	Retrieve the value of a member .
5209	Returns a float value for the given member .
5210	Retrieve the value of a member .
5211	Returns the byte value for the given member .
5212	Returns the byte representation of the given member .
5213	Returns the int value for the given member .
5214	Retrieve the value of a member .
5215	Returns a short value for the given member .
5216	Returns the java array as a short .
5217	Returns a long value for the given member .
5218	Retrieve the value of a member .
5219	Gets a char .
5220	Returns the java array char .
5221	Write one dataset
5222	Checks if a dataset is useable
5223	Creates a new dataset .
5224	Transfer metadata from another dataset .
5225	Get ThreddsMetadata object
5226	Adds a product to the list of records .
5227	Show information about missing values .
5228	Show the summary of all missing occurrences .
5229	Finds a record .
5230	Dump the grid .
5231	Returns a string representation of the parameter .
5232	Sets the coverage axis .
5233	compares two byte arrays
5234	Parse a DMR document into a DMR dataset .
5235	Process all DAP attributes .
5236	Add a list of coords to the partition .
5237	Sets the latitudes of the coordinate system .
5238	Parses a variable section specification .
5239	Converts a section into a section specification .
5240	Determine if a box contains a tile .
5241	Close the method .
5242	Executes the HTTP method .
5243	Identify the location of a CFPoint in the given dataset .
5244	Given a dataset type and a dimension find the name of the axis .
5245	Sets the stream .
5246	Reads a character .
5247	Start a progress monitor
5248	Parse a string to a URI .
5249	Excludes a given URI .
5250	Converts a string to null .
5251	Joins the given prefix and suffix .
5252	Checks whether the given dataset should be modified .
5253	Copy info from another object
5254	Get a list of filenames .
5255	Sets the index file .
5256	Gets the index file .
5257	Closes the index file .
5258	Returns the number of counters in this counter .
5259	Adds a global attribute .
5260	Adds a global attribute .
5261	Delete a global attribute .
5262	Rename a global attribute .
5263	Adds an attribute .
5264	Adds a variable attribute .
5265	Delete a variable .
5266	Rename a variable .
5267	Sets the subtype of the file .
5268	Write the headers to the file .
5269	Write members .
5270	Writes an XML document to a XML file .
5271	Convert a station collection to a XML string .
5272	Write DSR header .
5273	Send a dxR8 message .
5274	Writes an error .
5275	Closes the buffer .
5276	Flush the buffer .
5277	Returns a copy of this projection object .
5278	Returns true if the queue contains the given number of elements .
5279	Returns the element at the specified index .
5280	Shift this range by origin .
5281	Read data from the file .
5282	Reads the data .
5283	Returns a subset of this vector .
5284	Returns all catalog extensions .
5285	Cleans up the tracker for a given tracker
5286	Sets the values of the projection .
5287	Get the data chunk iterator without filtering .
5288	Make a double array from an array of ints .
5289	Determine the boundary .
5290	Check the requested variables .
5291	Gets the dataset source .
5292	Get the physical path to the specified location .
5293	Make the vertices for a list of vertices .
5294	Reads the pib file .
5295	Finishes this record .
5296	Transfer data from parent to public metadata
5297	Transfer metadata from another dataset
5298	Transfers metadata recursively .
5299	Sets the contributors .
5300	Adds a dataset at the specified index .
5301	Removes a dataset from this catalog .
5302	Replaces a dataset with another
5303	Add a service to this context
5304	Removes a service .
5305	Set the services for this invocation .
5306	Removes the given metadata .
5307	Gets a user property .
5308	Validate the dataset .
5309	Returns a list of descriptor descriptors .
5310	Constructs a path from the servlet request .
5311	Output the capabilities request .
5312	Get a feature .
5313	Check the parameters for error .
5314	Handles HTTP POST request .
5315	Get capabilities for a given URL .
5316	Returns the length of the object .
5317	Returns the timestamp of the last modified date .
5318	Read the DAP variables from the given dataset .
5319	Return a file .
5320	Send a string to the response
5321	Sets the response content length .
5322	Gets the request URI .
5323	Gets the request path .
5324	Gets the full request .
5325	Gets the value of a parameter .
5326	Saves the preferences .
5327	Writes the contents of a directory .
5328	Sets the bit offset for a given data key .
5329	Create a new BitCounter for a subKey .
5330	Count bits .
5331	Append a line to the history .
5332	Generate a XML document for a set of stations .
5333	Gets the capabilities document .
5334	Returns the record at the specified subset parameters .
5335	Returns the coordinate at the given index .
5336	Adds an item to the list .
5337	Handle exception .
5338	Get the slice at the specified index .
5339	Performs a step .
5340	Gets the NCEP process
5341	Checks if the given endpoint is a CDM endpoint
5342	Sets the type of this flag .
5343	Factory method to create a GDS1G .
5344	Copy bytes from input to output stream .
5345	Reads the contents of an InputStream into a String .
5346	Read the contents of the file into a byte array .
5347	Writes the contents to an OutputStream .
5348	Copy the contents of a file into an output stream .
5349	Copy a buffer into an output stream .
5350	Copies all files from one directory to another .
5351	Reads the contents of a file into a byte array .
5352	Reads the contents of a file .
5353	Writes the contents to a file .
5354	Writes the contents of a string to a file .
5355	Writes the contents of an input stream to a file .
5356	Handles parsing exception handling .
5357	Handle the exception handler .
5358	Sends a Bad URL page .
5359	Gets the catalog .
5360	Print the catalog information
5361	Prints the status of the server .
5362	Prints the error page .
5363	Returns the reference date .
5364	Read a variable length array .
5365	Reads a NCML document .
5366	Opens a NCdfCollectionReader .
5367	Replaces all characters in a string with a given replacement character .
5368	Converts byte array to string .
5369	Removes all letters from the given string .
5370	Filter a string .
5371	Makes sure that the given name is valid .
5372	Compare two strings .
5373	Pads the given string to the desired length .
5374	Pads the given string with the desired length .
5375	Removes substring from string .
5376	Removes the character from the string .
5377	Removes the character from the end of the string .
5378	Collapses all whitespace characters from a string .
5379	Replaces all occurrences of a string with the given output .
5380	Replaces all occurrences of a string with another string .
5381	Replaces all occurrences of a string with a given value .
5382	Substitute a string with a substring .
5383	Substitutes a string .
5384	Removes all occurrences of the given string builder .
5385	Replaces all occurrences of a string in sb with another .
5386	Replaces all occurrences of a substring in a StringBuilder with another .
5387	Substitute a string with a substring .
5388	Trims characters from a string .
5389	Process a collection update event .
5390	Check the state .
5391	Updates the state .
5392	Show the unique templates .
5393	Gets the dataset .
5394	Release resources .
5395	Returns a deep copy of the given structure .
5396	Copy an ArrayStructure to a ArrayBructureB
5397	Copies a structure to an ArrayStructure .
5398	Creates a copy of a StructureData object .
5399	Copies a structure into an ArrayStructureObject
5400	Returns the forecast time interval size in pixels .
5401	Returns a new coordinate axis with the specified range .
5402	Factory method to create a table analyzer .
5403	Gets the first feature type .
5404	Analyze the dataset .
5405	Synchronize the grid .
5406	Gets the values of a gaussian latitudes .
5407	Swap a long value into a long .
5408	Swap two float values at the specified offset .
5409	Swap char at given offset .
5410	Finds the coordinate axis attribute from the dataset .
5411	Add a parameter to the coordinate system .
5412	Returns the common parent .
5413	Determine if this group is a parent of this group .
5414	Sets the parent group .
5415	Adds a dimension to this group .
5416	Adds the given dimension if it does not already exist .
5417	Adds a group to this group .
5418	Adds an enumeration to this group .
5419	Adds a variable to this group .
5420	Removes the given dimension .
5421	Adds a relative path to a group .
5422	Converts DDS alias fields to DDS alias fields .
5423	Print das to the specified writer .
5424	Search a variable by its name .
5425	Write a grid .
5426	Replace the missing values .
5427	Replace the missing values with the given data .
5428	Goes through a GeoShift coordinate .
5429	Writes a grid .
5430	Writes the response to the response .
5431	Query the nc version of nc .
5432	Create the top index file based on the given configuration .
5433	Returns the type of the GribCollection .
5434	Update a feature collection .
5435	Update a leaf collection .
5436	Open a GribCollection from a file .
5437	Open a GribCollection from a data file .
5438	Opens a GribCollection .
5439	Returns true if pattern matches given pattern .
5440	Add a triple to the collection
5441	Find the value for a key and url .
5442	Set the well - known triples from the context
5443	Loads a CDM file .
5444	Inserts a triple into the triples .
5445	Gets the datasets .
5446	Finds a dataset by its name .
5447	Sets the project .
5448	Get the shapes for the given graphics context .
5449	Build a list of shapes from the feature list
5450	Compares the specified string with the specified string .
5451	Start a progress monitor task
5452	Checks if the given collection index file needs to be updated .
5453	Normalize a list of coord objects .
5454	Sets an object at the given index .
5455	Returns the structure data at the given index .
5456	Copy structructures from the given record .
5457	Retrieve a scalar value .
5458	Convert a scalar value to a double .
5459	Convert a scalar integer to an int value .
5460	Get a float value .
5461	Get a scalar byte .
5462	Returns a short value for the given record .
5463	Get a char from a member .
5464	Get the value of a scalar string .
5465	Returns an ArrayStructure object from the given record .
5466	Retrieve the value associated with the specified record .
5467	Returns the ArrayObject associated with the given record .
5468	Checks if the given value is within the given range .
5469	Evaluate an expression .
5470	Returns a string representation of this constraint .
5471	Returns true if the given node is references to this node .
5472	Evaluate and return a boolean .
5473	Returns the number of expansion count for the given struct .
5474	Compute the enumeration .
5475	Compute the groups .
5476	Parses the given string and returns the result .
5477	Returns true if the given file is a valid file .
5478	Adds actions to the system .
5479	Gets the byte order for the specified machn .
5480	Sets byte order .
5481	Find a key by name .
5482	Finds a file header by name .
5483	Returns the header of a file .
5484	Prints the message parts .
5485	Returns the data point for the given row and column .
5486	Reads the data for a given word .
5487	Read n characters from file .
5488	Convert a DMR part into an array .
5489	Returns a string representation of bits .
5490	Writes an ncdf file to a channel .
5491	Parse a base element .
5492	This method parses a sub - grid element .
5493	Parse aliases .
5494	Decodes a list of key descriptors .
5495	Creates a list of sub keys .
5496	Returns the filename of the dataset .
5497	Gets the signature type .
5498	Returns true if the two floats are almost equal
5499	Returns true if the given node belongs to this node .
5500	Parse a unit .
5501	Probe an object using reflection .
5502	Checks if a variable is tiled .
5503	Returns the best coordinate for the complete time .
5504	Convert LatLonRect to ProjectionRect
5505	Show time series of time series .
5506	Convert a list of attributes to a map .
5507	Returns the values .
5508	Get the numeric value at the given index .
5509	Writes a CDL definition .
5510	Set the string value .
5511	Sets the values of this attribute .
5512	Sets the values from an array .
5513	Starts the scan .
5514	Generate catalog data resolver .
5515	Adds a message to the queue .
5516	Sets the thrredds datatype
5517	Uploads the data to the Thredds .
5518	javadoc to tabbed panel
5519	Sets the dataset .
5520	Sets up the UI .
5521	Create the GUI frame .
5522	Convert a list of coordinates to a full name .
5523	Returns a new AxisAxis which is less than or equal to the first rank .
5524	Finds the axis with the specified type .
5525	Gets the ProjectionCTionTransform object .
5526	Determine if the feature is geo or not
5527	Returns true if this axis is regular .
5528	Returns true if subset is a subset of the set .
5529	Checks if the list contains the given axis
5530	Returns true if the given name contains the given name .
5531	Checks if the domain contains the given dimension
5532	Checks if the given list contains the given AxisTypes .
5533	Checks if the list contains the given axis .
5534	Clones this DAG .
5535	Returns the currently selected bean .
5536	Returns the currently selected beans .
5537	Returns the currently selected values .
5538	Sets the currently selected bean .
5539	Restore the state of the view .
5540	Creates an unknown unit .
5541	Closes the stream .
5542	Returns true if the given variable is a non - null value .
5543	Determine if the given variable is a coordinate .
5544	Tries to find a coordinate axis .
5545	Add data variables for a table .
5546	Add the parent joins to the cursor
5547	Create a station feature from a data structure .
5548	Create the node map .
5549	Create a SimpleUnit instance
5550	Factory method for unit testing .
5551	Create a unit based on its name .
5552	Checks whether two strings are compatible with the given exceptions .
5553	Checks if a unit is a valid date unit
5554	Determine if a string is a TimeUnit
5555	Gets the conversion factor .
5556	Converts the given value to the given unit .
5557	Returns true if this unit represents an unknown unit .
5558	Returns the scaled unit value .
5559	Create a new RelOpClause .
5560	Create a new BoolFunction clause .
5561	Create a new sub - clause .
5562	Convert an array into a gray scalecale image .
5563	Calls the catalog .
5564	Crawl a dataset .
5565	Crawl a dataset .
5566	Gets the file at the given location .
5567	Returns the existing file or null if it does not exist .
5568	Determine whether or not to be leaked .
5569	Returns a sorted list of all files .
5570	Close the file .
5571	Seeks to the given position .
5572	Flush the buffer .
5573	Reads a single byte .
5574	Read a short array .
5575	Read a 32 - bit integer from the stream .
5576	Reads an integer into an array .
5577	Reads a long into a long array .
5578	Read a float array .
5579	Reads a double array from the input stream .
5580	Read a string .
5581	Reads max bytes from the stream .
5582	Writes a range of bits .
5583	Writes a short array into the array .
5584	Writes a sequence of characters .
5585	Writes an array of integers into the array .
5586	Writes a long array into the array .
5587	Writes a number of float .
5588	Writes a number of doubles .
5589	Writes a string to the output stream .
5590	Writes a byte array to the output stream .
5591	Search for the next match .
5592	Append a query to the template
5593	Creates a new collection .
5594	Finds the index .
5595	Checks if the index is a leaf .
5596	Constructs children .
5597	Scan for children .
5598	Read all files from the index .
5599	Returns a list of all grids .
5600	Acquires a file cacheable .
5601	Remove the file .
5602	Delete files from the cache
5603	Release a lock on the file cache .
5604	Calculate a 4 - byte 4 .
5605	Update an element in cache .
5606	Clear the cache .
5607	Create the vertical transform for a given dataset .
5608	Returns true if this axis represents a global coordinate .
5609	Returns true if the Z axis is positive .
5610	Searches for a coordinate from a coordinate system .
5611	Searches for a bounding box within the bounds of a bounding box .
5612	Converts a LatLon LatLon to an array of Xs
5613	Searches for a bounding box and returns an array containing the results of a bounding box .
5614	returns the position of the item
5615	Returns the item for the given pixel .
5616	Iterate over a collection of files .
5617	Get remote logs .
5618	Returns the name of the subCenter .
5619	Parses a string representation of a CalendarPeriod .
5620	Returns a new calendar period with the specified value and field .
5621	Creates a CalendarPeriod from a string representation .
5622	Subtract values from start and end date .
5623	Gets the conversion factor .
5624	Returns the value of this field in milliseconds .
5625	Get the offset between two dates .
5626	Synchronize the database .
5627	init tables .
5628	Add the given date root ext .
5629	Finds the longest path match .
5630	Find the data root for the given request path .
5631	Convert a DataRootExt object to a DataRoot object
5632	Gets the calendar date range .
5633	Reindex a list of coords .
5634	Creates a new NetcdfFileWriter .
5635	Adds a group .
5636	Adds an enum type to the group .
5637	Delete an attribute from the given group .
5638	Rename an attribute .
5639	Sends a record structure to the network .
5640	Aborts the server .
5641	Write properties .
5642	Extract thrredds metadata .
5643	Divide this Unit into another Unit .
5644	Convert this object to a derived unit .
5645	Convert this object to a double value .
5646	Convert a nested variable into a nested array .
5647	Convert a top variable to a DODS variable
5648	Convert a DObject to an Array
5649	Close all databases .
5650	Opens a new database .
5651	Convert an integer value into a joda period .
5652	Ensures that the StringArray has enough capacity .
5653	Returns the value at the given index .
5654	Create a catalog for a directory .
5655	Create a catalog from a resolver .
5656	Get the coordinate type
5657	Creates a Grib2Pds .
5658	Calculate a time .
5659	Applies the scale factor to the value .
5660	Parses a local concept from a file .
5661	Reads a local concept from an input stream .
5662	Clean the contents of a line
5663	Store a single entry .
5664	Writes the grib1 tables to a file .
5665	Writes the lookup table .
5666	Show local concepts .
5667	Main method .
5668	Get dataset type by name
5669	Expand the catalog .
5670	Generate a catalog .
5671	Name the dataset .
5672	Names up a dataset .
5673	Names the given dataset .
5674	Loads a picture from the image .
5675	Stop the animation with the specified url .
5676	This method is called when the source file changes .
5677	Dispatch a progress notification .
5678	Create a scaled picture thread .
5679	Gets the scaled size .
5680	Gets the scaled size string .
5681	Gets the merged parts .
5682	Creates a header for a magnet station .
5683	Returns a list of syntactic categories .
5684	Check for a part .
5685	Sets the cache directory .
5686	Creates the root directory .
5687	Create a file for the given location .
5688	Removes all files in the cache .
5689	Clean the disk cache .
5690	Determine whether a buffer is a buffer .
5691	Factory method to create a coordinate axis .
5692	Creates a copy of this axis .
5693	Returns true if this is a numeric value .
5694	Get information about this axis .
5695	Gets the calendar from the attribute .
5696	Set the list of rows .
5697	Gets the selected row .
5698	Increment the selected row .
5699	Gets the model index of the column .
5700	Set the current index .
5701	quick sort algorithm
5702	Swap two strings .
5703	check if file exists
5704	Rotate the coordinates of the given point .
5705	Create a new XML store from a file .
5706	Create an XML store from input streams .
5707	Create a new XMLStore from a resource .
5708	Create a file name for the given application .
5709	Saves the preferences file .
5710	Save the preferences to an output stream .
5711	Write an atomic variable value .
5712	This method writes the data structure .
5713	Writes the data cap structure .
5714	Writes a sequence .
5715	Write a record to the serial writer .
5716	Checks whether the given file is a valid file .
5717	Get the Wmo ID
5718	Reads a row n record n .
5719	Get data at index .
5720	Reads the data from a Grib2D file .
5721	Gets the data from the PNG file .
5722	Reads a datapoint .
5723	Creates a grid file .
5724	Make a grid file size estimate .
5725	Creates a netcdf file .
5726	Sets the list of stations .
5727	Sets the currently selected station .
5728	Select a specific station .
5729	Selects the closest station to the given point .
5730	Returns the currently selected station .
5731	Returns the name for the given type .
5732	Returns a list of all stations within the bounding box .
5733	Returns a station with the given name .
5734	Returns a DataIterator for the given station .
5735	Gets a data iterator .
5736	Reads the data for this ray .
5737	Calculates the dot product of this vector .
5738	Returns the norm of this vector .
5739	Normalize this vector .
5740	Set the services from the given datasets .
5741	Returns the parameter with the given id .
5742	Get the local parameter .
5743	Add a name and value .
5744	Add a symbol .
5745	Gets the prefix for a given string .
5746	returns true if email is ok
5747	Returns the value of a parameter .
5748	Calculates the CRC of the raw data .
5749	Returns true if this image is a thin image .
5750	Returns the index of the field with the given name .
5751	Converts a time range indicator into a human readable string .
5752	Get the time coordinate .
5753	Sets the next polygon .
5754	Sets the previous polygon .
5755	Find a property by name .
5756	Sets the current projection .
5757	Sets the coverage axis .
5758	Registers an IO provider .
5759	Registers an IO provider .
5760	Register an IO provider for the specified class .
5761	Returns true if the given class is registered with the given class .
5762	De - registers an Iosp Service .
5763	Checks if the location can be opened .
5764	Opens a new netdfFile .
5765	Opens a new NetcFile with given data .
5766	Opens the file with the given filename .
5767	Creates a netcdfFile in memory .
5768	Find a global attribute by name ignoring case .
5769	Convert this object to an ncdf element .
5770	Writes the CDL file to the given output stream .
5771	Write CDL .
5772	Outputs the CDL .
5773	Adds the given attribute to the given parent group .
5774	Adds a new attribute to the given parent group .
5775	Adds a group to this group .
5776	Adds a dimension to this group .
5777	Removes the specified dimension from this group .
5778	Adds a variable to the given group .
5779	Adds a variable to the given group .
5780	Adds a string variable to the specified group .
5781	Removes a variable from the given group .
5782	Sends an IOS message to the server .
5783	Send record structure .
5784	Finishes this builder .
5785	Reads a variable section .
5786	Reads data from a variable into a byte channel .
5787	Reads a list of variables from a list of variables .
5788	Reads a variable section from a variable section section .
5789	Create a full name for a CDM node .
5790	Create a full name with the given parent name .
5791	Checks whether the given file should be included .
5792	Checks whether this file should be excluded .
5793	Applies the AND filters to the AND filters .
5794	Append a value to this attribute .
5795	Dispatch check value .
5796	Convert a string value to a specific type .
5797	Checks whether a string is a Byte .
5798	Checks whether a string is a short .
5799	Validates an integer .
5800	Checks whether a string is an UInt .
5801	Checks whether a string is a float .
5802	Checks whether a string is a double .
5803	Gets the data type .
5804	Check if a dataset is viewable .
5805	Returns true if the given string is a valid boolean .
5806	Returns true if the given string is a valid alphanumeric string .
5807	Returns true if the given alphanumeric string is constrained by the given set .
5808	Checks whether a file path contains only files .
5809	Converts a Unicode code point to a hexadecimal string .
5810	Get a parameter .
5811	Compare two grid definitions .
5812	Processes the input stream .
5813	Processes a message .
5814	Removes double quotes from string .
5815	Mark all the variables in the stack
5816	Writes a NCML element to the file .
5817	Get the value from the Redds configuration
5818	Writes CDL representation of CDL .
5819	Create a station request
5820	Validate this object .
5821	Returns the zimuth of the camera .
5822	Returns the elevation of the message .
5823	Returns the latitudes of this record .
5824	Returns the longitudes as an array of longitudes .
5825	Returns an array of all the altitudes of this SIB .
5826	Returns the set of azimuths .
5827	Returns the set of elevations for this tile .
5828	Returns a subset of the variables with the given names .
5829	Returns a structure that matches the given variable name .
5830	Adds a member variable .
5831	Sets the member variables .
5832	Sets the parent group of this variable .
5833	Calculates the total size of each element .
5834	Reads the structure at the specified index .
5835	Read a vector structure .
5836	Returns a new structure data iterator .
5837	Gets the data category .
5838	Gets the class name .
5839	Add a parameter .
5840	Gets the documentation header .
5841	Convert a LatLonRect to a projection matrix .
5842	Retrieves the version number from a string .
5843	Determine the value of the zis property .
5844	Delete next file
5845	Set the color scale parameters
5846	Renders the plan view .
5847	Returns true if this group is a child of this group
5848	get a type by name
5849	Installs the given table in all columns .
5850	Sets the API key and api key .
5851	Creates a label with the specified string value .
5852	Creates a label with the specified lines .
5853	Creates a label with HTML content .
5854	Connect to a Cloud SQL server .
5855	Parses the CloudSqlIpTypes string .
5856	Convenience method to connect to a database .
5857	Purges the given logger .
5858	Compiles all source code files .
5859	Compiles a class .
5860	Adds a source code for a class .
5861	Read graphic data .
5862	Returns the next frame .
5863	A property that contains a list of person names .
5864	Initialize the list events .
5865	Get a person by id .
5866	Adds validation messages for the given validator .
5867	Sets the person id .
5868	Creates a new view model .
5869	Creates a view model from the given view type .
5870	Loads the list of countries .
5871	Loads the list of subdivisions .
5872	Set a string property .
5873	Obtains an immutable string property on this object .
5874	Start a new view step .
5875	Start a new FxmlView step .
5876	Clears the map .
5877	Create the index events .
5878	Safe access to a member .
5879	Loads and returns a ViewTuple from the given ViewModel .
5880	Creates the fxml path .
5881	Query for a style row
5882	Gets the pixel value .
5883	Gets the pixel values from a PNG image .
5884	Validate the image type
5885	Create an image .
5886	Sets the tile data .
5887	Execute a raw query .
5888	Wraps a query with a raw query .
5889	Queries the database .
5890	Queries a user query .
5891	Converts a Cursor to a TResult
5892	Get the feature row for the given geometry index .
5893	Register a table .
5894	Retrieves the tile for the given x and zoom level
5895	Get the coverage data
5896	Get the coverage data for a tile
5897	Get the coverage data for the tile
5898	Get the results for the tile matrix .
5899	Get the results of zoom in the bounding box
5900	Get the results from the tile matrix
5901	Get results from the tile matrix .
5902	Get the tile matrix for the requested coverage .
5903	Get the coverage data value .
5904	Sets the icon for the icon row .
5905	Get the icon for a geometry type .
5906	Open the bindings db .
5907	Convert a byte array to a Bitmap
5908	Converts a bitmap into a byte array .
5909	Create a table metadata
5910	Delete the table and table name
5911	Get or create a table metadata
5912	Get the GeoPackage ID
5913	Creates a table metadata .
5914	Create a new extension
5915	Retrieves the feature row matching the cursor .
5916	Execute a raw query and return a custom cursor .
5917	Query for features within the bounding box
5918	Query for the user custom cursor
5919	Return the count of geometries within the given envelope .
5920	Query using bounds
5921	Build the WHERE clause .
5922	Query for features within the bounding box
5923	Count the number of features in the bounding box
5924	Query for features within the envelope
5925	Query for features .
5926	Counts the number of documents within the specified range .
5927	Sets the data for a bitmap .
5928	Sets the bitmap data .
5929	Sets the bitmap compression configuration .
5930	Get the number of tiles in the bounding box
5931	Adjust the bounding box according to the zoom level .
5932	Adjust the bounding box to use for Google Maps API
5933	Adjust the WGS84 bounds in the tile grid .
5934	Adjust the size of the GeoPackage bounding box
5935	Get the bounding box for the tile level .
5936	Get the tile grid for the specified zoom level .
5937	Query for a tile
5938	Query for tile cursor by zoom level .
5939	Get the closest zoom level
5940	Returns the approximate zoom level for the specified length .
5941	Query for tile grid by zoom level
5942	Delete a tile .
5943	Counts tiles matching the zoom level
5944	Is google tiles?
5945	Gets the pixel value .
5946	Gets the pixel values .
5947	Validate the image type
5948	Creates image .
5949	Sets the value of the first pixel in the image .
5950	Get the GeoPackage by name
5951	Returns the current row .
5952	Move the invalid cursor to the next invalid cursor
5953	Query for style mappings by base id
5954	Delete by base id and geometry type .
5955	Get a rectangular rectangle .
5956	Get a rounded float rectangle .
5957	Checks if a list of databases exists .
5958	Create and close the GeoPackage database
5959	Check if a database is valid
5960	Validate database .
5961	Validate database .
5962	Validate database .
5963	Validate the database header
5964	Check if the database header is valid
5965	Add internal databases .
5966	Add external databases .
5967	Import a GeoPackage .
5968	Get the GeoPackage metadata
5969	Get the GeoPackage metadata
5970	Creates the index .
5971	Populate a GeometryMetadata with a GeometryEnvelope
5972	Delete all geometries for the given GeoPackage ID
5973	Creates or updates a new geometry metadata .
5974	Update the column metadata .
5975	Get the number of records in the table and bounding box
5976	Create a new geometry metadata from a cursor .
5977	Update rows matching the where clause .
5978	Draws a tile .
5979	Query the simple attributes rows .
5980	Checks whether the cursor is ok .
5981	Get the UserMapping DAO
5982	Get a simple attributes DAO
5983	Retrieves the mappings for a given extended relation .
5984	Retrieves the mappings for a given extended relation and related id
5985	Determine whether the base id has a mapping
5986	Returns the count of the items in the cursor .
5987	Register a cursor wrapper for the table
5988	Create a Table Custom DAO
5989	Get the tile from the request bounding box
5990	Draws a tile .
5991	Reproject a tile .
5992	Retrieve the tile results for a tile bounding box
5993	Calculate the draw overlap
5994	Sets the density .
5995	Set the line paint
5996	Set the Polygon Paint
5997	Draws the tile at the x y and zoom level .
5998	Draw a tile .
5999	Draw a tile .
6000	Query for feature count
6001	Query for feature count
6002	Query for features in the bounding box
6003	Query for features in the bounding box
6004	Draw a tile .
6005	Simplify a list of points .
6006	Get the paint for the feature style
6007	Get the paint for the feature style
6008	Get the paint for the feature style
6009	Get the paint for a polygon
6010	Get the style paint
6011	Get the style paint
6012	Get the paint for a style row
6013	Get the paint for the given style id
6014	Put a bitmap for the icon row .
6015	Creates a bitmap for the icon .
6016	Wrap a ContentValues .
6017	Create a bitmap for all layers .
6018	Recycle all layers
6019	Get the bitmap for a layer .
6020	Get the canvas for a layer .
6021	Create the bitmap and canvas
6022	Get the style mapping DAO
6023	Get the style DAO
6024	Get the icon DAO
6025	Get the feature styles for the feature table
6026	Get the styles for the feature table
6027	Get the style for the feature table
6028	Get the icons for the feature table
6029	Get the icon for the feature table
6030	Get the feature styles for a feature row .
6031	Get the feature styles for the feature table
6032	Get the styles for a feature row .
6033	Get the icons for a feature row .
6034	Get the styles for a feature id
6035	Get the icons for a feature id
6036	Sets the feature styles for the feature table .
6037	Set the style for the feature table
6038	Sets the icon for the feature table
6039	Sets the feature styles for a feature row .
6040	Sets the feature styles for the feature table .
6041	Sets the styles for the specified feature row .
6042	Set the styles for the feature table
6043	Set the style for the feature row .
6044	Set the style for the given feature row .
6045	Sets the style for the feature table .
6046	Sets the icons for a feature row .
6047	Sets the icons for the feature table
6048	Sets the icon for a feature row .
6049	Sets the default icon for a feature row .
6050	Sets the default icon for the specified feature table .
6051	Gets the style id or insert a new style
6052	Gets or inserts the icon from the table
6053	Insert a new style mapping .
6054	Delete the table style for the feature table
6055	Delete the icon for the feature table
6056	Delete the style mapping
6057	Delete the style mapping for the feature table
6058	Delete the style mapping
6059	Get all style ids for the feature table
6060	Get all icon ids for the feature table
6061	Get all style ids for the feature table
6062	Get all icon ids for the feature table
6063	Gets the image bytes .
6064	Flushes the output stream .
6065	Get the pixel value
6066	Reads the pixels from the image .
6067	Draw the feature in the tile
6068	Draw a line
6069	Draw a polygon path
6070	Add a linestring to the bounding box
6071	Add a polygon to the bounding box
6072	Get the cache for the specified table .
6073	Remove a feature row from the table .
6074	Clear all cached features .
6075	Get the cached styles .
6076	Returns the icons for the table .
6077	Get the table DAO
6078	Set the width of the column
6079	Set the height of the table
6080	Returns the width and height of the bitmap .
6081	Computes the tile density .
6082	Reads the blob value from the given row and returns it .
6083	Read a custom table from a GeoPackage connection .
6084	Returns the color or a default color .
6085	Validate the color
6086	Creates a color object from the given hex color and opacity .
6087	Create a new GeoPackageManager
6088	Set the progress
6089	Returns the number of features in the given list of types .
6090	Index a row .
6091	Delete the index for the given types .
6092	Delete the index for a row
6093	Delete the index for a geometry type .
6094	Delete the feature index
6095	Returns true if this location is indexed .
6096	Get the list of features that are indexed .
6097	Query for feature index results
6098	Returns the number of features in the feature table .
6099	Get the bounding box of the feature index
6100	Query for features within the bounding box
6101	Get the type of the index .
6102	Gets the internal file .
6103	Gets the path to an internal file .
6104	Returns the geometry type .
6105	Sets the geometry type .
6106	Checks whether the URL has a bounding box .
6107	Replace XYZ in url
6108	Checks if the URL contains any XYZ characters .
6109	Replace the bounding box in the URL
6110	Replace the bounding box in the url
6111	Get the geometry data
6112	Index a feature row .
6113	Update the last indexed time
6114	Delete the feature index
6115	Delete the index for a geometry id
6116	Returns true if the feature is indexed .
6117	Query for features in the table
6118	Query for features within the bounding box
6119	Query for features within the bounding box
6120	Return a cursor for the geometry
6121	Get the count for the Geometry Envelope
6122	Query for features within the bounding box
6123	Get the number of features in the bounding box
6124	Transforms the bounding box in the feature projection
6125	Get the metadata for a cursor .
6126	Get the metadata for a cursor .
6127	Get the feature row for the given geometry metadata .
6128	Get the tile DAOs for the feature table
6129	Get the feature DAOs for a tile table
6130	Get the bounding box
6131	Query by base id
6132	Query all unique base ids for this table
6133	Query the unique IDs for all related ids
6134	Delete by base id
6135	Delete by related id
6136	Delete by base id
6137	Builds the WHERE clause for the base id and related id columns
6138	Create a new GeoPackage metadata
6139	Delete the table metadata
6140	Rename the GeoPackage
6141	Renames the name
6142	Get all GeoPackageMetadata
6143	Get the GeoPackage metadata
6144	Get the GeoPackage metadata
6145	Get or create a GeoPackageMetadata
6146	Check if a database is external
6147	Get the GeoPackage metadata
6148	Get metadata by name like column name .
6149	Get metadata where column name is not like .
6150	Get the metadata where the name is like
6151	Create a GeoPackageMetadata from a cursor position
6152	Called when the view is created .
6153	Adds a view to the list of ParallaxViews .
6154	Creates a view .
6155	Creates a custom view .
6156	Append a sub - appender .
6157	Find the logback config file .
6158	Gets a resource URL .
6159	Configures the verbose configuration .
6160	Log a status on a resource search .
6161	Returns the string representation of the socket address .
6162	Creates a new thread pool executor service .
6163	Starts the converters .
6164	Invokes the subAppend of the event .
6165	Add a substitution property .
6166	Get the value of a property .
6167	Compiles the given tree .
6168	Evaluates an EOpt
6169	Parse a literal token .
6170	Called when the character is escaped .
6171	Returns the regular expression for a fixed date .
6172	Initialize the Evaluator .
6173	Ends the evaluation .
6174	Initialize the context .
6175	Creates a context selector from a context selector string .
6176	Sets up the application s properties .
6177	Returns the path to the mounted external storage directory .
6178	Returns the database directory path .
6179	Get absolute file path .
6180	Evaluates whether the given logging event is valid .
6181	Returns the value associated with this event .
6182	Updates the mask .
6183	Calls the filter chain .
6184	Creates the key managers .
6185	Creates the trust managers .
6186	Loads a keystore factory from system properties .
6187	Extracts location from system property .
6188	Returns the URL for the given location .
6189	Checks to see if the chain has a throwable .
6190	Stop the context .
6191	Prints a warning in a context .
6192	Prints a warning if the context has errors .
6193	Prints a warning for the given context .
6194	Adds the first line to the output stream .
6195	Gets the entry from the live map .
6196	Signals that the given key is alive .
6197	Parses a string representation of the given format .
6198	Renames a file .
6199	Checks if two files are on the same volume .
6200	Gets the value of an environment variable .
6201	Gets a system property .
6202	Sets the MDCPropertyMap for this event .
6203	Outputs the MDC for all keys .
6204	Extracts the stack trace of a given exception .
6205	Checks if the current class is in the framework space list .
6206	Adds a status to the list .
6207	Adds a listener to the console .
6208	Lookup an implicit action .
6209	Get the applicable action list .
6210	Sets the class loader .
6211	Gets a system property .
6212	Gets a boolean property .
6213	Decompitalize a name .
6214	Gets all methods of a class .
6215	Returns an array of PropertyDescriptors for a given class .
6216	Starts the appender .
6217	Add onConsoleStatusListener instance .
6218	Pop the property value .
6219	Returns the value associated with the event context .
6220	Checks whether the given event is discardable .
6221	Initialize the shutdown hook .
6222	Ends the shutdown hook .
6223	Returns enabled protocols .
6224	Returns the enabled cipher suites .
6225	Filters strings based on included patterns .
6226	cast a scope to a scope
6227	Sets the given properties in the given context .
6228	Adds an appender to the list of appenders .
6229	Removes the given appender from the list of appenders .
6230	Detaches an appender by name .
6231	Reconstructs the parent level .
6232	Call appenders .
6233	Detaches the given appender from this instance .
6234	Create a child logger with the given last name .
6235	Calls the turbo filters chain .
6236	Log a logging event .
6237	Creates a socket .
6238	Creates the parent directories for the given file .
6239	Returns the integer value of this message .
6240	Converts an integer value to a Level .
6241	Get the occurrences of a resource in the given class loader .
6242	Returns the URL of the given resource .
6243	Gets the class loader for the given object .
6244	Get the class loader for the given class .
6245	Gets the class loader of the given class .
6246	Starts the appender .
6247	Gets the tag .
6248	Start parsing and set properties .
6249	Gets the index of the first separator index of a name .
6250	Evaluates whether the given logging event matches the given event .
6251	Returns the thread name for the client .
6252	Checks whether two files are on the same file store .
6253	Initialize the mail .
6254	Append an event .
6255	Fills the buffer .
6256	Adds a new MDCValueLevelPair .
6257	Creates a converter .
6258	Creates a composite converter .
6259	Determine the compression mode .
6260	Configure the given URL .
6261	Configure a configuration file .
6262	Configure the given input stream .
6263	Builds the interpreter .
6264	Configure the SAX parser .
6265	Starts the configuration .
6266	Returns the specified property .
6267	Sets the name of this context .
6268	Checks whether the context has a status listener .
6269	Returns the time of the last reset .
6270	Start parsing .
6271	Returns the effective converter map .
6272	Get the file header .
6273	Returns the file footer .
6274	Initialize the appender .
6275	Ends the life cycle .
6276	Returns a copy of the client .
6277	Adds a client to the queue .
6278	Remove a client from the list .
6279	Get a copy of the context map .
6280	Gets value of given type .
6281	Determine the priority chain to use .
6282	Checks if the current operating system is running .
6283	Initialize the LoggerContext
6284	Returns all files in a folder that match the given stem regular expression .
6285	This method is used to print a list of status messages .
6286	Convert a string representation of a syslog facility to its numeric value .
6287	Gets the database file .
6288	Cleans logs .
6289	Checks whether the last check has expired .
6290	Sub append .
6291	Performs secondary sub append .
6292	Bind logging event .
6293	Returns a string truncated by the given object .
6294	Computes the reference mask .
6295	Merges the property map into a new map .
6296	Insert exception .
6297	Determine the length of the prefix of this path .
6298	Returns the effective level of this status .
6299	Set a property .
6300	Checks if the given class is unquoted .
6301	Create child value .
6302	Process an include .
6303	Open an URL .
6304	Checks the head and tail of the SAEventRecords .
6305	Start the server .
6306	Checks if the response is transient .
6307	Sets the default hosts .
6308	Ensure that the local index exists .
6309	Synchronizes the contents of the database .
6310	Checks if the mirror is needed .
6311	Wait for a specific task
6312	List all indexes that are offline .
6313	Converts an InputStream to a String
6314	convert input stream to byte array
6315	Consumes the connection and closes it .
6316	Returns the list of hosts that should be up .
6317	Sets the type of the Places object .
6318	Starts the browse .
6319	Put an entry into the cache .
6320	Gets the value associated with the specified key .
6321	Waits until all threads have completed .
6322	Compare two version strings .
6323	Reports an exception to the agent .
6324	Copies a directory to a directory .
6325	Initialize the properties from the given file .
6326	Get the value of a static field .
6327	Gets a method by name .
6328	Formats a percentage value .
6329	Formats a double .
6330	Formats a long .
6331	Reads a character .
6332	Convert a byte to a hex value .
6333	Writes a JSON string .
6334	Writes an integer .
6335	Write a double .
6336	Read a JSON string .
6337	Read JSON numeric chars .
6338	Reads a JSON integer .
6339	Read a JSON double .
6340	Read a JSON encoded JSON string .
6341	Execute a method call .
6342	Handles a request .
6343	Enqueue a method call .
6344	Get the IFile object for the given location .
6345	Updates the decoration .
6346	Refreshes the repository view .
6347	Returns the resource history view .
6348	Opens an editor .
6349	Report an authentication failure .
6350	Prompts for authentication .
6351	Creates the default page .
6352	Start the animation .
6353	Sets the keepAll alive flag .
6354	Sets whether this element should be omitted .
6355	Sets the owner .
6356	Adds a condition factor .
6357	Creates a condition term from a stream tokenizer .
6358	Returns true if this formula matches the condition term .
6359	Get DSL content .
6360	Loads the dsl config file .
6361	Reads the configuration from the given stream .
6362	Returns the wizard .
6363	Adds a response body .
6364	Adds an href .
6365	Inserts a new href before this element .
6366	Remove an href element .
6367	Adds a property stat .
6368	Returns the href element .
6369	Gets the status .
6370	Returns the stack frame for the given value .
6371	Checks if the given class1 is a subtype of the given class .
6372	Checks if a collection contains a specific proposal .
6373	Clones a node .
6374	Resets the stream .
6375	Create actions .
6376	Adds a connection .
6377	Returns the value of the specified property .
6378	Removes a connection from this group .
6379	Sets the location of the radar .
6380	Sets the value of the specified property .
6381	Sets the size of the gauge .
6382	Dumps a list of constraints .
6383	Adds a lock entry .
6384	Adds a child vertex to this vertex .
6385	Removes a child vertex .
6386	Initialize the bundle .
6387	Cleanup resources .
6388	Get the string from the resource bundle
6389	Replies the resource bundle .
6390	Returns the form colors for the rule builder .
6391	Sets the date time .
6392	Sets the date using the given pattern .
6393	Creates an error with the specified message and exception .
6394	Log an error .
6395	Adds a field editor .
6396	Calculate the grid layout .
6397	Apply the font .
6398	Calculate the maximum number of columns .
6399	Initialize the fields .
6400	Fire a property change event .
6401	Set the active editor .
6402	Adds the UI to the tool bar .
6403	Determine the dialect .
6404	Creates a new context based on the given user context and locator .
6405	Saves the workspace .
6406	Create table listeners
6407	Create the table .
6408	Adds an object to the cache .
6409	Put an entry in the table .
6410	Adds a new token to the tree .
6411	Adds a child node .
6412	Sets the file .
6413	Adds a condition .
6414	Adds a state token condition .
6415	Checks whether the condition matches the given condition .
6416	Gets the first prop .
6417	Gets the current status .
6418	Creates a new prop .
6419	Returns the last line of the back text .
6420	Get the last non - dash line from the back text .
6421	Binds a binding with the given identifier .
6422	Binds two parameters .
6423	Binding a message .
6424	Create the process .
6425	Create the process sample JVM .
6426	Returns the runtime id .
6427	Visit a Rete .
6428	Visit a node .
6429	Generates a dot id for an object .
6430	Adds a remove property .
6431	Adds a set property .
6432	Returns a new locator for the given resource URL and label .
6433	Get the presentation reconciler .
6434	Returns true if the given object is the same as this one .
6435	Checks whether this condition contains the given condition term .
6436	Creates a new state factor from a stream tokenizer .
6437	Add pages .
6438	Perform a DELETE request .
6439	Perform a POST request .
6440	Returns the status of a job .
6441	Executes the pull operation .
6442	Handle pull results .
6443	Sets the value at the given index .
6444	Adds an active lock .
6445	Filters the list of proposals with the given prefix .
6446	Reads a prefix from the given index .
6447	Calculate a row of rows .
6448	Paints the border .
6449	Get the edit part for the given model element .
6450	Returns the image descriptor for the given path .
6451	Declare an image registry .
6452	Adds a vertex at the specified depth .
6453	Returns the row index of the given vertex .
6454	Gets the width of the table .
6455	Dumps the contents of the matrix .
6456	Optimize the matrix .
6457	Load a retry model .
6458	Initialize the graphical viewer .
6459	Draws a new graph .
6460	Returns the breakpoint for the given source .
6461	Sets the href of this link .
6462	Checks if the server can talk to the server .
6463	Copy a node .
6464	Examine a multi - status response .
6465	Extract properties from a multi - status response .
6466	Gets the content of the server .
6467	Returns an enumeration of active locks .
6468	Returns the property .
6469	Head request .
6470	Acquire a lock .
6471	Performs a move .
6472	Check the server .
6473	Refresh a lock .
6474	Remove the specified properties .
6475	Remove a property .
6476	Sets the content of an input stream .
6477	Set the specified properties .
6478	Sets a property .
6479	Unlocks a lock .
6480	Update the version .
6481	Request version control .
6482	Deletes a node .
6483	Examines a status code and a message .
6484	Checks whether a property has a child with given name .
6485	Writes the request body .
6486	Convert a byte array to a hex string .
6487	Convert an int array to a hex string .
6488	Sets whether this node isAllProp .
6489	Sets the name of the property .
6490	Sets the prop .
6491	Strips the last word from a prefix .
6492	Updates the rules .
6493	Writes the content to the output stream .
6494	Step over the current thread .
6495	Marks the given parser errors as markers .
6496	Skip whitespace .
6497	Adds a new file to the guice .
6498	Updates the changes of a file .
6499	Gets the age .
6500	Returns the value of the Content - Length header .
6501	Gets the maximum number of forward frames .
6502	Returns true if overwrite is true
6503	Returns true if the task should be placed in the parameter .
6504	Returns the timeout value .
6505	Put a context value .
6506	Set the timeout value .
6507	Open a DSL file .
6508	Parses the given file .
6509	Extracts the metadata from a json string .
6510	Strips the object metadata .
6511	Add tokens to the tree .
6512	Returns children of the given condition .
6513	Returns an array of child nodes matching the given object .
6514	Adds child nodes to a list .
6515	Prints the node tree .
6516	Recursively prints a tree .
6517	Prints tabs .
6518	Creates a JsonValue from the given text .
6519	Get the image descriptor by its id .
6520	Performs the authorization process .
6521	Sets a request header field .
6522	Create the project sample launcher .
6523	Create the rule .
6524	Create the rule flow .
6525	Create the Java template for the rule flow sample .
6526	Returns a list of IU items that are currently selected in the tree .
6527	Create an image .
6528	Returns the name of the field .
6529	Returns the evaluator .
6530	Returns the value of this alpha node .
6531	Adds the GuvNotified properties to the properties file
6532	Sends the baseline control .
6533	Bind a member .
6534	Returns a member for the given member name .
6535	Optimize the graph .
6536	Initialize the controls .
6537	Validate the page .
6538	Creates an entity tag .
6539	Returns the opposite of the given vertex .
6540	validate OPS
6541	Check if the user belongs to the user
6542	Gets the username for the given public id .
6543	Add a yubikey to a file
6544	Verify the OATH .
6545	Clears the current password .
6546	Returns the public ID of the given OTP .
6547	Returns true if the given string represents a validOTP format .
6548	Creates an evaluation .
6549	Creates an Evaluation .
6550	Clear the cache .
6551	Returns true if this is a newer version .
6552	Gets the package name of the specified object .
6553	Gets the package name .
6554	Returns a unique descriptor for the given object .
6555	Gets the type of an object .
6556	Checks if two classes are more specific .
6557	Determine the appropriate method based on the given parameters .
6558	Returns the value of the given property on the given target object .
6559	Returns a map of property descriptors for the given target class .
6560	Gets a PropertyDescriptor from an array of PropertyDescriptors .
6561	Get the read method for the given class .
6562	Reads a character .
6563	Parses a projection .
6564	Select all elements .
6565	Returns a long value .
6566	Returns a double value .
6567	Convert value to BigInteger
6568	Convert value to BigDecimal
6569	Convert value to string
6570	Gets the numeric type for the given value .
6571	Converts the given value to the given type .
6572	Converts value to integer .
6573	Returns the numeric type of two types .
6574	Gets the numeric type of two objects .
6575	Creates a new Number .
6576	Pop the current evaluation .
6577	Generate the OGNL getter method .
6578	Generate the OGNL setter method .
6579	Flattens the tree .
6580	Initialize the result .
6581	Escape a character .
6582	Sets the root object .
6583	Evaluates the expression and returns the value .
6584	Sets the value of the given expression .
6585	Sets the value of the given object at the given root .
6586	Tests whether the given expression is constant .
6587	Returns the default watch service id .
6588	Waits until the server starts .
6589	Reads the content of the file .
6590	Reloads the current class loader .
6591	Returns an archiver with the given name .
6592	Checks the given archiver for problems .
6593	Reads the contents of a file into a string .
6594	Creates the project .
6595	Add a system property .
6596	Add a system property .
6597	Open dialog .
6598	Changes the selected directory .
6599	Refresh the button state .
6600	Creates a file observer .
6601	Returns the current folder .
6602	Create a new folder .
6603	Checks whether the given file is a valid file .
6604	Start a background job .
6605	Start a list .
6606	Ends a list .
6607	Handle a motion .
6608	Gets the crop rectangle .
6609	Computes the crop rectangle .
6610	Register the given listener and media factory .
6611	Add a span watcher to the text widget .
6612	Inflates the view associated with this spinner .
6613	Gets the drop down view .
6614	Convert a Spanned text to HTML
6615	Calculate spans within a paragraph .
6616	Creates a unique file in the target folder .
6617	Determine the original file .
6618	Returns the namespace for a given name .
6619	Return the local name of the given name .
6620	Sets an attribute .
6621	Sets an attribute .
6622	Gets the font name from the given file .
6623	Gets the font name from the given asset .
6624	Adds a new buffer to the buffers .
6625	Writes bytes to the output stream .
6626	Write a single byte .
6627	Reads from an input stream .
6628	Writes the remaining bytes to the output stream .
6629	Converts this buffer to a byte array .
6630	Sets the font size
6631	Replaces all path separators with Unix separators .
6632	Recompute focus .
6633	Make sure the view is visible .
6634	Calculate the zoom based on the highlight view
6635	Reset the document locator .
6636	Validate the given value .
6637	Adds an element type .
6638	Sets the value of the specified attribute on the given element type .
6639	Sets the parent of the given element .
6640	Returns the element type with the given name .
6641	Returns the integer value of the specified entity .
6642	Cleans all paragraphs from the given editor .
6643	Applies the given value to the given editor .
6644	Checks if a domain is a valid domain
6645	Execute the given operation .
6646	Performs redo .
6647	Replaces all occurrences of a string with another string .
6648	Gets the thread status .
6649	Sets the options for the given thread .
6650	Determine whether a thread can be decoded .
6651	Decodes a bitmap .
6652	Gets all registered fonts .
6653	Get the asset fonts map .
6654	Finds all system fonts .
6655	Sets up the XML structure .
6656	Returns a reader for the given InputSource .
6657	Returns an input stream for the given publicid and systemid .
6658	This method is called when an attribute is set up .
6659	Expand embedded entities .
6660	Lookup an entity .
6661	Restart the saved state .
6662	Pop the element from the stack .
6663	Removes an element from the stack .
6664	Gets the prefix of a name .
6665	Determines whether the given prefix and namespace is foreign or not .
6666	Removes leading and trailing quotes from the input string .
6667	Splits a string into an array of strings .
6668	Rectify an element .
6669	Converts a buffer into a name .
6670	This method is called when the instance is saved .
6671	Unregister all widgets .
6672	Processes the media event .
6673	Replace the text in the main thread .
6674	Get the base matrix for the view .
6675	Calculate the maximum zoom level .
6676	Returns true if the EditText exists in the EditText .
6677	Find spans from the specified paragraph .
6678	Encodes the given URL .
6679	Decode query string .
6680	Try to pick a directory
6681	Rotate image by degree .
6682	Sets the output .
6683	Writes a single character .
6684	Writes a string to the output .
6685	Determine whether the element is a boolean attribute .
6686	Write escaped string .
6687	Write namespace declarations .
6688	Write a name .
6689	Creates a stream if it does not already exists .
6690	Wait for the stream to be activated .
6691	Complete the store snapshot with missing instance snapshots .
6692	Tries to find the minimal duration for the next request .
6693	Handles a GetRecord request .
6694	Perform an action with retries .
6695	Tries to execute an action .
6696	Checks if the given bucket is accessible .
6697	Loads the entities from the snapshot store .
6698	Trigger the wildcard expansion handler .
6699	Replaces all occurrences of a string with a new string .
6700	Remove any characters from the input string .
6701	Adds a report to the report .
6702	Updates the properties with the given key .
6703	Returns the configuration properties .
6704	Creates an input stream based on the wro file .
6705	Convert a pre - processor map to a post processor
6706	Compile the given content .
6707	Reloads the cache .
6708	Reload the model with the given value .
6709	Returns a new ServletRequest with the given location .
6710	Creates a transformer for a base name suffix .
6711	Invoked when an error occurs .
6712	Sends a redirect to the given location .
6713	Processes a resource .
6714	Creates a handler that can be used to expand files in a group .
6715	Locates an input stream .
6716	Create the configuration .
6717	Registers the cache change listeners .
6718	Process request .
6719	Sets the WroConfiguration .
6720	Identify duplicate group names .
6721	Merges the given model into this WroModel .
6722	Locate InputStream for given URI .
6723	Apply post processors .
6724	Decorate the given processor .
6725	Process a resource .
6726	Splits an option into an array of strings .
6727	Loads the properties from an input stream .
6728	Parses the given properties string .
6729	Creates a custom manager factory .
6730	Persists the resource fingerprint of the given groups .
6731	Checks if the given group is a target group .
6732	Extend plugin classpath .
6733	Replies the default model resource .
6734	Initialize the factory .
6735	Sets the model transformer .
6736	Compiles the given content .
6737	Processes a list of resources .
6738	Process the given resources and merge them into a string .
6739	Run the pre processing in parallel .
6740	Apply a resource pre - processors .
6741	Decorate a ResourcePreProcessor .
6742	Persist the fallback storage .
6743	Returns a collection of all declared fields .
6744	Rewrite image URL based on provided CSS URI .
6745	Compute the location relative to the css uri .
6746	Add a model transformer .
6747	Displays the processed folder .
6748	Initialize the folder path .
6749	Extracts the variables from the request body .
6750	Parse CSS definitions .
6751	Replaces all variables in the CSS .
6752	Convert a post processor to a pre processor .
6753	Checks whether the searched resource is eligible for a specific resource type .
6754	Applies gzip response .
6755	Creates a decorator decorator for the given patterns .
6756	Creates a decorator decorator for the given processor .
6757	Creates a new resource change handler .
6758	Remember the fingerprint of the given resource .
6759	Applies a function to each CSS import .
6760	Filter a collection .
6761	Replies if the request is minimized .
6762	Finds all imported resources .
6763	Compute the absolute url for the given resource uri .
6764	Create a string from a list of items .
6765	Gets the aliases list .
6766	Creates the context .
6767	Evaluates the expression and returns the result .
6768	Evaluates a script .
6769	Process the resource bundle .
6770	Checks if the given request is a handler request .
6771	Create the handler request path .
6772	Rename a group .
6773	Determine the destination folder .
6774	Process a group .
6775	Check if change has changed .
6776	Tries to locate a valid resource .
6777	Create an object pool .
6778	Locates an InputStream for a resource .
6779	Open a JAR file .
6780	Extract path .
6781	Checks if the request is minimized .
6782	Add locators .
6783	Add a model factory to the model factory .
6784	Adds a dependency .
6785	Process the given content .
6786	Log a summary of the results .
6787	Processes a resource .
6788	Returns a new readWriteLock for the given key .
6789	Create a process .
6790	Parses the property contents .
6791	Get task info .
6792	Gets the compilation command .
6793	Parse header .
6794	Adds no - cache headers to the map .
6795	Extract path info from location string .
6796	Gets the servlet path from the given location .
6797	Checks whether the given request path matches the requested path .
6798	Loads a pattern from the properties file .
6799	Copy a reader to a writer .
6800	Creates a temporary file with the given extension .
6801	Clean image url .
6802	Sets an attribute .
6803	Generate data URI .
6804	Generate the data URI .
6805	Sets the context .
6806	Unset the global context .
6807	Check if the group has changed .
6808	Invoked when an exception occurs .
6809	Check if resource is changed .
6810	Updates the current hash of the group .
6811	Checks if there are resources of the given type .
6812	Creates a process .
6813	Encodes an object into a JSON string .
6814	Process all group elements .
6815	Parse a group element .
6816	Create a group .
6817	Parse a resource .
6818	Gets the resources for a given group .
6819	Log the timer .
6820	Stop a named timer .
6821	Get timer with given name .
6822	Get a named timer .
6823	Print the saturation statistics .
6824	wake up the workers thread
6825	Updates the counters for the worker .
6826	Updates the counters for all jobs in the snapshot .
6827	Updates counter if the counter is smaller than the given value .
6828	Default implementation .
6829	Instantiates a property .
6830	Resets the loading phase .
6831	Restores the saturation .
6832	Returns true if this class is inconsistent .
6833	restore the ontology
6834	restore the instance taxonomy
6835	Gets evidence for this node .
6836	Performs pre - execute .
6837	Invalidate all the reasoners .
6838	Gets the individuals that are added to this individual .
6839	Gets the individuals that should be removed from the list .
6840	Thrown when the OWL API method is not supported .
6841	Removes the element at the given position .
6842	Removes the element at the given position .
6843	Returns the position of the first element in the array .
6844	Checks whether the object is present in the darray .
6845	Adds the given element to the array if it does not already exist .
6846	Checks that the index numbers are valid .
6847	Adds a timer to this timer .
6848	Adds a timer to the timer .
6849	Put a key - value pair into the array .
6850	Removes the entry from the array .
6851	Enlarges the map .
6852	Shrink the map .
6853	Saves the given configuration to disk .
6854	method to print out class declarations
6855	Gets all the instance nodes of the given type .
6856	Removes all elements from this set .
6857	Combine a set of hashes .
6858	Combine a list of hashes together .
6859	Copies the input stream to the output stream .
6860	Create a new monitor that will be used to report the reasoner .
6861	Processes a taxonomy .
6862	Submits an input to the queue .
6863	Writes the given elkObject to the given appender .
6864	Marks the given class as not computed .
6865	Adds a new direct type node .
6866	Checks whether the chain matches the pattern .
6867	Returns a new set that contains only elements that match the given condition .
6868	Returns a new set that maps the elements of the given input .
6869	Adds an element to the set .
6870	Removes an object from the set .
6871	Adds the given counter to this counter .
6872	Log the memory usage .
6873	Sets the configuration options .
6874	Shuts down the reasoner .
6875	Prints the header .
6876	Prints values to the console .
6877	Gets a string of n characters .
6878	Adds the given RuleCounter to the given counter .
6879	Writes a resource .
6880	Gets the action parameter .
6881	Gets the property descriptor for the given property path .
6882	Returns a map of all required parameters .
6883	Checks if the given class is a single value type .
6884	Adds a link .
6885	Sets the media type .
6886	Adds a link to the link parameters .
6887	Adds a revision .
6888	Adds a parameter to the link .
6889	Expand the partial URI .
6890	Gets the rels .
6891	Returns the list of revisions associated with this link .
6892	Returns true if all required variables are satisfied .
6893	Returns the value of the property .
6894	Checks if a property is hidden .
6895	Checks if the property is present in the input annotation .
6896	Checks whether or not an explicit property include value .
6897	Returns true if this request is required .
6898	Returns the default value .
6899	Determine the parameter name .
6900	Gets the property or parameter name .
6901	Returns the vocabulary for the specified mixin .
6902	Get the query string .
6903	Append the form for the action .
6904	Print an input button .
6905	Append input or select
6906	Merges two AffinityDescriptors together .
6907	Returns the URI template components .
6908	Strips all optional variables from an action descriptor .
6909	Gets the first node with the given name .
6910	Gets the first node by rel .
6911	Returns an iterator over all child nodes .
6912	Returns a PersistentHashMap backed by the given Iterable .
6913	Construct a PersistentTreeMap from the given collection of entries .
6914	Returns an empty tree map .
6915	Returns a view of this map .
6916	Returns the last key in this map .
6917	Construct a Xform from a list of objects .
6918	Loops through a sequence of operations starting from an iterable .
6919	Drops elements until a predicate evaluates to true .
6920	Performs a series of tuples starting with a given ident .
6921	Returns a tuple that contains the given entry .
6922	Performs the first match .
6923	Registers a set of types .
6924	Returns the element at the given index .
6925	Append an element to the tail of this vector .
6926	Concatenate a sequence of items .
6927	Convenience method for creating a MutableSet .
6928	Create a MutableList from the given items .
6929	Returns an immutable set .
6930	Create a vector from an array of items .
6931	Returns an unmodifiable view of the given items .
6932	Returns a StringBuilder with indentation .
6933	Converts an array of objects into a string representation .
6934	Construct a lazy reference from a producer function .
6935	Applies the lock .
6936	Inserts the specified item into the array at the specified index .
6937	Creates a copy of an array .
6938	Suspend the current thread .
6939	Suspend the transaction .
6940	Builds a list of components from a given deployment file .
6941	Checks if a given directory is a valid directory .
6942	Creates an inheritance link .
6943	Copy methods from source to destination .
6944	Copies the given methods into the destination class .
6945	Recursively performs the tree .
6946	Remove the sbbEntity with the current class loader .
6947	Returns whether or not notifications are enabled .
6948	Get all resource links that are not referenced by this container .
6949	Installs the Service .
6950	Uninstalls a service .
6951	Determine whether a resource link name is referenced by a resource adapter .
6952	Returns a set of usage parameters for the given SBB component .
6953	Resets all usage parameters .
6954	Get a collection of profiles
6955	Returns the activity for the given profile table name
6956	Gets profile by indexed attribute value .
6957	Displays the result .
6958	Creates a string representation of an array .
6959	Fire the event .
6960	Bind a name to this node .
6961	Unbind a name .
6962	Lookup a node by name .
6963	Returns a map of name bindings for this node .
6964	Process the next event .
6965	Returns true if this TraceLevel is higher than another level .
6966	Extracts a jar file .
6967	Writes data from an input stream to the output stream .
6968	Associates the specified value with the specified key .
6969	Attach the given SbBSEntity to this node .
6970	Detaches the given SbBS entity from this node .
6971	Returns true if no SbEntity has been attached .
6972	Replies the names of the Sb entities attached to this node .
6973	Attach a timer to this node .
6974	Removes the timer with the given ID .
6975	Returns true if timers have been attached .
6976	Returns the names of all attached timers .
6977	Adds a name bound .
6978	Remove a name from the namespace .
6979	Returns true if names bound .
6980	Returns a copy of the names bound to this node .
6981	Sets the value of the cmp attribute .
6982	Gets the value of a cmp attribute .
6983	Returns a shallow copy of the cmp attributes .
6984	Initialize the notification type .
6985	Send a usage notification
6986	Downloads a remote DU file .
6987	Update the list of available components .
6988	Installs a deployment unit .
6989	Uninstalls a deployment unit .
6990	This method is called when the internal deploy is uninstalled .
6991	Display the status of the deployments .
6992	Indicates if a log record is logged .
6993	Gets the logger for the given record .
6994	Gets the components that refer to a given component .
6995	Returns the set of Sbb entities for this node .
6996	Gets the permissions .
6997	Gets the code source .
6998	Determine if a profile exists in the database .
6999	Remove this profile from the database .
7000	Update the configuration properties of this adaptor .
7001	This method is called when the application is started .
7002	Invoked when the application is stopping .
7003	Activate this entity .
7004	Deactivates this entity .
7005	Schedule end of all activities .
7006	remove this entity
7007	Returns the resource adaptor interface for the given type .
7008	Called when a service is active .
7009	Determine the activity handle to use .
7010	Called when an activity ends .
7011	This method is used to inform the RA configuration .
7012	Verify that all properties are valid
7013	Method called when the ra is stopping .
7014	This method is called when the resource is inactive .
7015	Unconfigure the ra .
7016	Unset the resource adaptor context .
7017	Unset the FaultTolerantAdaptor context .
7018	Build profile attribute map .
7019	Resume the suspended thread .
7020	Returns the list of ActivityContext handles associated with this node .
7021	Removes the object .
7022	Get the usage MBean for the given parameter set name .
7023	Decorate the abstract class .
7024	Fires a specific event .
7025	Fire an event .
7026	Invokes the getProfile method with the given name and method name .
7027	Method to get the installed usage parameter set .
7028	Gets all abstract methods from a class .
7029	Retrieves the methods from the given interface .
7030	Creates an object pool for the specified profile table .
7031	Remove the object pool associated with the specified profile table .
7032	Checks if the given notification source is the owner of the given notification .
7033	Raises an alarm .
7034	Gets the usage parameter set .
7035	Gets the spec type descriptor .
7036	Determine whether a deployment should be accepted .
7037	This method will be called once all the files have been added .
7038	Start the deployment .
7039	Stop the deployment .
7040	Show the status of the deployment .
7041	Execute after commit actions .
7042	Execute after commit priority actions .
7043	Execute after rollback actions .
7044	Execute before commit actions .
7045	Execute before commit priority actions .
7046	Returns a list of defined tracer names .
7047	Creates a new Tracer with given name and name .
7048	Removes the replicated data .
7049	Register editor editors .
7050	Process the usage parameter .
7051	Returns the object pool associated with the specified service .
7052	Create an object pool for the given component .
7053	Execute the end of the activity .
7054	Start an activity .
7055	Ends the activity .
7056	Checks preconditions for the fire event .
7057	Fire an event .
7058	Generate the SbbLocal object class .
7059	Make the getter method .
7060	Convert an argument to an object .
7061	Sets the profile ID for this profile .
7062	Extracts the message .
7063	Returns true if the given object contains the given object .
7064	Contains all elements in the child relation .
7065	Removes all elements from the collection .
7066	Returns true if this level is higher than the specified level .
7067	Resolve the level of the stream
7068	Detach classes from the pool .
7069	Adds a call to the profile .
7070	Gets the profile object associated with the specified name .
7071	This method invalidates the specified profile object from the transaction context .
7072	Sets the value of this component .
7073	Generate the concrete activity context interface .
7074	Generate the concrete methods .
7075	Sets a cached data attribute .
7076	Adds a name binding .
7077	Removes all naming bindings from the container .
7078	Remove a name binding .
7079	Attaches a timer to the cache .
7080	Cancel timers .
7081	Attaches the given sbb entity to the activity context .
7082	Detaches an SBB entity from the activity context .
7083	Gets the SBB attachments in the cache .
7084	Ends the activity context .
7085	Adds a component .
7086	Returns a collection of external dependencies .
7087	Checks if the dependency is satisfied .
7088	Checks if this unit has already been deployed .
7089	Gets the management actions .
7090	Get the management actions for the application .
7091	Determine whether this component has a reference to another component .
7092	Close the profile
7093	Returns an object name for the profile and profile table name
7094	Change the state of the profile in write mode .
7095	This method is called before the write is called .
7096	Method called after setCmpField has been set .
7097	This method is called before getCmpField is called .
7098	This method is called after the getCmpField is called .
7099	This method is called before the management method is called .
7100	This method is called after a management method invocation .
7101	Recursively deletes a directory .
7102	Creates the default constructor .
7103	Create the default usage parameter set .
7104	Creates the getter and sets the sbbEntity .
7105	Create the fire event methods .
7106	Creates the getSbbActivityContext interface .
7107	Adds the given expression to the list of expressions .
7108	Bind a key to a non - serializable factory .
7109	Renders the given name to the given target object .
7110	Decorate the abstracts .
7111	Invokes the method with the given name and argument types .
7112	Returns the real field name for the given field name .
7113	Sets the value of the specified field .
7114	Gets the value of the specified field .
7115	Set the profile context for this profile object .
7116	Initialize the profile object
7117	Unset the profile context .
7118	Replies the profile local object .
7119	Fires or fires a add or update event .
7120	Get the profileCmpSleeWrapper object .
7121	Creates a new class .
7122	Creates an inheritance link .
7123	Adds an annotation to the given object .
7124	Adds the given member values to the annotation .
7125	Gets the activity context interface .
7126	get the class pool
7127	Sets the deployment unit .
7128	Undeploys the deployment .
7129	Executes the activity .
7130	Checks if a class or interface matches the specified interface .
7131	Get all abstract methods for a given class .
7132	Resolves an input source to an input source .
7133	Checks that a tracer name is valid .
7134	Handle the given query and arguments .
7135	Check the dependencies of a component .
7136	Creates a temporary directory for the deployment .
7137	Returns the entity manager for the current context .
7138	Starts the container .
7139	Switch a class loader with a profile object
7140	Invoke a method on a proxy object .
7141	Validates the current transaction .
7142	Calculate TTL value .
7143	Is the profile class visible?
7144	Gets the profile object associated with the current transaction .
7145	Returns a list of logger names matching the specified regex .
7146	Reset the logger level
7147	Clears all loggers .
7148	Add a new logger
7149	Add socket handler
7150	Remove a handler .
7151	Translate tracer name to log4J logger name .
7152	Synchronize the log4j logger .
7153	Assigns the log4j level to the trace level .
7154	Reset the cache flags .
7155	Send a notification to the trace .
7156	Checks that the given tracer name is valid .
7157	Writes a marshalled object .
7158	Reads an object from the stream .
7159	Adds a domain to this classloader .
7160	Returns all the dependencies of this class loader .
7161	Find a class .
7162	Searches for a resource .
7163	Overrides the default implementation to find resources .
7164	Create and register a profile MBean
7165	Resume a transaction
7166	Returns the set of SbbIDs associated with this component .
7167	Retrieves all resource adaptor entities associated with this component .
7168	Initialize the Slee .
7169	Shutdown the Slee .
7170	Validate the state transition .
7171	Generate named usage parameter set .
7172	Updates the given field with the given value .
7173	Build a PolyJDBC .
7174	Sets the value of the given field with the given value .
7175	Run a transaction
7176	Parses a string representation of a region request .
7177	Gets the region .
7178	Resolves the bounds of the specified image .
7179	Returns the type of the annotation .
7180	Sets the Views for this resource .
7181	Adds viewing hints .
7182	Sets the renderings .
7183	Adds a renderer to this resource .
7184	Merges a list of profiles .
7185	Merges this profile with another .
7186	Parses a string representation of an RotationRequest object .
7187	Parse a string representation of size request .
7188	Initialize the device list .
7189	Get a dump of the current device .
7190	Handle pop box
7191	Pushes the handlePopBox jar to the device .
7192	Cleans temp directory .
7193	Pull the dump from the device .
7194	Gets the crash log .
7195	Removes tabs from the text editor .
7196	Indicates a given number of spaces .
7197	Tokenizes the text .
7198	Performs a Markdown .
7199	Escapes special characters within a tag .
7200	Adds an exception to the queue .
7201	Close all cached statements .
7202	Finds the fully qualified name of a type .
7203	Writes the target class .
7204	Writes a single bit vector .
7205	Appends a bit strings to a bit vector .
7206	Read the configuration from an input stream .
7207	Returns a list of JSON objects from a given path .
7208	Retrieves a list of objects from the path and returns a list .
7209	Sets the klov reporter .
7210	Add a screen capture to the current step .
7211	Sets system info .
7212	Selects a property .
7213	Selects a property with a given transform .
7214	Extract annotation data from annotations .
7215	Finds all annotations for a given property .
7216	Finds annotations on a given property .
7217	Finds the property descriptor for the given type .
7218	Lookup an object expression .
7219	Convert a map to a type .
7220	Converts a map to a class .
7221	Creates an object from a value map .
7222	Convert object to map .
7223	Convert an object to a Map .
7224	Gets the values of an annotation .
7225	Creates a composite validator .
7226	Lookup the list of validators and initialize them .
7227	Lookup a validator in the registry .
7228	Apply properties to a validator meta data .
7229	Removes the property if it is empty .
7230	Sets the current time .
7231	Returns the total number of entries in the cache .
7232	Hash the given object .
7233	Default options .
7234	Opens a database .
7235	Put all values in the store .
7236	Removes all elements from the store .
7237	Searches the iterator starting at the given key .
7238	Loads values from the database .
7239	Closes the database .
7240	Reduce the values of an array .
7241	Reduce the array by method .
7242	Returns the variance of the given array .
7243	Returns the mean value of the given long array .
7244	Invoke a method using reflection .
7245	Reduce the array by reduce function .
7246	Converts a timestamp to a system date string .
7247	Checks whether an object matches a criteria .
7248	Creates a not in field .
7249	Creates a criteria from a list of objects .
7250	Creates a new criteria object from json .
7251	Adds an integer to this set .
7252	Returns the max of the given array .
7253	Returns the first element of the list .
7254	Get the last element of the list
7255	Returns the last element of the list
7256	Returns the least of the given list .
7257	Returns the minimum element of a list .
7258	Returns the minimum element of an array .
7259	Processes an array of maps .
7260	Handles a collection of Maps .
7261	Convert a map to an object .
7262	Returns the value associated with the given key .
7263	Retrieves the tool tip with the given name and name .
7264	Generate a label value .
7265	Adds a hexadecimal to the char sequence .
7266	Process the read queue .
7267	Processes the write queue .
7268	Start the process
7269	set the character at index
7270	Slashes a string starting at the specified index .
7271	Check if the given string is in the given array of chars .
7272	Add a char to a string
7273	Add objects to a string .
7274	Compacts a string .
7275	Split a string into an array of strings .
7276	Split a string by space .
7277	Split string by pipe .
7278	Convert char array to string array .
7279	Convert a string to a string .
7280	check if in string is inside of string
7281	Convert a string to under bar case
7282	Returns a string representation of a number .
7283	Creates a java . util .
7284	Sort list .
7285	Returns a comparator for this field .
7286	Returns a list of child comparators for this sorts .
7287	Checks whether the given value is in the given map .
7288	Checks whether two objects are equal .
7289	Checks if two int arrays are equal .
7290	Returns the sum of the values in the given array .
7291	Rounds a number to a power of 2 .
7292	Sorts a list of fields according to the specified fields .
7293	Sorts a list according to the specified field .
7294	Set field value from map .
7295	Converts the given object to a List .
7296	Creates the SQL statement to load all version data .
7297	Deep copy .
7298	Checks whether the given object has a field with the given name .
7299	Checks if a field has a string field .
7300	Checks whether a field has a field with the given name .
7301	Gets the first field from a class .
7302	Gets the sortable field .
7303	Compares two CacheEntry objects .
7304	Compare the time .
7305	Sorts a list according to the given sorts .
7306	Sort the list according to the specified sortBy .
7307	Sort entries by component type .
7308	Sorts the values of a Map .
7309	Sorts the keys in the given map .
7310	Sorts the elements in the array using the specified sort .
7311	Returns a comparator for the specified field .
7312	Returns a comparator that returns the universal comparator .
7313	Gets the value associated with the specified key .
7314	Gets the value associated with the specified key .
7315	Increment the order .
7316	Evict the cache if needed .
7317	Try to dynamically initialize the float value if needed .
7318	Allocates a new buffer .
7319	Determines if the process should exit .
7320	Retrieve the input writer and wait for it to complete .
7321	Checks if the disk is empty .
7322	Starts the monitor .
7323	Start monitoring .
7324	Get object .
7325	Gets the query plan .
7326	Filters a group .
7327	Sets the current time .
7328	Synchronize the output .
7329	Cleans up the output stream .
7330	Write to buffer .
7331	Write buffer to disk .
7332	Initialize the output stream .
7333	Adds all of the given values to the store .
7334	Converts key to byte array .
7335	Read validator meta data .
7336	Extracts the validator meta data from a string .
7337	Reads validator meta data .
7338	Extracts the validator meta data for a given field and property .
7339	Extracts the validator meta data from the given annotations .
7340	Convert annotation data to validator meta data .
7341	Split the specified string using the specified char .
7342	Split a string by whitespace .
7343	Split a string by delimiter .
7344	Remove characters from a string .
7345	Split the given string using the given delimiter .
7346	Parse double from buffer .
7347	Parse an int from a buffer .
7348	Parse a long from a buffer .
7349	Gets a property by path .
7350	Extract fields from an object .
7351	Returns the type of the specified property on the given object .
7352	Inject a value into a property .
7353	Set property value .
7354	Gets a collection prop from an object .
7355	Get the value of a property .
7356	Gets the value of a property .
7357	Initialize this message .
7358	Creates a message with the given key and arguments .
7359	Creates the validation message .
7360	Convert a list of arguments to an array of values .
7361	Gets the current subject .
7362	Parses a text .
7363	Send a request .
7364	Delete a database .
7365	Creates a database .
7366	Returns a list of UUIDs .
7367	Lists resources at the given path .
7368	Triggers a replication operation .
7369	Queries a single value .
7370	Sets the results in descending order .
7371	Synchronize all design documents with the database .
7372	Retrieves a design document from the database .
7373	Retrieves all design documents from the database .
7374	Gets a design document from a DESIGN document .
7375	Saves the replication document .
7376	Returns the replication document .
7377	Returns all replicator documents .
7378	Delete the document .
7379	Retrieves a document by id .
7380	Finds documents matching the given query query .
7381	Checks if a document exists .
7382	Bulk document documents .
7383	Update an object .
7384	Perform an HTTP PUT request .
7385	Perform an HTTP POST request on the given URI .
7386	Perform a DELETE request .
7387	Validates the response .
7388	Sets the JSON representation of the given json object .
7389	Adds an attachment .
7390	Retrieves the changes .
7391	Reads the next row from the stream .
7392	Convert a Double to a String
7393	Shuts down the executor .
7394	Write bytes to output stream .
7395	Adds tags to the given metric .
7396	Verify and create temporary tables .
7397	Gets the namespace ID for the given namespace .
7398	Checks if is a query
7399	Builds the authentication request .
7400	Gets the verb for the request .
7401	Generate the subject access review string .
7402	Handles a request result .
7403	Handles a request failure .
7404	Initialize database .
7405	Searches scheduled jobs for a given time slice .
7406	Creates a list of buckets .
7407	Ends the exchange .
7408	Finds all data from a bucket .
7409	Returns a new buckets based on the given start and step .
7410	send a message
7411	Send one message
7412	send message to topic
7413	Performs a scan .
7414	Sets the value for a given property .
7415	Adds a file to the archive .
7416	Replaces a file with the given text .
7417	Creates the zip file .
7418	Gets the metrics for a given component and product .
7419	Fetches content .
7420	Fetch order content .
7421	Upload transformation .
7422	Compiles the given components .
7423	Creates a new directory .
7424	Ends this object .
7425	Register a model adaptor for the given type .
7426	Registers an attribute renderer in the group .
7427	Prepare template .
7428	Add a new object to the pipeline .
7429	Sets a property .
7430	Adds child object .
7431	Creates a file from a given directory .
7432	Copies content from input stream to output stream .
7433	Parse the contents of a file .
7434	Parse an XML document from a reader .
7435	Returns all elements in the given parent element .
7436	Returns a Stream of all child nodes of the given element .
7437	Gets the first child element matching the given names .
7438	Returns a Stream of elements matching the given names .
7439	Validates an XML against an XML Schema .
7440	Main entry point for testing .
7441	Sets this builder s content .
7442	Loads a content builder from a resource .
7443	Iterates through the ZIP file and processes it with the given processor .
7444	Encode characters in a string .
7445	Sets the signature .
7446	Removes all whitespace characters from the given array .
7447	Sign the request .
7448	Sets the upload model .
7449	Completes multipart upload .
7450	Sets the favorite notifications for the target .
7451	Updates the notification state for the given entry .
7452	Returns true if the cache has expired .
7453	Gets a notification .
7454	Returns the addressees
7455	Retrieve the AddresseDTO .
7456	List events for a given notification
7457	Gets the specific event .
7458	Returns the REST URL for a single notification .
7459	Returns the entry with the given id .
7460	Gets the authentication token .
7461	Returns the number of notifications .
7462	Adds new categories to the list of existing categories .
7463	Fetches the SSP notification .
7464	Creates a notification response .
7465	Map a response to a notification response .
7466	Creates a notification entry .
7467	Attaches the available actions to the list of available actions .
7468	Normalize a link .
7469	Retrieves a category from the preferences .
7470	Get the notification source from the preferences .
7471	Updates the readNotices for the target .
7472	Read a notification response from a file .
7473	Retrieves the StudentId from the given request .
7474	Extracts the id of a user .
7475	Invokes the notification .
7476	Get the map of attribute names as a Map .
7477	Normalize a GeoTuple .
7478	Replies if the box is contained inside the box
7479	Finds the closest point on the plane .
7480	Computes the sign of a point .
7481	Sets the parameters of the Se3 transformation .
7482	Sets the rotation for the given x rotation .
7483	Converts a polygon to a polygon .
7484	Converts a polygon to a quadrilateral
7485	Computes the bounding box of a quadrilateral
7486	Computes the bounding box of a polygon
7487	Computes the center of a quadrilateral .
7488	Calculates the average of a polygon
7489	Builds a convex hull from a list of points
7490	Removes polygons from the polygon .
7491	Computes the average number of points on the polygon
7492	Computes the area of two polygons
7493	Returns true if the quad contains a point .
7494	Checks whether a triangle contains a point .
7495	Computes the intersection of two lines
7496	Calculates the intersection between two lines .
7497	Computes the intersection of two lines
7498	Computes the intersection between two lines .
7499	Returns the intersection of two polygons .
7500	Returns true if the given ellipse is inside the ellipse .
7501	Returns the intersection area of two rectangles .
7502	Returns the element at the given index .
7503	Converts a matrix to a quaternion .
7504	Computes the rotation of a rotation matrix .
7505	Sets the rotation of the rotation matrix .
7506	Computes the rotation of a rotation matrix .
7507	Performs a rotation matrix .
7508	Sets the rotation for a rotation matrix .
7509	Computes the rotation matrix for an Euler type .
7510	Computes the rotation for a given axis .
7511	Sets the angle of the curve .
7512	Sorts a rigid transformation .
7513	Specifies the transform from the end to the end
7514	Performs a linear interpolation .
7515	Computes the SVD of a point
7516	Solves a point from a list of points .
7517	Gets the length of a side .
7518	Checks if the given point is inside the image .
7519	Converts a Conic general general general general layout into the destination matrix .
7520	Converts a ConicGeneral general general general layout into a 3x3 matrix .
7521	Converts a conicola general general general description to another
7522	Converts a Parabola into another one .
7523	Divide the tuple by v .
7524	Transforms a GeoTuple into a 3D matrix .
7525	Converts the input to a GeoTuple3D tuple .
7526	Sets the rotation parameter of the unit .
7527	Distance between two angles
7528	Checks to see if a line is intersect
7529	Checks to see if a point is inside the plane
7530	Checks to see if a line is intersect .
7531	Samples a plane from two lines .
7532	Extracts the quaternion from q
7533	Sorts the input points .
7534	Sets to no motion
7535	Converts a Segment into a homogeneous matrix .
7536	Converts a Segment into a homogeneous matrix .
7537	Creates a rotation for axis rotation .
7538	Checks to see if two Segments are identical .
7539	Converts latlon to unit vector
7540	Checks to see if a circle is inside a circle
7541	Returns the circle radius of a circle .
7542	Finds the distance between two lines .
7543	Finds the closest point on the line
7544	Finds the closest point in the plane .
7545	Finds the closest point on the line
7546	Finds the closest point between a vertex and a point c
7547	Transforms a plane .
7548	Transforms a set of points .
7549	Checks to see if this quadrilateral is equal to the given tolerance .
7550	Computes the acute angle between two lines .
7551	Converts a linestring to a parameterized line .
7552	Convert a line to a line .
7553	Converts a LineSegment from a LineSegment .
7554	Converts a LineSegment into the provided image .
7555	Converts a line to a point .
7556	Converts a line to a line .
7557	Converts a line parameterized to a square matrix .
7558	Convert a line parameterized to a square matrix .
7559	Converts a line parameterized to a line .
7560	Converts a plane into a plane .
7561	Converts a plane to a plane .
7562	Converts the plane from world to world coordinates .
7563	Converts a point into a 3D coordinate matrix .
7564	Converts a plane into world coordinates .
7565	Checks if two tensors are identical
7566	Creates a copy of this matrix .
7567	Returns the Euclidean norm of this matrix .
7568	Computes the t - value t .
7569	Returns true if there are no occurrences .
7570	Checks to see if a parabola is equivalent
7571	Calculates the center of a point .
7572	Computes the acute angle between two lines .
7573	Checks to see if a point is infinite .
7574	Creates a random number of points with a standard deviation
7575	Converts a point into a 3D location .
7576	Subtracts two points .
7577	Returns true if the specified points are identical .
7578	Sets the shape of this image .
7579	Converts an ellipse to an ellipse .
7580	Computes the location of a point .
7581	Computes the angle between the given ellipse .
7582	Computes the tangent of the given ellipse .
7583	Selects the tangent .
7584	Computes the corner of the polygon .
7585	Computes the distance between two lines .
7586	Computes the Euclidean distance between two lines .
7587	Computes the distance between two lines .
7588	Computes the distance between a plane and a point .
7589	Returns the distance between the given point and point .
7590	Returns the Euclidean distance between two lines .
7591	Returns the squared Euclidean distance between two lines .
7592	Returns the Euclidean distance between the given point and p .
7593	Returns the squared Euclidean distance between the given point .
7594	Returns the Euclidean distance between the given polygon .
7595	Returns the squared Euclidean distance between the given polygon .
7596	Computes the distance from a line .
7597	Returns the Euclidean distance between the given point and point .
7598	Computes the distance between the given ellipse and the given point .
7599	Adds a new transformation .
7600	Finds the closest point on the line .
7601	Finds the closest point in the ellipse
7602	Computes the polynomial curve .
7603	Creates a random vector .
7604	Calculates the perpendicular vector from A to A
7605	Checks if two vectors are identical .
7606	Normalize a vector .
7607	Creates a new matrix whose coordinates are contained in the given vector .
7608	Converts a matrix to a real vector .
7609	Returns the Euclidean distance between the given point and the given coordinates .
7610	Sets the ellipse
7611	Normalize this vector .
7612	Computes the angle between three points .
7613	Computes the magnitude of the quadrilateral
7614	Checks if the polygon is simple .
7615	Computes the mean
7616	Sorts a list of points in clockwise order .
7617	Computes the normal for a set of points .
7618	Checks if polygon is convex .
7619	Multiply this vector by scalar .
7620	Returns the maximum absolute value .
7621	Returns the Euclidean distance between two points .
7622	Returns the squared Euclidean distance between two points .
7623	Selects a plane from a plane .
7624	Creates a random number of points in the specified range .
7625	Creates a random number of points with a standard deviation
7626	Computes the mean .
7627	Computes the mean .
7628	Invalidates all cached tokens .
7629	Invalidates all tokens that match the given predicate .
7630	Combine a collection of strings into a Set .
7631	Get the features for the server .
7632	Retrieves a list of config dropins from a folder .
7633	Retrieves the features from a file .
7634	Parses the include node .
7635	Parse features manager node .
7636	Downloads the jsons file for the given productId and version .
7637	Retrieves a set of Liberty features from a JSON file .
7638	Checks whether the given list of features should be installed .
7639	Determines whether a collection contains all items in the collection ignoring case .
7640	Calculates the next product version .
7641	Extract the symbolic name from a jar file .
7642	Find a jar based on a map installation jar .
7643	Checks if two files are comparable .
7644	Extracts the version from the file name .
7645	Compare two strings .
7646	Runs the product info command .
7647	Determine whether the given jar file contains a Spring Boot - Boot - Boot - Boot Uber Uber - Boot - Boot - Boot - Boot - Boot - Boot - Boot - Boot - Boot Uber Uber - specific jar file .
7648	Convenience method for retrieving an arquillian property .
7649	Checks if the file is working in this environment .
7650	Move the cursor to the center of the given length .
7651	Compare two objects .
7652	Load an integer from a string .
7653	Throw an array of dispatchingParty .
7654	Verify whether or not the certificate is valid .
7655	Swaps a puzzle with a new position
7656	Returns the distance between all cells in the target .
7657	Print formatted string .
7658	Print formatted formatted string .
7659	Show a fishy decision .
7660	Write a variable .
7661	Returns a uniform value between 0 and b
7662	Returns a uniform number from a given range .
7663	Returns the number of poisson with a given lambda .
7664	Returns the index of the elements in the given array .
7665	Prints the distribution
7666	Capitalizes the first character of a word .
7667	Capitalize first letter .
7668	Fix path .
7669	Convert a CriteriaJoin to a String
7670	Gets the token string .
7671	Extract auth token from request context .
7672	Extracts the auth token from a cookie list .
7673	Register the Guice bound .
7674	Gets all permissions for a role .
7675	Add a projection to this projection
7676	Convert a JobInfo object to a JobDetail
7677	Convert a trigger to a trigger
7678	Sets the repeat interval values .
7679	Sets start and end time .
7680	Add a mail to the queue
7681	Writes the content to the output stream .
7682	Initialize the scheduler .
7683	Returns a collection of fields for the given class .
7684	Returns a map of field names for the given class .
7685	Creates a response for the given exception .
7686	Configure the token based on the given configuration .
7687	Generate a hash from attributes .
7688	Generate the token string .
7689	Sends a MIME message .
7690	Generates a strong password .
7691	Changes the password of a user .
7692	Gets the user by username .
7693	Hashes a password .
7694	Verify that the given account name is valid .
7695	Verify the password strength .
7696	Provide the search model .
7697	Called when the session is successful .
7698	Rolls back a transaction .
7699	Starts the transaction .
7700	Configure field by name
7701	Checks if authorization is authorized .
7702	Try to parse an object
7703	Constructs a response with an internal error .
7704	Create a equals expression .
7705	Creates a not equal expression .
7706	Creates a less than expression .
7707	Creates a less than or equal to the given value .
7708	Creates a greater than expression .
7709	Creates a Restriction that is greater than or equal to the given value .
7710	Creates an ilike expression
7711	Create a IN expression
7712	Registers a namespace .
7713	Sets the content of this resource .
7714	Adds a relation to this resource .
7715	Returns a copy of this resource .
7716	Changes the resource with the given namespace .
7717	Returns true if the input can be decoded .
7718	Encode base64 string .
7719	Compares two readers .
7720	Move a file or directory .
7721	Tries to touch a list of files
7722	Gets the base name of the given file .
7723	Adds the padding to the buffer .
7724	Returns the short name of a class .
7725	Returns all super types of the given class .
7726	Verify the given hash .
7727	Reads a string from the standard input stream .
7728	Appends a byte to the buffer .
7729	Appends bytes to the buffer .
7730	Creates a copy of the given array .
7731	Returns a new Fraction .
7732	Returns the subtraction of this Fraction .
7733	Returns a new fraction with the specified fraction .
7734	Returns a new fraction by the specified fraction .
7735	Max value .
7736	Returns the minimum of the given long values .
7737	Validates a condition .
7738	Fetches the content of the given latitude and altitude .
7739	Fetches the content of a given latitude and date .
7740	Fetches the content of a given latitude and direction .
7741	Find hourly point estimates from today .
7742	Searches for a given date time .
7743	Fetches weather data for a given query .
7744	Creates a simple forecast forecast for a given day .
7745	Creates a long term forecast .
7746	Creates a new Location from a string representation .
7747	Fetches the available metadata data .
7748	Create a symbol name for a given point .
7749	Determine the saturation level for a given forecast .
7750	Creates an URI from a string representation .
7751	Checks if the given date is sun .
7752	Gets the point forecast for a given date time .
7753	Gets the best fit period forecast .
7754	Fetch the weather data for the given latitude and latitude .
7755	Fetches weather data for the given latitude and language .
7756	Update database .
7757	Invokes a method .
7758	Acquires the object .
7759	Gets a referenced object .
7760	Gets a referenced object .
7761	Gets the configuration object .
7762	Gets the flag from the configuration .
7763	Creates an Iterator over the given service .
7764	Gets the decoder from the given bootstrap configuration .
7765	Returns a list of service implementations for the given interface .
7766	Returns a module instance for the given interface .
7767	Acquires an input stream .
7768	Get the size of the data .
7769	Gets the wrapped data .
7770	Returns the component at the given index .
7771	Get the prefix of this name .
7772	Returns whether or not the compiler should be colored .
7773	Execute the HsRegex .
7774	Performs a loop .
7775	Sets the subexpression .
7776	Dispatches the given subtraction .
7777	Intersection of a subexpression .
7778	Clones the output chains .
7779	Recursively descend from subtre .
7780	Recursively marks all subres of a subtre .
7781	Compute the NFA node .
7782	Parse a subre .
7783	Traverse a state .
7784	Non - word .
7785	Clone a word .
7786	Parse a reference number .
7787	Parse a bracket .
7788	Scan plain text .
7789	Create a new Lacon .
7790	Process one character .
7791	Process a vector .
7792	Returns the color for the given codepoint .
7793	Create a new pseudo color .
7794	Processes a range of colors .
7795	Frees all available colors .
7796	Add colorchain to colorchain
7797	Removes the colorchain from the color description .
7798	Dumps all available colors .
7799	Start lexer .
7800	Parses prefixes .
7801	Stores the pattern expression .
7802	Returns the color for the given codepoint .
7803	Initializes a new state set .
7804	Returns the last seen value in the state set .
7805	Returns a set of UnicodeSet containing the given character .
7806	Returns a set of Unicode sets for a given class name .
7807	Sorts the codcs .
7808	Returns a string representation of this segment .
7809	Create a new state .
7810	Moves all arcs from old to new state .
7811	Moves all the ins from old to newState .
7812	Copies all ins from old to newState .
7813	Copies all outgoing chains from old to new state .
7814	Drops a state .
7815	Frees a state .
7816	Create a new arc .
7817	Duplicate a state .
7818	Set special colors .
7819	Dump information about the network .
7820	Dumps a state .
7821	Dumps arcs for a given state .
7822	Dumps an arc .
7823	Prints an arc .
7824	Performs optimization .
7825	Checks to see if there is a match .
7826	Combine two arcs .
7827	Cleans up the internal state .
7828	Recursively marks a state as reachable .
7829	Mark a state as reachable .
7830	Fixes empty states .
7831	Marks an empty arc .
7832	Gets the rule parameters .
7833	Gets the rule interpreter plugins .
7834	Gets plugin plugins .
7835	Gets the rule selection .
7836	Runs the given arguments .
7837	Returns the message for the given CliExecutionException .
7838	Gather the standard options .
7839	Gathers all tasks and adds them to the given options .
7840	Gather task names from a given task factory .
7841	Interprets the command line .
7842	Gets the command line .
7843	Executes a task .
7844	Read properties from command line .
7845	Prints usage information .
7846	Gets the home directory .
7847	Create the plugin class loader .
7848	Gets the ids of all cells in the given range .
7849	Gets all cells in the given range .
7850	Returns the URI of the given target .
7851	Add a route .
7852	Returns the number of routes in this route .
7853	Add a route to this router .
7854	Add a route .
7855	Add a route to this router .
7856	Returns true if any of the matched elements match the given request path .
7857	Wraps the given property and returns a Criterion .
7858	Gets the store file name .
7859	Compare two folders .
7860	Compare two entries .
7861	Compare two bookmarks .
7862	Sets the last modified time of the servlet class .
7863	Returns a list of dependency names .
7864	Find a class .
7865	Parse the Authorization header .
7866	Get the instance of the ProtectedFunctionMapper .
7867	Registers a function mapping .
7868	Get the map for a function .
7869	Resolve a function .
7870	Sets the values of this field .
7871	Resolve a named variable .
7872	Parse a file .
7873	Parses a jar file .
7874	Parses a tag file .
7875	Parse the jar file .
7876	Create a compiler
7877	Gets a resource as a stream .
7878	Calculates the last modification timestamp .
7879	Find class loaders .
7880	Checks whether the given classloader is the same .
7881	Start loading of a class .
7882	Reads the stream header .
7883	Paginate results .
7884	Create a MetaKey from a string .
7885	Fill the requirements .
7886	Gets the tag file information .
7887	Parses the implicit TLD document .
7888	Gets checksum .
7889	Gets file size .
7890	Validate the channel name .
7891	Seeks to the given block .
7892	Locates the block at the given position .
7893	Retrieve a list of MavenArtifacts from the given artifacts supplier .
7894	Updates the state of the optimization .
7895	Calculate one byte price for a single byte
7896	Calculate the price for a list of possible repos
7897	Calculate the normal match rates for a given position
7898	Throws an exception if the position is expected .
7899	Throws an exception for invalid byte .
7900	Scans all the tlds in the directory .
7901	Scans the XML file and creates a TLD information object
7902	Adds a JSPServletWrapper to this context .
7903	Returns the parent class loader .
7904	Sets a bytecode .
7905	Gets the birth time of a bytecode .
7906	Save bytecode for given class name .
7907	Perform compile .
7908	Initialize the classpath .
7909	Starts the background thread .
7910	Stop the thread .
7911	Main thread run .
7912	Find a channel by its name .
7913	Finds a channel by its name .
7914	Update the deploy groups cache .
7915	Returns a list of deploy groups .
7916	Copy bytes from the input stream to the output stream .
7917	Parse the content of a JSP reader .
7918	Read the attributes from the jsp reader .
7919	Parse a quoted string .
7920	Add include directives
7921	Parse attribute and body .
7922	Add an attribute .
7923	Adds a child node .
7924	Returns an iterator over the attributes .
7925	Returns children of this node .
7926	Finds children with given name .
7927	Replies the base coordinates for this instance .
7928	Returns the variable name for the given variable name .
7929	Set thread .
7930	Unset the thread .
7931	Finds the wrapped output stream .
7932	Writes an optional string to the given writer .
7933	Writes the given field name and value to the given writer .
7934	Add an element to the parent element .
7935	Adds an element to the parent element .
7936	Writes the next character .
7937	Sets the writer .
7938	Allocates the buffer .
7939	Performs a dynamic mapping .
7940	Gets the state of the given key .
7941	Registers a model with the given key .
7942	Stream data from the data path .
7943	Parses a job .
7944	Checks if the request is authenticated .
7945	Finishes writing .
7946	Create a Gson instance with pretty printing .
7947	Encode this symbol .
7948	Creates a union of two set of meta keys .
7949	Get the Throwable from the request .
7950	Checks if the given coordinates are a checksum extension .
7951	Finishes writing .
7952	Returns the exception associated with this request .
7953	Evaluate an expression .
7954	Creates a prefix from OSGi properties .
7955	Checks if the given path is an XML file .
7956	Parse a tag file directive .
7957	Load a tag file .
7958	Remove all generated classes with the given name .
7959	Main method .
7960	Sets the uri root .
7961	Scans all files in the given directory .
7962	Finds the URI root of the given file .
7963	Initialize the system class loader .
7964	Moves the position in the hash table .
7965	Check if the next character matches the input string .
7966	Checks if the string matches any whitespace .
7967	Skip characters until character is found .
7968	Skip characters until escape occurs .
7969	Skips over the content until the end tag is found .
7970	Parse a token .
7971	Pop the current file .
7972	Returns unclassified coordinates .
7973	Filters the aspect information from a list of aspect information .
7974	Gets the missing providersIds .
7975	Sets the schema resource prefix .
7976	Sets the DTD resource prefix .
7977	Encodes a prefix .
7978	Converts the given node to a tree node .
7979	Merges the errors from the given binding result into the given result .
7980	Initialize the binder .
7981	Scans and returns a map of channel aspect information .
7982	Unqualify a path .
7983	Invokes the specified plugin .
7984	Gets a byte array from the cache .
7985	Gets an int array .
7986	Creates an Aether result .
7987	Get a resource as a stream
7988	Checks the validity of the tag library .
7989	Pushes an include state .
7990	Determine the encoding of a file .
7991	Scan XML declaration .
7992	Report a fatal error .
7993	Gets the real path for a given path .
7994	Gets the resource at the given path .
7995	Gets a resource as a stream .
7996	Get the paths of a resource .
7997	Log a message and exception .
7998	Adds a filter .
7999	Returns the buffer size .
8000	Returns the memory usage .
8001	Sets a preset dictionary .
8002	Moves to the buffer .
8003	Fills the buffer with the specified number of bytes .
8004	Process pending bytes .
8005	Returns the number of bytes that match the input buffer .
8006	Returns the number of bytes that match the input buffer .
8007	Checks whether the matches matches .
8008	Moves the position of the buffer .
8009	Recycle the stream .
8010	Flush the buffer .
8011	Clears the buffer .
8012	Flush output .
8013	Closes the stream .
8014	Writes a string .
8015	Allocate a char buffer
8016	This method is called when an exception is thrown .
8017	Generate a key based on the meta data .
8018	Generate the compiled class .
8019	Compile the source file .
8020	Remove generated files .
8021	Initialize the java compiler .
8022	Determine whether the given path is a system jar .
8023	Quote a character .
8024	Generate the CSS declarations
8025	Compile the tag handler pool
8026	Generate XML prolog .
8027	Generate the postamble .
8028	Prints the postamble .
8029	Generate the page .
8030	Print the attributes of the tag handler
8031	Reads the properties from the given stream .
8032	Export a single channel .
8033	Validate the XML view
8034	Gets the handler .
8035	Parses the given expression .
8036	Compare two property groups .
8037	Checks if the given URI is a JSP page
8038	Prints a comment .
8039	Prints a string .
8040	Prints the specified string .
8041	Prints a string with multiple lines .
8042	Returns the escaped expression for the given expression .
8043	Checks the given scope .
8044	Escapes a string .
8045	Validate the given expressions
8046	Gets the tag handler class name .
8047	Creates a java package name from a path .
8048	Splits the given path using the given pattern .
8049	Makes a valid identifier .
8050	Makes a single character .
8051	Determine whether the given string is a Java keyword .
8052	Adds a property to the map .
8053	Create a modifier string .
8054	Returns a sorted set of metadata .
8055	Performs the cleanup .
8056	Gets the basename of a file .
8057	Puts a value into the cache .
8058	Loads the database .
8059	Builds a collection of metrics from an aggregated payload .
8060	Resolve a number .
8061	Write object to stream .
8062	Returns the TTL value for the given rollup .
8063	Creates prepared statements .
8064	Tracks delayed metrics .
8065	Track delayed aggregated metrics .
8066	Reads an unversioned double from the stream .
8067	Puts a number or long into the stream .
8068	Returns an unmodifiable map .
8069	Creates the container .
8070	Schedule slots eligible for rollup .
8071	Clears the slot from the running state .
8072	Registers an event listener .
8073	Register a listener for an event .
8074	Remove an event .
8075	Emit an event .
8076	Returns the list of listeners associated with the given event .
8077	Get the name of the remote file .
8078	Append a rollup event .
8079	Parses the file name .
8080	Starts the server .
8081	Gets the rollup for the given type and granularity .
8082	Initialize an IOContainer from the configuration .
8083	Puts a TTL value into the given table .
8084	Computes the maximum lengths for each output .
8085	Formats the given headers .
8086	Formats a set of outputs into a string representation .
8087	Register metrics for the given object name .
8088	Sets the thread pool name .
8089	Add a metric .
8090	Returns the complete set of metric names .
8091	Gets the tokens from the given locator .
8092	Puts a rollup .
8093	Create a granularity from a list of points .
8094	Calculates the granularity of a duration less than the given number of points .
8095	Sets the current server time .
8096	Gets the unique hosts .
8097	Get the maximum number of connections per host .
8098	Returns a collection of metric column families .
8099	Insert metrics .
8100	Insert metrics .
8101	Returns all locators for this slot .
8102	Get metric names from ES .
8103	Creates a regex regex based on the given query string .
8104	Start the uploader .
8105	Stops the upload .
8106	Checks if the given locator is currently in the batch layer .
8107	Returns true if locator is currently in discovery layer .
8108	Returns true if the given locator is currently active in token discovery layer .
8109	Returns true if the given locator is currently in the specified slot .
8110	Sets the delayed locator for the specified slot .
8111	Maps a range to a range of ranges .
8112	Returns a range of ranges for the given granularity .
8113	Insert metrics .
8114	Insert metrics for a column family .
8115	Checks if a metric is delayed .
8116	Returns a bound statement for a given metric if it is a delayed location .
8117	Reads metadata values .
8118	Returns a serializer for the given type .
8119	Checks if the content type is valid .
8120	Checks whether the given request is valid .
8121	This method will be called every time a batch is sent .
8122	Checks whether the aggregated metrics is valid .
8123	Checks whether the download thread is running .
8124	Gets a new extractor .
8125	Checks whether the given OS name matches the regular expression .
8126	Starts the catalog .
8127	Stop the RabbitMQ process .
8128	Gets default instance .
8129	Sets the ice servers .
8130	Adds a list of ice servers .
8131	Method to transmit a message
8132	Send a message to all peers
8133	Gets the value of the witereresse property .
8134	Gets the value of the userDefinedField property .
8135	Gets the value of the userDefinedAny property .
8136	Sets the value of the apiSuchfelder property .
8137	Gets the value of the multimediaAnhang property .
8138	Gets the value of the status variable .
8139	Gets the value of the statusIC24 property .
8140	Gets the value of the statusHP property .
8141	Gets the value of the importmod property .
8142	Gets the value of the addruck property .
8143	Gets the value of the waehrung .
8144	Gets the value of the bodenbelag property .
8145	Sets the value of the region property .
8146	Sets the value of the area property .
8147	Sets the value of the address property .
8148	Sets the value of the description property .
8149	Sets the value of the rentCollectionPeriod property .
8150	Sets the value of the Furnished property .
8151	Sets the value of the phone1 property .
8152	Sets the value of the phone2 property .
8153	Sets the value of the contactName property .
8154	Sets the value of the phoneInfo property .
8155	Sets the value of the mainEmail property .
8156	Sets the value of the ccEmail property .
8157	Sets the value of the externalId property .
8158	Sets the value of the agentId property .
8159	Sets the value of the epart property .
8160	Sets the value of the jahrgang property .
8161	Sets the value of the gbaeudePart .
8162	Sets the value of the bueroType property .
8163	Replies if the given value is a valid number .
8164	Sets the value of the gbiete .
8165	Sets the value of the gruppe property .
8166	Sets the value of the agent property .
8167	Gets the value of the property property .
8168	Sets the value of the stand - property .
8169	Gets the value of the userDefend property .
8170	Sets the value of the zeiteinheit property .
8171	Gets the value of the zimmer property .
8172	Gets the value of the hauses property .
8173	Gets the value of the bueroPane property .
8174	Gets the value of the gastgewerbebe property .
8175	Gets the value of the landUndUndefires property .
8176	Gets the value of the sonstige property .
8177	Gets the value of the zinshausRenderer property .
8178	Gets the value of the terrain property .
8179	Sets the value of the Uefang property .
8180	Sets the value of the wtnung .
8181	Gets a country code from a given country .
8182	Gets the country code from an ISO 3166 code .
8183	Gets the country code from a given country .
8184	Extracts the country code from a ISO 2166 ISO 2166 ISO 2166 ISO 2166 ISO 3166 ISO 2166 ISO 2166 3166 ISO 2166 3166 3166 ISO 2 .
8185	Gets a country name .
8186	Translate a country name to a country
8187	Gets the value of the bbieter property .
8188	Sets the value of the category property .
8189	Gets the value of the pdf property .
8190	Sets the value of the Aktionart property .
8191	Sets the value of the realestateitems property .
8192	Sets the value of the pack property .
8193	Downgrades the given document to the previous version .
8194	Upgrades the document to the given version .
8195	Gets the value of the content property .
8196	Gets the field names .
8197	Sets the value of the blick property .
8198	Sets the value of the paushell property .
8199	Sets the value of the monatsmiete property .
8200	Gets the value of the parkplacement property .
8201	Sets the value of the lastenaufugugt .
8202	Sets the value of the zustand property .
8203	Gets the value of the feld property .
8204	Handle validation event .
8205	Dumps the contents of this buffer to a writer .
8206	Gets the value at the given position .
8207	Prints the contents of this record .
8208	Set a value at the given position .
8209	Sets the value of the check property .
8210	Sets the value of the hayp property .
8211	Gets the value of the einergiePass property .
8212	Sets the value of the keller property .
8213	Sets the value of the grundType property .
8214	Sets the value of the Geschl attribute .
8215	Sets the value of the HallConstant property .
8216	Gets the value of the wiedermin property .
8217	Gets the value of the teilungiefert .
8218	Upgrades the document version to the previous version .
8219	Gets the value of the Bevorzugt property .
8220	Gets the value of the wunsch property .
8221	Sets the value of the art property .
8222	Sets the value of the modus property .
8223	Gets the value of the emailSonstige property .
8224	Gets the value of the telSonstige property .
8225	Sets the value of the handelTyp property .
8226	Downgrades the document to the previous version .
8227	Sets the value of the apiHost1 property .
8228	Sets the value of the apiSuchProof2 property .
8229	Sets the value of the apiHit3 property .
8230	Gets the value of the row property .
8231	Sets the value of the dinerZuAsset property .
8232	Gets the value of theAnhang property .
8233	Gets the value of the value of the objekt .
8234	Gets the value of the objectkustand property .
8235	Gets the value of the heausKategorie property .
8236	Gets the value of theaustatitaet property .
8237	Gets the value of the vermarktungs property .
8238	Gets the value of the interessent property .
8239	Sets the value of the wert .
8240	Sets the value of theckerLand property .
8241	Sets the value of the bauerldung .
8242	Sets the value of the bootsstaende property .
8243	Sets the value of theBuero property .
8244	Sets the value of the las property .
8245	Sets the value of the dppelhaus property .
8246	Sets the value of the einamiliste property .
8247	Sets the value of the einzelHandlers property .
8248	Sets the value of the einzelKelt .
8249	Sets the value of the garagen property .
8250	Sets the value of the garten property .
8251	Sets the value of the granularity property .
8252	Sets the value of the gewerbe property .
8253	Sets the value of the hotel property .
8254	Sets the value of theindustrie property .
8255	Sets the value of the keineBurbung .
8256	Sets the value of the kleingewer property .
8257	Sets the value of the lager property .
8258	Sets the value of the mehrfamily property .
8259	Sets the value of the Obsstpliefert .
8260	Sets the value of the parkhaus property .
8261	Sets the value of the produktion property .
8262	Sets the value of the Reihenhaus property .
8263	Sets the value of the stellplaet property .
8264	Sets the value of the villa property .
8265	Sets the value of the wald property .
8266	Sets the value of the ANBieter property .
8267	Gets the value of the wtnung property .
8268	Gets the value of the grundueck property .
8269	Gets the value of the einzelHandlers property .
8270	Gets the value of the HallenLagerProperties property .
8271	Gets the value of the parken property .
8272	Gets the value of the freizeitimerGets property .
8273	Gets the value of the objektater property .
8274	Gets the value of the stellplacementPart property .
8275	Sets the value of the maxDauer property .
8276	Gets the value of the feature property .
8277	Sets the value of the Zimmertyp property .
8278	Upgrades from previous version to previous version
8279	Sets the value of the keineAngabe property .
8280	Sets the value of the errdwaerme property .
8281	Sets the value of the solarheizung .
8282	Sets the value of the pelleiefert .
8283	Sets the value of the gas property .
8284	Sets the value of the oel property .
8285	Sets the value of the fernerme property .
8286	Sets the value of the strom property .
8287	Sets the value of the kohle property .
8288	Returns a random string of the specified length .
8289	Creates a random number of letters .
8290	Creates a random string .
8291	Gets the value of theWarnungKategorie property .
8292	Sets the value of the benutzer property .
8293	Sets the value of the objectEekTE property .
8294	Gets the value of the feed property .
8295	Sets the value of the moeb property .
8296	Gets the value of the serviceleistungen property .
8297	Sets the value of the subAdministrativeArea property .
8298	Sets the value of the city .
8299	Sets the value of the locality property .
8300	Downgrades the document to the previous version .
8301	Upgrades the given document .
8302	Sets the value of the land typ property .
8303	Gets the value of the field property .
8304	Upgrades the given document to its version .
8305	Gets the value of the ad property .
8306	Sets the value of the Gastgewyp property .
8307	Sets the value of the pliefart .
8308	Gets the value of the datenvabelings property .
8309	Gets the value of the klimmage property .
8310	Gets the value of the image property .
8311	Sets the value of the priceType property .
8312	Sets the value of the newDevelopmentAvailability property .
8313	Sets the value of the directions property .
8314	Sets the value of the CO2Rating property .
8315	Sets the value of the energy property .
8316	Sets the value of the viewingDetails property .
8317	Sets the value of the propertyStatus property .
8318	Sets the value of the pictures property .
8319	Sets the value of the Bebaubar attribute .
8320	Upgrade the document .
8321	Sets the value of theParkenTyp property .
8322	Sets the value of the alter attribute .
8323	Sets the value of the freizeitype property .
8324	Sets the value of the telefonart property .
8325	Sets the value of the emailart property .
8326	Sets the value of the outlook property .
8327	Sets the value of theiroRental property .
8328	Create a user defined field .
8329	Gets the value of the fehler property .
8330	Sets the value of the erbraint property .
8331	Gets the value of the stpSonige property .
8332	Gets the value of the valuelist property .
8333	Sets the value of the minDauer property .
8334	Sets the value of the zinsTyp property .
8335	Gets the value of the photo property .
8336	Sets the value of the metadata property .
8337	Sets the value of the feeds property .
8338	Sets the properties value for this Feed .
8339	Downgrades the given document to the previous version .
8340	Upgrades the given XML document .
8341	Gets the value of theimmelie property .
8342	Gets the value of the objekt property .
8343	Gets the value of the fehlerliste property .
8344	Gets the value of the status property .
8345	Sets the value of the Sonstige property .
8346	Sets the value of the distanz property .
8347	Gets the value of the distanzen property .
8348	Gets the value of the distanzenAsset property .
8349	Returns true if the exception is compatible with the throw clause .
8350	Sets the bindings .
8351	Register a namespace URI .
8352	Remove a binding .
8353	Returns true if the content contains an opening tag .
8354	Consumes non - comment tokens .
8355	Consumes the last comment .
8356	Extracts the index of a comment token .
8357	Initialize logging .
8358	Start a namespace mapping .
8359	Adds an iterator to the composite iterator .
8360	Add an option .
8361	Adds a string option .
8362	Adds an integer option .
8363	Adds a long option .
8364	Adds a double option .
8365	Adds a boolean option .
8366	Parse arguments .
8367	Creates a new instance of the given class .
8368	This method is called after the current thread has access .
8369	Sets the target object .
8370	Prepares the builder .
8371	Finds a method that matches the given method name .
8372	Converts integer to string .
8373	Serialize an object to a byte array .
8374	Deserialize an object .
8375	Gets the first child element with the given tag name .
8376	Get the text value of the child element with the given tag name .
8377	Get a list of child elements .
8378	Returns true if the node name matches the desired name .
8379	Returns true if the node name matches the desired names .
8380	Sets the length of a string .
8381	Monitor for a release listener .
8382	Add a release listener .
8383	Returns true if the monitor is still alive .
8384	Calculate mobile city .
8385	Filter a start prefix mapping event .
8386	Filter a namespace mapping event .
8387	Adds a new callback .
8388	Parse the jar file .
8389	Returns the text color for a specific item .
8390	Sets the currently selected values .
8391	Calculate the color based on the scrollX and position .
8392	Sets the text size .
8393	Returns the x - coordinate of the item x .
8394	Gets the intro .
8395	Returns the keywords .
8396	Gets the command arguments for a given keyword .
8397	Returns the documentation for a given keyword .
8398	Starts the remote server .
8399	Stop the remote server .
8400	Starts the remote server .
8401	Convert properties from file to json
8402	Convert properties from a file to a JSON string
8403	Converts an input stream to a JSON string .
8404	Converts properties to JSON string .
8405	Convert properties to JSON string .
8406	Convert a map of properties into a JSON object .
8407	Convert properties to string .
8408	Converts properties to JSON string .
8409	Returns the radius of a shadow .
8410	Returns a new builder configured with the specified properties .
8411	Find intermediate certificate .
8412	Executes the mojo .
8413	Preprocesses the input directory .
8414	Substitute variables in template string .
8415	Gets the title for the page .
8416	Adds the title to the HTML file .
8417	Replace variables inside the content .
8418	Updates the relative paths in the HTML includes .
8419	Copies all files from one directory to another .
8420	Checks the given path .
8421	Wrap the content of a slider .
8422	Fades the view up .
8423	Starts a fade down animation .
8424	Calculates the percentage of the image based on the width of the screen .
8425	Updates the views with the specified width .
8426	Launch an intent to launch the activity .
8427	Launch the activity .
8428	Get a list of TODos .
8429	Get FactSheets list .
8430	Download file from response .
8431	Builds the HTTP client .
8432	Create an AccessControlEntity
8433	Update a data model
8434	Create a full export
8435	Get list of exports
8436	Sets the host to connect to the given host .
8437	Sets the client credentials .
8438	Process a graphQL request
8439	Get list of bookmarks
8440	Adds the given graph permissions to the given graph .
8441	Write permissions for a given graph name .
8442	Sets rulesets .
8443	Closes the connection .
8444	Execute a SELECT statement
8445	Create a new dataset graph
8446	Limit the number of threads per process .
8447	Resize the image .
8448	Rotate the command .
8449	Set gravity .
8450	Remove all profiles from the server .
8451	Set the text font
8452	Adds an image to the given file
8453	Add an image to the job .
8454	Parses arguments and returns a list of arguments .
8455	Prints usage information for a given object .
8456	Extract a TimeUnit from a string .
8457	Parses the supplied arguments using the supplied properties .
8458	Executes the slide .
8459	Executes a slide .
8460	Reads actions from a pPT file .
8461	Sort the list by size .
8462	Renders the given text .
8463	Get the xml file for a slide .
8464	Returns true if the mouse is inside the screen .
8465	Filter the elements that overlap the specified element .
8466	Execute the outbound operation .
8467	Executes the message synchronously .
8468	Retrieves a file from a JAR file .
8469	Retrieves a temporary directory .
8470	Creates a log value map .
8471	Log a message at trace level .
8472	Log a single event and stack trace .
8473	Log a message at debug level .
8474	Log a message at debug level .
8475	Log a message at the INFO level .
8476	Log a log event with an info message .
8477	Log a specific info event .
8478	Log a message at the WARN level .
8479	Log a log message with a warning level .
8480	Log a message at ERROR level .
8481	Log a log event with an error message .
8482	Add to context line .
8483	Writes the Steno wrapper .
8484	Writes a list of key - value pairs .
8485	Writes the given throwable to the given JSON generator .
8486	Converts the object to a log value .
8487	Gets the caller s caller data .
8488	Encodes a value using the given encoder .
8489	Create a database .
8490	Removes the mappings for the given position .
8491	Parse save attribute string .
8492	Save data to object in context .
8493	refresh sheet row from context
8494	Parse save attribute string .
8495	Gets the save attribute list from a row .
8496	Gets the save attribute from column list .
8497	Sets save object in hidden column .
8498	Sets the save attributes for a sheet .
8499	Set save attributes for a row
8500	Prepares the data context for a cell .
8501	Format a number .
8502	Put shift attributes .
8503	Sets the Workbook .
8504	Get the wrapper for this window .
8505	Replies the formula evaluator .
8506	Calculate max col counts .
8507	Loads a web sheet from an input stream .
8508	Loads the web sheet .
8509	Load work sheet by tab name .
8510	Export the content .
8511	Process the model .
8512	Do submit .
8513	Populate the component .
8514	Returns the current sheet configuration .
8515	Recursively readObject from an input stream .
8516	Returns the locale for the given component .
8517	Get picture .
8518	Returns the cell helper .
8519	Returns the picture helper .
8520	Gets the validation handler .
8521	Gets the chart helper .
8522	Converts the shared formulas into a list of Ptgs .
8523	Converts a Ptg into a Ptg .
8524	Creates a Ptg for a watch list .
8525	Creates a single ptg .
8526	Get the list of rows corresponding to the current row
8527	Returns a list of serial rows from the current row mapping .
8528	Fixup a reference row .
8529	Builds the dynamic row for a given RtgBase .
8530	Builds a dynamic row for an area .
8531	Returns the bg color for the plot .
8532	Retrieves the color from a shape .
8533	Find the automatic fill color .
8534	Get the X color from the scheme clazz .
8535	Create an XColor from a CTR color
8536	Returns an XColor with automatic fill .
8537	Convert a CSS color to a Color
8538	Convert an XSSF color to a tripleplet
8539	Get the background color from a cell style
8540	Finds the component name from a component class .
8541	Populate the input attributes .
8542	Match parmeter of method .
8543	Set object property .
8544	Returns the value of the specified property on an object .
8545	Sets the control attributes .
8546	Find cell validate attributes .
8547	Sets the cells for a cell .
8548	Setup the cells in the cell .
8549	Sets the picture for a cell .
8550	Initialize the charts map .
8551	Get the title of chart
8552	Sets the style of a chart .
8553	Create a 3D chart
8554	Setup the bar style .
8555	Initialize the chart map .
8556	Gets the chart id from a chart .
8557	Initialize anchor map
8558	Generate a single chart .
8559	Evaluates the given expression and returns the collection object .
8560	Gets the full name from a row .
8561	ReBuilds the upper level formula .
8562	Sets up the formula for the given cell .
8563	Builds the cell formula for a given cell .
8564	Gather rows mapping by full name .
8565	Change index number in shift map .
8566	Changes the final length of an upper level .
8567	Change the index number in the hidden column
8568	Sets the full name in the hidden column .
8569	Gets original row number in hidden column .
8570	Sets original row number in hidden column .
8571	Finds the parent row mapping from a shift map .
8572	Finds the child rows mappings from a switch map .
8573	Find an item in a collection .
8574	Builds the current configuration range based on the given position .
8575	Checks if the given row index is a static row .
8576	Checks whether a row reference is a static row ref .
8577	Replace expression with cell value .
8578	Index all cells in the grid .
8579	Returns a list of cell cells in the merged region .
8580	Adds a list of cell to the list of cells in the cell .
8581	Builds a sheet comment from a list of cells .
8582	Build the comment for the given cell .
8583	Build configuration .
8584	Gets the sheet configuration .
8585	Build a form command from sheet configuration .
8586	Verify that the last cell is valid .
8587	Builds a sheet .
8588	Checks and removes the last row from the sheet .
8589	Builds a command list from a sheet .
8590	Sets the parent command for a child command .
8591	Checks if the command list contains one command .
8592	Match command range .
8593	Copy template for tie - commands
8594	Builds the command list .
8595	Processes a method line .
8596	Processes a command line .
8597	Move comment to map .
8598	Create a command .
8599	Build attribute map .
8600	Gets the sheet configuration .
8601	Sets the footer of the sheet configuration .
8602	Set body of sheet configuration .
8603	Set header of sheet configuration .
8604	Delete a row .
8605	Removes all ranges from the shift map .
8606	Find full name list .
8607	Gets each command from parts name .
8608	Insert an empty object in the data context .
8609	Delete the given collection .
8610	Prepare collection data in context .
8611	Index a command range .
8612	Check if a row is allowed .
8613	Insert template .
8614	Evaluate normal cells .
8615	Evaluates the cell formula .
8616	Checks whether the given string is a user formula .
8617	Creates a comment for a given cell .
8618	Evaluate a boolean script .
8619	Remove all rows in the sheet .
8620	Remove a single row from sheet .
8621	Removes all cells for a given row from the cache .
8622	Removes rows in the body list .
8623	Loads the picture for the specified cell .
8624	Load the chart .
8625	Assembles the new value .
8626	Get the value of a poi cell .
8627	Get the string value of the cell without the format .
8628	Returns the string value of the cell with the given cell type .
8629	Gets the string value with number type .
8630	Sets the value of a cell .
8631	Sets the cell value of a cell .
8632	Sets the boolean value of a cell .
8633	Sets a date value .
8634	Sets the number value of a cell .
8635	Copy rows from one sheet to another row .
8636	Copy a single row .
8637	Copy a cell from another sheet .
8638	Copy the value of a cell .
8639	Copy the style of a cell .
8640	Clones a comment .
8641	Create a comment anchor .
8642	Create or insert a comment in the given cell .
8643	Match cell settings based on source cell settings .
8644	Get the VMLDrawing from a cell
8645	Get a CTShape from a cell
8646	Gets the cell style from the source cell .
8647	Convert a cell .
8648	Gets the row and column index from the component attributes .
8649	Gets the init rows from sheet configuration .
8650	Get the FacesRow from the top row
8651	Gets the cell from the body row
8652	Gets the poi cell from sheet .
8653	Gets the key from a poi cell .
8654	Get or create a new tie cell in the map .
8655	Returns the current data context name .
8656	Evaluates an expression .
8657	Evaluates the expression .
8658	Custom serialization .
8659	Remove a row .
8660	Merges the given RowsMapping into this instance .
8661	Recover all serial rows .
8662	Retrieves the type of the chart
8663	Converts a style to a stroke .
8664	Initialize chart data from XSSFChart
8665	Sets up the chart data .
8666	Initialize the XSSF Anchors map
8667	Initialize the AnchorsMap for a sheet .
8668	Retrieves the chart id of a two cell .
8669	Gets the chart id from the child node attributes .
8670	Build the list of objects .
8671	Save the data in the cell .
8672	Recalculate the formula .
8673	Gets the cell with the given row and column index .
8674	Returns the cell with the specified row and column index .
8675	Restore data context .
8676	Gets the last collected data context .
8677	Checks whether the given full name is needed .
8678	Start restore data context .
8679	Shifts row ref .
8680	Sets the first row reference .
8681	Sets the last row .
8682	Builds the cells for a single row .
8683	Build a single cell .
8684	Read the data context from a serialWorkbook .
8685	Builds the categories .
8686	Build the series list
8687	Build a chart series in a chart .
8688	Convert a list of DPTT objects to a list of chart colors .
8689	Gets the element from a list with the specified index .
8690	Sets the command index map .
8691	Populates a map from a sheet .
8692	Populate a map from a sheet .
8693	Index a picture in the map .
8694	Generate picture style .
8695	Generate the style for a chart .
8696	Gets the anchor size .
8697	Gets the pattern .
8698	Gets the chart image .
8699	Recover this error .
8700	Gets the style for a cell .
8701	Returns the font style for a given cell .
8702	Returns the cell font color .
8703	Creates the font decoration .
8704	Get the style for a cell .
8705	Get the style for a cell .
8706	Gets the text alignment based on the cell style .
8707	Gets the vertical alignment from a cell style .
8708	Calculates the total height of a sheet .
8709	Sets the cell style .
8710	Gets the input type from cell type .
8711	Returns a set of paths for the given path .
8712	Returns a resource for the specified path .
8713	Removes the prefix path from a resource .
8714	Evaluate input type .
8715	Returns the bean with the given name .
8716	Join the array of short values using the provided separator .
8717	Rounds a double value to the specified number of places .
8718	Returns the type of the tab .
8719	Returns the style for the tab .
8720	Returns the default date pattern .
8721	Gets the decimal separator by default locale .
8722	Gets the thousand separator by default locale .
8723	Sets the tie command alias list .
8724	Builds a list of cells for a given sheet .
8725	Builds a watch list for a cell .
8726	Adds a new row to the watch list .
8727	Is the given string?
8728	Parse the comment attributes .
8729	Gets attribute key in map by cell .
8730	Parse validate attributes .
8731	Find the first pair bracket position .
8732	Parse a string of command attributes .
8733	Parse input control attributes .
8734	Parse control attributes .
8735	Splits an attribute name into two values .
8736	Parse special attributes .
8737	Process calendar attributes .
8738	Process select item attributes .
8739	Gather special attributes .
8740	Parse comment to map .
8741	Find the index of the first non - cell name in the input string starting at the given index .
8742	Remove chars from input string .
8743	translate a number to a column name
8744	Convert col to int number .
8745	Gets a cell by reference .
8746	Convert height units into pixels .
8747	Checks whether the given string is a valid date .
8748	Parse a date .
8749	Check if given string is numeric .
8750	Checks if the given character is continue .
8751	Set a property on an object .
8752	Compare two cells .
8753	Checks if the child range is inside the parent range .
8754	Deletes all hidden columns from a sheet .
8755	Delete hidden columns in row .
8756	Delete a cell from the row .
8757	Process event .
8758	Refresh the state of the cell .
8759	Validate the row and column in the current page .
8760	Validate by cell .
8761	Check the error message from the cell in the context .
8762	Validate all rules for a single cell .
8763	Validate the attribute value .
8764	Validates the target cell .
8765	Validate the current page .
8766	Validate the row in the current page .
8767	Validate a row .
8768	Refresh all cached cells in the current page .
8769	refreshes the cells in a row
8770	Sets the submit mode flag .
8771	Performs pre validation .
8772	Clear the contents of this table .
8773	Loads the header rows .
8774	Loads the header row from the configuration table .
8775	Fills a list of header cells with no more columns .
8776	Returns the style for the header column
8777	Returns the width style
8778	Load header row with configuration tab
8779	Calculate the column width .
8780	Clear the worksbook .
8781	Initialize the tabs .
8782	Loads the data context .
8783	Refresh the data .
8784	Refresh the data for a row .
8785	refresh data for cell
8786	Find tab index by name .
8787	Loads the work sheet .
8788	Prepare work sheet .
8789	Sets the page page page .
8790	Save the objects stored in the context map
8791	Sets the row information .
8792	Load body rows .
8793	Assemble the body row .
8794	Refresh the cached cell .
8795	Process a refresh cell .
8796	Create the dynamic columns .
8797	Add a row to repeat .
8798	Refresh the body rows in the body range .
8799	Sets the unsaved status .
8800	Returns the status of the currently saved state .
8801	Returns the most common constructor for the given type .
8802	Writes the given input stream to the output stream .
8803	Writes a long to the given writer .
8804	Writes a line to the given writer .
8805	Sets the traffic stats tag .
8806	Adds a bitmap .
8807	Add file descriptor .
8808	Remove the parameter with the given name .
8809	Add a header to the request .
8810	Clear all parameters .
8811	Calls a call to play .
8812	Calls stop .
8813	Binds to the stream .
8814	Unbinds this radio .
8815	Drops the playback listener .
8816	Stores the image to disk .
8817	Converts input stream to string .
8818	Converts a stream to a string .
8819	Sends the content to the given output stream .
8820	Returns the number of available bytes .
8821	Close the buffer .
8822	Reads a byte from the input stream .
8823	Resets the mark .
8824	Sends the start part .
8825	Send the content disposition header .
8826	Send the content type header .
8827	Send the transfer encoding header .
8828	Send the end of the header .
8829	Send end .
8830	Send multiple parts .
8831	Calculates the length of a list of parts .
8832	Determine if the URI is a redirect
8833	Sends a 304 response .
8834	Sets the date header .
8835	Sets date and cache headers .
8836	Sets the content type header .
8837	Closes the channel .
8838	Send the disposition header .
8839	Send data to the stream .
8840	Installs the cache .
8841	Ensure that the working directory exists .
8842	Get a cache response .
8843	Creates a new input stream for the response .
8844	Resets the bitmap .
8845	Get the websockify ssl context .
8846	Validate a keystore .
8847	Replaces the current scale type .
8848	Stop reporting .
8849	Gets a pending intent .
8850	Disconnects a connection .
8851	Bind to the service .
8852	Unbind this service .
8853	Notify views load listeners .
8854	Handle channel open .
8855	On accept data .
8856	Releases the UI thread .
8857	Waits for the loader to finish .
8858	helper method to set text or hide
8859	Hides soft input from textView .
8860	Show soft input .
8861	Toggles soft input from textView .
8862	Calculate pixels width .
8863	Called when an exception occurs .
8864	Clear cache for specified url .
8865	Adds an image to the view .
8866	Cancel image loading
8867	Create image consumer .
8868	Sets the image .
8869	Sets the loading image .
8870	Start a new image loader task .
8871	Cache image .
8872	Releases a buffer to the pool .
8873	Adds request properties to the URL connection .
8874	Adds a parameter to the request .
8875	Try to connect to the core server .
8876	Calculates the MD5 hash of the specified string .
8877	Returns the String identifying the given CUblasM
8878	Returns the String identifying the given CUblasStatus
8879	Checks whether the given result is the given result .
8880	Checks the result for the given result .
8881	Adds a lexeme .
8882	Adds an ending .
8883	Returns the estimated estimate for a given wordform .
8884	Write the description of this token .
8885	Verify and set a strong attribute .
8886	Convert an AttributeValues object to KAML markup .
8887	Verify that the given index contains the given attribute value .
8888	Remove kamols markup formatting .
8889	Returns a list of metrics for the application .
8890	Gets the query string .
8891	Process JSON data .
8892	Convert JSON string to list of AppInfo objects
8893	Get the connection configuration .
8894	This method performs the metrics .
8895	Create a new GC04 code list
8896	Create a new Generic CodeListReader
8897	Create a new GC04 column set .
8898	Create a GC10 code list .
8899	Create a Generic CodeListReader
8900	Create a new GC10 column set .
8901	Get the ID of a column element .
8902	Get the value of the passed row .
8903	Get the column with the passed ID .
8904	Get all Key IDs from the passed ColumnSet .
8905	Get the key with the passed ID .
8906	Check if the passed column set is a key column .
8907	Create a new column .
8908	Create a new key .
8909	Set the number of lines to skip .
8910	Add a column .
8911	Create a new GC04 code list .
8912	Create a new generic code list writer .
8913	Create a new GC column set .
8914	Create a new GC10 code list .
8915	Create a new gc10 code list .
8916	Create a new GC10 column set .
8917	Returns a new GenericodeValidator for the given generic code list .
8918	Returns a new GenericodeValidator for the given GC04 .
8919	Returns a new GenericodeValidator for the given column set .
8920	Returns a new GenericodeValidator for the given generic code list .
8921	Returns a new GenericodeValidator for the given generic code list .
8922	Returns a new GenericodeValidator for the given generic node .
8923	Send the logs to the server .
8924	Sets the context .
8925	Returns the current log level .
8926	Returns true if capturing is enabled .
8927	Sets the maximum size of the log file .
8928	Prepend the given metadata to the given message .
8929	Append additional stack metadata .
8930	Creates a JSON object from a JSON object .
8931	Logs the current location as a JSON object
8932	Sets the user identity .
8933	Get the contents of a file .
8934	Start the location updates .
8935	Size the specified region .
8936	Size of all entries in the given region .
8937	Dump all entries in a local region .
8938	Reads a snapshot record from the stream
8939	Dumps the statistics .
8940	Returns the time values starting at the given index .
8941	Convert a file to chart
8942	Gets the pool for a given server .
8943	get a pool for a given jmx
8944	Checks whether a region is already existing .
8945	Get member by name
8946	Return a collection of host names .
8947	Lookup a network host .
8948	Checks whether the given data is an exception .
8949	Execute function and check results .
8950	Flatten a collection of objects .
8951	Execute a query .
8952	Create a new cache listener for the entry .
8953	Create a new cache listener that delegates to the given consumer .
8954	Handle exception .
8955	Gets the onRegionFilterKeyFacts for this event .
8956	Execute the export function .
8957	Retrieves a list of host names from a JMX JMX server .
8958	Executes the region .
8959	Gets the application name from the given resources .
8960	Constructs the security configuration .
8961	Returns a region by name .
8962	Returns a region .
8963	Construct comparison .
8964	Checks whether the given index is inserted at the given index .
8965	Close the InputStream .
8966	Dump all vfs files from a directory .
8967	Main method for testing .
8968	Reconnect to JMX server .
8969	Stops members on a host .
8970	Shutdown a member
8971	shut down all members
8972	Shutdown all members of the group
8973	Converts a list of page results into a list of pages .
8974	Reads results by page criteria .
8975	Imports a region .
8976	Checks whether the remote locators and locators are matched .
8977	Execute function .
8978	Builds a hash map .
8979	Returns the value of the given column .
8980	Determine whether a given type is a type of integer objects .
8981	Serialize an object to a byte array .
8982	Deserialize an object .
8983	Creates an instance of the specified class .
8984	Check for table id column .
8985	Check for columns .
8986	Checks whether the given element is a super type .
8987	Returns the schema for the table .
8988	Build Java code .
8989	Generate the getId method .
8990	Converts the result to an Observable
8991	Checks if the given column name is equal to the given column name .
8992	Returns the given string or the given default string if it is blank .
8993	Capitalizes a string .
8994	Determine if a TypeMirror is a type of object .
8995	Create a builder for descending order
8996	Read the temperature .
8997	Returns the result of the given type .
8998	Prints a note message .
8999	Prints an error message .
9000	Gets the available icons .
9001	Gets the icons .
9002	Create the dialog layout .
9003	Build the background decoration .
9004	Raises a power of a given number .
9005	Sets this matrix .
9006	Calculate the integer power of a given power .
9007	Returns the root root of a given integer .
9008	Calculate the exponent of a power of a given scale .
9009	Returns the ln of the given number .
9010	Compute the new nton .
9011	Calculate the arcan of a number
9012	Calculate the arithmetic of a complex number .
9013	Calculate the square of a square .
9014	Prints the pi .
9015	Converts the given time to a timestamp .
9016	Set the limits .
9017	Puts a new value .
9018	Print the matrix .
9019	Adds two complex numbers .
9020	Subtract two complex numbers
9021	Multiply this complex number by another complex number .
9022	Divide this complex number by another complex number .
9023	Sets the matrix for this matrix .
9024	Get a row of this matrix .
9025	Get a column from this matrix .
9026	Sets this matrix .
9027	Returns the transpose of this matrix .
9028	Add another matrix to this matrix .
9029	Subtract this matrix from another matrix .
9030	Multiply this matrix by a value .
9031	Multiply this matrix by another matrix .
9032	Print the matrix .
9033	Sets the image resource .
9034	Validate the coefficients .
9035	Compute the next position .
9036	Clear all variables .
9037	Convert a sld definition to an XML string .
9038	Returns the styled layer descriptor info .
9039	Validate the specified refinement descriptor .
9040	Validate the given Sld .
9041	Compute the random area of the given rectangle .
9042	Set the values from a matrix .
9043	Sets this matrix .
9044	Returns the inverse of this matrix .
9045	Compute the determinant .
9046	Normalize this matrix .
9047	Solves linear substitution .
9048	Prints the decomposed matrix .
9049	Performs forward elimination .
9050	Performs a forward substitution .
9051	Substitution function .
9052	Optimized solution .
9053	Converts a square matrix into a square matrix .
9054	Returns the next Vonne neuron .
9055	Do the iteration procedure .
9056	Compute the next false position .
9057	Check position .
9058	Compute the next position .
9059	Checks the validity of the interval .
9060	Add the given addend to this matrix .
9061	Multiply two integers .
9062	Raise a power of a given integer .
9063	Sets the iteration procedure .
9064	Returns the SldManager .
9065	cast a long value to a char array
9066	Decompose the given bits .
9067	Prints out the representation of this object .
9068	Validates the bias exponent value .
9069	Validates the floating point exponent value .
9070	Validates a double -ased exponent value .
9071	Validates the floating point exponent value .
9072	Create the SLDGwt service .
9073	Returns the next random value .
9074	Compute the next random value .
9075	Compute the next random value .
9076	Returns a set of prime sieve combinations .
9077	Returns the factors of a given number .
9078	Do the iteration procedure .
9079	Compute the next position .
9080	Checks the position .
9081	Sets the JavaFX application .
9082	Sets the configuration .
9083	Sets the default configuration .
9084	Initialize the FXML loader .
9085	Sets the location of the given latitude and longitude .
9086	Extracts the host and port from a service instance .
9087	Retrieves an attribute definition by its UUID .
9088	Evaluates the given attribute filter against the given attributes .
9089	Sanitize a tag .
9090	Sets the address to address .
9091	Configure a collection of GeoComponents .
9092	Returns a collection of all the names of the services that have been registered .
9093	Queries a list of service instances by name .
9094	Gets all collaborators for the user .
9095	Gets the meta data .
9096	Change password for logged in user .
9097	Gets all users .
9098	Gets gravatar by email address
9099	Gets gravatar for user
9100	Populate data from Elasticsearch json .
9101	Returns the Elasticsearch field type .
9102	Create a flow step
9103	Update a flow step
9104	Get a flow step .
9105	Get a FlowStep by step parameter
9106	Get all steps in a flow
9107	Delete a flow step
9108	Delete a flow step
9109	Populate form fields .
9110	Close the connection .
9111	Handles incoming messages .
9112	Called when the connection is closed .
9113	Gets the echo messages from the return value .
9114	Gets all personal inventory items .
9115	Create a table record .
9116	Delete a form container .
9117	Get the form flow history
9118	Get the form and field history
9119	Get the most recent form and field history
9120	Locks the form .
9121	Unlock the form container .
9122	Unlock a form container .
9123	Maps a ResultSet to a Form .
9124	Convert string to list of roles
9125	Create a form definition
9126	Update a form definition .
9127	Get a form definition by id .
9128	Get a form definition by name .
9129	Gets all form types for logged in user .
9130	Delete a form definition .
9131	Gets the storage key from parameters .
9132	Returns the memcached client .
9133	Shutdown memcached client .
9134	Converts a string to a long .
9135	Convert a document to a PDF file .
9136	Gets the field values from the cache .
9137	Create a flow entry rule .
9138	Create flow exit rule .
9139	Create a flow view rule .
9140	Update a flow rule .
9141	Update flow exit rule .
9142	Update the flow rule .
9143	Move the flow step rule entry up .
9144	Move the flow entry rule down .
9145	Delete a flow step rule .
9146	Delete flow exit rule .
9147	Delete flow step rule
9148	Initialize session data .
9149	Gets all user queries .
9150	Gets all roles .
9151	Get service ticket as hex .
9152	Create a text masked field .
9153	Create a field barcode .
9154	Create a decimal spinner .
9155	Create a decimal slider .
9156	Create a field .
9157	Update a field masked value .
9158	Update a field barcode .
9159	Update a decimal spinner field .
9160	Update a decimal slider .
9161	Update a field .
9162	Gets a field by name .
9163	Gets a list of fields by form name and logged in user .
9164	Gets all fields for a form type and logged in user .
9165	Delete a field .
9166	Delete a field .
9167	Returns the meta data for a table field .
9168	Update a field value .
9169	Gets or creates an index .
9170	Create a flow
9171	Update a flow
9172	Get a flow by id .
9173	Get a flow by name .
9174	Delete a flow
9175	Delete a flow
9176	Update global field value .
9177	Gets all global field values .
9178	Returns a map of form definition id and title to title .
9179	Decrypt init packet .
9180	Close the ABase client web socket .
9181	Initialize a new request .
9182	Gets the exception message verbose .
9183	Create an admin user .
9184	Request an access token .
9185	Gets user profile information .
9186	Execute POST request .
9187	Execute POST request .
9188	Creates the response handler .
9189	Checks if a connection is valid .
9190	Gets the HTTP client .
9191	Retrieves the path to the user s trust store .
9192	Closes the database connection .
9193	Get a list of views for a given view .
9194	Send form to a flow
9195	On close .
9196	Handles a message request .
9197	Send a JSON object .
9198	Sends a message to the server .
9199	Closes the session .
9200	Execute a native SQL query synchronously .
9201	Request a license
9202	Apply a license
9203	Create text plain text plain text .
9204	Create a paragraph text .
9205	Create a paragraph text .
9206	Create a multi - choice select value .
9207	Create a date time field .
9208	Update a field .
9209	Update a field paragraph text .
9210	Update field date time .
9211	Update field value .
9212	Update field value .
9213	Create a field value .
9214	Get configuration by key
9215	Get all configurations .
9216	Create an attachment
9217	Get an attachment by id .
9218	Delete an attachment
9219	Delete an attachment
9220	Parses a jar file .
9221	Sets the class loader .
9222	Verify that the given name is valid .
9223	Validate the declaration .
9224	Validate the rule .
9225	Extracts the schema node from the given file path .
9226	Validate that the form is valid .
9227	Verify that the schema contains a reference .
9228	Converts the given value to the specified type .
9229	Creates a cli interface .
9230	Creates a cli using the given options .
9231	Parse arguments .
9232	Parses the arguments using the given options .
9233	Returns a builder for the given path .
9234	Removes a footer view .
9235	Returns the value of the given point .
9236	Returns a 3D gradient based on a 3D curve .
9237	Calculate an integer value noise .
9238	Returns the value noise of an int value .
9239	Returns the cubic interpolation of a cubic function .
9240	Returns the S curve 5 .
9241	Sets the bounds .
9242	Process a CloudTrailEvent .
9243	Process a CloudTrailEvent .
9244	Extract account id from an event .
9245	Apply whitelist rules against the given rule entity .
9246	Get the serializer for the given stream .
9247	Create a file .
9248	Creates a directory .
9249	Restores the saved values .
9250	Creates the delegate implementation .
9251	Add an object to the collection .
9252	Sets a property .
9253	Gets an array property .
9254	Find the next state .
9255	Remove garbage collected soft references .
9256	Gets the type for the given type .
9257	Gets the parameterized type .
9258	Gets the declared type .
9259	Prints the stack trace of this exception .
9260	Prints the stack trace .
9261	Replace the given object .
9262	Run the task .
9263	Sets the task .
9264	Called when the task is accepted .
9265	Called when the task was rejected .
9266	Called when the task has started .
9267	Completes the task completion .
9268	Stop the task .
9269	Get the next job .
9270	Put a job .
9271	Convert a name to a blocking mode
9272	Resolve mode .
9273	Sets up the readers .
9274	Adds a reader to the catalog .
9275	Copy readers to the new catalog .
9276	Create a new catalog .
9277	Loads the system catalog files .
9278	Parse a catalog .
9279	Parses pending catalog files .
9280	Parse a catalog file .
9281	documentation inherited from interface
9282	Parses all catalog entries in the catalog .
9283	This method is used to resolve a DTD type .
9284	Resolves a document .
9285	Resolves a system ID .
9286	Resolves a local URI .
9287	Resolve the coordinate catalog .
9288	Make the given system identifier .
9289	Normalize an URI .
9290	Returns a string representation of the given byte .
9291	Add a delegate to the delegate list .
9292	Create a SoftValueRef .
9293	Fired on throwable .
9294	Reports an exception thrown by the specified type .
9295	Create delegate implementation .
9296	Compare to another TimerTask
9297	Returns the value of this field .
9298	Gets the object at the given index .
9299	Set the object at the given index .
9300	Retains the garbage list .
9301	Adds an entry type .
9302	Returns the type of the specified entry .
9303	Returns the number of arguments for a given entry type .
9304	Gets the entry argument .
9305	Set the thread context class loader for a thread .
9306	Swap two times
9307	Remove a node from the queue .
9308	Cleans the timeout object .
9309	Loads a class .
9310	Preload known protocols .
9311	Creates an URL stream handler .
9312	Check the system properties .
9313	Returns the value type .
9314	Creates the delegate implementation .
9315	Creates a synchronized wrapper around the given Counter .
9316	Creates a new LongCounter .
9317	Determine whether the current namespace is in the extension namespace .
9318	Checks a chunk of data .
9319	Binding the given name to the given target object .
9320	Get an object instance .
9321	Substract substring from string buffer .
9322	Splits the given string using the given delimiter .
9323	Join a byte array .
9324	Default implementation of default implementation .
9325	Returns the property value as a blocking mode .
9326	Creates the timer .
9327	Returns the value associated with the given key .
9328	Returns the value associated with the given key .
9329	Removes a timer .
9330	Flush all expired entries .
9331	Returns a list of all keys in this timer .
9332	Sets the current resolution .
9333	Returns the entry for the given key .
9334	Gets children by tag name .
9335	Gets the first child with the given tag name .
9336	Get the child element with the given tag name .
9337	Get the content of an element .
9338	Retrieves the unique content of the given element .
9339	Get the content of a child element with the given tag name .
9340	Sets the maximum queue size .
9341	Sets the blocking mode .
9342	Set the blocking mode value
9343	Execute the task
9344	Performs a system resolution .
9345	Performs the reverse resolution of the given public ID .
9346	Resolve the given system identifier .
9347	Resolves an external public ID .
9348	Query the catalog .
9349	Append a vector to a vector .
9350	Resolve all systems in reverse order .
9351	Resolve a system id .
9352	Resolve all known coordinates for a given system ID .
9353	Find all local systems for the given system ID .
9354	Resolve all subordinate catalogs .
9355	Read a catalog from a file .
9356	Reads a SAX catalog from an input stream .
9357	Connect to this server .
9358	Returns an OutputStream for writing to the file .
9359	compare next entry .
9360	Handle delete .
9361	Returns the value associated with this header .
9362	Creates a new snapshot entry .
9363	compare right .
9364	Creates a logger .
9365	Appends a list of objects .
9366	Returns the short name of the class .
9367	Returns a string representation of this class .
9368	Returns a list of property names .
9369	Returns the property group for the given basename .
9370	Get a compatible constructor .
9371	Copy the given object .
9372	Dereference object .
9373	Initialize the context
9374	Update the JNDI cache .
9375	Returns a Set of keys contained in this object .
9376	Returns an unmodifiable Set of defaults .
9377	Removes a specific property listener .
9378	Fire the event .
9379	Fire the removal event .
9380	Fire a property change event .
9381	Fire a bound property event .
9382	Creates a property name .
9383	Loads properties from the specified reader .
9384	Loads properties .
9385	Gets the property group by index and index .
9386	Returns true if the entity is resolved .
9387	Resolve a system ID from a resource .
9388	Resolves a system ID as a URL .
9389	Resolves a classpath resource .
9390	Sets the value of this property .
9391	Normalize publicId .
9392	Normalize a public ID .
9393	Decodes an ID .
9394	Replaces all occurrences of oldStr with newStr
9395	Starts the timer .
9396	Stop the lap .
9397	Wraps a StopWatch .
9398	Compares two hashCode objects .
9399	Generates a hashcode from a byte array .
9400	Generates a hash code for an array of objects .
9401	Creates a new empty list .
9402	Sets the value of the field .
9403	Returns the next token .
9404	Initialize formats .
9405	Adds a vertex to the graph .
9406	Sets the root vertex .
9407	Removes a vertex from the graph .
9408	Performs a depth - first search .
9409	Performs a depth - first traversal .
9410	Finds the vertex with the given data .
9411	Finds all cycles in the graph .
9412	Normalize special characters .
9413	Parse the given XML string .
9414	Parse the XML from an input stream .
9415	Parse the XML document from the given input source .
9416	Create an Element .
9417	Resolve a qualified name .
9418	Copy attributes from srcElement to destElement
9419	Returns true if the given node has any child nodes .
9420	Returns an iterator of child elements .
9421	Gets the text content of a node .
9422	Returns an iterator of child elements with the given name .
9423	Returns the parent element of the given node .
9424	Adds a resource to the pool .
9425	Read a catalog from an input stream .
9426	Read a catalog .
9427	Get the IP address of the local host .
9428	Resolves an InputSource .
9429	Sets a system property .
9430	Displays information about a class .
9431	Description of a class .
9432	Strip the package name from a classname .
9433	Gets the package name .
9434	Force the given type to be loaded .
9435	Gets the primitive wrapper class .
9436	Gets all interfaces of a class .
9437	Get all interfaces of a class .
9438	Checks if the given class is a primitive wrapper .
9439	Creates an instance of the specified class using the provided property name .
9440	Get a getter for an attribute .
9441	Get setter method .
9442	Converts a parameter name into a Java class .
9443	Get a system property .
9444	Returns a list of filenames for a given property name .
9445	Removes weak objects from the set .
9446	Returns an iterator over the set .
9447	Create a new instance of lister for the given protocol protocol .
9448	Returns a set of all entries in this map .
9449	Adds a bound property listener .
9450	Removes a bound property listener .
9451	Checks whether a string is null or not .
9452	Find property editor for given type name .
9453	Register editor for given type name and type name .
9454	Convert a string value into an object .
9455	Get the context class loader for the specified Thread .
9456	Returns an ApplicationDeadlockException if it is an ApplicationDeadlockException .
9457	Schedules a timeout .
9458	Do the work .
9459	Create a subcontext with given name .
9460	Lookup a named object .
9461	Checks whether the given object is an instance of the given class .
9462	Append information about a class .
9463	Get a transition by name .
9464	Read properties .
9465	Read verbosity .
9466	Determine if relative catalogs are relative to the project .
9467	Queries the catalog file .
9468	Query the catalog files .
9469	Determine whether or not the system property should be served .
9470	Determine if the useStaticCatalog is used by the JVM .
9471	Resolves an input source .
9472	Resolve a relative URL .
9473	Make an absolute URI .
9474	Resolves a class .
9475	Invokes the setter method .
9476	Gets the local name of the element .
9477	Get the namespace URI for the given node .
9478	Returns the namespace URI of the given element .
9479	Convert an enumeration into a list .
9480	Returns an input stream for the given filename .
9481	Loads properties from a file .
9482	Loads properties from the classpath .
9483	Adds an edge to the graph .
9484	Adds an outgoing edge to the graph .
9485	Adds an incoming edge to the graph .
9486	Returns true if the given edge exists .
9487	Removes an edge from the graph .
9488	Finds the edge that corresponds to the given destination vertex .
9489	Finds the first outgoing edge of this graph .
9490	Returns the cost of this vertex to the given destination .
9491	Recursively adds a directory to the jar .
9492	Returns true if there are more elements .
9493	Fire an event .
9494	Install the JVM type provider .
9495	Cleans a folder and its contents .
9496	Dispatches an action on the FX thread .
9497	Gets the action stream of the given type .
9498	Create fxml file path .
9499	Convert a collection of Records to a Stream
9500	Convert a collection of rights to one .
9501	Converts a collection of rights to a stream .
9502	Convert a collection of rights to a stream .
9503	Returns a boolean indicating whether robots should be robots .
9504	Checks the instruction generated
9505	Main method for testing
9506	Main method .
9507	Gets the sum degree .
9508	Initialize superclass arguments .
9509	Infer this resource loader .
9510	Checks if the datasource is available .
9511	Returns an iterable of the specified type .
9512	Creates an array of elements .
9513	Creates a list of the given type .
9514	Creates a collection of objects .
9515	Creates a list of objects .
9516	Sets the left value of the right type .
9517	Create an instance of right type .
9518	Fails if the given type is invalid .
9519	Creates a validation object .
9520	Creates a new Try with the given type .
9521	Connect jdbc on given data source with driver and driver .
9522	Run in the given SQL .
9523	Query in the database .
9524	Retrieves the value as a boolean array .
9525	Applies a query to the query .
9526	On upgrade .
9527	Dump this table .
9528	Restore this table .
9529	Sets the empty text .
9530	Dumps the table to a CSV file .
9531	Unescapes quotes .
9532	Returns a list of values from a CSV row .
9533	Convert a comma - separated string into a Map
9534	Convert a map to a CSV string .
9535	Join a list of strings .
9536	Join a list of strings .
9537	Reads a database model from the index file .
9538	write to index
9539	Inspect the entity s id field .
9540	Gets the base DAO model .
9541	Get bind type .
9542	Import data from a CSV file .
9543	Backup all tables to CSV .
9544	Restores all tables from CSV .
9545	Creates the index file .
9546	Creates a query .
9547	Creates a typed query .
9548	Renders the query .
9549	Delete the record .
9550	Inserts the given object into the database .
9551	Updates the object in the table .
9552	Add items that are not in the specified array .
9553	Add a subquery that matches the given predicate .
9554	Gets the next active stack .
9555	Creates an empty stack .
9556	Adds a plan to the cache .
9557	Select a plan .
9558	Returns the plan at the given index .
9559	Sets the plan variables for an agent .
9560	Gets the result at the given index .
9561	Gets the parents of this node .
9562	Returns the list of children .
9563	Grows a byte array by a given increment .
9564	Create a logger
9565	Loops through the body loop .
9566	Set the goals field
9567	Pause for user input .
9568	Initialize the pool selection pools .
9569	Initialize the thread selection threads .
9570	Start the intention selection threads .
9571	Shutdown the intention selection threads .
9572	Register an extension .
9573	Reset the catalog .
9574	Load an agent .
9575	Processes the plans for a given goal .
9576	Creates a new agent in the catalog .
9577	Load a class .
9578	Loads the specified extension .
9579	Compare two objects
9580	Display usage information .
9581	Parses the command line arguments .
9582	Parses the given option with the given option .
9583	Evaluate a query .
9584	Returns the object at the given index .
9585	Finds an object by name .
9586	Pushes an object onto the stack .
9587	Returns the object at the given index .
9588	Adds an object to the queue .
9589	Remove an object from the queue .
9590	Gets the type of an object .
9591	Returns true if the given query matches the given belief .
9592	Main entry point .
9593	Convert a String to a byte array
9594	Posts a goal to the worker .
9595	Sends a message to the agent .
9596	Sends a Goal to the agent .
9597	Gets the goals .
9598	Creates a new belief set .
9599	Adds a new belief to this beliefbase .
9600	Evaluate a query .
9601	Suspend the agent .
9602	Gets a field by name .
9603	Registers a number of neighbours with the given number of randomness .
9604	Builds a random name .
9605	Manage agents .
9606	Checks if the stack is valid .
9607	Removes all agents from the list .
9608	Manage a goal .
9609	Releases the pool .
9610	Sets whether the given agent is idle .
9611	Moves a disc on a pin
9612	Initialize the program .
9613	Wait until all the pools are idle .
9614	Terminates all agents .
9615	Returns true if all pools are idle .
9616	Returns the pool id for the given agent id .
9617	Picks the currently selected expression .
9618	Sets the expression .
9619	Creates a join expression for the given attribute .
9620	Join recursively .
9621	Find the join for the given property .
9622	Checks if the end is reached .
9623	Gets the upload stream .
9624	Handle a request .
9625	Checks if the parameter has the given parameter name and value .
9626	Get parameter value .
9627	Parse parameters .
9628	Configure transaction manager .
9629	Get target file .
9630	Writes the given artifact .
9631	Post process instance fields .
9632	Gets the declared constructor .
9633	Builds a string representation of the configuration .
9634	Search for a method .
9635	Returns the type of the given field .
9636	Get dependency value .
9637	Saves the content of the file .
9638	Sets default links .
9639	Sets the default link template .
9640	Processes the links from the response .
9641	Handles header links .
9642	Handles a POST request .
9643	Parse a link object .
9644	Returns the value or creates a new one if it doesn t exist .
9645	Handles all allowed methods .
9646	Checks if the given method is allowed .
9647	Register all instance processors .
9648	Register instance factory .
9649	Register instance processor .
9650	Register class processor .
9651	Create an instance of the specified interface .
9652	Adds an argument to the list of arguments .
9653	Creates a list of target files .
9654	Returns the XML representation of this object .
9655	Initialize this generator .
9656	Determines whether a file has a reference to the specified file .
9657	Create a template model from a reader .
9658	Create a parameterized template model from a file .
9659	Sets the request path .
9660	Gets an observable from the queue starting at the given offset .
9661	Create a new instance of the given string type .
9662	Set the value of a field .
9663	Add capture appender to logger
9664	Removes the specified appender from the logger .
9665	Clear all the values of the given appender .
9666	Read arguments from the request .
9667	Parse the model .
9668	Resolve proxies .
9669	Get a list of files from a directory .
9670	Parse all files in the given directory .
9671	Replies if the resource set is fully resolved .
9672	Find all EObjects in a ResourceSet .
9673	Sets the model directories .
9674	Sets the file extensions .
9675	Sets the model resources .
9676	Reads the next line .
9677	Sets the designated parameter to the given array of strings .
9678	Sets the designated parameter to the given Boolean value .
9679	Execute a LIMIT UPDATE statement .
9680	Convert a string to an object type
9681	Merges the given Velocity template .
9682	Gets the model directory .
9683	Gets the directory of the template .
9684	Writes a document to the response .
9685	Launch the UI .
9686	Configure the window .
9687	Print the view .
9688	Writes the contents of the input stream to the output stream .
9689	Invokes a method on the proxy
9690	Attaches the servlet request .
9691	Detaches this request .
9692	Returns the cookies associated with this request .
9693	Dumps information about the HTTP request .
9694	Gets the invocation meters .
9695	Configures the event stream .
9696	Sets the remote host .
9697	Get parameter from stream .
9698	Remove prefix from path .
9699	Get the common directory between two directories .
9700	Convert absolute path to relative path .
9701	Convert relative path to absolute path .
9702	Determine the depth of a file .
9703	Dumps an error to the client .
9704	Send json object .
9705	Adds a parameterized template .
9706	Add a list of parameter templates .
9707	Initialize the parameterized template .
9708	Finds all references to a template file .
9709	Sets the save button .
9710	Handle delete .
9711	Deletes the file .
9712	Create new instance .
9713	Returns the files in sorted order .
9714	Get the summary of all files .
9715	Get a summary row for the given directory .
9716	Gets sub - summary row .
9717	Create a new instance of a managed class .
9718	Gets the setup class .
9719	Replies the model directories .
9720	Replies the model resources .
9721	Sets the candidate data source .
9722	Load xml .
9723	Display an error notification .
9724	Determine if the formal parameter is an object type .
9725	Reads a response from the given HTTP request .
9726	Read JSON from input stream .
9727	Extract parameter value from fit value .
9728	Gets the value of the hints property .
9729	Checks if the request is an XHR request
9730	Checks if the request is Android .
9731	Handle the entity type .
9732	Gets all property descriptors of a given type .
9733	Gets an annotation on the given property descriptor .
9734	Logs the given message with the server .
9735	Performs a Whois lookup .
9736	Checks whether the given node has a parser for the given host .
9737	Get managed class .
9738	Get a managed method .
9739	ProcessNotContainsException .
9740	Process NOTContains .
9741	ResultSet object as a boolean .
9742	Returns true if this ResultSet is a wrapper for the given class .
9743	Serialize this response to a HttpServletResponse .
9744	Get cookie value .
9745	Add cookie .
9746	Remove cookie by name .
9747	Returns an iterator over cookies .
9748	Gets the target file list producer .
9749	Adds a public field .
9750	Compiles the compiler .
9751	Verify that a response has been downloaded .
9752	Gets the file name .
9753	Ensures that a URI ends with a trailing slash .
9754	Performs login .
9755	Gets the HTTP servlet request .
9756	Invoke managed method .
9757	Execute a managed method .
9758	Execute an immutable transaction .
9759	Returns the files in this directory .
9760	Gets the last file .
9761	Gets the concrete configuration .
9762	Returns true if the request path starts with the given path component .
9763	Returns a list of factories for the given model type .
9764	Gets session .
9765	Serialize the file to the output stream .
9766	Reads metadata for the resource .
9767	Handle request .
9768	Clean up resources .
9769	PreDestroy stale event streams .
9770	Handles allowed methods .
9771	Handles the upload .
9772	Deletes the endpoint .
9773	Extract column parameters .
9774	Returns the names of the command line arguments .
9775	Schedule a periodic task .
9776	Sets a timeout .
9777	Parses the given configuration .
9778	Returns the next file .
9779	Read the application properties .
9780	Prints the welcome banner .
9781	Prints the stopped banner .
9782	Create a Chameleon object
9783	Register a shutdown hook .
9784	Triggers the action .
9785	Trigger a trigger .
9786	Insert and replace the given row .
9787	Gets the counts .
9788	setter for score - sets
9789	getter for variants - gets
9790	setter for variants - sets
9791	getter for questionType - gets
9792	setter for questionType - sets
9793	getter for token - gets
9794	getter for depLabel - gets
9795	setter for depLabel - sets
9796	getter for semanticType - gets
9797	setter for semanticType - sets
9798	getter for sections - gets
9799	setter for sections - sets
9800	indexed getter for sections - gets an indexed value -
9801	indexed setter for sections - sets an indexed value -
9802	getter for uris - gets
9803	setter for uris - sets
9804	getter for types - gets
9805	setter for types - sets
9806	getter for targetType - gets
9807	setter for targetType - sets
9808	getter for rank - gets
9809	setter for rank - sets
9810	getter for queryString - gets
9811	setter for queryString - sets
9812	getter for candidateAnswers - gets
9813	setter for candidateAnswers - sets
9814	indexed getter for candidateAnswers - gets an indexed value -
9815	indexed setter for candidateAnswers - sets an indexed value -
9816	getter for query - gets
9817	setter for query - sets
9818	getter for hitList - gets
9819	setter for hitList - sets
9820	indexed getter for hitList - gets an indexed value -
9821	indexed setter for hitList - sets an indexed value -
9822	getter for abstractQuery - gets
9823	setter for abstractQuery - sets
9824	getter for searchId - gets
9825	setter for searchId - sets
9826	setter for docId - sets
9827	getter for offsetInBeginSection - gets
9828	setter for offsetInBeginSection - sets
9829	getter for offsetInEndSection - gets
9830	setter for offsetInEndSection - sets
9831	getter for beginSection - gets
9832	setter for beginSection - sets
9833	getter for endSection - gets
9834	setter for endSection - sets
9835	getter for aspects - gets
9836	setter for aspects - sets
9837	getter for triple - gets
9838	setter for triple - sets
9839	getter for sourceRelation - gets
9840	setter for sourceRelation - sets
9841	getter for subject - gets
9842	setter for subject - sets
9843	getter for predicate - gets
9844	setter for predicate - sets
9845	getter for isObjUri - gets
9846	setter for isObjUri - sets
9847	getter for operator - gets
9848	setter for operator - sets
9849	getter for operatorArgs - gets
9850	setter for operatorArgs - sets
9851	getter for concept - gets
9852	getter for score - gets
9853	getter for text - gets
9854	setter for text - sets
9855	getter for id - gets
9856	setter for id - sets
9857	getter for name - gets
9858	getter for abbreviation - gets
9859	setter for abbreviation - sets
9860	setter for concept - sets
9861	getter for variants - gets
9862	setter for variants - sets
9863	getter for namedEntityTypes - gets
9864	setter for namedEntityTypes - sets
9865	getter for conceptType - gets
9866	setter for conceptType - sets
9867	getter for occurrences - gets
9868	setter for occurrences - sets
9869	getter for concepts - gets
9870	setter for concepts - sets
9871	getter for originalText - gets
9872	setter for originalText - sets
9873	getter for args - gets
9874	setter for args - sets
9875	getter for label - gets
9876	setter for label - sets
9877	Returns the index of the next clear bit .
9878	Sets the bit at the given index .
9879	Frees a buffer .
9880	Returns a new cache value for the specified file .
9881	Rehashes the given array .
9882	helper method for HELM2
9883	Check whether brackets are parenthesis .
9884	Add the details for the given string
9885	Returns a human - readable representation of this object .
9886	Adds an element to the MonomerNotation .
9887	Main method for testing
9888	method to validate the polymerID
9889	method to check if a polymerID is valid
9890	Validate connection details .
9891	Checks whether the given string is a valid group ID .
9892	Checks if a string is repeated .
9893	method to check if the polymer is a peptide or rna
9894	convert notation to json string
9895	get a simple polymer with the given id
9896	Get the current GroupingNotation
9897	Returns the HELM2 representation of this Variant .
9898	method to get HELM2 notation for HELM2
9899	Returns a HELM2 representation of the list of connections .
9900	Returns a String representation of the grouping .
9901	Converts the annotation to a format string .
9902	method to get the list of polymer ids
9903	get a PolymerNotation by its id
9904	method to set the PolymerElements
9905	Convert a HELM string to a Conversion
9906	Sets the annotation .
9907	Sets the count .
9908	method to determine the MonomerNotation
9909	Decide the MonomerNotationGroup in a group .
9910	decide the given string based on the given string
9911	Gets the value of this interval .
9912	This method parses the HELM input string and parses the HELM string
9913	method to set the nucleation unit
9914	Define ambiguity .
9915	Gets the statistics for this worker .
9916	Create an ADi graph from a collection of edges .
9917	Create an ADi graph .
9918	Initializes the internal paths map .
9919	Sort a list of nodes by reachability .
9920	Register a pattern for the given pattern .
9921	Get number of occurrences of a given pattern .
9922	Unsubscribe the specified pattern .
9923	Run a command .
9924	Send a reply .
9925	Polls from the server .
9926	Shutdown the process .
9927	Checks if the given exception is non - local handling .
9928	Atomically removes the runState from the given old state .
9929	Creates a worker .
9930	Try to add a worker to the pool .
9931	Registers a worker .
9932	De - registers a worker thread .
9933	Signals that a worker has completed .
9934	Runs a worker .
9935	Waits for a worker to be interrupted .
9936	Returns the number of queued tasks .
9937	Returns the common submitter queue .
9938	Perform a help complete .
9939	Submits a ForkJoinTask .
9940	Make a common pool .
9941	Waits for this task to complete .
9942	Build string .
9943	Gets the statistics for all queues .
9944	Creates an empty list .
9945	Reverses all elements in this list .
9946	Iterates over all elements of the given iterable .
9947	Folds the left value of the supplied Iterable using the supplied function .
9948	Folds the left value of the supplied list using the supplied function .
9949	Adds a task to the queue .
9950	Construct a new option from nullable .
9951	Create a long hash map from keys and values .
9952	Create an empty list .
9953	Creates an AListMap from the given elements .
9954	Create an AListMap from the given keys and values .
9955	Returns a set of keys contained in this map .
9956	Normalize resource name .
9957	Marshals the bound value .
9958	Returns a substring of this string .
9959	Returns a binary search .
9960	Create a binary search .
9961	Sends an email .
9962	Send an email .
9963	Bind a route binding .
9964	Bind a handler .
9965	Determine if a tag has a specific role .
9966	Converts Long to Integer .
9967	Remove duplicate Strings from array .
9968	Returns a string representation of the given string .
9969	Called when the task is in progress .
9970	Login a user .
9971	get login user from request
9972	Gets the login user .
9973	Checks if the given password matches the given salt .
9974	Save member in cookie cookie .
9975	Generate a login key .
9976	Extracts a user from a cookie .
9977	Dispatch the request to the handler .
9978	Append a file separator to the file system .
9979	Returns the value of a parameter as a long .
9980	Log a debug message .
9981	Gets the caller informations for a given level .
9982	Convert char array to byte array
9983	Convert CharSequence to byte array
9984	Convert byte array to char array
9985	Converts a char sequence into a byte array .
9986	Returns the locale data for the given locale code .
9987	Schedules execution of the job .
9988	Crop a file .
9989	Schedules an invocation .
9990	Runs the given method in thread .
9991	Gets the rest operations .
9992	Renders an error with an error .
9993	Render an AJAX forbidden page .
9994	Render the given view .
9995	Parse the path .
9996	Render data tables .
9997	Render empty data tables .
9998	Sets the list of items .
9999	HTTP redirect to the request .
10000	Gets the bindings for the given injector .
10001	Returns the current method name of the current method .
10002	Compact memory .
10003	Propagate a MetricsCollection to the local MetricsCollection .
10004	Encodes a string .
10005	Read charset from file .
10006	Copy bytes from input to output stream .
10007	Copy bytes from input to output stream .
10008	Copies the contents of an InputStream to a Writer using the default encoding .
10009	Copy the contents of the given Reader to the given Writer .
10010	Copies characters from an input stream to the output writer .
10011	Copies the content from the given reader to the given output stream .
10012	Copies the content from the given reader to the given output stream .
10013	Compare two input streams .
10014	Compare two readers .
10015	Applies an IO to the pipeline .
10016	Returns the SQL for the given group name .
10017	Convert a string to an object
10018	Unzips a zip file .
10019	Creates a PermissionDialogFragment object .
10020	Reset the dialog .
10021	Register a core value type
10022	Checks whether the given value matches the given regular expression .
10023	Checks if the given string is a mobile number .
10024	Checks whether the given value is a phone number .
10025	Determine if the given value is a birth day .
10026	Checks whether the given value is a URL .
10027	Checks if the given value is a DateTime .
10028	Executes the filter chain .
10029	Encodes the given string using Base64 encoding .
10030	Decodes a Base64 encoded string .
10031	Converts a hex string to a byte array .
10032	Reads properties from an input stream .
10033	Reads the content of the stream and closes it .
10034	Reads the content of a file .
10035	Writes a byte array to a file .
10036	Copies all files from source to target .
10037	Serialize an XML document .
10038	Create a Document from the given file .
10039	Parses the given XML string into a Document object .
10040	Create a Document from an input stream .
10041	Validates an XML signature .
10042	Sign a document .
10043	Returns true if the given class is cache - safe .
10044	Returns true if the given class is a primitive array .
10045	Returns whether the given class is a primitive wrapper array or not .
10046	Resolves a wrapper for a given class .
10047	Returns true if the given type is assignable from the right - hand side type .
10048	Returns true if the given value is assignable to the given type .
10049	Returns all interfaces implemented by the given instance .
10050	Returns all interfaces for the given instance .
10051	Write configuration to temp file .
10052	Extract variables from a URI .
10053	Add a permission message .
10054	Creates a Druid plugin .
10055	Binds the given class to the given extension point .
10056	Gets the builtin .
10057	Returns the primitive value for the given type .
10058	Converts the given object to the given type .
10059	Converts a user defined value to a given type .
10060	Gets a query parameter .
10061	Applies a cookie parameter to the request .
10062	Apply a parameter to the session .
10063	Initialize data source .
10064	Sets the shared variable .
10065	Sets a parameter .
10066	Sets the parameter to the given value .
10067	Show the permission dialog .
10068	Checks whether all values are granted .
10069	Checks whether any of the given values is denied .
10070	Find records by the given SqlNode .
10071	Finds the first record matching the given SqlNode .
10072	Checks if the given model is a new row .
10073	Determines whether a method declares an exception .
10074	Remove entries from the queue .
10075	Put the given value into the map .
10076	Returns true if the given string matches the given pattern .
10077	Read the given arguments .
10078	Gets the protobuf entity .
10079	Replies if the given class is a protobuf entity .
10080	Returns a map of all fields for the given class .
10081	Returns a protobuf getter method .
10082	Gets the setter method .
10083	Gets the object mapper .
10084	Returns the current JsonFactory instance .
10085	Convert an object to a JSON string .
10086	Sets the border borders .
10087	Gets a user record .
10088	Copy all attributes from the given object to the target object .
10089	Copies all attributes of the given object to the given object .
10090	Returns a property value .
10091	Set a property .
10092	Add this app to the frame .
10093	Saves a token .
10094	Gets the access token .
10095	Gets the default class loader .
10096	Returns a resource URL for the given name using the current thread s context class loader .
10097	Loads a resource as a stream .
10098	Gets the class as a stream .
10099	Initialize this object with the given URI .
10100	Initialize the scheme .
10101	Initialize the path from a URI spec .
10102	Sets the scheme .
10103	Sets the userinfo string .
10104	Sets the host .
10105	Sets the port .
10106	Append the path .
10107	Sets the query string .
10108	Sets the fragment .
10109	Get the URI string representation of the URI .
10110	Creates a PreparedStatement with the given parameters .
10111	Initialize this application .
10112	Get theuffin .
10113	Set the muffin parameter .
10114	Returns the clipboard contents
10115	Sets the clipboard contents .
10116	Opens a file stream .
10117	Loads services of the given type .
10118	Sets the parameters for the operation .
10119	Gets the service parameters .
10120	Find parametrized service by id .
10121	Finds a service by class .
10122	Parses a query response .
10123	Returns an iterator over the elements in this queue .
10124	Get encoding from xml string .
10125	Gets the parent logger .
10126	Creates a proxy for a connection .
10127	Get the authorization code from the given URL .
10128	Visit a package declaration .
10129	Visit a class declaration .
10130	Visit a ExecutableDeclaration .
10131	Returns the value of the given key .
10132	Returns a filter that matches the given modifiers .
10133	Returns a filter that matches the specified kind .
10134	Returns a filter that accepts two declarations .
10135	Returns a conjunction of the given DeclarationFilter .
10136	Gets the value as a Map .
10137	Makes a constructor accessible .
10138	Parses an object query .
10139	Replace slash with hyphen .
10140	Convert a byte array to a String
10141	Get parameter indexes .
10142	Parse SQL statement .
10143	Convert a collection of objects to a collection of Protobuf objects .
10144	Sets the field value .
10145	Sets a field value .
10146	Is this file?
10147	Creates a proxy instance for the given ResultSet .
10148	Convert a list of expected states to a map .
10149	Extracts the expected state .
10150	Returns the generic supertype of the given type .
10151	Perform a list of available objects .
10152	Perform a single poll of multiple objects .
10153	Gets the declared field .
10154	Returns all declared methods of the given class .
10155	Gets the declared method .
10156	Gets all methods annotated with given annotation .
10157	Gets all constructors matching the given annotation .
10158	Dumps a single byte .
10159	Returns the index of the first occurrence of the specified substring ignoring case .
10160	Removes all chars from a string .
10161	Cleans the internal state .
10162	Initialize the audit .
10163	Initialize the message queue .
10164	Initialize the password validator .
10165	Initialize the password authenticator .
10166	Returns the locale code for the given locale .
10167	Lookup a locale information by code .
10168	Returns a proxy instance for the given statement .
10169	Removes all elements from this queue .
10170	Adds an element to this queue .
10171	Removes the top element from the stack .
10172	Returns an input stream for scanning .
10173	Parses the arguments from an array of arguments .
10174	Matches tokens .
10175	Moves the cursor .
10176	Returns true if this rectangle contains another rectangle .
10177	Returns true if this rectangle contains the given point .
10178	Calculates the intersection between two rectangles .
10179	Calculates the union of two rectangles .
10180	Replaces x and x values with x2 .
10181	Replaces this rectangle with another rectangle .
10182	Gets the column of the given column .
10183	Gets the row of the given row .
10184	Gets the bounds of a cell relative to this cell .
10185	Calculate the columns .
10186	Calculates the rows .
10187	Unwraps the given exception .
10188	Main entry point .
10189	This method is called to render a code update .
10190	Copy and resize the buffer .
10191	Renders instructions .
10192	Initialize the application .
10193	Returns a shallow copy of this parameter .
10194	Adds a child to this node .
10195	Removes all children .
10196	Returns next solution .
10197	Adds instructions to the body .
10198	Adds instructions to the parent .
10199	Handle property change .
10200	Registers this WorkPanel .
10201	Update flag if present .
10202	Creates a new decimal type .
10203	Checks whether the given term is a variable or not .
10204	Optimize a list of WAM instructions .
10205	Compares two collections .
10206	Handles incoming requests .
10207	Render the buttons .
10208	Renders a button .
10209	Resets the model .
10210	Initialize the model .
10211	Returns the value associated with the given key .
10212	Returns the index of the specified object .
10213	Sets the value at the given index .
10214	Remove the value associated with the given key .
10215	Removes the element at the given index .
10216	Returns true if the specified property exists .
10217	Sets the specified property .
10218	Returns the value of the specified property .
10219	Checks if the given primitive type is assignable from the given primitive type .
10220	Initialize the properties for a given object .
10221	Determine the decision for a given state .
10222	Initialize decision trees .
10223	Unify all variables in the given query and statement .
10224	Unify two matrices .
10225	Unify a variable .
10226	Compile the given clause .
10227	Find the maximum number of arguments in a clause .
10228	Allocate a query registers .
10229	Gather position and occurrence information from a clause .
10230	Displays a compiled predicate .
10231	Displays a compiled query .
10232	Puts a 32 - bit integer into a ByteBuffer .
10233	Convert a ByteBuffer into a String
10234	Returns the string value of this attribute .
10235	Sets the string value .
10236	Reads a token .
10237	Checks if a class exists and is loaded .
10238	Checks if a class is a subtype of a given class .
10239	Determine if a class is a subtype of a class .
10240	Returns true if the given class is a subtype of the given parentClass .
10241	Returns the class with the given name .
10242	Creates a new instance of the given class .
10243	Creates a new instance of a constructor .
10244	Call a method on an object .
10245	Call a method on an object
10246	Calls a static method .
10247	Get the constructor for a class .
10248	Finds all setters for a given property .
10249	Converts a Queue into a Queue .
10250	Returns a new Queue that is transactional .
10251	Gets the type for an object .
10252	Resets the state .
10253	Returns the current state .
10254	Creates a new type .
10255	Adds a supported time zone .
10256	Adds an alternate dimension
10257	Adds a dimension table .
10258	Searches for all free variables that match the given query term .
10259	Searches for all free variables in the given query .
10260	Compare two nodes .
10261	Writes the given object to the given output file .
10262	Reads the contents of a BufferedInputStream into a String .
10263	Creates a new search node .
10264	Generate the indent for the given number of traces .
10265	Allocate registers for a function .
10266	Returns true if the last argument is the last argument .
10267	Find the largest classification for a given property .
10268	Checks whether all examples have the same attribute .
10269	Determine the best property to decide which the best decision is based on the given output property .
10270	Returns a new Functor .
10271	Returns a variable with the given name .
10272	Execute the action with error handling .
10273	Returns the sublist at the specified index .
10274	Sets the texture .
10275	Paints the image at the specified position .
10276	Creates a buffered image .
10277	Create a graphics2D based on a buffered image .
10278	Creates a buffered image .
10279	Create the SISurface .
10280	Sets the queue search algorithm .
10281	Performs a search .
10282	Performs a search .
10283	Starts the parser .
10284	Parses the term and returns a clause .
10285	Parses the next token .
10286	Parse a function .
10287	Parse a list function .
10288	Returns a list of arguments .
10289	Parse a variable .
10290	Parse an int literal .
10291	Parse a floating point literal .
10292	Parse a string literal .
10293	Returns the next directive or null if there is none .
10294	Interns a named operator name .
10295	Initialize builtIns .
10296	Consumes the next token .
10297	Peek and consume the next token .
10298	Bind to the thread session .
10299	Rolls back the transaction .
10300	Converts an iterator into a collection .
10301	Reserves a call point .
10302	Converts a time of day - of - day to tick .
10303	Convert tick to year .
10304	Returns a tick with the given hours .
10305	Returns the tick with the given minutes .
10306	Returns the tick with the given seconds .
10307	Returns the tick with the given year .
10308	Returns the tick with the given month set to the given month .
10309	Returns the tick with the given date .
10310	Returns the millis starting from the given year .
10311	Returns the month of the given year .
10312	Read a number of bytes from this stream .
10313	Applies the entry at the given key .
10314	Returns the entry for the given key .
10315	Buckoo .
10316	Rehashes the table .
10317	Handle the user pressed action .
10318	Sets the next available flag .
10319	Sets the prev available flag .
10320	Sets the completion flag .
10321	Returns a new instance of this class .
10322	Returns an iterator over the set of variables .
10323	Returns the expected I .
10324	Computes the probability for a distribution .
10325	Sets the tick values .
10326	Get the action forward .
10327	Creates an URL .
10328	Gets the information about this request .
10329	Returns the header information for the request .
10330	Returns all cookies in the request .
10331	Returns the request parameters .
10332	Returns the request scope information .
10333	Gets the page scope information .
10334	Returns a string containing all of the session scope attributes .
10335	Returns the application scope information .
10336	Returns information about the user principal .
10337	Render the start tag .
10338	Converts a property name into HTML table .
10339	Performs a linear search .
10340	Sets the current screen state .
10341	Runs the search .
10342	Compare two nodes .
10343	Updates the internal registers .
10344	Notify all registered listeners of a property change .
10345	Cleans a clause .
10346	Returns true if the context is in a top - level function .
10347	Returns an array containing all the elements in this sequence .
10348	Sets the arguments for this operator .
10349	Gets the fixity .
10350	Returns true if this operator is an infix .
10351	Compares two OpSymbol symbols .
10352	Handle a property change event .
10353	Register a WorkFlowController .
10354	Creates an enum factory for a class .
10355	Creates a component factory .
10356	Returns the cell for the given variable .
10357	Returns true if this variable is bound to this cell .
10358	Sets a column attribute .
10359	Sets the row attribute .
10360	Get the column s attribute .
10361	Get the row attribute .
10362	Inserts a single cell .
10363	Creates a time range .
10364	Creates a new type .
10365	Returns true if the given value matches this pattern .
10366	Creates the initial context for the given term .
10367	Updates the registers .
10368	Returns the value of this group .
10369	Find the best path of the goal .
10370	Joins two nodes into the given forward path .
10371	Returns the list of blocks associated with the given block .
10372	Get the properties for a given resource name .
10373	Sets the rate .
10374	Reads into a byte array .
10375	Skips the specified number of bytes .
10376	Gathers disjunctive expressions .
10377	Reads an int from the byte array starting at the given offset .
10378	Writes an int to a byte array .
10379	Writes a 24 - bit int to a byte array .
10380	Read a 24 - bit int from the byte array .
10381	Read a short from the byte array at the given offset .
10382	Writes a short to the buffer at the given offset .
10383	Returns the child state for the given operator .
10384	Returns an iterator for valid operators .
10385	Returns the id of this object .
10386	Returns the value of this property .
10387	Sets the value of this attribute .
10388	Splits a comma - separated list into an array of strings .
10389	Convert string array to string list .
10390	Converts a name into a camel - case name .
10391	Convert a case .
10392	Get the current configuration
10393	List the handlers .
10394	Returns the call point for the given function name .
10395	Create a code point for a function call .
10396	Returns true if this category is a sub category .
10397	Returns the id of this node .
10398	Returns the value at the specified level .
10399	Returns the last value .
10400	Custom serialization method .
10401	Deserialize this object from an input stream .
10402	Computes the height of the hole in the hole .
10403	Returns the modulus value modulo the given value .
10404	Adds an error message .
10405	Helper method for handling errors .
10406	Writes a substring of a string .
10407	Classify the decision tree .
10408	Compares two elements .
10409	Returns an iterator over all items in the set .
10410	Returns the log base of the given value .
10411	Convert a 32 - bit integer to a base 64 - bit integer .
10412	Convert a value to a base - 10 - bit integer .
10413	Converts a value to a log - based integer .
10414	Convert a long value to a base 10 - bit integer .
10415	Convert a long value to a base 10 - byte integer .
10416	Gets the number of characters that represent the given value .
10417	Gets the number of characters that represent the given value .
10418	Gets the number of characters in the given integer value .
10419	Sets the head function .
10420	Emits the list of instructions for this buffer .
10421	Sets the current screen .
10422	Evaluates the next predicate on the chain .
10423	Get the value of a property
10424	Returns a list of properties for a given key .
10425	Returns an iterator for the key order .
10426	Creates the array properties .
10427	Sets the throttle rate .
10428	Negative expression .
10429	Try to find the system properties .
10430	Get properties using system property name .
10431	Gets the properties using classpath .
10432	Get properties using CWD .
10433	Removes a Functor from the current clause .
10434	Returns the value of this term .
10435	Sets the substitution .
10436	Create a queue of nodes .
10437	Cleans up resources .
10438	Append logging event .
10439	Fire connector thread .
10440	Initialize the printers .
10441	Commits the transaction .
10442	Rolls back the transaction .
10443	Enqueue a write operation .
10444	Adds the given operation for the given transaction id .
10445	Acquires a global write lock .
10446	Release the global write lock .
10447	Enlist a transactional resource .
10448	Enter a rule set .
10449	Inserts the specified element at the tail of this queue waiting if necessary .
10450	Retrieves and returns the next element from this queue .
10451	Adds an element to the queue .
10452	Inserts an element into the buffer .
10453	Returns the next element .
10454	Returns the value of the specified property as a boolean .
10455	Gets the value of the specified property as Integer .
10456	Gets the value of the specified property as a Long .
10457	Call a mixin with the given name and arguments .
10458	Sets the transition visitor .
10459	Backtrack the current node .
10460	Retrieve the code for a given call point .
10461	Execute the given query .
10462	Decodes a heap .
10463	Capture the values of the object .
10464	Restores the values of this object .
10465	Get attribute for given class .
10466	Add an attribute to the map .
10467	Get all field names for a given class .
10468	Executes the mojo .
10469	Inserts an element into this buffer .
10470	Returns the next element or null if empty .
10471	Creates a search node .
10472	Create a queue of nodes .
10473	Returns a new TermWalker using the given visitor .
10474	Creates a new goalWalker for a given predicate .
10475	Creates a termWalker from a positional term .
10476	Returns a termWalker for a given position .
10477	Creates a termWalker for a postfix search .
10478	Loads properties from an input stream .
10479	Read properties from a file .
10480	Read properties from an URL .
10481	Get a Properties object from a file .
10482	Compute the size of the grid .
10483	Initialize font metrics .
10484	Adds a property change listener .
10485	Add a listener for a specific property .
10486	Remove a property change listener .
10487	Fire a property change event .
10488	Creates a new type .
10489	Perform a Fade .
10490	Creates the horizontal bar .
10491	Adds the left bar to the frame .
10492	Adds the right bar to the frame .
10493	Sanitize radio controls .
10494	Waits until the condition is satisfied .
10495	Waits until the condition is satisfied .
10496	Executes the mojo .
10497	Appends classpath elements to the command line .
10498	Creates a new type .
10499	Prints the Introduction information .
10500	Initialize the command line reader .
10501	Evaluate a sentence .
10502	Evaluates the query .
10503	Create a multi type data for a boolean boolean .
10504	Create a multi - type data for a byte .
10505	Creates a multi - type data for a character .
10506	Create a multi - type data for a short .
10507	Get the multi type data for an integer .
10508	Create a multi type data for a long
10509	Create a multi type data for a float .
10510	Create a multi type data for a double value .
10511	Parse a string representation of a type .
10512	Create a multi - type data from an object .
10513	Convert a multi - type value to an object type .
10514	set a value to the page context
10515	Clear all elements up to the specified key .
10516	Expand the buffer .
10517	Internal insert method .
10518	Compare two nodes .
10519	Parse operators .
10520	Returns the set of operators for a given fixity .
10521	Checks whether a candidate operator is valid .
10522	Creates a new search node .
10523	Right pad a string with a given size .
10524	Gets the errors .
10525	Gets the options in force format .
10526	Returns the usage string .
10527	Adds trailing pairs to a Properties object .
10528	Adds options to the given Properties object .
10529	Add a command line option .
10530	Take a list of free arguments into a Properties object
10531	Checks if the argument matches the required format .
10532	Compare two iterators .
10533	Returns an enumeration of all available options .
10534	Returns the command line options .
10535	Sets the stemmer .
10536	Returns actual stemmer .
10537	Returns the stem of a word .
10538	Main entry point .
10539	Creates a new type .
10540	Resets the internal state .
10541	Trace the environment frame .
10542	Trace a frame
10543	Call an internal function .
10544	Compute the next stack frame .
10545	Backtrack .
10546	Adds the trail at the given address .
10547	Uninds a range of addresses .
10548	Tidy the trail .
10549	Unify two variables .
10550	Dereify a constant .
10551	Prints the slot .
10552	Returns a random start state .
10553	Checks whether the given state is satisfied .
10554	Gets the child state for the given operator .
10555	Returns an iterator for valid operators .
10556	Pretty print the board .
10557	Swap a tile at the specified location in this map .
10558	Swap the tiles between two tiles
10559	Convert a board string to a list of characters .
10560	Convert a char list to a State
10561	Converts a log record to a log4j message .
10562	Convert a log4j log level to a log level .
10563	Requeue the given element .
10564	Requeue an element .
10565	Increments the size of a record .
10566	Decrements the size of the buffer .
10567	If old size is greater than low water mark it .
10568	Lists all bindings for the given name .
10569	Lists bindings for the given name .
10570	Add a property to the environment .
10571	Remove a property from the environment .
10572	Runs GC until all threads have been terminated .
10573	minor
10574	Resolves a mixin with the given name and arguments .
10575	Push a variable node to the stack .
10576	Sets the maximum height for a given row .
10577	Updates the width for a column .
10578	Executes the action on the page .
10579	Creates a new node with the given successor .
10580	Execute the action .
10581	Translate a built - in clause .
10582	Initialise symbol table .
10583	Top level check .
10584	Returns a string representation of this list .
10585	Evaluates the comparison between two numbers .
10586	Signals that the thread is running .
10587	Signals that the thread has terminated .
10588	Signals that the server is terminated .
10589	Inserts an element into the queue .
10590	Returns the index of the next log 2 .
10591	Updates the minimum node .
10592	Compare two nodes .
10593	Inserts two nodes into the list .
10594	Restart the cache .
10595	Returns a set of objects matching the specified method .
10596	Returns bag of elements .
10597	Find all solutions from the given search method .
10598	Returns the next element in the sequence .
10599	Restores values from an object .
10600	Get the value of the property on the underlying class .
10601	Add a property .
10602	Add a property to this context
10603	Captures all values of the object .
10604	Removes the first element from the queue .
10605	Convert modifiers to string .
10606	Converts a string to an integer .
10607	Converts a string to a Date
10608	Checks if string is a valid date
10609	Checks whether the given string is a time value .
10610	Checks if a string is a valid DateTime
10611	Creates a token source for the given string .
10612	Gets a token source for the given file .
10613	Gets a token source for the given input stream .
10614	Determine whether the given instruction is constant .
10615	Determine if the given instruction is void .
10616	Returns true if the given instruction is non - argument .
10617	Returns the children of this clause .
10618	Returns the argument at the given index .
10619	Returns children of this operator .
10620	Returns a string representation of the arguments .
10621	Retrieves the summary of the given schema .
10622	Retrieves a list of records matching the given query parameter .
10623	Execute a query .
10624	Emit a code .
10625	Sets the basic type .
10626	Consumes input stream .
10627	Prints a variable binding .
10628	Expand a set of solutions to a Map
10629	Reads the input stream .
10630	Reads the next packet .
10631	Returns a random time .
10632	Returns a unique time .
10633	Update the track info .
10634	Updates the music .
10635	Process the final output .
10636	Handles a start music request .
10637	Handles an event request .
10638	Fire the start music request .
10639	Initialize the parser .
10640	Start the server .
10641	Shutdown the connection .
10642	Resets the parser .
10643	Parses incoming packets .
10644	Process a packet .
10645	Sets the command line option .
10646	Creates a new chat .
10647	Initialize this object .
10648	Resets the content of this resource .
10649	Sets a property .
10650	Adds a new packet filter .
10651	Process a request .
10652	Reset properties .
10653	Initialize the writer .
10654	Send a packet .
10655	Gets the next packet from the queue .
10656	Open a stream .
10657	Returns information about the descriptor .
10658	Returns true if the descriptor contains the given descriptor .
10659	Registers an event life cycle callback .
10660	Shutdown the timer .
10661	Compare two files .
10662	Cleans a ByteBuffer .
10663	Returns true if the given entry is valid .
10664	Returns null if key is null .
10665	Compare two objects .
10666	Returns the entry associated with the specified key .
10667	Resizes the table to a new capacity .
10668	Puts all of the mappings into this map .
10669	Removes the value associated with the specified key .
10670	Removes the entry for the given key .
10671	Remove an entry from the map .
10672	add a new entry to the table
10673	Creates a delegate that delegates to the given set of keys .
10674	Encode binary value .
10675	Encodes a byte array into a hex string .
10676	Encodes the given string using Base64 encoding .
10677	Encodes a byte array into Base64 string .
10678	Iterate over a collection .
10679	Set the controller for the track selector .
10680	Set the progress controller
10681	Set the controller controller .
10682	Set the change volume controller .
10683	Sets the available playlists .
10684	Handle all resource resources .
10685	Handle a volume event .
10686	Handle a jump .
10687	Handle the select track .
10688	Get thread cache .
10689	Get request cache .
10690	Gets the alternate field name .
10691	Filters a map .
10692	Returns the shard path for the given id .
10693	Adapts an object to a session .
10694	Invokes a method .
10695	Deletes the content of the given path .
10696	Updates an existing entity .
10697	Sets the ping interval .
10698	Schedules a ping task .
10699	Add the given options .
10700	Checks if the given option exists .
10701	Parse the arguments .
10702	Prints usage information for the given application .
10703	Parse the command line arguments .
10704	Initialize the connection .
10705	Send a start tls message .
10706	Returns a compression handler that supports compression methods .
10707	Send stream compression request .
10708	Starts stream compression
10709	Notify listeners that a connection has been closed .
10710	Notifies all registered connection listeners .
10711	Register a new SASLMechanism .
10712	Returns a list of registered SASLMechanism implementations .
10713	Returns the output plugin behaviour
10714	Log a message and exception .
10715	Logs an error .
10716	Helper method to log a message .
10717	Creates a start event .
10718	Creates a start event .
10719	Notify the listeners that a string has been written .
10720	Determines whether this resource provides a specific resource .
10721	Returns true if there are resources associated with the given source ID .
10722	Returns true if this deployment contains a resource .
10723	Provides a list of resources matching the given IDs .
10724	Get the cached value .
10725	Returns the cache key .
10726	Removes a value from the cache .
10727	Saves a property in the cache .
10728	Retrieves a map containing all jar files .
10729	Include a file .
10730	Include a jar file .
10731	Adds a SASLMech .
10732	Adds a list of SASLMechs .
10733	Create debug events .
10734	Activate safe open post processors .
10735	Register standard events .
10736	Registers an event listener .
10737	Register an event ID .
10738	Perform a lock on a channel .
10739	Unregisters an event .
10740	Checks if the wish list can be run .
10741	Creates a DSE session .
10742	Create a player error .
10743	Starts the music .
10744	Stop playing music .
10745	Executes a command
10746	Create a playlist
10747	Creates a playlist .
10748	Append post - fix .
10749	Adds a query parameter to the URL .
10750	Adds a query parameter to the URL .
10751	Adds a query parameter .
10752	Adds a query parameter .
10753	Gets the playlist from an event model .
10754	Start the launch button .
10755	Check if the startup has been started .
10756	Checks if a URL exists .
10757	Handle browser button pressed .
10758	Create an image icon .
10759	Starts the launcher
10760	Copies this IntArray with the specified values .
10761	Exports to a hash map .
10762	Get the value at the given index .
10763	Get a property value .
10764	Returns the value as an integer .
10765	Returns the value as a double .
10766	Returns the value as a string .
10767	Create a command resource .
10768	Verifies whether a command is a valid command .
10769	Verifies that the capabilities are valid .
10770	Verify a command and capabilities .
10771	Executes the given batch of statements .
10772	Returns all subclasses of the given class .
10773	Returns all subclasses of a given class .
10774	Searches the classpath for a given location .
10775	Searches the given directory and places it in the given location .
10776	Searches a jar file in the given location .
10777	Converts this resource to a list .
10778	Returns the number of inner maps .
10779	Process a packet .
10780	Get volume from event model .
10781	Handles an error response .
10782	Create an error response .
10783	Determine if a target is a target .
10784	Sets the logged in seconds .
10785	A convenience method for creating a SynchronizedSet .
10786	Sets the name of the user .
10787	Updates the state of this request .
10788	Returns all the groups that this member belongs to .
10789	Appends the RSM element to a set element .
10790	Parse RSM query element .
10791	Filters a list of objects based on an RSM response .
10792	Create a leave event .
10793	Reload the roster .
10794	Create a roster entry .
10795	Returns a collection of all entries in the roster .
10796	Gets the presence of a user .
10797	Set offline presence information .
10798	Fire roster changed event .
10799	Sets the digest for the given connection ID and password .
10800	Generate a resource .
10801	Create a player request .
10802	Gets the time passed in parameter from the event model .
10803	Register a listener for changes .
10804	Initialize the properties file .
10805	Reloads the properties file .
10806	Parse a StreamError element .
10807	Parse the mechanisms element .
10808	Parse the compression methods .
10809	Parse a packet extension .
10810	Decodes a string value from the given type .
10811	Verifies whether the given event model is valid .
10812	Extract the playback state from a resource model
10813	Returns the secret key for the given subdomain .
10814	Checks if multiple domains are allowed .
10815	Adds an entry to the cache .
10816	Returns the keys contained in this map .
10817	Returns the values of this map .
10818	Purges all entries for the given reference .
10819	Returns the entry associated with the specified key .
10820	Computes the hash code for the given key and value .
10821	Creates a new hash entry .
10822	Checks whether the peer is active .
10823	Sets the presence flag .
10824	Updates the presence of a presence resource .
10825	Delivers a message .
10826	Creates the script .
10827	Initialize the output directory .
10828	Loads a properties file .
10829	Write a file to a file .
10830	Gets the progress .
10831	Wraps a collection .
10832	Returns a collection of service resolver objects for the given address .
10833	Returns the configuration .
10834	Gets the thread pool .
10835	Creates a stop music .
10836	Verifies whether the given EventModel is a stop music .
10837	Gets a DSE cluster .
10838	Adds a connection listener .
10839	Add a packet listener .
10840	Adds a new PacketListener .
10841	Fire the send listeners .
10842	Adds a new packet interceptor .
10843	Fire all registered interceptors .
10844	Converts a property name to a value .
10845	Called when the server is lost .
10846	Returns the unique identifier for the current thread .
10847	Checks if a node is valid
10848	Gets the key associated with the given value .
10849	Returns the value at the specified index .
10850	Look up a node in the table .
10851	Lookup a node in the tree .
10852	Compare two objects .
10853	Returns the least node at the given index .
10854	Returns the most node at the given index .
10855	Returns the node that is greater than the given node .
10856	Returns the most valid node at the given index .
10857	Returns the least valid node at the given index .
10858	Copies the node s color from to to .
10859	Returns true if the node is red .
10860	Checks if a node is black .
10861	Gets the grand parent .
10862	Gets the parent node .
10863	Returns the right child of the given node .
10864	Returns the left child of the given node .
10865	Rotate the left node at the given index .
10866	Rotate node right .
10867	Inserts a node at the given index .
10868	Performs a red black delete .
10869	Checks that the given object is a Comparable .
10870	Insert a new value into the tree .
10871	Checks whether the given key exists in the current thread .
10872	Checks whether the given value contains the given value .
10873	Gets the value associated with the specified key .
10874	Removes the specified key .
10875	Removes all entries from the trie
10876	Returns a set of all keys contained in this tree .
10877	Returns a collection containing all the values of this map .
10878	Returns all entries in this map .
10879	Copies all entries from this map into a new map .
10880	Delete expired entries .
10881	Cleans the cache .
10882	This method is called when the server is activated .
10883	Returns a player request for the specified playlist name .
10884	Initialize a roster store .
10885	Opens a roster store .
10886	Scans a set of InetAddresses .
10887	Returns the subnet address of the given address .
10888	Exports the data to a HashMap .
10889	Import the TrackInfo from a hash map .
10890	Add all applications .
10891	Execute an application .
10892	Prints the class list .
10893	Prints usage information .
10894	Main method .
10895	Creates a MuteEvent .
10896	Creates a MuteEvent .
10897	Lookup a schema by name .
10898	Write a list of lines to a file .
10899	Determine if this is in a jar file .
10900	Add an option .
10901	Get the schema of the thrift item
10902	Gets a field by its name .
10903	Gets the package name .
10904	Translates content to values .
10905	Creates an event listener .
10906	Sets the state of the iteration .
10907	Iterate over a collection .
10908	Performs an iteration .
10909	Gets the track info from an event model .
10910	Exports the data to a HashMap .
10911	Imports a resource .
10912	Create an error image .
10913	Gets an image .
10914	Issues a GET request to the given URL .
10915	Reverses the elements in the source map .
10916	Multiply the cartesian product .
10917	Start the timer .
10918	Return object to pool
10919	Create a stopped event .
10920	Returns the current track .
10921	Updates a new playlist .
10922	Shuffles the playlist .
10923	Verify the capabilities .
10924	Exports data to a map .
10925	Escapes a string .
10926	Received a challenge .
10927	Converts this object to JSON .
10928	Runs the output .
10929	Handles the event .
10930	Join all queues .
10931	Sets a property .
10932	Removes a property .
10933	Adds a principal .
10934	Remove a principal .
10935	Invoked when the root window is closed .
10936	This method is called when user encounters a user .
10937	Invoked when a presence event is received .
10938	Returns true if the resource model is permanent .
10939	Sets the name of this group .
10940	Checks whether the specified object contains the specified key .
10941	Checks whether the map contains the specified value .
10942	Inserts the specified entry into this map .
10943	Clear the hash table .
10944	Generate a hash code .
10945	Checks if two keys are equal .
10946	Checks if two objects are equal .
10947	Ensure the capacity of the map .
10948	Returns a new capacity based on the given capacity .
10949	Creates an iterator over the elements in this map .
10950	Loads a row from a binary stream .
10951	Registers this module .
10952	Initialize AddOn .
10953	Notify listeners that a reconnection failed .
10954	Notifies all listeners that the connection has been reconnected .
