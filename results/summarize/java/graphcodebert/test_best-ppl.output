0	Send a value to the stream .
1	Wraps an observable source .
2	Returns a stream consisting of the elements sorted by the given comparator .
3	Observes a Connectable Observable using the provided Scheduler .
4	Creates a new instance of unicast processor .
5	Creates a new processor .
6	Try to perform a scalar X - > x - >
7	Creates a future that maps a scalar value to a scalar value
8	Reset the scheduler .
9	Construct a Maybe from a Completable .
10	Construct a Maybe from a single source
11	Retries a future with a given number of times .
12	Ensures that the specified object is not null .
13	Returns an identity function .
14	Creates a new callable .
15	Static factory method .
16	Creates a cast function .
17	Creates a new unicast subject .
18	Creates a new unicast subject .
19	Creates a reusable subject .
20	Creates a new unicast subject .
21	Gets the error .
22	Blocks until the response is available or a timeout expires .
23	Wait for the task to complete .
24	Drains a queue .
25	Requests a given prefetch .
26	Called when the queue is completed .
27	Assigns the current value to the downstream .
28	Returns the value of the property .
29	Gets the error .
30	Validates two Disposables .
31	Atomically sets the next AtomicReference to the given AtomicReference .
32	Validates the upstream subscription .
33	Atomically sets the upstream asynchronously .
34	Cap a long
35	Multiply a long .
36	Atomically adds the given n to the available .
37	Converts a Throwable to a NullPointerException .
38	Adds an element to the list .
39	Shutdown the pool .
40	Creates a scheduled executor service .
41	Sets the given subscription .
42	Emit loop loop .
43	Wraps an error or throws a RuntimeException .
44	Flattens the given exception into a list .
45	Throws an exception if the given type is a Throwable .
46	Clears all resources .
47	Returns the number of resources currently disposed .
48	Try to apply a scalar X - > Observable to an Observable .
49	Creates an Observable from a scalar value
50	Accepts a notification .
51	Iterates over all elements in the queue .
52	Starts the producer queue .
53	Start the queue .
54	Offers an element to the queue .
55	Get the current disposed resource .
56	Completes the stream .
57	Completes the stream .
58	Completes the task .
59	Returns a Streamable that iterates over all the elements in this sequence repeatedly until it completes .
60	Returns a concatenated iterable that iterates over all elements of this sequence .
61	Returns a stream that iterates over the elements in this sequence .
62	Await for the consumer
63	Requests a number of bytes .
64	Adds a subscriber to the queue .
65	Removes a subscriber from the list .
66	Observes a ConnectableFlowable .
67	Parses the annotations of a method .
68	Sets the delay in milliseconds .
69	Creates an error response .
70	Calculates the delay in milliseconds .
71	Creates the sample data for the given username and password .
72	Returns the HttpMethod instance of the given HTTP method .
73	Search for a user .
74	Hashes a raw password .
75	Checks if the encoded password matches the encoded password .
76	Performs the version checks .
77	Determines whether checks should be disabled .
78	Gets the spring - security version .
79	Add attribute exchange configurer .
80	Configure the OAuth2 client configurationurer .
81	Configure an OAuth2 resource server .
82	Provides a default channel request matcher registry .
83	Compare dn with specified value .
84	Retrieve an entry by its attributes .
85	Searches for a single attribute .
86	Search for multiple attributes .
87	Search for a single entry in the specified directory .
88	Builds a copy of the given search controls .
89	Given a list of ACLs find all parent ids and their parents .
90	Builds the preAuthenticationDetails object from the J2EE user .
91	Creates the embedded server definition .
92	Create servlet filter .
93	Create jaas - api filter .
94	Creates a new type resolver builder .
95	Registers the spring security filter chain .
96	Retrieves a token from the database .
97	Gets the granted authorities .
98	Creates a new cipher instance .
99	Asserts that all required properties are set .
100	Checks if the security token is required .
101	Check if the pre - authenticated principal has been changed .
102	Performs the actual authentication .
103	Checks the content length of the response .
104	Maps a collection of authorities to a set of authorities .
105	Sets the login processing URL for the client .
106	Update authentication defaults .
107	Update the access defaults .
108	Map the password to a string .
109	Extracts the cookie from the request .
110	Encode cookie .
111	Sets a cookie .
112	Resolves an argument .
113	Get the query string from the given pattern .
114	Gets the service port .
115	Returns the LDAP - Principal of the current User .
116	Clears out the current session .
117	Authenticate .
118	Builds a provider URL from a list of LDAP servers .
119	Sets the context environment properties .
120	Returns the full redirect URL .
121	Render the Ui suffix .
122	Initializes the user details service .
123	Gets the UserDetailsService .
124	Adds the pkce parameters .
125	Determines if the request requires authentication .
126	Override this to customize the request .
127	Performs a proxy request .
128	Checks if the current user is authenticated .
129	Determines if the specified request matches the proxy request .
130	Create a MethodSecurityExpression .
131	Gets jwk set .
132	Encode a string .
133	Creates a collection of granted authorities for the current user .
134	Load user by assertion .
135	Gets the pre - authenticated principal .
136	Concatenate multiple byte arrays .
137	Creates a sub - array of a byte array .
138	Get a list of granted authorities .
139	Pre - process map .
140	Gets the grantedAuthority collection .
141	Adds the given value to the given result .
142	Gets the pre - authenticated principal .
143	Returns the shared object associated with the given type .
144	Builds the redirect URL for the given request .
145	Invokes the interception .
146	Converts a string to a role .
147	Converts a string to a string array .
148	Process the auto login cookie .
149	On successful login .
150	Attempt to switch to a user .
151	Attempt to exit the user .
152	Sets the exit user s exit user .
153	Display the public index .
154	Creates the spring security filter chain .
155	Decode a JWT token .
156	Performs authorization using the access expression .
157	Check if authorization is allowed .
158	Converts a jwt jwt jwt .
159	Generates a Csrf token .
160	Display admin page .
161	Display the addPermission
162	Add a permission
163	Delete permission .
164	Returns the role with the default role .
165	Creates a UserDetailsResourceFactory bean from a string .
166	Returns the values of the specified attribute .
167	Get the first attribute value .
168	Encode a string to a byte array .
169	Decode a byte array .
170	Looks up the parameter names for the given method .
171	Adds a new contact .
172	Find config attributes .
173	Add a secure method .
174	Get all ConfigAttributes
175	Returns true if the given method name matches a match .
176	Sets any request matcher that will be applied to any server .
177	Handle bind exception .
178	Get a random contact
179	Removes the authentication exception from the session .
180	Returns the field on the given class .
181	Create service url .
182	Create redirect url .
183	Extracts the SHA prefix from an enc pass .
184	Called by the application .
185	Checks the list of filters .
186	Returns an array of registered types .
187	Extracts the cause of the given throwable .
188	Register an access manager .
189	Convert a collection of authorities to a set .
190	Compares two byte arrays .
191	Sets the default failure url .
192	Sets the function to resolve hidden inputs .
193	Builds the request URL .
194	Checks if the given URL is an absolute URL .
195	Creates an attribute list for the given identifier .
196	Converts the given result set to an identifier .
197	Inserts entries in acl .
198	Creates an object identity .
199	Method update ObjectIdentity .
200	Saves the request .
201	Creates a new server web exchange matcher .
202	Returns an empty server web exchange matcher .
203	Create a new TextEncryptor with the given password and salt .
204	Create a new TextEncryptor with the given password and salt .
205	Creates a new TextEncryptor
206	Writes the headers to the response .
207	Determines the target URL for the authentication .
208	Determines the target URL .
209	Sets the target URL parameter .
210	Retrieves a directory from the database .
211	Build a DistinguishedName from the LDAP server .
212	Creates the shared objects .
213	Configure jaas using a loop .
214	Gets the current date .
215	Parses a date .
216	Update cache .
217	Sets the authentication details .
218	Determine the security name for the given subject .
219	Returns the list of groups for the given user .
220	Changes the current user s password .
221	Build the distinguished name for the specified group .
222	Called when the session is exceeded .
223	Copy details from source to destination
224	Returns the chain of filters associated with the specified request .
225	Returns a list of filters for the specified URL .
226	Gets the application context .
227	Returns the full Dn of the specified dn .
228	Update session attributes .
229	Returns a new authentication scheme with the given user name and password .
230	Adds a list of filters to the rest .
231	Adds filters to the RestAssert .
232	Creates a new authentication scheme with the given username and password .
233	Creates an authentication scheme .
234	Creates a new authentication scheme with the given username and password .
235	Adds a proxy to the given URI .
236	Print response body .
237	Sets the config for the redirect .
238	Returns the default charset for this request .
239	Sets the default object mapper configuration .
240	Sets the object mapperFactory to use .
241	Sets the configured log configuration .
242	Sets the session config .
243	Sets the object mapper config .
244	Sets the configured JsonConfig .
245	Sets the configured xml configuration .
246	Sets the encoder config .
247	Sets the header config .
248	Sets the async mvc config .
249	Sets the mock mvc config .
250	Sets the multi part config .
251	Sets the mock mvc param config .
252	Sets the configured matcher config .
253	Allow all hostnames to be allowed .
254	Declare the given namespaces .
255	Create a new XmlPathConfig with the given namespace URI .
256	Perform a HTTP request .
257	Sets the request headers .
258	Sets the proxy to use .
259	Sets the control name .
260	Sets a header .
261	Performs basic authentication .
262	Start NTLM credentials .
263	Creates a new set of headers .
264	Resets the context .
265	Sets header .
266	Build response .
267	Applies a value to the cookie matcher .
268	Applies a cookie comment to the cookie .
269	Applies an expiry date to the cookie .
270	Applies a domain matcher to the cookie .
271	Applies a path to the cookie matcher .
272	Applies a secured cookie matcher .
273	Applies httpOnly matcher .
274	Matches a cookie version .
275	Returns a matching cookie matcher .
276	Expect a header to be expected .
277	Expect a header with the expected value .
278	Expect a cookie with the expected value
279	Sets the proxy configuration .
280	Sets the number return type .
281	Sets the default parser type .
282	Default default logging .
283	Enable logging of request and response .
284	Creates an HTTP request .
285	Sets default boundary .
286	Add an attribute .
287	Add header .
288	Add multi part .
289	Add additional result handlers .
290	Sets a parameter .
291	Returns a new HttpClientConfig with the given parameters .
292	Sets the HttpClientConfig to use .
293	Sets the HttpClientConfig .
294	Executes a GET request .
295	Returns the integer value as an integer .
296	Returns the byte value as a Byte .
297	Returns the short value as a Short .
298	Returns the float value as a float .
299	Returns the double value as a double .
300	Returns the long value as a long .
301	Gets a list of objects from the path .
302	Gets the mapped map .
303	Gets the object at the specified path .
304	Sets the body of the request .
305	Adds a cookie to the request .
306	Adds a parameter to the request .
307	Adds a parameter to the request .
308	Set the form params for form params .
309	Logs response to the given PrintStream .
310	Creates a set of cookies .
311	Clean up all keys and sources
312	Index the implicit bindings .
313	Gets a binding .
314	Converts a string binding to a constant string .
315	Clean up internal dependencies .
316	Remove failed binding .
317	Gets the internal dependencies of a given binding .
318	Creates a new instance .
319	Gets all parameters in the given context .
320	Binds an instance to the provider .
321	Binds the logger .
322	Finds a placeholder annotation on the given member .
323	Returns true if the two methods are overridden .
324	Initializes the delegate .
325	Returns the type of the provider .
326	Resolve the given types .
327	Canonicalize a type .
328	Prepare built - in converters .
329	If the given class loader is null return the same classloader .
330	returns true if cglib is identical to the same class
331	Returns true if the given member is public .
332	Fix annotations .
333	Requests an initializer for a member .
334	Validates pending injections .
335	Creates a new instance .
336	Wrap a servlet request .
337	Creates a factory using the specified scope .
338	Make a scoped scoping .
339	Normalize a path .
340	Returns an annotation instance .
341	Determines whether the given annotation is retained at runtime .
342	Find scope annotation .
343	Gets the key associated with the given type .
344	Returns the name of a key .
345	Initializes the delegate .
346	Adds a direct type binding .
347	Gets the cached constructor .
348	Returns true if the given interceptor has a scope annotation .
349	Creates a new real map binder .
350	Returns a key for the given key .
351	Creates a new instance .
352	Replace the source .
353	Returns a new instance for the given module .
354	Returns the list of registered methods .
355	Returns true if the given type is not defined .
356	Returns true if the given constructor has a matching parameters .
357	Returns the dependencies for the given ctor .
358	Removes the given dependencies from the set .
359	Checks if the set of dependencies is valid .
360	Creates a binding from a new injector .
361	Invoke the given method on the given proxy .
362	Creates an error message for the given key .
363	Instantiates a new set binder .
364	Gets the key for a new item .
365	Finds the next filter .
366	Determines if the given class has an annotation on the given class .
367	Gets the injection point .
368	Gets the internal dependencies .
369	Returns a module for the given module .
370	Gets the annotation associated with the given method .
371	Returns the line number for the given member .
372	Initialize this instance .
373	Provides a continuation of the given callable .
374	Transforms a callable to a request .
375	Validate and canonicalize the given value .
376	Gets a member from the cache .
377	Creates a member injector with all listeners .
378	Gets injectors .
379	Creates a new Key instance .
380	Returns a strategy for the given annotation .
381	Returns a strategy for the given annotation type .
382	Removes the stacktrace from a throwable .
383	Gets the binding source .
384	Format error messages .
385	Creates a new message with the given message format and arguments .
386	Creates a new message with the given exception and message format .
387	Creates a new message with the given parameters .
388	Convert an object to an object .
389	Returns true if the class should be skipped .
390	Gets the source from a list of modules .
391	Main method .
392	Adds a dependency .
393	Helper method to push a key .
394	Construct an initializable instance .
395	Provides an instance of the given provider .
396	Process a connection event .
397	Adds a new connection event processor .
398	Get the result of a future .
399	Locks the given throwable .
400	Register a remote command .
401	Registers the default processor
402	Returns the processor associated with the given command code .
403	Tries to get a cached reference .
404	Decode protocol code .
405	Get all connection pools .
406	Scan pools .
407	Gets a connection from the server .
408	Creates a new connection pool .
409	Remove a task from the pool .
410	Healculate connection pool if needed .
411	create connection pool
412	Closes a connection .
413	On close .
414	Close the connection .
415	Sets an attribute .
416	Registers a user processor .
417	Registers the user process with the multi interest list .
418	Dispatch request to user processor
419	deserialize command
420	Pre - process the remoting context .
421	log timeout log
422	Debug log .
423	Process a message
424	Execute a remote command with a callback .
425	Sends a request to the remote endpoint .
426	Convert bit set to byte .
427	Convert integer to BitSet
428	Adds a new reconnect task .
429	Stops the heartbeat .
430	Convert a request to a remoting command
431	Filter connection list
432	Monitor connection pools
433	Close the last select connections .
434	Gets a boolean property .
435	Log an info message with the INFO format .
436	Checks if the request is a request timeout .
437	Gets the user processor .
438	Random connection .
439	Gets the value of the given key .
440	Gets a string property .
441	Resolve response object .
442	Returns response object .
443	Converts a ResponseCommand to a throwable .
444	Extract error message .
445	Create RpcServerException .
446	Prints connection trace log
447	Creates a new event loop group .
448	Parse remote address .
449	Parse local address .
450	Parse remote IP address .
451	Parse remote host name from channel .
452	Parse local IP address .
453	Parse remote port from channel .
454	Parse local port .
455	Parse socket address to host IP .
456	Adds a new connection .
457	Remove a connection from the pool .
458	Returns the current connection .
459	Registers a custom serializer for a class .
460	Gets a custom serializer instance .
461	Registers a custom serializer for a command .
462	Gets a custom serializer for a command .
463	Start the connection monitor .
464	Check if the remote address is connected .
465	Init write buffer water mark
466	Create a new frame for the given opcode .
467	Writes all available bytes to the socket .
468	Set the error code .
469	Validates the given payload .
470	Updates the payload .
471	Check if the requested protocol is accepted .
472	Translate length limit length limit .
473	Translate a single frame size to an IncompleteException .
474	Generate the final key .
475	Process a continuous frame .
476	Process a frame binary .
477	Logs a runtime exception .
478	Process a frame text .
479	Process next continuous frame .
480	Process a frame if it is not yet completed .
481	Process a closing frame .
482	Checks the buffer size .
483	Get payload from byte buffers .
484	Returns the total size of the buffer list .
485	Translate a handshake http http server .
486	Translate http client response .
487	Decodes data from the socket .
488	Handles a connection error response .
489	Send a connection to the client .
490	Generate HTTP response for an error .
491	Send a text to a WebSocket .
492	Resets the connection .
493	Start read thread .
494	Returns the port of the web socket .
495	Send a handshake .
496	Set the connection lost timeout .
497	Stop the connection lost timer .
498	Start the connection lost timer .
499	Start the connection lost monitor .
500	Executes the connection lost connection .
501	Cancels the connection lost checker .
502	Called when a WebSocket handshake is received as a server .
503	Send a ping frame .
504	Stops the websocket .
505	Returns the port .
506	Performs additional read .
507	Accepts the web socket .
508	Performs a read .
509	Performs batch write .
510	Setup the selector and server thread .
511	Ensures that a single thread is started .
512	Do the shutdown .
513	Gets the socket associated with a WebSocket .
514	Broadcast data to all connected clients .
515	Broadcast a text to all connected clients .
516	Helper method to perform a broadcast .
517	Fill the list of frames for the given draft .
518	Transfer from source to destination .
519	Start persistence unit .
520	Returns the entity manager associated with the given name .
521	Executes a transactional block .
522	Converts the given arguments to a Scala buffer .
523	Wraps the given arguments to a list .
524	Gets a localized message .
525	Gets a localized message .
526	Checks if the given language is defined in the given language .
527	Select a preferred language .
528	Get preferred language .
529	Sets the language .
530	Adds bindings for the given modules .
531	Adds bindings to this stage .
532	Adds multiple bindings .
533	Adds a module overrides to this builder .
534	Adds a module overrides .
535	Specifies the specified bindings .
536	Disable the given modules .
537	Executes the call .
538	Executes the call .
539	Gets the file at the given relative path .
540	Returns a binding that is in the specified scope .
541	Creates a tuple .
542	Static constructor .
543	Convert an ExecutionContext to an executor
544	Creates a default JPAC config with the given name and unit name .
545	Creates a default JPAC config .
546	Creates a default JPAC config from the given map .
547	Creates a flow that returns a sequence of strings .
548	Creates a flow that returns a sequence of JSON nodes .
549	Adds a constraint validator .
550	Creates new instance of constraint validator .
551	Get a matching method .
552	Called when a client error occurs .
553	Handles a bad request .
554	Handles a forbidden request .
555	Handle not found .
556	Handles an error .
557	Logs an error .
558	Converts a throwable to a useful exception .
559	Handles an error .
560	Handles an error .
561	Creates a DocHandler from the given resources .
562	Create a DocHandler from a directory .
563	Creates a build doc handler from a directory .
564	Create a DocHandler from a directory and a jar file .
565	Create a DocHandler from a jar file .
566	Consumes data stream .
567	Create HttpEntity from Content .
568	Creates a HttpEntity from a string .
569	Create a chunked entity .
570	Creates a response with the given status code and content .
571	Sends a response with a status code .
572	Creates a response with the given status code .
573	Sends an input stream to the given stream .
574	Creates a result with the given status code .
575	Find a user by id .
576	Returns the preferred language of the specified collection .
577	Create a unique call for this URL .
578	Create a new fragment with the specified fragment .
579	Returns the absolute URL of the given request .
580	Returns the web socket URL for the given request .
581	Returns a function that takes a connection runnable .
582	Returns a function that wraps the given connection block .
583	Create a new server for a router .
584	To json .
585	Creates an object from a JsonNode .
586	Parse a string into a JsonNode
587	Parses a JsonNode from a stream .
588	Returns the relative path between startPath and targetPath .
589	Returns canonical path .
590	Displays a list of constraints .
591	Determines the displayable constraint .
592	Sets the completion stage to the given amount .
593	Check if the given array is assignable .
594	Parse cron string
595	Calculates the next cron interval .
596	Creates a new ahc client .
597	Creates a new GuiceApplicationBuilder .
598	Render a CORO to a page .
599	Adds a string value to the session .
600	Adds a string to the flash .
601	Returns a binding key qualified with the specified instance .
602	Returns a binding key qualified with the specified annotation .
603	Converts this Binding to a Java type .
604	Converts this Binding to a Java type .
605	Converts this binding to a Java binding .
606	Converts this binding to the given key .
607	Converts this Binding to a Java type .
608	List available languages .
609	Returns the preferred language .
610	Creates a new Evolutions reader from a map of values .
611	Creates a new Evolutions reader for default evolution .
612	Cleans a database .
613	Loads a config loader from an environment .
614	Loads Guiceable modules from the application .
615	Loads the given modules from the given modules .
616	Loads the given modules from the given modules .
617	Loads the given modules .
618	Loads the application with the given bindings .
619	Creates a new GuiceApplicationBuilder .
620	Encodes a cookie .
621	Get the current entityManager from the current thread .
622	Gets the emque stack .
623	Pushes an EntityManager to the stack .
624	Use this method to bypass a pipeline .
625	Dispatches a flow .
626	Creates a flow for actor ref .
627	Convert error arguments to an empty list .
628	Fill the form with the given value .
629	Gets validation errors .
630	Returns the errors as JSON .
631	Returns the value associated with the given key .
632	Fill the form with the given value .
633	Parses the given text and returns the corresponding object .
634	Parses the text of the given field .
635	Print to String
636	Prints the type of a field
637	Print value to string
638	Register format converter .
639	Register a Formatter for the given class .
640	Register an annotation formatter .
641	Encodes a cookie .
642	Create a list of nodes matching the specified path .
643	Convert a list to a Java Seq .
644	Converts an array to a Seq .
645	Construct a varargs from an array .
646	Creates a new WebSocket acceptor accepting JSON messages .
647	Creates a WebSocket .
648	Check if the given object is accessible .
649	Returns the cost of a primitive type .
650	Calculates the total transformation cost for the given arguments .
651	Returns the cost of the object transformation .
652	Gets the message .
653	Gets the message at the specified keys .
654	Creates a new database with the default settings .
655	Creates a parallel Sorter .
656	Performs a quick sort .
657	default sort sort
658	Invoke the signature .
659	Cast a number to another type
660	Load a single argument .
661	Generates a field instruction .
662	Generate a zero or null value .
663	Unbox the current value .
664	Process an array .
665	Compare two nulls
666	Resolve all bridge methods
667	Retrieves a list of methods from a superclass .
668	Filter a list of constructors .
669	Sets the superclass .
670	Generate a field .
671	Add a method .
672	Returns the cardinality of the bitmap
673	Sets the naming policy .
674	Finds methods with the given names and descriptors .
675	Resolve relative path .
676	Read string .
677	Set the host .
678	Creates a new request with the specified method and destination .
679	Create a CONNECT request .
680	Create a GET request .
681	Create a POST request to the specified destination .
682	Create a new PUT request .
683	Create a PATCH request .
684	Create a DELETE request .
685	Create a HEAD request .
686	Start a TRACE request .
687	Create a new OPTIONS request
688	Sets the path .
689	Sets the cookies for this request .
690	Add a query parameter .
691	Add a query to the request .
692	Set the query string .
693	Returns the query string .
694	Get the host url .
695	Set the basic authentication header .
696	Sets the host header .
697	Builds the request .
698	Sends the request and returns the result .
699	Removes a range from the given range .
700	Returns the length of the exception table .
701	Collect all action interceptors .
702	Collects all action filters .
703	Collect the action results .
704	Collects all action runs .
705	Sets a simple property .
706	Returns the value of the specified property .
707	Extract the property name from the property name .
708	Gets the writer .
709	Sets an object reference .
710	Get object reference by name .
711	Lookup an object reference .
712	Returns the descriptor for the given table .
713	Find table descriptor by column ref .
714	Returns the table alias for the given table .
715	Register a table reference .
716	Lookup table reference .
717	Registers a hint .
718	Serialize a single value .
719	Inject attributes .
720	Inject request parameters .
721	Inject uploaded files .
722	Convert property name to column name .
723	Convert column name to property name .
724	Converts a column name to a column name .
725	Stores the value at the given index .
726	Prepare the given value to the given destination type .
727	Get all wrappers .
728	Resolves a wrapper class .
729	Creates a new instance of the specified class .
730	Convert path separators to system path .
731	Returns the path of the given filename .
732	Splits the filename and extension .
733	Relative path relative to basePath .
734	Register a class .
735	Registers an action config with the given type and consumer .
736	Start the war .
737	Configure defaults .
738	Register the madoc components .
739	Exclude a list of jars .
740	Specify the specified jars .
741	Includes the specified entries .
742	Exclude entries from the scan .
743	Scans a jar file .
744	Scans the classpath .
745	Generate bytecode signature of given class .
746	Add classes to be scanned .
747	Scan resources .
748	Creates a new transaction .
749	Gets the default scope .
750	Gets or creates a new scope .
751	Executes the specified madoc scope .
752	Decode characters from a string .
753	Generates a new CSRF token .
754	Ensures that the given token set has expired .
755	Checks if a CSRF token is present in the session .
756	Creates a bean copy from the given object .
757	Creates a copy of this bean .
758	Visit a property .
759	Initialize the entity .
760	Resolves a scope .
761	Registers a new bean definition .
762	Registers a bean .
763	Remove all beans with the given type .
764	Resolve beans for a given type .
765	Registers the specified bean with the specified parameters .
766	Registers a property in the bean .
767	Registers a setInjectionPoint .
768	Registers a method in the bean .
769	Registers init methods for a bean .
770	Register poison method names for the specified bean .
771	Registers a plugin with the specified name and method name .
772	Registers a provider with the given name and arguments .
773	Iterate over all beans of a given type .
774	Defines the given parameters .
775	Intercept the given action request .
776	Resolve java version .
777	Pushes an int to the stack .
778	Checks that the argument index is valid .
779	Create a field name .
780	Create advice method name .
781	Load some special method arguments .
782	Loads the arguments of a static method .
783	Loads the arguments of a method .
784	Load a method argument .
785	Store an argument .
786	Prepare the return value .
787	Creates a key .
788	Generate new array .
789	Store a byte array into an array .
790	Extract encoding from content type
791	Returns true if the flags are empty .
792	Resolve OAuth bearer token from request .
793	Require authentication .
794	Prepares a response to a download .
795	Prepares a response to the given response .
796	Gets all cookies with the given name .
797	Read request body from reader .
798	Read request body from stream .
799	Stores the context path in the given page context .
800	Stores the context path in the servlet context .
801	Returns true if the given name is a GET parameter
802	Prepares an array of parameters .
803	Copy request parameters to attributes .
804	Invokes the given body .
805	Renders the given body .
806	Renders the given body to a string .
807	Invokes all init methods .
808	Call all destroy methods .
809	Creates a new instance .
810	Inject parameters from bean .
811	Rewrite the action path .
812	Add header .
813	Put a value into the map
814	Put base property .
815	Put profile .
816	Gets the value of a profile .
817	Resolve the value of the given value .
818	Extracts the properties from the specified profiles .
819	Read a 32 - bit integer from a byte array
820	Hashes a password .
821	Checks if a string hashed password .
822	Read all bytes from the input stream .
823	Read bytes from the input stream .
824	Parse an action .
825	Resolves the action config .
826	Detect and register an action alias .
827	Read interceptors .
828	Reads the action filters .
829	Read package action path .
830	Read the action path .
831	Parses the alias .
832	Create an action runtime .
833	Pre - pre - response .
834	Applies an advice to the given target class .
835	Inject target .
836	Visits an annotation .
837	Resolve the real name .
838	Resolve a named name .
839	Looks up the TypeData for a given class .
840	Looks up the type data for a given class .
841	Find the type data for a given class .
842	Resolve a name .
843	Resolve real name .
844	Returns the file content .
845	Copy the bootstrap methods from the input buffer .
846	Set the major version and class name .
847	Puts constant pool .
848	Puts bootstrap methods .
849	Adds a constant field ref .
850	Adds a constant reference to this symbol .
851	Adds a constant pool entry to the constant pool .
852	Adds a new constant entry to the list .
853	Adds a constant or float to the constant pool .
854	Adds a new entry to the constant pool .
855	Adds a constant pool to the constant pool .
856	Adds a new entry to the constant pool .
857	Adds a constant pool to the constant pool .
858	Adds a constant name and type .
859	Adds a UTF8 string to the constant pool .
860	Adds a UTF8 entry .
861	Adds a constant method handle to the constant pool .
862	Adds a constant method handle .
863	Adds a constant or invoke method .
864	Adds a constant or invoke - invoke method .
865	Adds a constant reference to the constant pool .
866	Adds a constant or invoke dynamically .
867	Adds a constant string to the constant pool .
868	Adds a constant reference to the buffer .
869	Add a bootstrap method to the symbol table .
870	Adds a new type to the list .
871	Hash a string .
872	Removes all entries from this map .
873	Returns all values with the given name .
874	Returns an iterator over the elements in this map .
875	Returns all entries in this map .
876	Grows internal buffer .
877	Appends a portion of a char sequence .
878	Visit an annotation .
879	Visit the end of the chain .
880	Create the first chain delegate .
881	Creates chain delegates .
882	Parses a path string .
883	Adds a field to the path .
884	Configure the servlet context .
885	Execute the next method .
886	Returns an array of FieldDescriptors .
887	Create a bean definition for registration .
888	Convert jtx transaction mode to DbTransactionMode .
889	Reads the value of the given property .
890	Put all values in the given map .
891	Appends a buffer to this buffer .
892	Write the list of objects to a writer .
893	Write the list of objects to the given output stream .
894	Write the list of objects to the given output stream .
895	Returns the string value associated with the given key .
896	Returns the integer value associated with the given key .
897	Returns the long value associated with the given key .
898	Returns the double value associated with the given key .
899	Get a float value .
900	Returns the value associated with the given key .
901	Adds a string value .
902	Sets the current folder .
903	Receives messages from the folder .
904	Updates the flags for the given email .
905	Closes the folder if it has been opened .
906	Returns the named parameter with the given name .
907	Creates an alias for the given target string .
908	Perform validation .
909	Adds a new violation .
910	Sets the mime type .
911	Sets the download file name .
912	Sets the target input stream .
913	Sets the target class name .
914	Sets the target class .
915	Process the target .
916	Create proxy .
917	Define the target class .
918	Creates a new instance .
919	Dumps the class in debug folder .
920	Adds a new email address .
921	Set the recipient address .
922	Adds an email address to the email .
923	Set the reply to reply to .
924	Set the cc address .
925	Adds a text message with the specified encoding .
926	Adds an HTML message with the specified encoding .
927	Sets a header .
928	Gets the value of a system property .
929	Returns the boolean value as a boolean .
930	Gets the int value .
931	Gets the long value .
932	Gets the parameters of the method .
933	Serialize a key and value .
934	Looks up alias by alias .
935	Resolves an alias .
936	Resolve the result path .
937	Resolve the result path and value .
938	Gets the last index of the last slash .
939	Get last index after slash .
940	Gets the index of the first dot after slash .
941	Removes the last camel word from a string .
942	Resolve schema name .
943	Resolve column name .
944	Initializes this sketch with the specified key .
945	Calculate the inner value .
946	Modify x y .
947	Key schedule .
948	Initializes this block with the given key message .
949	Encrypt a block .
950	Convert a byte array to a long array .
951	Removes any bounding box from string .
952	Get the path .
953	Zips a file .
954	Gzip a file .
955	Ungzip a file .
956	List the entries in a ZIP file .
957	Unzip a zip file .
958	Adds a file to a ZIP output stream .
959	Adds content to a zip output stream .
960	Returns the FieldDescriptor with the given name .
961	Returns the PropertyDescriptor with the given name and declared boolean .
962	Sets the request bundle name .
963	Sets the session locale .
964	Gets the session locale .
965	Filters parameters for bean name .
966	Add multiple profiles .
967	Read a little endian byte from the byte array at the given offset .
968	Reads data from an input stream .
969	Reads a label .
970	Read a bytecode bytecode offset from a type annotation .
971	Read element values .
972	Read the verification type information .
973	Read bootstrap methods attribute .
974	Returns an array of CtorDescriptors
975	Returns the ctor descriptor for the specified arguments .
976	Gets the request map .
977	Creates a map of request attributes .
978	Convert array to long array .
979	Initializes the decorator .
980	Adds a consumer to the scan .
981	Add a search path to find file .
982	Add path to find file .
983	Includes the given patterns .
984	Exclude the given patterns .
985	Adds a path to the list .
986	Find all files in the directory .
987	Initialize the list .
988	Returns an iterator .
989	Resolve the wiring mode .
990	Resolve bean name .
991	Gets the output writer .
992	Gets the output stream .
993	Returns the class name .
994	Returns a string representation of a constructor .
995	Get method descriptor string .
996	Create a method descriptor for a given method .
997	Append the descriptor .
998	Returns the size of this array .
999	Gets the arguments and returns the size of the arguments .
1000	Mark this transaction as rollback only .
1001	Commit or rollback .
1002	Rollback all resources associated with this transaction .
1003	Request a resource .
1004	Removes the name from the stack .
1005	Write a string .
1006	Write a unicode character .
1007	Writes a char sequence .
1008	Set the logging error log level .
1009	Start a new region .
1010	Returns true if the string contains the given string .
1011	Registers a pseudo function .
1012	Looks up a pseudo function .
1013	Generate the visitor .
1014	Visit an annotation .
1015	Generate static init block .
1016	Create proxy constructor .
1017	Process all super classes .
1018	Find the last entry in the specified range .
1019	Adds a string to the timer .
1020	Replace ASM instructions .
1021	Collect attribute prototype .
1022	Register default types .
1023	Register a new SQL type .
1024	Lookup the SqlType for the given class .
1025	Lookup a SqlType .
1026	Create a proxy for SOCKS4 proxy .
1027	Create a proxy for SOCKS5 proxy .
1028	Create a proxy for HTTP proxy .
1029	Get the total number of transactions in the current thread .
1030	Get total number of transactions with the given status .
1031	Associate a transaction .
1032	Continue a transaction .
1033	Returns the resource manager for the given resource type .
1034	Creates a proxy object .
1035	Append the path .
1036	Align a string to a given size .
1037	Pretty print a value .
1038	Convert string to camel case .
1039	Formats a paragraph .
1040	Convert tabs to spaces .
1041	Escape a string .
1042	Unescapes a string .
1043	Returns the bean associated with the specified type .
1044	Get bean by name .
1045	Initialize bean definition .
1046	Invokes a provider .
1047	Register a bean with the specified wiring mode .
1048	Sets the bean property .
1049	Get bean property by name .
1050	Shutdown all registered scopes .
1051	Resolve method parameters .
1052	Write the body of the form .
1053	Gets value .
1054	Close the tree .
1055	Creates a new Element node .
1056	Adds a new tag .
1057	Remove last child node if empty .
1058	Build the query string .
1059	Gets the action class name .
1060	Calculates the to index .
1061	Iterate a collection .
1062	Iterate an array .
1063	Replaces all occurrences of a string with another .
1064	Replaces a substring of a string with another .
1065	Replaces all substrings in string with the given array .
1066	Replaces first occurrence of string .
1067	Replaces first occurence of a string with another .
1068	Replaces last occurence of string .
1069	Replaces the last occurence of a char .
1070	Removes substring from string .
1071	Removes the specified character from the string .
1072	Returns true if all strings are empty .
1073	Check if all strings are blank .
1074	To string array .
1075	Changes the first character of the first character .
1076	Converts a string to title .
1077	Compress a string with a single character .
1078	Check if source string starts with given startIndex ignoring case .
1079	Checks if the string ends with the specified character .
1080	Counts the number of occurrences in the source string ignoring case .
1081	Compares two strings ignoring case .
1082	Returns the index of the first non - whitespace in the given string .
1083	Strip leading character from string .
1084	Strip a character from a string .
1085	Strip a character from a string .
1086	Strip the given character from the given string .
1087	Strip character from string .
1088	Crop all strings .
1089	Removes whitespace from the beginning of the string .
1090	Removes whitespace from the beginning of the string .
1091	Returns the index of the first occurrence of a substring within the left boundary .
1092	Join a collection of objects with a single character .
1093	Join array with separator .
1094	Convert charset to string .
1095	Checks if the specified char is equal to the specified character .
1096	Surrounds a string with the given prefix and suffix .
1097	Prefix string .
1098	Adds a string to a string .
1099	Cut the substring of the string .
1100	Cut string from string .
1101	Cut a prefix from a string .
1102	Cut suffix .
1103	Cut the string starting with the given prefix and suffix .
1104	Inserts a string into a string .
1105	Creates a string from a string .
1106	Reverses a string .
1107	Returns the longest common prefix of two strings .
1108	Find the common prefix of two strings .
1109	Shortcut to short string .
1110	Converts a string to uppercase .
1111	Removes leading and trailing quotes from a string .
1112	Convert byte array to hex string
1113	Convert a string to a byte array .
1114	Detect quote char .
1115	Visit a property .
1116	Visit an enum .
1117	Visits an annotation .
1118	Registers an entity type .
1119	Registers an entity .
1120	Remove an entity from the database .
1121	Creates an entity instance .
1122	Sets the target interface .
1123	Inject target field .
1124	Looks up all annotated properties of a given class .
1125	Detect database OOM .
1126	Closes the output stream .
1127	Writes a single byte to the output stream .
1128	Checks if the request is valid .
1129	Returns the name of the email .
1130	Serialize this object into a byte array .
1131	Write the data source to a file .
1132	Write the contents of the mail .
1133	Appends an argument to a string .
1134	Prepend a type to a string .
1135	Change return type .
1136	Sets the text of the element .
1137	Registers a type converter .
1138	Lookup a TypeConverter .
1139	Execute a query .
1140	Execute a collection of CSSSelectors
1141	Processes a list of selectors .
1142	Select first node matching the query .
1143	Walk all descendants recursively .
1144	Recursively walk the root node .
1145	Selects the given node and adds it to the result list .
1146	Filters the given CssSelector .
1147	Unpack c map .
1148	Refresh buffer .
1149	Gets a page .
1150	Remove the select .
1151	remove from FROM FROM clause
1152	Remove the last order by clause .
1153	Decode HTML .
1154	Detect entity name .
1155	Builds an ORDER BY clause .
1156	Builds a sql statement for a page .
1157	Resolve column names and properties .
1158	Find by column name .
1159	Find by property name .
1160	Returns the property name for the specified column .
1161	Returns the column name for the given property .
1162	Replies the value associated with the given object .
1163	Sets the id value of the given object .
1164	Returns the key value for the given object .
1165	Appends a string to the array .
1166	Sets the index to the new index .
1167	Expand the internal array .
1168	Calculates the length of the array .
1169	Creates a warning message .
1170	Creates a proxy bean .
1171	Do the loop .
1172	Initialize the cache .
1173	Checks if file is a file .
1174	Use a watch file .
1175	Start polling .
1176	Handles a change event .
1177	Adds an enumeration to the list .
1178	Compute the size of the field info .
1179	Puts the field information into the given byte vector .
1180	Creates a new target .
1181	Write property value .
1182	Processes the content of a page .
1183	Parses a page .
1184	Writes the content of the decora tag .
1185	Writes a region to a writer .
1186	Start the server .
1187	Run the given process .
1188	Create a store .
1189	Creates a gzipped response stream .
1190	Initializes the hint .
1191	Append alias .
1192	Append column name .
1193	Adds a new rule .
1194	Apply the given value to the given flag .
1195	Processes the included value .
1196	Processes the exclude value .
1197	Gets the pseudo class name .
1198	Adds all elements in the specified collection .
1199	Finds the index of the specified element .
1200	Bind an annotation config to an annotation type .
1201	Register a new action configuration .
1202	Lookup an ActionConfig by its type or annotation type .
1203	Provide a consumer with the given type and consumer .
1204	Sets system properties .
1205	Validates the given value .
1206	Find the last table element .
1207	Helper function to be called when a table is inserted .
1208	Registers session beans .
1209	Gets the session map .
1210	Initializes the proxy .
1211	Adds an advice init method .
1212	End the bundle .
1213	Add a property to the profile .
1214	Extracts profiles and adds them to the key list
1215	If the value of the given operator returns the result .
1216	Convert a typed type to a class name .
1217	Convert a type ref to a name .
1218	Convert a typed type to a signature .
1219	Returns a string representation of a type .
1220	Adds a list of consumers to this consumer .
1221	Creates a collection .
1222	Convert value to single element collection .
1223	Convert value to a collection
1224	Convert a collection to a collection .
1225	Convert a primitive array to a collection
1226	Adds the line number .
1227	Visit this label .
1228	Put a forward reference to the given byte vector .
1229	Add a forward reference .
1230	Resolve references to a bytecode .
1231	Mark all blocks belonging to this block .
1232	Add successors to a subroutine .
1233	Compare two digits .
1234	Fixes a character .
1235	Put a byte into this byte vector .
1236	Writes two byte arrays .
1237	Put a 16 - bit short .
1238	Writes a byte vector .
1239	Writes a byte vector .
1240	Put an int into the byte vector .
1241	Writes two byte arrays .
1242	Adds a 64 - bit integer to the current byte vector .
1243	Put a byte array into this ByteVector .
1244	Enlarges the array .
1245	Authenticate user via http session .
1246	Authenticate user via token .
1247	Authenticate user via basic auth .
1248	Finds the first matching key from the fallback bundle .
1249	Gets the resource bundle .
1250	Get the element from the array .
1251	Set entity id .
1252	Saves an entity in the database .
1253	Updates an entity .
1254	Update property .
1255	Updates an entity property .
1256	Find an entity by id .
1257	Find one entity by property .
1258	Finds a single entity .
1259	Deletes an entity from the database .
1260	Delete an entity .
1261	Returns the number of entities of the specified type .
1262	Increase a property by name
1263	Decreases a property .
1264	Returns a list of entities related to the given object
1265	Returns all entities of the specified type .
1266	Clears all attributes .
1267	Returns a set of entries .
1268	Associates the specified value with the specified key .
1269	Removes the value associated with the specified key .
1270	Get the current stack trace .
1271	Gets the stack trace .
1272	Gets the stack trace .
1273	Gets the exception chain .
1274	Returns the stack trace of the given exception .
1275	Convert exception chain to string .
1276	Builds the error message .
1277	Unwraps the given throwable .
1278	Register as consumer as consumer .
1279	Accepts the given component class .
1280	Returns the class loader .
1281	Gets the resource as a stream .
1282	Gets the resource as a stream .
1283	Gets an input stream for the given class .
1284	Gets the input stream as a stream .
1285	Creates a new route chunk .
1286	Find or create a child with the given value .
1287	Parse the request .
1288	Convert value to collection .
1289	Invokes the setter method .
1290	Sets the value at the specified index .
1291	Creates the bean property .
1292	Extract the type of a bean property .
1293	Stops the authentication session .
1294	Starts the authentication token .
1295	To date .
1296	To a Calendar object .
1297	Define proxy .
1298	Adds a check .
1299	Resolve validation context .
1300	Adds a list of properties to the specified class .
1301	Collects property annotation checks .
1302	Collect annotation checks .
1303	Copy the default check properties from an annotation .
1304	Encode the given string with the given encoding .
1305	Uri Encode a string .
1306	Encodes the given scheme .
1307	Encodes the given URI host .
1308	Encodes the given URI port .
1309	Encodes the given URI path .
1310	Encodes the given URI with the given encoding .
1311	Encodes a query parameter .
1312	Encodes the given fragment .
1313	Retrieves the properties of the class .
1314	Returns an array of all PropertyDescriptors .
1315	Gets the set of cookies .
1316	Sets the response body .
1317	Closes the connection .
1318	Checks whether the given reference scope should be accepted .
1319	Prints the list of routes .
1320	Encrypt a byte array .
1321	Decrypt a byte array .
1322	To bean .
1323	Convert a list to a bean type .
1324	Sets the value of the given property .
1325	Generates a map .
1326	Compares two column descriptors .
1327	Sets the default header .
1328	Sends an HTTP request .
1329	Send a request .
1330	Adds default headers .
1331	Read all cookies from the http response .
1332	Adds cookies to HttpRequest
1333	Sends an email .
1334	Sets the subject s subject .
1335	Sets the sent date .
1336	Sets the headers .
1337	Sets the person from email address .
1338	Set recipient addresses .
1339	Adds the body part of an email .
1340	Sets the content of an email .
1341	Creates an attachment body part .
1342	Returns the Content - Type header .
1343	Saves the result set .
1344	Close all registered ResultSets .
1345	Closes the query .
1346	Closes the query .
1347	Sets the fetch size .
1348	Sets the maximum number of rows allowed by this statement .
1349	Execute an update .
1350	Execute count .
1351	Returns a set of generated columns .
1352	Gets the query string .
1353	Create a proxy instance .
1354	Creates a collection from an iterator .
1355	Create a stream from the given iterator .
1356	Compares two comparators .
1357	Sets the default wiring mode .
1358	Prints a message and stack trace .
1359	Returns the name of the caller class .
1360	Shorten a class name .
1361	Exclude the given types .
1362	Serialize the given object to the given appendable .
1363	Serialize an object to a string .
1364	Clone the given object .
1365	Write an object to a file .
1366	Reads an object from a file .
1367	Convert an object to a byte array .
1368	Convert a byte array to an object .
1369	Resolve mapped types .
1370	Create table names for types .
1371	Reads the value of a column .
1372	Cache result set .
1373	Resolve provider definitions .
1374	Converts the given table name to entity name .
1375	Validates a connection .
1376	Renders a view .
1377	Locates target .
1378	Returns the output writer .
1379	Returns output stream .
1380	Write content to response .
1381	Sets the content type .
1382	Print string .
1383	Perform login via http request .
1384	Convert a token to a JsonResult .
1385	Login via BasicAuth
1386	Log out the current user .
1387	Convert url to container file .
1388	Creates a directory .
1389	Creates a directory .
1390	Copies a file .
1391	Copies a directory .
1392	Moves the given source file to the given destination directory .
1393	Moves a directory .
1394	Deletes a directory .
1395	Reads all UTF - 8 chars from the specified file .
1396	Reads the contents of a file .
1397	Write char array .
1398	Write string to a file .
1399	Appends a string to a file .
1400	Read bytes from a file .
1401	Write bytes to a file .
1402	Append bytes to a file .
1403	Copies a file or directory .
1404	Deletes a file .
1405	Creates a temporary directory .
1406	Checks if file is binary .
1407	Checks if a directory is identical .
1408	Checks if the given file is a valid file .
1409	Prints usage .
1410	Resolve a public method .
1411	Registers an action .
1412	Registers a path alias .
1413	Moves to the next iteration .
1414	Construct a char array from the specified char array .
1415	Executes the proxy .
1416	Matches an array of characters .
1417	Creates a char sequence .
1418	Returns an array of URLs for the given class .
1419	Set the bcc address .
1420	Registers a serializer for a given type .
1421	Looks up a serializer for the given type .
1422	Parse input stream .
1423	Gets the value of the specified parameter .
1424	Gets the value of the specified parameter .
1425	Gets the value of a file .
1426	Gets the uploaded files .
1427	Initialize this filter .
1428	Parse the template .
1429	Find macro end .
1430	Count the number of escapes in the given string .
1431	Build a query string from a multi - map .
1432	Parse a query string .
1433	Prepare header parameter name .
1434	Extracts the media type .
1435	Render the given node as HTML .
1436	Generates the inner HTML of the given node .
1437	Configures this servlet .
1438	Resets the internal state .
1439	Sets the parser .
1440	Replace the mapped type .
1441	Parse a string into a list of objects .
1442	Parses the given string as a Map .
1443	Resolve the given value .
1444	Skip an object .
1445	Parse a string .
1446	Parse string content .
1447	Parses a unicode character .
1448	Parse a string content .
1449	Parse a number .
1450	Parse an array value .
1451	Creates empty constructor .
1452	Creates a simple method wrapper .
1453	Resolve the raw type name .
1454	Resolve a reference from a property value .
1455	Resolve property names and references
1456	Read all references from annotation
1457	Build default bean references .
1458	Build default reference .
1459	Removes duplicate names .
1460	Converts an array of strings to references .
1461	Converts an annotation value to an array of beans .
1462	Runs the given consumer .
1463	Finds a method in a class .
1464	Finds a constructor matching the given parameter types .
1465	Resolve all interfaces of a class .
1466	Compare two parameters .
1467	Force access to the given object .
1468	Creates a new instance of the specified class .
1469	Get all superclasses of a given type .
1470	Returns the class of the given instance .
1471	Returns the jar file associated with the given class .
1472	Sleep for a given number of milliseconds .
1473	Sleep for the current thread
1474	Wait for an object .
1475	Creates a thread factory .
1476	Returns the next item .
1477	Visit a parameter .
1478	Visits an annotation .
1479	Visits a type annotation .
1480	Visit a parameter .
1481	Visits a field instruction .
1482	Visits a method instruction .
1483	Visits a INVokeDynamic instruction .
1484	Visits a jump instruction .
1485	Visits a multi - array instruction .
1486	Visits a try catch block .
1487	Visits a local variable annotation .
1488	Write properties to a writer .
1489	Process the input stream .
1490	Moves the next element in the list .
1491	Move to next element .
1492	Join arrays of arrays .
1493	Join arrays of arrays .
1494	Resize buffer .
1495	Append an element to the buffer .
1496	Removes the specified component from the specified buffer .
1497	Returns the index of the first occurrence of the specified value .
1498	Returns the index of the first occurrence of the specified value .
1499	Returns the index of the first occurrence of a byte array .
1500	Enable XHTML mode .
1501	Parse the content of a tag .
1502	Parse the tag .
1503	Compute max stack and local stack .
1504	Ends the current basic block .
1505	Collect attribute prototype .
1506	Inject target object .
1507	Registers a pseudo class .
1508	Looks up a pseudo class by its name .
1509	Invoke an action .
1510	Returns an array of all the property names of the given class .
1511	Resolve properties .
1512	Checks whether the given property matches the specified rule .
1513	Resolve method injection points .
1514	Reads parameters from a filter config .
1515	Sends a bundle file to the response .
1516	Looks up the file for the given bundle id .
1517	Find the gzip bundle file .
1518	Register a bundle .
1519	Create hash from source string .
1520	Creates a bundle file .
1521	Clears all bundle files .
1522	Fix relative urls .
1523	Update column .
1524	Creates table name .
1525	Gets a DB Transaction .
1526	Convert value to single element .
1527	Parses a signature .
1528	Resolve set injection points .
1529	Determine if the property type should be ignored .
1530	Opens the connection for the query .
1531	Open a transaction .
1532	Close the transaction .
1533	Commits a transaction .
1534	Rollback a transaction .
1535	Creates a new Properties instance from a file .
1536	Creates a new Properties object from a string .
1537	Load properties from a string .
1538	Returns a substring with the specified prefix .
1539	Creates a new Properties instance from the classpath .
1540	Gets a property from a map .
1541	Resolve all variables
1542	Resolve property .
1543	Resolve scope .
1544	Get transaction mode .
1545	Registers the given annotations .
1546	Read transaction annotation values .
1547	Processes a node .
1548	Matches an element .
1549	Processes the current selection .
1550	Unescapes characters .
1551	Build the JRE packages .
1552	Clone the node .
1553	Detaches this node from its parent .
1554	Adds child nodes .
1555	Inserts a new child node at the specified index .
1556	Inserts a new child before the specified ref .
1557	Inserts the specified child nodes before the specified ref .
1558	Inserts a new child node into this node .
1559	Inserts the specified child nodes into this node .
1560	Remove all child nodes .
1561	Find a child node with the given name .
1562	Get child nodes that match the given predicate .
1563	Checks if all child nodes are equal .
1564	Initializes the childElementNodes .
1565	Initialize the siblingNames index .
1566	Initialize childNodes .
1567	Change the owner document of the given node .
1568	Get the previous sibling name .
1569	Get the text content of this element .
1570	Get the HTML representation of this element .
1571	Get the inner HTML of the element .
1572	Visit all child nodes .
1573	Get CSS path .
1574	On decora tag .
1575	On id attribute start .
1576	Define a Decora tag .
1577	Adds a proxy aspect .
1578	Adds a mapping for a root package .
1579	Adds the root package of the given action class .
1580	Find the root package for the given action path .
1581	Resolve validation message .
1582	Remove duplicate names .
1583	Add a named properties file name pattern .
1584	Iterate over all targets .
1585	Iterate over all targets and in the given scope .
1586	Iterate through all targets and outbound points .
1587	Returns the values of the parameters .
1588	Create the targets for the given action and method parameters .
1589	Creates an action method argument .
1590	Handles a session creation event .
1591	Handles a session destruction event .
1592	Adds the given value to the end of the array .
1593	Adds all elements from a JsonArray .
1594	Removes the element at the given position .
1595	Resolve target value .
1596	Sends a response to the target .
1597	Convert value to string .
1598	Register an action filter .
1599	Gets the pseudo function name .
1600	Resolve property injection points .
1601	Creates a proxy socket .
1602	Returns the total attribute count .
1603	Gets the result set .
1604	Checks if c equals one character .
1605	Find the first occurrence of the given CharSequence .
1606	Find the first occurrence of the given char in the given array .
1607	Add command line arguments .
1608	Adds an environment variable .
1609	Run the process .
1610	Invoke a listener .
1611	Copy values from a Frame .
1612	Returns the abstract type for the given type .
1613	Get the abstract type from the descriptor .
1614	Set the input frame from an API frame .
1615	Gets the abstract type .
1616	Sets the local type .
1617	Adds an abstract type to the output stack .
1618	Pushes an abstract type .
1619	Removes elements from the output stack .
1620	Pops the stack from the given descriptor .
1621	Adds a new abstract type .
1622	Returns the initialized type for the given abstract type .
1623	Writes an abstract type .
1624	Removes expired entries from the cache .
1625	Schedules pruning tasks .
1626	Visit a module .
1627	Visit a nest host .
1628	Visit an outer class .
1629	Visits an annotation .
1630	Visit a name .
1631	Visit an inner class .
1632	Visits a field .
1633	Get the current thread session .
1634	Closes the current thread .
1635	Creates the execution array .
1636	Invokes the action method .
1637	Read request body .
1638	Calculates the index of the first page .
1639	Calculate index of first page .
1640	Returns true if the given value matches the criteria
1641	Convert char array to raw byte array .
1642	Find the first difference in the given index .
1643	Resolve node name .
1644	Resolves attribute name .
1645	Renders an attribute .
1646	Load properties from a file .
1647	Load properties from a file .
1648	Load props from an input stream .
1649	Load properties from a map .
1650	Load properties from a map .
1651	Load properties from classpath .
1652	Returns the value for the specified key .
1653	Sets a value for the specified key .
1654	Extract properties from a map
1655	Extract properties from target map
1656	Extract sub - props from target map
1657	Returns the inner map with the given prefix .
1658	Adds an inner map .
1659	Resolve active profiles .
1660	Get the names of all profiles
1661	Get all profiles for a given property key .
1662	Adds a property InjectionPoint .
1663	Adds a SetInjectionPoint to the set .
1664	Add a method InjectionPoint .
1665	Add init method points .
1666	Add destroy method points .
1667	Resolves the target class .
1668	Inject target object into a wrapper .
1669	Gets the target wrapper type .
1670	Finds a field by its name .
1671	Returns the type of the field .
1672	Returns the key component type .
1673	Returns the component type of the field .
1674	Creates a new JsonResult instance .
1675	Create a JsonResult from an exception .
1676	Resolve http method name .
1677	Returns true if string matches pattern .
1678	Resolves a class name .
1679	Resolve resource name .
1680	Attempts to load a class .
1681	Returns the URL of the specified resource .
1682	Wait for end .
1683	Detect annotation type .
1684	Build an InjectionPoint from an annotation value .
1685	Processes all transient properties .
1686	Returns the URLs of the specified class .
1687	Sets the bean .
1688	Update the bean .
1689	Loads the property descriptor .
1690	Returns the getter for the property .
1691	Returns the setter .
1692	Connect to OOM .
1693	Adds an iterator to the list .
1694	Prints the logo .
1695	Stop the joy .
1696	Creates a new socket .
1697	Create SSLSocket .
1698	Gets the default SSLSocketFactory .
1699	Returns the socket factory for the given proxy .
1700	Creates a random string .
1701	Creates a random string .
1702	Creates a random string from the specified ranges .
1703	Creates new array instance .
1704	Injects a value into an object .
1705	Convert value to target type .
1706	Visit a service .
1707	Creates a default type cache .
1708	Associates the given value with the given type .
1709	Returns all method descriptors .
1710	Resolve an IP address .
1711	Convert an IP address to an integer .
1712	Validate an IP address v4 .
1713	Returns the host name of an IP .
1714	Downloads bytes from a URL .
1715	Download string from url .
1716	Download file from url .
1717	Inject all targets .
1718	Invokes the outject .
1719	Connect to the specified host and port .
1720	Connect to the specified host and port .
1721	Gets the index of a primitive class .
1722	Loads a class .
1723	Load array class .
1724	Shutdown all registered beans .
1725	Returns a binary search .
1726	Returns a binary search for the given array .
1727	Exclude patterns .
1728	Specifies the specified include patterns .
1729	Includes all properties of the given template .
1730	Start this tag .
1731	Register a component
1732	Resolve column s SQL type .
1733	Preprocess SQL string .
1734	Create a ResultSetMapper .
1735	Find generated key .
1736	Populate entity with generated keys
1737	Creates a wrapper .
1738	Sets the bean .
1739	Sets a map of parameters .
1740	Set multiple objects .
1741	Inserts a chunk after this chunk .
1742	Lookup entity type .
1743	Find entity descriptor by column reference .
1744	Resolve table alias .
1745	Returns the class of the given object .
1746	Append whitespace .
1747	Returns an enumeration of file parameter names .
1748	Includes a page .
1749	Gets the servlet path .
1750	Returns the request URI .
1751	Resolve parameter names .
1752	Start the petite container
1753	Shutdown the petite container .
1754	Filter the subject subject .
1755	Method allow to filter emails .
1756	Filter from address .
1757	Method allow to find a to address .
1758	Add a cc address .
1759	Add bcc address .
1760	Method allow to filter emails .
1761	Add a flag to the email .
1762	Method allow to search for received date .
1763	Method allow to find sent date .
1764	Method allow to filter email address .
1765	Add a filter to the list of email filters .
1766	Add an OR filter to the list of email filters .
1767	Method allow to filter emails .
1768	Concatenate a search term .
1769	Encode a byte array .
1770	Convert value to byte array .
1771	Determines if gzip is eligible for the request .
1772	Validates the given target .
1773	Validate target .
1774	Enable the specified profile .
1775	Sets the enabled profiles .
1776	Matches the specified set of profiles .
1777	Parse the request body .
1778	Convert to milliseconds .
1779	Add the given JulianDate to this instance .
1780	Subtracts the given Julian date from this date .
1781	Set the integer value of an integer .
1782	Initializes the input .
1783	Emits a comment .
1784	Write an error .
1785	Creates a hash .
1786	Performs PBKDF2 .
1787	Convert hex string to byte array .
1788	Resolve provider definitions .
1789	Sets the name of the attachment .
1790	Sets the content id from the name of the file .
1791	Resolve content type .
1792	Parse a type signature .
1793	Compute the size of the module .
1794	Put module attributes .
1795	Decode a string .
1796	Decode a query string .
1797	Start the database .
1798	Check connection provider .
1799	Visit a method .
1800	Visits all super classes and interfaces .
1801	Create a Method signature .
1802	Convert array of objects to CSV string
1803	To string array .
1804	Resolve ctor .
1805	Creates a class reader .
1806	Gets a cached class reader .
1807	Encrypt a string .
1808	Decrypt a string
1809	Gets a logger .
1810	Set cookie name .
1811	Create an action request .
1812	Creates a wrapper .
1813	Destroy bean .
1814	Shutdown all registered beans .
1815	Returns an array of all messages in the mailbox .
1816	Launch the ClusteredService .
1817	Runs the report .
1818	Prints an error message .
1819	Print rate .
1820	Creates a mapped byte buffer .
1821	Closes the replay .
1822	Wait for the current state to complete .
1823	Returns the current position .
1824	Inserts a vector into the buffer .
1825	Append padding for the given length .
1826	Closes the archive .
1827	Checks for error response .
1828	Stops a replay .
1829	Event about an available image .
1830	Event when an unavailable image is unavailable .
1831	Create a new status indicator reader .
1832	Create a status indicator reader .
1833	Sets the buffer s limit .
1834	Appends a range to the buffer .
1835	Starts polling .
1836	Creates a mapped byte buffer with the specified size .
1837	Creates a snapshot of the current counters .
1838	Creates an unsafe header .
1839	Set key buffer .
1840	Creates a buffer for this counter .
1841	Connect to the Aeron server .
1842	Try to connect to the buffer .
1843	Send close session .
1844	Starts broadcasting .
1845	Stop broadcasting .
1846	Queues a replay request .
1847	Stops the replay .
1848	Sends a list of recordings to the buffer .
1849	Queues up a list of recordings for a given URI .
1850	Send a list recording request .
1851	Enqueue recording .
1852	Gets the recording position .
1853	Send stop position request .
1854	Sends a list of subscriptions to the server .
1855	Returns true if the given udp channel matches the tag .
1856	Returns the destination address of the given channel URI .
1857	Description of this instance .
1858	Adds a transport transport to the list .
1859	Inserts a new packet .
1860	Find a control toggle .
1861	Put a parameter .
1862	Gets the channel tag .
1863	Gets the entity tag .
1864	Adds session id to channel .
1865	Parses the tag value .
1866	Append padding to the term .
1867	Updates the publisher limit .
1868	Allocates a counter .
1869	Returns the label name for the given type id .
1870	Scans the buffer for available padding .
1871	Resets the builder .
1872	Validates the builder .
1873	Sets the prefix .
1874	Sets the media .
1875	Set control mode .
1876	Sets the term length .
1877	Sets the term offset .
1878	Sets the linger timeout .
1879	Opens datagram channel .
1880	Closes the channel .
1881	Checks whether the given buffer is valid .
1882	Receives data from the receiver .
1883	Creates a retransmit action .
1884	Process timeouts .
1885	Display the string representation of the given status .
1886	Allocates a counter .
1887	Resets the vector .
1888	Validates this buffer .
1889	Validates the length of the array .
1890	Calculates the producer window length .
1891	Verifies that the desired socket buffers are valid .
1892	Validates the given page size .
1893	Validates the session id range .
1894	Validates the timeout .
1895	Sets the error code .
1896	Resets the state .
1897	Encode cluster members .
1898	Adds a member status to the given array of members .
1899	Close all member publications .
1900	Checks if a cluster has active quorum .
1901	Returns the ranked position of the cluster members .
1902	Resets the log positions of all members .
1903	Checks if the given position is reachable .
1904	Returns true if all of the members have a vote on the full count .
1905	Checks if the given cluster members have the majority vote .
1906	Determine a member from a list of members .
1907	Validates the members of a member .
1908	Returns true if two clusters are the same .
1909	Checks to see if one of the cluster members are compatible .
1910	Checks if the given candidate is a quorum candidate .
1911	Returns true if the endpoints are not duplicated .
1912	Returns the index of a member with the given id .
1913	Remove a member from old members .
1914	Returns the highest id of the cluster members .
1915	Map CNC CNC CNC file .
1916	Check if the engine is active .
1917	Check if driver is active .
1918	Check if cn file is active .
1919	Request to terminate a CNC file .
1920	Returns the length of a frame in a buffer .
1921	Writes a frame length in a buffer .
1922	Writes a frame type .
1923	Writes the given flags to the given buffer .
1924	Adds a frame term to the buffer .
1925	Write a frame term id .
1926	Find counter id by recording id .
1927	Find counter id by session id .
1928	Gets recording id .
1929	Check if counter is active .
1930	Write an application - specific message .
1931	Removes all entries from the file .
1932	Finds the last term .
1933	Creates a plan that can be used by the Aeron archive .
1934	Creates a recovery plan .
1935	Adds a new entry to the cluster .
1936	Append a snapshot entry .
1937	Updates the log position .
1938	Write a tombstone entry .
1939	Closes the connection .
1940	Inserts the given vectors into the queue .
1941	Unblock a blocking term .
1942	Returns the channel s channel .
1943	Set the channel .
1944	Checks the validity of the given term .
1945	Validates the given page size .
1946	Sets the active term count .
1947	Compute the position of the term .
1948	Compute log length .
1949	Stores the default frame header .
1950	Applies the default header .
1951	Rotate log .
1952	Initialises the tail with the given partition index .
1953	Compute the term offset from the raw length .
1954	Returns the long tail of the segment .
1955	Sets the raw tail value for the given partition .
1956	Create token buffer .
1957	Allocates a counter .
1958	Find a counter id .
1959	Determines if a counter has a replay .
1960	Gets the snapshot recording recording id .
1961	Convert a short to a char array .
1962	Set the channel .
1963	Offer a buffer to the cluster .
1964	Wrap a buffer .
1965	Commits the frame length .
1966	Aborts the current frame .
1967	Starts the media driver .
1968	Close the runner .
1969	Returns the current position .
1970	Allocates a counter .
1971	Find a counter id .
1972	Creates a snapshot of the current counters .
1973	Allocates a counter .
1974	Closes this connection .
1975	Dispatches a recording descriptor .
1976	Adds a new slab to the pool .
1977	Sets the byte at the given index .
1978	Adds statistics .
1979	Calculates row ranges .
1980	Create a new group type .
1981	Convert a struct type to a struct type .
1982	Annotate a message .
1983	End the next bit packed run .
1984	Reads a single structure .
1985	Reads all footers from a file .
1986	Read all footers from a summary file .
1987	Read the footer of a file .
1988	Read the next row group .
1989	Read the next row group .
1990	Read dictionary .
1991	Adds a new writer to the parquet .
1992	Remove a writer .
1993	Update total allocation .
1994	Registers a new callbacks .
1995	Starts the stream .
1996	Starts a new block .
1997	Start a new column .
1998	Writes a dictionary page .
1999	Write data page .
2000	Writes a chunk of data .
2001	Terminates a block .
2002	Copies a range of bytes from a stream to another .
2003	Writes the end of the file .
2004	Merge a list of metadata files .
2005	Merge a list of metadata files .
2006	Writes a metadata file to the specified output path .
2007	Merge the given metadata into the global metadata .
2008	Reads the value from the column .
2009	Determine if the given Schema is a NULL value
2010	Returns the first non null object or null if none .
2011	Returns the value of the given string .
2012	Create a ThriftMetaData from the extraMetaData map
2013	Convert thrift class to ThriftMetaData
2014	Returns the extra meta data .
2015	Writes a null value .
2016	Write a single page .
2017	Initializes this instance .
2018	Allocates the values buffer .
2019	Checks the index of an enum .
2020	Calculates bit widths for delta block buffer .
2021	Throws an exception if the given exception is of the given type .
2022	Gets statistics based on the given type .
2023	Returns a builder for the given primitive type .
2024	Merge statistics into this object .
2025	Get non - null value
2026	Creates a new TaskAttemptContext instance .
2027	Invoke a method .
2028	Write the members of this class .
2029	Merge all fields from this group to another .
2030	Initialize counter from reporter .
2031	Get a RecordFilter instance
2032	Get all footers in parallel .
2033	Generates a list of Parquet splits .
2034	Writes a single record .
2035	Validates the field index against the parquet schema .
2036	Serialize a proto class .
2037	Creates a direct codec factory .
2038	Makes sure that all required fields are missing .
2039	Check a set .
2040	Read file meta data from input stream .
2041	Closes the output stream .
2042	Set the schema for the job .
2043	Adds a ParquetTypeName to Parquet .
2044	Asserts that a column is valid .
2045	Checks if the given long is an int .
2046	Creates a ParquetMapping from an arrow schema .
2047	Creates a schema mapping from ParquetSchema .
2048	Creates a schema mapping between the arrow schema and parquet schemas .
2049	Write header to an output stream .
2050	Skips all records that match the current record .
2051	Write an object to a configuration .
2052	Removes the value from the cache .
2053	Adds a new value to the cache .
2054	Returns the current value associated with the specified key .
2055	Writes the given value to the given schema .
2056	Write value without conversion .
2057	Sets the regular expression .
2058	Output string to console .
2059	Open input stream
2060	Creates an unbound record filter .
2061	Convert a StructType to a ThriftSchema
2062	Create a list type .
2063	Creates a type for a list of elements .
2064	Gets the merged key value metadata .
2065	Get a Parquet input split .
2066	Gets fields by name .
2067	Resolve schema access to requested schema
2068	Parse input files .
2069	Checks that all parquet files are valid .
2070	Get input files from directory .
2071	Returns an unbound record filter .
2072	Returns a list consumer that delegates to the given consumer .
2073	Initialize the map .
2074	merge all tuples
2075	Sum up all tuples .
2076	Read a struct
2077	Read a map entry .
2078	Write an integer .
2079	Read an integer in little - endian byte order .
2080	Sets the Avro schema for the job .
2081	Create a stream if it doesn t exist .
2082	Create duplicate stages .
2083	Creates a stage .
2084	Create interceptors .
2085	Create interceptor .
2086	Parse Avro schema .
2087	Convert milliseconds to days .
2088	Retrieves the Avro schema from a record .
2089	Convert v1 to v2 .
2090	Returns the length of the string .
2091	Copy blobstore resources
2092	Resets all columns .
2093	Creates a thread health report .
2094	Registers a new thread health report .
2095	Stores control hub configs .
2096	Check if the given webCredential matches the given webCredential .
2097	Checks if the given stage needs upgrade .
2098	Upgrade the given stage .
2099	Upgrades a stage .
2100	Upgrades the services if needed .
2101	Upgrade stage .
2102	Gets the fields to null .
2103	Checks if the given name is a system class .
2104	Adds the specified element to the list .
2105	Adds an element to the list .
2106	Returns the value associated with the given key or the default value if the key is not present .
2107	Adds reported errors .
2108	Get a descriptor from a file .
2109	Get all file descriptors from given set .
2110	Populate default values and extensions map .
2111	Returns the descriptor for the given message type .
2112	Convert protobuf to sdc field .
2113	Creates a protobuf message from a record .
2114	Create a protobuf message .
2115	Convert a list of configs to Jersey versions .
2116	Check connection .
2117	Convert to field type .
2118	Create field .
2119	Intercept all records .
2120	Gets the text .
2121	Add missing configs to stage .
2122	Parses the response .
2123	Adds response headers to record .
2124	Write response header to record .
2125	Write response header to record .
2126	Save metadata .
2127	Configure the client .
2128	Parse the response headers .
2129	Increment the source offset by the given increment .
2130	Parses a paginated result .
2131	Add headers to a record .
2132	Resolve headers .
2133	Processes the response .
2134	Determines if a property has been defined .
2135	Convert a DataParserException to a DataParserException .
2136	Convert a DataGeneratorException to a DataGeneratorException .
2137	Reads credentials file .
2138	Get preview of a pipeline
2139	Copy characters to the buffer .
2140	Remove duplicate duplicates .
2141	Empty batch .
2142	Find the next main line .
2143	Resolve the source file chunk .
2144	Closes the current connection .
2145	Escapes quoted substrings .
2146	Create flow control settings .
2147	Returns the default channel provider .
2148	Put a batch into the consumer .
2149	Compiles the given string into a Grok instance .
2150	replace the regular expression in the original expression
2151	Adds a dictionary from an input stream .
2152	Adds a dictionary from a Reader .
2153	Stop all aggregators .
2154	Rolls all aggregators .
2155	Serialize an object
2156	Deserialize a string to an object .
2157	Deserialize an object from a file .
2158	Checks whether the given record exists .
2159	Evaluates an EL expression and returns the result .
2160	Generate inner field from list .
2161	Get table name from metadata record
2162	Get the database name from a metadata record .
2163	Get the internal field value
2164	Get the location from the metadata record
2165	Get custom location from metadata .
2166	Extract Avro schema from metadata .
2167	Get data format from metadata record
2168	Create a new Avro schema metadata field builder .
2169	Validate partition information
2170	Generates a partition path from the given partitions .
2171	Serialize Avro schema to Hdfs .
2172	Sets the parameters .
2173	Get configuration
2174	Parse a string representing a time stamp .
2175	Format a string with arguments .
2176	Start batch .
2177	Checks if record contains Solr fields .
2178	Filters field names .
2179	Send onRecordErrorException to handler .
2180	Parses a jar name .
2181	Parses the URL from the given URL .
2182	Create a singleton instance .
2183	Closes the client .
2184	Validate Couchbase configuration .
2185	Converts a string code to a label string .
2186	Verify that a dependency exists .
2187	Retrieves a value from a vault .
2188	Retrieves the operation type from the header .
2189	Writes document .
2190	Build a document mutation .
2191	Generate an SQL string for an alter table .
2192	Configure the SASL authentication .
2193	Take messages from the consumer .
2194	Commits the given offset .
2195	Notify the consumer .
2196	Injects a stage .
2197	Get a list of definitions
2198	Gets the publisher definition .
2199	Format the column name .
2200	Format the given value .
2201	Get pipeline configuration
2202	Create a new pipeline fragment
2203	Get pipeline info
2204	Create a new Pipeline FragmentEnvelope
2205	Resolves the directory path .
2206	Retrieves the operation from a record .
2207	Get the field path for the given column
2208	Retrieves an enriched event from the pipeline .
2209	Returns the next runner from the queue .
2210	Gets the next idle runner .
2211	Adds a runner to the queue .
2212	Destroy the container .
2213	Validates not destroyed .
2214	Checks if the specified stream exists .
2215	Returns the last shard id of the given stream .
2216	Process a queue .
2217	This method is called when a SQL exception is thrown .
2218	Calculates the hash for a record
2219	Compare two files .
2220	Retrieves the PID of a process .
2221	Validate fields to hash .
2222	If the given user has a proxy user return the corresponding UserGroupInformation .
2223	Roll rollback stats .
2224	Creates a snapshot of the statistics .
2225	Ensures that the directory does not exist .
2226	Writes all records in batch .
2227	Writes all records in a batch .
2228	Writes all records in the specified record iterator .
2229	Triggers no more data event .
2230	Detect a new partition
2231	Update record for HDFS
2232	Processes a single group .
2233	Checks if two stages are the same .
2234	Main method for testing
2235	Configure auth and build client .
2236	Resolve headers .
2237	Get HttpMethod .
2238	Fill the bindings with null values .
2239	Gets the value of a field .
2240	Load schema from registry .
2241	Registers a schema .
2242	Load schema from schema registry .
2243	Gets the schema id for the given subject .
2244	Load schema from schema registry .
2245	Write schema id .
2246	Detect schema id .
2247	Get default values from schema
2248	Parses a message .
2249	Logs the details of the report .
2250	Gets bad records .
2251	Initializes the generator .
2252	Gets the outward edge vertices for the given vertex .
2253	Gets the directed edge vertices for the given vertex .
2254	Serialize a map
2255	Deserialize an offset map
2256	Queues a report to the server .
2257	Get report .
2258	Check if SDC checkpoint exists
2259	Write the offsets to the main offset file .
2260	Deletes the given blob .
2261	Handles an error .
2262	Handles the archive .
2263	Gets the reader .
2264	Release a reader .
2265	Sets the DPM base URL .
2266	Adds a default header .
2267	Parses a date .
2268	Encode a string
2269	Get client .
2270	Initialize a connection .
2271	Get the table metadata .
2272	Create bulkIner .
2273	Create a new event builder .
2274	Builds a schema from a schema .
2275	Converts the given string to an operation type .
2276	Add jars to the job .
2277	Add jars to the job .
2278	Check field order by list .
2279	Check if the given field name matches the given field name .
2280	Gets the offset lag for a file .
2281	An instrumentation method .
2282	Gets the parallelism .
2283	Runs a query .
2284	Convert a list of fields to a Map .
2285	Get the table description
2286	Validates that the table accepts inserts .
2287	Get the type of the column
2288	Checks if a field is nullable
2289	Get the schema of a table
2290	Get the column properties
2291	Returns the class corresponding to the given type .
2292	Initializes Aerospike client .
2293	Determines the topic .
2294	Upgrades v5 to v6 .
2295	Returns an input stream .
2296	Returns an output stream .
2297	Checks if the file exists .
2298	Parses a string of FsPermission string .
2299	Check that all services are available .
2300	Creates an aggregator .
2301	Gets the aggregator unit .
2302	Create aggregator data .
2303	Creates a new aggregator .
2304	Starts the window .
2305	Stops the aggregator .
2306	Rolls all aggregators .
2307	Acquires a login manager .
2308	Release the login manager .
2309	Convert a glob pattern to a regular expression .
2310	List all objects in S3 .
2311	Stop the snapshot .
2312	Determines the number of pipes that are available for any active runners .
2313	Create failure snapshot .
2314	Convert a record to a bound statement .
2315	Sets the configuration from the given map .
2316	Generate lookup key .
2317	Handles partitioning mode .
2318	Reads a line into a StringBuilder .
2319	Rolls a usage timer .
2320	Enable DPM .
2321	Use DPM to disable DPM .
2322	Normalize DPM base URL .
2323	Retrieve user token from DPM .
2324	Logout the user
2325	Update app auth token file .
2326	Updates dpm properties .
2327	Returns the schema field for the given field .
2328	Returns the schema for the given field .
2329	Retrieves the decimal scale or the given default value .
2330	Returns the default value for the given schema .
2331	Initialize metrics .
2332	Compares two files .
2333	Get group index of group
2334	Get the list of group names .
2335	Returns true if the given string is escaped .
2336	Returns true if the given pos is a slash .
2337	Checks if a character is inside a character class .
2338	Count the number of open parens in a string .
2339	Extract group info from named pattern .
2340	Replaces all occurrences of a regular expression .
2341	Handles a GET request .
2342	Refreshes the schema .
2343	Returns true if transaction expired .
2344	Get offset .
2345	Fast forward .
2346	Returns empty stage .
2347	Convert a string to a number .
2348	Parses a single message part .
2349	Parses the record values .
2350	Lookup primary keys .
2351	Creates custom field mappings .
2352	Get SQL type name .
2353	Returns the table name .
2354	Sets the primary keys .
2355	Handles SQLException .
2356	This method is called by the pipeline .
2357	Prepares a batch context .
2358	Finish the pipeline .
2359	Flattens the entire record .
2360	Create a new stage runtime .
2361	Execute onRecordError .
2362	Gets columns to parameters .
2363	Returns the condition for the partition .
2364	Validates the given offset .
2365	Gets the list of bundle content generators .
2366	Gets non empty arguments .
2367	Gets the operation .
2368	Convert bytes to human readable format .
2369	Scans a live file .
2370	Get the number of files that match the given live file .
2371	Checks if the specified name is whitelisted .
2372	Returns true if expected versions match .
2373	Main method for testing .
2374	Propagate runtime configuration .
2375	Validates the report description .
2376	Creates a new JdbcRecordWriter .
2377	Creates a new JdbcRecordWriter .
2378	Upgrade configs to v1 .
2379	Extract named groups from raw data .
2380	Queues a commit to the consumer .
2381	Creates an embedded SDC .
2382	Sets the fields in a record .
2383	Gets the list of all pipelines that have changed .
2384	Creates ack from a future .
2385	Creates a gauge .
2386	Gets the columns to parameters .
2387	Generate header attributes .
2388	Validate the record .
2389	Remove old parquet file .
2390	Get an input stream from a record .
2391	Get a file reader .
2392	Read Parquet file .
2393	Checks input field .
2394	Checks input field .
2395	Check input field input .
2396	Checks input field input .
2397	Encrypt field .
2398	Sets the parent pattern .
2399	Append a replacement to a StringBuffer .
2400	Returns a map of all matched groups .
2401	Replaces all properties with the given replacement string .
2402	Ensures that AvroSchema exists in configs .
2403	Returns the value of a global variable .
2404	Creates start event record .
2405	Creates a stop event .
2406	Fix offset .
2407	Extract value from string
2408	Execute an alter table .
2409	Execute an alter table .
2410	Describe database .
2411	Executes the given query .
2412	Execute the given query
2413	Execute pipeline .
2414	Iterate through all pipelines .
2415	Gets the offset commit trigger .
2416	Checks to see if the pipeline should be stopped .
2417	Accepts a consumer .
2418	Evaluate the insert id for a record .
2419	Gets the value of the field .
2420	Sets the given fragment in record .
2421	Sets the given document in record .
2422	Sets the n1QL query row in record .
2423	Handles an S3 file data format .
2424	Returns true if incomplete transactions are in incomplete transactions .
2425	Helper method to set the context class loader .
2426	Sets the name creator for the stage .
2427	Logout the user .
2428	Sets the exceptions .
2429	Replace variables in the path .
2430	Ensures that the classloader is allowed to be performed .
2431	Main method for testing .
2432	Returns the directory path for the given record .
2433	Renames path to final path .
2434	Check if record should be rolled .
2435	Matches the given string against the given pattern .
2436	Gets the file offsets .
2437	Get remaining wait time .
2438	Gets the offsets of the file context .
2439	Creates and initializes the stage .
2440	Create a new stage delegate .
2441	Creates a stage instance .
2442	Gets the value of a metric .
2443	Find header end .
2444	Gets the body size .
2445	Save a byte buffer to a temp file
2446	Create a new SSLServerSocketFactory using the specified key and passphrase .
2447	Returns the mime type for a file .
2448	Handle interceptors .
2449	Stop all connections .
2450	Adds the default routes .
2451	Send response to given output stream .
2452	Send the request body to the given output stream .
2453	Creates a new response .
2454	Determines if the MIME type should be used .
2455	Sets a cookie .
2456	Unload all cookies in the response .
2457	Decode the given base64 value .
2458	Encode a String value
2459	Sets the table name .
2460	Returns the name of the principal .
2461	Registers a session repository filter .
2462	Resolve principal name from session
2463	Get session by id .
2464	Get the JNDI name from the model .
2465	Returns the canonical name of the given view method .
2466	Register a new Synchronization .
2467	Called when the list of Synchronization has been completed .
2468	Get the current transaction
2469	This method is called from the deployment unit tests
2470	Checks if the cache region name matches the cache region .
2471	Read the list of service config dependencies .
2472	Decrement the read lock count
2473	Increment the read lock count
2474	Add a service .
2475	This method is used to perform the maintenance calculation .
2476	Add search dependencies .
2477	Make the top level bdas visible from the root .
2478	Creates the metadata for a POJO web .
2479	Sets the config name and file .
2480	Gets the list of security meta data .
2481	Gets the servlet url patterns .
2482	Get the servlet class name mapping
2483	Resolve the binding .
2484	Get the names of available connections .
2485	Parses the core environment element .
2486	Parse the process id environment element .
2487	Returns the path address of the given operation .
2488	Sets the path address of the operation .
2489	Returns the value of an attribute .
2490	Returns true if the given operation should be excluded .
2491	Creates a composite operation .
2492	Creates an operation with the given parameters .
2493	Creates an operation with the given address and index .
2494	Creates a read attribute operation .
2495	Creates a write - attribute operation .
2496	Creates an undefine operation .
2497	Replies the context .
2498	Registers a factory for the given scheme scheme .
2499	Removes a factory for a given scheme .
2500	Loads multiple providers .
2501	Modify the deployment .
2502	Configures the WSFervlets .
2503	Modifies the context root .
2504	Gets the transport class name .
2505	Set the run as identity .
2506	Pop the run as identity .
2507	Process the servlets .
2508	Injects a property with the given name and value
2509	Returns true if the argument type matches the specified class and property type .
2510	Finds a method with the given name and property type .
2511	Finds the field with the given name and type .
2512	Initialize the options .
2513	Recursively derive a string from the given HttpServletRequest .
2514	Run Jdr report .
2515	Collect Jdr report .
2516	Registers a resource adapter deployment
2517	Unregisters a resource adapter deployment .
2518	Registers necessary transformations for the given subsystem .
2519	Writes the parameters to an output stream .
2520	Read exception .
2521	Returns the lock owner .
2522	Release the lock .
2523	Add a log
2524	Adds a CDI extension to the deployment unit .
2525	Gets the component view .
2526	Invoke the given endpoint .
2527	Returns the view method that matches the specified SEI method .
2528	Returns true if the specified method matches the specified view method .
2529	Create management statistics resource .
2530	Returns the EJB security meta data for the specified endpoint .
2531	Determines the old security domain .
2532	Ensures that the two security domains are identical .
2533	Sets the IDL name .
2534	Gets the absolute path .
2535	Creates a new JNDiName from the given string .
2536	Process xml
2537	Handles the request .
2538	Returns true if the current transaction is in a transaction .
2539	Get the transaction synchronization registry .
2540	Get the connection factory .
2541	Gets the last component of a name .
2542	Returns true if the given name is empty .
2543	Creates a NameNotFoundException .
2544	Creates a new naming exception with the specified message and cause .
2545	Create a new NamingException with the given message and cause .
2546	Creates a CannotProceedException with the given name and name .
2547	Creates a naming enumeration .
2548	Recursively binds the specified name to the specified value .
2549	Gets the activeMQ component control .
2550	Parse connection attributes .
2551	Creates a component instance .
2552	Gets the virtual file root .
2553	Resolve runtime name .
2554	Creates a builder for a listener .
2555	Get a primitive analysis .
2556	Gracefully shutdown the thread .
2557	Gets url patterns .
2558	Get the servlets metadata .
2559	Gets the servlet mappings .
2560	Get the list of security constraints from the given JBossWebMetaData .
2561	Gets the login config metadata .
2562	Retrieves the current context parameters .
2563	Get the WebResourceCollectionsMetaData object .
2564	Gets the init param list .
2565	New security constraint metadata .
2566	New web resource collection metadata .
2567	Creates a new JBossServletMetaData .
2568	New servlet mapping metadata .
2569	New auth constraint metadata .
2570	Create a new UserDataConstraintMetaData .
2571	New param value meta data .
2572	Creates a new ParamValueMetaData object .
2573	Register interceptors for SFSB .
2574	Process the injection targets .
2575	Stop the container .
2576	Get the JNDI name from the model .
2577	Resolve an attribute .
2578	Gets the pattern type .
2579	Determine if a pooled connection factory is managed by the server .
2580	Is external pooled connection factory .
2581	Gets the activeMQ server name .
2582	Returns the default persistence unit name if any .
2583	Registers the activity .
2584	Unregister the activity .
2585	Called when the activity is suspended .
2586	Resume the server .
2587	Called when an invocation has completed .
2588	Called when a transaction is created .
2589	Binds the resource to the naming store .
2590	Unbound controller .
2591	Returns the service name for the given capability .
2592	Create the list of resources for the deployment .
2593	Get all class loaders from the deployment unit .
2594	Returns true if the persistence unit file needs to be transformed .
2595	Determines whether or not the given persistence unit is allowed .
2596	Determines whether the default data source should be used .
2597	Determines whether or not the specified entity manager should be skipped .
2598	Creates an ORB with the given parameters .
2599	Initializes an applet .
2600	Initialize the connect method handles
2601	Sets the active naming store .
2602	Validate default values
2603	Check parameter type .
2604	Look up a default value annotation .
2605	Validate base type .
2606	Returns an array of all registered entity managers .
2607	Returns the string representation of the given transaction status .
2608	Add cache dependencies for a given cache type .
2609	Extract dialects .
2610	Determines the JDBC dialect .
2611	Identify dialect .
2612	Checks if the database is configured .
2613	Converts a string to a date .
2614	Sets the node name .
2615	Mark deployment unit .
2616	Read parameters from input stream .
2617	Writes a retval .
2618	Writes an exception to an output stream .
2619	Performs a lookup .
2620	Begin a new SFSB .
2621	Ends the execution stack .
2622	Get the current SFS call stack invocation .
2623	Push the current SFS call stack .
2624	Pops the current SFS call stack .
2625	Returns the current call .
2626	Add dependencies .
2627	Process managed beans .
2628	Process phase listeners .
2629	Get type IDL name .
2630	Insert primitive values into an Any object
2631	Convert Java IDL identifier to IDL .
2632	Returns true if the string is a reserved IDL keyword .
2633	Returns the signature for the given class .
2634	Returns the signature of a method .
2635	Returns the name of a primitive type .
2636	Get BatchPermission by name .
2637	Gets or creates the transaction scoped entity manager .
2638	Associates the specified value with the specified key .
2639	Convert a security role to a model .
2640	Returns the most recent transaction version of the given timer .
2641	Retrieve the timers associated with a timed object .
2642	Get the directory for the given timed object id .
2643	Adds a new listener to the specified target .
2644	Remove a listener .
2645	Fires an event .
2646	Closes the value .
2647	Adds a private credential to the given subject .
2648	Gets the object instance .
2649	Add tx management interceptor for a view .
2650	Substitute a substring of a string .
2651	Create a transport configuration .
2652	Adds an EAR prefix to the deployment unit .
2653	Gets the root deployment unit .
2654	Gets the service name .
2655	Creates a view configuration object .
2656	Create an InjectionSource .
2657	Get view interceptors for given method .
2658	Adds view interceptor to all registered methods .
2659	Adds a view interceptor to the given method .
2660	Returns the client interceptors for a given method .
2661	Adds a client interceptor to the given interceptorFactory .
2662	Adds a client interceptor to the given method .
2663	Put private data .
2664	Throws an exception .
2665	Returns the list of JAXB Endpoints associated with a deployment .
2666	Gets a list of POJO endpoints from a deployment unit .
2667	Gets the endpoint name .
2668	Gets the endpoint class name .
2669	Returns the servlet metadata for the given name .
2670	Returns the required attachment .
2671	Gets an optional attachment .
2672	Gets the JBossWebMetaData from a deployment unit .
2673	Retrieves the JBoss WebserviceMetaData for the given name .
2674	Get the EJB endpoint metadata from the given class name .
2675	Determines the context root of a deployment .
2676	Returns the class for the given name .
2677	Returns the URL of the given name .
2678	Returns all resources with the given name .
2679	Returns the resources associated with the specified path .
2680	Pops the current call stack .
2681	Get the entity manager with the given name .
2682	Register after completion .
2683	Process the deployment .
2684	Update server configuration .
2685	Check if all public fields are public .
2686	Creates a new HTTP endpoint .
2687	Creates a new deployment model .
2688	Determines if the deployment unit is a JAXRS deployment .
2689	Set the next timeout .
2690	Sets the timer state .
2691	Merge deployment data .
2692	Add module dependencies
2693	Add the dependencies for a remote transaction .
2694	Returns all container interceptors .
2695	Checks if the specified method is a specific method level .
2696	Checks that two elements are required .
2697	Returns the type for the given string .
2698	Gets the component type .
2699	Returns a resource definition for the keystore .
2700	Returns the resource definition for the key manager .
2701	Returns a resource definition for the trust manager .
2702	Parses a name .
2703	Convert a string into a vector of string components .
2704	Parse a name component .
2705	Deactivates the IR object .
2706	Convert a servant to a reference .
2707	Authenticate the given username and password .
2708	Check if class matches type
2709	Lookup a binding by name .
2710	Unbinds the specified JNDI name .
2711	Instantiates the specified bean .
2712	Configures the specified bean .
2713	Dispatches a lifecycle join .
2714	Returns the current namespace context selector .
2715	Convert a bean name to a bean name .
2716	Convert a class to an instance name .
2717	Replies the class with the given name .
2718	Processes the deployment unit .
2719	This method is called after the persistence unit has been processed .
2720	Validates a string .
2721	Creates the deployment .
2722	Create the web application descriptor .
2723	Get the authentication method from the deployment .
2724	Processes the deployment root .
2725	Handles a stateless session bean .
2726	Creates a stub class .
2727	Returns a byte array id for an anonymous object .
2728	get PersistenceProvider list
2729	Clear the cache of deployment specific providers
2730	Adds a persistence provider to the deployment list .
2731	Find the parent classloader of the given class .
2732	Add dependencies to the deployment .
2733	Add persistence units to the deployment unit
2734	Sets the annotation indexes on the deployment unit .
2735	Gets the persistenceProviderAdaptor .
2736	Save shared persistence provider adaptor .
2737	Looks up the provider for the given deployment .
2738	Gets the annotations associated with the given uris .
2739	Build the EJB archive meta data .
2740	Build the bean meta data .
2741	Adds participants to the repository .
2742	Get container analysis .
2743	Lookup done for given class .
2744	Creates a new WorkInProgress instance .
2745	Gets the IDL module name .
2746	Convert an integer to a hex string .
2747	Convert a long to a hexadecimal string .
2748	Returns true if the given method is an accessor .
2749	Returns true if the given method is a mutator .
2750	returns true if the method has non - application exceptions
2751	Replies the attribute read name .
2752	Replies the attribute write name .
2753	Fixup operation names .
2754	Fixes the case .
2755	Escape an IR name .
2756	Parses an XTS environment element .
2757	Parses the default context propagation element .
2758	Process all the attributes of an element .
2759	Load a list of persistence providers by name .
2760	Create add operation handler .
2761	Add deployment dependencies .
2762	Writes an attribute .
2763	Gets the method interface .
2764	Creates a new session .
2765	Infers the name of the queue .
2766	Registers endpoint handlers for the given endpoint class .
2767	Gets the job names associated with the given job .
2768	Initialize the job manager .
2769	Returns the URI of the request .
2770	Creates a new ResolveResult using the supplied URL and env .
2771	Looks up an object by its name .
2772	Adds an object to the context .
2773	Call the unbind method .
2774	Returns an enumeration for the specified name .
2775	Call the destroy method .
2776	Destroy a subcontext
2777	Call bind new context .
2778	Create a subcontext .
2779	Looks up a link by its name .
2780	Adds a property to the environment .
2781	Removes a value from the environment .
2782	Add additional transformations to the builder .
2783	Parse a credential .
2784	Removes a security domain .
2785	Looks up the JNDI for the given context .
2786	Creates a new ModularReference instance .
2787	Create a new ModularReference .
2788	Creates a new ModularReference instance .
2789	Gets the IDL type corresponding to the given type .
2790	Wait for a security domain .
2791	Generate masked password .
2792	Initializes the security vault .
2793	Initializes the vault with the specified vault .
2794	Print a display of the specified attribute .
2795	Prints the configuration to the console .
2796	Builds the configuration for the vault .
2797	Checks that the given value is not null .
2798	Gets the deployment service name .
2799	Inserts a value into an Any object
2800	Checks whether the given JNDiPermission implies the given JNDiPermission .
2801	Gets the action string .
2802	Gets the name of the logger .
2803	Send a NotificationChangeNotification .
2804	Determine the state to bind to a CORBA object .
2805	Returns the value associated with the given type .
2806	Gets the context service name .
2807	Gets all interceptors .
2808	Adds an interceptor to the given method .
2809	Adds a dependency .
2810	Gets the component interceptors for a given method .
2811	Returns a list of interceptors for a given method .
2812	Adds a view interceptor to a timeout .
2813	Adds an interceptor to the AroundConstructor .
2814	Adds a postConstructor to the container .
2815	Adds a preDestroyInterceptor to the registry .
2816	Adds a pre - pass interceptor to the container .
2817	Adds a new interceptor to be activated .
2818	Sets the component create service factory .
2819	Remove all registered JNDI aliases .
2820	Adds the given EJBClientContext to the given builder .
2821	Returns the context service name of a component .
2822	Returns the context service name for the given app and module .
2823	Returns the bind info for the given environment .
2824	Returns the bind info for the given JNDI name .
2825	Returns a cache that caches all domains .
2826	returns an array of ValueMembers
2827	Returns an array of ValueMemberDefinitions for this typecode .
2828	Creates the subsystem root .
2829	Parses a config element .
2830	Start the naming service .
2831	Adds a new Weld Integration .
2832	Returns the service name for the job operator .
2833	Add a component .
2834	Adds a message destination .
2835	Get the set of components for a given view type .
2836	Get the set of components for a given component .
2837	Get the set of views for the given component .
2838	Resolve a message destination .
2839	Builds the transformers that have been updated .
2840	Reject attribute with default value .
2841	Rename an attribute .
2842	Pop identity from the context cache .
2843	Load module ids .
2844	Check that the version is valid .
2845	Compute the slot for the given JSF version .
2846	Returns the constant type code for a given constant .
2847	Add a TypeCode for a given class .
2848	Creates a module definition .
2849	Add interfaces to a container .
2850	Add abstract base value types to the container
2851	add a class
2852	Create an interface definition .
2853	Create a new value definition .
2854	create exception definition
2855	Gets the class - level injection type .
2856	Check if JTS is enabled .
2857	Initialize the store .
2858	Close the root store .
2859	Checks if the specified method type is allowed .
2860	Check if transaction sync is allowed .
2861	Gets all component classes in the given deployment unit .
2862	Returns the map of timers associated with the transaction .
2863	Removes extra keys from the map .
2864	Get the parameters from the model .
2865	Converts the given type to a Class .
2866	Convert a value to an object
2867	Returns the type of the given values .
2868	Simple check .
2869	Returns the next object in the list .
2870	Get more bindings .
2871	Creates a new javax binding .
2872	Observes health check procedures .
2873	Close health check .
2874	Returns the CORBA object for the given locator .
2875	Returns the handle associated with the given locator .
2876	Convert value to an enum .
2877	Skips bytes from input stream .
2878	Checks that two elements are not equal .
2879	Adds a component .
2880	Add a set of class loaders
2881	Unbinds the specified name .
2882	Lookup a name .
2883	Returns a list of all entries in the specified name .
2884	Returns the bindings for the specified name .
2885	Adds a new context handle .
2886	Create a new setup context handle .
2887	Create an IO subsystem .
2888	Create the welcome content handler .
2889	Gets a bean from the pool .
2890	Calculate operation analysis map .
2891	Collect metrics for a resource .
2892	Prepare the deployment unit .
2893	Deploys the deployment .
2894	Publish the deployment .
2895	Stops the web app .
2896	Start the deployment
2897	Registers an endpoint .
2898	Retry the given timer .
2899	Performs post - timeout processing .
2900	Get the declared methods of a class
2901	Get the declared fields of a class
2902	Get a Constructor
2903	Get a method from a class
2904	Adds the active messaging extensions .
2905	Returns true if the parameter is allowed to be used .
2906	Migrate a generic transport .
2907	Cancels the task .
2908	Checks if the task is cancelled .
2909	Sets the type of the global property .
2910	Returns true if this clause can be executed .
2911	Estimates the estimated number of rows .
2912	Find all classes in a directory .
2913	Returns a list of all classes of the given package .
2914	Gets the generic type of a field .
2915	Evaluates the record .
2916	Derives the type of a field .
2917	Update record .
2918	Find record by ID
2919	Get the minimal set of nodes for a sharded query .
2920	Helper method to move the flattened list of rows from the flattened where clause .
2921	Add order by projection .
2922	Extract sub - queries .
2923	Checks if id is from cluster
2924	Handle class with index .
2925	Returns true if the given class is a diamond hierarchy .
2926	Get order direction .
2927	Returns true if the key condition requires multiple index lookup .
2928	Finds the best index for the given block .
2929	Build index search descriptor for fulltext .
2930	Computes the common factor between two indexes .
2931	Creates a new strategy instance .
2932	Check if the user is allowed to execute the operation .
2933	Checks if the user is defined .
2934	Returns a string representation of the server status .
2935	Initialize the system database .
2936	Load local databases .
2937	Remove a member from the cluster .
2938	Select a new lock manager .
2939	Selects the lock manager from the cluster .
2940	Commits the transaction .
2941	Rolls back the transaction .
2942	Update identity after commit .
2943	Update record cache after rollback .
2944	Prepares the given path .
2945	Moves the source file to the target .
2946	Gets disjoint patterns .
2947	Executes the local node with the given name .
2948	Add characters to the builder .
2949	Returns true if the connection is connected .
2950	Merge two Byte buffers .
2951	Split a short into two buffers .
2952	Execute the query .
2953	Put single value .
2954	Removes the specified key from the map .
2955	Execute the query .
2956	Execute the first query .
2957	Creates a new file .
2958	Checks the bounds of the file .
2959	Replaces the content file with the new one .
2960	Execute a command .
2961	Flush the response .
2962	Add a host .
2963	Sends a request to the server .
2964	Gets the current database .
2965	Gets a connection .
2966	Kills the given connection .
2967	Interrupt the given channel id .
2968	Disconnect the given channel id .
2969	Push a DistribCfg to clients
2970	Swaps entries at the specified index .
2971	Release all locks .
2972	Synchronize all registered entities .
2973	Update the metadata .
2974	Move to the last record .
2975	Reads the next character .
2976	Execute the query .
2977	Sets the callback .
2978	Registers a compression algorithm .
2979	Get the number of open files .
2980	Returns true if this clause can be executed on the given target .
2981	Move the buffer to the specified position .
2982	Fill the array with the specified number of bytes .
2983	Execute the next step .
2984	Execute the full script .
2985	Evaluates the record .
2986	Execute the query .
2987	Loads a configuration from the database .
2988	Parse the command request .
2989	Execute the command .
2990	Updates the pattern starting at the given start node .
2991	Adds an index definition to the composite key .
2992	Creates a projection that splits the current expression .
2993	Determine the type of a result .
2994	Get collate .
2995	Returns the string value as a string .
2996	Increment the probe value .
2997	Execute the query .
2998	Build an ODocument from a file .
2999	Checks if the specified password matches the password .
3000	Create hash from input string .
3001	Checks if the given algorithm is supported .
3002	Creates the index .
3003	Returns an iterator over all vertices in the graph
3004	Returns an iterator over all edges in the graph
3005	Gets the partition key .
3006	Get distributed timeout .
3007	Returns the available features .
3008	Checks if the changes in the given pageIndex is valid .
3009	Parse the timeout value .
3010	Parses the lock string .
3011	Creates a cluster .
3012	Frees a cluster .
3013	Register the cache .
3014	This method is used to clean up the Orientation .
3015	Create a singleton result set
3016	Grant an access to the given resource .
3017	Revoke the given resource .
3018	Execute delete .
3019	Bind parameters .
3020	Resets the hash table .
3021	Returns the index of the specified item .
3022	Spread a random integer .
3023	Creates an index .
3024	Drops indexes associated with this property .
3025	Returns the current index .
3026	Returns the linked class .
3027	Serialize the index .
3028	Removes a listener .
3029	Register a database .
3030	Timeout a request .
3031	Creates a copy of this database .
3032	Try to merge the objects in this bag .
3033	Replace the delegate object .
3034	Transform result .
3035	Execute the cluster .
3036	Closes all pooled databases .
3037	Invoked when storage is unregistered .
3038	Returns a set of function names .
3039	Returns all collate names .
3040	Returns the names of all registered commands .
3041	Gets the size and type of the field .
3042	Write a status response .
3043	Write the response headers
3044	Write records .
3045	Write a record
3046	Send this response to the response .
3047	Send a stream to the response
3048	Opens a database .
3049	Closes the database .
3050	See if the collection has changed .
3051	Completes component operation .
3052	Push metrics into the snapshot .
3053	Pushes a write cache counter onto the snapshot .
3054	Pushes a storage counter onto the snapshot .
3055	Pushes a WALCountersHolder into the snapshot .
3056	Pushes a counter to the snapshot .
3057	Stop write cache flush timer .
3058	Stop the fuzzy checkpoint timer .
3059	Stop full checkpoint timer .
3060	Stop commit timer .
3061	Stop the log record timer .
3062	Stop the flush timer .
3063	Parses a SQL statement .
3064	Initialize receive messages .
3065	This method initialises a timer that will be called periodically .
3066	Removes the record .
3067	Set a property value
3068	Remove a property .
3069	Checks if a class exists in the database .
3070	Wrap a cursor .
3071	Define an attribute strategy .
3072	Define an edge attribute strategy .
3073	Returns a list of new record entries with the specified class .
3074	Get new record entries by cluster id .
3075	Add index entry .
3076	Merge two sets .
3077	Executes the update .
3078	Determines if this clause can be executed .
3079	Prepare keys .
3080	Write the given page at the given index .
3081	Reads a page from the disk .
3082	Truncate the buffer to the given index .
3083	Opens the file .
3084	Check if the local node is active .
3085	Gets the new node strategy .
3086	Check if the cluster is synchronous .
3087	Checks if the cluster is read by the cluster .
3088	Get a map of cluster names .
3089	Get the set of server names .
3090	Check if a server contains all of the clusters
3091	Check if server contains a cluster
3092	Returns the list of master servers .
3093	Get a list of server names .
3094	Get the cluster names of the specified INode .
3095	Get the list of clusters owned by the specified INode .
3096	Get the cluster owner .
3097	Get the cluster owner .
3098	Gets the list of servers .
3099	Returns the list of registered servers .
3100	Returns the set of data centers .
3101	Get write quorum .
3102	Is sharded .
3103	Gets the list of servers .
3104	Returns the data center of a server .
3105	Gets the global read quorum .
3106	Gets the write quorum .
3107	Get the cluster configuration .
3108	Gets the configuration property .
3109	Clear the initialization stack .
3110	Gets an index .
3111	Drop an index .
3112	Add a new vertex with the given id .
3113	Add an edge to the graph
3114	Retrieves a vertex from the graph .
3115	Returns an iterable of vertices of the specified class .
3116	Returns an iterable of edges of the given class .
3117	Returns an OrientEdge by id .
3118	Reuse a database .
3119	Shutdown the context .
3120	Returns the OrientVertexType of this vertex .
3121	Returns the OrientVertexType of the given type .
3122	Create a new OrientVertexType with the specified class name .
3123	Drops a vertex type .
3124	Returns an OrientEdgeType with the specified name .
3125	Create an edge type .
3126	Returns an OrientElement by its id .
3127	Drops an existing key index .
3128	Create a new key index
3129	Removes a specific listener .
3130	Fire exception event .
3131	Stop monitoring statistics .
3132	Registers MBean with given storageId and storageId .
3133	Unregister MBean by storageId and storageId
3134	Fetch the write cache statistics .
3135	Fetch performance statistics from the cache .
3136	Fetch the statistics for the given component .
3137	Compress the given json string .
3138	Get the property value .
3139	Detaches an object from an object .
3140	Returns the version of an object .
3141	Execute a command .
3142	Marks the specified object as dirty .
3143	Unset the specified object .
3144	Returns all index types .
3145	Returns all available engine engines .
3146	Get a list of missing nodes .
3147	Get the list of conflict responses .
3148	Gets the best response group .
3149	Compute the quorum response if any .
3150	Returns the list of received responses .
3151	Gets the execution plan .
3152	Returns true if the operator allows access to the specified target .
3153	Gets the function library .
3154	Release a database engine
3155	Returns the next position in the cache .
3156	Update the bag .
3157	Gets the value at the given index .
3158	Determines if the index can be used by the given index .
3159	Find the index of the first character within the specified string .
3160	Jump to white spaces .
3161	Jump to the specified string .
3162	Sets the fetch plan .
3163	Enqueue a repair record .
3164	Cancel a record .
3165	Enqueue a cluster .
3166	Gets the dependencies for a pattern .
3167	Creates a new instance of the specified class .
3168	Register entity classes .
3169	Register all entity classes in the given Class .
3170	Sets the entity manager class handler .
3171	Acquires a DB .
3172	Get number of available connections .
3173	Acquires a DB .
3174	Execute synchronization .
3175	Returns an iterator with the specified class loader .
3176	Check that the cache memory size is valid .
3177	Construct a Vertex from a JSON Object .
3178	Creates an Edge from JSON .
3179	Creates a JSONObject from an element .
3180	Convert an element to an ObjectNode .
3181	Execute an import .
3182	Returns the current status of the current job .
3183	Gets the active data center map .
3184	Extracts the algorithm name from a string .
3185	Creates an OymmetricKey from the given key .
3186	Creates an asymmetric key from a file .
3187	Create an asymmetric key from an input stream .
3188	Encrypt bytes using AES .
3189	Serializes this key to an output stream .
3190	Save the keystore to a keystore
3191	Set child .
3192	Adds an object to the unique result .
3193	Get the value of the field .
3194	Authenticate a database .
3195	Get the map entry .
3196	Gets the record .
3197	Read the current record .
3198	Gets a transaction .
3199	Gets a no - tx graph .
3200	Setup database pool .
3201	Returns the value of the specified property .
3202	Stop the transaction .
3203	Parse a statement .
3204	Gets the next token .
3205	Get the token at the given index .
3206	Generate ParseException .
3207	Gets vertices of the graph .
3208	Remove this vertex .
3209	Adds an edge to the graph .
3210	Add an edge to the graph
3211	Get the connection class name .
3212	Returns the connection to the specified direction .
3213	Processes the set of records that were detected .
3214	Returns a map of all methods .
3215	Execute a task on local node .
3216	Get the number of nodes with the given status .
3217	Backup operation .
3218	Wait for next retry .
3219	Returns the argument at the specified index .
3220	Checks if the request has the specified parameters .
3221	Connects to a server .
3222	List all databases .
3223	Retrieves information about the server .
3224	Check if a database exists .
3225	Drops a database .
3226	Free a database .
3227	Release a database .
3228	Gets cluster status .
3229	Execute the index .
3230	Gets a new active graph .
3231	Parses retry .
3232	Save record .
3233	Deletes the record .
3234	Gets the authentication header .
3235	Authenticate a user .
3236	Checks if the user is authorized .
3237	Run the server .
3238	Adjust the begin and end of the buffer .
3239	Sets the bucket index .
3240	Gets the pointer of the bucket .
3241	Ends an atomic operation .
3242	Acquires exclusive lock on given atomic operation .
3243	Change the maximum amount of memory in the cache .
3244	Listen to the specified port .
3245	Read parameters .
3246	Shutdown the LogManager
3247	Adds an item to the cache .
3248	Removes the entry from the map .
3249	Acquires an entry .
3250	Returns the value associated with the given key .
3251	Clear all entries .
3252	Closes the entry .
3253	Empty read buffers .
3254	Adds a task to the state buffer .
3255	Called after read .
3256	Put entry in read buffer .
3257	Returns the closest power of two .
3258	Handles a push request .
3259	Convert the key value to an enum .
3260	Convert all entries in the underlying map .
3261	Returns the object serializer for the given type .
3262	Initialize the shutdown queue .
3263	Get engine by name .
3264	Execute a simple optimization .
3265	Execute a query .
3266	Creates a new state .
3267	Authenticate an OAuth token .
3268	Creates the metadata .
3269	Attempt to acquire a read lock .
3270	Gets the current vertex .
3271	Returns the unique id of the graph .
3272	Sets the value of a property .
3273	Unsynchronized .
3274	Clear the contents of this bucket .
3275	Deletes all sub - trees .
3276	End the batch import .
3277	Creates a new vertex .
3278	Parse strategy word .
3279	Get position information from embedded collection .
3280	Execute the query .
3281	Checks if the given field value is valid .
3282	Fill the specified record .
3283	Set the version of the record .
3284	Get record type .
3285	Initialize database instance .
3286	Print stack trace .
3287	Execute index query .
3288	Convert the key to record .
3289	Register command instance
3290	Create a server user configuration .
3291	Analyze the criteria .
3292	Create indexed property .
3293	Attach all fields of an object .
3294	Gets index class .
3295	Synchronized .
3296	Truncate all indexes .
3297	Add a new base class .
3298	Adds the cluster ids to the index .
3299	Serialize an object to a stream .
3300	Release a pointer from the pool .
3301	Check if there are unreleased memory leaks .
3302	Clears all internal references .
3303	Convert a byte array to an int .
3304	On open .
3305	Installs the cluster with the given class .
3306	Dump the status of the cluster .
3307	Returns the index of the first element in an array .
3308	Returns the index of an object in an array .
3309	Gets the cluster names .
3310	Handle a single result .
3311	Returns the id of the temporary RID generator .
3312	Reports a tooltip .
3313	Parse fetch plan .
3314	Parse no cache keyword .
3315	Optimized sort .
3316	Returns the current batch status .
3317	Execute the command .
3318	Handle an error .
3319	Validates an index value .
3320	Rolls back the given micro - transaction .
3321	Execute a command .
3322	Registers a cluster .
3323	Set a property .
3324	Execute the command .
3325	Execute the sync database .
3326	Deletes record .
3327	Send a callback to the hooks
3328	Deletes the record .
3329	Counts the number of views in the database .
3330	Returns the number of instances of the specified class .
3331	Activate this record .
3332	Registers an encryption algorithm .
3333	Returns the relative index of the given position .
3334	Parses an optional word .
3335	Parses the next word .
3336	Parses the next chars .
3337	Parses the next keyword .
3338	Check if the parser has been parsed .
3339	Execute the query .
3340	Clears the configuration files .
3341	Returns the offset of the byte array .
3342	Extracts the token .
3343	Obtains an access token from the resource .
3344	Copy access token .
3345	Reads more characters .
3346	Read a line from a byte array .
3347	Read a line from the input stream .
3348	Skip n bytes .
3349	Skip n bytes .
3350	Ensures that the array is valid .
3351	Merge sorted sort .
3352	Swap two elements .
3353	Performs a quick sort .
3354	MurmurHash3 hash function .
3355	Hash a long .
3356	Write a byte buffer .
3357	Truncate write .
3358	Changes the position of the underlying stream .
3359	No fail refresh end metrics reporting
3360	Awaits until all completed tasks have completed .
3361	Finds all matching fields .
3362	Returns a set of types that match the given schema .
3363	Deletes all snapshots .
3364	Returns the hash code of a field .
3365	Checks if two fields are equal .
3366	Removes dangling schemas from the given schemas .
3367	Called when an announcement has finished .
3368	Called when a cycle completes .
3369	Read header tags .
3370	Extracts the primary key from an object .
3371	Clear all segments .
3372	Reads ordinals from a stream .
3373	Returns the size of the sparse bit set .
3374	Returns the string representation of the field .
3375	Copies the contents of the given ByteData into this buffer .
3376	Copies data from srcPos to destPos
3377	Returns true if this segmentedByteArray is equal to the specified length .
3378	Copies bytes from src to destPos .
3379	Copies data from srcPos to destPos
3380	Reads all bytes from the given input stream .
3381	Writes len bytes to an output stream .
3382	Ensures the segment at the given index .
3383	Returns the position of the given field .
3384	Calculates the size of all buckets .
3385	Returns true if there are any collections in the data set .
3386	Generate the files for the given directory .
3387	Generate the jobs that are in the given dataset .
3388	Returns true if the specified key matches the specified ordinal .
3389	Get the record key for the given ordinal .
3390	Creates a field path .
3391	Creates a field path for hash index .
3392	Creates a field path for a prefix index .
3393	Put an object in the hash table .
3394	Initialize the average word length .
3395	Returns true if the cache contains the specified key .
3396	Gets the percentage of the change between two cardinality and previous cardinality .
3397	Add a field to the given object field .
3398	Returns a list of schemas sorted by name .
3399	Initialize fields with default version
3400	Returns the value associated with the given index .
3401	Find records that match the given field name and value .
3402	Find records that match the given field value and field value .
3403	Sets the element match paths .
3404	Sets the key paths for each element match .
3405	Calculates the hashmap .
3406	This method is used to restore the state of the peer .
3407	Runs a cycle .
3408	Exclude key from primary key .
3409	Remove all objects referenced by this state .
3410	Write a HttpBlob header to the stream
3411	Calculates the heap footprint of a hole .
3412	Writes the data to the specified buffer .
3413	Writes a fixed - length integer .
3414	Writes a fixed - length long .
3415	Adds an ordinal to the pool .
3416	Sorts free ordinals .
3417	Generates a hash from the given key and field types .
3418	Hashes the given key with the given field type .
3419	Resize storage .
3420	Find a free ordinal .
3421	Prepare the pointers for writing .
3422	Returns true if the given key matches the given key .
3423	Grows the key array .
3424	Rehash the given key .
3425	Create an empty key array .
3426	Checks if two fields are equal .
3427	Finds the first matching key .
3428	Creates a new ReadStateHelper .
3429	Calculates the size of a hash table .
3430	Runs the compaction cycle .
3431	Writes a snapshot to the given output stream .
3432	Writes the delta to the given output stream .
3433	Adds one or more schema names to the given set .
3434	Normalize field path .
3435	Reindex the hash index .
3436	Finds all objects matching the given query .
3437	Triggers an async refresh with a random delay .
3438	Trigger refresh .
3439	Adds a new type diff .
3440	Calculates the difference between all types .
3441	Writes a VLong to the given output stream .
3442	Writes a vInt to the given output stream .
3443	Writes a VInt to the given byte array at the given position .
3444	Read a VInt from the input stream .
3445	Read a long value from the input stream .
3446	Overridden to add a child view .
3447	Refresh the size of the loading view .
3448	Update the UI for the mode .
3449	Performs a pull event .
3450	Overrides the specified view with the specified delta .
3451	Adds a new rule .
3452	Adds the given facts to the given rule .
3453	Creates a new builder .
3454	Creates a new rule builder .
3455	Returns a new rule builder with the specified fact type .
3456	Returns a new rule builder with the given result type .
3457	Creates a new rule .
3458	Creates a new rule builder .
3459	Creates a new AuditableRule .
3460	Creates a new instance of the given rule .
3461	Gets the first annotated field .
3462	Gets the first annotated method .
3463	Gets the first annotation .
3464	Registers an auditable rule .
3465	Updates the status of a given rule .
3466	Returns a map of rule status .
3467	Returns a new rule book with the given result type .
3468	Adds an action to be invoked .
3469	Adds an action to be invoked .
3470	Resets the default value .
3471	Adds a new rule to the rule book .
3472	Gets the pojo rules .
3473	Read an empty line .
3474	Transforms a list of Service objects into an array of Service objects .
3475	Gets the ports from the build configuration .
3476	Extract ports from config .
3477	Parses a port mapping string .
3478	Add port if not null
3479	Helper method to remove or null .
3480	Add missing ports .
3481	Creates an image stream resource .
3482	Returns true if the PortOrString matches int or string
3483	Converts a service name to a string .
3484	Returns the host and port for the given service name .
3485	Adds a string value to the given map if it does not already exist .
3486	Merge the given map to the given map .
3487	Merge two maps .
3488	Put all values in map if not null
3489	Wait for a pod .
3490	Validates Kubernetes Id .
3491	Converts an entity to a list .
3492	Gets the resource version .
3493	Checks if a pod is ready .
3494	Returns the current context .
3495	Determines whether a route has the given name .
3496	Determines whether a project has been loaded .
3497	Retrieves a fragment from a file .
3498	Convert env vars to a list of env variables .
3499	Merge resources .
3500	merge empty strings and remove empty strings
3501	Checks if a pod is local .
3502	Reads a configuration file from a file .
3503	Adds a port to a map .
3504	Generate docker json config string
3505	Returns the configuration for a plugin .
3506	Returns the secret configuration associated with the given id .
3507	Downloads a file at the specified URL .
3508	Compare two versions .
3509	Appends a profile to a profile .
3510	Looks up a profile from the specified directory .
3511	Read all profiles from the classpath .
3512	Read all profiles from classpath
3513	Find the profile file in the given directory .
3514	Get the list of profiles for the given extension .
3515	Reads a list of profiles from an input stream .
3516	Get image pull policy .
3517	Returns true if OpenShift mode is enabled .
3518	Gets the replica count .
3519	Returns the first child element with the given name .
3520	Installs a template .
3521	Remove tag by name .
3522	Apply a new namespace
3523	Applies a project to a project .
3524	Apply project request to OpenShift client .
3525	Returns the namespace for the given entity .
3526	Called when an error occurs .
3527	Create the Kubernetes list builder .
3528	Enrich Kubernetes
3529	Gets environment variables .
3530	Convert duration to seconds .
3531	Parses a duration string .
3532	Scans the output directory for the given pattern .
3533	Disable OpenShift features .
3534	Checks if a service has an IngressRule .
3535	Parses the content of the input stream .
3536	Creates a generator context .
3537	Extracts the generator config from the generated profile .
3538	Builds an Enricherither context .
3539	Build enricher config
3540	Returns default icon .
3541	Copies app config files .
3542	Loads properties from a URL .
3543	Gets the spring boot version .
3544	Creates a list of service objects .
3545	Enrich enricher .
3546	Gets the raw configuration .
3547	Gets the flattened map .
3548	Extracts the config from the watcher profile
3549	Gets the singleton template from the list .
3550	Gets the date of the build date .
3551	Returns the value for the given key .
3552	Gets a configuration map .
3553	Adds processors to be included in the list .
3554	Adds the from configuration to the builder .
3555	Get from mode default .
3556	Returns the name of the image .
3557	Gets the registry .
3558	Returns true if the platform is online .
3559	Gets the URL of a service .
3560	Returns the boolean value of the given property .
3561	Creates the JestClient .
3562	Create internal node .
3563	Scans all registered plugins .
3564	Creates an AmericanExpressRewardsBalance from JSON .
3565	This method will be called when a payment method is called .
3566	Construct a PayPalPaymentResource from a JSON string .
3567	Perform an HTTP GET .
3568	Performs a POST request .
3569	Create a new VenmoConfiguration from JSON .
3570	Collect device data from a fragment .
3571	Collect device data .
3572	Collect the device data from a Braintree fragment .
3573	Gets the client metadata id .
3574	Check if a signature is valid .
3575	Get a string as a string .
3576	Creates a list of PaymentMethodNotces from a JSON string .
3577	Gets the browser checkout configuration .
3578	Gets the browser billing agreement config .
3579	Executes a GET request .
3580	Posts an HTTP POST to the specified path .
3581	Performs a POST .
3582	Starts a local payment .
3583	Performs a local payment .
3584	Adds a listener to the BraintreeListener .
3585	Remove a listener .
3586	Request a Billing Agreement .
3587	Handles an activity result .
3588	Parses the paypal response .
3589	Add nouns to dictionary .
3590	Removes words from KoreanPos .
3591	Convert a list of tokens to a list of strings .
3592	Extract phrases from a token .
3593	Detokenize a list of tokens .
3594	Fetches a byte buffer from a channel .
3595	Join nal units into buffer .
3596	Joins a list of NAL units into a buffer .
3597	Returns a profile for an integer .
3598	Calculate the number of tap taps .
3599	Read the next marker .
3600	Reads the next marker .
3601	Returns the maximum available frame .
3602	Performs the modification .
3603	Copies all fragments from src to dst .
3604	Get the duration of a track .
3605	Convert a frame to a time value .
3606	Convert a time value to a frame .
3607	Calculates the media to be edited .
3608	Convert edited time to media time .
3609	Convert a movie to a qt frame number
3610	Convert a movie to a string
3611	Convert a timecode to a timecode frame .
3612	Format a timecode .
3613	Creates a 64 - bit value .
3614	Set a value to a list .
3615	Returns true if this color space matches the specified color .
3616	Returns the size of the specified size
3617	Creates a demoer .
3618	Reads an integer from the cache .
3619	Creates a WAV header .
3620	Create a WAVHeader from a set of headers .
3621	Parses the audio data .
3622	Encode LPS
3623	Reads data for a decoder .
3624	Splits a movie to a movie .
3625	Decodes a single frame .
3626	Set the big endian flag to true .
3627	Decursively deblock the two blocks .
3628	Encode native frame
3629	Encodes the given value with the given length .
3630	Returns the ebml length of a given long value .
3631	Write a FLV packet .
3632	Reposition the reader .
3633	Decode the binary .
3634	Decodes a binary bypass .
3635	Gets the next marker .
3636	Returns a SampleFrequency for an integer .
3637	Performs a prediction on a vertex .
3638	Starts a new block in the block .
3639	Computes the coefficients of a block
3640	Calculate the block .
3641	Concatenate two bits .
3642	Rewind a value in reverse order .
3643	Rewrite a range in reverse order .
3644	Seeks to the given frame .
3645	Get the picture buffer for the first frame .
3646	returns the id of the gain change
3647	Converts a byte array to an int array .
3648	Convert an int array to a byte array .
3649	Converts a byte buffer to a float .
3650	Constructs a float from a float buffer .
3651	Converts a byte array into a byte buffer .
3652	Deinterfaces from input to output buffer
3653	Returns the size of the video track .
3654	Builds the group out of the boxes .
3655	Builds the map for the swiping map .
3656	Read a batch of data from a ByteBuffer .
3657	Reads a big - endian int array .
3658	calculate median
3659	Encode a picture .
3660	Encode an IDR frame .
3661	Encode a PFrame .
3662	Returns a list of supported codecs .
3663	Returns a list of supported tags .
3664	Adds a reference to the list .
3665	Remove all references .
3666	Deletes all available references .
3667	Loads the given library .
3668	Unpack a library .
3669	Deletes temporary files .
3670	Returns a default layout for the specified number of channels .
3671	Gets the channel from the given layout .
3672	Create a new media packet .
3673	Gets the version information .
3674	Returns the default time base .
3675	Creates a new demuxer .
3676	Play a video .
3677	Display the image at the correct time .
3678	Create a new codec descriptor .
3679	Prints an option to a PrintStream .
3680	Registers a factory for the given protocol prefix .
3681	Generates a unique name .
3682	Create a new audio resampler .
3683	The supported video frame rates .
3684	Gets the supported video format formats .
3685	The supported audio sample rates .
3686	Gets the supported audio formats .
3687	The supported audio channel layout .
3688	Set a flag
3689	Sets a 2 - bit flag .
3690	Gets the decoder .
3691	Gets the demuxer .
3692	Returns a list of muxer formats .
3693	Creates a new filter graph .
3694	Returns the type of the filter .
3695	Gets a ByteBuffer .
3696	Creates a new audio frame .
3697	Resample a media picture .
3698	Validates the given image .
3699	Validates a picture .
3700	Gets the filter graph .
3701	Gets the metadata of the video .
3702	Get CPU architecture from string
3703	Get the CPU architecture from the string representation .
3704	Returns the OS family corresponding to the given string .
3705	Returns the OS family corresponding to the given string .
3706	Play sound .
3707	Load a native library .
3708	Sets the major version of a library .
3709	Try to load a specific library .
3710	Initialize search paths .
3711	Check if the passed library is already loaded .
3712	Record the screen .
3713	Deletes the compiler .
3714	Gets a stream on the Muxer .
3715	Returns the current muxer
3716	Make a set script transaction .
3717	Decode base58 string .
3718	Generates a random string .
3719	Get information about a transaction .
3720	Retrieves a list of transactions .
3721	Gets the transactions for a given address .
3722	Get the list of blocks in the given range .
3723	Get a single block .
3724	Sends a transaction .
3725	Send a script to a private key account .
3726	Compile a string .
3727	Writes primitive array .
3728	Flush buffer .
3729	Writes an object into memory .
3730	Reads the last class .
3731	Writes the given object into the given byte array .
3732	Set the mmF data
3733	Returns specificity of given class
3734	Resize the underlying store .
3735	Removes the given key from the set .
3736	Write an ASCII string .
3737	Set the output stream
3738	Create a JSTConfiguration with the given parameters .
3739	Creates a new structure configuration .
3740	Calculates the size bytes of an object
3741	Clears all cached objects .
3742	Reset the object input stream .
3743	Gets the object input .
3744	Create an object input copy from a byte array .
3745	Gets the object output .
3746	Register a cross - platform class mapping
3747	Returns the class name for a given class .
3748	Write a signed integer .
3749	Write an unsigned integer .
3750	Write a big - endian integer .
3751	Write an array .
3752	Write a byte array into the buffer .
3753	Get cached field info .
3754	Called when an object has been written .
3755	Called when an object has been written .
3756	Get the FSTClazzInfo for the given field
3757	Write array .
3758	Set the length of the buffer
3759	Write a primitive array .
3760	Finish tracking changes .
3761	Creates snapshot of current state .
3762	Register an object to be written .
3763	Writes an object into a byte array .
3764	Read an object from the input array .
3765	Read a byte array .
3766	Reads a 32 - bit integer from the buffer .
3767	Move to the end of the queue
3768	Enables or disables the thread pool .
3769	Starts cassandra daemon .
3770	Clean data from keyspace .
3771	copy file from classpath to directory
3772	Prints all the threads in a PrintWriter
3773	Check if the remote port has been taken .
3774	Returns an empty subscriber state .
3775	Returns a map of all onnx operations .
3776	Calculate the output shape
3777	Performs logical OR operation .
3778	Compare ndarray
3779	Compares ndarray ndarray
3780	OR ndarray
3781	Apply condition to ndarray
3782	Get first index
3783	Produces a flatProperties object .
3784	Create FunctionProperties from FlatProperties .
3785	Converts a collection of functions to a flat buffer .
3786	Set the exception .
3787	Set the exception to be thrown .
3788	Merge two coordinates .
3789	Partitions a variable in a list .
3790	Convert an onnx type to an nd4j type .
3791	Shutdown the transport .
3792	Returns the architecture of the current device .
3793	Convert column to image
3794	Pooling 2D array
3795	Creates a new CompressionDescriptor from a byte buffer .
3796	Partitions the list by partitionSize .
3797	Verify that all arrays have the same dimension
3798	Sets the opType
3799	Compute a number of rows
3800	Convert a collection of matrices to a flattened array
3801	Applies bilinear products to a tensor
3802	Creates a complex ndarray from a double array .
3803	Create a complex number vector with a given value
3804	Create a new array with the specified value
3805	Returns true if this node should be replicated .
3806	Subroutine .
3807	Calculate the complex number
3808	ceil .
3809	Negate a complex number .
3810	Returns the absolute value of the given complex number .
3811	Raises a complex number .
3812	Gets the AeronContext .
3813	Binaryize the feature matrix by the given cutoff .
3814	Sample the data set
3815	Get memory footprint
3816	Stringify the stack trace .
3817	Returns simple hostname .
3818	Convert string array to string
3819	Convert a byte array to a hex string .
3820	Gets a string from a string .
3821	Splits a string into an array of strings .
3822	Splits a string by character .
3823	Find the next character in the given string .
3824	Escape a string .
3825	Join strings with a separator .
3826	Convert string to camel case .
3827	Replaces all tokens in a string with their replacement values .
3828	Get the stack trace .
3829	Inverse matrix
3830	Get n .
3831	Check if the read is on the host .
3832	Check if the read is on the device side
3833	Create shape information
3834	Create shape information for the given shape
3835	Check if the shape is a vector
3836	Get the order of an ndarray
3837	Get the offset for an ndarray
3838	Convert an array of indices to indices
3839	Get a short from the buffer .
3840	Allocate a new data buffer .
3841	Copies n bytes from a stride to a byte buffer
3842	Get constant data buffer
3843	Get the kafka uri .
3844	Raise an ndarray
3845	Log the log
3846	Max scalar
3847	Max maximum .
3848	Min scalar
3849	Element minimum .
3850	Stabilize ndarray
3851	Expm 1
3852	log1p
3853	Prepare bounds
3854	This method is used to adjust the scheme to a certain upper bound
3855	Get next data set .
3856	Compute the QR decomposition
3857	Build the allocation shape
3858	Checks if a file exists in env .
3859	Read internal data from input stream
3860	Removes all queued events .
3861	Create ndarray from numpy pointer
3862	Create an ndarray from a file
3863	Allocate a pointer to the workspace
3864	Attaches the given object to the cache .
3865	Determines if the server is started .
3866	Executes the given op .
3867	Flush the queue
3868	Returns an input stream for the resource .
3869	Gets the linked device id for the specified thread .
3870	Attaches a thread to a device .
3871	Returns the next available device .
3872	Gets the operating system name .
3873	Calculates the ARCH type
3874	Publish an ndarray
3875	Starts instrumentation application .
3876	Creates a new data buffer .
3877	This method verifies that the operation has a INT data type .
3878	Add two complex numbers .
3879	Assigns the data to the storage
3880	Avg pooling 3d operation
3881	Depth - sensitive conv2d operation .
3882	Resets the internal state .
3883	Returns the string representation of the given Op .
3884	Store a new array .
3885	Get the shape of this variable
3886	Evaluates the output
3887	Compress double array
3888	Convert an array of complex numbers to a complex array .
3889	Center the specified shape
3890	Truncate ndarray
3891	Pads a complex shape to a complex shape
3892	Finds the maximum element of an ndarray
3893	Broadcast an ndarray
3894	Send a vector aggregation .
3895	Calculate gamma .
3896	Returns the square root of the square .
3897	Returns the ceiling of the specified number .
3898	Returns the root of a power .
3899	Returns the exponent of the given number .
3900	Returns the exponent of the e .
3901	Raises x to y .
3902	Raises n to n .
3903	Returns the sin of the specified number .
3904	Returns the tan of the specified number .
3905	Compute the cosh .
3906	Compute the sinh .
3907	Calculate tanh .
3908	Returns the inverse of the specified number .
3909	Calculate the power of a complex number .
3910	Returns the Gamma value of the given value .
3911	Performs a broadcast .
3912	Scales a BigDecimal and returns the result .
3913	Scales the given BigDecimal with the given precision .
3914	Convert an error to an error .
3915	Put a function for the given id
3916	Get input arguments
3917	Update the vector for the given variable name
3918	Set the shape for the given variable name
3919	Associate an array with the given SDVariable
3920	Gets property for given function .
3921	Add a property to the network
3922	Adds an outgoing function to the pipeline .
3923	Adds a function to the pipeline .
3924	Check if the function has arguments .
3925	Evaluate the pipeline
3926	Create a new variable with the specified shape
3927	Creates a new array with the same shape
3928	Zeros with specified input
3929	Remove arg from function .
3930	Sets the gradient for the given variable
3931	Avg pooling 3d operation .
3932	GRUCell
3933	Execute a list of Different functions
3934	Create a while statement .
3935	Execute a function .
3936	Execute the given function
3937	Execute backward and return result
3938	Adds a place holder to the given variable .
3939	Allocate memory for a given number of bytes
3940	Returns the length for a given data type .
3941	Returns the name of the given type .
3942	Get the type from the context
3943	Get the op number
3944	Destroy all workspaces for current thread
3945	Print the allocation statistics for the current thread .
3946	Computes a trm matrix
3947	Receive ndarray
3948	Execute the accumulation operation
3949	Perform threshold decoding .
3950	Gets the node name .
3951	Performs a scalar operation .
3952	Assert that no workspaces are open
3953	Computes the negative log likelihood
3954	Request a tick to be sent .
3955	Try to request to Ee .
3956	Releases to the toe .
3957	Get current access state .
3958	Build an environment
3959	Process the clipboard .
3960	Initializes the current dataset
3961	Init garbage collector threads
3962	Get device pointer .
3963	Synchronize the host data with the given data .
3964	Applies a gradient to the history
3965	Synchronize the given allocation point .
3966	Create an ndarrayIndex from an ndarray
3967	Gets the properties for this function .
3968	Returns true if the argument has placeholder inputs .
3969	Execute the diff
3970	Format an ndarray
3971	Imports a new graph .
3972	Convert an array to a blob
3973	Load a complex number from a blob
3974	Saves the data in the database .
3975	Copy the real values of this complex
3976	Copy the imaginary elements of this complex array to an array
3977	Sets the epsi to epsilon .
3978	Copies the elements of this complex array to this one .
3979	Get the rows of a matrix
3980	Put ndarray at a row
3981	Put ndarray
3982	Subroutine of subarray
3983	Add ndarray to result
3984	Subtract ndarray
3985	Add the result to an array
3986	Assign a value to a complex number
3987	Returns a copy of this matrix
3988	Compute eigenvalues of a matrix
3989	Compute generalized eigenvalues of A and B
3990	Returns the maximum element in a complex array .
3991	Copies the elements of two complex arrays .
3992	Computes the scalar product of a complex number .
3993	Performs skipGram request
3994	Count the number of non zero elements
3995	Performs the loss .
3996	Gets no - arg constructor .
3997	Gets a MethodHandle for the given class .
3998	Invoke the given method handle with the given parameters .
3999	Returns the first annotation of the given type .
4000	Gets an annotation on the given class .
4001	Checks if a declared annotation is present on the given class .
4002	Creates a proxy .
4003	Loads the given entity .
4004	Save entity .
4005	Create a MemcacheService .
4006	Gets the metadata for the specified kind .
4007	Queries keys only .
4008	Queries a key query .
4009	Queries the given entity query .
4010	Queries a projection .
4011	Queries the given key query .
4012	Partitions an iterator by chunkSize .
4013	Loads results from the given keys .
4014	Prints a message at the given path .
4015	Create key .
4016	Compares two objects .
4017	Convert raw data to a Key .
4018	Converts a typed key to a raw key .
4019	Gets the entity kind .
4020	Returns true if the given type is empty .
4021	Determine if a super type is a super type .
4022	Get the exact super types of a given type .
4023	Capture parameterized type .
4024	Gets the translator for the given type key .
4025	Gets the populator instance .
4026	Gets index instruction .
4027	Returns true if the given method is of interest .
4028	Get all properties of a given class .
4029	Gets the key metadata .
4030	Retrieves a value from the cache .
4031	Execute the batch .
4032	Fetches pending entities .
4033	Add indexed discriminators .
4034	Registers a Translator .
4035	Gets the collection component type .
4036	Gets key type .
4037	Creates a forward path .
4038	Returns the final path .
4039	Returns the string representation of the root node .
4040	Returns the number of nodes in this path .
4041	Put updates in the cache .
4042	Empty set of keys
4043	Cache all buckets in the cache .
4044	Retrieves all values from the cache .
4045	Returns keys of given buckets .
4046	Recursively find the key fields .
4047	Saves the key to the given container .
4048	Sets the id of a given pojo .
4049	Get the raw parent key .
4050	Register a sub - class .
4051	Checks if two types have a common subtype .
4052	Transforms the given owner type .
4053	Gets the annotation associated with the given type .
4054	Adds all values from another session .
4055	Loads a key from the keychain .
4056	Executes the round .
4057	Translates a raw result into a cache .
4058	Fetches the given keys .
4059	Loads the given entity .
4060	Creates a raw key .
4061	Converts a Key to a raw key .
4062	Returns the id value of the given key .
4063	Parses an URL safe key from a string .
4064	Creates a new transactional object that has been created .
4065	Executes a transactional transaction .
4066	Runs a single transaction .
4067	Check if the value matches the given conditions
4068	Returns an Objectify instance of the Transaction .
4069	Returns an AsyncDatastore .
4070	Returns the metadata for the given object .
4071	Allocates a new key range .
4072	Opens a new stack .
4073	Closes the objectify .
4074	Homogenize index values .
4075	Creates a Ref instance .
4076	Retrieves or throws an exception .
4077	Add a new value to the list
4078	Returns true if the task is done .
4079	Generate if conditions .
4080	Finishes the engine .
4081	Finds a container by its type and path .
4082	Gets the stat for a specific kind .
4083	Unwraps the given exception .
4084	Returns the translator associated with the given type key .
4085	Gets the root .
4086	Creates a translator for the given type key .
4087	Loads properties from the given container .
4088	Loads a property from the container .
4089	Sets the value of a property .
4090	Saves the value of the property .
4091	Gets the value associated with the given object .
4092	Writes all extensions .
4093	Writes a category .
4094	Writes a list of categories .
4095	Process a snippet .
4096	Returns an iterable over bid responses .
4097	Gets the bid with the given id .
4098	Updates all bids in the given response .
4099	Removes bids from a response .
4100	Returns an iterable of the imps that match the specified filter .
4101	Read extensions .
4102	Returns true if the current token is null or empty .
4103	Registers an OpenRbJsonExtReader .
4104	Registers an extender for a given class .
4105	This method is called when aseat is received .
4106	Process the fields .
4107	Updates the given set of objects using the given updater .
4108	Filters objects from the given list .
4109	Returns the current name .
4110	Starts an object .
4111	Reads an array .
4112	Returns the next token .
4113	Writes an integer field .
4114	Writes a list of Strings .
4115	Writes a list of integers .
4116	Writes a list of longs to the given JSON generator .
4117	Writes a list of enums .
4118	Resolves a URL relative to a base URL .
4119	Fixes the URL and returns the original URL .
4120	Gets the host segments .
4121	Get the host part of a URL .
4122	Gets the page path .
4123	Load parameter list from storm conf
4124	Extract config element .
4125	Returns the protocol for the given URL .
4126	Generates a byte array from a map of fields .
4127	Extract refresh url .
4128	Returns the metadata for the outlink .
4129	Filters metadata .
4130	Adds a scheduled URL .
4131	Clean a field name .
4132	Get charset name from bOM .
4133	Get charset from content .
4134	Get the charset from the buffer .
4135	Parses a byte array .
4136	Sets a string value .
4137	Gets the first value of a set of keys .
4138	Convert a list of cookies to a list of cookies
4139	Check if cookie match to url
4140	Creates a cache key for the given URL .
4141	Get the robot rules set from the cache .
4142	Extracts meta tags from a Document
4143	Ack .
4144	Check if the given URL matches the given metadata .
4145	Filters the given URL string .
4146	Read rules from a file .
4147	Process query string .
4148	Loads the configuration from storm conf file .
4149	Add a record format
4150	Decides how many queries should be sent .
4151	Checks if the query should be triggered .
4152	Load ParseFilters from storm configuration .
4153	Append a new node to the current node .
4154	Ignorable whitespace .
4155	Add a processing instruction .
4156	Add a comment .
4157	Filter a CDATA section .
4158	Start DTD .
4159	Fires a prefix mapping .
4160	Returns the canonical URL for the given tuple .
4161	Trims the specified text .
4162	Checks for a custom interval .
4163	Loads the configuration from storm conf file .
4164	Sets the size of the wheel .
4165	Resolves size and state .
4166	Set the drawable for an empty item .
4167	Set the angle of the wheel .
4168	Update the selected position .
4169	Invalidate the wheel item drawable .
4170	Convert a position to a wheel position .
4171	Update the angle in radians .
4172	Returns the contrast color of the entry
4173	Clamp a value to the upper limit .
4174	Writes the coveralls file .
4175	Gets the data as a ByteBuffer .
4176	Sets the string array .
4177	Creates a 1D string array based on the rank .
4178	Create an ArrayChar from a String .
4179	Create ArrayChar from ArrayObject .
4180	Create ArrayChar from String array
4181	Gets the time interval .
4182	Show the window .
4183	Shows the frame if not already in the frame .
4184	Creates a size estimate .
4185	Scans a Grib1 file .
4186	Creates a new unit name .
4187	Creates a new unit name .
4188	Make a plural .
4189	Returns true if the given date is included .
4190	Returns a new date range with the specified clip .
4191	Extend the specified date range .
4192	Extend this period .
4193	Sets the start date .
4194	Sets the end date .
4195	Sets the duration .
4196	Recalculates the duration .
4197	Add a map bean to the map .
4198	Prints the error message .
4199	Gets the directory name .
4200	Returns the string representation of the parameters in a string .
4201	Constructs a file from a byte array .
4202	Compute bounds .
4203	Sets the values of the widget
4204	Given a list of dimensions compute the chunk sizes .
4205	Register a watcher .
4206	Process events .
4207	Set the reference date .
4208	Opens a feature dataset .
4209	Wrap a Netcdf .
4210	Determine if the given feature type is OK
4211	Find a feature type from a NetcDF file .
4212	Convert catalog to HTML
4213	Convert catalog to HTML
4214	Gets the CSS for the page .
4215	Get the user head
4216	Create a catalog from a path .
4217	Add global services to the catalog .
4218	Initializes the HTTPSession with the given Credentials .
4219	Get the content of the given URL as a String .
4220	Upload content to given URL .
4221	Gets the front page .
4222	Create a catalog from the given path
4223	Extract the geospatial coverage .
4224	Gets a single dataset or by type name .
4225	Returns true if two vertices are equal .
4226	Creates a new unit ID .
4227	Parses an attribute string .
4228	Read the top ID of the data file .
4229	Convert two shorts to an int .
4230	Convert an array of bytes to an int .
4231	Convert julian days to date
4232	Makes sure that the name is valid .
4233	Returns true if the given name is a valid NetcDF object name .
4234	Open a CDF file .
4235	Read all record data from a section
4236	Read record data .
4237	Fill non - record variables .
4238	Returns a time struct for the given time index .
4239	Create a time struct from a Calendar .
4240	Check if a string has a time template
4241	Adds a server side function .
4242	Returns the boolean function with the given name .
4243	Returns the BTFunction with the given name .
4244	Loads a new function .
4245	Returns the name of the grid .
4246	Returns the description of a level .
4247	Gets the metric unit .
4248	Get the projection type of a grid .
4249	Determine if the grid is a vertical coordinate .
4250	Determine if a grid is a layer .
4251	Create a CoordinateTransform from an AttributeContainer .
4252	Create a dummy transformation variable .
4253	Create a projection from a CoverageCoordTransform
4254	Main method for testing
4255	Saves the state of the info window .
4256	Returns a copy of this Chronology .
4257	Write count .
4258	Write an atomic array .
4259	Write bytes to the output stream .
4260	Output a number of bytes .
4261	Finish initialization .
4262	Convert a DateRange to a calendar .
4263	Creates a GDS2D instance from a byte array .
4264	Parses the given text into the given DDS object .
4265	Parses a text using DASTA .
4266	Swaps grid header .
4267	Read a grid .
4268	Main method for testing
4269	Write an AQL constraint
4270	Write the WFS .
4271	Write operations .
4272	Recursively read all files in a directory .
4273	Scans a log file .
4274	Get the grid packing type .
4275	Find the grid with the given parameter .
4276	Performs rword .
4277	Unpack data .
4278	Determines the QR algorithm .
4279	Unpack Grib1 data .
4280	Unpack Grib2 data
4281	Print out the grid .
4282	Read next byte .
4283	Obtains a new instance of a calendar .
4284	Construct a CalendarDate from a java . util . Date .
4285	Obtains a calendar from the given milliseconds .
4286	Creates a new calendar with the given number of milliseconds .
4287	Parses an udunits string .
4288	Get the difference between two dates .
4289	Create an atomic variable .
4290	Setup download .
4291	Escape a string .
4292	Create a list of slices from a list of ranges .
4293	Unwraps a NetcdfFile .
4294	Determines if a list of dimensions contains a variable length .
4295	Compute the effective shape .
4296	Add to a date
4297	Multiply this unit by using the scaling factor .
4298	Divide this unit by another .
4299	Divide this unit into a scaled unit .
4300	Raises this unit to the specified power .
4301	Convert this object to a derived unit .
4302	Convert this unit to a derived unit .
4303	Convert this instance to a double .
4304	Returns the canonical string representation of this unit .
4305	Read the data from the index into an array .
4306	Reads the data from the second index .
4307	Flattens a list of stations with a list of stations .
4308	Finds a service by its name .
4309	Returns the size of the gate .
4310	Returns the start index of the first gate .
4311	Returns the number of gateways for the specified datatype .
4312	Write an XML document to an output stream .
4313	Returns the preferred layout size for the given container .
4314	Verify that the given path is a descendant dataset .
4315	This method is used to generate a catalog .
4316	Returns a new instance of CalendarDateUnit with the given name and udunit string .
4317	Creates a new instance with the specified calendar and string .
4318	Creates a new instance of a calendar .
4319	Calculates the offset from this calendar .
4320	Convert a double to a calendar date .
4321	Gets the quantity dimension .
4322	Checks if the file is a valid file .
4323	Read a map of station names from a UUID file .
4324	Read a single element .
4325	Read an array of ints into a vector .
4326	Read data from a VAR file .
4327	calculate the elevation of a sphere .
4328	Calculates the next step .
4329	Calculates the azima .
4330	calculate data
4331	Calculates the nyvent
4332	Creates and returns a vertical transform that can be applied to the specified dataset .
4333	Set the debug flags
4334	Set whether the index should be extended .
4335	Reads the y - axis values from the v2 .
4336	Determines if a record is missing .
4337	Get the LatLon bounding box .
4338	Finalize the structure .
4339	Writes a string to a string buffer .
4340	Pads a string to a given width .
4341	Returns an integer padded with the specified width .
4342	Returns a string padded with the specified width .
4343	Format a byte size .
4344	Print d to stdout .
4345	Show the difference between decimal places and decimal places .
4346	Get string representation of shape
4347	Finish the slice .
4348	Returns a string representation of the constraint .
4349	Compose two slices .
4350	Applies an index to the slice .
4351	Dump byte buffer .
4352	Dump bytes in a byte buffer .
4353	Gets the Earth s type .
4354	Returns the Earth ellipsoid for the given epsid .
4355	Decodes vlen data .
4356	Decodes vlen data .
4357	Extract URLs from a URL .
4358	Get the text content of a URL
4359	Removes tags from the input stream .
4360	Read data from v2 into a byte channel .
4361	Adds all attributes to this set .
4362	Removes the specified attribute .
4363	Remove an attribute by name ignoring case .
4364	Get the offsets in time units in milliseconds .
4365	Add an ActionSourceListener
4366	Convert a string to a Date
4367	Converts a string to a standard date
4368	Gets the date origin .
4369	Returns the date in milliseconds .
4370	Convert a double to a Date .
4371	Calculate the time unit .
4372	Convert a double value to a standard date string .
4373	Get the grid spacing in meters .
4374	Add dimensions to netcdf file .
4375	Create a coordinate axis .
4376	Applies the projection to the netcdf file .
4377	Add GDS parameters to a variable .
4378	Adds a coordinate system variable .
4379	Calculates the start of the grid .
4380	Create the Stereographic projection
4381	Create the mercator .
4382	Calculates the geographic location of the MSG .
4383	Set the coordinate of the x y coordinate
4384	Read a dataset element .
4385	Read a dataset scan element .
4386	Read metadata from a URL .
4387	Returns the level type of the level .
4388	Returns true if the file is valid .
4389	Write an array of bytes .
4390	Sets the clear name .
4391	Returns the name of a coordinate for a given axis
4392	Returns the name of the coordinate associated with a given axis
4393	Build the error message .
4394	Build DAP exception .
4395	Reads the levels from a level variable .
4396	Creates a z coordinate axis .
4397	Creates new variables .
4398	Creates a time coordinate axis from a reference variable .
4399	Remove a float from a float
4400	Writes grib to netcdf file
4401	Wrap the given ncdf file .
4402	Opens a NetcdfFile .
4403	Clear the coordinate system
4404	Find the coordinate axis with the given type .
4405	Find a coordinate axis with the given full name .
4406	Find a coordinate system by its name .
4407	Find a coordinate transform by name .
4408	Determine if the given set is needed .
4409	Set the values of a variable
4410	Set the values for a variable
4411	Creates an Array with the given string values .
4412	Returns the index of this matrix .
4413	returns null if file exists
4414	Returns a list of features that intersect the specified bounding box .
4415	Discretize data .
4416	Merge another ThreddsMetadata .
4417	Adds a documentation for the specified type .
4418	Removes the documentation for a given type .
4419	Returns the maximum bytes in bytes starting at the given offset .
4420	Checks if a Netcdf file isMine
4421	Add a dataset to the mime list .
4422	Creates a list of convention names from a string .
4423	Build convention attribute string .
4424	Build the coordinate system from a NetcDF dataset .
4425	Find the coordinate axes for the given variables .
4426	Find the coordinate system in the dataset .
4427	Create the coordinate system for the given variables .
4428	Makes sure that the coordinate system is valid .
4429	Determines if the given variable is a coordinate axis .
4430	Adds a coordinate variable to the given dimension .
4431	Create a subset of this catalog .
4432	Sets the dataset filter .
4433	mark a dataset
4434	delete all datasets
4435	Initialize the server .
4436	Counts a counter by its name .
4437	Adds a new name and symbol .
4438	Compares this table with the specified column
4439	Compare two boolean rows
4440	Returns the group scope .
4441	Pass reserved attributes to a DAP node .
4442	Returns true if the given time range is valid .
4443	Returns true if there are more elements .
4444	Registers the DSP class with the given name .
4445	Register a DSP class .
4446	Returns true if the specified DSP is registered .
4447	Unregisters the specified DSP class .
4448	Creates a new grib2 table .
4449	Get the forecast time interval size in hours
4450	Gets the forecast time interval .
4451	Gets the Vert . x coordinate .
4452	Finish rendering .
4453	Sorts the nodes in sorted order .
4454	Gets the file associated with the specified fileno .
4455	Find a variable with the given attribute .
4456	returns the variable with the given attribute value
4457	Returns the name of the variable with the given attribute .
4458	Returns the variable with the given attribute value
4459	Finds a structure in a structure .
4460	Determines if a NetcDF dataset exists .
4461	Get the literal value of a given key
4462	Get a feature type from a dataset .
4463	Get the name of a variable .
4464	Returns the coordinate value of the specified coordinate .
4465	Determine the given value to the given value .
4466	Returns the coordinates of the coordinate axis .
4467	Sets the section of this axis .
4468	Returns the index of the closest point to the given target .
4469	Returns the name of the extension .
4470	Add an action .
4471	Finds the first match .
4472	The main method .
4473	Returns the index of the first occurrence of the specified array .
4474	Add a picture to the cache .
4475	Report cache .
4476	Stop background loading
4477	Stop background loading of the specified picture
4478	Constructs a GET method with a legal URL .
4479	Create a new HTTP method .
4480	Generate a random float .
4481	Generate a random count
4482	Read data for a variable .
4483	Get a file system provider .
4484	Reads the stations table .
4485	Get the index of the group
4486	Remove the data variable with the given name
4487	Convert HS2 height to meters
4488	This method is called when the data is read .
4489	Set the number of colors
4490	Calculate the transformation from the world bounds .
4491	Create an AuthScope from a URI .
4492	Finalize the grid .
4493	Determines if this factor is a reciprocal of two .
4494	Get catalog catalog .
4495	Find the index of the first element in the sequence .
4496	Read metadata from url string
4497	Reads the metadata content from the specified dataset .
4498	This function adds the catalogGenConfig objects to the mdata element .
4499	Validate the catalog .
4500	Read a catalog gen config element .
4501	Read a dataset source element .
4502	Read dataset namer element .
4503	Read dataset filter element .
4504	Read a ResultService element .
4505	Creates an element that represents a catalog gen config .
4506	Creates an element that represents a DatasetSource .
4507	Creates an element that represents a DatasetNamer element .
4508	Creates an element that represents a dataset filter .
4509	Creates an element that represents the result service .
4510	Returns true if the specified flag is set .
4511	Construct a menu from the given JMenu .
4512	Adds the children to a menu .
4513	Load parameters from a table .
4514	Create a parameter from a list of words .
4515	Gets the param with the given name .
4516	Read the contents of the CDM file .
4517	Reads all bytes from the input stream .
4518	Replace the namespec in the given file .
4519	Sets the stnId and the stnId variable .
4520	Validate input string
4521	Prints info about a formatter .
4522	Read bitmap from Grib2 .
4523	Set the netcdf file
4524	Set debug flags
4525	Parses a name .
4526	Returns true if the given D structure is a group .
4527	Get the dimensionality of a variable
4528	Returns a shared dimension in the specified group .
4529	Constructs a list of dimensions from the specified dods array .
4530	Determine if the given type is an unsigned integer .
4531	Method to read data from DFS
4532	Get the icon from the classpath
4533	Get the image with the given full image name .
4534	Create a custom cursor with the given name .
4535	Read data from a file .
4536	Read data from a layout .
4537	Read fill data .
4538	Creates a primitive array .
4539	Convert byte array to UTF - 8 charset
4540	Convert a char array to a byte array .
4541	Convert byte array to char array
4542	Reads a section from a parser .
4543	Creates an ArrayStructure object from a section spec .
4544	Get the string value as a string .
4545	Get the structure of an atomic member .
4546	Get an Array object from a record .
4547	Creates a structure based on a DAP variable .
4548	Adds dimensions to a NetcdfFile .
4549	Creates a CrawlableDataset .
4550	Normalize a path .
4551	Adds an explicit dataset .
4552	Adds a dataset scan .
4553	Finalize the dataset .
4554	Creates the datasets .
4555	Get a random dataset from this aggregation .
4556	Create a Dataset .
4557	Put the resource control
4558	Add a point to the polygon
4559	Gets the bb upper bound .
4560	Get bb lower lower lower lower bound
4561	Validates the filter .
4562	Check if a dataset matches the filter
4563	Add all point features from a given file .
4564	Parse a constraint .
4565	Evaluates the list of clauses .
4566	Prints the constraint list .
4567	Makes sure that the ncdf file is correct .
4568	Sets the shared dimensions of a variable .
4569	Check if there are no more dimensions in the list .
4570	Returns the group with the given name .
4571	Read the Xlink content .
4572	Returns the standard URI of the document
4573	Set the projection class
4574	Add a new component to this layout
4575	Invalidates the layout .
4576	Remove a layout component from the layoutMap
4577	Returns the minimum layout size of the specified container .
4578	Recursively layout the given container .
4579	Determines if a given coordinate system is a valid radius .
4580	Get the maximum radius .
4581	Opens the given URL with the given command .
4582	Convert geographic coordinates to degrees in degrees .
4583	Convert a coordinate to an Earth coordinate .
4584	Convert a GO to geographic coordinates .
4585	Convert a scan geometry to a sweep angle .
4586	Convert sweep angle to scan geometry .
4587	Set runtime coordinates .
4588	Write a point observation dataset to a file .
4589	Rewrite a CDF file .
4590	Gets an ArraySequence .
4591	Returns the full name .
4592	Returns the unique ID .
4593	Get an InvAccess by type
4594	Find a dataset by its name .
4595	Gets the parent catalog .
4596	Gets the metadata of this catalog .
4597	Finds a service by its name .
4598	Get the variables for the given vocabulary .
4599	Find all catalog references in a list of datasets .
4600	Escapes a path .
4601	Creates a new array based on the specified dimension
4602	Extracts the extrappol interpolation .
4603	Compute the rho of a lat
4604	Returns the detail info .
4605	Create a Structure object from the gemreader .
4606	Creates a dummy variable .
4607	Create a new parameter .
4608	Add global attributes .
4609	Returns the size of stn var .
4610	Creates an Array object
4611	Returns the next transition state .
4612	Prints error .
4613	Prints the stack by rule .
4614	Read DMR string .
4615	Read error .
4616	Read data from the input stream .
4617	Reads the header .
4618	Convert a string to a Date
4619	Read a table from a URL string .
4620	Transfer group to target group .
4621	Gets the stn file for the given location .
4622	Open a file .
4623	Returns the starting index of the given node .
4624	Returns the index of the node .
4625	Creates all the runtime collections .
4626	Set edit value .
4627	Returns the data type for the given format .
4628	Calculates the LF coordinate of the ECF .
4629	Clean a unit .
4630	Clean a name .
4631	Checks if a string is a unitless unit .
4632	Factory method to create a note for the given group .
4633	Returns a VarId for a given VarNotes .
4634	Parse DAS data from DAS file .
4635	Find a DodsV by name
4636	find the data v
4637	find child by index
4638	Gets the parent group .
4639	Returns the dimension for the specified index .
4640	Returns the index of the specified dimension .
4641	Gets the unit s units attribute .
4642	Get the shape as a section
4643	Return a copy of this variable
4644	Sets the enum .
4645	Reads an array .
4646	Reads a string .
4647	reads the data from the underlying reader
4648	Reads data from the specified section .
4649	Write the CDL file as a String
4650	Debugging method for debugging
4651	Sets the data type
4652	Sets the dimensions .
4653	Reset the shape
4654	Set the dimensions for this variable
4655	Reset the dimensions
4656	Sets the dimension at the specified index .
4657	Sets the cached data .
4658	Get all dimensions
4659	Set the maximum bounding box .
4660	Finalize all vertices .
4661	Get all datasets .
4662	Check if the path ends with the dsp extension .
4663	Initializes the CDDF .
4664	Build DMR dataset .
4665	This method builds the seqtype of the sequence variable .
4666	Builds the dimensions for the specified dimension list .
4667	Finds a matching enum .
4668	Returns the core dimension set .
4669	Scans a buf file .
4670	Process a buffered message as a dataset .
4671	Handles a post request .
4672	Get the current transformation .
4673	Determines if the map should be rotated .
4674	Get the area of the map area .
4675	Convert a point to screen coordinates .
4676	Moves the pan to the specified zoom level .
4677	Zoom to the specified location
4678	Recalculate the pixel coordinates from the bounding box .
4679	Adds a listener to the list
4680	Remove a listener from the list
4681	Send an event to all registered listeners .
4682	Sends an event to all registered listeners .
4683	Prints a command .
4684	Prints a command to an output stream .
4685	Print variable data
4686	Print data from a variable section .
4687	Print a StructureData to a PrintWriter
4688	Print an array .
4689	Print an array .
4690	Writes a NetcDF file to a given writer .
4691	Read a double .
4692	Adds a parameter to the coordinate transformation .
4693	Entry point for testing
4694	Reads the data from the given array of slices .
4695	Returns true if the given grid record is positive up .
4696	Check if this unit is compatible .
4697	Creates a label .
4698	Set bit offset .
4699	Read n bits from the input stream .
4700	2 - bit integer .
4701	Open a connection to the given URL .
4702	Gets the DAS database .
4703	Get DDS
4704	Gets the complete CE .
4705	Convert a projection to a LatLon Point .
4706	Create IDV dataset catalog .
4707	Convert a date range to an idv compatible range .
4708	Check if the file is valid
4709	Creates the attributes of the Snack .
4710	Parses the sensor information .
4711	Read root element .
4712	Clean XML data .
4713	Convert a string to a string .
4714	Escape a string .
4715	Unescape a string .
4716	Decode backslash .
4717	Encode backslash .
4718	Add features to a Netcdf file .
4719	Swaps a short from a byte array .
4720	Swap a big - endian int from a byte array .
4721	Helper method to swap a double from a byte array .
4722	Swap a float .
4723	Swap a double .
4724	Convert a short to a byte array .
4725	Convert an integer to a byte array .
4726	Convert a long to a byte array .
4727	Create a new vertical transform .
4728	Write the document to a XML file .
4729	Calculate c .
4730	Start XML .
4731	Write the feature list .
4732	Add a list of levels to the grid .
4733	Add dimensions to netcdf file
4734	Adds the data to the netcdf file .
4735	Finds the coordinate transform for the grid .
4736	Get the index of a grid record .
4737	Close the cache .
4738	Gets a file in the cache .
4739	Returns the file or null if it does not exist .
4740	Show the contents of the cache .
4741	Recursively delete all files in a directory .
4742	Calculates the bearing of the Earth .
4743	Calculates the bearing between two points .
4744	The main method to find the bearing between two points .
4745	Returns a LatLonPoint from the given Earth .
4746	Returns a LatLonPoint from the given Point .
4747	Create a LatLonPoint from the given Point .
4748	Start the picture in thread .
4749	Loads picture from the image .
4750	Loads a picture from the image .
4751	Stop the image .
4752	Stop the image with the given exception
4753	Get the size of the image .
4754	Set the image buffered image
4755	Returns the standard URI of the dataset
4756	Creates a data descriptor .
4757	Transfer data from two lists
4758	Count the number of bits in this key .
4759	Compare two DataDescriptors
4760	Load the header .
4761	Load the data from the input stream .
4762	Get the field with the given name .
4763	Get a double value by its name .
4764	Get the strings with the given name .
4765	Get the boolean values for the given field .
4766	Returns the name of the field at the specified index .
4767	Gets the field names .
4768	Dump the dump of a Dbase file .
4769	Returns the attributes map .
4770	Sets the specified DapAttribute .
4771	Remove an attribute .
4772	Returns the parent group .
4773	Returns the parent of this DapNode .
4774	Get the escaped short name .
4775	Returns the path of the container .
4776	Returns the path of the group .
4777	Compute the FQN .
4778	Returns true if this directory is a top - level .
4779	Build DAP data .
4780	Sets the bean value .
4781	Get a list .
4782	Returns the object associated with the given key .
4783	Read the data from the GSB file .
4784	Prints the content of the DSPDI .
4785	Print a compound instance .
4786	Write an element to a String .
4787	Write an element to a file .
4788	Write the given element to the given output stream .
4789	Write an element to a writer .
4790	Create a dimension element .
4791	Create a projection from an attribute container .
4792	Get an integer array from the coordinate system .
4793	Create a new base unit .
4794	Create a unit .
4795	Creates the base unit .
4796	Create a derived unit .
4797	Returns the SI instance .
4798	Returns the coordinate of the given axis .
4799	Find the closest point in the axis .
4800	subroutine to subset values
4801	Opens a feature dataset .
4802	Opens a feature dataset .
4803	Annotate a dataset
4804	Read data from a Grib1 file .
4805	Builds the URI from the given parts .
4806	Normalizes a string .
4807	Normalize a string .
4808	Compile DAP dataset .
4809	Finish reading metadata .
4810	Returns the value associated with the specified key .
4811	Adds the specified key to the set .
4812	Gets the date .
4813	Print the attributes of a DAP node .
4814	Print an XML attribute .
4815	Returns true if the attribute is a special attribute .
4816	Prints the dimensions of a variable .
4817	Returns true if the given file is valid .
4818	Sets the area attributes to the given variable .
4819	set nav block attributes
4820	Returns the numeric value of the given string .
4821	Sets the attributes of an image .
4822	Finds the coordinates of the axis .
4823	Returns the coordinate name for a given axis .
4824	Helper method to find a coordinate axis .
4825	Finds a coordinate for a particular axis .
4826	Returns the dimension of the specified axis .
4827	Finds the best coordinate system for the given dataset .
4828	Find a dependent axis .
4829	Gets the value of a variable .
4830	Deserialize a server version .
4831	Reads a marker .
4832	Writes a marker .
4833	Throw a fatal error .
4834	Creates a dataset .
4835	Main method for testing
4836	Gets java array string .
4837	Gets the parameter list .
4838	Sets the animations to be rendered .
4839	Set the currently selected station .
4840	Redraws the image .
4841	Deserialize this object from an input stream .
4842	Serialize the object
4843	Adds all units from the given unit to this one .
4844	Adds a unit .
4845	Adds a symbol .
4846	Gets a unit by its id .
4847	Adds a new unit .
4848	Add a unit by symbol .
4849	Adds a unit to the map .
4850	Adds the installed look and feel to the given menu .
4851	Find a Grib2 record by starting position .
4852	Read data from the dataset .
4853	Serialize the output
4854	Returns the values of the rdAT as a float array .
4855	Create a copy of this projection .
4856	Opens a feature dataset .
4857	Opens the feature dataset .
4858	Opens a Netcdf dataset .
4859	Annotate a NetcdfDataset
4860	Removes duplicates from a list .
4861	Adds a new partition .
4862	Create a new GribCollectionMutableCollectionMutableMutableCollectionMutableMutableMutable object .
4863	Get an instance to match on the match target .
4864	Get an instance to match on target path .
4865	Write a QueryCapability to a file .
4866	Read a Structure object from a section
4867	Loads a picture from the screen .
4868	Set the buffered image .
4869	Zoom the screen to fit .
4870	Paints the scl graphic .
4871	Convert time to date
4872	Gets the graphic data from an int array .
4873	Calculates a date from an integer array .
4874	getTI DAY MONTH
4875	Convert an IV coordinate to a LV coordinate .
4876	Reverse a number of bytes in an array .
4877	Get the grid packing type
4878	Get data type
4879	Read data from an input stream .
4880	Externalize Dods
4881	Returns the tag with the given code .
4882	Returns next image .
4883	Returns the size of a given DAP type .
4884	Returns the sum of the elements in an array .
4885	Sets the spatial grid .
4886	Sets the overlap
4887	Clears the grid .
4888	Mark the specified rectangle in the grid
4889	Finds the intersection of the specified rectangle .
4890	Find the intersection point in the grid .
4891	Find the object in the grid
4892	Returns the squared Euclidean distance of the specified cell .
4893	Get or create a base unit .
4894	Returns the service type for the given fragment .
4895	returns the serviceType for the given url
4896	Decodes the path extension .
4897	Check if the location is a dods directory .
4898	Checks if the given location is a directory .
4899	Send a variable to an output stream
4900	Returns the suffix of a class .
4901	Returns the prefix of a class .
4902	Locates a file .
4903	Locates a file relative to an absolute path
4904	Extract bytes from buffer .
4905	Returns the structure path of the given variable .
4906	Returns null if the given string is null or empty .
4907	Join an array of strings with a separator .
4908	Determines if a string contains a drive letter .
4909	Get a list of protocol protocols from a URL .
4910	Convert an index to a list of slices .
4911	Convert a DAPVariable to a list of dimensions .
4912	Returns true if the slices are contiguous
4913	Returns true if the given slices are single point
4914	Convert a list of slices to an index
4915	Read data from an input stream .
4916	Sets the station information .
4917	Sets the short names .
4918	Read a configuration file from a catalog .
4919	Adds a decl to this group .
4920	Update the list of groups .
4921	Returns the DAPVariable with the given name .
4922	Determine the axis type of the variable .
4923	Gets the statistic type .
4924	subrides the lon axis .
4925	Gets the range iterator .
4926	Sets default values for properties .
4927	Returns the current session id .
4928	Set the maximum number of redirects .
4929	Use this to enable sessions .
4930	Closes this chain .
4931	Sets authentication and proxy properties .
4932	Track the session .
4933	Sets the global CredentialsProvider for the given scope .
4934	Validates URL
4935	Creates an index .
4936	Compute the stride
4937	Create a new index .
4938	reduce this index
4939	Returns a new index with the specified dimension
4940	Returns a copy of this index
4941	Makes a copy of this index .
4942	Get index iterator .
4943	Returns the current element .
4944	Set the current index .
4945	Set the current value
4946	Sets the values of this index .
4947	Returns the time interval name .
4948	Create a calendar date range from the given calendar .
4949	Returns a list of date - time strings .
4950	Create a list of parameters from a part .
4951	Creates a list of stations from the gem .
4952	Create a station from a header .
4953	Get the list of station keys .
4954	Returns a list of dates .
4955	Returns the index of the station with the given ID .
4956	Get the file type .
4957	Increments the indentation level .
4958	Sets the indent level .
4959	Read or create an index from a single file .
4960	Add a directory to the collection .
4961	Returns true if the collection has been scanned .
4962	Performs first scan .
4963	Set debug flags
4964	Adds a variable to the model .
4965	Writes a NetcDF file .
4966	Validates an XML document .
4967	Returns the string representation of the constraint .
4968	Sets the original variable .
4969	This method is called when the data is read .
4970	This method is used to read data from the Structure object .
4971	Check if the variables need to be converted
4972	Convert Array to ArrayStructure
4973	Recursively convert the members of the StructureMembers
4974	Find the variable with the given name .
4975	returns true if the variable has data
4976	Enhances the given mode .
4977	Check if a resource control is allowed
4978	Returns an empty sequence .
4979	Create an ArraySequence .
4980	Create a sequence from the gemreader .
4981	Add vertical coordinates to a variable
4982	Read a catalog asynchronously .
4983	Creates an InvCatalogImpl object from a String .
4984	Read catalog from StringReader
4985	Write catalog to an output stream
4986	Get a metadata converter
4987	Create a dimensionless ID .
4988	Multiply by one .
4989	Implementation of division .
4990	Converts the input array to a derived unit .
4991	Checks if the specified unit is compatible .
4992	Write a single geometry
4993	Write a point .
4994	Write a linestring .
4995	Write a polygon
4996	Pull the value of a named attribute .
4997	Get all subnodes of a given parent .
4998	Parses the response .
4999	Pass reserved attributes to the DAP node .
5000	Gets the string representation of a variable .
5001	Create an ArrayStructure from an ArrayStructure .
5002	Sets the array value of a member .
5003	Create an ArrayStructure from a Structure
5004	Returns the geometry type of the given name .
5005	Create a station - series feature .
5006	Compile a CEAST node .
5007	Compile a filter .
5008	Adds a dimension redef .
5009	Creates an Array Object .
5010	Determines if this rectangle is contained in the specified LatLonRect .
5011	Extend the given point .
5012	Extend the current view .
5013	Returns the intersection of this rectangle .
5014	Add two arrays
5015	Check if the shape is conformable
5016	Returns true if the shapes are conformable
5017	Convert an array to an array
5018	Copy the elements from an array to the result .
5019	Copies all elements of an Array to the result .
5020	Copies all elements from an Array to the result
5021	Get the min and max
5022	Sets the value of an Array .
5023	Builds a catalog builder .
5024	Create a new projection .
5025	Unescapes a DAP identifier .
5026	Decode a string .
5027	Unescape a URL .
5028	Escapes a string .
5029	Unescapes backslash .
5030	Tokenizes an escaped name .
5031	Returns the index of the first character of the specified character .
5032	Convert backslash to DAP characters .
5033	Read an atomic scalar .
5034	Gets the path of a cursor .
5035	Returns the UIDefaults of a class
5036	Gets the JComponent associated with the given JComponent .
5037	Compile the DSP file .
5038	Compile a string array .
5039	Compile a DAP structure .
5040	Compile a sequence array .
5041	Compile a sequence .
5042	Read a little endian long from the input stream .
5043	Returns the field with the given name .
5044	Returns the value of the specified field .
5045	Sets the value of the specified field .
5046	Adds a new field to the table .
5047	Adds a CheckBox field .
5048	Adds a date field .
5049	Adds a double field .
5050	Add an integer field .
5051	Adds a password field .
5052	Adds a text field .
5053	Add a TextCombo field .
5054	Adds a text area field .
5055	Adds a layout component to the layout .
5056	Add a new component to the layout
5057	Adds a row to the layout component .
5058	Find the active frame .
5059	Gets the cell s cell spacing .
5060	Returns the set of factors .
5061	Multiplies this dimension by another dimension .
5062	Returns an array of factors with the specified power .
5063	Determines if this dimension is a reciprocal of another .
5064	Returns true if this factor is non - dimensionless .
5065	Create a new instance of grib1 param table .
5066	Create a new instance of Grib1ParamTables .
5067	Adds a parameter table lookup .
5068	Adds a parameter table to the grib1 file .
5069	Checks to see if the given number is a power .
5070	Convert the input array to a derived unit .
5071	Initialize the unit table .
5072	Create a vertical variable .
5073	Returns the name of the CDM file .
5074	Gets a short from a byte array .
5075	Gets an int from a byte array .
5076	Reads a float from the byte array .
5077	Reads a double from the byte array .
5078	Execute an alias .
5079	Adds a symbol .
5080	Create a converter .
5081	Set the structure of a List of StructureData
5082	Set the point feature data .
5083	Draw the image .
5084	Gets the shape list .
5085	Processes input stream .
5086	Read a number of bytes from an input stream .
5087	Reads more bytes from the input stream .
5088	Read bytes from the input stream .
5089	Skip n bytes .
5090	Adds dimensions to a netcdf file .
5091	Find the index of a grid record .
5092	Determines if the given file is valid .
5093	Reads the ncdf file .
5094	Read data from a variable section
5095	Read one row data .
5096	Creates a dataset from a NetcDF dataset .
5097	Creates a type for a given variable
5098	Fire a map area event .
5099	Set the area of the map area .
5100	Set the area of the map .
5101	Set the center area of the map
5102	Set the projection to use .
5103	Add actions to the given menu .
5104	Try to redraw the graphics background .
5105	Change screen size .
5106	Set the selected variable .
5107	Returns the double at the specified offset .
5108	Retrieves the double value at the specified index .
5109	Returns the object at the given index .
5110	Returns the name of the specified detector .
5111	Reads scaled int .
5112	Find parameter with given name ignoring case .
5113	returns true if there are more objects in the odom set
5114	Sets the byte order to use .
5115	Get the time steps per file .
5116	Get the file name at the specified time and time index .
5117	Get file names
5118	Get the path to DDF file .
5119	Returns the file path for the given filename .
5120	Adds a Chsub .
5121	Convert a reference date to a time coordinate .
5122	Read WMO file .
5123	Get the uncompressed data .
5124	Generate code for a specific code .
5125	Generate Pcode Packet
5126	Read the nid message header .
5127	Parses the number of vector arrow .
5128	Generate code for pcode .
5129	Generate code for an unlinked vector .
5130	Calculates the level levels .
5131	Get the level of the dual interpolation level .
5132	Creates a new variable .
5133	Adds a parameter to the network .
5134	Uncompress a byte buffer .
5135	return unsigned integer from byte array
5136	Gets a number from a byte array .
5137	Convert a byte array to an object .
5138	Perform a DMR .
5139	Gets the state of the DAP request .
5140	Sends an error message .
5141	Set anchor to the specified point .
5142	Stretch the canvas .
5143	Gets the bounds of the rectangle .
5144	Returns the bounds of the last point .
5145	Format the given text .
5146	Replace the data variables in the structure .
5147	Ensure that the array size is ok .
5148	Read two integers .
5149	Read a unsigned integer from a file .
5150	Reads three bytes from a file .
5151	Read a 2 - byte unsigned integer from a file .
5152	Read a 32 - bit unsigned integer from a file .
5153	Read a 4 - byte float from a file .
5154	Creates a 4 - digit floating point number .
5155	Read a 64 - bit integer from a file .
5156	Count the number of bits in a byte array .
5157	Creates a copy of this projection .
5158	Converts this object to a WGS84 string .
5159	Escape string .
5160	Unescapes backslash .
5161	Splits a string into a list of slashes .
5162	Create a new netcdf inv .
5163	Returns the service special .
5164	Get the number of projected components
5165	Gets the reference time .
5166	Factory method to create an ArrayStructureBsection object .
5167	Indexes a Lucene index .
5168	Read a Grib1 record .
5169	Checks if a Netcdf file isMine
5170	Create a projection for the given dataset .
5171	Requires the area reader .
5172	Returns true if the value is before the specified date .
5173	Determines if this date is before the specified date .
5174	Returns true if the specified date is after the specified date .
5175	Set the value at the given index .
5176	Adds a CoordinateSystem to this variable .
5177	Set the string for the unit
5178	Gets the units of this variable .
5179	Initializes the dialog .
5180	Read catalog .
5181	Processes a list of datasets .
5182	Recursively scans a directory recursively .
5183	Returns true if the given lon is within the given range .
5184	Convert latitude to string .
5185	Convert lon to string .
5186	Compare this quantity .
5187	Returns the selected dataset .
5188	set the selected dataset
5189	Create a tree path from the given node .
5190	Open the catalog .
5191	Sets the catalog .
5192	Sets the catalog .
5193	Find the axis alias for a given variable .
5194	Write a vInt to the stream .
5195	Write a range of characters .
5196	Read a range of characters from the input stream .
5197	Set debug flags
5198	Adds a member to this group .
5199	Removes a member .
5200	Gets the name of the member list .
5201	Returns the member with the given name .
5202	Read the bitmap from a Grib1 file .
5203	Restore the state of the BAM .
5204	Returns an iterator over all selected rows .
5205	Gets the model index of the model .
5206	Returns the array associated with the given member .
5207	Get a double .
5208	Retrieve the double value as a double array .
5209	Get a float value .
5210	Gets the float value associated with the given member .
5211	Returns the byte associated with the given member .
5212	Get java array byte .
5213	Get a mutable int value .
5214	Retrieve a java array .
5215	Get a short value for the given member .
5216	Returns the java array as a short array .
5217	Returns the long value associated with the given member .
5218	Gets the java array .
5219	Get a char .
5220	Get java array char .
5221	Write a single dataset
5222	Check if a dataset is useable
5223	Create a new Dataset .
5224	Transfer metadata from another dataset .
5225	Get the ThreddsMetadata object
5226	Adds a new record to the list .
5227	Prints information about missing values .
5228	Show the summary of missing values .
5229	Finds a record with the given parameters .
5230	Returns a string representation of the grid .
5231	Returns a string representation of the parameter .
5232	Sets the coverage coordinates for a longitude .
5233	compares two byte arrays
5234	Parse a DMR document into a DMR dataset .
5235	Process DAP dataset .
5236	Add a list of coords to the partition .
5237	Specifies the gaussian latitudes .
5238	Creates a ParsedSectionSpec from a parent .
5239	Creates a string for a section .
5240	Returns true if a box contains a box
5241	Close the method .
5242	Execute HTTP method .
5243	Identify the location of the observation .
5244	Returns the full name of the given axis .
5245	Initializes the input stream .
5246	Read character .
5247	Start a progress monitor
5248	Parse a string to a URI .
5249	Exclude a given URI .
5250	Converts a string to null .
5251	Joins the given prefix and suffix .
5252	Checks if the given dataset has been modified .
5253	Copy info from GribCollectionMutableMutableMutableMutableMutableMutableMutableMutableMutableMutableMutableMutable .
5254	Get the list of filenames .
5255	Sets the index file .
5256	Returns the index file path in the cache .
5257	Closes the index file .
5258	Returns the number of counters in this array .
5259	Adds a global attribute .
5260	Adds a global attribute .
5261	Deletes a global attribute .
5262	Rename a global attribute .
5263	Adds an attribute .
5264	Adds a variable attribute .
5265	Deletes an attribute .
5266	Rename an attribute .
5267	Sets the subtype of the file .
5268	Write the headers to the file output
5269	Write members .
5270	Write an XML document to a XML file .
5271	Write a station collection to a XML file .
5272	Write DSR .
5273	Send a dxr8 packet .
5274	Write error .
5275	Close the connection .
5276	Flush the buffers .
5277	Create a copy of this projection .
5278	Returns true if the list contains a given number .
5279	Returns the element at the specified index .
5280	Shift the range origin by origin .
5281	Read data from the RDF file .
5282	Reads the data from the file .
5283	Creates a subset of this vector .
5284	Returns an iterable containing the catalogs .
5285	Cleans up the tracker before a tracker .
5286	Sets the values of the GDS .
5287	Get the data chunk iterator without filter .
5288	Make a double array .
5289	Fetches the bounds of the N CSS .
5290	Check the requested variables .
5291	Get a structure by name
5292	Get the path to the specified location .
5293	Add vertices to a netcdf file .
5294	Read the PIB file .
5295	Finish the dataset .
5296	Transfer from parent to public metadata
5297	Transfer metadata from a dataset
5298	Transfer metadata from Dredds
5299	Sets the list of contributors to this metadata .
5300	Adds a dataset at the specified index .
5301	Remove a dataset from the catalog .
5302	replace a dataset
5303	Adds a new service to this context .
5304	Removes a service from this context .
5305	Add a list of services to this context .
5306	Remove a local metadata .
5307	Returns the value associated with the specified key .
5308	Validate the dataset
5309	Returns a list of descriptor descriptors .
5310	Constructs the path to the wfs path .
5311	Gets the capabilities .
5312	Get a geometry .
5313	Check the parameters for error .
5314	Handle the http request
5315	Get capabilities for a given URL .
5316	Returns the size of the object .
5317	Returns the last modified date .
5318	Populate the DAP dataset .
5319	Returns the file as a file .
5320	Return the string as a string
5321	Set the response content length
5322	Get the URI of the request
5323	Gets the path of the request .
5324	Returns the full request path .
5325	Gets the value of a parameter .
5326	Saves the contents of the combo box .
5327	Write a directory to a directory .
5328	Set the bit offset for a given data key .
5329	Create a new BitCounter for a subKey .
5330	Count the number of bits in this row .
5331	Append a line to the text .
5332	Creates a Document representing a station collection of stations .
5333	Gets the capabilities document .
5334	Get the record at the specified location .
5335	Returns the coordinate at the specified index .
5336	Adds an item to the list .
5337	Handle exception .
5338	Get the slice at the specified index .
5339	Step 2 .
5340	Get the NCEP table from the database .
5341	Check if the given endpoint exists
5342	Set the type of this attribute .
5343	Factory method to create a GDS1G .
5344	Copies the given input stream to the given output stream .
5345	Reads the contents of an input stream and returns it as a String .
5346	Reads the contents of the input stream into a byte array .
5347	Writes the contents of a string to an output stream .
5348	Copies the specified file into the specified output stream .
5349	Copies a byte array into an output stream .
5350	Copy a directory recursively .
5351	Reads the contents of a file into a byte array .
5352	Reads text from CDM file .
5353	Write string to a file
5354	Writes the contents of a string to a file .
5355	Writes the contents of an input stream to a file .
5356	Displays a ParseException .
5357	Handle exception handling .
5358	Prints bad url page
5359	Get catalog .
5360	Print the catalog
5361	Prints the status of the server .
5362	Prints error page .
5363	Gets the reference date .
5364	Read vlen array .
5365	Reads a NCML string from a string .
5366	Open a NCdfCollectionReader .
5367	Replaces all letters in string with the given replacement character .
5368	Clean the byte array .
5369	Removes all letters from a string
5370	Filter a string .
5371	Makes sure that the given string is valid .
5372	Compare two strings .
5373	Pads the string to the desired length .
5374	Pads the string to the desired length .
5375	Removes all occurrences of a string .
5376	Removes the character from the string .
5377	Removes the character from the end of the string .
5378	Collapses all whitespace characters in a string .
5379	Replaces all occurrences of a character in a string with the specified output .
5380	Replaces all occurrences of a string with a replacement string
5381	Replaces all occurrences of a string with the given value .
5382	Substitute all occurrences of a string .
5383	Substitute all occurrences of matched strings .
5384	Removes all characters from the string builder .
5385	Replaces a string in the given string with the given output .
5386	Replaces all occurrences of a string in the input string .
5387	Substitute a string in a string builder .
5388	Trims characters from a string .
5389	Process an event .
5390	Check state .
5391	Updates the collection .
5392	Show unique templates .
5393	Gets the datasets .
5394	Release all datasets .
5395	Create a copy of the given structure .
5396	Copy an ArrayStructure to an ArrayB
5397	Copies a structure to an ArrayStructure .
5398	Create a copy of the StructureData object .
5399	Create a new ArrayStructureObject from the given StructureObject
5400	Get the forecast time interval size in hours
5401	Returns a new coordinate axis with the specified range .
5402	Creates a table analyzer .
5403	Gets the first feature type .
5404	Analyze the dataset
5405	Initialize the grid .
5406	Returns the number of latitudes of gaussian .
5407	Swap a long value at a given offset
5408	Helper method to swap a float from a byte array .
5409	Swaps char at specified offset .
5410	Determines if all of the variables have been set .
5411	Add a parameter to the coordinate system .
5412	Returns the common parent of this group
5413	Returns true if this group is a parent of this group .
5414	Sets the parent group .
5415	Adds a dimension to this group .
5416	Adds a dimension to this group if it does not already exist .
5417	Adds a group to this group .
5418	Adds an enumeration to this group .
5419	Adds a variable to this group .
5420	Removes the given dimension from the list .
5421	Creates a new group by its name .
5422	Convert alias field name to DAS alias .
5423	Printdas to a PrintWriter
5424	Get a variable by its name .
5425	Writes a grid .
5426	Replace missing values .
5427	Replace missing values .
5428	Gets xstart coordinate .
5429	Write a grid to a grid .
5430	Write the exception text to the response .
5431	Return the current version of nc4 library
5432	Create the top index file from the given configuration .
5433	Returns the type of the GribCollection .
5434	Update a collection .
5435	Update leaf collection .
5436	Opens a GribCollection .
5437	Opens a GribCollection .
5438	Opens a GribCollection .
5439	Returns true if url matches pattern
5440	Adds a triple to the registry .
5441	Lookup a key and url
5442	set the well known well - known triples
5443	Loads a CDM file .
5444	Insert triple into triples .
5445	Get the set of datasets .
5446	Find a dataset by its name .
5447	Set the project to be displayed .
5448	Get the shapes for the specified graphics context .
5449	Convert a list of features to a shape
5450	Compares the specified string .
5451	Start the progress monitor
5452	Checks if the index file needs to be updated .
5453	Normalizes the given list of coordinates and returns the result .
5454	Sets the object at the given index .
5455	Gets the structure data at the specified index .
5456	Copy the Structures members from a record .
5457	Gets a scalar object .
5458	Convert a scalar value to a double .
5459	Convert a scalar integer to an integer .
5460	Get a float value from a member .
5461	Get a scalar byte .
5462	Get a short value from a member .
5463	Get a char from a member .
5464	Get a string value from a member .
5465	Returns an ArrayStructure object for the given record .
5466	This method retrieves the array value associated with the specified record .
5467	Get an ArrayObject for the given record .
5468	Checks if the given value falls between the given minimum and maximum .
5469	Evaluate an expression .
5470	Returns the string representation of this constraint .
5471	Returns true if the specified node is a reference to the specified DAP node .
5472	Evaluates the LDAP filter .
5473	Returns the number of expansion entries in a DAP structure .
5474	Compute enums .
5475	Compute the groups .
5476	Parses a string and returns it .
5477	Returns true if the given file is a valid GRIB .
5478	Configures all actions in the BAM .
5479	Returns the byte order for the specified k - endian .
5480	Set byte order .
5481	Find the key with the given name .
5482	Find file header by name .
5483	Get the header of a file .
5484	Prints the parts .
5485	Returns the data point for the specified row and column .
5486	Reads the data from the file .
5487	Read n character from file .
5488	Convert a DMS part into an array .
5489	Get bits in a string .
5490	Writes a NetcdfFile to a channel .
5491	Parse a base element .
5492	Parse a grid element .
5493	Parses an alias element .
5494	Decode key descriptors
5495	Replies the list of sub - keys .
5496	Returns the filename of the dataset .
5497	Gets the signature type .
5498	Returns true if two float values are equal .
5499	Returns true if the given node belongs to this DAP node .
5500	Parse a unit .
5501	Prospect an object .
5502	Returns true if the given variable is tiled .
5503	Compute the best coordinate from complete .
5504	Convert LatLonRect to a ProjectionRect
5505	Show time series .
5506	Convert a list of attributes to a map .
5507	Returns the string values .
5508	Returns the numeric value at the given index .
5509	Writes a CDL definition .
5510	Set the string value .
5511	Sets the values of this attribute .
5512	Sets the values from an array .
5513	Performs a scan .
5514	Generate catalogs catalog .
5515	Adds a message to the queue .
5516	Sets the thrredds datatype
5517	Uploads the data to the Thredds .
5518	javadoc
5519	Sets the dataset .
5520	Sets up the UI .
5521	Create the GUI frame .
5522	Convert a list of coordinates to a full name .
5523	Returns a non - null Axes lesser than the first one .
5524	Finds the axis with the specified type .
5525	Get the current projection
5526	Determine if the X coordinate is XY .
5527	Returns true if the axis is regular .
5528	Returns true if the specified set is a subset .
5529	Check if the given list contains the given axis
5530	Returns true if the given axis contains the given name .
5531	Returns true if the domain contains the specified dimension
5532	Checks if the given list contains the given axis
5533	Checks if the given axis is in the list of coordinates .
5534	Clone DAG .
5535	Returns the currently selected bean .
5536	Get all currently selected beans
5537	Get all the currently selected cells .
5538	Set the selected bean .
5539	Restore the state of the view .
5540	Creates an unknown unit .
5541	Closes the stream .
5542	Returns true if the given variable is a non - null value .
5543	Returns true if the given variable is a coordinate .
5544	Find the coordinate axis for a coordinate .
5545	Adds data variables from a table .
5546	Add parent joins to a Cursor
5547	Create a station feature from a Structure .
5548	Creates the node map .
5549	Creates a SimpleUnit instance .
5550	Factory method to create a SimpleUnit instance .
5551	Create a unit from a string .
5552	Check if two strings are compatible with exceptions .
5553	Determine if a Ucar is compatible with a date unit .
5554	Determines if the string is a time unit .
5555	Gets the conversion factor .
5556	Convert the given value to the given unit .
5557	Returns true if the unit is unknown
5558	Gets the scaled unit .
5559	Create a new RelOperationClause .
5560	Create a new BoolFunctionClause .
5561	Creates a new sub - clause .
5562	Creates an image from an array .
5563	Calls the catalog .
5564	Crawl a dataset .
5565	Crawl a direct dataset .
5566	Get file or cache .
5567	Returns the existing file or the cache if it exists .
5568	Set the debug flag .
5569	Gets all files in the system .
5570	Close the file .
5571	Seeks to the given position .
5572	Flush the buffer .
5573	Reads a byte from the input stream .
5574	Read a short array .
5575	Read an int from the input stream .
5576	Read an integer array .
5577	Reads a long array from the input stream .
5578	Read a float array from the input stream .
5579	Read a double array from the input stream .
5580	Read a string .
5581	Reads a string from the input stream .
5582	Writes a portion of a boolean array .
5583	Writes a short array .
5584	Writes a sequence of characters .
5585	Writes an integer array .
5586	Writes a long array .
5587	Writes an array of float values .
5588	Writes a double array .
5589	Write a string to the output stream .
5590	Writes a byte array .
5591	Searches for a given match .
5592	Append a query string to a string buffer
5593	Creates a new directory .
5594	Find index .
5595	Check if the index is a leaf .
5596	Constructs children from index .
5597	Scan for children .
5598	Read m files from index .
5599	Returns a list of all grids .
5600	Acquires a file cacheable .
5601	remove the file
5602	Delete files from the cache
5603	Release the file cache .
5604	Convert four bytes to a 4 - byte integer .
5605	Update element in cache .
5606	Clear the cache .
5607	Creates the verticalTransform .
5608	Returns true if the axis is global .
5609	Returns true if z axis is positive .
5610	Finds the x - coordinate of the x - coordinate in the grid .
5611	Searches for a bounding box and returns the index of the x - axis .
5612	Convert a LatLon to an array of coordinates
5613	Convert a LatLon to an array of coordinates
5614	returns the position of the arrow
5615	Returns the item for the specified pixel .
5616	Iterate over MFileCollection .
5617	Downloads all the remote logs .
5618	Returns the name of the subCenter .
5619	Parses a CalendarPeriod .
5620	Returns a new calendarPeriod instance with the specified integer and field .
5621	Creates a CalendarPeriod from a string .
5622	Subtract the difference between two dates .
5623	Gets the conversion factor .
5624	Returns the millisecond value in milliseconds .
5625	Get the amount of time between two dates .
5626	Initialize the gem file .
5627	init tables
5628	Put the data root extension .
5629	Finds the longest path match .
5630	Find the data root for the specified request path .
5631	Convert a catalog to a DataRoot
5632	Gets the calendar date range .
5633	Reindex a list of coords
5634	Creates a new NetcdfFileWriter .
5635	Adds a new group to the given parent .
5636	Adds an enum type to the group .
5637	Delete an attribute from a group .
5638	rename an attribute
5639	Send a record to the network
5640	Aborts the server .
5641	Write properties to a PrintWriter
5642	Extract ThreddsMetadata .
5643	Divide this instance into another unit .
5644	Convert this object to a derived unit .
5645	Convert this instance to a double .
5646	Convert a nested variable to a nested array
5647	Convert a DODS variable to an Array
5648	Convert a DObject to an Array
5649	Close all opened databases .
5650	Opens a database .
5651	Convert an integer to a joda period .
5652	Ensures that the string array has enough capacity .
5653	Returns the string at the specified index .
5654	Create a catalog for a directory .
5655	Creates a proxy catalog from the specified path .
5656	Get the coordinate type
5657	Creates a Grib2Pds instance .
5658	Calculates the time .
5659	Apply scale factor .
5660	Parses a local concept from a file .
5661	Adds a local concept from an input stream .
5662	Clean the line
5663	Store a single concept .
5664	Write grib1 tables .
5665	Writes the lookup table file .
5666	Show local concepts .
5667	Main method for testing
5668	Get a DatasetSourceType by name
5669	Expand empty collection .
5670	Generate a catalog .
5671	Recursively finds all datasets .
5672	Name the dataset list .
5673	Name of the named dataset .
5674	Loads a picture from the image .
5675	Stop loading of the image .
5676	Notify the source picture .
5677	Notify listeners that the source file has been loaded .
5678	Create a scaling thread .
5679	Gets the size of the image .
5680	Get the string representation of the image .
5681	Gets the merged parts .
5682	Creates a header for a SMTP station .
5683	Determines the SARL SNK types .
5684	Check for valid group .
5685	Set cache directory .
5686	Creates the root directory .
5687	Create a file for the given location .
5688	Removes all files in the cache .
5689	Clean the cache .
5690	Determines if the byte value is a buf table .
5691	Factory method to create a CoordinateAxis
5692	Creates a copy of this axis .
5693	Returns true if the type is numeric .
5694	Get information about this axis .
5695	Gets the calendar from the attribute .
5696	Set the list of rows .
5697	Returns the selected row .
5698	Increment the selected row .
5699	Gets the model index of the column indices .
5700	Set the current index
5701	quick sort .
5702	Swap two strings .
5703	get existing file
5704	Rotate the given lon latitude .
5705	Create an XMLStore from a file .
5706	Create an XMLStore from the input streams .
5707	Create an XMLStore from a resource .
5708	Creates a file name for the given application .
5709	Saves the preferences .
5710	Save the preferences to an output stream .
5711	Write an atomic variable .
5712	This method serializes the DAP structure .
5713	Writes a DAP structure .
5714	Writes a sequence to the specified output stream
5715	Write a record to the output stream .
5716	Returns true if the file is valid .
5717	Get the Wmo ID
5718	Read n record n .
5719	Returns the data at the specified index .
5720	Get the data from a Grib2D file .
5721	Get the data for a PNG image .
5722	Reads a slice of the given slices
5723	Creates a grid file for a given location .
5724	Make a grid file size estimate .
5725	Creates a netcdf file .
5726	Set the list of stations .
5727	Set the selected station .
5728	Pick a station from the grid .
5729	Selects the closest station to the given point .
5730	Returns the currently selected station .
5731	Returns the property name for the given type .
5732	Returns a list of all stations in the given bounding box
5733	Returns a station with the given name .
5734	Returns a DataIterator for a particular station .
5735	Gets a data iterator for a station .
5736	Reads data from the given abbrev file and sets index to the index iterator .
5737	Returns the dot product of this vector .
5738	Normalize this vector .
5739	Normalize this vector .
5740	Set all the services in the given dataset .
5741	Returns the parameter with the given id .
5742	Returns the parameter with the given id .
5743	Adds a prefix .
5744	Add a symbol .
5745	Returns the prefix for a given string .
5746	check if email is ok
5747	Get a parameter by name .
5748	Calculates the CRC of the raw data .
5749	Returns true if the byte is bigger than 255 .
5750	Returns the index of the specified field .
5751	Get the time range name for a given time range
5752	Get the time coordinate .
5753	Set the next polygon .
5754	Sets the previous polygon .
5755	Find property by name .
5756	Set the current projection
5757	Creates a coverage axis for the specified time .
5758	Register a netcdf file .
5759	Registers an IO provider .
5760	Registers an IO provider with the preferred class .
5761	Returns true if the Iospervice is registered with the specified class .
5762	De - registers an IospService .
5763	Check if the location can be opened .
5764	Opens a new NetcdfFile .
5765	Opens a NetcdfFile .
5766	Opens a NetcdfFile in memory .
5767	Opens a NetcdfFile in memory .
5768	Find a global attribute by name ignoring case .
5769	Convert this object to a netcdf element .
5770	Writes CDL to the given output stream .
5771	Write CDL .
5772	Output CDL .
5773	Adds an attribute to the given group .
5774	Adds a new attribute to the given parent group .
5775	Adds the group to the given parent .
5776	Adds a dimension to the group .
5777	Removes the specified dimension from this group .
5778	Adds a variable to the given group .
5779	Adds a variable to the given group .
5780	Adds a string variable to the specified group .
5781	Removes a variable from the given group .
5782	Sends an IOS message to the server .
5783	Create new record structure .
5784	Finalize this layout .
5785	Reads a variable section .
5786	Reads data from a section into a byte channel .
5787	Reads a list of arrays from a list of variables .
5788	Read a variable section from a variable section .
5789	Create a full name for a CDM node .
5790	Returns the full path name with the given parent .
5791	Checks if the given MFile should be included .
5792	Check if the file should be excluded
5793	Returns true if all of the AND filters have been applied .
5794	Append a value to this attribute .
5795	Dispatch check value .
5796	Convert a string value to a specific type .
5797	Checks a byte .
5798	Checks whether a string is a short .
5799	Checks whether a string is an integer .
5800	Checks whether a string is an unsigned integer .
5801	Checks if a string is a float .
5802	Checks whether a string is a double .
5803	Gets the attribute data type .
5804	Check if a dataset is viewable
5805	Returns true if the given string is a valid boolean .
5806	Returns true if the given string is a valid alphanumeric string .
5807	Returns true if the specified alphanumeric string is contained in the specified set .
5808	Returns true if the given path contains only files .
5809	Converts a unicode code point to a hexadecimal string .
5810	Get parameter value .
5811	Compare two grid definitions .
5812	Process input stream .
5813	Processes the next message .
5814	Removes double quotes from a string .
5815	Mark the stack .
5816	Writes an ncdf file to a file .
5817	Get the value from the Redds config
5818	Returns a string representation of the DDL .
5819	Creates a station s station list
5820	Validate this object .
5821	Returns the zimuth .
5822	Returns the current elevation .
5823	Returns the latitudes of this zone .
5824	Returns an array of longitudes .
5825	Returns an array of the altitudes of this RHS .
5826	Returns the azimuths .
5827	Returns the elevation of this polygon .
5828	Returns a new structure with the given names .
5829	Returns a structure containing the given variable name .
5830	Adds a member variable to this structure .
5831	Sets the list of members of this variable .
5832	Sets the parent group of this variable .
5833	Calculates the element size .
5834	Read the structure at the specified index .
5835	Read a vector structure .
5836	Returns a new StructureDataIterator .
5837	Returns the string associated with the given numeric category .
5838	Gets the class name .
5839	Add a parameter .
5840	Gets the header .
5841	Convert a LatLonRect to a projection
5842	Gets the version number .
5843	Determines if the zis is positive .
5844	Delete next file .
5845	Set the color scale parameters
5846	Renders the plan .
5847	Returns true if the group is a child of this group
5848	Get a type by name
5849	Installs the text in the given table .
5850	Set the API key and api key .
5851	Creates a label with the given string
5852	Creates a label with the specified lines .
5853	Creates a label with the specified text .
5854	Connect to Cloud SQL .
5855	Parses the cloudSpTypes string .
5856	Create a new connection with the given properties .
5857	Removes the given logger .
5858	Compiles all source codes .
5859	Compiles a class .
5860	Adds a source code for a class .
5861	Read graphic control extension
5862	Decode the next frame .
5863	Returns a list of the person s person names .
5864	Initialize list events .
5865	Returns the person with the given id .
5866	Adds validation messages to the given validator .
5867	Set the person id
5868	Creates and invokes a new view model .
5869	Creates a view model from the given view .
5870	Loads the list of countries .
5871	Loads the list of subdivisions .
5872	Adds a new string property .
5873	Returns an immutable string property with an immutable setter .
5874	Creates a new Java view step .
5875	Create a new FxmlViewStep
5876	Clears the map .
5877	Creates the index events .
5878	Safely access the given callable .
5879	Loads a view tree from a view .
5880	Creates fxml path .
5881	Query for a style mapping row
5882	Get pixel value
5883	Get the pixel values of a PNG image .
5884	Validate the image type
5885	Create an image with the specified tile width and height
5886	Set the tile data
5887	Execute a raw query .
5888	Wraps the raw query and returns a CursorResult
5889	Queries the database .
5890	Queries a user query .
5891	Convert Cursor to TResult
5892	Get the feature row for the given geometry
5893	Register a table .
5894	Retrieves the tile for the specified tile
5895	Get the coverage data for the tile
5896	Get coverage data
5897	Get coverage data
5898	Get the results for the tile matrix .
5899	Get the coverage data tile results in the bounding box
5900	Get the results in the tile matrix
5901	Get the results from the tile matrix
5902	Get the tile matrix for the requested coverage .
5903	Get the coverage data value
5904	Set the icon for the icon row
5905	Returns the icon for the given geometry type
5906	Open the bindings db .
5907	Decode byte array .
5908	Compress bitmap to byte array
5909	Create a new table
5910	Delete the table and table name
5911	Get or create a table metadata
5912	Get the ID of the GeoPackage
5913	Creates table metadata .
5914	Create a new extension
5915	Retrieves the feature row for the specified cursor .
5916	Execute a raw query on the database .
5917	Query for features within the bounding box
5918	Query for a given geometry envelope
5919	Return the count of points within the envelope
5920	Query for a user custom cursor
5921	Build the WHERE clause for the table
5922	Query for features within the bounding box
5923	Get the number of features in the bounding box
5924	Query for features within the envelope
5925	Query for features .
5926	Returns the number of records within the specified range .
5927	Sets the bitmap to the given format
5928	Sets the bitmap .
5929	Set the bitmap compression config
5930	Get the number of tiles in the map
5931	Adjust the bounds of the bounding box .
5932	Adjust the bounding box to use for Google Maps .
5933	Adjust the bounding box in the tile grid .
5934	Adjust the bounding box for the requested tile .
5935	Get the tile bounding box for the specified zoom level .
5936	Get the tile grid for the specified zoom level .
5937	Query for a tile
5938	Query for tile by zoom level
5939	Get the closest zoom level for the specified length
5940	Get approximate zoom level .
5941	Query for tile grid
5942	Delete the tile at the specified zoom level
5943	Get the number of tiles at the specified zoom level
5944	Check if the tile matrix is Google Maps .
5945	Gets the pixel value of the image .
5946	Gets the pixel values of the image .
5947	Validate the image type
5948	Creates image .
5949	Sets the pixel value in the image at the specified position
5950	Get or create a GeoPackage by name .
5951	Returns the current row
5952	Move invalid cursor to next invalid cursor
5953	Query by base id
5954	Delete by base id and geometry type
5955	Get a rectangle containing the specified width and bounding box .
5956	Get rounded float rectangle .
5957	Delete missing databases .
5958	Creates and closes the database .
5959	Check if the database is valid
5960	Validate database .
5961	Validate database .
5962	Validate database .
5963	Validate the database header
5964	Check if the database header is valid
5965	Add internal databases .
5966	Add external databases .
5967	Import a GeoPackage from a GeoPackage stream .
5968	Get the GeoPackage metadata
5969	Get the GeoPackageMetadata for the given path
5970	Creates a new object with the given metadata .
5971	Populate a GeometryMetadata .
5972	Delete the Geometry table
5973	Creates or updates the specified metadata .
5974	Update the table with the given metadata
5975	Get the number of records in the table
5976	Creates a new GeometryMetadata object from a Cursor .
5977	Update rows by where clause
5978	Draws a tile with the specified text .
5979	Retrieves a list of attributes from the database .
5980	Check if the cursor is ok .
5981	Get UserMapping DAO
5982	Get a SimpleAttributes DAO
5983	Get the mappings for a given extended relation .
5984	Get the mappings for a given extended relation
5985	Determines if the base id has a mapping between the base id and related id
5986	Get count of a userCustomCursor .
5987	Register a cursor wrapper for the table
5988	Create a UserCustom DAO
5989	Get the tile in the request bounding box
5990	Draw the tile .
5991	Reproject tile .
5992	Retrieve the tile results for the bounding box
5993	Calculate the draw overlap
5994	Set the density
5995	Set the line paint
5996	Set the Paint object to use .
5997	Draws the tile at the specified zoom level .
5998	Draws a tile at the specified location and zoom level
5999	Draws a bitmap from the tile coordinates
6000	Query for feature count
6001	Query for features in the bounding box
6002	Query for feature indexes
6003	Query for features in the bounding box
6004	Draw all features in the specified tile
6005	Simplify the list of points .
6006	Get the paint for the feature style
6007	Get the paint for the feature style
6008	Get the paint for the feature style
6009	Get the paint for the feature style
6010	Get the style paint for the feature style
6011	Get the style paint for the style
6012	Get the paint for a style row
6013	Get the paint for a specific style
6014	Put a bitmap for the icon row .
6015	Creates a bitmap for the icon
6016	Wrap a ContentValues .
6017	Create a bitmap from the layers .
6018	Recycle the layers .
6019	Get the bitmap for a layer .
6020	Get the canvas for a layer .
6021	Create the bitmap andvas
6022	Get the style mapping DAO
6023	Get the style DAO
6024	Get the icon DAO
6025	Get the feature styles for a feature table
6026	Get the styles for the feature table
6027	Get the style for the feature table
6028	Get the icons for the feature table
6029	Get the icon for the feature table
6030	Get the feature styles for a feature row
6031	Get the feature styles for the feature table
6032	Get the styles for a feature row
6033	Get the icons for a feature row
6034	Get the styles for a feature id
6035	Get icons for a feature id
6036	Set the feature styles for the feature table
6037	Set the style for the feature table
6038	Set the icon for the feature table
6039	Set the feature styles for a feature row .
6040	Set the feature styles for the feature table
6041	Sets the styles for a feature row .
6042	Set the styles for the feature table
6043	Set the style for the feature row
6044	Set a style for a feature row
6045	Set a style for the feature table
6046	Sets the icons for a feature row
6047	Set the icons for the feature table
6048	Set the icon for a feature row
6049	Sets the icon for a feature row
6050	Sets the icon for the given feature table .
6051	Gets the style id .
6052	Gets or creates a new icon id .
6053	Insert a new style mapping
6054	Delete the style mapping for the feature table
6055	Delete the icon for the feature table
6056	Delete the style mappings for the feature table
6057	Delete the style mapping for the feature table
6058	Delete the style mapping
6059	Get all style ids for a feature table
6060	Get all icon ids for a feature table
6061	Get all style ids for a feature table
6062	Get all icon ids for the feature table
6063	Gets the image bytes .
6064	Flushes the image .
6065	Get the pixel value in the image .
6066	Reads pixels from the image .
6067	Draw the feature in the tile
6068	Draw a line path
6069	Draw polygon path
6070	Add a line to the bounding box
6071	Add a polygon
6072	Get the cache for the given table .
6073	Remove a feature row from the database .
6074	Clear all cached cache entries .
6075	Get the cached styles .
6076	Returns the cached icons .
6077	Get the RTree Index Table DAO
6078	Set the width of the column
6079	Set the height of the table
6080	Get the width and height of the image .
6081	Computes the tile density of the specified density .
6082	Read blob value .
6083	Read a custom table from a GeoPackage .
6084	Returns the color or a default color .
6085	Validate the color
6086	Creates a color from hex and opacity .
6087	Create a new instance of the GeoPackageManager .
6088	Set the progress
6089	Performs the index of the specified types
6090	Index a row
6091	Deletes the index .
6092	Deletes the index of a row
6093	Deletes the index types for the given geometry id
6094	Delete the index of the feature table
6095	Check if location is indexed .
6096	Get the list of types indexed by index .
6097	Query for feature index results
6098	Returns the number of features in the indexer
6099	Get the bounding box
6100	Query for features within the bounding box
6101	Get the index type .
6102	Get internal file .
6103	Gets the path to an internal file .
6104	Returns the geometry type .
6105	Set the geometry type
6106	Returns true if the url has bounding box
6107	Replace XYZ coordinates in url
6108	Checks if the URL has XYZ .
6109	Replace the bounding box in the url
6110	replace the bounding box
6111	Get the geometry data
6112	Index the row
6113	Update the last indexed time
6114	Deletes the index .
6115	Delete index
6116	Returns true if the feature is indexed .
6117	Query for the table
6118	Query for features within the bounding box
6119	Get the count of entities within the bounding box
6120	Return a cursor for the geometry
6121	Get the count of entities within the Geometry Envelope
6122	Query for features within the bounding box
6123	Get the number of features in the bounding box
6124	Get the bounding box of the feature
6125	Get the metadata for a cursor .
6126	Get the FeatureRow associated with a Cursor .
6127	Get the feature row for the given geometry metadata .
6128	Get the list of tile DAOs for the feature table
6129	Get the list of feature DAOs for the tile table
6130	Get the bounding box
6131	Query by base id
6132	Retrieves a list of unique base ids from the database .
6133	Retrieves a list of unique IDs from the table
6134	Delete by base id
6135	Delete by related id
6136	Delete by id
6137	Builds the WHERE clause for the base id and related id columns
6138	Create a new GeoPackageMetadata
6139	Delete the table
6140	Rename the metadata
6141	Renames the name
6142	Get all GeoPackageMetadata
6143	Get the metadata for a database .
6144	Get metadata by id
6145	Get or create a GeoPackageMetadata
6146	Check if a database is external
6147	Get the external package metadata
6148	Get metadata where column name matches the given name
6149	Get metadata where column name is not like
6150	Get metadata where name like
6151	Creates a GeoPackageMetadata object .
6152	Called when the view is created .
6153	Adds the parallax view to the list of parallax views .
6154	On createView .
6155	Creates a custom view .
6156	This method is called by sub - appender .
6157	Find logback config file from system properties .
6158	Get a resource from the classloader
6159	Configure the status listener .
6160	Log status on a resource search .
6161	Convert an address to a string .
6162	Creates a new executor service .
6163	Start all converters .
6164	Performs sub - appending .
6165	Adds a substitution property .
6166	Returns the value of the given key .
6167	Compile a tree .
6168	type = T
6169	get Curent Token
6170	Overrides the default escaping .
6171	Returns a regular expression for a fixed date .
6172	Initialize the event .
6173	Ends the lifecycle .
6174	Initializes the LoggerContext
6175	Creates a dynamical ContextSelector from a String .
6176	Sets up the application s properties .
6177	Returns the path to the mounted external storage directory .
6178	Gets the database directory path .
6179	Get absolute file path .
6180	Evaluates the logging event
6181	Returns the discriminator value associated with the event .
6182	Update the mask .
6183	Gets the next filter .
6184	Creates an array of key managers .
6185	Creates an array of trust managers .
6186	Creates a KeyStoreFactory from System properties
6187	Returns the location of a system property .
6188	Returns the URL for the given location .
6189	Check if the chain has a throwable .
6190	Stop the logback context .
6191	Prints warnings in the given context .
6192	Prints warnings if errors occurred .
6193	Prints a warning message .
6194	Handle first line of throwable .
6195	Returns the entry from the map .
6196	Mark the given key as endOfLife .
6197	Parses a string into a FormatInfo object .
6198	Rename a file .
6199	Determine if the target file is on the same volume .
6200	Returns the value of the given key .
6201	Gets an Android system property .
6202	Set the MDCPropertyMap for this Event .
6203	Output MDC for all keys .
6204	Extracts the stack trace from the given exception .
6205	Check if the current class is in framework space list .
6206	Adds a new status to the list .
6207	Adds a listener to the console .
6208	Lookup an implicit action .
6209	Returns the list of applicable actions for the given element path .
6210	Set the class loader to use .
6211	Get a string from System properties
6212	Gets a boolean .
6213	Decompitalize a string .
6214	Returns an array of MethodDescriptors .
6215	Returns an array of PropertyDescriptors for the given class .
6216	Start the appender .
6217	Add a OnConsoleStatusListener instance .
6218	Removes the property value from the object stack .
6219	Returns the value of the specified logger .
6220	Returns true if the logging event is discardable .
6221	Initializes the shutdown hook .
6222	Ends the shutdown hook .
6223	Returns enabled protocols .
6224	Returns enabled cipher suites .
6225	Returns the list of strings that are included in the given array .
6226	Convert a string to a scope
6227	Sets the properties in the given interpreter .
6228	Adds an appender to the list of appenders .
6229	Removes the specified appender from this group .
6230	Removes the appender with the given name .
6231	Update the effective parent level .
6232	Call appenders .
6233	Detaches the specified appender from this manager .
6234	Creates a new child logger with the given last name .
6235	Call turbo filters .
6236	Logs a logging event .
6237	Creates a socket .
6238	Create missing parent directories .
6239	Returns the integer value as integer .
6240	Converts an integer to a level .
6241	Get the occurrences of a resource in the given classloader .
6242	Returns the URL of the given resource .
6243	Returns the class loader for the given object .
6244	Returns the class loader of the given class .
6245	Gets the class loader of the given class .
6246	Starts the appender .
6247	Gets the tag .
6248	Processes the content of the substitution property .
6249	Gets the index of the first separator index of a string .
6250	Determines whether or not the given event should be included .
6251	Returns the thread name for the client .
6252	Checks if two files are on the same file store .
6253	Start the mail .
6254	Append an event .
6255	Fills the buffer .
6256	Adds a new MDCValueLevelPair .
6257	Creates a converter for the given keyword .
6258	Creates a composite converter instance .
6259	Determine compression mode .
6260	Configure the given URL .
6261	Configure a file from a file .
6262	Configures the given InputStream .
6263	Builds the interpreter .
6264	Configure the SAX SAX SAX parser .
6265	Configures the interpreter .
6266	Returns the value of the specified key .
6267	Set the name of this context .
6268	Returns true if the given context has status listener .
6269	Returns the time of the last reset .
6270	Parse the pattern .
6271	Gets the effective converter map .
6272	Get the HTML file header .
6273	Returns the file footer .
6274	Initializes the appender .
6275	Ends the life cycle .
6276	Copy clients .
6277	Add a client .
6278	Remove a client from the list .
6279	Gets a copy of the context map .
6280	Gets value of given type .
6281	This method is invoked by the caller .
6282	Determines if the operating system is running .
6283	Initialize the LoggerContext
6284	Returns all files in a folder that match the given stem regex .
6285	Retrieves a list of status messages .
6286	Convert a string to a numeric numeric integer .
6287	Returns the database file corresponding to the specified filename .
6288	Clears logs .
6289	Check if lastCheck is expired .
6290	Sub append .
6291	Performs secondary sub append .
6292	Bind logging event .
6293	Returns the string truncated by the given object .
6294	Compute the mask for a logging event .
6295	merge properties from event map
6296	Insert exception .
6297	Returns the length of the prefix of this path .
6298	Returns the effective level .
6299	Set the value of the specified property .
6300	Checks if the given class is unquoted .
6301	Create child value .
6302	Process an include .
6303	Open a URL .
6304	Removes the head and tail tags from the recorder .
6305	Check if server should start .
6306	Check if the response is transient .
6307	Set default hosts .
6308	Ensures that the index exists .
6309	Synchronously synchronously synchronously .
6310	Synchronously sync the mirror .
6311	Wait for a task
6312	List indexes in the app dir
6313	Convert an InputStream to a String
6314	This function converts an InputStream to a byte array
6315	Consumes the connection and closes the connection .
6316	Returns the list of hosts that are up .
6317	Sets the type of the Places .
6318	Starts the browse .
6319	Put a value into the cache .
6320	Get the value associated with the specified key .
6321	Waits for completion .
6322	Compare two versions .
6323	Reports an exception .
6324	Copies a directory to the given target directory .
6325	Initializes the simulation properties file .
6326	Get the value of a static field .
6327	Gets a method by name .
6328	Format a percentage .
6329	Format a double .
6330	Format a long .
6331	Read a character .
6332	Convert a byte to a hex value .
6333	Write a byte array .
6334	Write a numeric integer .
6335	Write a double .
6336	Read JSON string .
6337	Read JSON numeric chars .
6338	Reads a JSON integer .
6339	Read a double .
6340	Read a JSON string .
6341	Executes the given method call .
6342	Send a request .
6343	Enqueue a method call .
6344	Get the IFile object for the given location .
6345	Updates the decoration .
6346	Refreshes the repository view .
6347	Returns the resource history view .
6348	Opens an editor with the given name .
6349	Reports an authentication failure .
6350	Prompts for authentication .
6351	Creates the default page .
6352	Start the animation thread .
6353	Sets the keepAll alive flag .
6354	Sets whether or not the element should be ignored .
6355	Creates a new owner .
6356	Adds a new condition factor .
6357	Creates a new condition term from a stream tokenizer .
6358	Returns true if the condition term matches this condition .
6359	Gets DDL content .
6360	Loads dsl config file .
6361	Reads the configuration from the given input stream .
6362	Gets the menu .
6363	Adds a response body .
6364	Adds an href .
6365	Inserts a new href before this element .
6366	Remove an existing href element .
6367	Adds a new prop stat .
6368	Gets the href .
6369	Returns the status of the node .
6370	Returns the stack frame associated with the given value .
6371	Checks if the given class is a subtype of the given class .
6372	Checks if a collection contains a specific proposal .
6373	Clone a node .
6374	Resets the input stream .
6375	Create the actions .
6376	Adds a connection to this group .
6377	Returns the value of the specified property .
6378	Removes a connection from this group .
6379	Sets the location of the radar .
6380	Sets the value of the specified property .
6381	Sets the size of the gauge .
6382	Dumps the given constraints .
6383	Adds a new lock entry .
6384	Adds a vertex to the graph .
6385	Removes a child vertex .
6386	Initializes the preference store .
6387	Stops the bundle .
6388	Get a string from the resource bundle
6389	Returns the resource bundle
6390	Get the form colors for the rule builder .
6391	Set date time .
6392	Set the date and parse it .
6393	Creates an error .
6394	Logs an error .
6395	Adds a new field editor .
6396	Update grid layout .
6397	Apply the font .
6398	Calculates the maximum number of columns .
6399	Initialize the fields .
6400	Fire a property change event to all registered listeners .
6401	Sets the active editor .
6402	Adds the zoomer to the tool bar .
6403	Determines the dialect .
6404	Create a new context based on the given user context and locator .
6405	Saves the current workspace .
6406	Create table listeners
6407	Creates the table .
6408	Adds the given value to the cache .
6409	Adds an entry to the cache .
6410	Adds a new token .
6411	Adds a child to this node .
6412	Sets the file .
6413	Adds a new condition .
6414	Adds a state token to a resource URI .
6415	Returns true if the condition matches the given condition .
6416	Returns the first prop .
6417	Gets the current status .
6418	Creates a new prop .
6419	Get last line from back text
6420	Get last non - dash line from back text
6421	Binds a binding to a given id .
6422	Binds two bindings
6423	Gets the message with the given bindings .
6424	Creates the process .
6425	Create the process sample JUnit .
6426	Returns the runtime id .
6427	Visit a Rete .
6428	Visit a node .
6429	Generates a dot id for an object .
6430	Adds a remove property .
6431	Adds a set property .
6432	Returns a new locator for the given resource URL and label .
6433	Get the presentation reconciler .
6434	Returns true if the given object is the same as the other .
6435	Checks if the condition term matches the given condition .
6436	Creates a new condition factor from a stream tokenizer .
6437	Add the text to the text editor .
6438	HTTP DELETE request
6439	Performs a POST request .
6440	Gets the status of a job .
6441	Execute the pull operation .
6442	Handles pull results .
6443	Sets the value at the given index .
6444	Adds a new active lock .
6445	Filter proposals by prefix
6446	This method is used to read a prefix from a document .
6447	Calculates a row list of rows .
6448	Renders the image .
6449	Creates the edit part for the given element
6450	Returns the image descriptor associated with the specified path .
6451	Declares an image registry .
6452	Adds a vertex at the specified depth .
6453	Returns the row index of the given vertex .
6454	Gets the column width .
6455	Debugging method for debugging .
6456	Optimized optimization .
6457	Load a RETE model .
6458	Initialize the graphical viewer .
6459	Draws a new graph .
6460	Returns the line breakpoint for the given source .
6461	Sets the href .
6462	Checks to see if the server can talk to .
6463	Copy a node to a destination .
6464	Examines the response .
6465	Extract properties from a multi - status map .
6466	Get the content of the node .
6467	Returns an enumeration of the active locks .
6468	Get property by name .
6469	Performs HEAD .
6470	Attempt to acquire a lock .
6471	Move a file to a destination .
6472	Check to see if the server is valid .
6473	Refreshes the lock .
6474	Remove a set of properties .
6475	Remove a property .
6476	Sets the content of an input stream .
6477	Set the specified properties .
6478	Sets a property .
6479	Unlock .
6480	Update version .
6481	Request version control .
6482	Deletes a node .
6483	Examines a status code .
6484	Check if a property has a child with given name .
6485	Write the request body .
6486	Convert byte array to hex string
6487	Convert an int array to a hex string .
6488	Sets whether this node is all -prop elements .
6489	Sets the name of the property .
6490	Sets the prop .
6491	Removes the last word from a prefix .
6492	Updates the source tree .
6493	Writes the response to the specified output stream .
6494	Step over the current thread .
6495	Mark errors as markers
6496	Skip whitespace .
6497	Add a single file to guv server
6498	Updates the changes of a file
6499	Gets the age .
6500	Returns the value of the Content - Length header .
6501	Gets the maximum allowed forward .
6502	Gets the flag indicating whether or not .
6503	Determines whether or not the task should be shown or not .
6504	Returns the timeout value .
6505	Adds a string value to the context .
6506	Set the timeout .
6507	Opens a DSL file .
6508	Parse the contents of a file .
6509	Get object metadata string .
6510	Strips the object metadata .
6511	Add tokens to a node .
6512	Returns the children of the given condition .
6513	Returns an array of children with the given object .
6514	Adds a child to a list of strings .
6515	Prints the tree .
6516	Recursively prints a tree .
6517	Prints tabs .
6518	Creates a JsonValue from a string .
6519	Get an image descriptor by its id .
6520	Performs the authorization .
6521	Sets a request header field .
6522	Create a Java file that contains the Java code for example .
6523	Create rule .
6524	Create the rule flow .
6525	Create the Java template for the rule flow sample .
6526	Get the list of IUsableUnit items
6527	Creates an image .
6528	Gets the field name .
6529	Gets the evaluator .
6530	Gets the field value .
6531	Add guvn resources to the properties file
6532	Executes the specified baseline .
6533	Bind a member .
6534	Returns a locator for a member .
6535	Optimize the graph .
6536	Initialize the controls .
6537	Validate the page .
6538	Generates an entity tag .
6539	Returns the opposite of the given vertex .
6540	validate OPS
6541	Check if the user belongs to a user .
6542	get username from file
6543	Add yubikey to a file
6544	Verify OATH .
6545	Clears the current password .
6546	Returns the public id of the given OTP .
6547	Determines if the specified string is valid .
6548	Creates an Evaluation with the given source and source .
6549	Create an Evaluation object
6550	Clears the cache .
6551	Returns true if this class is in jdk .
6552	Returns the package name of the specified object .
6553	Gets the package name from a class .
6554	Get unique descriptor for given object .
6555	Gets the type of the argument .
6556	Checks if two classes are more specific .
6557	Determine the appropriate method for the given parameters .
6558	Returns the value of the given property on the given target object .
6559	Returns a map of all property descriptors for the given target class .
6560	Gets a PropertyDescriptor from an array of Object .
6561	Gets the read method .
6562	Reads a character .
6563	Parse a projection .
6564	select all elements
6565	Returns the long value as a long .
6566	Converts value to double .
6567	Convert value to BigInteger
6568	Convert value to BigDecimal
6569	Convert value to string .
6570	Get the numeric type of the given value .
6571	Converts the given value to the given type .
6572	Converts value to integer .
6573	Returns the numeric type for the given types .
6574	Get the numeric type of two objects .
6575	Creates a new Number .
6576	Removes the current evaluation .
6577	Generate an OGNL getter method .
6578	Generate an ognl setter .
6579	Flattens the tree .
6580	Initializes the result .
6581	Returns the escaped character .
6582	Sets the root .
6583	Gets the value of the given expression .
6584	Sets the value to the given value .
6585	Sets the value of the given object .
6586	Returns true if expression is constant .
6587	Returns default watch service id .
6588	Wait for the server started .
6589	Read file .
6590	Loads the current class loader .
6591	Returns an archiver with the specified name .
6592	Checks the given archiver for problems .
6593	Reads the contents of a file into a string .
6594	Creates the project .
6595	Add a system property to the Java system .
6596	Add a system property to the Java system .
6597	Open dialog .
6598	Change the selected directory .
6599	Refresh the button state .
6600	Creates a new file observer .
6601	Returns the currently selected folder .
6602	Create new folder .
6603	Validates a file .
6604	Start a background job .
6605	Start a list .
6606	Ends a list .
6607	Handle motion .
6608	Gets the crop rectangle .
6609	Compute the crop rectangle .
6610	Register the given listener and media factory .
6611	Add the span watcher to the text .
6612	Get the view of the spinner .
6613	Gets the drop down view .
6614	Convert a Spanned text .
6615	Sort text within a paragraph .
6616	Creates a unique file .
6617	Determines the original file from the given Uri .
6618	Returns the name of an attribute .
6619	Returns the local name of the given name .
6620	Sets an attribute .
6621	Sets an attribute .
6622	Returns the font name of the specified file .
6623	Returns the font name of the specified file .
6624	Adds a new buffer to the buffers .
6625	Writes a portion of an array of bytes .
6626	Write a single byte .
6627	Reads from an input stream .
6628	Writes all remaining bytes to the given output stream .
6629	Converts this buffer to a byte array .
6630	Set the font size
6631	Replace the separators to unix .
6632	Recompute focus .
6633	Ensure the view is visible .
6634	Center the zoom based on the highlight view
6635	Resets the document locator .
6636	Validate the given value .
6637	Define an element type .
6638	Sets the value of an attribute .
6639	Sets the parent of the given name .
6640	Returns the element type with the given name .
6641	Returns the integer value associated with the given name .
6642	Cleans up all paragraphs in the given editor .
6643	Applies the specified value to the specified editor .
6644	Returns true if the specified domain is a valid domain .
6645	Called when an operation is executed .
6646	Performs all undone changes in the given editor .
6647	Replace all occurrences of a string .
6648	Gets the thread status .
6649	Sets the options for the given thread .
6650	Determines if a thread can be decoded .
6651	Decodes a bitmap .
6652	Gets a set of all registered fonts .
6653	Gets the font fonts .
6654	Gets the system fonts .
6655	Sets up the elements .
6656	Returns a Reader for the given InputSource .
6657	Get input stream from publicid and systemid
6658	Updates the attribute name .
6659	Expand entities in a string .
6660	Lookup an entity in the buffer .
6661	Restart saved .
6662	Pop the element from the stack .
6663	Removes an element from the stack .
6664	Returns the prefix of a name .
6665	Determines if the given prefix and namespace is foreign .
6666	Removes leading and trailing quotes from a string .
6667	Splits a string into an array .
6668	Rectify an element .
6669	Compute the name of a file .
6670	Sets the state of the instance .
6671	Unregisters all registered editors .
6672	Called when a media event is triggered .
6673	Replace the event in the main thread .
6674	Gets the view matrix for the view .
6675	Calculates the maximum zoom level .
6676	Determines if the text is in the EditText .
6677	Find the span in the given paragraph .
6678	Encodes the given URL .
6679	Decode query string .
6680	Pick a directory
6681	Rotate image .
6682	Sets the output writer .
6683	Writes a single character .
6684	Writes a string .
6685	Determines whether a boolean attribute is a boolean attribute .
6686	Write escaped string .
6687	Write namespace declarations .
6688	Write a name .
6689	Creates a stream if it does not already exists .
6690	Wait for stream creation .
6691	Complete snapshot snapshots with missing instances .
6692	Wait for the next provisioning request .
6693	Handles a GetRecord request .
6694	Perform an action with retries .
6695	Tries to perform an action on AWS action .
6696	Checks if the specified bucket is accessible .
6697	Loads entities from the snapshot store .
6698	Triggers the wildcard expansion handler .
6699	Replace occurrences of oldPattern with newPattern
6700	Remove any characters from the input string .
6701	Adds a report to the report .
6702	Updates properties with the given key .
6703	Gets the config properties .
6704	Creates an input stream for the wro file .
6705	Convert pre - processors to post processors .
6706	Compile the given content .
6707	Reloads the cache .
6708	Reload the model with the given value .
6709	Gets the wrapped servlet request .
6710	Creates a Transformer transformer .
6711	On error .
6712	Sends a redirect to the given location .
6713	Process a resource .
6714	Creates a handler that can be used to expand files in a group .
6715	Locates input stream .
6716	Creates the WroConfiguration object .
6717	Register cache update listeners .
6718	Process a request .
6719	Sets the WroConfiguration object .
6720	Identify duplicate group names .
6721	Merge the given WroModel into this WroModel .
6722	Locates an input stream .
6723	Apply post processors
6724	Creates a processor that wraps the supplied processor .
6725	Process a resource .
6726	Splits the given string into an array of options .
6727	Loads properties from an input stream .
6728	Parses properties from a string .
6729	Creates a custom WroManagerFactory .
6730	Persists the fingerprint of the given groups .
6731	Checks if the given group is a target group .
6732	Extend plugin classpath .
6733	Replies the default model for the model .
6734	Initialize WroManagerFactory .
6735	Sets the model transformer .
6736	Compiles the given content .
6737	Process all resources .
6738	Process all resources and merge them together .
6739	Run the given resources in parallel .
6740	Apply all pre - processors .
6741	Decorate a ResourcePreProcessor .
6742	Persists the fallback storage .
6743	Get all fields of the given object .
6744	Rewrite image url .
6745	Compute a new image location .
6746	Adds a model transformer .
6747	Called when the bundle is processed .
6748	Initialize the folder path .
6749	Extracts a map of variables .
6750	Parse CSS .
6751	Replaces all variables in the CSS .
6752	Convert a post processor to a pre processor .
6753	Checks if the requested resource is eligible for a search .
6754	Applies gzipped response .
6755	Returns a new PathPatternProcessor that wraps the supplied patterns .
6756	Creates a new PathPatternProcessor that will be excluded from the given processor .
6757	Creates a new resource change handler .
6758	Remember the fingerprint of a resource .
6759	Apply a function to each import .
6760	Filter null list .
6761	Replies if the request is minimized .
6762	Find imported resources .
6763	Compute absolute url .
6764	Creates a string from a list of strings .
6765	Gets the aliases list .
6766	Creates a JavaScript object .
6767	Evaluates the expression and returns the result .
6768	Evaluates a JavaScript script .
6769	Process the resources .
6770	Checks if the given request is a handler request .
6771	Creates the request path .
6772	Rename a group from an input stream .
6773	Determines the destination folder for the given resource type .
6774	Process a group .
6775	Check if change has changed
6776	Locates input stream for given URI .
6777	Creates an object pool .
6778	Locates a stream from a jar file .
6779	Open a JAR file .
6780	Extract path from URI .
6781	Checks if the group is minimized .
6782	Adds multiple locators .
6783	Convenience method to decorate a WroModelFactory .
6784	Adds the specified require .
6785	Process the given content .
6786	Logs the summary .
6787	Processes a resource .
6788	Returns a new readWriteLock for the given key .
6789	Creates a process .
6790	Parse the property contents .
6791	Get task info .
6792	Gets the compilation command .
6793	Parse header .
6794	Adds no - cache headers to the map .
6795	Extract path info from a location string .
6796	Gets the servlet path from the given location .
6797	Check if the given path matches the given path .
6798	Loads a pattern from the classpath .
6799	Safe copy .
6800	Creates a temporary file with the given extension .
6801	Clean image url .
6802	Sets an attribute .
6803	Generate data URI from input stream .
6804	Generate data URI .
6805	Sets the context .
6806	Unset the global correlation id .
6807	Check if group is changed .
6808	Called when an exception occurs .
6809	Check if resource is changed .
6810	Updates the hash for the group .
6811	Check if there are any resources of the given type .
6812	Creates a process .
6813	Encodes a Java object .
6814	Process group elements .
6815	Parse group element .
6816	Create a group .
6817	Parses a resource element .
6818	Gets the resources associated with the given group .
6819	Logs the timer .
6820	Stop a named timer .
6821	Get a timer with the given name .
6822	Get a named timer .
6823	Print the saturation statistics .
6824	Wake up the workers .
6825	Updates the processed counters .
6826	Update the finished counters .
6827	Updates the counter if it is greater than the given value .
6828	Default implementation .
6829	Instantiates a property .
6830	Resets the loading phase .
6831	Attempt to restore the saturation .
6832	Returns true if the class is inconsistent .
6833	restore the ontology
6834	restore the instance s taxonomy
6835	Gets the evidence .
6836	Performs pre - execution .
6837	Invalidate all children .
6838	Gets the collection of individuals toAdd .
6839	Returns the collection of individual individuals that have been removed .
6840	Creates an UnsupportedOperationException with the given method name .
6841	Removes element at specified position .
6842	Removes the element at the specified position .
6843	Returns the index of the removed element .
6844	Returns true if element is present in d array .
6845	Adds the specified element to the specified array .
6846	Checks that the occurrence numbers are valid .
6847	Adds the timer to this timer .
6848	Adds timer to the timer .
6849	Put key and value in the array .
6850	Removes an entry from the map .
6851	Enlarges the map .
6852	Shrink the map .
6853	Saves the given configuration to the given file .
6854	Prints class declarations to a writer
6855	Gets all instance nodes from a given entity .
6856	Removes all elements from this set .
6857	Combine multiple hashes .
6858	Combine multiple hashes .
6859	Copy input stream to output stream .
6860	Creates a new monitor that will be used to visualize the reasoner .
6861	Processes a taxonomy .
6862	Submits an input to the queue .
6863	Writes an element to the given appender .
6864	Mark the given index as not computed .
6865	Adds a new direct type node .
6866	Checks if the property chain matches the start position
6867	Returns a subset consisting of the elements of the given input .
6868	Returns a new set consisting of the elements of the input set .
6869	Adds an element to the set .
6870	Removes an object from the set .
6871	Adds the given counter to this counter .
6872	Log memory usage .
6873	Sets the configuration options .
6874	Shuts down the reasoner .
6875	Print header .
6876	Prints values to the console .
6877	Gets a string of n characters .
6878	Adds the given counter to the given counter .
6879	Writes a resource .
6880	Gets the action input parameter .
6881	Returns the property descriptor for the given property path .
6882	Get all required parameters
6883	Checks if is a single value type .
6884	Adds a rel .
6885	Sets the media type .
6886	Adds a link to the link parameters .
6887	Adds a revision .
6888	Adds a link parameter .
6889	Expand the partial URI .
6890	Gets the rels .
6891	Gets the list of revisions .
6892	Returns true if any of the required variables have been satisfied .
6893	Get the value as a String
6894	Returns true if the specified property is hidden
6895	Determines whether or not the given property is contained in the input annotation .
6896	Returns true if the input annotation has an explicit property value .
6897	Returns true if the request is required .
6898	Returns the default value .
6899	Returns the name of the parameter .
6900	Get the name of the exposed property .
6901	Returns the vocabulary for the specified mixin .
6902	Get the query string .
6903	Append the form for the action .
6904	Prints an input button .
6905	Append an input or select value
6906	Adds all action descriptors to this builder .
6907	Returns the URI template components as a component .
6908	Strip optional variables from an action .
6909	Gets the first node with the given name .
6910	Gets the first node by rel .
6911	Returns an iterator over the root node .
6912	Construct a PersistentHashMap from the given iterable .
6913	Construct a PersistentTreeMap from the given list of entries .
6914	Empty empty tree map .
6915	Returns an immutable view of this map .
6916	Returns the last key in this map .
6917	Construct a Xform from an iterable .
6918	Loops through an iterable and returns the result
6919	Returns a copy of the elements that satisfy the given predicate .
6920	Returns a sequence consisting of the results of applying the given ident to each element .
6921	Constructs a tuple from the given map entry .
6922	Performs the first match .
6923	Registers a list of types .
6924	Returns the element at the specified index .
6925	Adds a new element to the end of the list .
6926	Concatenate the given iterable .
6927	Create a MutableSet from the given items .
6928	Create a MutableVector from the given items .
6929	Creates a set backed by the specified items .
6930	Construct a vector from the given items .
6931	Returns an unmodifiable unmodifiable array
6932	Create a StringBuilder with spaces .
6933	Build a string representation of an array .
6934	Construct a lazy reference from a producer function .
6935	Releases the entry if any .
6936	Inserts an item into an array .
6937	Creates a copy of an array .
6938	Suspend the current thread .
6939	Called when the transaction is started .
6940	Builds a list of component descriptors from a jar file .
6941	Validates a directory .
6942	Creates an inheritance link .
6943	Copies all methods from source to destination .
6944	Copies the given methods to the destination .
6945	Recursively perform the tree .
6946	Remove the sbbEntity with the current class loader .
6947	Returns whether or not the given parameter is enabled .
6948	Gets all the referenced entities that are not referenced by the container .
6949	Installs a Service .
6950	Uninstalls the specified service .
6951	Checks if a resource link name is referenced by a resource adapter .
6952	Returns an array of usage parameters for the given SbbID .
6953	Resets all usage parameters .
6954	Get a collection of profiles
6955	Method to get the Activity Activity activity
6956	Get a collection of profile IDs for the specified attribute .
6957	Display the result .
6958	Creates a string representation of an array .
6959	Executes the fire event .
6960	Binds a name to the specified name .
6961	Unbinds a name .
6962	Looks up a node by its name .
6963	Returns a map of name bindings for this node .
6964	Process the next event .
6965	Returns true if this TraceLevel is higher than the specified level .
6966	Extracts a jar file .
6967	Writes the contents of an input stream to an output stream .
6968	Adds an object to the map .
6969	Attaches the given SbEntityId to this node .
6970	Removes the specified SbEntity from the list .
6971	Returns true if no Sb entities are attached .
6972	Replies the names of the Sb entities attached to this node .
6973	Attach a timer to this node .
6974	Removes the timer with the given ID .
6975	Returns true if timers are attached .
6976	Returns the names of all attached timers .
6977	Adds the name bound .
6978	Remove a name from the namespace .
6979	Returns true if names are bound .
6980	Get names bound to this node .
6981	Sets the cmp attribute .
6982	Replies the value of the cmp attribute .
6983	Returns a shallow copy of this node .
6984	Initialize the notification type
6985	Send a usage notification
6986	Download a remote DU file .
6987	Update the list of deployed components .
6988	Installs a single deployment unit .
6989	Uninstalls a deployment unit .
6990	This method is called when a unit is uninstalled
6991	Show the status of the deployment .
6992	Determines if a logRecord is logged .
6993	Returns the logger for the given log record .
6994	Get the set of components that refer to a given component .
6995	Returns the set of sbb entities .
6996	Gets the permissions .
6997	Gets the code sources .
6998	Determine if the specified profile exists in the database .
6999	Remove this profile from the database .
7000	Update the configuration properties of the application .
7001	This method is called when the server is started .
7002	Notification that the RA is stopping .
7003	Activate the entityAdaptor .
7004	Deactivates the entity .
7005	Schedule the end of all activities .
7006	remove the entity
7007	Gets the resource adaptor interface .
7008	Called when a service is active
7009	Determine the activity handle to use .
7010	Called when an activity is ended .
7011	This method is called by the RA .
7012	Verify config properties .
7013	Notification that the resource is stopping .
7014	Called when the resource is in inactive .
7015	Unconfigure the ra .
7016	Unset the resource adaptor context .
7017	Unset the faultTolerantResourceAdaptorContext
7018	Build profile attribute map .
7019	Run the suspended activity .
7020	Returns the names of the activity context handles .
7021	Remove the object from the MBean
7022	Get the usage MBean associated with the given ParamSetName .
7023	Decorate the abstract class .
7024	Fires an event .
7025	Fires an event .
7026	This method is called by the SbbObject from the SbbObject
7027	Gets the installed usage parameter set .
7028	Get all abstract methods from a class .
7029	Gets the methods from an interface .
7030	Creates an object pool for the specified profile table .
7031	Remove the object pool associated with the specified profile .
7032	Returns true if the given notification source is owner of the given alarm .
7033	Raises an alarm .
7034	Returns the installed usage parameter set .
7035	Gets the EventTypeDescriptor .
7036	Determine if the deployment is accepted by the deployment .
7037	This method is called by the OSGi framework when the file is not accepted .
7038	Start the deployment .
7039	Stop the deployment .
7040	Get the status of the deployment .
7041	Execute after commit actions .
7042	Execute after commit priority actions .
7043	Execute after rollback actions .
7044	Execute before commit actions .
7045	Execute before commit priority actions .
7046	Returns the names of all configured tracer names .
7047	Creates a new tracer with the given name and name .
7048	Removes the replicated data .
7049	Registers the editor editors .
7050	Process the given SleeComponent with the usage parameters .
7051	Returns the object pool associated with the specified SbbID .
7052	Creates an object pool for the specified service .
7053	Execute the activity .
7054	Creates an activity context handle .
7055	End an activity .
7056	Checks preconditions for fire event .
7057	Fire an event .
7058	Generates the concrete class for the SBB local object .
7059	Make the getter method .
7060	Convert a string to an object .
7061	Sets the profile ID for this profile .
7062	Extracts the message .
7063	Returns true if the object contains the given object .
7064	Contains all elements of a collection .
7065	Removes all elements from the specified collection .
7066	Returns true if this level is higher than the specified level .
7067	Returns the value of the underlying stream .
7068	Remove all classes from the pool .
7069	Adds a call to the profile .
7070	Gets a profile object from the current transaction .
7071	Invalidate profile object from transaction .
7072	Sets the value of the component ID .
7073	Generate the concrete activity context interface .
7074	Generate concrete methods .
7075	Sets the value of the specified attribute .
7076	Adds a name binding .
7077	Remove all naming bindings from the map .
7078	Remove a name binding
7079	Attaches a timer to the cache .
7080	Cancel timers .
7081	Attaches an sbb entity to the activity context .
7082	Detaches an SBB entity from the cache .
7083	Gets the sorted set of Sbb entities in the cache .
7084	End the activity context .
7085	Add a Component
7086	Gets the external dependencies of this component .
7087	Checks if the dependency is satisfied .
7088	Checks if the deployment has already been deployed .
7089	Gets the management actions .
7090	Gets the management actions .
7091	returns true if the component has reference DU
7092	Close the MBeanServer
7093	Get the object name for the profile and profile .
7094	Change the state of the profile in write mode .
7095	This method is called before a transaction .
7096	Override after setCmpField .
7097	Before returning false .
7098	Callback after getCmp field has been set .
7099	Call before management method invocation .
7100	Called after management method invocation .
7101	Recursively deletes a directory .
7102	Creates the default constructor .
7103	Creates the default SBB usage parameter set .
7104	Creates the getter and setter method .
7105	Create the fire event methods .
7106	Create the getSbbActivityContextInterface method .
7107	Adds the given expression to this list .
7108	Binds the given key to the given target .
7109	Rebind the given name to the given target object .
7110	Decorate the abstracts .
7111	Invoke the method with the given name and argument types .
7112	Returns the real field name for the given field .
7113	Sets the value of the specified field .
7114	Returns the value of the specified field .
7115	Set the profile context for this profile object .
7116	Initialize the object
7117	Unset the profile context .
7118	Get the profile local object .
7119	Fires a add or update event if any .
7120	Get the profile clee s profile .
7121	Create a new class .
7122	Creates an inheritance link .
7123	Adds an annotation to the given object .
7124	Adds member values to an annotation .
7125	Returns the activity context interface for the given activity .
7126	Get the class pool
7127	Set the deployable unit .
7128	Undeploys the deployment .
7129	Execute the activity .
7130	Check if a class or interface is found in a class or interface .
7131	Get all abstract methods of a given class
7132	Resolve an InputSource by publicId
7133	Checks that a tracer name is valid .
7134	Handle a single query .
7135	Check the dependencies of a SleeComponent .
7136	Creates a temporary deployment dir for the deployment .
7137	Gets the entity manager .
7138	Start the container .
7139	Switch a class loader to a class loader
7140	Make a proxy call .
7141	Checks the current transaction .
7142	Converts the given string to a TTL value .
7143	Returns true if the profile is visible .
7144	Gets the profile object from the current transaction .
7145	Returns a list of all logger names matching the given regular expression .
7146	Resets the logger level settings .
7147	Clears all loggers .
7148	Add a new logger
7149	Add socket handler
7150	Remove a handler .
7151	Convert tracer to log4J logger name .
7152	Sets the level of the logger .
7153	Assign the log4j level to the trace level .
7154	Resets the cache flags .
7155	Send a notification to the trace .
7156	Checks that the given tracer is valid .
7157	Serializes an object .
7158	Deserialize an object .
7159	Adds a domain to this classloader .
7160	Get all the dependencies of this classloader .
7161	Find class by name .
7162	Overridden to find a resource .
7163	Overrides the default lookups for resources .
7164	Create and register a profile .
7165	Resume the given SleeTransaction
7166	Gets the set of SbbIDs .
7167	Gets all the resource adaptor entities for the given component .
7168	Initialize the Slee .
7169	Shutdown the Slee .
7170	Validate the state transition .
7171	Generate named usage parameter set .
7172	Update the given field with the given value
7173	Build a Polydb instance .
7174	Sets the value of the given field with the given value .
7175	Run the given operation
7176	Constructs a RegionRequest from a string .
7177	Gets the region .
7178	Resolve the bounds of the image .
7179	Gets the type of the annotation .
7180	Sets the viewing hints for this resource .
7181	Adds viewing hints to this resource .
7182	Set renderings
7183	Adds a rendering to this resource .
7184	Merge a list of profiles
7185	Merge the specified image .
7186	Creates a new RotationRequest object from a string .
7187	Construct a SizeRequest from a string .
7188	Initialize AndroidDebugBridge .
7189	Get the XML dump of the VM .
7190	Execute a GPS 2 .
7191	Push handle gps2 device to device .
7192	Clean temp directory .
7193	Pulls a dump from the device .
7194	Gets the crash log .
7195	Removes tabs from the text editor .
7196	Indicate the given number of spaces .
7197	Tokenize HTML .
7198	Mark the given text as HTML .
7199	Escapes special characters within a tag .
7200	Adds an exception to the queue .
7201	Close all cached statements .
7202	Find the fully qualified class name of the given type .
7203	Writes the target class to the given Filer .
7204	Write a single bit vector .
7205	Appends a bit strings to a bit vector .
7206	Read data from an input stream .
7207	Gets a list of objects .
7208	Gets a list from a path .
7209	Sets the klov reporter .
7210	Add a screen capture to the current step .
7211	Set system info .
7212	Returns a Selector that selects the specified property .
7213	Returns a Selector with the given property name and alias
7214	Extract annotation data .
7215	Finds all annotations for a given property .
7216	Finds all annotations on a given property .
7217	Returns the PropertyDescriptor for the specified property .
7218	Lookup an object expression .
7219	Creates an object from the given map .
7220	Creates an object from the given map .
7221	Creates an object from a map .
7222	To map .
7223	To map .
7224	Gets the values of an annotation .
7225	Creates a composite validator .
7226	Lookup the list of validators
7227	Looks up a Validator in the registry .
7228	Apply validation meta data .
7229	Removes the property if the property is blank .
7230	Set the current time .
7231	Returns the number of entries in the cache .
7232	Hash the given object .
7233	Create default options .
7234	Opens a database .
7235	Writes all of the given values .
7236	Removes all keys from the store .
7237	Returns a key value iterable .
7238	Load all values from the database .
7239	Closes the database .
7240	Reduces the results of a double array .
7241	Reduces a double array by its value .
7242	Returns the variance of the specified array .
7243	Returns the mean value of the given long array .
7244	used by reflection
7245	Reduces the elements of an array .
7246	Convert a timestamp to a string .
7247	Tests if an object matches a criteria
7248	Creates a not in field .
7249	Creates a Criteria from a list of objects .
7250	Creates a new instance from a JSON string .
7251	Adds an integer array to the end of the list .
7252	Returns the maximum value in the given array .
7253	Returns first element of list
7254	Get last element from list
7255	Returns last element of list
7256	Returns the least of the specified list .
7257	Get minimum .
7258	Returns the minimum element of an array .
7259	Processes array of maps .
7260	Handles a collection of maps .
7261	Create an object from a map .
7262	Returns the value associated with the given key .
7263	Creates a tooltip with the given name and field name .
7264	Generate a label value .
7265	Adds a hex string to the buffer .
7266	Process read queue .
7267	Process queued write queue .
7268	Start the data store .
7269	Replies the character at the specified index .
7270	Slashes a string starting at the specified index .
7271	Check if the string is in the given array
7272	Add char to string
7273	Add a string to a string .
7274	Compacts a string .
7275	Splits a string .
7276	Splits string by space .
7277	Splits string by pipe .
7278	Convert char array to string array .
7279	Convert string to camel case .
7280	Check if string is inside string
7281	Convert a string to the under bar case .
7282	Convert a number to a string .
7283	Creates a Sort by using the specified sorts .
7284	Sort list .
7285	Returns a comparator for this field .
7286	Returns a list of child comparators .
7287	Returns true if the given value is in the given map .
7288	Checks if two boolean values are equal .
7289	Checks if two int arrays are equal .
7290	Returns the sum of an integer array .
7291	Rounds a number to a power of 2 .
7292	Sorts a list according to the given field names .
7293	Sorts the specified list by the specified field .
7294	Set field value from map
7295	Convert an array to a list .
7296	Creates SQL statement to load all version data from a table .
7297	Deep copy .
7298	Check if a field has a string field
7299	Checks if a field has a string field .
7300	Check if a field has a field
7301	Gets the first field from a class .
7302	Gets the field of the given object .
7303	Compares two CacheEntry objects .
7304	Compare time .
7305	Sorts a list
7306	Sorts a list by its name .
7307	Sorts entries by component type .
7308	Sorts the given map by component type .
7309	Sorts keys by component type .
7310	Sorts array by name .
7311	Returns a comparator based on the given field access .
7312	Default comparator .
7313	Gets the value associated with the specified key .
7314	Gets the value associated with the specified key .
7315	Increment the order .
7316	Remove entries from the cache .
7317	Attempts to dynamically initialize the field with the given value .
7318	Allocates a byte buffer .
7319	Determines if the process should exit .
7320	Handle the input writer .
7321	Checks if we should flush .
7322	Starts the monitor .
7323	Start the timer .
7324	Returns the object associated with the specified key .
7325	The main query plan .
7326	Filters a group .
7327	Sets the current time .
7328	Synchronized .
7329	Cleans up the output stream .
7330	Write next buffer to the output stream .
7331	Write buffer to disk .
7332	Initialize output stream .
7333	Adds all of the given values to the store .
7334	Converts key to byte array .
7335	Read validator meta data .
7336	Extract validatorMetaData from string
7337	Read validator meta data .
7338	Extract validator meta data .
7339	Extract validatorMetaData from annotations
7340	Convert annotation data to validator meta data .
7341	Splits the string by the specified character .
7342	Splits a string by whitespace .
7343	Split string by delimiter .
7344	Remove characters from a string .
7345	Splits the specified string using the specified delimiter .
7346	Parse double from buffer .
7347	Parse an int from a buffer .
7348	Parse long from buffer .
7349	Get property by path .
7350	Gets the fields from an object .
7351	Returns the type of the specified property .
7352	Inject a value into a property .
7353	Sets the idx value of a property .
7354	Gets a collection property .
7355	Get value of specified property .
7356	Gets the value of a property .
7357	Initialize this message .
7358	Creates a message with the given key and arguments .
7359	Creates a message .
7360	Convert key keys to values .
7361	Gets the current subject .
7362	Parses a text
7363	Send a HTTP request .
7364	Delete a database .
7365	Creates a database .
7366	Returns a list of UUIDs .
7367	List all files in a directory .
7368	Trigger a replication .
7369	Queries the result of a query .
7370	Sets the view as descending .
7371	Synchronize all design documents in the database .
7372	Retrieves a design document from the database .
7373	Retrieves a list of all design documents from the master .
7374	Gets a design document from a DESIGN document .
7375	Saves the replicator document .
7376	Gets the replicator document .
7377	Returns all replicator documents .
7378	Delete document .
7379	Retrieve an object by its id .
7380	Returns a list of documents matching the given query string .
7381	Checks if the document exists .
7382	Adds documents to the database .
7383	Put an object in the given uri .
7384	Execute an input stream .
7385	Execute a POST request
7386	Executes a DELETE .
7387	Validates response .
7388	Sets the entity to the given HTTP request .
7389	Adds an attachment .
7390	Gets the changes .
7391	Reads next row from stream .
7392	Convert a double to a string
7393	Shutdown all active locks .
7394	Writes an array of bytes to a ServletOutputStream .
7395	Adds tags to the given metric .
7396	Creates temporary tables for the current block .
7397	Gets namespace id .
7398	Check if the request is a query
7399	Builds the authentication request .
7400	Returns the verb for the given request .
7401	Generate the subject access review string .
7402	Handles a request result .
7403	Handles a request failure .
7404	Initializes the database .
7405	Gets scheduled jobs .
7406	Creates a list from buckets .
7407	Ends a HTTP server exchange .
7408	Gets all data from a bucket .
7409	Creates a new buckets from start and end .
7410	send message
7411	Send one message
7412	Send message to topic
7413	Performs a scan .
7414	Sets the value for the given property .
7415	Adds a file to the archive .
7416	Replaces a file with the given text .
7417	Builds the zip file .
7418	Returns the metrics for the given component and product .
7419	Fetches content .
7420	Fetches content of an order item .
7421	Upload transformation .
7422	Compiles the given components .
7423	Creates a new directory .
7424	Ends the object .
7425	Register a model adaptor for a specific type .
7426	Registers an attribute renderer .
7427	Prepare template .
7428	Add a new domain object .
7429	Sets a property .
7430	Adds a child object .
7431	Returns a supplier that loads a file from a directory .
7432	Copies content from input stream to output stream .
7433	Parse a file from a file .
7434	Parse an XML document from a Reader .
7435	Returns a stream of elements in the given parent .
7436	Returns a stream of all child nodes in the given parent .
7437	Gets the first child element with the given names .
7438	Returns a stream of elements matching the given names .
7439	Validates XML against an XML Schema .
7440	Main method for testing
7441	Creates a builder from an input stream .
7442	Loads a content builder from a resource .
7443	Iterates through the ZIP file and processes it with the given processor .
7444	Encode characters in a string .
7445	Set the signature
7446	Removes all whitespace characters from the given array .
7447	Sign request .
7448	Sets the upload model .
7449	Complete multipart upload .
7450	Set the favorite list of favorite notifications .
7451	Updates the state of an entry
7452	Returns true if the cache has expired .
7453	Gets a notification .
7454	Gets the addressees .
7455	Get the AddresseDTO
7456	Get events for a given notification
7457	Gets the specific event .
7458	Returns the REST URL for a single notification .
7459	Returns the entry with the given id .
7460	Gets the authentication token .
7461	Returns the number of entries in the list .
7462	Adds new categories to the list .
7463	Fetches the current SSP notification .
7464	Creates a notification response .
7465	Map the response to a notification response .
7466	Creates a notification entry .
7467	Attaches the available actions to the given notification entry .
7468	Normalize a link .
7469	Retrieves a category from the portlet preferences .
7470	Returns the source of the portlet .
7471	Updates the readNotices .
7472	Reads a notification response from a file .
7473	Retrieves a student id from the current session .
7474	Extracts the id of a student .
7475	Handles the notification .
7476	Get the map of attributes of the notification .
7477	Normalize a point .
7478	Returns true if boxA is contained inside boxA
7479	Finds the closest point to the given point .
7480	Computes the sign of a point .
7481	Sets the shape of this Se3
7482	Specifies the Euler s rotation .
7483	Converts the input to a polygon .
7484	Converts a polygon to a quadrilateral
7485	Computes the bounding box of the specified quadrilateral
7486	Computes the bounding box of a polygon .
7487	Computes the center of the quad .
7488	Computes the average point of a polygon .
7489	Compute the convex hull
7490	Removes polygons from the polygon .
7491	Computes the average error of the polygon
7492	Computes the area of two polygons
7493	Replies if the specified point is contained in the quadrilateral .
7494	Replies if the triangle contains a triangle .
7495	Computes the intersection of two lines .
7496	Returns the intersection between lines .
7497	Computes the intersection of two lines
7498	Computes the intersection of a line segment .
7499	Returns the intersection of two polygons
7500	Replies if the given ellipse is inside the ellipse .
7501	Computes the intersection of the two rectangles .
7502	Get the element at the given index .
7503	Converts a matrix to a quaternion .
7504	Performs a rotation matrix .
7505	Specifies the rotation of the rotation matrix .
7506	Computes the rotation matrix for the given angle .
7507	Computes the orthogonal rotation matrix .
7508	Sets the rotation matrix for the given angle .
7509	Converts an Euler to a matrix .
7510	Computes the rotation matrix for the given axis .
7511	Sets the angle of the curve .
7512	Sorts a twist coordinate .
7513	Specifies the initial rotation .
7514	Performs a linear interpolation .
7515	Computes the SVD of a point
7516	Solve a point on a list of points .
7517	Get the length of the side .
7518	Returns true if the given point is inside the image .
7519	Convert a conic general matrix into a square matrix .
7520	Converts a convex hull into another matrix .
7521	Convert a conicola to a conicola general .
7522	Converts a Parabulation to a convex hull .
7523	Divide a point by v .
7524	Converts a GeoTuple to a matrix .
7525	Converts a matrix to a GeoTuple .
7526	Sets the parameter vector .
7527	Distance between two angles .
7528	Checks to see if a line is intersect
7529	Checks if a point is inside a plane .
7530	Checks if a line is intersect .
7531	Sets the yaw axis of a ray .
7532	Extracts the quaternion from q
7533	Sorts the input points .
7534	Sets the motion to no motion .
7535	Converts a Segment to a homogeneous matrix .
7536	Converts the specified Segment to homogeneous matrix .
7537	Creates a new plane from axis rotation .
7538	Checks if two segments are identical .
7539	Convert the given latitude to a unit vector .
7540	Adds a circle to the circle .
7541	Returns the square radius of a circle .
7542	Finds the closest point between two lines .
7543	Finds the closest point to the given point .
7544	Finds the closest point in the plane .
7545	Finds the closest point to the given line .
7546	Finds the closest point to a point
7547	Applies the transformation to the plane .
7548	Performs a linear transformation .
7549	Returns true if the quadrilateral is equal to the tolerance .
7550	Computes the acute angle between two lines .
7551	Convert a linestring to a single line parametric
7552	Convert a line to a square .
7553	Converts a LineSegment from a LineSegment .
7554	Converts a LineSegment into a single line segment .
7555	Converts the line between two points .
7556	Convert a line to a line parametric
7557	Convert a line parametric to a square .
7558	Convert a line parameterized to an image .
7559	Convert a line to a square .
7560	Converts a plane to a plane .
7561	Converts a plane to a plane .
7562	Convert a plane to a plane .
7563	Convert a point to a 3D coordinate .
7564	Converts a plane into world coordinates .
7565	Returns true if t is identical to tolerance
7566	Creates a copy of this matrix .
7567	Compute the Euclidean norm .
7568	Computes the t - value t .
7569	Returns true if the element has uncountable .
7570	Checks to see if the parabola is equivalent
7571	Center the point .
7572	Computes the acute angle between two lines .
7573	Replies if the given point is infinite .
7574	Creates a random number of points .
7575	Convert a point to the e - coordinate .
7576	Subtracts two points .
7577	Determines if two points are identical .
7578	Sets the coordinates of this rectangle .
7579	Converts an ellipse to an ellipse .
7580	Computes the location of a point .
7581	Computes the angle of an ellipse .
7582	Computes the tangent of the specified ellipse .
7583	Selects the tangent from the ellipse .
7584	Returns the corner of the polygon
7585	Distance between two lines .
7586	Returns the Euclidean distance between a line and p .
7587	Computes the Euclidean distance between a line segment .
7588	Computes the Euclidean distance between a point and a point .
7589	Replies the distance between the given point and point .
7590	Returns the Euclidean distance between two lines .
7591	Returns the squared Euclidean distance between two lines .
7592	Returns the Euclidean distance between the specified point .
7593	Returns the squared Euclidean distance between the specified point .
7594	Returns the Euclidean distance between the given polygon .
7595	Returns the squared Euclidean distance of a polygon .
7596	Computes the distance from a line .
7597	Returns the Euclidean distance between the specified point and p .
7598	Computes the Euclidean distance between the specified point .
7599	Adds a new transformation .
7600	Computes the closest point to the given line .
7601	Finds the closest point to the given ellipse .
7602	Computes the polynomial curve
7603	Creates a random vector .
7604	Computes the perpendicular vector of a A .
7605	Checks if two points are identical .
7606	Normalize a vector .
7607	Creates a new matrix .
7608	Convert a matrix to a real vector .
7609	Returns the Euclidean distance between the specified point .
7610	Set the ellipse
7611	Normalize this vector .
7612	Computes the angle between two points .
7613	Computes the quadrilateral
7614	Checks if polygon is simple .
7615	Computes the mean .
7616	Sorts points in a list of points .
7617	Computes the normal for a set of points .
7618	Checks if polygon is convex .
7619	Multiply this vector by scalar .
7620	Returns the maximum absolute value .
7621	Compute the Euclidean distance between two points .
7622	Returns the squared Euclidean distance between two points .
7623	Creates a random plane from a plane .
7624	Creates a list of points in the specified range .
7625	Creates a random number of points .
7626	Computes the mean .
7627	Computes the mean .
7628	Invalidates all cached credentials .
7629	Invalidates all tokens that match the given predicate .
7630	Combine a collection of strings into a set .
7631	Retrieves the set of features for a server .
7632	Retrieves the list of feature dropins from server directory .
7633	Extract features from a file .
7634	Parses the include node .
7635	Parse the feature manager node .
7636	Downloads the jsons for the given productId and version .
7637	Retrieves a set of Liberty features from a JSON file .
7638	Checks if the list of Open Liberty features are installed .
7639	Determines if a collection contains all of the specified strings ignoring case .
7640	Returns the next product version .
7641	Extract the bundle name from a jar file .
7642	Gets the jar - based installation jar .
7643	Checks if two files are comparable .
7644	Extracts the version from the file name .
7645	Compare two strings .
7646	Runs the product information on the install directory .
7647	Determine if the given jar file is a boot - boot - boot - plugin jar .
7648	Gets the arquillian property .
7649	Returns true if the file is working in the current environment .
7650	Moves back to center .
7651	Compare two objects .
7652	Load an integer from a string .
7653	Helper method to throw an array of proxies .
7654	Verify approval .
7655	Swaps a puzzle with the specified target .
7656	Calculates the distance to the goal .
7657	Print formatted string .
7658	Print formatted string .
7659	Show a fancy message box .
7660	Print a variable .
7661	Returns a random integer from a b
7662	Returns a uniform number from a given range
7663	Returns the number of poisson
7664	Returns the index of the elements in the given array .
7665	Prints a Gaussian
7666	Capitalizes the first character of a word .
7667	Uppercase the first character of a word .
7668	Fix path .
7669	String to String
7670	Gets token string .
7671	Checks if the authentication token is expired .
7672	Extracts the auth token from a cookie list .
7673	Register the Guice bound to the given injector .
7674	Gets all permissions for a role .
7675	Adds a projection to the list
7676	Convert a JobInfo to a JobDetail .
7677	Converts a trigger to a trigger
7678	Sets the repeat interval values .
7679	Sets start and end time .
7680	Send mail to queue
7681	Writes the contents of the buffer to the given output stream .
7682	Initializes the scheduler .
7683	Gets all fields in the given class .
7684	Returns a map of field names to field names .
7685	Creates a response for the given exception .
7686	Configure the TokenBasedAuthConfiguration .
7687	Generates hash from attributes .
7688	Generate the token string .
7689	Sends a mail item .
7690	Generates a new password .
7691	Change the password of a user .
7692	Gets the user by username .
7693	Hashes a password .
7694	Verify that the given account name is valid .
7695	Verifies the password strength .
7696	Provide the search model .
7697	Handles success .
7698	Handles an error .
7699	Starts the transaction .
7700	Configure field by name
7701	Check if authorization is authorized .
7702	Parse object
7703	Builds an error response .
7704	Create a equals expression
7705	Creates a not equals expression .
7706	Creates a less than expression .
7707	Creates a less than or equal to the given value .
7708	Creates a greater than expression .
7709	Creates a Restriction instance .
7710	Creates an ilite assertion .
7711	Create a IN clause
7712	Adds a new namespace to the RepositoryManager .
7713	Sets the content of this resource .
7714	Adds a relation to this resource .
7715	Returns a copy of this resource .
7716	Returns a copy of this resource .
7717	Returns true if the input can be decoded .
7718	Encode a string to a byte array .
7719	Compares two readers .
7720	Moves src to dst .
7721	Creates a new file .
7722	Gets the base name of the given file .
7723	Adds the block padding .
7724	Returns the short name of a class .
7725	Get all supertypes of the given class .
7726	Verifies the given password .
7727	Reads a string from System . out .
7728	Appends a byte to the buffer .
7729	Appends bytes to the buffer .
7730	Creates a copy of the given array .
7731	Returns a new Fraction .
7732	Returns a new Fraction .
7733	Returns a new Fraction with the specified fraction .
7734	Returns a new Fraction with the specified fraction .
7735	Max value .
7736	Returns the minimum of the given long values .
7737	Throws an IllegalArgumentException with the given message .
7738	Fetches the location for the given latitude and altitude .
7739	Fetches the metadata for the given latitude and date .
7740	Fetches the metadata for a given latitude and destination .
7741	Find hourly point estimates from now .
7742	Finds the closest forecast for a given date .
7743	Fetches weather data for a given query .
7744	Create a simple long term forecast
7745	Creates a long term forecast .
7746	Creates a new Location from a string representation .
7747	Fetches the available metadata .
7748	Creates a key name for the given point .
7749	Method to find the easter level for the given point .
7750	Creates a URI from a string .
7751	Determines if the current date is within the sun .
7752	Gets the point forecast for a given date .
7753	Selects the best fit period for a given date .
7754	Fetches the data for the given latitude and latitude .
7755	Fetches the data for the given latitude and language .
7756	Update database .
7757	Invoke a string method .
7758	Acquires the object .
7759	Gets a new object .
7760	Gets the wrapped object .
7761	Loads the configuration from the classpath .
7762	Gets the boolean value of the flag .
7763	Creates an iterator over the classes of the given service .
7764	Get decoder from bootstrap configuration .
7765	Load all services of the given interface .
7766	Returns a module instance for the given interface .
7767	Acquires input stream .
7768	Get the size of the data .
7769	Gets the wrapped data .
7770	Returns the component at the given index .
7771	Returns a portion of this name .
7772	Returns true if the type is colored .
7773	Execute a regular expression with data and data .
7774	Performs a loop .
7775	Subroutine .
7776	Dissect a runtime subexpression .
7777	Dispatches a substring from a subtree .
7778	Clones the outgoing arcs .
7779	Optimized .
7780	Recursively marks the subtre and its subre .
7781	Compute NFA node .
7782	Parse a branch .
7783	Traverses a transition .
7784	Parses a non - word .
7785	Clone word .
7786	Reads a reference number .
7787	Parse a bracket .
7788	Scan plain text .
7789	Create a new Lacon .
7790	Process one character .
7791	Do a vector .
7792	Returns the color for the given character .
7793	Create a new pseudo color .
7794	Draws a range of colors .
7795	Make sure all possible colors are ok .
7796	Add colorchain to colorchain
7797	Remove a colorchain from an Arc .
7798	Dumps all the colors in the console .
7799	Start lexer .
7800	Parse prefixes .
7801	Sets the interpolated pattern .
7802	Returns the color for the given codepoint .
7803	Initializes the state set .
7804	Returns the last seen last seen .
7805	Returns a set of UnicodeSet containing the specified character .
7806	Returns a set of UnicodeSet corresponding to the given string .
7807	Sorts the arcs in the specified sequence .
7808	Returns a string representation of this object .
7809	Creates a new state .
7810	Move the arcs from the old to the new state .
7811	Moves all ins from old to newState .
7812	Copies all insets from old to newState .
7813	Copies all outgoing outputs from old to new state .
7814	Drops a state .
7815	Frees a state .
7816	Create an arc .
7817	Duplicate a state .
7818	Set special colors .
7819	Dumps information about the state of the state machine .
7820	Prints a state .
7821	Prints the arcs of a given state .
7822	Dumps an arc .
7823	Prints an arc .
7824	Performs optimization .
7825	Analyze the state of the chain .
7826	Combine two arcs .
7827	Cleans up the internal state .
7828	Mark a state as reachable .
7829	Mark a state as reachable .
7830	Fixes empty states .
7831	Returns true if an empty Arc is empty .
7832	Read rule parameters .
7833	Gets the report plugins .
7834	Gets the report plugins .
7835	Gets the rule selection .
7836	Runs the given arguments .
7837	Gets the error message .
7838	Gather standard options .
7839	Gathers all tasks and adds them to the given options .
7840	Gather task names .
7841	Interprets the command line
7842	Gets the command line .
7843	Executes a task .
7844	Reads properties from properties file .
7845	Prints usage .
7846	Gets the home directory .
7847	Creates the plugin class loader .
7848	Gets the ids of all cells in the given range .
7849	Gets the intersection of all cells in the given range .
7850	Returns the URI of the given target .
7851	Add a route to the router .
7852	Returns the number of routes .
7853	Add a route at the first route .
7854	Add a route to this router .
7855	Add a route to the router .
7856	Returns true if any of the matched paths match .
7857	Helper method to handle equality .
7858	Gets the store file name .
7859	Compare two folders .
7860	Compare two entries .
7861	Compare two bookmarks .
7862	Set the last modified time .
7863	Returns a list of java . lang dependencies .
7864	Find a class by its name .
7865	Parse the Authorization header .
7866	Get the instance of the ProtectedFunctionMapper .
7867	Maps a method name to a method .
7868	Gets the map for a function .
7869	Resolves a method .
7870	Set the values of this field .
7871	Resolve a variable name .
7872	Parse the content of a file .
7873	Parses a jar file .
7874	Parses a tag file
7875	Parse a jar file .
7876	Creates the compiler .
7877	Returns an input stream to the given resource
7878	Calculates the last modification timestamp .
7879	Find all class loaders .
7880	Checks if the given classloader is a parent of this class .
7881	Start a classloader
7882	Reads the stream header .
7883	Paging result set .
7884	Creates a MetaKey from a string .
7885	Fill the requirements .
7886	Gets a tag file .
7887	Parses the implicit TLD document .
7888	Gets checksum .
7889	Gets file size .
7890	Validate the channel name .
7891	Seeks to the given block .
7892	Locates a block by pos .
7893	Gets MavenArtifacts .
7894	Update the optimal state .
7895	calculate 1 byte price
7896	calculate long repaints
7897	Calculate the total match and total match price
7898	Throws an exception .
7899	Throws an invalid byte .
7900	Scan TLDs for all TLDs .
7901	Scans a TLD file and creates a list of TLDs .
7902	Adds a new JspServletWrapperWrapper .
7903	Returns the parent class loader .
7904	Set a bytecode .
7905	Returns the birth time of a bytecode .
7906	Save the bytecode for a given class .
7907	Check if all jspaces have been compiled .
7908	Initialize the classpath .
7909	Starts the background thread .
7910	Stops the background thread .
7911	Main run method .
7912	Find channel instances by name .
7913	Finds the channel with the given By object .
7914	Update the deploy group cache .
7915	List deploy groups .
7916	Copies the input stream to the given output stream .
7917	Parse the content of a JSP reader .
7918	Read the attributes from the jsp reader
7919	Parse quoted string .
7920	Add an include directive
7921	Parse named attribute and body .
7922	Add an attribute .
7923	Adds a child node to this node .
7924	Returns an iterator over the attributes .
7925	Returns children of this node .
7926	Find all children with the given name .
7927	Replies the Maven coordinates .
7928	Returns the variable name for the given variable name .
7929	Set thread .
7930	Unset the current thread .
7931	Finds the current thread .
7932	Writes an optional string to the given writer .
7933	Writes the given field name and value .
7934	Add an element to a parent element .
7935	Create a new element with the given name .
7936	Writes the next character .
7937	Set the writer .
7938	Allocates the buffer .
7939	Generates the HTML code for the given page .
7940	Gets the same parent .
7941	Registers a model with the given key .
7942	Stream from the data store .
7943	Display a job .
7944	Check if the request is authenticated .
7945	Finishes writing .
7946	Create a Gson .
7947	Encode this LZMA2 .
7948	Returns the union of the two provided meta keys .
7949	Get the throwable from the request .
7950	Determines if the given coordinates are valid .
7951	Finishes writing .
7952	Returns the exception associated with this request .
7953	Evaluate an EL expression
7954	Creates a prefix from OSGI properties .
7955	Check if the given path is an xml file .
7956	Parses a tag file and returns the tag information
7957	Loads the tag file .
7958	Remove all generated classes with the given name .
7959	Main method .
7960	Sets the uri root .
7961	Scans all files in a directory .
7962	Locates the URI root under the given directory .
7963	Initializes the classloader
7964	Moves the pointer to the next block .
7965	Check if the string matches the given string
7966	Checks if the specified string matches any whitespace .
7967	Skip characters until string is found .
7968	Skip characters until escape occurs .
7969	Skips until the end of the element is found .
7970	Parses the next token .
7971	Removes the file from the current source .
7972	Returns an unclassified coordinates .
7973	Filters a list of AspectInformation from a list of AspectInformation
7974	Gets the missing factoryIdsIds .
7975	Set the schema resource prefix
7976	Set the DTD resource prefix .
7977	Uri Encode prefix .
7978	Recursively convert a node to a tree .
7979	Merge the errors from the binding result .
7980	Initializes the binder .
7981	Scans and returns a map of ChannelAspectInfos .
7982	Unqualify path .
7983	Invokes the plugin for the given node .
7984	Gets a byte array .
7985	Gets an int array .
7986	Creates an AetherResult .
7987	Get the resource as a stream
7988	Validate the tag library
7989	Pushes an input stream .
7990	Determines the encoding of a file .
7991	Scan XML declaration .
7992	Report a fatal error .
7993	Returns the real path of the given path .
7994	Returns the URL for the given path .
7995	Gets the resource as a stream .
7996	Get the paths of a resource
7997	Log a message and exception .
7998	Add a filter .
7999	Gets the buffer size .
8000	Returns the memory usage .
8001	Sets a preset dictionary .
8002	Moves the window .
8003	Fills the specified byte array .
8004	Process pending bytes .
8005	Returns the number of bytes in the input buffer .
8006	Returns the number of bytes in the input buffer .
8007	Verify that the match length matches .
8008	Moves to the next available position .
8009	Recycle the stream .
8010	Flushes the buffer .
8011	Clears the buffer .
8012	Flush output stream .
8013	Close output stream .
8014	Write string .
8015	Allocate a char buffer .
8016	Throw an exception if the error occurred .
8017	Generate key from meta data .
8018	Generate the java file .
8019	Compile the source file .
8020	Remove generated files .
8021	Initialize java compiler .
8022	Determines if the given path is in WebF .
8023	Quote a character .
8024	Generate the CSS declarations .
8025	Compile the tag handler pool list .
8026	Generate XMLProperties .
8027	Generate common postamble .
8028	Prints the postamble .
8029	Generate the HTML page .
8030	Print HTML tag handler attributes
8031	Reads the properties from the given stream .
8032	Export a single channel .
8033	Validate the xml view
8034	Gets the current handler .
8035	Parses an expression into an EL expression .
8036	Selects and returns the next property .
8037	Check if the given URI is a jsp page
8038	Prints a comment .
8039	Prints a string .
8040	Prints a string .
8041	Prints a string with multiple lines .
8042	Escape expression in XML .
8043	Checks a scope .
8044	Escape a string .
8045	Validate the given expressions
8046	Gets the tag handler class name .
8047	Creates a package name from a path .
8048	Splits a string using the given pattern .
8049	Makes a valid identifier .
8050	Makes a single character .
8051	Determines if the given string is a Java keyword .
8052	Adds a property to the map .
8053	Convert a modifier to a string .
8054	Returns a sorted set of the given metadata .
8055	Run the update .
8056	Get basename from path .
8057	Puts a value into the cache .
8058	Loads the database .
8059	Build metrics collection .
8060	Resolve a number .
8061	Write a string to a CodedOutputStream .
8062	Returns the TTL for the given rollup .
8063	Creates prepared statements .
8064	Track metrics .
8065	Track delayed metrics .
8066	Read unversioned double from input stream .
8067	Put an unsigned double or long .
8068	Get all the properties
8069	Creates the container .
8070	Schedule slots to be assigned to a rollup .
8071	Clear slot from running state .
8072	Registers a callback for the given event .
8073	Register a listener for a single event .
8074	Remove the given event .
8075	Emit an event .
8076	Returns the list of listeners associated with the given event .
8077	Get the name of the remote name .
8078	Appends a RollupEvent to the log .
8079	Parses the file name .
8080	Start the server .
8081	Returns the type of Rollup for the given type and granularity
8082	Creates an IOContainer from the configuration .
8083	Puts a TTL config into an immutable table .
8084	Computes the maximum length of the output .
8085	Formats the headers in the given array .
8086	Formats the output of the given outputs to a string .
8087	Register metrics .
8088	Set the thread pool name .
8089	Add a metric to the index .
8090	Gets the complete metric names .
8091	Gets the token list .
8092	Performs a batch operation .
8093	Create a granularity from a list of points .
8094	Returns a granularity from the requested duration .
8095	Sets the current server time .
8096	Gets unique host names .
8097	Get max connections per host .
8098	Returns an Iterable of MetricColumn families .
8099	Insert a collection of metrics .
8100	Insert metrics .
8101	Returns all locators for this slot .
8102	Get metric names from Elasticsearch
8103	Build regex for current and next level .
8104	Start the uploader .
8105	Stops the upload .
8106	Returns true if the specified locator is currently in batch layer .
8107	Returns true if locator is in discovery layer .
8108	Returns true if locator is in token discovery layer .
8109	Returns true if the specified locator is currently in the specified slot .
8110	Sets a delayed locator for the specified slot .
8111	Maps a range to a range .
8112	Converts a granularity to a range .
8113	Insert full metrics .
8114	Insert metrics for a column family .
8115	Checks if a metric is delayed .
8116	Gets the bound statement for a given metric .
8117	Returns the metadata values for the given locator .
8118	Returns a serializer for the given type .
8119	Checks if the content type is valid .
8120	Returns true if the response is valid
8121	Processes a batch of objects .
8122	Verifies that all aggregated metrics are present .
8123	Check if there are any files in the download directory .
8124	Gets a new extractor .
8125	Returns true if the os name matches the os name .
8126	Starts the catalog .
8127	Stop RabbitMQ process .
8128	Creates default instance .
8129	Adds the ice servers .
8130	Add ICE servers .
8131	Send a message
8132	Send a message to all peers
8133	Gets the value of the witereEnds property .
8134	Gets the value of the userDefinedField property .
8135	Gets the value of the userDefinedAny property .
8136	Sets the value of the apifelder property .
8137	Gets the value of the multimediaAnhang property .
8138	Gets the value of the status variable .
8139	Gets the value of the statusIC24 property .
8140	Gets the value of the statusHP property .
8141	Gets the value of the importmod property .
8142	Gets the value of the adressdruck property .
8143	Gets the value of the waehrung .
8144	Gets the value of the bodenbelag property .
8145	Sets the value of the region property .
8146	Sets the value of the area property .
8147	Sets the value of the address property .
8148	Sets the value of the description property .
8149	Sets the value of the reservation period .
8150	Sets the value of the Furnished property .
8151	Sets the value of the phone1 property .
8152	Sets the value of the phone2 property .
8153	Sets the value of the contactName property .
8154	Sets the value of the phoneInfo property .
8155	Sets the value of the mainEmail property .
8156	Sets the value of the ccEmail property .
8157	Sets the value of the externalId property .
8158	Sets the value of the agentId property .
8159	Sets the value of the epart .
8160	Sets the value of the jahrgang .
8161	Sets the value of the gbaeude .
8162	Sets the value of the bueroTyp .
8163	Returns true if the given string is a valid number .
8164	Sets the value of the gbiete .
8165	Sets the value of the gruppe property .
8166	Sets the agent property .
8167	Gets the value of the property property .
8168	Sets the stander property .
8169	Gets the value of the userDefend property .
8170	Sets the value of the zeiteinheit property .
8171	Gets the value of the zimmer property .
8172	Gets the value of the hauses property .
8173	Gets the value of the bueroPrip property .
8174	Gets the value of the apostgewerbebe property .
8175	Gets the value of the landUndestViolants property .
8176	Gets the value of the Sonstige property .
8177	Gets the value of the zinshausRenderer property .
8178	Gets the value of the terrain property .
8179	Sets the value of the Uefang property .
8180	Sets the value of the wthung .
8181	Get a country code from a string .
8182	Returns the country iso2 from an ISO3 code .
8183	Returns the country code for a given country .
8184	Returns the country code from an ISO2 code .
8185	Gets the country name .
8186	Returns the country name of a country .
8187	Gets the value of the ANBieter property .
8188	Sets the category property .
8189	Gets the value of the pdf property .
8190	Sets the value of the AktionArt .
8191	Sets the value of the realestateitems property .
8192	Sets the value of the pack .
8193	Downgrades the given document to the previous version .
8194	Upgrades the document to a new version .
8195	Gets the value of the content property .
8196	Gets the names of the field names .
8197	Sets the value of the blick property .
8198	Sets the value of the pauselm .
8199	Sets the value of the monatsmiete .
8200	Gets the value of the parkplacement property .
8201	Sets the value of the lastenauger property .
8202	Sets the value of zustand .
8203	Gets the value of the feld property .
8204	Handle validation event .
8205	Dumps the contents of the buffer to a writer .
8206	Returns the value associated with the given position .
8207	Prints the contents of this buffer .
8208	Set the value at the given position .
8209	Sets the value of the check .
8210	Sets the value of the haypyp .
8211	Gets the value of the einergiePlugin property .
8212	Sets the value of the keller .
8213	Sets the value of the grundTyp property .
8214	Sets the value of the eschl attribute .
8215	Sets the value of the HallenTyp property .
8216	Gets the value of the wiederpler .
8217	Gets the value of the teiligung .
8218	Downgrades a document to a version .
8219	Gets the value of the Bevorzugt property .
8220	Gets the value of the wunsch property .
8221	Sets the value of the art property .
8222	Sets the value of the modus property .
8223	Gets the value of the emailSonstige property .
8224	Gets the value of the telSonstige property .
8225	Sets the value of the handelTyp property .
8226	Downgrades a document to a previous version .
8227	Sets the value of the apiPower1 property .
8228	Sets the value of the apiSuchHandler2 property .
8229	Sets the value of the apiSuchHandler property .
8230	Gets the value of the row property .
8231	Sets the value of the distanz .
8232	Gets the value of theAN property .
8233	Gets the value of the objekt .
8234	Gets the value of the objektzand property .
8235	Gets the value of the hausKategorie property .
8236	Gets the value of the Ausstattacher property .
8237	Gets the value of the vermarktungs property .
8238	Gets the value of the interessent property .
8239	Sets the wert .
8240	Sets the value of the AckerLand .
8241	Sets the value of the biefert .
8242	Sets the value of the bootsstaende property .
8243	Sets the value of the buero property .
8244	Sets the value of the camping property .
8245	Sets the value of the dppelhaus property .
8246	Sets the value of the einamiline property .
8247	Sets the value of the einzelfield .
8248	Sets the value of the einzelmer .
8249	Sets the value of the garages property .
8250	Sets the garten property .
8251	Sets the value of the granularity property .
8252	Sets the value of gewerbe property .
8253	Sets the value of the hotel property .
8254	Sets the value of theindustrie property .
8255	Sets the value of the keineBiefert .
8256	Sets the value of the kleingewer property .
8257	Sets the value of the lager property .
8258	Sets the value of the mehrfamily property .
8259	Sets the value of the observer property .
8260	Sets the value of the parkhaus property .
8261	Sets the value of the produktion property .
8262	Sets the value of the reihen .
8263	Sets the value of the stellplaet property .
8264	Sets the value of the villa property .
8265	Sets the value of the wald property .
8266	Sets the value of the ANBieter property .
8267	Gets the value of the wtnung property .
8268	Gets the value of the grustueck property .
8269	Gets the value of the einzelref property .
8270	Gets the value of the hillenLagerProperties property .
8271	Gets the value of the parken property .
8272	Gets the value of the freizeitimmelief property .
8273	Gets the value of the objektargator property .
8274	Gets the value of the stellplacementart property .
8275	Sets the maxDauer property .
8276	Gets the value of the feature property .
8277	Sets the value of the zimmertyp .
8278	Upgrades the given document to the previous version .
8279	Sets the value of the keineAngle property .
8280	Sets the value of the errdwaerme property .
8281	Sets the value of the solarheizung property .
8282	Sets the value of pellet .
8283	Sets the value of the gas property .
8284	Sets the value of the oel property .
8285	Sets the value of the fernwaerme property .
8286	Sets the value of the strom property .
8287	Sets the value of kohle property .
8288	Creates a random string .
8289	Creates a random string .
8290	Creates a random string .
8291	Gets the value of the wannungKategorie .
8292	Sets the value of the benutzer property .
8293	Sets the value of the objekter property .
8294	Gets the value of the feed property .
8295	Sets the value of the mob property .
8296	Gets the value of the serviceleistings property .
8297	Sets the value of the subAdministrativeArea property .
8298	Sets the value of the city .
8299	Sets the value of the location property .
8300	Downgrades document to previous version .
8301	Upgrade the given document to the previous version .
8302	Sets the value of the land typ .
8303	Gets the value of the field property .
8304	Upgrades the given document to the previous version .
8305	Gets the value of the ad property .
8306	Sets the value of the Gastgewer property .
8307	Sets the value of the plagart .
8308	Gets the value of the datenviefert .
8309	Gets the value of the klimnage property .
8310	Gets the value of the image property .
8311	Sets the value of the priceType property .
8312	Sets the value of the newDevelopmentAvailability property .
8313	Sets the value of the directions property .
8314	Sets the value of the CO2Rating property .
8315	Sets the value of the energy property .
8316	Sets the value of the viewingDetails property .
8317	Sets the propertyStatus property .
8318	Sets the value of the pictures property .
8319	Sets the value of the Bebaubar attribute .
8320	Updates the document version .
8321	Sets the value of theParkenTyp property .
8322	Sets the value of the alter attribute .
8323	Sets the value of the freizeitxt property .
8324	Sets the value of the telefonart property .
8325	Sets the value of the emailart property .
8326	Sets the value of the tunnel .
8327	Sets the value of the steeringRental property .
8328	Create a user defined field .
8329	Gets the value of the fehler property .
8330	Sets the value of the erbraint property .
8331	Gets the value of the stpkins property .
8332	Gets the value of the valuelist property .
8333	Sets the value of the minDauer property .
8334	Sets the value of the zinsTyp property .
8335	Gets the value of the photo property .
8336	Sets the value of the metadata property .
8337	Sets the value of the feed .
8338	Sets the properties of the feed .
8339	Downgrades a document to a previous version .
8340	Updates the given document version .
8341	Gets the value of theimmelie property .
8342	Gets the value of the objekt property .
8343	Gets the value of the fehrliste property .
8344	Gets the value of the status property .
8345	Sets the value of the SonstigeTyp property .
8346	Sets the value of the dinzu .
8347	Gets the value of the distanzen property .
8348	Gets the value of the distanzen s property .
8349	Checks if the given exception is compatible with the throw clause .
8350	Binds the given bindings .
8351	Bind a namespace URI to a namespace URI .
8352	Remove a binding .
8353	Returns true if the string contains an opening tag .
8354	Consumes non - comment tokens .
8355	Consumes the last comment .
8356	Returns the index of the next comment token .
8357	Initialize logging .
8358	Start a prefix mapping .
8359	Adds an iterator to the composite iterator .
8360	Add an option .
8361	Adds a string option .
8362	Adds an integer option .
8363	Adds a long option .
8364	Adds a double option .
8365	Adds a boolean option .
8366	Parse arguments .
8367	Create a new instance of the given class
8368	This method is called when the throttle is reached .
8369	Sets the target object .
8370	Prepares the builder .
8371	Finds a matching method from the target class .
8372	Convert an integer to a string .
8373	Serializes an object to a byte array .
8374	Deserialize an object .
8375	Returns the first child element with the given name .
8376	Get the text value of a child element .
8377	Get a list of child elements .
8378	Returns true if the node name matches the desired name .
8379	Returns true if the node name matches the node name
8380	Sets the string to the given length .
8381	Monitor a release listener .
8382	Add a release listener .
8383	Keep tracking thread alive .
8384	calculate mobile city
8385	Filter a start prefix mapping .
8386	Filter end prefix mapping .
8387	Adds a new callback .
8388	Parse the jar file .
8389	Returns the color of a specific item .
8390	Sets the currently selected values .
8391	Returns the color of the divider .
8392	Set text size .
8393	Get the x coordinate in bounds .
8394	Get introspection string
8395	Gets the keywords .
8396	Gets the command arguments for the given keyword .
8397	Returns the documentation for the given keyword .
8398	Main method for testing
8399	Stops the remote server .
8400	Starts the remote server .
8401	Convert properties from file to json
8402	Converts properties from a file to a JSON string
8403	Converts an input stream to a JSON string .
8404	Converts properties to JSON string .
8405	Convert properties to JSON string .
8406	Convert values to JSON string
8407	Convert properties to string
8408	Converts properties to JSON string .
8409	Get the radius of a shadow .
8410	Creates an ApacheOspFetcher .
8411	Find an intermediate certificate .
8412	Executes the mojo .
8413	Preprocess the input directory .
8414	Substitute variables in template string .
8415	Returns the title of the given list .
8416	Adds the title to the HTML file .
8417	Replace variables in the string .
8418	Updates the relative paths in the HTML includes .
8419	Copies files from one directory to another .
8420	Checks the given path .
8421	Wrap the child .
8422	Starts a fade up animation .
8423	Starts a fade animation .
8424	Calculates the percentage of the specified width .
8425	Updates the view with the specified width .
8426	Launch the launch intent .
8427	Launch the activity .
8428	Get a list of TODos
8429	Get list of FactSheets
8430	Download file from response .
8431	Builds the http client .
8432	Create an AccessControlEntity
8433	Update data model
8434	Create a full export
8435	Get list of exports
8436	Sets the connection URL to the given host .
8437	Sets the client credentials .
8438	Process a graphQL request
8439	Get list of bookmarks
8440	Adds the given graph permissions to the given graph .
8441	Writes the given graph s permissions to the given graph .
8442	Set rulesets .
8443	Closes the connection .
8444	Execute a SELECT statement
8445	Create a DatasetGraph with the given parameters .
8446	Limit the number of threads per process .
8447	Resize the image .
8448	Apply a rotation to the server .
8449	Set the gravity value .
8450	Remove all profiles from the server .
8451	Set text font .
8452	Adds an image to the given image .
8453	Adds an image to the given image
8454	Parses the arguments and returns a list of arguments .
8455	Prints usage information about the given object .
8456	Extract time unit from string .
8457	Parse the arguments of the given object .
8458	Execute the specified URL .
8459	Execute a slide .
8460	Reads actions from a PPTX file .
8461	Sort list by size .
8462	Renders the given text .
8463	Gets the xml file for a slide .
8464	Determines if the specified mouse event is inside the screen .
8465	Selects an element that intersects the specified element .
8466	Execute outbound operation
8467	Executes the given message
8468	Retrieves a file from the system .
8469	Retrieves a temporary directory .
8470	Creates a log value map .
8471	Logs a message at TRACE level .
8472	Logs a log message and stack traceable .
8473	Logs a message at debug level .
8474	Logs a message and stack trace .
8475	Logs a message at the INFO level .
8476	Logs a message and stack trace .
8477	Log an info event .
8478	Logs a message at the WARN level .
8479	Logs a log message and stack traceable .
8480	Logs a message at ERROR level .
8481	Logs a log message and stack traceable .
8482	Add to context line .
8483	Start the StenoWrapper .
8484	Writes a list of key - value pairs .
8485	Serialize a throwable .
8486	Returns the log value .
8487	Returns the caller s stack trace element .
8488	Encode value .
8489	Creates a database with the given name .
8490	Check mappings for the given array position .
8491	Parse save attribute string .
8492	Save data to object in context .
8493	Refresh row from context .
8494	Parse save attribute string .
8495	Get save attribute list from row
8496	Gets the save attribute from column list .
8497	Sets save object in hidden column .
8498	Sets save attributes for a sheet .
8499	Set save attributes for a row
8500	Prepares a cell and save attributes for a cell .
8501	Format a number .
8502	Put shift attributes .
8503	Sets the workbook .
8504	Gets the wrapper for the workbook .
8505	Returns the formula evaluator .
8506	Calculate max col counts .
8507	Loads the WebSheet from the input stream .
8508	Loads the web sheet .
8509	Load work sheet by tab name .
8510	write export file
8511	Do the save .
8512	Processes the submit button .
8513	Populate the component .
8514	Returns the current sheet configuration .
8515	Read object from a serial workbook .
8516	Returns the locale of the given component .
8517	Get picture .
8518	Gets the cell helper .
8519	Gets the picture helper .
8520	Returns the validation handler .
8521	Gets the chart helper .
8522	Converts a list of ptgs to a shared form .
8523	Convert a Ptg into a Ptg array .
8524	Create a Ptg for a watch list .
8525	Create a single ptg .
8526	Get a list of serial rows from current row
8527	Creates a list of serial rows from the current row mapping
8528	Fixes a reference to a reference point .
8529	Build a dynamic row for a RefPtg .
8530	Build dynamic row for an area .
8531	Returns the background color for the solid fill .
8532	Retrieves the color from a shape .
8533	Find the automatic fill color .
8534	Get the XColor from the CTS scheme .
8535	Convert ctsRcColor to XColor
8536	Returns an XColor with an automatic fill .
8537	Convert an XSSFColor to a Color
8538	Convert an XSSFColor into a triple array
8539	Get the background color from a cell
8540	Finds the component name from the given UIComponent .
8541	Populate the input attributes .
8542	Match params of method .
8543	Set a property on an object .
8544	Returns the value of the specified property .
8545	Sets the control attributes .
8546	Find cell validation attributes .
8547	This method is called when a cell has changed .
8548	Setup the cells in a cell .
8549	Sets the cell s picture .
8550	Get the charts map .
8551	Get the title of the chart
8552	Sets the style of a chart .
8553	Create a 3D chart .
8554	Setup the bar style .
8555	Initialize XSSFChartMap .
8556	Gets chart id from parent .
8557	Init anchor map map
8558	Generate a single chart .
8559	Evaluates a collection expression .
8560	Gets the full name from the row .
8561	Rebuild upper level formulas .
8562	Sets the upper level formula for the cell .
8563	Builds cell formula for a given cell .
8564	Gather rows mapping by full name .
8565	Change index number in shift map .
8566	Change the final length of the upper level .
8567	Method to change index number in hidden column
8568	Set full name in hidden column
8569	Get original row number in hidden column .
8570	Set original row number in hidden column
8571	Find the parent row mapping .
8572	Find rows mapping from a switch map
8573	Find an item in a collection .
8574	Builds a ConfigRange with the given insert position .
8575	Returns true if the given row index is a static row .
8576	Returns true if the given row is a static row ref .
8577	replace expression with cell value
8578	Gets the index of all cells in the grid .
8579	Returns a list of cell cells in the grid .
8580	Adds the cell to the list of cells in the specified region .
8581	Builds a sheet comment from a sheet .
8582	Build cell comment from table .
8583	Build configuration map .
8584	Gets sheet configuration .
8585	Build form command from sheet configuration .
8586	Verify that the last cell is blank .
8587	Build sheet .
8588	Checks and removes the last row .
8589	Build command list from sheet comments
8590	Set parent command .
8591	Checks if the command list contains a single command .
8592	Match command .
8593	Copy template to workbook .
8594	Build command list .
8595	Processes a single method line .
8596	Processes a command line .
8597	Move comment to map .
8598	Create config command .
8599	Build attribute map .
8600	Gets sheet configuration from config .
8601	Set footer of sheet configuration .
8602	Set body of sheet configuration .
8603	Set header of sheet configuration .
8604	Delete row .
8605	Removes all ranges from the shift map .
8606	Find full name list .
8607	Gets each command from var parts .
8608	Insert empty object in data context
8609	Delete the last collection .
8610	Prepare collection data in context .
8611	Index command range .
8612	Check if a row is allowed .
8613	Insert template rows .
8614	Evaluates the string and returns the result .
8615	Evaluates the cell formula .
8616	Checks if the string is a valid user formula
8617	Creates a new cell comment .
8618	Evaluates a boolean .
8619	Remove all rows in a sheet .
8620	Removes a single row from a sheet .
8621	Removes the cached cell for the given row .
8622	Removes rows in the body list .
8623	Loads the picture from the current cell .
8624	Load a chart from the current page .
8625	Assembles a new value .
8626	Get the string value of a poi cell .
8627	Gets the string value of a cell .
8628	Gets the string value of a cell .
8629	Get string value with number type .
8630	Set cell value .
8631	Sets cell value .
8632	Sets a boolean value .
8633	Sets cell value .
8634	Sets a cell value .
8635	Copy rows from source sheet to destination row .
8636	Copy a single row .
8637	copy cell from source row
8638	Copy the value of a cell .
8639	Copy the style of a cell
8640	Clones a cell comment .
8641	Creates a client anchor .
8642	Create or insert a comment in a cell .
8643	Match cell settings .
8644	Get the VMLDrawing from a cell
8645	Get the CTShape from VML
8646	Get cell style from source cell
8647	Convert a poi cell .
8648	Gets the row cols from the component attributes .
8649	Gets the initial row number from sheet configuration .
8650	Gets the FacesRow from the given row .
8651	Gets the faces cell from the body row
8652	Gets the POI cell from a row .
8653	Gets the key from a poi cell .
8654	Get or create a new tie cell in the map .
8655	Get the current data context name .
8656	Evaluates an expression .
8657	Evaluates the expression
8658	Custom serialization .
8659	Remove a row from source row .
8660	Merge the given RowsMapping into this instance .
8661	Recover all serial rows .
8662	Returns the chart type for the plot area
8663	Converts a string to a stroke .
8664	Initialize chart data from a XSSF chart .
8665	Set up the chart data .
8666	Initialize XSSF Anchors map .
8667	Initialize the AnchorsMap for a sheet .
8668	Retrieves the chart id of a cell .
8669	Gets the chart id from the child node .
8670	Build the list of objects .
8671	Save the data in the cell .
8672	Recalculate formula .
8673	Gets the cell with the given row and col .
8674	Returns the cell with the specified row and column index .
8675	Restore data context .
8676	Get last collect object .
8677	Checks if the given full name is needed .
8678	Start restore data context .
8679	shift row ref
8680	Sets the first row reference .
8681	Sets the last row .
8682	Builds the cells for a single row .
8683	Build cell .
8684	Read object from a serial workbook .
8685	Build list of categories .
8686	Build the series list
8687	Build chart series .
8688	Get a list of colors from a list of DPTT objects .
8689	Returns the element with the specified index .
8690	Sets the command index map .
8691	Gets the picrues map .
8692	Populate picture map .
8693	Index picture in map .
8694	Generate picture style .
8695	Generates a style for a chart .
8696	Gets the anchor size .
8697	Gets the pattern .
8698	Renders a chart .
8699	Recover the previous entry .
8700	Get the row style for a cell .
8701	Builds a string for a cell s font .
8702	Returns the cell font color .
8703	Creates the string representation of the cell font .
8704	Get the style for a cell .
8705	Get the style for a cell
8706	Gets the text alignment for the cell .
8707	Returns the vertical alignment style for the cell .
8708	Calculates the total height of a row .
8709	Sets the cell style .
8710	Get the input type from cell type
8711	Returns a set of paths for the given path .
8712	Returns an input stream for the specified path .
8713	Removes the prefix path from a resource .
8714	Evaluate input type .
8715	Returns the bean with the given name .
8716	Join a short array with a separator .
8717	Rounds the given value to the given number .
8718	Returns the type of the tab .
8719	Returns the style of the tab .
8720	Get default date pattern .
8721	Get decimal separator by default locale .
8722	Get thousand separator by default locale .
8723	Sets the tie command list .
8724	Builds a list of cells for a cell .
8725	Builds the watch list for a cell .
8726	Adds a new row to the list .
8727	Checks if string is a valid command string .
8728	Parse widget attributes .
8729	Gets attribute key in map by cell .
8730	Parse validate attributes .
8731	Find pair bracket position .
8732	Parses an attribute string .
8733	Parse input control attributes .
8734	Parse validation attributes .
8735	Splits an attribute name into two strings .
8736	Parse special attributes .
8737	Process calendar attributes .
8738	Process special attributes .
8739	Gather special attributes .
8740	Parse comment to map .
8741	Find the index of the first non - cell name .
8742	Remove chars from input string
8743	Convert a number to a column name
8744	Convert col to int
8745	Gets the cell by reference .
8746	Convert a height units into pixels .
8747	Checks if a string is a valid date .
8748	Parses a date .
8749	Check if string is numeric .
8750	Checks if a character should continue .
8751	Set a property on an object .
8752	Compare two cells .
8753	Returns true if the child range is inside the parent range .
8754	Clear hidden columns .
8755	Delete hidden columns .
8756	Deletes the cell from the row .
8757	Process event .
8758	Refresh the cell s status .
8759	Validate with row and column in current page .
8760	Validate by cell .
8761	Check the error message and update the error message .
8762	Validate single cell .
8763	Do the actual validation .
8764	Validates the target cell .
8765	Validate the current page .
8766	Validate row in current page .
8767	Validate a row .
8768	Refresh all cached cells in the current page .
8769	Refreshes all cells in a row
8770	Sets the submit mode in the view .
8771	Validates the current page .
8772	Clear all of the attributes .
8773	Load header rows .
8774	Load header row .
8775	Fills a list of header cells with no more columns
8776	Get the style for the header cell .
8777	Returns the width style for the given column and total width
8778	Load header row with configuration tab
8779	Gets the width style of a column .
8780	Clear the workbook .
8781	Initializes the tabs .
8782	Loads the data in the form .
8783	Refresh the data for all rows .
8784	Refresh the save attributes of a row
8785	refresh data for cell
8786	Returns the index of the tab with the given name .
8787	Load work sheet .
8788	Prepare work sheet .
8789	Set page page page page .
8790	Save the objects in the view map
8791	Set row height .
8792	Load body rows .
8793	Assembles a body row .
8794	Refresh cell .
8795	Process a refresh cell .
8796	Create the dynamic columns .
8797	Add a row to repeat .
8798	Refresh the body rows in the body range .
8799	Sets the status of the user .
8800	Returns true if the user has unaved status .
8801	Returns the common constructor of the given type .
8802	Write input stream to output stream .
8803	Writes a long .
8804	Write a string to a writer .
8805	Sets the traffic stats tag .
8806	Adds a bitmap .
8807	Adds the file descriptor .
8808	Remove the parameter with the given name .
8809	Add a header to the request .
8810	Clears the request .
8811	Call to play .
8812	Calls stop .
8813	Bind to the streaming service .
8814	Unbinds the radio button .
8815	Drops the playback listener .
8816	Save image to disk .
8817	Convert stream to string .
8818	Converts a stream to a string .
8819	Sends the content to the given output stream .
8820	Returns the number of available bytes .
8821	Closes the stream .
8822	Read bytes from the input stream .
8823	Resets the mark .
8824	Sends the start part .
8825	Send the content disposition header .
8826	Send the content type header .
8827	Send the transfer encoding header .
8828	Send the end of the header .
8829	Sends the end of the stream .
8830	Send multiple parts to the output stream .
8831	Returns the total length of the given parts .
8832	Checks if the url is a redirect URI
8833	Sends a 304 response .
8834	Sets the date header .
8835	Sets date and cache headers .
8836	Sets the content type header .
8837	Closes the channel .
8838	Send the content disposition header .
8839	Send the data to the given output stream .
8840	Installs the cache .
8841	Ensures that the working directory exists .
8842	Gets the response .
8843	Returns an input stream for the response body .
8844	Resets the bitmap .
8845	Gets the websockifySsl context .
8846	Validate keystore .
8847	Replace the current scale type .
8848	Stop reporting .
8849	Gets a pending intent .
8850	Disconnects the given connection .
8851	Attempts to bind to the service .
8852	Unbinds this application .
8853	Notify listeners about view changes .
8854	Ensures the channel is open .
8855	On accept data .
8856	Called when the application has been released .
8857	Wait for the loader to be loaded .
8858	Sets text or hides the specified text .
8859	Hides soft input from textView .
8860	Show soft input .
8861	Toggles soft input from textView .
8862	Returns the width of pixels in pixels .
8863	Called when an exception occurs .
8864	Clear cache for specified url .
8865	Populate image with given url
8866	Cancel image loading .
8867	Create image consumer .
8868	Sets the image as a drawable .
8869	Sets the loading image .
8870	Start an image loader task .
8871	Adds an image to the cache .
8872	Release buffer .
8873	Adds request properties .
8874	Adds a parameter to the request .
8875	Attempt to connect to the core .
8876	Get MD5 hash of string
8877	Returns the String identifying the given CUblas
8878	Returns the String identifying the given CUblasStatus
8879	Checks the given result .
8880	Check the result of the last result .
8881	Adds a lexeme to the lexicon .
8882	Adds an ending id to the end
8883	Returns the estimated estimate for the given wordform .
8884	Prints the description of this token .
8885	Verify and set strong attribute value .
8886	Generate kamols markup for given attribute values .
8887	Verify and set attribute value .
8888	Remove kamols markup formatting .
8889	Returns a list of metric data
8890	Gets the query string .
8891	Process JSON data .
8892	Parses JSON string .
8893	Get the connection configuration .
8894	Executes the metrics .
8895	Create a new GC04 code list
8896	Create a new Generic CodeListReader
8897	Create a new GenericodeSet reader
8898	Create a new GC10 code list
8899	Create a new Generic CodeListReader
8900	Create a new GC10 column set .
8901	Get the ID of a column .
8902	Get the value of the passed row .
8903	Get the column with the passed ID .
8904	Get all key IDs from the passed column set .
8905	Get the key with the passed ID .
8906	Check if the passed column is a key column .
8907	Create a new column .
8908	Create a new key .
8909	Set the number of lines to skip .
8910	Add a column to the index
8911	Create a new gc04 code list .
8912	Create a new gc04 code list writer .
8913	Create a new GC04 column set .
8914	Create a new gc10 code list .
8915	Create a new gc10 code list writer .
8916	Create a new gc10 column set .
8917	Returns a new GenericodeValidator for the given GC04 .
8918	Create a new GenericodeValidator for a GC04 code .
8919	Create a new GenericodeValidator for gc4 columns .
8920	Returns a new GenericodeValidator .
8921	Create a new GenericodeValidator .
8922	Create a new GenericodeValidator .
8923	Send the logs to the server .
8924	Set the context .
8925	Get the current log level .
8926	Returns true if capturing is enabled .
8927	Sets the maximum log store size .
8928	Prepend metadata to given message
8929	Append stack metadata to a JSONObject
8930	Creates a JSONObject .
8931	Logs the current location
8932	Sets the user identity .
8933	Get byte array from file .
8934	Request location updates .
8935	Sizes the specified region .
8936	Size of all entries in the given region .
8937	Dump the size of all entries in the local region .
8938	Reads a snapshot record from the input stream .
8939	Dumps statistics to a PrintWriter .
8940	Returns the time values starting at the given index .
8941	Convert a file to a chart
8942	Get the pool associated with the given server .
8943	Get the pool for the given JMX JMX
8944	Checks if a region exists on the server .
8945	Get member by name
8946	Return a collection of host names
8947	Looks up a network host .
8948	Check if data is an exception and send it to resultSender .
8949	Executes the given function and returns a collection of results .
8950	Flattens a collection of objects .
8951	Execute a query .
8952	Creates a new cache listener for the entry .
8953	Returns a new cache listener that delegates to the after deletion .
8954	Handle exception .
8955	Gets the onregionKeyFacts for this node .
8956	Execute the export function .
8957	List all host names in the given JMX JMX .
8958	Executes a region .
8959	Returns the app name from the given resources .
8960	Constructs the security properties .
8961	Get a region by name .
8962	Returns a region by name .
8963	Helper method to construct the comparison object .
8964	Returns true if the next idx is inserted at the given timestamp .
8965	Close the InputStream .
8966	Dumps all the gfs files in a directory .
8967	Entry point to the gf stats file .
8968	Attempt to reconnect to the cache .
8969	Stop members on a host
8970	Shut down a member
8971	Shut down distributed system
8972	Shut down all members in the group
8973	Converts a list of results into a page key .
8974	Read results by page .
8975	Imports a region .
8976	Validates the remoteLocators and locators .
8977	Execute the function .
8978	Builds the check sum map .
8979	Returns the value of the given column
8980	Returns true if the given type is an integer type .
8981	Serializes an object to a byte array .
8982	Deserialize a byte array .
8983	Create new instance .
8984	Check for table id .
8985	Check for columns .
8986	Checks whether the given element is a super type .
8987	Gets the schema of the table .
8988	Build Java code .
8989	Generate getId method .
8990	Convert query to an Observable
8991	Checks if the given column name is equal to the given column name .
8992	Returns the given string or the given default string if the string is blank .
8993	Capitalizes a string .
8994	Returns true if the given type is a primitive type of the given type .
8995	Get a builder for descending order
8996	Read the temperature from the device .
8997	Returns the result of the given type .
8998	Prints a message to the console .
8999	Prints error message .
9000	Gets all available icons .
9001	Returns a list of all available icons .
9002	Creates the layout for the SLD editor .
9003	Gets the background decoration .
9004	Raises a power .
9005	Sets this matrix to the specified values .
9006	Calculates the power of a given power .
9007	Returns the root root of the specified root .
9008	Compute the power of a power .
9009	Returns the ln .
9010	Helper method to perform a new n .
9011	Returns the arcan root of the specified scale .
9012	Calculate the arithmetic of a power .
9013	Returns the square of the square .
9014	Prints the pi .
9015	Convert a time to a string .
9016	Set the limits .
9017	Add a r .
9018	Prints the buffer .
9019	Adds a complex number to this complex
9020	Subtracts a complex number from another .
9021	Multiply this complex by another
9022	Divide complex number by another .
9023	Sets the values of this matrix .
9024	Get a row of this matrix .
9025	Get a column of this matrix .
9026	Sets this matrix to the specified values .
9027	Returns the transpose of this matrix .
9028	Add another matrix to this matrix .
9029	Subtract another matrix from this matrix .
9030	Multiplies this matrix by a given number .
9031	Multiplies this matrix by another .
9032	Print the matrix to the specified width .
9033	Set image resource .
9034	Validate coefficients .
9035	Compute the next position .
9036	Clear the cache .
9037	Parses a sld .
9038	Parses a sld .
9039	Validate the specified StyledLayerDescriptorInfo .
9040	Validate the SLD
9041	Compute the random area of the specified rectangle .
9042	Set the values of this matrix .
9043	Sets this matrix to the specified values .
9044	Returns the inverse of this matrix .
9045	Compute the determinant .
9046	Normalize this matrix .
9047	Solve linear solution .
9048	Prints the decomposition of the matrix .
9049	Performs forward elimination .
9050	Performs a forward substitution .
9051	Performs a back substitution .
9052	Optimized solution .
9053	Convert a square matrix to a square matrix .
9054	Returns the next vonne .
9055	Do the iteration procedure .
9056	Compute the next position .
9057	Checks the position in the tree .
9058	Compute the next position .
9059	Check if two points are equal .
9060	Add the given addend to the result .
9061	Multiply two bits .
9062	Raises a power of m .
9063	Do the iteration procedure .
9064	Returns the SLDManager .
9065	To char array .
9066	Decompose the given bits .
9067	Prints the contents of this object to a given PrintStream .
9068	Validates the floating point exponent .
9069	Validates the floating point exponent value .
9070	Validates the double - bias exponent .
9071	Validates the double exponent value .
9072	Creates the SLDGwt service .
9073	Returns the next random distribution .
9074	Compute the next random value .
9075	Compute the next random ratio .
9076	Returns an array of prime sieve .
9077	Returns an array of the factors of the given n .
9078	Do the iteration procedure .
9079	Compute the next position .
9080	Checks the position in the tree .
9081	Set the JavaFX Application .
9082	Loads the configuration from a file .
9083	Sets the default configuration .
9084	Initializes the FXML Loader .
9085	Sets the location of the given latitude and longitude .
9086	Extracts the host and port from a service .
9087	Returns the applicable attribute definition for the given attribute .
9088	Evaluates the given attribute filter and returns the result .
9089	Sanitize the given string .
9090	Set the address to address .
9091	Specifies a list of GeoComponents that match a map of components .
9092	Query the names of all registered services .
9093	Returns a collection of instances that match the given name .
9094	Gets all collaborators for logged in user .
9095	Gets the field meta data .
9096	Change password for logged in user
9097	Gets all users
9098	Gets gravatar by email address
9099	Gets the gravatar for a given user
9100	Populate data from Elasticsearch .
9101	Gets the elasticsearch field type .
9102	Create a flow step
9103	Update a flow step
9104	Get flow step by id
9105	Get a FlowStep by step
9106	Get all steps in a flow
9107	Delete a flow step
9108	Delete a flow step
9109	Populate form fields .
9110	Close a connection .
9111	Handles incoming messages .
9112	Called when the connection is closed .
9113	Get echo messages from return value
9114	Get all personal inventory items
9115	Create a new table record .
9116	Delete a form container
9117	Get list of form flow history
9118	Gets the form and field history .
9119	Get the most recent form history records for a given form .
9120	Locks the given form .
9121	Unlock form container .
9122	Unlock a form container .
9123	Map a form container to a form .
9124	Convert string to list of roles
9125	Create a form definition
9126	Update a form definition
9127	Get a form definition by id .
9128	Get a form definition by name
9129	Gets all Forms for logged in user
9130	Delete a form definition
9131	Gets storage key from parameters .
9132	Initializes the memcached client .
9133	Shutdown memcached client .
9134	Converts a string to a long .
9135	Convert a document to a PDF file .
9136	Retrieve the form from cache .
9137	Create a flow step entry .
9138	Create flow exit rule .
9139	Create a flow step view .
9140	Update a flow step rule .
9141	Update flow exit rule .
9142	Update a flow step rule .
9143	Move a flow step entry up .
9144	Move a flow step entry down .
9145	Delete a flow step rule .
9146	Delete flow step exit rule .
9147	Delete a flow step rule
9148	Initialize session .
9149	Gets all user queries .
9150	Gets all roles
9151	Get service ticket as hex .
9152	Create a field masked by the specified form .
9153	Create a field barcode
9154	Create a decimal spinner .
9155	Create a decimal slider .
9156	Create a field .
9157	Update a field with the specified value .
9158	Update a field barcode
9159	Update double spinner value
9160	Update a field s decimal slider .
9161	Update a field .
9162	Get field by field name
9163	Gets a list of fields by form name and logged in user .
9164	Gets a list of all fields for a form .
9165	Delete a field
9166	Force delete field .
9167	Returns the table metadata for a table .
9168	Update a field value
9169	Gets or creates an index .
9170	Create a new flow
9171	Update an existing flow
9172	Get a flow by id
9173	Get a flow by name
9174	Delete a flow
9175	Delete a flow
9176	Update field value
9177	Gets all global field values
9178	Gets a map of form definitions .
9179	Decrypt init packet .
9180	Close the ABASE client WebSocket connection .
9181	Initialize a new request .
9182	Gets verbose message .
9183	Create a new admin user .
9184	Creates an access token .
9185	Get user profile info
9186	Execute POST request
9187	Execute POST request
9188	Gets the response handler .
9189	Check if a connection is valid
9190	Returns the http client .
9191	Retrieves the path to the user s trust store .
9192	Closes the database connection .
9193	Gets a list of items for a given view .
9194	Send form to a flow
9195	On close .
9196	Handles a message .
9197	Send a JSON object to the server .
9198	Sends a message to the client .
9199	Closes the session .
9200	Execute a native SQL query synchronously .
9201	Request a license
9202	Apply a license
9203	Create text plain text plain text text .
9204	Create a paragraph text .
9205	Create a paragraph text
9206	Creates a multi - choice select value .
9207	Create a date time field
9208	Update a field
9209	Update a field s paragraph text
9210	Update field value
9211	Update a field .
9212	Update field value
9213	Create a field value
9214	Get configuration by key
9215	Get all configurations
9216	Create an attachment
9217	Get an attachment by id .
9218	Delete an attachment
9219	Delete an attachment
9220	Parses a jar file .
9221	Set the class loader to use .
9222	Verify that the name is not null .
9223	Verify that the given name is valid .
9224	Verify that the element has a simple type .
9225	Returns the XML node of the given XML file .
9226	Verify that the schema is valid .
9227	Verify that the schema has been set .
9228	Converts the given value to the given instance .
9229	Creates a cli interface .
9230	Creates a cli using the given options .
9231	Parse arguments .
9232	Parses the arguments using the CLI .
9233	Create a builder for the given path .
9234	Remove a footer view .
9235	Gets the value of the p .
9236	Generate a 3D Gaussian gradient .
9237	Calculate an integer value noise .
9238	Returns the value noise of an integer .
9239	Compute a cubic interpolation .
9240	Compute the s curve .
9241	Sets the bounds .
9242	Process a CloudTrailEvent .
9243	Process a CloudTrailEvent .
9244	Returns the account id of the given event .
9245	Apply whitelist rules against the given rule entity .
9246	Get event serializer .
9247	Creates a file .
9248	Creates a directory .
9249	Restore the system properties .
9250	Creates the delegate implementation .
9251	Add an object to the collection .
9252	Sets the value of the specified property .
9253	Gets an array property .
9254	Get next state
9255	Remove the garbage collected SoftReference .
9256	Gets the type for the given type .
9257	Returns the parameterized type .
9258	Returns the value associated with the given type .
9259	Prints the stack trace .
9260	Prints the stack trace .
9261	Replace object .
9262	Run the task .
9263	Sets the task .
9264	Called when the task is accepted .
9265	Called when the task is rejected .
9266	Called when the task has started .
9267	Called when the task has completed .
9268	Stop the task .
9269	Get the next job .
9270	Put a job .
9271	Convert a string to a blocking mode
9272	Read mode .
9273	Sets up the readers .
9274	Adds a reader to the catalog .
9275	Copy readers to the new catalog .
9276	Create a new catalog .
9277	Loads all catalog files from the system .
9278	Parse a catalog from a URL .
9279	Parses pending catalog files .
9280	Parse a catalog file .
9281	Called when a catalog entry is unknown .
9282	Parses all catalog entries in the catalog file .
9283	Resolve a DCType .
9284	Resolve a document .
9285	Resolve a system ID .
9286	Resolve a local URI .
9287	Resolve the subordinate catalog .
9288	Make the given system identifier .
9289	Normalize an URI .
9290	Returns the hex representation of a byte .
9291	Adds the specified entry to the delegate list .
9292	Creates a SoftValueRef .
9293	Fire on throwable .
9294	Add a Throwable to the registry .
9295	Creates list .
9296	Compares this timer task to another .
9297	Returns the IP address as an InetAddress object .
9298	Return the object at the given index .
9299	Set the object at the given index .
9300	Removes soft objects from the list .
9301	Add a new entry type .
9302	Returns the type of an entry .
9303	Get the number of arguments for a given type .
9304	Returns the entry argument at the given index .
9305	Set the class loader for a thread .
9306	Swaps two times .
9307	remove node from queue
9308	Cleans out a timeout object .
9309	Loads a class .
9310	Preload all known protocols .
9311	Creates a URL stream handler .
9312	Check if the system properties are set .
9313	Returns the value of the class
9314	Creates the delegate implementation .
9315	Returns a synchronized synchronized wrapper .
9316	Creates a new counter .
9317	Determines if the current element is in the extension namespace stack .
9318	Checks if a chunk is exceeded .
9319	Renders the specified name to the specified target object .
9320	Get an object instance .
9321	Substitute a string from a string .
9322	Splits a string by delimiter .
9323	Join byte array .
9324	Default implementation .
9325	Converts the value to a blocking mode .
9326	Creates the cache .
9327	Returns the value associated with the given key .
9328	Returns the value associated with the given key .
9329	Removes the given key from the map .
9330	Flushes all expired entries .
9331	Returns a list of all keys in this map .
9332	Set the current resolution .
9333	Returns the entry associated with the given key .
9334	Gets children by tag name .
9335	Gets the unique child of the given element .
9336	Get an optional child element .
9337	Get the content of an element
9338	Returns the unique content of a given element .
9339	Get the string content of an optional child element .
9340	Set the maximum queue size .
9341	Set the blocking mode
9342	setblockingMode
9343	Execute the task .
9344	Resolves a system resource .
9345	Overrides default implementation .
9346	Resolve an external system .
9347	Resolve a public public ID .
9348	Perform a query on a resolver .
9349	Appends a vector to a vector .
9350	Resolve a system ID .
9351	Resolve system id .
9352	Resolve the resolution of a system .
9353	Returns a vector that contains all local system entries .
9354	Resolve all subordinate catalogs
9355	Read a catalog from a file .
9356	Reads a catalog from an input stream .
9357	Connect to the file .
9358	Returns an OutputStream for writing .
9359	Assign next value to next .
9360	Helper method to help delete .
9361	Returns the value of this header .
9362	Creates a new snapshot .
9363	Atomically sets right .
9364	Creates a new logger .
9365	Appends a list of objects to the given buffer .
9366	Returns the short name of the class .
9367	Returns the string representation of the class .
9368	Returns an enumeration of all the properties in the system .
9369	Returns the property group for the given basename .
9370	Get a compatible constructor .
9371	Copy the given object .
9372	Dereference object .
9373	Initialize the context
9374	Update jndi cache
9375	Returns the keys in this map .
9376	Returns the set of defaults .
9377	Removes the specified listener from this map .
9378	Notify listeners that a property has been added .
9379	Notify listeners that a property has been removed .
9380	Notify listeners that a property has been changed
9381	Notify all registered listeners of a bound property .
9382	Create a property name .
9383	Loads properties from the specified reader .
9384	Loads properties from a class name .
9385	Returns the property group for the given index and index .
9386	Returns true if the entity has been resolved .
9387	Resolves the given system ID .
9388	Resolve system ID as a URL .
9389	Resolves a classpath resource .
9390	Set the value of the property as a Document .
9391	Normalize publicId .
9392	Normalize a public ID .
9393	Decode an ID .
9394	replace all occurrences of oldStr
9395	Starts the timer .
9396	Stop the lap .
9397	Wraps the given StopWatch .
9398	Compares two hashCode objects .
9399	Generates a hashcode from a byte array .
9400	Generates a hash code for an array .
9401	Creates the internal map .
9402	Sets the value of the field .
9403	Returns the next token .
9404	Sets up the default formats .
9405	Adds a new vertex to the graph .
9406	Sets the root vertex .
9407	Removes a vertex from the graph .
9408	Performs a depth - first search .
9409	Performs a depth - first traversal .
9410	Finds a vertex by its data .
9411	Finds all cycles in the graph .
9412	Normalize HTML entities .
9413	Parse the given string into an Element .
9414	Parse the XML from an input stream .
9415	Parse the input source and return the root element .
9416	Create an Element with the given name .
9417	Resolve a qualified name .
9418	Copy attributes from srcElement to destElement
9419	returns true if node has child elements
9420	Returns an iterator of child elements .
9421	Get the text content of a node
9422	Gets child elements by name .
9423	Returns the parent element of the given node .
9424	Adds a resource to the pool .
9425	Read a catalog from an input stream .
9426	Read a catalog from a URL .
9427	Get the local host address .
9428	Resolves an input stream .
9429	Sets a system property on the current thread .
9430	Prints information about a class .
9431	Description of a class
9432	Strip package name .
9433	Returns the package name .
9434	Attempt to load a primitive type .
9435	Gets the primitive wrapper .
9436	Get all interfaces of the given class .
9437	Get all unique interfaces of a class
9438	Checks if is a primitive wrapper .
9439	Creates a new instance of the specified class using the provided default class .
9440	get getter method getter
9441	Get setter method .
9442	Converts a name to a Java class .
9443	Get a system property .
9444	Returns an array of filenames .
9445	Removes weak objects from the set .
9446	Returns an iterator over the set .
9447	Creates an instance of the Lister .
9448	Returns a set of all entries in this map .
9449	Adds a bound property listener .
9450	Remove a bound property listener .
9451	Returns true if the string is null or empty .
9452	Finds the property editor for the given type name .
9453	Registers an editor for the given type and editor type .
9454	Convert a string value to an object .
9455	Get the class loader for the specified thread .
9456	Returns an ApplicationDeadlockException if the given Throwable is an ApplicationDeadlockException .
9457	Adds a new timeout to the specified target .
9458	Do work .
9459	Creates a subcontext with the given name .
9460	Looks up an object by its name .
9461	Check if the object is an instance of the given class .
9462	Prints information about a class .
9463	Get a transition by name .
9464	Read properties from the classpath .
9465	Read verbosity .
9466	Checks to see if there is a relative catalog .
9467	Retrieve the catalog list from the properties file .
9468	Returns a vector of catalog files .
9469	Returns true if the preferred property is set to be used .
9470	Determines whether or not a static catalog should be used .
9471	Resolves an input source .
9472	Resolve a relative URL .
9473	Make an absolute URI .
9474	Resolves a class .
9475	Calls the setter .
9476	Gets the local name of the element .
9477	Returns the namespace URI of the given element .
9478	Returns the namespace URI of the given element .
9479	Creates a list from an enumeration .
9480	Returns an input stream for the given filename .
9481	Loads the properties from a file .
9482	Reads all the properties from the directory .
9483	Adds an edge to the graph .
9484	Adds an outgoing edge to the graph .
9485	Adds an incoming edge to the graph .
9486	Returns true if the given edge exists .
9487	Removes an edge from the graph .
9488	Finds an edge from the graph .
9489	Finds an edge from the graph .
9490	Returns the cost of this vertex .
9491	Recursively visit a file .
9492	Returns true if there are more elements .
9493	Fire an event .
9494	Installs JVM type provider .
9495	Recursively deletes a folder .
9496	Dispatches an action on the FX thread .
9497	Gets action stream .
9498	Create fxml file path .
9499	Creates a stream of records from a collection of records .
9500	Converts a collection of rights to one .
9501	Converts a collection of rights to a stream .
9502	Convert a collection of rights to a stream .
9503	Determines whether a page is allowed by the user .
9504	Check that the instruction generated
9505	Main method for testing
9506	Main method for testing
9507	Gets the sum degree .
9508	Convert superclasses to superclass arguments .
9509	Sets the resource loader .
9510	Checks if the datasource has been set .
9511	Creates an iterable of the given type .
9512	Creates an array .
9513	Creates a list .
9514	Create a collection .
9515	Creates a list from a given type .
9516	Creates an instance with the given left type .
9517	Creates an instance of the right type .
9518	Fails if the given type is invalid .
9519	Sets success .
9520	Creates a new Try with the given type .
9521	Connect jdbc with driver and driver .
9522	Run in the given database .
9523	Query in the database
9524	Returns the boolean array as a boolean array .
9525	Filter by example
9526	On upgrade .
9527	Dump the table .
9528	Restore the table .
9529	set empty text
9530	Dumps the table to a CSV file .
9531	Unescapes quotes .
9532	Get a list of values from a comma .
9533	Parses a comma separated string into a map
9534	Convert map to CSV string
9535	Join a list of strings .
9536	Join a list of strings .
9537	Reads a database model from the index file .
9538	Write to index
9539	Checks the id field .
9540	Gets the base DAO model .
9541	Gets the bind type .
9542	Import data from a CSV file .
9543	Backup all tables to CSV .
9544	Restore all tables from CSV .
9545	Writes the index file .
9546	Creates a query .
9547	Creates a typed query .
9548	Render the query .
9549	Deletes an object from the database .
9550	Inserts the given object into the database .
9551	Updates the specified object .
9552	Add a WHERE clause to the WHERE clause .
9553	Add a subquery that matches the given predicate .
9554	Returns the next active stack .
9555	Gets an empty stack .
9556	Adds a plan to the cache .
9557	Select a plan .
9558	Returns the plan at the given index .
9559	Sets the plan variables for an agent .
9560	Returns the result at the given index .
9561	Gets the parents of this node .
9562	Returns the array of children .
9563	Grows byte array by increment .
9564	Create a logger .
9565	Step .
9566	Set the goals .
9567	Pause for user input .
9568	Initializes the optimization pools .
9569	Initialize the intention selection threads .
9570	Start the intention selection threads .
9571	Shutdown the intention selection threads .
9572	Registers an extension .
9573	Resets the internal state .
9574	Load an agent .
9575	Processes the plan string for a goal .
9576	Creates an agent in the catalog .
9577	Loads a class .
9578	Loads the specified class name .
9579	Compare two objects for equality .
9580	Display usage .
9581	Parses the command line arguments .
9582	Parses the configuration with the given option .
9583	Evaluate a query .
9584	Returns the object at the given index .
9585	Find an object by name .
9586	Adds an object to the list .
9587	Get object by idx .
9588	Adds an object to the list .
9589	Removes an object from the list .
9590	Gets the type of an object .
9591	Returns true if the given belief matches the given belief .
9592	Main method for testing .
9593	Convert a string to a byte array .
9594	Posts a goal to the worker .
9595	Sends a message to the agent .
9596	Sends a message to the agent .
9597	Gets the goals .
9598	Creates a new belief set .
9599	Adds a new beliefset .
9600	Executes the given query .
9601	Suspend the agent .
9602	Gets a field by its name .
9603	Registers a number of neighbours .
9604	Builds a random name .
9605	Manually manage all agents .
9606	Check if stack is valid .
9607	Remove finished agents .
9608	Manage a goal .
9609	Receives the pool .
9610	Sets whether the agent is idle .
9611	Moves the disc on the specified pin .
9612	Initializes the program .
9613	Wait until all the pools are idle .
9614	Finalize all agents .
9615	Returns true if all pools are idle .
9616	Returns the pool id for an agent .
9617	Picks the currently selected expression .
9618	Sets the expression .
9619	Creates a join expression for the given attribute .
9620	Recursively find the join recursively .
9621	Find or create a join .
9622	Returns true if the end is reached .
9623	Gets upload stream .
9624	Handles a REST request .
9625	Check if the parameter has the given value .
9626	Get parameter value .
9627	Parse parameters .
9628	Configure transaction manager .
9629	Get target file .
9630	Write the given artifact .
9631	Post - process instance fields
9632	Gets the declared constructor .
9633	Builds a string representation of the configuration .
9634	Returns the method for the given method .
9635	Returns the type of the field .
9636	Get dependency value .
9637	Save the content of the temporary file .
9638	Sets a default link .
9639	Sets the default link template for the given link .
9640	Reads the links from the response .
9641	Handles header links .
9642	Handles the JSON body links .
9643	Parse an object .
9644	Gets or creates a map .
9645	Read all allowed methods .
9646	Check if the request is allowed
9647	Registers all processors .
9648	Register instance factory .
9649	Register instance processor .
9650	Register class processor .
9651	Create an instance of the specified interface .
9652	Adds an argument to the list .
9653	Creates target files list .
9654	Returns the XML representation of this object .
9655	Initialize the template
9656	Returns true if the specified template has a reference to the specified file .
9657	Creates a template model from a Reader .
9658	Create a parameterized template model from a file .
9659	Sets the request path .
9660	Get an Observable from a given startIndex .
9661	Creates an object scope .
9662	Set the value of a field .
9663	Add capture appender to logger
9664	Removes the specified appender from the logger .
9665	Clear the specified appender .
9666	Read arguments from a http request .
9667	Parse the EMF model .
9668	Resolve all proxies .
9669	Gets the files in a directory .
9670	Parse a directory .
9671	Replies if the resource set has been resolved .
9672	Find all EObjects in a ResourceSet .
9673	Set model directories .
9674	Sets the file extensions .
9675	Sets the model resources .
9676	Read next record .
9677	Sets the designated parameter to the given array .
9678	Sets the designated parameter to the given Boolean value .
9679	Execute a SQL statement .
9680	Convert a string to an object
9681	Merge a template .
9682	Gets the model directory .
9683	Gets the directory of the template .
9684	Write a document to the http response .
9685	Start the UI .
9686	Configures the window .
9687	Prints a print .
9688	Writes the contents of an input stream to the output stream .
9689	Invoke the proxy
9690	Attaches the servlet request .
9691	Detaches the object from the context .
9692	Returns the cookies associated with this request .
9693	Dump the http request .
9694	Gets the invocation meters .
9695	Configures the event stream .
9696	Set the remote host .
9697	Get parameter from stream .
9698	Removes prefix from path .
9699	Get the common directory between two directories .
9700	Convert absolute path to relative path .
9701	Convert relative path to absolute path .
9702	Returns the depth of a file .
9703	Dumps the error .
9704	Send json object .
9705	Adds a parameterized template .
9706	Add a list of parameters .
9707	Initialize the parameterized template .
9708	Finds all references to a template file .
9709	Enable or disable the save button .
9710	Handle delete .
9711	Deletes the file .
9712	Create new instance .
9713	Get the files in sorted order .
9714	Get the summary of all files .
9715	Get the summary row for the given directory .
9716	Get sub - summary row .
9717	Create a new instance of the specified managed class .
9718	Gets the setup class .
9719	Replies the model directories .
9720	Replies the model resources that are contained in the model .
9721	Sets the candidate data source .
9722	load xml from input stream
9723	Called when an error occurs .
9724	Checks if the given parameter is an object type .
9725	Reads the given parameters from the given HTTP request .
9726	Parse JSON from input stream
9727	Extract parameter value from fit cell .
9728	Gets the value of the hints property .
9729	Determines if the request is an XHR request
9730	Checks if the request is Android .
9731	Handles the entity event .
9732	Gets all properties with the given annotation .
9733	Gets an annotation on a property .
9734	Helper method to log a message
9735	Performs a Whois lookup .
9736	Checks if the given node has a parser for the given host .
9737	Get managed class .
9738	Get managed method .
9739	Process notContainsException
9740	Process notContains
9741	ResultSet object as a boolean .
9742	Returns true if the current row is a wrapper for the given class .
9743	Serialize this response to a HttpServletResponse .
9744	Get cookie value .
9745	Add cookie .
9746	Remove cookie by name
9747	Returns an iterator over cookies .
9748	Returns the target file list producer .
9749	Adds a new field .
9750	Compiles the compiler .
9751	Verifies the response for a given token .
9752	Gets the file name .
9753	Ensures that a path ends with a slash .
9754	Login with the specified username and password .
9755	Gets the HTTP servlet request .
9756	Invoke managed method .
9757	Execute a managed method .
9758	Execute an immutable transaction .
9759	Returns the files in this directory .
9760	Returns the last file .
9761	Returns the concrete configuration .
9762	Checks if the request path starts with the given path .
9763	Gets the list of factories for the given model type .
9764	Gets the session .
9765	Serialize the file to the output stream .
9766	Reads metadata from the server .
9767	Handle request .
9768	Clean up resources .
9769	PreDestroy event streams .
9770	Handle allowed methods .
9771	On upload .
9772	Deletes the endpoint .
9773	Extract column parameters .
9774	Gets the argument names .
9775	Adds a periodic task .
9776	Sets the given timeout .
9777	Loads views from configuration .
9778	Returns next file .
9779	Reads the application properties .
9780	Prints welcome banner .
9781	Prints the stopped banner .
9782	Create a Chameleon instance
9783	Register a shutdown hook .
9784	Triggers the callback .
9785	Handles a trigger .
9786	Insert and replace the given row .
9787	Gets the counts of all files .
9788	setter for score - sets
9789	getter for variants - gets
9790	setter for variants - sets
9791	getter for questionType - gets
9792	setter for questionType - sets
9793	getter for token - gets
9794	getter for depLabel - gets
9795	setter for depLabel - sets
9796	getter for semanticType - gets
9797	setter for semanticType - sets
9798	getter for sections - gets
9799	setter for sections - sets
9800	indexed getter for sections - gets an indexed value -
9801	indexed setter for sections - sets an indexed value -
9802	getter for uris - gets
9803	setter for uris - sets
9804	getter for types - gets
9805	setter for types - sets
9806	getter for targetType - gets
9807	setter for targetType - sets
9808	getter for rank - gets
9809	setter for rank - sets
9810	getter for queryString - gets
9811	setter for queryString - sets
9812	getter for candidateAnswers - gets
9813	setter for candidateAnswers - sets
9814	indexed getter for candidateAnswers - gets an indexed value -
9815	indexed setter for candidateAnswers - sets an indexed value -
9816	getter for query - gets
9817	setter for query - sets
9818	getter for hitList - gets
9819	setter for hitList - sets
9820	indexed getter for hitList - gets an indexed value -
9821	indexed setter for hitList - sets an indexed value -
9822	getter for abstractQuery - gets
9823	setter for abstractQuery - sets
9824	getter for searchId - gets
9825	setter for searchId - sets
9826	setter for docId - sets
9827	getter for offsetInBeginSection - gets
9828	setter for offsetInBeginSection - sets
9829	getter for offsetInEndSection - gets
9830	setter for offsetInEndSection - sets
9831	getter for beginSection - gets
9832	setter for beginSection - sets
9833	getter for endSection - gets
9834	setter for endSection - sets
9835	getter for aspects - gets
9836	setter for aspects - sets
9837	getter for triple - gets
9838	setter for triple - sets
9839	getter for sourceRelation - gets
9840	setter for sourceRelation - sets
9841	getter for subject - gets
9842	setter for subject - sets
9843	getter for predicate - gets
9844	setter for predicate - sets
9845	getter for isObjUri - gets
9846	setter for isObjUri - sets
9847	getter for operator - gets
9848	setter for operator - sets
9849	getter for operatorArgs - gets
9850	setter for operatorArgs - sets
9851	getter for concept - gets
9852	getter for score - gets
9853	getter for text - gets
9854	setter for text - sets
9855	getter for id - gets
9856	setter for id - sets
9857	getter for name - gets
9858	getter for abbreviation - gets
9859	setter for abbreviation - sets
9860	setter for concept - sets
9861	getter for variants - gets
9862	setter for variants - sets
9863	getter for namedEntityTypes - gets
9864	setter for namedEntityTypes - sets
9865	getter for conceptType - gets
9866	setter for conceptType - sets
9867	getter for occurrences - gets
9868	setter for occurrences - sets
9869	getter for conceptss - gets
9870	setter for conceptss - sets
9871	getter for originalText - gets
9872	setter for originalText - sets
9873	getter for args - gets
9874	setter for args - sets
9875	getter for label - gets
9876	setter for label - sets
9877	Find the next clear bit at the given index .
9878	Set the bit at the specified index .
9879	Frees the buffer .
9880	Creates a new instance of CacheValue .
9881	Rehash the given array .
9882	Generate HELM2 2 HELM2
9883	Check if brackets are open .
9884	Add details from a string
9885	Returns a human - readable representation of this object .
9886	Add an element to the group
9887	method to parse HELM
9888	validate polymerId
9889	Check if a polymerID is valid
9890	Checks if the connection s connection is valid .
9891	Validate group ID .
9892	Checks if a string is repeated .
9893	Check if the polymer is a peptide or rna
9894	Convert notation to JSON string
9895	get a simple polymer with the given id
9896	Gets the current grouping notation .
9897	Return a String representation of the HELM 2D file .
9898	method to get HELM 2 HELM2
9899	Generate HELM2 notation for HELM2
9900	Convert groupings to HELM2
9901	Convert an annotation to a human - readable format .
9902	method to get the list of polymer ids
9903	get a PolymerNotation with the given id
9904	method to set the PolymerElements
9905	Convert HELM string to HELM
9906	Set the annotation string
9907	Set the count value
9908	decide the MonomerNotation
9909	Decide the MonomerNotationGroup in a group .
9910	Decide the given string based on the string
9911	Gets the value of this interval .
9912	Parse the HELM string and parse the HELM string
9913	method to set the nucleation unit
9914	Define ambiguity strategy .
9915	Gets the statistics of this worker .
9916	Creates an ADiGraph from a collection of edges .
9917	Creates a new ADiGraph .
9918	Initializes the incoming paths .
9919	Sort nodes by reachability .
9920	Register a pattern for a given pattern .
9921	Get number of subscribed messages .
9922	Unsubscribe a given pattern .
9923	Run a remote command .
9924	Send a reply to a remote node .
9925	Polls from the server .
9926	Shuts down the remote node .
9927	Checks if the supplied throwable is non - local handling .
9928	Replaces the runState with the new runState .
9929	Creates a new worker .
9930	Try to add a worker to the pool .
9931	Registers a ForkJoinWorker .
9932	Deletes a worker from the pool .
9933	Called by the worker thread .
9934	Runs a worker .
9935	Blocks until a worker is available .
9936	Returns the number of queued tasks .
9937	Returns the common worker queue .
9938	Performs a help completion .
9939	Submits a ForkJoinTask .
9940	Creates a ForkJoinPool .
9941	Retrieves the completion of this task .
9942	Build string .
9943	Get thread pool statistics
9944	Creates an empty list .
9945	Reverses all elements in this list .
9946	Applies a predicate to the given iterable .
9947	Performs a left - right fold operation .
9948	Folds a list of elements from a list .
9949	Adds a task to the queue .
9950	Converts nullable to an empty option .
9951	Create long hash map from keys and values .
9952	Create an empty list map .
9953	Creates an empty ListMap from the given keys and values .
9954	Creates an array map from keys and values .
9955	Gets the key set .
9956	Normalize a resource name .
9957	Marshals a bound type .
9958	Returns a substring of this string .
9959	Returns a binary search .
9960	Creates a binary search .
9961	Sends an email .
9962	Send an email
9963	Binds a route binding .
9964	Binds a new FilterBinding .
9965	Determines if a tag has a specific role .
9966	Convert a Long to an int .
9967	Remove duplicate Strings .
9968	Returns a string that matches the given string .
9969	Executes the task .
9970	Check if the given user matches the password .
9971	get login with function
9972	Gets the login user .
9973	Check if the password matches the salt .
9974	Saves a member in the cookie .
9975	Generate the login key for the given user .
9976	Extracts a user from a cookie .
9977	Handle the request .
9978	Append file separator to path .
9979	Returns a long value from the request .
9980	Send a debug message .
9981	Get the caller info for a given level .
9982	Convert char array to simple byte array
9983	Convert CharSequence to simple byte array .
9984	Convert byte array to a simple char array
9985	Convert a char sequence to a byte array .
9986	Looks up the locales for the given locale code .
9987	Create a future that will be scheduled asynchronously .
9988	Cropped image .
9989	Schedules an invocation .
9990	Runs the specified method in the thread .
9991	Gets rest operations .
9992	Renders an AJAX error .
9993	Renders a page forbidden .
9994	Render the given view .
9995	Parse the path .
9996	Renders data tables .
9997	Render empty data tables .
9998	Sets the list of items .
9999	Redirects to the URL .
10000	Gets the providers associated with the given injector .
10001	Get the current method name .
10002	Compact memory .
10003	Propagate metrics to the global MetricsCollection .
10004	Encode a string .
10005	Read charset from file .
10006	Copy the contents of an input stream to an output stream .
10007	Copy bytes from input to output stream .
10008	Writes the contents of an input stream to the output stream using the default encoding .
10009	Copies the content of the given reader to the given output .
10010	Copies characters from a Reader to a Writer .
10011	Writes the content of the Reader to the output stream using the default encoding .
10012	Writes the content of the specified reader to the given output stream .
10013	Compare two input streams .
10014	Compare two readers .
10015	Applies an IO to the pipeline .
10016	Returns the SQL for the given group name and sqlId .
10017	Convert a string to an object
10018	Unzips a zip file .
10019	Creates a new PermissionDialogFragment instance .
10020	Sets the resume button .
10021	Register a core value type .
10022	Returns true if the value matches the regular expression
10023	Checks if the given string is a mobile number .
10024	Checks if the given string is a valid phone number .
10025	Determine if the given string is a birth day .
10026	Checks if the given string is a valid URL .
10027	isDateTime
10028	Runs the filter .
10029	Encode a string .
10030	Decode a string to a byte array .
10031	Converts a hex string to a byte array .
10032	Read properties from an input stream .
10033	Reads the content of an input stream and closes it .
10034	Reads the content of a file .
10035	Writes a byte array to a file .
10036	Copies all files from source to target .
10037	Serializes a DOM Document .
10038	Create a Document from the given XML file .
10039	Create a Document from a String .
10040	Creates a Document from an input stream .
10041	Validate an XML signature .
10042	Sign a Document .
10043	Returns true if the given class is cache - safe .
10044	Returns true if the given class is a primitive array .
10045	Returns true if the given class is a primitive wrapper array .
10046	Resolves a primitive type .
10047	Returns true if the left - hand side type is assignable from the right - hand side type .
10048	Returns true if the given value is assignable to the given value .
10049	Returns all interfaces of the given instance .
10050	Returns all interfaces of the given instance .
10051	Write properties to a temporary file .
10052	Extract variables from a URI .
10053	Put a message .
10054	Creates a DruidPlugin instance .
10055	Binds the given class to the given extension point .
10056	Gets the builtin .
10057	Returns the primitive value for the given type .
10058	Converts the given object to the given type .
10059	Converts the given object to the given type .
10060	Gets a query parameter .
10061	Returns a cookie parameter with the given name and value .
10062	Create a session parameter .
10063	Initialize data source .
10064	Sets the shared variable .
10065	Sets a single parameter .
10066	Sets a parameter to the given value .
10067	Show the permission dialog .
10068	Checks whether all of the given values are granted .
10069	Checks if any of the given values are denied .
10070	Find records by SqlSelect
10071	Finds a single record from the given SqlSelect .
10072	Returns true if the given model has a new one .
10073	Determines whether the given method declares an exception .
10074	Remove all SoftValue from the map .
10075	Associates the key with the specified key .
10076	Returns true if string matches pattern
10077	Read the given arguments from the given string .
10078	Gets the protobuf entity .
10079	Returns true if the given class is a protobuf entity .
10080	Returns a map containing all the fields of the given class .
10081	Returns the getter method name for proto field .
10082	Gets the pojo setter .
10083	Gets the object mapper .
10084	Returns the current JsonFactory instance .
10085	Convert an object to a JSON string .
10086	Sets the border borders .
10087	Gets a UserRecord by name .
10088	Copy the attribute values to the target object .
10089	Copies the given JMX attribute values to the given object .
10090	Returns the value of the specified property .
10091	Set a property .
10092	Adds the app to the frame .
10093	Saves a token .
10094	Gets the access token .
10095	Returns the default class loader .
10096	Returns the URL of the given resource .
10097	Gets the resource as a stream .
10098	Returns an input stream for the given class .
10099	Initialize this object with the given URI .
10100	Initialize the scheme .
10101	Initialize the path .
10102	Set the scheme .
10103	Set the userinfo string .
10104	Set the host .
10105	Set the port .
10106	Append the path .
10107	Sets the query string .
10108	Sets the fragment .
10109	Get the URI string of the URI .
10110	Creates a PreparedStatement with an iterator .
10111	Initialize the Application .
10112	Get the muffin .
10113	Set the muffin parameter .
10114	Get the clipboard contents
10115	set clipboard contents
10116	Opens a file stream .
10117	Loads all registered services by type .
10118	Sets the parameters from a Map
10119	Get parameters from a ParametrizedOperation
10120	Find ParametrizedService by id .
10121	Finds a service by its class .
10122	Parses a query response .
10123	Returns an iterator over the elements in this queue .
10124	Get encoding from xml string .
10125	Gets the parent logger .
10126	Creates a new Connection instance .
10127	Get the authorization code from the input URL .
10128	Visit a package declaration .
10129	Visit a ClassDeclaration .
10130	Visit a ExecutableDeclaration .
10131	Returns the value of the given key .
10132	Returns a filter that filters out the given modifiers .
10133	Returns a filter that filters out a given kind .
10134	Combine two DeclarationFilter .
10135	Constructs a new DeclarationFilter from this one .
10136	Returns the cached map .
10137	Make the given constructor accessible .
10138	Prepares an object query .
10139	replace slash with hyphen .
10140	Convert a byte array to a hex string
10141	Returns the indexes for the given parameter name .
10142	Parse SQL .
10143	Helper method to serialize a collection of objects .
10144	Sets the field value .
10145	Sets a field value .
10146	Is this file?
10147	Create a new ResultSet instance .
10148	Creates a map with the expected state and index .
10149	Extracts the state from a list of values .
10150	Get the generic supertype of a given class .
10151	Polls the available objects .
10152	Performs a single thread .
10153	Gets the declared field .
10154	Get declared methods .
10155	Gets the declared method .
10156	Gets all declared methods of the given class .
10157	Gets all constructors of the given class .
10158	Dumps a single byte .
10159	Returns the index of the first occurrence of the specified substring ignoring case .
10160	Remove chars from string
10161	Cleans the internal state .
10162	Initializes the audit .
10163	Initializes the message queue .
10164	Initializes the password validator .
10165	Initializes the password authenticator .
10166	Returns the locale code for the given locale .
10167	Looks up the locales for the given locale code .
10168	Creates a Proxy instance .
10169	Clears the list .
10170	Adds an element to the list .
10171	Removes the first element from the stack .
10172	Returns an input stream for scanning .
10173	Parses the command line arguments
10174	Matches tokens .
10175	Moves the cursor to the specified position .
10176	Returns true if this rectangle contains another rectangle .
10177	Returns true if the specified point is inside this rectangle .
10178	Returns the intersection between this rectangle and another rectangle .
10179	Returns the union of this rectangle with the specified rectangle .
10180	Replace x coordinates with x2 .
10181	Returns a new rectangle containing the y coordinates of this rectangle .
10182	Gets the position of a column .
10183	Gets the row of a given row .
10184	Get the bounds of a cell
10185	Calculates the columns .
10186	Calculates the rows .
10187	Unwraps a throwable .
10188	Start the application .
10189	This method is called when the code is updated .
10190	Copies the code buffer to a byte buffer .
10191	Renders instructions .
10192	Initializes the application .
10193	Creates a copy of this query parameter .
10194	Adds a new child to this node .
10195	Clear all children .
10196	Returns next solution .
10197	Adds instructions to the body .
10198	Adds instructions to the parent .
10199	Handle button change .
10200	Registers a work panel .
10201	Update flag if present
10202	Creates a new decimal type .
10203	Evaluates the given term
10204	Optimizes the instructions .
10205	Compares two collections .
10206	Handles the HTTP request .
10207	Render the buttons .
10208	Renders a button .
10209	Resets the state machine .
10210	Initialize the model .
10211	Returns the value associated with the given key .
10212	Returns the index of the specified key .
10213	Sets the value at the given index .
10214	Remove the value associated with the specified key .
10215	Removes the element at the given index .
10216	Returns true if the property has been set .
10217	Sets the value of a property .
10218	Returns the value of the specified property .
10219	Checks if the given primitive type is assignable from the given primitive type .
10220	Initialize the setters .
10221	Decide decision tree .
10222	Initializes the decision trees for the given node .
10223	Unify all variables in the given query and statement
10224	Unify two terms .
10225	Unify a variable .
10226	Compile a query .
10227	Find the maximum number of arguments in a clause .
10228	Allocate permanent query registers .
10229	Gather position and occurrences of a given clause .
10230	Displays a compiled predicate .
10231	Displays a query .
10232	Puts a 32 - bit integer into the buffer .
10233	Convert a ByteBuffer to a String
10234	Returns the string value associated with this attribute .
10235	Set the String value associated with the given value .
10236	Reads the content of a term .
10237	Checks if a class exists and is loaded .
10238	Determine if a class is a subtype of a class
10239	Returns true if the given class is a subtype of the given class
10240	Returns true if the given class is a subtype of the given parentClass .
10241	Returns the class with the given name .
10242	Create new instance .
10243	Creates a new instance .
10244	Call a method on an object .
10245	Call a method
10246	Calls a static method .
10247	Get a constructor .
10248	Find setters for setters .
10249	Gets a transaction .
10250	Returns a new Queue backed by a Queue .
10251	Gets the type of an object .
10252	Resets the current state .
10253	Returns the current state .
10254	Creates a new type .
10255	Add a supported TZ
10256	Adds an alternate dimension to the database .
10257	Adds a table to the database .
10258	Find all free variables in the given query .
10259	Find all free variables in the given query .
10260	Compares two search nodes .
10261	Writes an object to a file .
10262	Reads the stream as a String .
10263	Creates a new search node .
10264	Generate the indent for the current trace .
10265	Allocate the registers for a function .
10266	Returns true if the last body of the var is in the given body .
10267	Find the primaryity classification for a given property .
10268	Determines if all examples have the same classification .
10269	Choose the best property to decide whether a property should be decoded .
10270	Returns a new Functor .
10271	Returns a new variable with the given name .
10272	Executes the action on the given form .
10273	Gets the list at the specified index .
10274	Sets the texture to be used .
10275	Paint the double buffering .
10276	Creates a buffered image .
10277	Creates a graphics 2D graphics .
10278	Creates a buffered image .
10279	Creates a new image .
10280	Sets the queue search algorithm .
10281	Performs a search .
10282	Performs a search .
10283	Main method for testing
10284	Retrieves a clause from the prolog .
10285	Parses the next token in the stream .
10286	Parse a FUNCTOR .
10287	Parse a list function .
10288	Returns a list of arguments .
10289	Gets a variable .
10290	Parse an integer literal .
10291	Parse a double literal .
10292	Parse a string literal .
10293	Returns the next directive .
10294	Interns a new operator name .
10295	Initialize built ins .
10296	Consumes a token from the source stream .
10297	Peek and consume next token .
10298	Bind the current thread .
10299	Rolls back the transaction .
10300	Collect an iterator into the target collection .
10301	Reserves a call point .
10302	Convert a time - of - day to a tick .
10303	Convert tick to year
10304	Returns a new tick with the given hours .
10305	Returns a new tick with the specified minutes .
10306	Transforms a number of seconds to seconds .
10307	Returns the tick with the given year .
10308	Returns a timestamp with the given month and month .
10309	Returns the tick with the given date .
10310	Returns the number of milliseconds starting from the given year .
10311	Returns the month of the year .
10312	Read bytes from the input stream .
10313	Applies an entry to the cache .
10314	Returns the entry for the given key .
10315	Buckoo .
10316	Rehashes the hash table .
10317	Called when an action is pressed .
10318	Sets the next available flag .
10319	Sets the prevAvailable property .
10320	Sets the finished flag .
10321	Returns a new instance of the native machine .
10322	Returns an iterator over the set variables .
10323	Estimates the expected I .
10324	Computes the probability for a distribution .
10325	Sets the tick values .
10326	Get the action forward .
10327	Creates a new URL .
10328	Gets the request info .
10329	Gets the headers .
10330	Get all cookies in the current page .
10331	Returns the request parameters .
10332	Gets the request scope attribute .
10333	Gets the page scope .
10334	Returns the HTML table of the session scope .
10335	Returns the HTML table of the application scope .
10336	Returns the name of the user .
10337	Write the HTML table
10338	Convert a map of properties to HTML table .
10339	Executes the given set of steps .
10340	Sets the current screen state .
10341	Runs the search algorithm .
10342	Compares two search nodes .
10343	Updates the internalRegisters .
10344	Notifies all registered listeners .
10345	Leave a clause .
10346	Returns true if the context is in a top - level function .
10347	Converts this sequence to an array .
10348	Sets the arguments for this operator .
10349	Gets the fixity .
10350	Determines whether this operator is in an Infix .
10351	Compares two OpSymbol .
10352	Handles a property change event .
10353	Register a WorkFlowController .
10354	Returns an enum factory for a class .
10355	Creates a component factory instance .
10356	Returns the cell for the given variable .
10357	Indicates whether this variable is bound .
10358	Sets column attribute .
10359	Sets row attribute .
10360	Returns the column s attribute .
10361	Returns the row attribute of the given row .
10362	Internal insert method .
10363	Creates a new time range .
10364	Creates a new type .
10365	Returns true if the given CharSequence matches this regular expression .
10366	Creates the initial context for the given term .
10367	Update the registers with the given WAM memory layout .
10368	Returns the value of this group .
10369	Find the goal path in the current path .
10370	Joins the given forward and reverse paths .
10371	Returns the list of items in the cache .
10372	Get the properties for the specified resource .
10373	Sets the throttle rate .
10374	Read bytes from the input stream .
10375	Skips bytes .
10376	Gathers disjunctive expressions from a given disjunction .
10377	Read an int from byte array .
10378	Writes an int to a byte array at the given offset .
10379	Writes a 24 - bit integer to a byte array .
10380	Read a 24 - bit integer from the byte array .
10381	Read a short from a byte array .
10382	Writes a short to a byte array .
10383	Returns the child state for the given operator .
10384	Returns an iterator of operator operators .
10385	Returns the id of this instance .
10386	Returns the value associated with this attribute .
10387	Set the value of this attribute .
10388	Convert string to array .
10389	Convert string array to string list
10390	Convert a string to camel case .
10391	Convert case string to lower case .
10392	Get the current configuration
10393	Prints a list of handlers .
10394	Returns the call point for the given function name .
10395	Create a new code point for the given function name .
10396	Returns true if the specified component is a sub category of this category .
10397	Returns the id of this node .
10398	Returns the value at the specified level .
10399	Returns the last value .
10400	Serialize this Hierarchy .
10401	Deserialize this object from an input stream .
10402	Compute the horizontal position of the hole .
10403	Modify c .
10404	Adds an error message .
10405	Helper method to handle errors .
10406	Write a portion of a string .
10407	Classify the decision tree .
10408	Compares two objects
10409	Returns an iterator over this list .
10410	Returns the log base of the given integer .
10411	Returns the log2 version of a given integer .
10412	Returns the log - version of the specified value .
10413	Returns the log version of the specified integer .
10414	Returns the base 10 - bit integer for the given long value .
10415	Returns the log version of the given value .
10416	Gets the number of characters in a string .
10417	Gets the character count of the given long value .
10418	Gets the number of characters in a decimal value .
10419	Sets the head .
10420	Emits a byte buffer .
10421	Sets the current work flow screen .
10422	Evaluates the given tary predicate .
10423	Get the value of a property
10424	Returns a list of properties
10425	Returns an iterator that returns the key iterator .
10426	Creates array properties .
10427	Sets the throttle rate .
10428	Evaluates the literal .
10429	Finds the system properties .
10430	Reads properties from system properties file .
10431	Get the properties from the classpath .
10432	Get the properties using CWD .
10433	Leave a functor .
10434	Gets the value of this variable .
10435	Sets the substitution .
10436	Creates a queue .
10437	Cleans up the connection .
10438	Append logging event .
10439	Start connector thread .
10440	Initialize the printers .
10441	Commits the current transaction .
10442	Rolls back the transaction .
10443	Requests the given operation for the given transaction .
10444	Adds a cached write operation .
10445	Acquires a global write lock .
10446	Release global write lock .
10447	Enlist the resource associated with the current transaction .
10448	Enter rule set .
10449	Inserts the specified element at the specified time .
10450	Returns the queue or null if the queue is empty .
10451	Adds an element to the queue .
10452	Inserts the specified element into the buffer .
10453	Returns the next object .
10454	Returns the value of the specified property as a boolean .
10455	Gets the value of the specified property as an Integer .
10456	Returns the value of the specified property as a Long .
10457	Create a new mixin with the given name and arguments .
10458	Sets the VisitorVisitor .
10459	Backtrack .
10460	Returns the code associated with the given call point .
10461	Execute the given query and extract the bindings .
10462	Decodes the heap .
10463	Capture the values of the object .
10464	Restore all values from this object .
10465	Get the value of a given attribute
10466	Add a value to the map
10467	Get all field names for a given class
10468	Executes the mojo .
10469	Inserts an element into the list .
10470	Remove any element from the list .
10471	Creates a search node .
10472	Creates a queue .
10473	Returns a new TermWalker using the given visitor .
10474	Creates a goalWalker for a given unary predicate .
10475	Creates a TermWalker using the given visitor .
10476	Creates a termWalker for a given unary predicate .
10477	Creates a TermWalker for a postfix search .
10478	Loads a Properties object from an input stream .
10479	Reads properties from a file .
10480	Read properties from a URL .
10481	Get the properties from a file path .
10482	Compute the size of the grid .
10483	Initializes the font metrics .
10484	Adds a listener to the set of listeners .
10485	Registers a PropertyChangeListener for the specified property .
10486	Remove a PropertyChangeListener for a given property .
10487	Fire a PropertyChangeEvent to all registered listeners .
10488	Creates a new type .
10489	Performs a fade animation .
10490	Shows the horizontal bar .
10491	Shows the left bar .
10492	Shows right bar .
10493	Sanitize radio buttons .
10494	Waits until the condition is satisfied .
10495	Waits until the condition is satisfied .
10496	Executes the commands .
10497	Appends the classpath to the given command line .
10498	Creates a new type .
10499	Prints the banner .
10500	Initializes the command line reader .
10501	Evaluates the sentence .
10502	Evaluates the query .
10503	Creates a multi - type data for a boolean .
10504	Creates a multi - type data for a byte .
10505	Creates a multi - type data for a single character .
10506	Creates a multi - type data for a short .
10507	Creates a multi - type data for an integer .
10508	Create a multi type data for a long
10509	Creates a multi - type data for a float .
10510	Creates a multi - type data for a double .
10511	Creates a multi - type data from a string .
10512	Create a multi - type data from an object .
10513	Convert a multi - type to an object
10514	set a value to the page context
10515	Removes all elements from the list .
10516	Expand the array .
10517	Internal insert method .
10518	Compares two search nodes .
10519	Parses an array of operators .
10520	Returns the set of operators for a given fixity .
10521	Checks if candidate operator matches given fixity .
10522	Creates a new search node .
10523	Returns a string with the given padder .
10524	Gets the error messages .
10525	Gets the options in force .
10526	Get usage string .
10527	Adds trailing pairs to a Properties object .
10528	Adds options to the given Properties object .
10529	Add an option .
10530	Take free arguments from a given position
10531	Checks if the argument matches the required format .
10532	Compare two iterators .
10533	List options .
10534	Returns the command line options .
10535	Sets the stemmer .
10536	Returns the actual stemmer .
10537	Returns the stemmed word of the word
10538	Main method for testing .
10539	Creates a new type .
10540	Resets the internal state .
10541	Trace env frame .
10542	Trace a frame
10543	Call an internal function .
10544	Compute the next stack frame .
10545	Backtrack .
10546	Increment the trail at the given address .
10547	Uninds a trie from two addresses .
10548	Tidy the address of the trail .
10549	Unify two strings .
10550	Unify constant .
10551	Prints the slot .
10552	Returns random start state .
10553	Checks to see if the eight points are valid .
10554	Gets the child state for the given operator .
10555	Returns an iterator over all possible validators .
10556	Pretty print the board
10557	Determine if the specified tile is illegal .
10558	Swaps the tiles between two tiles
10559	Convert a string to a list of characters .
10560	Convert a char list to a State
10561	Converts a log record to a log4j message .
10562	Convert a logging level to a log4j .
10563	Requeue an element .
10564	Requeue an element .
10565	Increment the size of the record .
10566	Decrement the size of the record .
10567	Signals that the size of a larger threshold .
10568	Returns an enumeration of all keys in the specified context .
10569	List all bindings for the given name .
10570	Add a property to the environment .
10571	Remove a property from the environment .
10572	Runs all garbage collected .
10573	minimal
10574	Resolve a mixin reference to a rule .
10575	Pushes a variable reference .
10576	Sets the height of a row .
10577	Updates the width for a column .
10578	Executes the action on the page .
10579	Make a new node with the given successor .
10580	Executes the action .
10581	Substitute builtins in a clause .
10582	Initialises the symbol table .
10583	Generate top level check .
10584	Returns the string representation of this list .
10585	Evaluates the comparison .
10586	Indicate that the agent is running .
10587	Signal that the server is running .
10588	Signal that the application is terminated .
10589	Inserts an element into the list .
10590	Returns the nearest log 2 .
10591	Update minimum .
10592	Compares two nodes .
10593	Inserts two nodes .
10594	Restart the cache .
10595	Returns a set containing all objects matching the given search method .
10596	Returns bag of elements .
10597	Find all possible solutions .
10598	Returns the next element in the sequence
10599	Restore values from an object
10600	Get the value of a property .
10601	Adds a property to the map .
10602	Adds a value to a property .
10603	Capture the values of the object
10604	Removes the first element from the list .
10605	Convert modifiers to string .
10606	Parses a string into an integer .
10607	Parses a string to a Date
10608	Checks if string is a valid date
10609	Checks if string is a time
10610	Checks if string is a valid date
10611	Creates a TokenSource for the given string .
10612	Creates a TokenSource for a given file .
10613	Returns a TokenSource for the given input stream .
10614	Determines whether the given WAM instruction is constant .
10615	Returns true if the given WAM instruction is void .
10616	Returns true if the given WAM instruction is non - arg .
10617	Gets the children of this clause .
10618	Returns the argument at the given index .
10619	Gets the children of this operator .
10620	Returns the string representation of the arguments .
10621	Retrieves the summary for the given query parameter
10622	Retrieves a list of records from the database .
10623	Execute a query
10624	Emits a byte buffer .
10625	Set the basic type .
10626	Consumes input stream .
10627	Prints a variable binding .
10628	Expand the result set to a map
10629	Reads the input stream .
10630	Reads the next packet .
10631	Returns a random time .
10632	Generate a unique identifier .
10633	Update the track info .
10634	Updates the music .
10635	Render the final output .
10636	Handles a start music request .
10637	Handles a music request .
10638	Fire start music request
10639	Initialize the parser .
10640	Start the server .
10641	Shutdown connection listeners .
10642	Resets the parser .
10643	Parses the XML stream .
10644	Process a packet .
10645	Sets the CLI option .
10646	Create a new chat .
10647	Initialize this object .
10648	Resets the cache .
10649	Sets the value of a property .
10650	Adds a new PacketFilter to the Packet .
10651	Process request .
10652	Clears all stored properties .
10653	Initialize the writer .
10654	Queues a packet to be sent .
10655	Returns the next Packet .
10656	Open a new stream .
10657	Returns a list of all informations of this class .
10658	Returns true if the descriptor contains the given name .
10659	Adds a new life cycle callback .
10660	Shuts down the timer .
10661	Compare two files .
10662	Clean the given byte buffer .
10663	Returns true if entry is valid .
10664	Returns null .
10665	Compares two objects .
10666	Returns the entry associated with the specified key .
10667	Resizes the map .
10668	Adds all of the mappings from the given map to this map .
10669	Removes the value associated with the specified key .
10670	Remove the given key from the table .
10671	Remove an object from the map .
10672	Adds an entry to the table .
10673	Creates a delegate map .
10674	Encode binary value .
10675	Encode a byte array .
10676	Encode a string .
10677	Encode a byte array .
10678	Iterate over a collection .
10679	Set the controller to be selected .
10680	Set the controller for jump progress .
10681	Sets the controller to be played .
10682	Set the controller to be changeable .
10683	Broadcasts available playlists to available playlists
10684	Handle a command
10685	Handle a volume .
10686	Handles a jump .
10687	Handle select track .
10688	Get thread cache .
10689	Get request cache by name .
10690	Gets the alternative field name .
10691	Filters the given map .
10692	Returns the shard path for the given id .
10693	Adapts an object to a Session .
10694	Safely invoke a method .
10695	Deletes the content of the given path .
10696	Update one or more objects
10697	Set the ping interval .
10698	Schedules ping server task .
10699	Add an array of options .
10700	Check if the option has the given option .
10701	Parse the arguments .
10702	Prints the usage .
10703	Parse the arguments .
10704	Initializes the connection .
10705	Write start tls .
10706	Returns a compression handler that supports compression methods .
10707	Send stream compression request
10708	Start stream compression
10709	Notify listeners that a connection has been closed .
10710	Notify all registered connection listeners .
10711	Register a SASLMechanism .
10712	Returns a list of registered SASLMechans .
10713	Get the output plugin behaviour
10714	Log a message and throwable .
10715	Logs an error .
10716	Prints the given message and stack trace .
10717	Creates a start event .
10718	Creates a start event .
10719	Notify all registered listeners .
10720	Returns true if the given resource has the same resource .
10721	Contains resources from a source .
10722	Determines if this deployment contains a resource .
10723	Provide a list of resource models with the given ids .
10724	Get the cached map .
10725	Returns the cache key .
10726	Remove an entry from the cache .
10727	Synchronized .
10728	Returns a map of CFS locations .
10729	Recursively include a file .
10730	Include a jar file .
10731	Add a SASLMech .
10732	Add a list of SASLMechs .
10733	Create debug events .
10734	Activate the safe post processors .
10735	Register standard events .
10736	Registers an event listener .
10737	Registers an event ID .
10738	Performs a synchronous lock .
10739	Unregisters an event .
10740	Checks if the wish list can be run .
10741	Creates a new DSE session .
10742	Create a player error .
10743	Start playing music .
10744	Stop playing music .
10745	Executes a command on the specified player .
10746	Create a playlist
10747	Creates a playlist answer .
10748	Add post fix .
10749	Adds a query parameter .
10750	Adds a query parameter .
10751	Adds a query parameter .
10752	Adds a query parameter .
10753	Retrieves a playlist from an event model .
10754	Launch the launch button pressed .
10755	Check if the node has started .
10756	Check if URL exists
10757	Handle browser button click .
10758	Creates an image icon .
10759	Launch the launcher .
10760	Copies this IntArray with the specified values .
10761	Exports this object to a hash map .
10762	Get the value at the given index .
10763	Get a value from a JSONResult
10764	Returns the value as an integer .
10765	Returns the value as a double .
10766	Returns the string value as a string .
10767	Create a new command resource
10768	Verifies that a command is valid .
10769	Verifies capabilities .
10770	Verifies the given command and capabilities .
10771	Executes the given batch of statements asynchronously .
10772	Get all subclasses of the given class .
10773	Gets the subclasses of a given class .
10774	Searches the classpath for a given location .
10775	Searches the given directory and places it to the given location .
10776	Searches a jar file in the given location .
10777	Convert this list to a list .
10778	Returns the number of entries in the map .
10779	Process a packet .
10780	Get volume from event model .
10781	Error with an error .
10782	Creates an error response .
10783	Determine if the identifiable target is a target .
10784	Sets the login period .
10785	Wraps a set .
10786	Set the name of this group .
10787	Update state .
10788	Gets all the groups in this roster .
10789	Appends RSM element to a query element .
10790	Parse RSM query XML .
10791	Filter a list of RSM response objects .
10792	Create a leave event .
10793	Reloads the roster .
10794	Create a roster entry .
10795	Gets all entries in the roster .
10796	Gets presence associated with the given user .
10797	Set offline presence .
10798	Fire roster changed event .
10799	Set digest value .
10800	Create a new resource .
10801	Creates a player request .
10802	Gets time passed by event model .
10803	Register a listener for updates .
10804	Initialize the properties file
10805	Reloads the properties file .
10806	Parse a StreamError element .
10807	Parse the list of mechanisms .
10808	Parse compression methods .
10809	Parse a packet extension .
10810	Decode a string value .
10811	Verifies that the player is valid .
10812	Get playback state from a resource model
10813	Returns the secret key associated with the specified subdomain .
10814	Check if multiple subdomain is allowed
10815	Adds an entry to the cache .
10816	Returns the key set .
10817	Gets the values of this map .
10818	Purge all entries for the given reference .
10819	Overridden to return null .
10820	Hash entry .
10821	Creates a new entry .
10822	Checks whether the presence of the presence is present .
10823	Sets the presence flag .
10824	Updates the presence of the presence with presence .
10825	Delivers a message .
10826	Generate the script .
10827	Initialize the output directory .
10828	Loads properties from a file .
10829	Write string to file
10830	Gets the progress .
10831	Wraps a collection .
10832	Returns a collection of service resolver objects .
10833	Get the configuration
10834	Gets the thread pool .
10835	Creates a stop music .
10836	Verifies that the given player is a stop music .
10837	Returns a DSECluster with the given parameters .
10838	Adds a connection listener .
10839	Adds a PacketListener to the receive listener .
10840	Adds a new PacketListener to be sent .
10841	Notifies all registered listeners .
10842	Adds a new packet interceptor .
10843	Notify all registered interceptors of a packet .
10844	Converts a property name to a value
10845	Handles the connection lost .
10846	Returns the unique id for the current thread .
10847	Returns true if the given node is not committed .
10848	Gets the key associated with the given value .
10849	Returns the value at the specified index .
10850	Look up a node in the tree .
10851	Lookup a node in the tree .
10852	Compare two objects .
10853	Returns the least node at the given index .
10854	Returns the most node at the given index .
10855	Returns the next node that is greater than the given index .
10856	Returns the most valid node for the given index .
10857	Returns the least valid node in the given thread .
10858	Copies the node s color from to to .
10859	Returns true if the node is red .
10860	Returns true if the node is black .
10861	Gets the grand parent .
10862	Gets the parent node .
10863	Returns the right child of the given node .
10864	Returns the left child of the given node .
10865	Rotate left .
10866	Rotate a node at the specified index .
10867	Performs a red black .
10868	Performs a redBlack delete .
10869	Checks that the given object is non - null .
10870	Inserts a new value into the tree .
10871	Returns true if the specified key exists .
10872	Returns true if the given value exists in the current thread .
10873	Gets the value associated with the specified key .
10874	Removes the specified key .
10875	Remove all entries in the trie
10876	Returns the set of keys for this map .
10877	Returns a collection of all the values in this map .
10878	Returns all entries in this map .
10879	Copies all entries in this map into a new map .
10880	Delete expired entries .
10881	Removes all entries from the cache .
10882	This method is called by the server .
10883	Returns a player request for the specified playlist name .
10884	Initializes a new roster store .
10885	Opens a new roster store .
10886	Scans a set of InetAddresses .
10887	Returns the subnet address of the specified address .
10888	Exports to a HashMap
10889	Import a TrackInfo from a hash map .
10890	Add all applications from the given set .
10891	Execute an application .
10892	Prints the list .
10893	Prints the usage .
10894	The main method .
10895	Creates a MuteEvent .
10896	Creates a MuteEvent .
10897	Get a schema by its name .
10898	Write lines to a file
10899	Determines if this is in a jar .
10900	Add an option .
10901	Get the thrift schema
10902	Gets a field by its name .
10903	Returns the package name of the given entry .
10904	Map content to values .
10905	Creates an event listener .
10906	Set the current state of this operator .
10907	Iterate over a collection .
10908	Performs an iteration .
10909	Get track info from event model .
10910	Exports this object to a HashMap
10911	Imports a progress object from a resource model .
10912	Create an image with the specified lines .
10913	Get image from specified URL .
10914	Gets the contents of a URL .
10915	Reverse all keys in source map to target map .
10916	Performs cartesian product multiplication .
10917	Start the daemon .
10918	Return the object to the pool .
10919	Creates a stopped event .
10920	Get the track .
10921	Creates a new Playlist with a new track .
10922	Shuffles the playlist .
10923	Verify the capabilities .
10924	Exports data to a HashMap
10925	Escape a string .
10926	Called by the server .
10927	Serialize to JSON .
10928	Runs the output .
10929	Handles an event .
10930	Join all queues .
10931	Set the value of a property .
10932	Removes the given property .
10933	Adds a principal .
10934	Removes a principal .
10935	Close the root window .
10936	Called when a user has occurred .
10937	Called when a presence event is received .
10938	Returns true if the resource is permanent .
10939	Sets the name of this group .
10940	Returns true if the map contains the specified key .
10941	Checks if the map contains the specified value .
10942	Adds an entry to the map .
10943	Removes all entries from the hash table .
10944	Hashes a key .
10945	Returns true if two keys are equal .
10946	Compares two objects .
10947	Ensure the capacity of the map .
10948	Calculate new capacity .
10949	Creates an iterator .
10950	Load a row from a binary stream
10951	Register the ModuleGenerator .
10952	Initialize AddOn .
10953	Notify listeners that a reconnection failed .
10954	Notify listeners that the connection has been reconnected .
