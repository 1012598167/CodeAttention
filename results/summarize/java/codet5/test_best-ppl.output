0	Performs a fast path ordered emit .
1	Wraps an ObservableSource into an Observable .
2	Returns an observable that is sorted by the specified comparator .
3	Observes the given ConnectableObservable using the given Scheduler .
4	Creates a new unicast processor with the given capacity hint .
5	Creates a new unicast processor with the given capacity hint .
6	Try to map a Publisher to a Publisher .
7	Scalar x map flowable .
8	Resets the internal state of the scheduler .
9	Construct an Maybe from a CompletableSource .
10	Construct an Maybe from a SingleSource
11	Retries until the predicate returns true or the predicate returns false .
12	Throws a NullPointerException if the given object is null .
13	Returns an identity function .
14	Returns a Callable that returns the given value .
15	Returns a function that just returns the given value .
16	Returns a function that casts the given value to the given type .
17	Creates a new unicast subject .
18	Creates a new unicast subject with the given capacity hint .
19	Creates a new unicast subject with the given capacity hint .
20	Creates a new unicast subject .
21	Blocks until the count is 0 or the error is encountered .
22	Blocks until the count is 0 or the timeout expires .
23	Await for the count to become non - blocking .
24	Drains the given queue until the queue is full or the queue is full .
25	Request the specified number of times for the given subscription .
26	Completes the actual subscriber when the queue is empty .
27	Completes the operation .
28	Returns the value of the notification .
29	Gets the error .
30	Validates that the given upstream and next disposables both the upstream and the next disposables .
31	Sets the given AtomicReference to the given next Disposable and notifies the observer that the AtomicReference has been updated .
32	Validates the subscription .
33	Sets the given AtomicReference to the given Subscription and cancels it if the AtomicReference is already set .
34	Add two long values to the cap .
35	Multiply two long values .
36	Adds n to the AtomicLong if it is not already present .
37	Converts an exception to a NullPointerException .
38	Adds an object to the end of the list .
39	Shuts down the pool .
40	Creates a new ScheduledExecutorService using the given ThreadFactory .
41	Sets the subscription .
42	Emit the loop .
43	If the given error is a RuntimeException it is wrapped otherwise it is wrapped .
44	Flattens an exception into a list .
45	If the given exception is an Exception it is returned . Otherwise it is wrapped in a new Exception .
46	Clears the set of resources .
47	Returns the number of resources in this set .
48	Try to map an ObservableSource to an ObservableSource .
49	Creates an observable that maps a single value to an observable source .
50	Accepts the given subscriber to all of the elements in this queue .
51	Accepts an observer for all of the elements in this list .
52	Starts the subscription .
53	Sets the upstream subscription to an empty subscription .
54	Adds a new item to the queue .
55	Returns the disposed resource .
56	Completes the observer with the specified value .
57	Notifies the downstream that an error has occurred .
58	Completes the task .
59	Returns a Flowable consisting of the results of applying the provided function to each element of this stream .
60	Returns a Flowable consisting of the results of applying the provided Function to each element of this Flowable .
61	Returns a Flowable consisting of the elements of this stream sorted by the specified comparator .
62	Wait for the specified number of threads to complete .
63	Requests the specified number of messages to be delivered .
64	Adds a PublishDisposable to the set of subscribers .
65	Removes the specified PublishDisposable from this set .
66	Observes the given ConnectableFlowable using the given Scheduler .
67	Parses the annotations on the method and returns the corresponding HTTP service method .
68	Sets the delay in milliseconds .
69	Creates an error response .
70	Calculates the delay in milliseconds .
71	Creates the sample data .
72	Returns the HttpMethod object for the given HTTP method .
73	Search for a single user in the directory .
74	Encodes the given raw password .
75	Returns true if the raw password matches the encoded password .
76	Performs version checks .
77	Returns true if the checks should be disabled .
78	Gets the Spring version .
79	Add an attribute exchange configurer .
80	Returns the oauth2 client .
81	Returns the configurer for the OAuth2 resource server .
82	Returns the channel security registry .
83	Compares the specified attribute with the specified value .
84	Retrieve an entry from a directory .
85	Search for a single attribute value .
86	Search for multiple attributes .
87	Search for a single entry in the directory .
88	Build the search controls .
89	Finds the primary keys for the given list of sids .
90	Build the PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails object .
91	Creates an embedded server bean definition .
92	Create the servlet - api - provision filter .
93	Create the JAAS API filter .
94	Creates a WhitelistedTypeResolverBuilder .
95	Insert a SpringSecurityFilterChain into the servlet context .
96	Get the token for a given series .
97	Returns the list of grants for the given attributes .
98	Returns a new instance of the given algorithm .
99	Override afterPropertiesSet in order to set the authentication manager .
100	Checks if the request requires authentication .
101	Checks if the pre - authenticated principal has changed .
102	Performs the authentication .
103	Check if the content length has been written .
104	Maps the given collection of authorities .
105	Sets the login processing url .
106	Update the authentication defaults .
107	Update access defaults .
108	Maps a password value to a string .
109	Extracts the remember me cookie from the request .
110	Encodes an array of tokens into a base64 encoded string .
111	Sets the cookie with the given tokens .
112	Resolve an argument .
113	Extracts the query string from the request .
114	Gets the service port .
115	Returns the principal of the current user .
116	Logs out the current user .
117	Creates a JaasAuthenticationToken for the given authentication .
118	Builds the provider URL .
119	Sets the context environment properties .
120	Returns the full request URL .
121	Write the UI suffix if the user is not authorized .
122	Initializes the user details service .
123	Gets the UserDetailsService .
124	Adds the code verifier and code challenge parameters to the attributes .
125	Checks if the request requires authentication .
126	Service ticket request .
127	Proxy ticket request boolean .
128	Returns true if the current user is authenticated .
129	Checks if the request is a proxy receptor request .
130	Creates a new security expression root .
131	Gets the JWKSet .
132	URL - encode a string using UTF - 8 .
133	Gets the webSphere groups based on the current user .
134	Load user details .
135	Gets the pre - authenticated principal .
136	Concatenates the given byte arrays .
137	Creates a sub - array of the specified byte array .
138	Returns a list of all granted authorities for the given attributes .
139	Pre - processes the attributes2grantedAuthoritiesMap .
140	Returns the collection of grants for the given value .
141	Adds a collection of GrantedAuthority objects to the result .
142	Gets the pre - authenticated principal .
143	Returns the shared object for the given type .
144	Builds the HTTPS redirect URL for the given request .
145	Advises the given JoinPoint and returns the result .
146	Returns the role name for the given role .
147	Returns an array of roles where the user has any of the given roles .
148	Process the auto - login cookie .
149	Called when the user has successfully logged in .
150	Attempt to switch to a user .
151	Attempt to exit the current user .
152	Sets the exit user url .
153	Display the public index of the contact .
154	Spring security filter chain .
155	Decodes the given token .
156	Returns true if the current user has access to this filter .
157	Check if the current user is allowed to access this resource .
158	Convert a JWT to a collection of GrantedAuthorities .
159	Generates a new CSRF token .
160	Display the admin page for the given contact
161	Display the add permission page for a given contact
162	Adds a permission to a contact .
163	Deletes a permission from a contact .
164	Returns the role with the given default prefix if the prefix is null or empty .
165	Creates a UserDetailsResourceFactoryBean from a string .
166	Returns the values of the specified attribute .
167	Returns the first attribute value for the given name .
168	Encodes the given CharSequence into a byte array .
169	Decodes a byte array into a String .
170	Looks up the parameter names for the given type .
171	Adds a new contact .
172	Returns the attributes specified for the given method and target class .
173	Adds a secure method .
174	Get all config attributes .
175	Returns true if the mapped name matches the method name .
176	Configure any request .
177	This method is called when an exception occurs while trying to bind a user .
178	Returns a random contact .
179	Clears the authentication attributes from the session .
180	Returns the field with the given name on the given class .
181	Create service url .
182	Create redirect url .
183	Extracts the prefix from an encPass .
184	The pre - authenticated entry point .
185	Checks for duplicate filters .
186	Returns the registered types .
187	Extracts the cause of a throwable .
188	Register an access manager .
189	Converts a collection of userAuthorities to a set of authorities .
190	Returns true if two byte arrays are equal .
191	Sets the default failure URL .
192	Sets the resolve hidden inputs function .
193	Build the request url .
194	Returns true if the given URL is an absolute URL .
195	Returns the attribute list for the given identifier .
196	Converts the given identifier to the corresponding class id .
197	Creates the entries for the given ACL .
198	Creates or updates the object identity table .
199	Updates the object identity of the given ACL .
200	Saves the request to the session .
201	Returns a server web exchange matcher for the given path patterns .
202	Returns a matcher that matches any web exchange .
203	Creates a new HexEncodingTextEncryptor for the given password and salt .
204	Creates a text encryptor for the given password and salt .
205	Queryable text encryptor .
206	Writes the headers to the response .
207	Determine the target URL .
208	Determine the target URL .
209	Sets the target url parameter .
210	Gets the directory with the immediate parent populated .
211	Build a DistinguishedName for the given username .
212	Creates the shared objects .
213	Sets the login . config . url property .
214	Gets the current date .
215	Internal parse date .
216	Update the cache .
217	Sets the authentication details .
218	Returns the security name for the given subject .
219	Returns the list of groups for the specified user .
220	Changes the password for the current user .
221	Build the DN for the group .
222	This method is called when the maximum number of sessions of this principal has been exceeded .
223	Copy details from the source Authentication to the destination Authentication .
224	Returns the list of filters that match the given request .
225	Returns a list of filters for the given url .
226	Returns the application context for this page context .
227	Returns the full DN .
228	Updates the session attributes .
229	Creates a PreemptiveBasicAuthScheme for the given user name and password .
230	Adds a list of filters to the RestAssured .
231	Adds a filter to the RestAssured .
232	Creates a new basic authentication scheme .
233	Creates a new NTLM authentication scheme .
234	Creates a new form authentication scheme .
235	Sets up a proxy for the given URI .
236	Prints the response body to the output stream .
237	Returns a new RestAssuredConfig with the specified redirect config .
238	Sets the default charset for the query parameter .
239	Sets the default object mapper type .
240	Sets the JAXB object mapper factory .
241	Creates a new RestAssuredMockMvcConfig with the specified log config .
242	Sets the session config .
243	Sets the object mapper config .
244	Creates a new RestAssuredMockMvcConfig with the specified JsonConfig .
245	Sets the XML configuration .
246	Returns a new instance of RestAssuredMockMvcConfig with the specified encoder configuration .
247	Sets the header configuration .
248	Returns a new RestAssuredMockMvcConfig with the specified AsyncConfig .
249	Creates a new instance of RestAssuredMockMvcConfig .
250	Sets the multi part config .
251	Sets the parameter configuration .
252	Sets the matcher configuration .
253	Allow all hostnames .
254	Declares the given namespaces .
255	Sets the declared namespace .
256	Performs a HTTP request .
257	Sets the request headers .
258	Set the default proxy to use .
259	Sets the name of the control .
260	Add a header to the request .
261	Set basic credentials .
262	Set the NTLM credentials .
263	Returns a new Headers instance with the specified headers added .
264	Resets the context to the initial state .
265	Sets a header to the response .
266	Build the response .
267	Returns a new DetailedCookieMatcher that matches the specified value .
268	Matches a cookie with a comment .
269	Matches a cookie with an expiry date .
270	Returns a new DetailedCookieMatcher that matches cookies with the specified domain .
271	Returns a matcher that matches cookies with a path attribute .
272	Returns a new DetailedCookieMatcher that matches cookies that have been secured .
273	Matches a cookie with the HTTP - Only flag .
274	Returns a new DetailedCookieMatcher that matches cookies with the specified version .
275	Returns a new matcher that matches cookies with the specified maxAge .
276	Expect the given header name to match the expected value .
277	Expect the given header to be equal to the given value .
278	Expect a cookie to be present in the response .
279	Returns a new proxy specification with the specified host .
280	Sets the return type for the JSON path .
281	Sets the default parser type .
282	Sets the default logging output stream .
283	Enable logging of request and response if validation fails .
284	Creates a new HTTP request .
285	Sets the default boundary .
286	Adds an attribute to the request .
287	Adds a header to the response .
288	Adds a multi - part request .
289	Add additional result handlers .
290	Sets the parameter with the given name and value .
291	Adds the given HTTP client parameters to this configuration .
292	Sets the HttpClientFactory .
293	Sets the HTTP multipart mode .
294	Gets the object at the given path .
295	Returns the integer value for the given path .
296	Returns the byte value at the given path .
297	Returns the short value at the given path .
298	Returns the float value at the given path .
299	Returns the double value at the given path .
300	Returns the long value for the given path .
301	Returns the value of the given path as a list .
302	Get a map .
303	Returns the object at the given path .
304	Sets the body of the request .
305	Adds a cookie to the request .
306	Adds a parameter to the request .
307	Adds a parameter to the request .
308	Sets the update strategy .
309	Returns a filter that logs the response to the given PrintStream if the matcher matches .
310	Creates a new Cookies instance with the given additional cookies .
311	Clean up the backing map for the given set of keys and sources .
312	Index all explicit bindings .
313	Returns the explicit binding for the given key or null if there is no explicit binding for the key .
314	Returns the constant string binding for the given key or null if no such binding exists .
315	Recursively cleanup a binding .
316	Removes a failed JIT binding .
317	Returns the internal dependencies of the given binding .
318	Creates an uninitialized binding for the given key .
319	Returns an array of all of the given parameter injectors .
320	Binds the injector to the state .
321	Binds a logger to the injector .
322	Check for misplaced binding annotations .
323	Returns true if a method overrides b .
324	Initializes the delegate .
325	Returns the provider type .
326	Resolve all of the given types .
327	Returns the canonical type for the given type literal .
328	Prepare built - in converters .
329	Canonicalizes the given class loader .
330	Returns true if the given class loader has the same version of cglib .
331	Checks if the given member is publicly callable .
332	Fixes annotations .
333	Requests the member injection for the given instance .
334	Validates all of the pending injections .
335	Creates a new instance of this class .
336	Returns the request dispatcher for the given servlet request .
337	Scope a factory .
338	Creates an injectable Scoping from the given Scoping .
339	Normalize the given path .
340	Generates an annotation for the given type .
341	Checks if the given annotation is retained at runtime .
342	Finds the scope annotation .
343	Returns the key for the given member of the given type .
344	Returns the name of the given key .
345	Initializes the delegate provider .
346	Add a direct type binding .
347	Get a constructor injector from the cache .
348	Checks if the given interceptor class has a scope annotation .
349	Returns a new RealMapBinder for the given parameters .
350	Returns the key for the new value .
351	Creates a new instance of the class .
352	Write replace .
353	Returns a new module for the given module .
354	Returns a collection of all assisted methods .
355	Checks if the type is not specified .
356	Checks if a constructor has matching parameters .
357	Returns the set of dependencies for the given constructor and implementation .
358	Removes all dependencies that are annotated with the Assisted annotation .
359	Returns true if the given set of dependencies is valid for an optimized assisted inject .
360	Create a binding from a new injector .
361	Invokes a method on a proxy .
362	Returns an error if there is no implementation for the given key .
363	Returns a new RealMultibinder for the given key .
364	Gets the key for a new item .
365	Finds the next filter that matches the given request .
366	Returns true if the constructor has at - inject annotation .
367	Returns the injection point for the constructor .
368	Returns the set of dependencies for this injection point .
369	Returns a Module for the given module .
370	Returns the annotation claimed by the scanner .
371	Returns the line number of the given member .
372	Initializes the lookup processor .
373	Returns a callable that will continue the execution of the given callable with the given seed map .
374	Transfers a request to a callable .
375	Validates that the given value is compatible with the given key .
376	Returns the members injector for the given key .
377	Creates a member injector for the given type .
378	Returns the injectors for the given set of injection points .
379	Returns a new key for the given type and annotation strategy .
380	Returns a strategy for the given annotation .
381	Returns an annotation strategy for the given annotation type .
382	Prunes the stack trace of the given exception .
383	Returns the source of the binding .
384	Formats a collection of messages .
385	Creates a new message with the specified message format and arguments .
386	Creates a message with the given message format and arguments .
387	Creates a new message with the given message format and arguments .
388	Convert an object to an element .
389	Returns true if the given class should be skipped .
390	Gets the source from a list of module class names .
391	Main entry point for the jconsole tool .
392	Pushes a dependency onto the stack .
393	Pushes a state object to the stack .
394	Creates a new instance of the Initializable interface .
395	Provisions the provider into the given dependency .
396	Process a connection event .
397	Adds a connection event processor .
398	Get the result of the given future task .
399	Throws a RuntimeException or Error if it is unchecked .
400	Registers a remoting processor for the given command code .
401	Registers the default processor .
402	Returns the processor for the given command code .
403	Tries to get the URL for the given URL .
404	Decodes the protocol code .
405	Returns a map of all connections .
406	Scan for connection pools .
407	Gets a connection from the connection pool and creates it if it doesn t exist .
408	Create a connection and heal if need .
409	Remove a task from the pool .
410	Heal connection if needed .
411	Create a connection .
412	Closes a connection to the given address .
413	Called when the connection is closed .
414	Closes the connection .
415	Sets the specified attribute if it does not already exist .
416	Registers a user processor .
417	Register user processor .
418	Dispatch the request to the user processor .
419	Deserialize a request command .
420	Pre - processes the remoting context .
421	Log the timeout of the request .
422	Debug log .
423	Process the message .
424	Invokes the given command with the given callback .
425	Send a remoting command to the remote peer .
426	Convert a bit set to a byte .
427	Converts an integer into a bit set .
428	Add a reconnect task .
429	Stops the heal connection .
430	Converts the given request to a remoting command .
431	Filters the given list of connections .
432	Monitor the connection pools .
433	If there are no more connections in the map and there are no more connections in the map close the connection .
434	Get a system property as a boolean .
435	Log an info message .
436	Returns true if this command is a request timeout .
437	Gets the user processor .
438	Get a random connection from a list of connections
439	Returns the value associated with the given key . If the key does not exist the default value is returned .
440	Returns the value of a property .
441	Resolves the response object for the given response command .
442	Converts the given response command to a response object .
443	Converts the given response command to an exception .
444	Returns the error message for the given response command .
445	Create a server exception .
446	Print connection trace log .
447	Creates a new EventLoopGroup with the specified number of threads .
448	Parse the remote address .
449	Parse the local address .
450	Parse the remote IP address .
451	Parse the remote host name .
452	Parse the local IP address .
453	Parse the remote port .
454	Parse the local port .
455	Parse socket address to host ip .
456	Adds a connection to the pool .
457	Removes a connection from the pool and tries to close it .
458	Get a connection from the pool .
459	Registers a custom serializer for a class .
460	Returns the custom serializer for the given class name .
461	Registers a custom serializer for the given command code .
462	Returns the custom serializer for the given command code .
463	Starts the connection monitor .
464	Check if remote address is connected .
465	Initialize the write buffer water mark .
466	Returns a new instance of FramedataImpl1 for the given opcode .
467	Batch writes to the socket .
468	Sets the close code .
469	Validates UTF - 8 .
470	Updates the payload .
471	Checks if the requested protocol matches the known protocols .
472	Translate single frame check length limit .
473	Checks if the given maxpacketsize is less than the realpacketsize
474	Generate the final key .
475	Process a continuous and non - fin frame .
476	Process a binary frame .
477	Logs a runtime exception during onWebsocketMessage .
478	Process a text frame .
479	This method is called when a continuous frame sequence has been completed .
480	This method is called when a continuous frame sequence is not completed .
481	Process a closing frame .
482	Checks if the payload limit is reached .
483	Gets the payload from the byte buffer list .
484	Returns the total size of all the buffers in the list .
485	Translate the handshake http server .
486	Translate an HTTP client handshake .
487	Decode the data received from the server .
488	Close the connection due to a wrong handshake .
489	Close the connection due to a server error .
490	Generate the HTTP response due to an error .
491	Send text to the client .
492	Resets the connection to the initial state .
493	Connects to the server .
494	Returns the port of the web socket .
495	Sends the handshake to the engine .
496	Sets the connection lost timeout .
497	Stop the connection lost timer .
498	Start the connection lost timer .
499	Restarts the connection lost timer .
500	Execute a connection lost detection .
501	Cancels the connection lost timer .
502	This method is called when a websocket handshake is received .
503	Handles a websocket ping .
504	Stops the server .
505	Returns the port for this connection .
506	Do additional read .
507	Accept a new connection .
508	Reads data from the socket .
509	Writes data to the socket .
510	Setup the selector and server thread .
511	Ensure that only one thread can be started once .
512	Shuts down the server .
513	Gets the socket .
514	Broadcasts a message to a list of clients .
515	Broadcasts the given text to the given clients .
516	Broadcasts data to all clients .
517	Fills the frames map with the given data .
518	Transfers the source ByteBuffer to the destination ByteBuffer .
519	Start the JPA API .
520	Returns the entity manager for the given name .
521	Executes the given block on the current transaction .
522	Convert arguments to scala buffer .
523	Wrap the given arguments into a list if necessary .
524	Returns the localized message for the given key and arguments .
525	Returns the value for the given keys in the given language .
526	Returns true if the given key is defined in the given language .
527	Returns the preferred messages for the given languages .
528	Returns the preferred messages for the given request .
529	Sets the language for the given result .
530	Returns a copy of this builder with the bindings of the given modules .
531	Injects a set of modules .
532	Set bindings .
533	Returns a copy of this builder with the overrides of the given modules .
534	Overrides this instance with the specified modules .
535	Overrides this instance with the specified bindings .
536	Disables the given module classes .
537	Calls the method with the given context .
538	Calls the method with the given request .
539	Returns the existing file for the given path .
540	Returns the binding in the specified scope .
541	Returns a new tuple with the given values .
542	Static factory method for creating a tuple of type 5 .
543	Converts an execution context to an executor .
544	Returns a new instance with the specified name and unit name .
545	Returns a new instance with the specified persistence units .
546	Creates a new JPAConfig from the given map .
547	Creates a flow from a string .
548	Returns a flow of JSON data .
549	Adds a constraint validator for the given key .
550	Creates a new instance of a constraint validator .
551	Finds the best matching accessible method .
552	Called when a client error occurs .
553	Handles a bad request .
554	Handles a forbidden request .
555	Handles a not found request .
556	Handles a server error .
557	Logs an internal server error .
558	Returns a useful exception that can be used to handle the given throwable .
559	Handles a dev server error .
560	Handle a development error .
561	Creates a build doc handler from a list of files and directories .
562	Creates a build doc handler from a directory .
563	Creates a build doc handler from a directory and a jar file .
564	Creates a build doc handler from a directory and a jar file .
565	Creates a build doc handler from a jar file .
566	Consumes data from the stream .
567	Creates an entity from the given content .
568	Creates an entity from the given string .
569	Creates a chunked entity from the given source .
570	Sets the HTTP status code and JSON content .
571	Sends a JSON response with the given status code and content .
572	Creates a new response with the given status code and content .
573	Sends the given content to the client with the given status code .
574	Sets the HTTP status code and content .
575	Find user by id .
576	Returns the preferred language for the given languages .
577	Returns a new unique call .
578	Returns a new Call with the specified fragment .
579	Returns the absolute URL for the given request .
580	Returns the web socket URL for the given request .
581	Returns a function that runs the given connection runnable .
582	Returns a connection function .
583	Returns a new server for the given mode and port .
584	Returns the JSON representation of the given object .
585	Creates an instance of the given class from the given JSON node .
586	Parses the given string into a JsonNode .
587	Parses a java . io . InputStream into a JsonNode .
588	Returns the relative path of the start path to the target path .
589	Canonicalizes the given URL .
590	Returns a list of tuples for each displayable constraint .
591	Displayable constraint .
592	Returns a new CompletionStage that completes after the specified amount of time .
593	Returns true if the classArray is assignable to the toClassArray .
594	Parses a CRON expression and returns the next valid time after it .
595	Returns the next cron interval for the given date .
596	Create a new instance of AhcWSClient .
597	Creates a builder for the given application loader .
598	Renders the todo page .
599	Adds a value to the session .
600	Adds a flash key - value pair .
601	Returns a binding key that is qualified to the given instance .
602	Returns a binding key that is qualified with the given annotation .
603	Sets the binding to the given implementation .
604	Returns the binding to the given provider .
605	Sets the value of this binding to the given instance .
606	Returns the binding for the given key .
607	Returns the binding to the specified provider .
608	Returns a list of all available languages .
609	Returns the preferred language for the given languages .
610	Creates a new EvolutionsReader from a map of evolutions .
611	Creates a new EvolutionsReader for the default evolutions .
612	Clean up the database volutions .
613	Adds a configuration loader to the application .
614	Adds a module loader to the application .
615	Load a set of modules .
616	Loads the application from the given modules .
617	Load a set of modules .
618	Load the application with the given bindings .
619	Creates a new GuiceApplicationBuilder .
620	Encodes the given cookie .
621	Returns the current entity manager .
622	Returns the stack of entities .
623	Push or pop an EntityManager from the stack or throw an exception if none was set .
624	Apply a splitter to a flow .
625	Returns a flow that bypasses the given splitter with the given merge strategy .
626	Create an actor ref from a function .
627	Convert error arguments .
628	Fills the form with the given value .
629	Returns the global errors .
630	Returns the errors as JSON .
631	Returns the value for the given key .
632	Fills the form with the given values .
633	Parses the given text into an object of the given type .
634	Parses the given text into an object of the given field .
635	Print the given object to the console .
636	Prints the value of the given field .
637	Prints the given object to the output .
638	Register an optional converter .
639	Register a formatter for the given type .
640	Register an annotation formatter .
641	Encodes the given cookie .
642	Selects the nodes at the given path .
643	Convert java . util . List to java . util . Seq
644	Converts an array of objects to a sequence .
645	Returns an immutable view of the given array .
646	Returns a acceptor that accepts a JSON message .
647	Accept or result .
648	Workaround for java . lang . access . AccessibleObject .
649	Gets the promotion cost for a primitive type .
650	Returns the total cost of the transformation for the given executable .
651	Returns the cost of an object transformation .
652	Returns the localized message for the given key .
653	Returns a list of messages for the given keys .
654	Creates a database from the given parameters .
655	Creates a parallel sorter for the given arrays .
656	Quick sort implementation .
657	Merge sort .
658	Invokes the method with the given arguments .
659	Cast a numeric type to another type .
660	Load an argument from the stack .
661	Emit a field instruction .
662	Pushes a zero value to the stack .
663	Unbox a primitive type or zero .
664	Processes an array .
665	Generates code to compare two null labels .
666	Resolve all bridges .
667	Returns a list of methods from the given superclass and interfaces .
668	Filter constructors .
669	Sets the superclass of this class .
670	Gets a field .
671	Adds a method to the list .
672	Returns the cardinality of this set .
673	Sets the naming policy .
674	Finds all methods matching the given names and descriptors .
675	Resolve a path .
676	Read a string from a file .
677	Sets the host of the request .
678	Creates a new request with the specified method and destination .
679	Creates a CONNECT request .
680	Creates a new GET request with the specified destination .
681	Creates a new POST request .
682	Creates a PUT request with the specified destination .
683	Creates a PATCH request with the specified destination .
684	Creates a DELETE request with the specified destination .
685	Creates a HEAD request with the specified destination .
686	Creates a TRACE request with the specified destination .
687	Creates an OPTIONS request with the specified destination .
688	Sets the request path .
689	Add a set of cookies .
690	Adds multiple query parameters .
691	Adds a map of query parameters to the request .
692	Sets the query string .
693	Returns the query string .
694	Returns the host url .
695	Sets the basic authentication header .
696	Sets the host header .
697	Buffer the request .
698	Send the request and receive the response .
699	Removes the given range from the given handler .
700	Returns the length of the exception table .
701	Collect all action interceptors .
702	Collect all action filters .
703	Collect all action results .
704	Collect all action runtimes .
705	Sets a simple property .
706	Returns the value of the named property in the specified bean .
707	Extract this reference from a property name .
708	Gets the writer .
709	Sets a reference to an object .
710	Get a reference to an object .
711	Looks up an object reference .
712	Returns the entity descriptor for the given table reference .
713	Find table descriptor by column ref .
714	Returns the table alias for the given tableRef .
715	Registers a table reference .
716	Looks up the entity descriptor for the given table reference .
717	Registers a hint .
718	Serializes the given value .
719	Injects the attributes from the servlet request .
720	Inject the parameters from the servlet request .
721	Inject uploaded files .
722	Convert a property name to a column name .
723	Convert column name to property name .
724	Convert a column name to a column name .
725	Store value .
726	Prepare to get the value of the given type .
727	Returns all the wrappers .
728	Resolves the given wrapper class .
729	Creates an instance of the given wrapper class .
730	Converts a path to a system path .
731	Get the path of a file .
732	Splits a filename into its components .
733	Returns the relative path to the target file .
734	Register a madvoc component .
735	Adds an action config to the application .
736	Starts the Madvoc WebApp .
737	Configure defaults .
738	Register Madvoc components .
739	Exclude jars from scanning .
740	Include a set of jars .
741	Include the given entries .
742	Exclude the specified entries from scanning .
743	Scan a jar file .
744	Scan the classpath .
745	Returns the bytecode signature of the given type .
746	Scan the given paths for classes .
747	Starts the scanner .
748	Creates a new JtxTransaction .
749	Returns the default scope or the default scope if the given class is null .
750	Get or create a new scope .
751	Performs the given consumer for the given scope type .
752	Decodes a char array into a byte array .
753	Prepares a new CSRF token .
754	Assure that the size of the token set is at least maxTokensPerSession .
755	Checks if the session contains a CSRF token .
756	Creates a BeanCopy from the given source object .
757	Creates a copy of this BeanUtilBean .
758	Visit a property .
759	Initializes the TemplateData object .
760	Returns the scope for the given type .
761	Registers a petite bean .
762	Register a bean .
763	Removes all beans of the given type .
764	Returns a list of bean names for the given type .
765	Register a Petite constructor injection point .
766	Registers a petite property injection point .
767	Registers a petite set injection point .
768	Registers a Petite method injection point .
769	Registers the specified init methods with the given bean name .
770	Register petite destroy methods .
771	Registers a petite provider .
772	Register a petite provider .
773	Iterate through all beans of the given type and invoke the consumer for each bean name .
774	Define parameters from a map of properties .
775	Intercepts an action request .
776	Resolve the Java version .
777	Pushes an int onto the stack .
778	Checks that the given argument index is valid .
779	Advice field name .
780	Advice method name .
781	Load special method arguments .
782	Load static method arguments .
783	Load virtual method arguments .
784	Load a method argument .
785	Stores a method argument .
786	Prepares the return value of a method .
787	Creates a method signature key .
788	Generates instructions to create an array of the given type .
789	Stores the given type into an array .
790	Extracts the encoding from the given content type .
791	Returns true if the given flags are empty .
792	Resolve auth bearer token .
793	Require authentication .
794	Prepares the response to download the given file .
795	Prepares the response to be sent to the client .
796	Returns all cookies with the given name .
797	Reads the request body from the reader .
798	Reads the request body from the input stream .
799	Stores the context path for the given page context .
800	Stores the context path .
801	Checks if the given name is a GET parameter .
802	Prepares the parameters for the request .
803	Copy all parameters from the servlet request to the servlet request attributes .
804	Invokes a tag body .
805	Renders the given body .
806	Renders the given JspFragment into a String .
807	Invokes all init methods of the bean .
808	Call destroy methods .
809	Creates a new bean instance .
810	Injects the parameters to the bean .
811	Rewrite the action path .
812	Adds a new header .
813	Adds a new entry to the props map .
814	Adds a base property .
815	Put a profile property .
816	Gets the profile property .
817	Resolve all inner macros .
818	Extract the properties from the target map .
819	streamtoword .
820	Hashes a password using the given salt .
821	Returns true if the given plaintext password matches the given hashed password .
822	Copies all bytes from this stream to the given output stream .
823	Copies the specified number of bytes from the current position to the specified output stream .
824	Parses the given action method .
825	Resolve the action config .
826	Detects and registers the action alias .
827	Read action interceptors .
828	Read action filters .
829	Reads the package action path from the action class .
830	Read method action path .
831	Parse method alias .
832	Creates an action runtime .
833	Sets the Last - Modified header if the request was modified since the last modified time .
834	Applies the advice to the target class .
835	Inject target into proxy .
836	Visit an annotation .
837	Returns the real name for the given JSON name .
838	Returns the JSON name for the given real name .
839	Looks up the type data for the given type .
840	Looks up the type data for the given type .
841	Finds the type data for a subtype of a class .
842	Resolve a JSON name .
843	Resolve real name .
844	Returns the content of the file .
845	Copy bootstrap methods .
846	Sets the major version and class name .
847	Puts the constant pool into the given ByteVector .
848	Puts the bootstrap methods .
849	Add a fieldref symbol .
850	Add a method reference to a constant .
851	Adds a member reference to the constant pool .
852	Adds a constant member reference .
853	Adds a constant to the constant pool if it does not already exist .
854	Adds a constant integer or float .
855	Adds a constant to the constant pool if it does not already exist .
856	Adds a constant long or double to the constant pool .
857	Adds a name - and - type constant to the constant pool .
858	Adds a new constant name and type entry .
859	Adds a UTF - 8 constant to the constant pool .
860	Adds a UTF - 8 constant .
861	Add a constant method handle to the constant pool .
862	Adds a constant method handle entry .
863	Add a dynamic constant .
864	Add a constant invoke dynamic method .
865	Adds a constant to the constant pool if it does not already exist .
866	Adds a constant dynamic or invoke - dynamic reference .
867	Adds a constant to the constant pool .
868	Adds a UTF - 8 reference .
869	Add a bootstrap method .
870	Add a merged type .
871	Returns the hash code for the given name .
872	Removes all entries from this MultiMap .
873	Returns all values with the specified name .
874	Returns an iterator over the entries in this map .
875	Returns a list of all entries in this map .
876	Grows the buffer by a given capacity .
877	Appends a sequence of characters to the buffer .
878	Visit an annotation .
879	Visit the end of the chain .
880	Create the first chain delegate .
881	Create the first chain delegate .
882	Parse a path .
883	Pushes a field to the path .
884	Configure the servlet context .
885	Execute the method .
886	Returns an array of all field descriptors .
887	Creates a bean definition for the given registration .
888	Converts a JtxTransactionMode to a DbTransactionMode .
889	Reads a property from the given source object .
890	Adds all entries from the specified map to this map .
891	Appends the given buffer to this buffer .
892	Writes the contents of this list to the specified writer .
893	Writes the contents of this list to the given output stream .
894	Writes the contents of this list to the given output stream .
895	Returns the string value for the given key .
896	Returns the Integer value for the given key or null if the key does not exist .
897	Returns the value associated with the given key as a Long .
898	Returns the Double value for the given key .
899	Returns the Float value for the given key or null if the key does not exist .
900	Returns the value for the given key .
901	Adds a key - value pair to this object .
902	Use the given folder name .
903	Receives messages from the server .
904	Updates the flags for a received email .
905	Closes the given folder if it is open .
906	Looks up a named parameter .
907	Returns the alias for the given target .
908	Validates this action using the specified profiles .
909	Adds a new Violation to the validator .
910	Sets the mime type .
911	Sets the download file name .
912	Sets the target .
913	Sets the target class name .
914	Sets the target class .
915	Process the target class .
916	Creates the proxy .
917	Defines the proxy .
918	Creates a new instance of the Proxetta class .
919	Dump a class in the debug folder .
920	Sets the from address .
921	Sets the email address .
922	Sets the to address .
923	Set the email address to send to .
924	Set the cc address .
925	Sets the message type to text .
926	Sets the HTML message .
927	Adds a header to the response .
928	Returns the value of a system property .
929	Returns the boolean value for the given name .
930	Returns the long value for the given name or the default value if the name does not exist .
931	Returns the long value for the given name .
932	Returns the resolved parameters for this method .
933	Serializes a key - value pair .
934	Returns the path alias for the given alias .
935	Returns the alias for the given value .
936	Resolve the result path .
937	Resolve the result path string .
938	returns the index of the last occurrence of a slash or - 1 if not found
939	returns the index of the last dot in the string after the last slash
940	Returns the index of the last dot in the string after the last slash .
941	Removes the last camel word from the given name .
942	Resolve the schema name for the given type .
943	Resolve column descriptors .
944	Initializes the Threefish key with the given key and tweak .
945	Mix a pair of values .
946	This method demixs a value at a given depth .
947	Update the key schedule .
948	Initializes this key with the given key message and tweaks .
949	Encrypt a block of data .
950	Convert a byte array to an array of long values .
951	Removes any bounding characters from a string .
952	Returns the path of the method .
953	Zlib a file .
954	GZip a file .
955	Ungzips the given file .
956	Returns a list of all entries in the given zip file .
957	Unzips the given zip file to the given destination directory .
958	Adds a file to a ZIP output stream .
959	Adds a byte array to a zip file .
960	Returns the field descriptor for the given name .
961	Returns the property descriptor for the given name .
962	Sets the bundle name for this request .
963	Sets the session locale .
964	Gets the session locale .
965	Filter parameters for bean name .
966	Adds a profile to the list of profiles .
967	Reads a long from the byte array at the given offset in little - endian order .
968	Reads a byte array from an input stream .
969	Reads a label from the given bytecode offset .
970	Returns the bytecode offset of the type annotation at the given index .
971	Reads the values of an element .
972	Read a verification type information frame .
973	Read the bootstrap methods attribute .
974	Inspects the constructors of the class .
975	Returns the ctor descriptor for the given arguments .
976	Gets the request map .
977	Creates a new request map .
978	Converts an array of values to an array of long values .
979	Initializes the DecoraManager .
980	Add a file consumer to the list of consumers .
981	Add a search path .
982	Add a search path .
983	Includes the given patterns .
984	Exclude one or more patterns .
985	Adds a path to the path list .
986	Finds all files in the directory .
987	Initializes the internal data structures .
988	Returns an iterator over the files in this directory .
989	Resolve bean wiring mode .
990	Returns the bean name for the given type .
991	Get the writer .
992	Get the output stream .
993	Returns the class name of this type .
994	Gets the constructor descriptor .
995	Returns the method descriptor .
996	Gets the method descriptor .
997	Appends the descriptor to the given StringBuilder .
998	Returns the size of this type .
999	Returns the number of arguments and return sizes for the given method descriptor .
1000	Sets the cause of the transaction to be rolled back .
1001	Commit or rollback the transaction .
1002	Rolls back all resources .
1003	Requests a resource for the given type .
1004	Pop a name from the stack .
1005	Write a string .
1006	Write a unicode character .
1007	Writes a char sequence .
1008	Sets the parsing error log level name .
1009	Sets the start of the region .
1010	Checks if the value is contained in the include string .
1011	Register a pseudo function .
1012	Lookup a pseudo function .
1013	Visit this class .
1014	Visit an annotation .
1015	Creates the static init block .
1016	Creates the proxy constructor .
1017	Processes the super methods of this class .
1018	Returns the index of the last element in the specified range .
1019	Adds the prefix and suffix to the given string .
1020	Replace ASM instructions .
1021	Gets the attribute prototypes .
1022	Register default types .
1023	Registers a type with the SqlTypeRegistry .
1024	Looks up the SqlType for the given class .
1025	Looks up a SQL type by its class name .
1026	Creates a SOCKS4 proxy .
1027	Creates a SOCKS5 proxy .
1028	Creates a new HTTP proxy .
1029	Returns the total number of threads in the current thread .
1030	Count the number of threads that have a given status .
1031	Associate a transaction with the current thread .
1032	Validates that the destination mode is compatible with the source mode .
1033	Lookup the resource manager for the given resource type .
1034	Creates a proxy object for the given target class .
1035	append a method name to the path
1036	Aligns a string to the left and pads it if necessary .
1037	Converts an object to a pretty string .
1038	Converts a String to a CamelCase String .
1039	Format a paragraph of text .
1040	Convert tabs to spaces .
1041	Escapes a Java string .
1042	Unescapes a Java string .
1043	Returns the bean for the given type .
1044	Returns the bean with the given name .
1045	Initializes a bean definition .
1046	Invokes a provider method .
1047	Adds a bean to the scope .
1048	Sets the value of a bean property .
1049	Returns the value of a bean property .
1050	Shuts down the scope manager .
1051	Resolves the parameters of a method or constructor .
1052	This method is called after the body tag has been parsed .
1053	Returns the value of the property .
1054	Ends the DOM tree .
1055	Create a new element node .
1056	Add a tag to the DOM tree .
1057	Removes the last child node of the given parent node if it is a text node .
1058	Gets the query string .
1059	Returns the class name of the action .
1060	Calculates the to value .
1061	Iterate a collection .
1062	Iterate an array .
1063	Replaces all occurrences of sub with with with .
1064	Replaces all occurrences of the specified character with the specified character .
1065	Replaces all occurrences of the specified chars in the specified string with the specified values .
1066	Replaces the first occurrence of the given string with the given string .
1067	Replaces the first occurrence of the specified character with the specified character .
1068	Replaces the last occurrence of sub with with .
1069	Replaces the last occurrence of sub with with .
1070	Removes all occurrences of sub from s .
1071	Removes the specified character from the specified string .
1072	Returns true if all of the given strings are empty .
1073	Returns true if all of the given strings are blank .
1074	Convert an object to an array of strings .
1075	Change first character case .
1076	Returns the title of the given string .
1077	Compress the characters in a string .
1078	Returns true if src starts with subS ignoring case .
1079	Checks if the string ends with the specified character .
1080	Count the number of occurrences of sub in source ignoring case .
1081	Compares two strings .
1082	Returns the index of the first whitespace character in the specified range of the specified string .
1083	Removes the leading char from the beginning of the string .
1084	Removes the trailing character from the end of the string .
1085	Removes the specified character from the specified string .
1086	Removes the first occurrence of the specified character from the specified string .
1087	Removes the first occurrence of the specified character from the specified string .
1088	Crop all the given strings .
1089	Removes leading whitespace from the beginning of the string .
1090	Removes the trailing whitespace from the end of the string .
1091	Returns the index of the first occurrence of the specified region of the specified string starting at the specified offset .
1092	Joins a collection of characters into a single string .
1093	Joins an array of objects using the given separator .
1094	Converts the source string to the new charset .
1095	Checks if the specified character is equal to the specified character .
1096	Surrounds the given string with the given prefix and suffix .
1097	Adds a prefix to a string if it does not already start with a prefix .
1098	Adds a suffix to a string if it does not already end with the suffix .
1099	Cut the given substring from the beginning of the given string .
1100	Cut from the index of the substring from the end of the string .
1101	Cut the prefix from the beginning of the string .
1102	Cut the suffix from the end of the string .
1103	Cut a string surrounded by a prefix and suffix .
1104	Inserts the specified string at the specified offset .
1105	Repeat a string .
1106	Reverses a string .
1107	Returns the longest common prefix between two strings .
1108	Finds the common prefix of the given strings .
1109	Shorten a string to a given length .
1110	Converts a string to upper case .
1111	Removes leading and trailing quotes from a string .
1112	Converts a byte array into a hexadecimal string .
1113	Converts a string into a byte array .
1114	Detects the quote character .
1115	Visit a property .
1116	Visit an enum .
1117	Visit an annotation .
1118	Registers an entity descriptor for the given type .
1119	Registers an entity with the database .
1120	Removes an entity from the registry .
1121	Creates an entity instance of the given type .
1122	Sets the target interface .
1123	Inject target into wrapper .
1124	Looks up the annotated properties for the given type .
1125	Detect database and configure db oom .
1126	Closes the output stream .
1127	Writes a single byte to the output stream .
1128	Invalidates the session associated with the request .
1129	Returns the name of the message .
1130	Returns the contents of this buffer as a byte array .
1131	Writes the mail to a file .
1132	Writes the message to an output stream .
1133	Appends an argument to an argument description .
1134	Prepends an argument .
1135	Change the return type of a method .
1136	Sets the text to be stripped . If the strip flag is set to true the text will be stripped .
1137	Register a type converter .
1138	Lookup a converter for a given type .
1139	Returns a list of nodes matching the given query .
1140	Selects a collection of selectors .
1141	Processes the given selectors and adds them to the results .
1142	Selects the first node matching the given query .
1143	Walks all descendant nodes and adds them to the result list .
1144	Walks the tree using the given CSS selector .
1145	Selects the node and adds it to the result list .
1146	Applies the given CSS selector to the current results .
1147	Unpack the c - map from a packed string .
1148	Refills the char buffer if necessary .
1149	Performs a page query .
1150	Removes the select part from a SQL statement .
1151	remove from from
1152	remove the last order by
1153	Decodes the given HTML string .
1154	Detects the name of an entity .
1155	Build order sql .
1156	Build the SQL for a page query .
1157	Resolve columns and properties .
1158	Finds a column descriptor by its column name .
1159	Finds a column descriptor by its property name .
1160	Returns the property name for the given column name .
1161	Returns the column name for the given property name .
1162	Gets the id value of the given object .
1163	Sets the id value of the given object .
1164	Returns the key value for the given object .
1165	Appends a string to the end of the band .
1166	Sets the new index .
1167	Expands the capacity of the array .
1168	Calculates the length of the array .
1169	Create a mixing message .
1170	Creates a scoped proxy bean .
1171	Processes the body of the loop .
1172	Initializes the map .
1173	Returns true if the given file should be accepted .
1174	Use a watch file .
1175	Start polling .
1176	Notify the listeners of a change event .
1177	Adds an enumeration .
1178	Compute the size of the field info .
1179	Puts the field information into the given ByteVector .
1180	Create a new instance with the specified value .
1181	Write a property value .
1182	Decorates the content of a page .
1183	Parse the content of a page .
1184	Writes the content of the decorated page .
1185	Writes the specified region to the specified writer .
1186	Starts the server .
1187	Runs the given process and returns the result .
1188	Get the store for the given session .
1189	Creates an output stream for this response .
1190	Initializes the template with the given template data .
1191	Appends the column alias to the query .
1192	Append column name .
1193	Adds a rule definition .
1194	Applies the rule to the given value .
1195	Process the includes .
1196	Process the value to see if it should be included .
1197	Gets the pseudo class name .
1198	Adds all elements in the specified collection to this set .
1199	Finds the insertion point of the specified element .
1200	Binds an annotation config .
1201	Register new action configuration .
1202	Lookup the action configuration for the given action type or annotation type .
1203	Adds an action config to the registry .
1204	Setup system mail properties .
1205	Validates the given value against the given validation context .
1206	Finds the last table node in the tree .
1207	Fixes the elements in the foster .
1208	Register session beans .
1209	Gets the session map .
1210	Initializes the proxy .
1211	Add advice init method .
1212	End the action .
1213	Adds a key - value pair to the profile .
1214	Extracts the profiles from a key and adds them to the map .
1215	Adds a key - value pair to the properties .
1216	Convert a typed type description to a class name .
1217	Convert a typeref type description to a type name .
1218	Convert a typedesc to a signature .
1219	Converts a java . lang . Class to a Typeref .
1220	Adds the given consumers to this consumer list .
1221	Creates a new collection of the specified length .
1222	Converts the given value to a single element collection .
1223	Converts the given value to a collection .
1224	Convert a collection to a collection .
1225	Convert a primitive array to a collection .
1226	Sets the line number .
1227	Makes the given MethodVisitor visit this Label .
1228	Puts the instruction at the given offset into the given ByteVector .
1229	Adds a forward reference .
1230	Resolve the instruction at the given bytecode offset .
1231	Marks this label as a subroutine .
1232	Adds the successors of the given subroutine to this block .
1233	Compare two digits .
1234	Fixes the accent .
1235	Puts the specified byte value into this vector .
1236	Put two values into the byte vector .
1237	Puts a short value into the byte vector .
1238	Put a 12 - byte integer into the ByteVector .
1239	Put the given four bytes into this ByteVector .
1240	Put an integer into the byte vector .
1241	Put a 2 - byte value pair into this Vector .
1242	Put a long value into the byte vector .
1243	Puts the specified byte array into this ByteVector .
1244	Enlarges the array by the specified size .
1245	Authenticate user via http session .
1246	Authenticate user via bearer token .
1247	Authenticate user via basic auth .
1248	Finds the default message for the given key .
1249	Returns a ResourceBundle for the given bundle name and locale .
1250	Returns the element at the given index in the given array .
1251	Sets the entity id .
1252	Saves an entity to the database .
1253	Updates the given entity .
1254	Updates a property of an entity .
1255	Updates a property of an entity .
1256	Finds the entity with the given id .
1257	Finds an entity by its property .
1258	Find one entity matching the given criteria .
1259	Deletes the entity with the given id .
1260	Deletes the given entity from the database .
1261	Count the number of entities of the given type .
1262	Increments the value of a property .
1263	Decrease a property .
1264	Find related entities .
1265	Returns a list of all entities in the database .
1266	Removes all of the attributes from this map .
1267	Returns an unmodifiable set of all the attributes .
1268	Sets the value for the specified key .
1269	Removes the value associated with the specified key from this map .
1270	Get the current stack trace .
1271	Returns the stack trace of the given exception .
1272	Returns the stack trace of the given exception .
1273	Gets the exception chain of the given throwable .
1274	Convert the stack trace of an exception to a string .
1275	Convert an exception chain to a string .
1276	Builds a message from the given message and cause .
1277	Unwraps a wrapped Throwable .
1278	Register as consumer .
1279	Accept a Madvoc component class .
1280	Returns the system class loader .
1281	Returns an input stream to the specified resource .
1282	Returns the input stream for the specified resource .
1283	Gets the class stream .
1284	Gets the class stream .
1285	Adds a new chunk to this chunk .
1286	Find or create a child chunk .
1287	Parse the request .
1288	Convert a value to a collection .
1289	Invokes a setter on the bean .
1290	Sets the value of the array at the given index .
1291	Creates a new bean property .
1292	Extracts the type of the getter for the given property .
1293	Stops the authentication process .
1294	Start the authentication process .
1295	Convert a local date to a date .
1296	Converts a local date time to a calendar .
1297	Define a proxy for the given class .
1298	Adds a new check to the list .
1299	Returns a validation context for the given target class .
1300	Adds all checks for the given class .
1301	Collect the annotation checks for a property .
1302	Collect annotation checks .
1303	Copy default check properties .
1304	Encodes the given source string using the given encoding and URIPart .
1305	Encodes the given string using the given encoding .
1306	Encodes the given URI scheme with the given encoding .
1307	Encodes the given host with the given encoding .
1308	Encodes the given URI port with the given encoding .
1309	Encodes the given path with the given encoding .
1310	Encodes the given URI query with the given encoding .
1311	Encodes the given URI query parameter with the given encoding .
1312	Encodes the given URI fragment with the given encoding .
1313	Inspect the properties of the given class descriptor .
1314	Returns an array of all property descriptors .
1315	Returns the set - cookie headers .
1316	Unzips the response body .
1317	Closes the HTTP connection .
1318	Returns true if the given scope should be accepted .
1319	Prints the routes .
1320	Encrypt a byte array .
1321	Decrypts the given content .
1322	Convert a map to a bean .
1323	Converts a list of objects to a bean .
1324	Sets the value of the given property .
1325	Generify a map .
1326	Sort by column name .
1327	Sets a default header .
1328	Send a request to the server .
1329	Sends a request to the server .
1330	Add default headers .
1331	Read the cookies from the HTTP response .
1332	Adds the cookies to the request .
1333	Send an email .
1334	Sets the subject .
1335	Sets the sent date .
1336	Sets the headers .
1337	Set the people .
1338	Sets the recipients .
1339	Adds the body data to the message .
1340	Sets the content of the given email message .
1341	Creates a body part for an attachment .
1342	Get the content type from the data header .
1343	Saves the result set .
1344	Closes all ResultSets associated with this query .
1345	Closes the query .
1346	Closes the query .
1347	Sets the fetch size .
1348	Sets the maximum number of rows in the result set .
1349	Executes the update .
1350	Executes the count query .
1351	Returns a ResultSet of generated columns .
1352	Returns the query string .
1353	Creates a new instance of the given aspect class .
1354	Creates a collection from the given iterator .
1355	Returns a stream of the elements of the given iterator .
1356	Compares two objects .
1357	Sets the default wiring mode .
1358	Prints a message to the console .
1359	Returns the class name of the caller .
1360	Shorten a class name .
1361	Exclude the given types .
1362	Serializes the given source object to the target Appendable .
1363	Serializes the given object to a String .
1364	Clone an object using serialization .
1365	Writes an object to a file .
1366	Reads an object from a file .
1367	Converts an object to a byte array .
1368	Convert a byte array to an object .
1369	Resolve the mapped types table names for the given types .
1370	Creates the table names for the given types .
1371	Read a column value from the result set .
1372	Cache result set entities .
1373	Returns the provider definitions for the given type and name .
1374	Convert a table name to an entity name .
1375	Checks if the connection is valid .
1376	Renders the view .
1377	Locates the target for the given path .
1378	Returns a writer for writing to the response .
1379	Returns the output stream for this response .
1380	Writes the content to the response .
1381	Sets the content type .
1382	Print a string to the output stream .
1383	Performs the login .
1384	Token as json .
1385	Login via basic auth .
1386	Logout user .
1387	Converts a URL to a container file .
1388	Creates a directory if it does not already exist .
1389	Creates a directory if it does not already exist .
1390	Copies a file from the source file to the destination file .
1391	Copies a directory .
1392	Moves a file from one location to another .
1393	Move a directory .
1394	Deletes all contents of a directory .
1395	Reads all UTF - 8 characters from the given file .
1396	Reads the contents of a file into a char array .
1397	Write a char array to a file .
1398	Write a string to a file .
1399	Append a string to a file .
1400	Read a number of bytes from a file .
1401	Write a byte array to a file .
1402	Append bytes to a file .
1403	Copies a file or directory .
1404	Deletes a file or directory .
1405	Creates a temporary directory .
1406	Checks if the file is a binary file .
1407	Checks that the source and destination directories are the same .
1408	Checks that the source file and destination file are the same .
1409	Prints the usage of the command .
1410	Resolve an action method .
1411	Register an action .
1412	Registers an alias for a path .
1413	Moves the iterator to the next value .
1414	Construct a CharArraySequence from the specified char array .
1415	Executes the target method .
1416	Checks if the target char array is uppercase .
1417	Returns a sequence of characters from the specified range .
1418	Returns an array of URLs for the given class .
1419	Add a list of bcc addresses .
1420	Registers a new serializer for the given type .
1421	Lookup the serializer for the given type .
1422	Parse a request stream .
1423	Returns the value of the specified parameter .
1424	Gets the values of a request parameter .
1425	Returns the uploaded file .
1426	Returns the request files with the given name .
1427	Initializes the filter .
1428	Parse the template .
1429	Find the end of a macro .
1430	Count the number of escape characters in the given template .
1431	Build a query string from a multi - map .
1432	Parses a query string into a multi map .
1433	Returns the parameter name for the given header name .
1434	Extracts the media type from the given content type .
1435	Returns the HTML representation of the given node .
1436	Returns the HTML representation of the given node .
1437	Configure with the servlet context .
1438	Reset to the initial state .
1439	Sets whether the parser should be used for lazy parsing .
1440	Replace the target class with the mapped type for the given path .
1441	Parses the given string as a list .
1442	Parses the given string as a map .
1443	Resolve a lazy value .
1444	Skips an object .
1445	Parse a string .
1446	Parse string content .
1447	Parse a Unicode code point .
1448	Parse an unquoted string .
1449	Parse a number .
1450	Parse an array content .
1451	Creates an empty constructor .
1452	Create a simple method wrapper .
1453	Returns the raw type name for the given type name .
1454	Resolve a reference from a property value .
1455	Resolve a reference to a method or constructor .
1456	Read all references from annotation .
1457	Builds the default references for the given method or constructor .
1458	Builds the default reference .
1459	Remove duplicate names .
1460	Converts a string array of references to an array of BeanReferences .
1461	Converts an annotation value to an array of BeanReferences .
1462	Run joy .
1463	Finds the method with the given name in the given class .
1464	Finds a constructor for the given class and parameter types .
1465	Resolve all interfaces of the given type .
1466	Compares two parameter types .
1467	Force access to an AccessibleObject .
1468	Creates a new instance of the given class .
1469	Returns the superclasses of the given class .
1470	Returns the child class of the given class .
1471	Returns the jar file of the given class .
1472	Sleep for the specified amount of time .
1473	Sleeps for a long .
1474	Wait for the given object to complete .
1475	Creates a thread factory that creates a daemon thread with the specified name and priority .
1476	Returns the value of the supplier .
1477	Visit a parameter .
1478	Visit an annotation .
1479	Visit a type annotation .
1480	Visit a parameter annotation .
1481	Visit a field instruction .
1482	Visit a method instruction .
1483	Visit a invoke - dynamic instruction .
1484	Visit a jump instruction .
1485	Visit a multi - anew array instruction .
1486	Visit a try catch block .
1487	Visit a local variable annotation .
1488	Convert the properties to a writer .
1489	Reads the data from the input stream .
1490	Returns the next element in the list .
1491	Moves to the next row in the result set .
1492	Joins the given arrays into a single array .
1493	Joins an array of arrays into a single array of the same type .
1494	Resize the given array to a new size .
1495	Appends the specified element to the end of the specified array .
1496	Removes the specified elements from the specified array .
1497	Returns the index of the first occurrence of the specified value in the specified char array or - 1 if the array is empty .
1498	Returns the index of the first occurrence of the specified value in the specified array or - 1 if the array is empty .
1499	Returns the index of the first occurrence of sub in the array starting from the given startIndex .
1500	Enables XHTML mode .
1501	Parses the given content into a DOM Document .
1502	Do the parsing .
1503	Compute the maximum stack and local stack .
1504	Ends the current basic block with no successor .
1505	Collect attribute prototypes .
1506	Inject the context for the given target object .
1507	Registers a class as a pseudo class .
1508	Lookup a pseudo class .
1509	Invokes the action with the given request .
1510	Returns the names of all bean properties .
1511	Visit each property of the bean .
1512	Returns true if the given property name matches the given rule .
1513	Resolve all method injection points for the given type .
1514	Read filter config parameters .
1515	Send a bundle file to the client .
1516	Returns the bundle file for the given bundle id .
1517	Returns the gzipped bundle file for the given file .
1518	Register a bundle .
1519	Creates a digest for the given source string .
1520	Creates a bundle .
1521	Deletes all files in the bundle folder .
1522	Fixes CSS relative URLs .
1523	Update column .
1524	Returns the table ref name for the given entity .
1525	Gets the db session .
1526	Convert value to single element array .
1527	Parses the given signature and returns a map of type names to their generics .
1528	Returns the set injection points for the given type .
1529	Returns true if the given property type matches the excluded property types .
1530	Open a connection to the database .
1531	Opens the database transaction .
1532	Closes the current transaction .
1533	Commits the current transaction .
1534	Rolls back the current transaction .
1535	Create a Properties object from a file .
1536	Create a Properties object from a String .
1537	Loads properties from a string .
1538	Returns a subset of a Properties object .
1539	Creates a Properties object from the classpath .
1540	Get a property from a map .
1541	Resolve all variables in the given properties .
1542	Resolve a property from a map .
1543	Resolve the scope pattern .
1544	Gets the transaction mode .
1545	Registers the given annotations .
1546	Reads the transaction annotation from the given method .
1547	Returns true if the given node matches this selector .
1548	Checks if the given node is an element .
1549	Returns true if the given node should be added to the currentResults list .
1550	Unescape the given value .
1551	Build the JRE packages for the given java version number .
1552	Clones this node .
1553	Detaches this node from its parent .
1554	Adds the specified nodes to this node .
1555	Inserts a child node at the specified index .
1556	Insert newChild before refChild .
1557	Insert newChilds before refChild .
1558	Inserts the newChild after the refChild .
1559	Insert newChilds after refChild .
1560	Removes all child nodes from this node .
1561	Find the child node with the given name .
1562	Returns the children of this node that match the given predicate .
1563	Returns true if this node is the same as this one .
1564	Initializes the array of child element nodes .
1565	Initializes the index of the sibling names .
1566	Initializes the list of child nodes .
1567	Changes the owner document of a node .
1568	Gets the previous sibling name .
1569	Returns the text content of this node .
1570	Returns the HTML representation of this element .
1571	Returns the inner HTML for this element .
1572	Visit the children of this node .
1573	Returns the CSS path of this node .
1574	This method is called when a tag is received from the parser .
1575	On id attribute start .
1576	Define the DecoraTag .
1577	Add a proxy aspect .
1578	Adds a mapping for the root package .
1579	Adds the root package of the given action class .
1580	Finds the root package for the given action path .
1581	Resolves the validation message for the given violation .
1582	Removes duplicate names .
1583	Add a name pattern to the props file .
1584	Iterate over all targets .
1585	Iterate over all targets in the given scope .
1586	Iterate over all targets in the given scope and invoke biConsumer for each target and out .
1587	Extract parameters values .
1588	Creates the targets for the action .
1589	Creates an action method argument .
1590	Handles a session created event .
1591	Called when a session is destroyed .
1592	Adds the given value to the end of this array .
1593	Adds all elements in the given array to this array .
1594	Removes the element at the given position .
1595	Resolves the target for the given result value .
1596	Target not found .
1597	Convert a value to a string .
1598	Add an action filter to the router .
1599	Gets the pseudo function name .
1600	Resolve all property injection points for the given type .
1601	Creates a SOCKS4 proxy socket .
1602	Returns the number of attributes in this attribute list .
1603	Returns all action results .
1604	Returns true if c equals match .
1605	Returns the index of the first occurrence of the given match in the source string or - 1 if the match is not found .
1606	Finds the first occurrence of the specified match in the specified char array and returns the index of the first occurrence .
1607	Add arguments to the command line .
1608	Set an environment variable .
1609	Runs the command line .
1610	Invokes a listener .
1611	Copies the contents of the given frame .
1612	Returns the abstract type for the given type .
1613	Get the abstract type from a descriptor .
1614	Set the input frame from the API format .
1615	Returns the abstract type for the given local index .
1616	Sets the local index .
1617	Pushes an abstract type onto the stack .
1618	Pushes a type descriptor onto the stack .
1619	Pop elements from the stack .
1620	Pop a descriptor from the stack .
1621	Adds an abstract type to the list of initializations .
1622	Returns the initialized type for the given abstract type .
1623	Puts an abstract type into the given ByteVector .
1624	Removes expired entries from the cache .
1625	Schedules a prune task to be run after the specified delay .
1626	Visit a module .
1627	Visit a NestHost .
1628	Visit an outer class .
1629	Visit an annotation .
1630	Visit a NestMember .
1631	Visit an inner class .
1632	Visit a field .
1633	Get the current DbThreadSession .
1634	Closes the current thread s session .
1635	Creates the execution array .
1636	Invokes the action method .
1637	Read the request body .
1638	Calculates the first item index of a page .
1639	Calculates the index of the first item in a page .
1640	Returns true if the given value is the same as this one .
1641	Convert a char array to a byte array .
1642	Returns the index of the first difference in the source array .
1643	Resolve the node name .
1644	Resolve the name of an attribute .
1645	Renders an attribute .
1646	Load properties from a file .
1647	Load properties from a file .
1648	Load properties from an input stream .
1649	Load properties from a map .
1650	Load properties from a map .
1651	Loads properties from classpath .
1652	Returns the value for the given key or the default value if the key does not exist .
1653	Sets the value for the given key .
1654	Extract the properties of this profile into the target map .
1655	Extract properties from the properties file .
1656	Extract sub properties from the target map .
1657	Returns the inner map .
1658	Adds the inner map .
1659	Resolve the active profiles .
1660	Returns the names of all profiles .
1661	Returns the names of all profiles that match the given property key name .
1662	Add a property injection point .
1663	Adds a set injection point .
1664	Add a method injection point .
1665	Add init method points .
1666	Adds a list of destroy method points .
1667	Resolve the target class .
1668	Inject target into wrapper .
1669	Gets the target wrapper type .
1670	Searches the class descriptor for the field with the given name .
1671	Returns the type of this field .
1672	Resolves the key type of this field .
1673	Resolves the component type of this field .
1674	Returns the JSON representation of the given object .
1675	Returns a JSON representation of the given exception .
1676	Resolve the HTTP method name from the method name .
1677	Returns true if the string matches the pattern .
1678	Resolve the loading for the given class .
1679	Resolve the resource loading .
1680	Tries to load the class with the given name .
1681	Returns the URL of the specified resource .
1682	Wait for the end of the queue .
1683	Detect annotation type .
1684	Builds an InjectionPoint from an annotation value .
1685	Visit the class .
1686	Returns an array of URLs for the given class .
1687	Sets the bean .
1688	Updates the bean .
1689	Loads the property descriptor .
1690	Returns the getter for this property .
1691	Returns the setter for this property .
1692	Connect to the database .
1693	Adds an iterator to the list .
1694	Prints the logo .
1695	Stop joy .
1696	Creates a socket for the given host and port .
1697	Creates an SSLSocket .
1698	Returns the default SSLSocketFactory .
1699	Returns the socket factory for the proxy .
1700	Returns a random string from the specified chars .
1701	Returns a random string in the specified range .
1702	Returns a random string of characters from the given ranges .
1703	Creates a new instance of the given type .
1704	Injects the given value into the target object .
1705	Convert the given value to the target type .
1706	Visit a provide .
1707	Returns the default cache implementation .
1708	Adds a value to the map .
1709	Returns an array of all MethodDescriptors .
1710	Returns the IP address of the given hostname .
1711	Convert an IP address to an integer .
1712	Returns true if the given string is valid for the Againt IP Adress V4 format .
1713	Resolve the hostname of an IP address .
1714	Downloads the bytes from the given URL .
1715	Downloads a string from a URL .
1716	Downloads a file from the given URL .
1717	Injects the given action request .
1718	Outjects the given action request .
1719	Connects to the given host and port .
1720	Connects to the given host and port .
1721	Returns the index of the primitive class name .
1722	Loads the class with the given name using the given class loader .
1723	load array class by component type
1724	Shut down the bean manager .
1725	Returns a binary search implementation for the given array .
1726	Returns a binary search for the given array using the given comparator .
1727	Exclude one or more rules .
1728	Add a list of rules to be included .
1729	Include all bean properties that match the given template .
1730	Sets the start index of this tag .
1731	Register a new Petite bean .
1732	Resolve the column s SQL type .
1733	Preprocess sql string .
1734	Creates a new ResultSetMapper .
1735	Find the generated key of the given type .
1736	Populates the entity with the generated keys .
1737	Creates a wrapper for the given class .
1738	Sets the bean .
1739	Sets the values of all named parameters in the given map .
1740	Set an array of objects .
1741	Inserts a chunk after another chunk .
1742	Returns the entity descriptor for the given entity class .
1743	Returns the entity descriptor for the given column reference .
1744	Returns the table name for the given tableRef .
1745	Resolve the class of the given object .
1746	Appends a space to the given StringBuilder .
1747	Returns an enumeration of file parameter names .
1748	Include the specified page in the specified request .
1749	Returns the URL for the given request .
1750	Gets the request URI .
1751	Resolve the parameter names for the given action class method .
1752	Starts the Petite application .
1753	Stops the Petite server .
1754	Add a subject to the filter .
1755	Add a message id to the filter .
1756	Adds the from address .
1757	Add a recipient address .
1758	Add a cc recipient address .
1759	Add a bcc address .
1760	Add a flag to the filter .
1761	Add a flag to the filter .
1762	Filter by received date .
1763	Filter by sent date .
1764	Adds a size term to the filter .
1765	Adds the given email filters to this filter .
1766	Add the given email filters to this filter .
1767	Not email filter .
1768	Concatenates the given search term with this one .
1769	Encodes a byte array into a Base32 string .
1770	Convert value to byte array .
1771	Checks if gzip is eligible for the given request .
1772	Validates the given object .
1773	Validates the given context against the target object .
1774	Use the specified profile .
1775	Sets the list of enabled profiles .
1776	Checks if the provided list of profiles matches .
1777	Parse the request body .
1778	Returns the number of milliseconds since Jan 1970 .
1779	Adds the specified JulianDate to this date .
1780	Returns the subtraction of this date from the specified date .
1781	Sets the integer and the fraction .
1782	Initializes the parser with the given input .
1783	Emit a comment .
1784	Report an error .
1785	Creates a PBKDF2 hash .
1786	Generates a PBKDF2 key .
1787	Convert a hex string to a byte array .
1788	Resolve the provider definitions for the given type and name .
1789	Sets the name of the email attachment .
1790	Sets the content id from the name if not already set .
1791	Resolve the content type .
1792	Parse a type .
1793	Compute the size of the attributes .
1794	Puts the attributes of this module into the given ByteVector .
1795	Decodes the given source string using the given encoding .
1796	Decode query string .
1797	Starts the database .
1798	Check connection provider .
1799	implements the visitor to look for a method signature .
1800	Visit the end of the class .
1801	Create a method signature .
1802	Converts an array of objects to a CSV string .
1803	Convert a line of text into an array of strings .
1804	Returns a CtorInjectionPoint for the given type .
1805	Creates a class reader for the given advice class .
1806	Gets the cached advice class reader .
1807	Encrypt a string .
1808	Decrypts a base64 encoded string .
1809	Get a logger by name .
1810	Sets the name of the cookie .
1811	Creates a new ActionRequest .
1812	Creates a wrapper for the given class .
1813	Destroy a bean .
1814	Shuts down the bean manager .
1815	Receives messages from the sender .
1816	Launches the ClusteredServiceContainer .
1817	Runs the reporting loop .
1818	Prints an error message .
1819	Print rate .
1820	Maps an existing file to read - only .
1821	Closes the replay session .
1822	Returns the number of work that should be scheduled for execution .
1823	Returns the current position in the log .
1824	Offer a message to the partition .
1825	Append padding to the current position .
1826	Closes the connection .
1827	Polls for an error response .
1828	Stops the specified replay session .
1829	Logs an event when an image is available .
1830	Logs an event when an image is unavailable .
1831	Send channel status indicator .
1832	Returns a StatusIndicatorReader for receiving a channel status .
1833	Sets the limit .
1834	Appends the specified number of bytes from the specified DirectBuffer to this buffer .
1835	Polls the response .
1836	Maps the loss report to a mapped byte buffer .
1837	Returns a snapshot of the current state of the stream .
1838	Creates a default header .
1839	Sets the key buffer .
1840	Adds a label buffer to the counter message .
1841	Connects to the server .
1842	Try to connect to the server .
1843	Sends a close request to the client .
1844	Sends a start recording request to the client .
1845	Sends a stop recording request to the server .
1846	Adds a replay request to the message .
1847	Stops a replay request .
1848	List recordings request .
1849	Sends a list of recordings for a URI .
1850	List a recording .
1851	Extend a recording .
1852	Gets the recording position .
1853	Gets the stop position .
1854	List recording subscriptions .
1855	Returns true if the given udp channel matches this tag .
1856	Returns the destination address for the given channel uri .
1857	Returns a human readable description of this channel .
1858	Adds a destination to the list of image connections .
1859	Inserts a new packet into the log .
1860	Finds a control toggle counter .
1861	Adds a parameter to the request .
1862	Returns the channel tag .
1863	Returns the entity tag .
1864	Adds a session id to a channel .
1865	Returns the tag value for the given parameter value .
1866	Appends padding to the end of the log .
1867	Updates the publisher limit .
1868	Allocate a new UnsafeBufferPosition for the given counters .
1869	Returns the label name for the given type id .
1870	Scan for available bytes in the given buffer .
1871	Clears the internal state of this builder .
1872	Validates that the parameters are valid .
1873	Sets the URI prefix .
1874	Sets the media context .
1875	Sets the control mode .
1876	Sets the term length .
1877	Sets the term offset .
1878	Sets the linger value .
1879	Opens the datagram channel .
1880	Closes the connection .
1881	Returns true if the given buffer and length are valid .
1882	Receives a datagram from the server .
1883	Process a NAK event .
1884	Process timeouts .
1885	Returns a human - readable string representation of the given status .
1886	Allocate a new AtomicCounter .
1887	Resets this vector to a new buffer .
1888	Validates that this vector is valid .
1889	Validates the given vectors and computes the length of the message .
1890	Returns the length of the term window .
1891	Validate socket buffer lengths .
1892	Validates that the given pageSize is a valid page size .
1893	Validates that the given session id range is valid .
1894	Validates that the publicationUnblockTimeoutNs and clientLivenessTimeoutNs are valid .
1895	Sets the error code .
1896	Resets the state to the initial state .
1897	Encodes the given array of cluster members into a string .
1898	Adds the publication information for each member to the aeron .
1899	Closes all publications of the cluster members .
1900	Returns true if there is at least one active quorum in the cluster .
1901	Returns the quorum position of the cluster .
1902	Resets the log position of all members to the given value .
1903	Returns true if any of the members in the cluster have voters at the given position .
1904	Returns true if the given set of members has a won vote on the given term .
1905	Checks if a candidate term has majority vote .
1906	Determines the member with the given id and endpoints .
1907	Validate that the clusterMember and memberEndpoints are the same .
1908	Checks if two cluster members have the same endpoints .
1909	Checks if the given candidate is an unanimous candidate .
1910	Returns true if the given candidate is a quorum candidate .
1911	Checks if the given list of members is not duplicate .
1912	Returns the index of the member with the given id .
1913	Removes the given member from the given array .
1914	Returns the highest member id for the given cluster members .
1915	Maps an existing CncFile to a MappedByteBuffer .
1916	Checks if a driver is active .
1917	Checks if the driver is active .
1918	Checks if the driver is active .
1919	Request a driver termination .
1920	Returns the length of the frame in bytes in the given buffer .
1921	Sets the length of a frame in the given buffer .
1922	Sets the type of a frame .
1923	Writes the frame flags to the given buffer .
1924	Writes the offset of the frame to the given buffer .
1925	Writes the given term id to the given buffer .
1926	Finds the counter id for a given recording id .
1927	Finds the counter id for a given session .
1928	Returns the recording id for the given counter id .
1929	Checks if a recording is active .
1930	Adds application specific feedback to the status message .
1931	Reloads the entries from the file .
1932	Finds the last term entry .
1933	Creates a new recovery plan .
1934	Creates a new recovery plan from the given list of snapshots .
1935	Appends a term to the log .
1936	Appends a snapshot entry .
1937	Commits the given log position to the given leadership term .
1938	Tombstone entry .
1939	Closes the connection .
1940	Offer a set of vectors to the publication .
1941	Unblock the given term .
1942	Returns the channel name .
1943	Sets the channel name .
1944	Checks that the given term length is valid .
1945	Checks that the given page size is a valid page size .
1946	CAS the current log active term count .
1947	Compute the position of an active term .
1948	Compute the log length .
1949	Store the default frame header in the metadata buffer .
1950	Applies the default log header to the given metadata buffer .
1951	Rotates the log .
1952	Initialises the tail with the given term id .
1953	Returns the offset of the term .
1954	Get the tail value from the metadata buffer .
1955	CAS raw tail .
1956	Sets the token buffer .
1957	Allocates a new Counter .
1958	Finds the id of the next record in the counters meta data .
1959	Returns true if the given counter has a replay state .
1960	Returns the recording id for the given active counter .
1961	Convert a short flags to a char array .
1962	Set the channel name .
1963	Offer data to the cluster .
1964	Wrap the given buffer .
1965	Commits the current state of the frame .
1966	Aborts the frame .
1967	Main entry point for the driver .
1968	Close all resources .
1969	Returns the position of this term .
1970	Allocate a new counter .
1971	Returns the counter id for the given service id .
1972	Returns a snapshot of the current stream backlog .
1973	Allocate a new AtomicCounter .
1974	Closes the connection .
1975	Dispatches a recording descriptor to the given consumer .
1976	Adds a new slab to the list of slabs .
1977	Sets the byte at the given index to the given value .
1978	Adds the given statistics to this page .
1979	Calculates the row ranges for the given filter .
1980	Convert an array type .
1981	Convert a struct type to a group type .
1982	Annotate a message with the given position .
1983	Ends the previous bit packed run .
1984	Read a single value from the protocol .
1985	Read all the footers from the given file .
1986	Read the footers from a summary file .
1987	Reads metadata from the specified input file .
1988	Read the next row group .
1989	Reads the next row group .
1990	Reads a dictionary from the given column chunk metadata .
1991	Adds a new writer to the memory manager .
1992	Removes a writer from the list of writers .
1993	Updates the allocation .
1994	Registers a new scale callback .
1995	Start writing the magic .
1996	Starts a new block .
1997	Start a new column .
1998	Writes a dictionary page .
1999	Writes a data page .
2000	Write a column chunk .
2001	Ends the current block .
2002	Copies bytes from the given input stream to the given output stream .
2003	End the Parquet file .
2004	Merges metadata from a list of files .
2005	Merge a list of metadata files and write the merged metadata file .
2006	Writes the metadata file to the given output path .
2007	Merge the given metadata into the given metadata .
2008	Reads a value from the underlying byte array .
2009	Returns true if the given schema is a null schema .
2010	Returns the first non - null object in the given array .
2011	Make a value from a string .
2012	Creates a thrift meta data object from the given extra meta data .
2013	Returns the metadata for the given thrift class .
2014	Returns the extra meta data for this thrift object .
2015	Writes a null value .
2016	Writes a page to the Parquet file .
2017	Initializes the delta data structure from a page of data .
2018	Allocates the values buffer .
2019	Checks that the expected type is an enum .
2020	Calculates the bit widths for the delta block buffer .
2021	Throws the given exception if it is an instance of the given exception class .
2022	Gets the statistics based on the type .
2023	Returns a builder for reading the given primitive type .
2024	Merges the given statistics with this one .
2025	Returns the non - null schema for the given schema .
2026	Creates a new TaskAttemptContext .
2027	Invokes the given method on the given object .
2028	Generates a string representation of the members .
2029	Merges the fields of this group into the given group .
2030	Initializes the counter from the given reporter .
2031	Gets the filter .
2032	Returns a list of all the footers in the given list of statuses .
2033	Generates a list of ParquetInputSplits for the given row group blocks .
2034	Writes the given record to the message writer .
2035	Validates the mapping of the given descriptor against the given parquet schema .
2036	Serialize a proto descriptor .
2037	Creates a new DirectCodecFactory .
2038	Amend missing required fields .
2039	Check the type of a set .
2040	Read the metadata from the given input stream .
2041	Closes the record writer .
2042	Sets the schema for the group .
2043	Adds a type to the map .
2044	Checks that the given column is of the given primitive type .
2045	Casts a long value to an int .
2046	Creates a schema mapping from an arrow schema .
2047	Creates a schema mapping from a parquet schema .
2048	Maps an arrow schema to a parquet schema .
2049	Writes the header of a data page .
2050	Skips until the record filter is matched .
2051	Writes the object to the configuration as base64 .
2052	Removes the entry for the given key from the cache .
2053	Adds a new entry to the cache .
2054	Returns the current value for the given key .
2055	Writes the given value to the given schema .
2056	Write value without conversion .
2057	Sets the glob pattern .
2058	Output content to a file .
2059	Opens an input stream for the given file .
2060	Returns a new unbound record filter for the specified column .
2061	Convert a StructType to a Thrift MessageType .
2062	Creates a list wrapper for the given nested type .
2063	Returns a group type that represents a list of elements .
2064	Returns the merged key - value metadata .
2065	Returns a new ParquetInputSplit for the given input split .
2066	Returns a map of fields by name .
2067	Resolve schema access .
2068	Returns a list of input files .
2069	Checks that there are at least one parquet file to merge .
2070	Gets the input files from the given directory .
2071	Creates a filter that filters rows up to the specified page size .
2072	Returns a consumer that allows to consume a list of the specified type .
2073	Initialize the mapred work .
2074	Merge a tuple into a summary data .
2075	Sums up a tuple .
2076	Reads a struct from the stream .
2077	Reads a map entry .
2078	Writes an integer to the output stream .
2079	Reads a little - endian integer from the given byte buffer at the given offset .
2080	Sets the Avro schema .
2081	Create a topic if it doesn t already exist .
2082	Duplicate pipeline stage beans .
2083	Create a stage bean .
2084	Creates a list of interceptor beans .
2085	Creates an interceptor bean .
2086	Parses an Avro schema .
2087	Convert milliseconds to days .
2088	Get the avro schema from the header .
2089	Upgrade v1 to v2 .
2090	Returns the length of the stream .
2091	Copies a list of blobstore resources to the staging directory .
2092	Resets the statement to its initial state .
2093	Report the health of a thread .
2094	Register a new ThreadHealthReportGauge for the given thread .
2095	Stores the new configurations for the control hub .
2096	Attempts to authenticate the user using the given web credential .
2097	Attempt to upgrade the pipeline configuration if necessary .
2098	Upgrade the configuration if necessary .
2099	Upgrade the given stage configuration if necessary .
2100	Upgrades the services if necessary .
2101	Upgrade the given stage if necessary .
2102	Returns the list of fields to be null .
2103	Returns true if the given name is a system class .
2104	Adds the specified element to the end of the list .
2105	Adds the specified element to the list and returns the evicted element .
2106	Returns the value for the given key or the default value if the key does not exist .
2107	Adds the reported errors to the list of stages output .
2108	Returns the descriptor for the given message type .
2109	Get all file descriptors from a FileDescriptorSet .
2110	Populates the default values and extensions .
2111	Returns the descriptor for the given message type .
2112	Converts a protobuf message to an SDC field .
2113	Convert an SDC field to a protobuf message .
2114	Convert an SDC field to a protobuf message .
2115	upgrade to jersey config bean .
2116	Check the connection to the Kudu master .
2117	Converts a Kudu Type to a Field . Type .
2118	Creates a Field from a RowResult .
2119	Intercepts a list of records .
2120	Gets the text .
2121	Adds missing configurations to the given stage .
2122	Parses the response and returns the record .
2123	Adds the response headers to the record .
2124	Write the response header to the record .
2125	Write response header to record header .
2126	Saves the metadata .
2127	Configures the client .
2128	Parse headers only .
2129	Increment the source offset based on the pagination mode .
2130	Parse a paginated result record .
2131	Add response headers .
2132	Resolve headers .
2133	Process the response .
2134	Checks if a property is defined in the configuration .
2135	Convert a DataParserException to a DataParserException .
2136	Convert a DataGeneratorException to a DataGeneratorException .
2137	Get credentials from the credentials file .
2138	Preview with override .
2139	Copy the contents of the buffer to the buffer .
2140	Removes duplicates from a list of packages .
2141	Empty the current and long - lived writers .
2142	Find the next main line in the given chunk .
2143	Resolve a chunk .
2144	Closes the current connection .
2145	Escapes a quoted string .
2146	Returns the flow control settings .
2147	Returns the channel provider .
2148	Puts a batch of entries into the data channel .
2149	Compiles the given expression into a Grok pattern .
2150	Digest a Grok expression .
2151	Adds a dictionary from an input stream .
2152	Adds a dictionary from a reader .
2153	Stops the aggregator .
2154	Roll the data window to the new end time .
2155	Serialize an object to a JSON string .
2156	Deserializes a JSON string into a Java object .
2157	Deserializes a JSON object from a file .
2158	Checks if the record has a someField attribute . If not it throws an exception .
2159	Resolve an EL expression .
2160	Generate an inner field from a list of fields .
2161	Gets the table name from the metadata record .
2162	Gets the database name from the metadata record .
2163	Returns the internal field of the given metadata record .
2164	Gets the location field from the metadata record .
2165	Returns the custom location for the given metadata record .
2166	Returns the avro schema of the metadata record .
2167	Returns the data format for the given metadata record .
2168	Creates a new schema change metadata field .
2169	Validate the partition information .
2170	Generates a partition path for the given partitions .
2171	Serialize a schema to HDFS .
2172	Sets the parameters for the given operation .
2173	Returns the system configuration .
2174	Parse an RFC 3164 time string .
2175	Format the given template with the given arguments .
2176	Start the batch .
2177	Checks if the record contains the given solr fields .
2178	Returns a list of field names that are not in the autogeneratedFieldNamesMap .
2179	Send an error to the error record handler .
2180	Parse a jar name .
2181	Parses the given URL and returns the dependency .
2182	Returns the singleton instance of CouchbaseConnector .
2183	Closes the bucket and environment .
2184	Validates the config .
2185	Converts a string representation of an operation code to a label .
2186	Verify that the dependency exists .
2187	Reads the value for the given key from the specified path .
2188	Get the write operation from the header .
2189	Write document .
2190	Build a mutation for a subdoc .
2191	Creates the SQL string to alter a table .
2192	Configures the SASL authentication context .
2193	Take a batch of messages from the producer .
2194	Commits the message at the given offset .
2195	Notifies the consumer that an error has occurred .
2196	Injects the given stage configuration into the given stage .
2197	Returns the definitions for the specified stage .
2198	Returns the publisher definition for the given name .
2199	Format the column name .
2200	Formats the given value .
2201	Gets information about a pipeline .
2202	Creates a draft pipeline fragment .
2203	Get a list of pipelines .
2204	Imports a pipeline fragment .
2205	Returns the path to a temporary file .
2206	Returns the JDBC operation code for the given record .
2207	Returns the field path for the given column .
2208	Poll for an event from the queue .
2209	Get the runner from the queue .
2210	Returns the runner that was idle for the given time .
2211	Return a runner to the pipeline .
2212	Destroys the pipeline .
2213	Validates that the pipeline is not destroyed .
2214	Checks if a stream exists .
2215	Returns the last shard id for the given stream .
2216	Process a queue of records .
2217	Override handleSqlException to handle the SQL exception .
2218	Returns the column hash for the given record .
2219	Compares two files .
2220	Returns the PID of the process if possible .
2221	Validate and extract fields to hash .
2222	Returns the proxy user for the given user .
2223	Roll the stats .
2224	Creates a snapshot of the current stats .
2225	Ensures that the given path exists .
2226	Writes a batch of records to the database .
2227	Writes a batch of records to the database .
2228	Writes the records from the iterator to the cache .
2229	Generate a No More Data Event .
2230	Detects a new partition .
2231	Updates the record for HDFS .
2232	Process the given group and value .
2233	Checks if two stages have the same version .
2234	Main entry point for the Mesos driver .
2235	Configure auth and build client .
2236	Resolve headers .
2237	Get the HTTP method .
2238	Fill null types .
2239	Returns the null value of the field at the given path .
2240	Loads a schema from the registry .
2241	Registers a schema with the registry .
2242	Loads the schema from the registry .
2243	Gets the schema id from the given subject .
2244	Loads a schema from the registry .
2245	Writes a schema id to an output stream .
2246	Detects the schema id from the given data .
2247	Returns the default values for the given schema .
2248	Parses all records from the given payload .
2249	Logs information about the validation results .
2250	Get the bad records from the error sink .
2251	Initializes the schema generator .
2252	Returns the outward edge vertices for the given vertex .
2253	Returns the inward edge vertices for the given vertex .
2254	Serialize offset map .
2255	Deserializes an offset map from a JSON string .
2256	Queues a report for execution .
2257	Gets a report from the server .
2258	Checks if the check point file exists on the hdfs path .
2259	Write offsets to main offset file .
2260	Deletes the given blob from the storage .
2261	Handles a blob error .
2262	Handles the archiving of a blob .
2263	Returns a LiveFileReader for reading the current file .
2264	Releases the reader .
2265	Sets the DPM API base URL .
2266	Add a default header .
2267	Parse a date from a string .
2268	Escapes the given string .
2269	Get the client .
2270	Initializes the GPUdb connection .
2271	Get the type of the table .
2272	Create bulk inserter .
2273	Creates a new EventBuilder .
2274	Build a schema from a map of fields and levels .
2275	Converts an Oracle operation code to an SDC operation code .
2276	Adds jars to the job .
2277	Add jars to the job .
2278	Check if the field name is in the order by list .
2279	Checks if the given condition expressions match the field name .
2280	Gets the offset lag for a given file offset string .
2281	This method is called before the main method is called .
2282	Gets the origin parallelism .
2283	Runs a BigQuery query .
2284	Converts a list of fields to a map of fields .
2285	Returns the description of the table .
2286	Validates that the table accepts inserts .
2287	Returns the type of the field .
2288	Checks if the type of the field is nullable .
2289	Get the schema for a specific table
2290	Returns the column properties for the given table .
2291	Returns the class for the given type name .
2292	Initializes the aerospike bean .
2293	Returns the topic for the given record .
2294	Upgrade from v5 to v6 .
2295	Returns an input stream for reading from the file .
2296	Returns an OutputStream for writing to the file .
2297	Checks if the file exists .
2298	Parse a permission string .
2299	Validates that all services are available .
2300	Creates a new simple aggregator .
2301	Returns the unit for the given aggregator type .
2302	Creates an AggregatorData object .
2303	Creates a new group by aggregator .
2304	Starts the new data window .
2305	Stops the aggregator .
2306	Roll the data window to the new end time .
2307	Acquires the login manager for the given login type .
2308	Release the LoginManager .
2309	Converts a glob to a regular expression .
2310	Lists objects in lexicographically .
2311	Stops the pipeline .
2312	Checks if any active runners are idle and if so generates an empty batch for them .
2313	Creates a failure snapshot for the pipeline .
2314	Convert a Record to a BoundStatement .
2315	Sets the configuration to the new configuration .
2316	Generates a KuduLookupKey from a record .
2317	Checks if the partitioning should be turned off or on .
2318	Reads a line from the reader and appends it to the StringBuilder .
2319	Roll the usage timer down .
2320	Enable DPM .
2321	Disables the DPM for the given user .
2322	Normalize the DPM base URL .
2323	Retrieve user token .
2324	Logs out the user .
2325	Updates the token file .
2326	Update the dpm . properties file
2327	Returns the schema field for the given field .
2328	Returns the schema for the given field .
2329	Gets the decimal scale or precision .
2330	Returns the default value for the given schema .
2331	Initializes the metrics if necessary .
2332	Compares two files .
2333	Returns the index of the group with the given name .
2334	Returns a list of group names .
2335	Returns true if the character at pos is an escaped character .
2336	Returns true if the character at the given position is a slash escaped character .
2337	Returns true if the specified position is inside a character class .
2338	Count the number of open parentheses .
2339	Extract group information from a named pattern .
2340	Replaces all occurrences of the given pattern with the given replacement .
2341	Handles a GET request .
2342	Refresh the schema for the given schema and table
2343	Returns true if the given entry is expired .
2344	Returns the offset of the live file .
2345	Fast forward .
2346	Creates an empty envelope for detached stage configuration .
2347	Convert a string to an Appropriate number .
2348	Parses a single part .
2349	Parses the values .
2350	Looks up the primary keys for the table .
2351	Create custom field mappings .
2352	Returns the SQL type name for the given field type .
2353	Returns the table name .
2354	Sets the primary keys in the statement .
2355	Handle an SQL exception .
2356	Execute the pipeline .
2357	Prepare the batch context .
2358	Finishes the given batch context .
2359	Flattens the entire record .
2360	Creates a new detached stage runtime .
2361	Checks to see if the record has the exception detail message .
2362	Returns a map of columns to parameters .
2363	Returns the condition for the partition column .
2364	Validates that the given offset format is valid .
2365	Returns the list of generator definitions for the given list of generators .
2366	Returns an array of non - empty arguments .
2367	Returns the operation for the given operation code .
2368	Convert bytes to display format .
2369	Scan for a live file .
2370	Returns the number of pending files .
2371	Returns true if the given name is whitelisted .
2372	Returns true if the expected versions are the same .
2373	Main entry point for the bootstrap cluster .
2374	Propagate runtime configuration .
2375	Validates the report description .
2376	Create a JdbcRecordWriter .
2377	Create a JdbcRecordWriter .
2378	Upgrade from V1 to V2 .
2379	Extracts the named groups from the raw text .
2380	Sends a consumer commit message to the consumer .
2381	Creates a new instance of EmbeddedSDC .
2382	Sets the fields in the record .
2383	Gets the remote pipelines with changes .
2384	Creates a new remote data collector result from the given future .
2385	Creates a gauge .
2386	Gets the columns to parameters .
2387	Generate header attributes .
2388	Validates the record .
2389	Delete old temporary parquet files .
2390	Get an input stream from an Avro record .
2391	Returns a file reader for the given input stream .
2392	Write a parquet file from an input file .
2393	Checks that the field is an input encrypt field .
2394	Checks that the given field is an input encrypt field .
2395	Check that the field type is BYTE_ARRAY .
2396	Checks that the field is a byte array .
2397	Prepare the field to be encrypted .
2398	Sets the parent pattern .
2399	Appends the given replacement to the given StringBuffer .
2400	Returns a map of all named groups .
2401	Replaces all properties in this pattern with the given replacement string .
2402	Ensure that the avroSchema property exists .
2403	Returns the value of a global variable .
2404	Creates the start event .
2405	Creates a stop event .
2406	Fix offset .
2407	Extract the value of a field as a runtime type .
2408	Execute alter table add partition query .
2409	Execute alter table set table properties query .
2410	Describe a database .
2411	Executes the given query .
2412	Executes the given query and returns the result .
2413	Execute a batch of pipelines .
2414	Performs the given consumer for each pipeline in the pipeline .
2415	Gets the offset commit trigger .
2416	Checks if the pipeline has an error to stop .
2417	Performs the given consumer on the given pipeline .
2418	Returns the row id for the given record .
2419	Returns the value of the given field .
2420	Sets a document fragment in a record .
2421	Sets the document in the given record .
2422	Sets the N1QL row in the record .
2423	Handle the whole file data format .
2424	Returns true if a transaction with the given gtid and seqNo exists .
2425	Helper method that sets the current thread s context class loader .
2426	Sets the state creator for the stage .
2427	Logout from Kerberos .
2428	Sets the exceptions .
2429	Replace variables in the given path .
2430	Ensures that the given path is allowed to access the Data Collector internal directories .
2431	Main entry point for the emr batch .
2432	Returns the directory path for the given record .
2433	Renames the given path to the final name .
2434	Returns true if the record should be rolled .
2435	Returns true if the pattern matches the given string .
2436	Returns the offsets for this file .
2437	Returns the remaining wait time in milliseconds .
2438	Get the offsets lag .
2439	Creates and initializes a new instance of the given interface .
2440	Create a new stage library delegate .
2441	Creates a new instance of the given delegation definition .
2442	Gets the value of a metric .
2443	Find the end of the header .
2444	Returns the size of the body .
2445	Save a buffer to a temporary file .
2446	Creates an SSLServerSocketFactory from the specified key and trust store classpath path .
2447	Returns the mime type for the given file .
2448	Handle the request .
2449	Stops the server .
2450	Add mappings .
2451	Sends the response to the given output stream .
2452	Send the body of the request to the output stream .
2453	Creates a new fixed length response .
2454	Use gzip when accepted .
2455	Sets a new cookie with the specified name and value .
2456	Unload all cookies from the queue .
2457	Base64 decodes a cookie value .
2458	Base64 encodes a cookie value .
2459	Sets the table name .
2460	Returns the name of the given principal .
2461	Insert a Spring session repository filter .
2462	Resolve the principal name for the given session .
2463	Returns the session associated with the given id .
2464	Returns the name of the mail session .
2465	Returns the canonical names of the parameter types of the given view method .
2466	Registers the given synchronization with the registry .
2467	This method is called before the transaction has been completed .
2468	Get the current transaction .
2469	Add a system dependency to the deployment .
2470	Returns true if the given persistence unit name matches the cache region prefix .
2471	Returns the list of services that depend on the server configuration .
2472	Decrement the read lock count .
2473	Increments the read lock count .
2474	Adds a service to this bean deployment archive .
2475	Handle restoration calculation .
2476	Add the search dependency if the deployment is a JPA deployment .
2477	Make the top - level beans visible from the static modules .
2478	Create JBoss agnostic meta data for a POJO webservice deployment .
2479	Set config name and config file .
2480	Convert a list of security constraints to a list of JSESecurityMetaData .
2481	Gets the servlet url patterns mappings .
2482	Gets the servlet class mappings for a list of POJO endpoints .
2483	Resolve the binding .
2484	Returns the list of available connectors .
2485	Parses a core environment element .
2486	Parses the process id environment element .
2487	Returns the path address of the operation .
2488	Sets the operation address .
2489	Gets the attribute value .
2490	Returns true if the include - defaults option is set .
2491	Creates a composite operation .
2492	Create an add operation .
2493	Create an add operation .
2494	Creates a read - attribute operation .
2495	Creates a write - attribute operation .
2496	Creates an undefine - attribute operation .
2497	Returns the value of the entry .
2498	Add a URL context factory for the given scheme .
2499	Removes a URL context factory from the registry .
2500	Load all providers from the given class loader .
2501	Modify the deployment .
2502	Configure the endpoints .
2503	Modifies the context root .
2504	Gets the transport class name .
2505	Sets the run as identity .
2506	Pop the RunAs identity from the given SecurityContext .
2507	Process the management .
2508	Injects the given property on the given object .
2509	Returns true if the class type and property type match .
2510	Finds the method with the given name and type .
2511	Finds the field with the given name and type .
2512	Initializes the options .
2513	Derives the useful information from the request .
2514	Performs a standalone collect .
2515	Collect the Jdr report .
2516	Register a new resource adapter deployment .
2517	Unregisters a resource adapter deployment .
2518	Register the transformers .
2519	Writes the parameters to the output stream .
2520	Reads an exception from the given input stream .
2521	Returns the owner of the lock .
2522	Releases the lock .
2523	Add a log .
2524	Adds the CDI flag to the WarMetaData .
2525	Returns the component view .
2526	Invokes the endpoint .
2527	Gets the component view method .
2528	Returns true if the sei method matches the view method .
2529	Creates the management statistics resource .
2530	Returns the EJBSecurityMetaData for the specified endpoint .
2531	Returns the new security domain . If the old domain is null the new domain is returned .
2532	Ensure that two security domains are the same .
2533	Sets the IDL name for this analysis .
2534	Returns the absolute name of this entry .
2535	Creates a new JndiName from the given name .
2536	Processes the IronJacamar deployment .
2537	Handle the request .
2538	Returns true if the current thread is in a transaction .
2539	Returns the transaction synchronization registry .
2540	Get the connection factory .
2541	Gets the last component of a name .
2542	Returns true if the name is empty .
2543	Creates a NameNotFoundException with the given name and context name .
2544	Creates a new NamingException with the specified message and cause .
2545	Creates a new NamingException with the given message and the given name .
2546	Creates a CannotProceedException .
2547	Returns an enumeration over the elements in the given collection .
2548	Rebind a value to a name .
2549	Returns the activeMQComponentControl for the given operation .
2550	5 . 0
2551	Creates a new instance of this component .
2552	Returns the spring virtual file that should be used for the deployment .
2553	Resolve the runtime name .
2554	Creates a builder for a listener resource .
2555	Returns a primitive analysis for the given class .
2556	Sets the invocation count to 0 and blocks until the count reaches 0 .
2557	Gets the url patterns .
2558	Gets the servlets metadata .
2559	Gets the servlet mappings .
2560	Gets the security constraints .
2561	Gets the login config .
2562	Returns the list of context parameters .
2563	Gets the WebResourceCollections meta data .
2564	Gets the servlet init params .
2565	Create a new security constraint .
2566	Creates a new WebResourceCollectionMetaData object .
2567	Creates a new JBossServletMetaData .
2568	Creates a new servlet mapping metadata .
2569	New auth constraint meta data .
2570	Creates a new UserDataConstraintMetaData object .
2571	Creates a new param value meta data object .
2572	Creates a new ParamValueMetaData object .
2573	Register the SFSB interceptors .
2574	Process the injection targets .
2575	Stops the container .
2576	Returns the name of the jndi .
2577	Resolve the attribute .
2578	Returns the pattern type for the given URL pattern .
2579	Returns true if the given server and resource adapter are targets of a pooled connection factory .
2580	Returns true if the given resource adapter targets an external pooled connection factory .
2581	Returns the activeMQ server name .
2582	Returns the default persistence unit name .
2583	This method is called when the application is started .
2584	Unregisters this Activity from the SuspendController .
2585	Suspends the server activity .
2586	Resume the server .
2587	Called when an invocation is complete .
2588	Called when a new transaction is created .
2589	Override this method in order to bind the resource into the naming store .
2590	Unbinds the resource from the naming store .
2591	Returns the capability service name for the given capability base name .
2592	Create the list of resource roots for the deployment .
2593	Returns all the module class loaders for the given deployment unit .
2594	Checks if the given persistence unit metadata needs a class file transformer .
2595	Allow two - phase bootstrap .
2596	Returns true if JPA allows the default data source to be used .
2597	Returns true if the target entity manager should skip mixed synchronization type check .
2598	Returns an ORB instance for the given server port and environment .
2599	Initializes the ORB for the given applet .
2600	Initialize the method handles .
2601	Sets the active naming store .
2602	Validate default values .
2603	Checks the type of the parameter .
2604	Looks for a DefaultValue annotation .
2605	Validate the base type .
2606	Returns an array of all deferred entity managers .
2607	Returns a string representation of the given transaction status code .
2608	Add cache dependencies .
2609	Extract dialects from sql .
2610	Attempt to identify the database dialect .
2611	Identify the dialect name .
2612	Checks that the database is ready to be used .
2613	Convert a string to a scheduler date .
2614	Sets the value of the nodeName parameter .
2615	Marks the deployment unit as marked .
2616	Reads the parameters from the input stream .
2617	Writes the given object to the output stream .
2618	Writes an exception to the output stream .
2619	Searches the class hierarchy starting from the given index starting from the given index .
2620	Begin SFSB creation .
2621	End the SFSB creation .
2622	Gets the current SFSB call stack invocation .
2623	Pushes a new call to the SFSB .
2624	Pop a call from the stack .
2625	Get the current call from the stack .
2626	Add dependencies to the deployment .
2627	Processes the XML managed beans .
2628	Processes the phase listeners .
2629	Returns the IDL name for the given class .
2630	Inserts a primitive into an Any object .
2631	Convert a Java name to an IDL name .
2632	Returns true if the given string is a reserved IDL keyword .
2633	Returns the signature of a class .
2634	Returns the signature of the given method .
2635	Returns the IDL name for a primitive type .
2636	Returns the BatchPermission for the given name .
2637	Get or create a transaction scoped entity manager .
2638	Associates the specified value with the specified key in this map .
2639	Converts a security role definition to a ModelNode .
2640	Returns the most recent entity version of the given timer .
2641	Returns the timers for the given object id .
2642	Returns the directory name for the given object id .
2643	Adds a new listener to this scope .
2644	Remove a listener from this scope .
2645	Fire an event .
2646	Close an AutoCloseable .
2647	Adds a private credential to the subject .
2648	Get an object instance .
2649	Add a CMTTxManagementInterceptor to the given view .
2650	Substitutes from string to string .
2651	Creates the InVM transport configuration .
2652	Add the EAR prefix if the configured name is a relative resource adapter name .
2653	Gets the root deployment unit .
2654	Returns the service name for this view .
2655	Creates a new view configuration .
2656	Create a view binding injection source .
2657	Returns the view interceptors for the given method .
2658	Add a view interceptor .
2659	Add a view interceptor .
2660	Gets the client interceptors for the given method .
2661	Add client interceptors .
2662	Add a client interceptor .
2663	Put private data .
2664	Throws an exception for an unexpected element .
2665	Gets the JAXWS Ejbs .
2666	Gets the list of POJOEndpoints from the JAX - WS deployment .
2667	Gets the endpoint name .
2668	Gets the endpoint class name .
2669	Returns the servlet with the given name or null if not found .
2670	Gets the required attachment .
2671	Gets the optional attachment .
2672	Gets the JBossWebMetaData .
2673	Gets the JBossWebserviceMetaDataPortComponent .
2674	Gets the webservice metadata EJBEndpoint .
2675	Gets the context root .
2676	Returns the class for the given name .
2677	Returns the URL of the named resource .
2678	Returns a collection of URLs for the named resource .
2679	Returns a list of all resources under the specified path .
2680	Pop the stack from the non - transactional stack .
2681	Gets the entity manager for the given pu scoped name .
2682	Register a clean up listener for the given JMSContext instance .
2683	Processes the WAR deployment .
2684	Updates the server configuration .
2685	Checks if all fields of a class are public .
2686	Creates a new HTTP endpoint .
2687	Creates a new deployment model for the given deployment unit .
2688	Returns true if the deployment is a javax . xml . deployment . JAXRS deployment .
2689	Sets the next timeout for this timer .
2690	Sets the state of the timer .
2691	Merge the deployment data .
2692	Add the JBoss Module dependencies to the deployment .
2693	Add a dependency for the remote transaction service .
2694	Returns all container interceptors .
2695	Determine if the given method is a method level .
2696	Checks that only one of the given elements is seen .
2697	Returns the type for the given class name .
2698	Returns the component type at the given index .
2699	Returns a resource definition for the Elytron keystore .
2700	Returns the resource definition for the key managers .
2701	Returns the resource definition for the trust managers .
2702	Parse a name into a CNCompoundName .
2703	Converts a string into a vector of components .
2704	Parse a name component from a string .
2705	Deactivates the IRObject .
2706	Convert a CORBA servant to a reference .
2707	Authenticate with the given username and password .
2708	Returns true if the type of the given class is matched .
2709	Lookup a binding by name .
2710	Unbinds the binding with the given name .
2711	Instantiates a bean .
2712	Configure the bean .
2713	Dispatch a lifecycle joinpoint .
2714	Returns the current selector .
2715	Converts a bean name to a JBoss bean name .
2716	Returns a service name for the given class and state .
2717	Returns the EEModuleClassDescription for the given class name .
2718	Processes the annotations on the deployment unit .
2719	This method is called after the parsing of the persistence unit .
2720	Validates the given descriptor .
2721	Creates the web application descriptor .
2722	Creates the web . xml descriptor .
2723	Gets the auth method .
2724	Add the JBoss service descriptor to the deployment .
2725	Handle a stateless session bean .
2726	Creates a stub class for the given class .
2727	Returns an anonymous object id for the given long .
2728	Returns a copy of the persistence providers .
2729	Clear the cache of persistence providers for the given deployment class loaders .
2730	Adds a persistence provider to the list of persistence providers for the given deployment class loaders .
2731	Find the parent module class loader .
2732	Add the JBossServiceXmlDescriptor to the deployment .
2733	Add the persistence unit service .
2734	Sets the annotation indexes for all persistence units in the deployment .
2735	Get the persistence provider adaptor .
2736	Save per deployment shared persistence provider adaptor .
2737	Looks up the persistence provider for the given persistence unit .
2738	Returns the annotations for the given URIs .
2739	Create a JBoss agnostic metadata for an EJB webservice deployment .
2740	Build the EJB bean meta data .
2741	Add a step to the model to refresh the participant .
2742	Returns the container analysis for the given class .
2743	Look up the done object for the given class .
2744	Creates a new work - in - progress analysis .
2745	Returns the IDL module name for this class .
2746	Returns the hexadecimal representation of the given integer .
2747	Returns the hexadecimal representation of the given long .
2748	Returns true if the method is an accessor method .
2749	Returns true if the method is a mutator method .
2750	Returns true if the given method has non - app exceptions .
2751	Returns the read name of an attribute .
2752	Returns the name of the attribute to write .
2753	Fixup overloaded operation names .
2754	Fixup case names .
2755	Escapes an IR name .
2756	Parses an XTS environment element .
2757	Parse the default context propagation element .
2758	Process attributes .
2759	Load provider module by name .
2760	Creates and returns the add operation .
2761	Add the EJB_API JAX_RPC_API EJB_NAMING_CLIENT EJB_IIOP_CLIENT EJB_SUBSYSTEM EJB_NAMING_CLIENT EJB_SUBSYSTEM EJB_API EJB_API EJB_SUBSYSTEM EJB_NAMING_CLIENT EJB_NAMING_CLIENT EJB_IIOP_CLIENT EJB_SUBSYSTEM
2762	Write an attribute .
2763	Returns the MethodIntf associated with the given InterceptorContext .
2764	Creates a remote session .
2765	Infer the destination name from the address .
2766	Registers a set of endpoint handlers for the given endpoint class .
2767	Returns the XML names for the given job .
2768	Initialize the job . xml files .
2769	Returns the URI of the request .
2770	Create a new context using the given URL and environment .
2771	Looks up an object by its name .
2772	Binds an object to the specified name .
2773	Unbinds the specified path from the context .
2774	Returns an enumeration of bindings for the specified name .
2775	Call destroy on the given naming context .
2776	Destroys a subcontext .
2777	Call bind_new_context to create a new context .
2778	Create a subcontext with the given name .
2779	Lookup a link by its name .
2780	Add a property to the environment .
2781	Removes the value of the specified property from the environment .
2782	Add transformation to the resource description .
2783	Parses a credential element .
2784	Remove a security domain .
2785	Look up the JNDI for the given context name .
2786	Create a ModularReference for the given type and factory class .
2787	Creates a ModularReference for the given class name and factory class .
2788	Create a ModularReference for the given type and address .
2789	Returns the IDLType corresponding to the given TypeCode .
2790	Wait for the given controller to become up .
2791	Compute the masked password .
2792	Initializes the security vault .
2793	Start the security vault session .
2794	Prints a display of the creation of an attribute .
2795	Display the vault configuration .
2796	Returns the vault configuration .
2797	Throws an exception if the given value is null .
2798	Returns the deployment service name for the specified resource adapter .
2799	Inserts the value into an Any object .
2800	Returns true if this permission implies the given permission .
2801	Returns the list of actions .
2802	Returns the log name .
2803	Send a state change notification .
2804	Returns the state to bind .
2805	Returns the value of the given type .
2806	Returns the context service name .
2807	Returns the set of all available interceptors .
2808	Add a new method interceptor .
2809	Adds a dependency to this component .
2810	Returns the list of component interceptors for the given method .
2811	Returns the round timeout interceptors for the given method .
2812	Add a timeout view interceptor .
2813	Add an AroundConstructInterceptor to the list of AroundConstructInterceptors .
2814	Add a post - construct interceptor .
2815	Add pre - destroy interceptor .
2816	Add pre - passivate interceptor .
2817	Add a post - activate interceptor .
2818	Sets the component create service factory .
2819	Remove JNDI aliases .
2820	Add the remote transport provider to the builder .
2821	Returns the service name of the component .
2822	Returns the context service name for the given module .
2823	Returns the bind info for the specified env entry .
2824	Returns the bind information for the given JNDI name .
2825	Returns a cache of the principal and domain information .
2826	Returns the value members .
2827	Returns the value members for the type code .
2828	Creates the root node of the Federation extension .
2829	Parses the configuration .
2830	Start the naming service .
2831	Adds the Weld integration .
2832	Returns the job operator service name .
2833	Add a component .
2834	Add a message destination .
2835	Get the components for the given view type and deployment root .
2836	Returns the set of components for the given component name .
2837	Returns the view descriptions for the given component name and view name .
2838	Resolve message destination .
2839	2 . 1 . 0
2840	Reject defined attribute with default value .
2841	Renames an attribute .
2842	Pop identity from the context state cache .
2843	Loads the ids for the main module .
2844	Checks that all versions are valid .
2845	Compute the slot for the given version .
2846	Returns the constant type code for the given class .
2847	Add a type code for a class .
2848	Creates a new package if it doesn t already exist .
2849	Add the interfaces of the given container analysis .
2850	Add the abstract base valuetypes .
2851	Adds a class to the list .
2852	Add an interface definition .
2853	Add a value to the value map .
2854	Add an exception definition .
2855	Gets the class level injection type .
2856	Checks if jts is enabled .
2857	Initializes the naming store .
2858	Closes the root context .
2859	Check if the given method type is allowed by the current invocation context .
2860	Checks if the current synchronization callback is available for the given method type .
2861	Get all component classes .
2862	Gets the waiting on transaction completion timers .
2863	Returns the extra parameters for the given set of keys .
2864	Returns the parameters from the configuration .
2865	Converts a type to a class .
2866	Converts the given value to the given class .
2867	Returns the types of the given values .
2868	Simple check .
2869	Returns the next binding .
2870	Returns true if there are more entries in the list .
2871	Maps a CosNaming . Binding into a javax . naming . Binding .
2872	Observes the health check procedure .
2873	Closes the health check .
2874	Returns a CORBA reference for the given locator .
2875	Returns the handle for the given locator .
2876	Returns the enum value of the given ModelNode .
2877	Skips the given amount of bytes from the given input stream .
2878	Checks that two elements are not already seen .
2879	Adds a new component to this module .
2880	Add a set of class loaders to the deployment .
2881	Unbind the component with the given name .
2882	Lookup a name in this context .
2883	Returns a list of NameClassPairs for the given name .
2884	Returns a list of bindings for the given name .
2885	Adds a new context handle factory .
2886	Saves the current setup context .
2887	Create the IO subsystem .
2888	Create the welcome - content handler .
2889	Get a bean from the pool .
2890	Calculates the operation analysis map .
2891	Collect metrics for the given resource .
2892	Prepare the deployment unit .
2893	Deploys the deployment .
2894	Publish the deployment to the target .
2895	Stops the web app .
2896	Starts the container .
2897	Registers an endpoint config .
2898	Call the timeout method if the timer is active .
2899	This method is called after the timeout processing has been completed .
2900	Get the declared methods of a class .
2901	Returns an array of all the fields of the specified class .
2902	Get a constructor for a class .
2903	Returns the named method in the specified class .
2904	Adds the Messaging ActiveMQ extension .
2905	Returns true if the parameter is allowed for the given resource type .
2906	Migrate the generic transport factory to the new one .
2907	Cancels the task .
2908	Runs the task if it has not been cancelled .
2909	Sets the type of this property .
2910	Returns true if the function can be executed without an index .
2911	Estimates the number of indexes in the given class .
2912	Find all classes in the given directory .
2913	Returns all classes that implement the given interface .
2914	Gets the generic multivalue type .
2915	Evaluate the record .
2916	Derives the field type .
2917	Updates the record .
2918	Finds a record in the cache .
2919	Gets the minimal set of nodes for a sharded query .
2920	Move flatteded equalities left .
2921	Adds additional ORDER BY projections to the query .
2922	Extracts all sub - queries from the query planning info .
2923	Check if the rid is from the list of clusters .
2924	Handle class with index for sort only .
2925	Returns true if the given class is a diamond hierarchy .
2926	Returns the direction of the ORDER BY clause .
2927	Returns true if the key condition requires multiple index lookups .
2928	Finds the best index for the given block and class .
2929	Build the index search descriptor for fulltext search .
2930	Returns the common factor of the given list of index search descriptors .
2931	Creates a new instance of the given strategy .
2932	Check if the user has permission to execute the specified operation .
2933	Check if a rule is defined .
2934	Returns a compact representation of the server configuration .
2935	Initializes the system database .
2936	Load local databases .
2937	Called when a member is removed from the cluster .
2938	Acquires a new lock manager .
2939	Assigns the lock manager to the cluster .
2940	Commits the current micro - transaction .
2941	Rollbacks the current micro - transaction .
2942	Updates the identity after a record has been committed .
2943	Updates the record cache after a rollback .
2944	Prepares for file creation or replacement .
2945	If atomic move is not possible fall back to regular move . Otherwise fall back to regular move .
2946	Returns a list of Patterns that are disjoint from this one .
2947	Execute only locally .
2948	Append a set of characters .
2949	Returns true if the socket is connected .
2950	Merges two byte buffers into one short .
2951	Split a short value into two buffers .
2952	Executes the command .
2953	Adds a single value to the index .
2954	Remove a value from the map .
2955	Executes the query .
2956	Executes the query and returns the first result .
2957	Creates the file .
2958	Checks that the requested region is valid .
2959	Replaces the content of this file with the given content file .
2960	Executes a command on the server .
2961	End the request .
2962	Adds the given host to the list of available servers .
2963	Sends a request to the remote server .
2964	Get the current database .
2965	Returns the connection for the given channel id .
2966	Kills the connection .
2967	Interrupt the channel with the given id .
2968	Disconnects a connection from the server .
2969	Pushes a distributed configuration to all clients .
2970	Swaps the value at the given index with the given new value .
2971	Closes the lock manager .
2972	Synchronizes the schema of all registered entities .
2973	Updates the metadata .
2974	Sets the current record to the last cluster .
2975	Reads the next character from the input stream .
2976	Execute the command .
2977	Sets the onAsyncReplicationError callback .
2978	Registers a new compression algorithm .
2979	Returns the limit of simultaneously open files .
2980	Returns true if this expression allows indexed function execution on the given target .
2981	Move this buffer to the specified position .
2982	Fill the buffer with the specified amount of bytes .
2983	Execute the statement until the return value is found .
2984	Executes all the steps in the stack .
2985	Evaluate the record .
2986	Execute the command .
2987	Loads the configuration from the database .
2988	Parses the given command request .
2989	Execute the command .
2990	Update the schedule that starts at the given pattern node .
2991	Adds an index definition to the composite key .
2992	Split the projection for an aggregate .
2993	Determine the type of the object .
2994	Returns the collate for the given document .
2995	Gets the string value .
2996	Advance the probe .
2997	Execute the DROP CLUSTER .
2998	Builds an ODocument from a JSON file .
2999	Compare the given password with the given hash .
3000	Creates a hash from the input string .
3001	Checks if the given algorithm is supported by PBKDF2 .
3002	Creates a new index .
3003	Returns all the vertices in the graph .
3004	Returns an iterable over the edges in the graph .
3005	Returns the partition key of this record replicated task .
3006	Returns the distributed timeout .
3007	Get the features .
3008	Checks if changes are filled up to the given page index .
3009	Parses the timeout .
3010	Parses the LOCK_STRATEGY keyword .
3011	Creates a new cluster .
3012	Free a cluster .
3013	Initializes the cache .
3014	Shuts down the profiler .
3015	Returns a new result set with the given entity and transformer .
3016	Grant access to the role .
3017	Revoke access to the role .
3018	Returns true if the result of this command is true .
3019	Binds the parameters to the filter .
3020	Reset the hash table .
3021	Returns the index of the specified item .
3022	Spreads the given value with the given seed .
3023	Create a new index .
3024	Drop all indexes related to this property .
3025	Returns the current index .
3026	Returns the linked class .
3027	Convert the indexes to a stream .
3028	Removes a listener from the list of listeners .
3029	Register a new database .
3030	Timeouts the request with the given id .
3031	Create a copy of this document .
3032	Try to merge this bag with another bag .
3033	Replaces the underlying OSBTreeRidBag with the given collection pointer .
3034	Transform the result .
3035	Executes the CREATE CLUSTER command .
3036	Closes all pooled databases .
3037	Called when a storage is unregistered .
3038	Returns the set of function names .
3039	Returns the names of the collates .
3040	Returns all available command names .
3041	Reads the field size and type from the current position .
3042	Write the response status code and reason .
3043	Write the response headers .
3044	Write the records to the response .
3045	Write record .
3046	Send the response to the client .
3047	Send a stream to the client .
3048	Opens a new database object .
3049	Closes the database .
3050	Listen for changes to a collection .
3051	Completes the operation of the current component .
3052	Pushes all counters for each component .
3053	Pushes the WriteCacheCountersHolder onto the snapshot .
3054	Pushes the storage counters to the counters holder .
3055	Pushes the WALCountersHolder to the snapshot .
3056	Pushes the counters for the given component .
3057	Stop the write cache flush timer .
3058	Stop the fuzzy checkpoint timer .
3059	Stop the full checkpoint timer .
3060	Stop the commit timer .
3061	Stop the WAL record timer .
3062	Stop the WAL flush timer .
3063	Parses the given string into an OStatement .
3064	Initializes the receive messages thread .
3065	Initializes the check - disconnect timer .
3066	Removes the record from the graph .
3067	Sets the value of a property .
3068	Removes a property from this vertex .
3069	Checks if the given class name is a subclass of the base class name .
3070	Wrap the given cursor .
3071	Define the vertex attribute strategy .
3072	Define the edge attribute strategy .
3073	Returns the list of newly created records for the given class .
3074	Returns the list of new record entries for the given cluster ids .
3075	Adds an entry to the index .
3076	Merges two sets .
3077	Executes the filter on the given record .
3078	Returns true if the function can be executed without an index .
3079	Prepare the keys .
3080	Writes a page to the buffer .
3081	Reads a page from the file .
3082	Truncate the page at the given index .
3083	Opens the WAL file .
3084	Check if replication is active .
3085	Returns the NEW_NODE_STRATEGIES value .
3086	Check if the execution mode is synchronous .
3087	Check if the read - your - writes setting is set .
3088	Get the server cluster map .
3089	Get the list of servers .
3090	Checks if a server is contained in all clusters .
3091	Checks if a server is contained in a cluster .
3092	Returns the list of master servers .
3093	Returns a list of all configured servers .
3094	Returns the set of clusters on the server .
3095	Returns the set of clusters owned by the specified node .
3096	Returns the owner of the cluster .
3097	Returns the owner of the cluster .
3098	Get the list of configured servers for the cluster .
3099	Returns the list of registered servers .
3100	Returns the set of data centers .
3101	Gets the data center write quorum .
3102	Check if the cluster is sharded .
3103	Returns the list of servers in the given data center .
3104	Returns the data center of the server .
3105	Get the global read quorum .
3106	Gets the write quorum .
3107	Returns the cluster configuration for the specified cluster .
3108	Returns the configuration for the given data center .
3109	Clear the initialization stack .
3110	Returns the index with the given name .
3111	Drops an index .
3112	Adds a new vertex to the graph .
3113	Adds an edge to the graph .
3114	Returns the vertex with the given id .
3115	Returns all vertices of the class iClassName .
3116	Returns all the edges of the class .
3117	Returns the edge with the given id .
3118	Reuse the given database .
3119	Shuts down the database .
3120	Returns the base type of this vertex .
3121	Gets the vertex type .
3122	Create a new vertex type .
3123	Drop a vertex type .
3124	Get the type of the edge .
3125	Create an edge type .
3126	Returns the element with the given id .
3127	Drop the index for the given key .
3128	Creates an index for the given key .
3129	Remove a background exception listener .
3130	Fire a background data flush exception event .
3131	Stop monitoring .
3132	Registers the mbean with the JMX server .
3133	Unregisters the MBean for the given storage name and id .
3134	Fetch write cache counters .
3135	Fetch the system counters .
3136	Fetch the counters for the given component .
3137	Compress the given JSON string .
3138	Returns the value of the named property .
3139	Detach the object from the database .
3140	Returns the version of the specified object .
3141	Executes the command .
3142	Sets the dirty state of the specified object .
3143	Unset the dirty flag for the given object .
3144	Returns the types of all index factories .
3145	Returns the set of index engines .
3146	Returns the list of missing nodes .
3147	Returns the list of conflict responses .
3148	Returns the group with the most coherent number of responses .
3149	Computes the quorum response .
3150	Returns the list of received responses .
3151	Returns the execution plan for the given statement .
3152	Returns true if the operator allows indexed function execution on the given target clause .
3153	Returns the library definition for the specified language .
3154	Release the database engine .
3155	Returns the next position in the map .
3156	Updates the size of the bag .
3157	Returns the value at the given index .
3158	Can be used by order by after filter .
3159	Returns the index of the first occurrence of iToFind within iFrom and iTo .
3160	Jump to the beginning of the text .
3161	Move the current position to the next character .
3162	Sets the fetch plan .
3163	Enqueues a repair record .
3164	Cancel a repair record .
3165	Enqueues a repair cluster .
3166	Returns the dependencies of the given pattern .
3167	Creates a new instance of the given class .
3168	Register entity classes .
3169	Registers the specified class as entity classes .
3170	Sets the class handler .
3171	Acquire a DB from the pool .
3172	Returns the number of available connections .
3173	Acquire a DB from the pool .
3174	Execute the SYNCHRONIZED EXECUTE .
3175	Lookup provider with orient class loader .
3176	Checks if the configured JVM maximum heap size and cache size are larger than the available physical memory size .
3177	Creates a new vertex from a JSON object .
3178	Convert a JSON edge to an OGraph edge .
3179	Convert an element to a JSON object .
3180	Convert an element to an object node .
3181	Execute an import .
3182	Returns the current status of the job .
3183	Gets the active data center map .
3184	Split the cipherTransform into the algorithm name .
3185	Create an OSymmetricKey from the given configuration .
3186	Creates an OSymmetricKey from a file .
3187	Creates a symmetric key from an input stream .
3188	Encrypts the given bytes using the specified transformation .
3189	Saves the symmetric key to an output stream .
3190	Saves the key to a keystore .
3191	Sets the child context .
3192	Adds the given object to the unique result .
3193	Gets the value as object or map .
3194	Authenticates a database .
3195	Returns the value of the specified map entry .
3196	Returns the current record .
3197	Reads the current record from the database .
3198	Get the transaction graph .
3199	Get no - tx graph .
3200	Sets up the pool .
3201	Returns the property with the specified name .
3202	Stop the current transaction .
3203	Parse a statement .
3204	Get the next token .
3205	Returns the token at the given index .
3206	Generate a new ParseException .
3207	Returns all the vertices in this record in the given direction .
3208	Removes this vertex from the graph .
3209	Adds an edge to the graph .
3210	Adds an edge to the graph .
3211	Returns the class name of the connection .
3212	Returns the connection class for the given field name .
3213	Processes the list of RIDs which were detected as broken during database export .
3214	Returns a map of all available console methods .
3215	Executes a remote task on the local node .
3216	Returns the number of nodes with the given status .
3217	Backup the output stream .
3218	Wait for next retry .
3219	Get the argument at the given position .
3220	Check if there are any parameters with the given names .
3221	Connect to the remote server .
3222	Retrieves a list of all available databases .
3223	Returns information about the server .
3224	Check if a database exists .
3225	Drop a database from the remote server .
3226	Freeze the database .
3227	Releases a database from the server .
3228	Returns the current cluster status .
3229	Execute the CREATE INDEX .
3230	Get the current active graph .
3231	Parse the RETRY keyword .
3232	Saves the record .
3233	Deletes a record from the database .
3234	Returns the authentication header .
3235	Authenticate with the given username and password .
3236	Check if the user is authorized to execute the specified resource .
3237	Wait for the server to shutdown .
3238	Adjusts the column of the beginning of the line .
3239	Sets the value of a bucket pointer .
3240	Returns the pointer to the bucket at the given offset .
3241	End an atomic operation .
3242	Acquires an exclusive lock and adds it to the atomic operation .
3243	Change the maximum amount of memory used by the disk cache .
3244	Listen for incoming connections .
3245	Read parameters from server configuration .
3246	Shuts down the log manager .
3247	Adds an item to the cache .
3248	Removes the entry for the given key .
3249	Acquires the entry for the given key .
3250	Returns the value associated with the given key .
3251	Clears the cache .
3252	Closes the entry for the given key .
3253	Empty the read buffers .
3254	Called after a task has been written .
3255	Called after an entry has been read .
3256	Put an entry in the read buffer .
3257	Returns the closest power of two of the given value .
3258	Called when a push request is received from the server .
3259	Convert the value of the specified key to an enum value .
3260	Convert all values of the underlying map to their corresponding enum values .
3261	Returns the serializer for the given type .
3262	Initialize the shutdown queue .
3263	Get the engine by name .
3264	Performs a simple optimization on the database .
3265	Executes the query .
3266	Adds a new state to the list .
3267	Authenticates the user with the given token .
3268	Creates the metadata .
3269	Try to acquire a read lock .
3270	Returns the current vertex in the given direction .
3271	Returns the id of this vertex .
3272	Sets the value of the property .
3273	Removes a property from the graph .
3274	Removes all entries from the tree .
3275	Deletes this bucket .
3276	Ends the importer .
3277	Creates a new vertex in the graph .
3278	Parses the strategy keyword .
3279	Reads a list of records from an embedded collection .
3280	Execute the command .
3281	Fix link .
3282	Fill the record with the data from the buffer .
3283	Sets the version of the record .
3284	Returns the record type of the record .
3285	Initializes the database instance .
3286	Print the stack trace of an exception .
3287	Execute the index query .
3288	Convert a link to a record .
3289	Registers a command with the server .
3290	Creates a new OServerUserConfiguration based on the given user document .
3291	Analyze the given condition and return the index search results .
3292	Creates an indexed property .
3293	Attaches the entity to the given object .
3294	Returns the index class .
3295	Returns the next value for the current sequence .
3296	Truncate the class .
3297	Adds a subclass to the list of subclasses .
3298	Adds the polymorphic cluster ids to the index .
3299	Adds a link to the stream .
3300	Releases the given pointer to the pool .
3301	Checks that there are no memory leaks .
3302	Removes all pointers from the pool .
3303	Convert a byte array to an int .
3304	Called when the node is opened .
3305	Installs the clusters of the given class .
3306	Dump the current server status .
3307	Returns the index of the first occurrence of the specified object in the specified array or - 1 if the array is empty .
3308	Returns the index of the first occurrence of the specified object in the specified array or - 1 if the array is empty .
3309	Returns the set of clusters which can be used to access the target .
3310	Handle the result of the search .
3311	Returns the temporary rid counter for this query .
3312	Reports a message to the profiler .
3313	Parses the FETCHPLAN keyword .
3314	Parse the NOCACHE keyword .
3315	Optimize the sort .
3316	Returns the current status of the job .
3317	Execute the command .
3318	Handle JVM error .
3319	Adds a new value to the specified index .
3320	Rolls back a given micro - transaction .
3321	Executes a command .
3322	Registers a new cluster .
3323	Set a property .
3324	Execute the CREATE CLASS .
3325	Execute the SYNCHRONIZE DATABASE command .
3326	Deletes a record from the database .
3327	Callback for record hooks .
3328	Deletes the record from the database .
3329	Counts the number of instances of the given view .
3330	Counts the number of instances of the specified class .
3331	Activate this document on the current thread .
3332	Register a new storage encryption algorithm .
3333	Returns the relative position of the given position .
3334	Parse an optional word .
3335	Parses the next word .
3336	Parses the next characters .
3337	Parses the next word until one of the passed words is found .
3338	Check if the given character is a separator .
3339	Executes the DROP CLASS .
3340	Clears the configuration files .
3341	Returns the offset of the next byte in the buffer .
3342	Extract the token .
3343	Acquires an access token .
3344	Copy the access token from the current context to the current context .
3345	Returns true if there are no more characters to read .
3346	Read a line from the given byte array .
3347	Reads a line from the input stream .
3348	Skips the specified number of bytes from the input stream .
3349	Skips the specified number of bytes .
3350	Ensures that the given offset and length are valid .
3351	Merge sort .
3352	Swap n elements of a and b .
3353	Performs a quick sort in parallel .
3354	MurmurHash3 hash function .
3355	MurmurHash3 hash function .
3356	Writes the given byte buffer to the underlying file .
3357	Truncate the file to the given size .
3358	Sets the position of the underlying byte stream .
3359	No fail refresh end metrics reporting .
3360	Await the completion of the current tasks .
3361	Find matches .
3362	Returns the set of types that should be compacted .
3363	Deletes up to numOfSnapshotsToKeep snapshots .
3364	Returns the hash code for the given field .
3365	Returns true if the two fields are equal .
3366	Remove references outside closure .
3367	Called when an announcement is complete .
3368	Called when a cycle is complete .
3369	Reads the header tags .
3370	Extract a record primary key from an object .
3371	Clears all bits in the set .
3372	Reads the ordinals from the input stream .
3373	Returns the size of this set .
3374	Returns the field value of the given row .
3375	Copies the contents of the source byte data to the destination byte data .
3376	Copies length bytes from srcPos to destPos .
3377	Returns true if the specified range of bytes are equal .
3378	Performs an ordered copy of the bytes from the source byte array to the destination byte array .
3379	Performs an ordered copy of the specified bytes from the source position to the destination position .
3380	Reads from the given input stream .
3381	Writes the contents of this buffer to the given OutputStream starting at the given position .
3382	Ensure that the given index is at least half of the segments array .
3383	Returns the position of the field with the given name .
3384	Calculates the deduplicated sizes and total number of select buckets .
3385	Returns true if the given dataset has collections .
3386	Generate the Hollow API files .
3387	Generate the files for the Hollow schemas .
3388	Returns true if the given keys match .
3389	Returns the record key for the given ordinal .
3390	Creates a field path for a primary key .
3391	Create a field path for a hash index .
3392	Create a field path for a prefix index .
3393	Associates the specified object with the specified ordinal .
3394	Initializes the HollowObjectTypeReadState .
3395	Returns true if the prefix index contains the given key .
3396	Gets the change percent .
3397	Adds a field to the specified type .
3398	Returns a list of schemas ordered by their dependencies .
3399	Initializes this object with the default values for major versions of v3 .
3400	Returns the value at the given index .
3401	Find all matching records for the given field and field value .
3402	Find matching records .
3403	Sets the element match paths .
3404	Sets the element key paths .
3405	Calculates the results .
3406	Restore from last state .
3407	Runs the incremental cycle .
3408	Exclude the given key from this index .
3409	Exclude all objects that are referenced by this read .
3410	Writes the HollowBlobHeader .
3411	Calculates the type metrics .
3412	Writes the field data to the given byte buffer .
3413	Writes a fixed length integer to the given byte buffer .
3414	Writes a fixed length long to the given byte buffer .
3415	Return an ordinal to the pool .
3416	Sort the free ordinals .
3417	Returns a hash value for the given key and field type .
3418	Hashes the given key for the given field type .
3419	Resizes the storage .
3420	Finds a free ordinal for the given preferred ordinal .
3421	Sets up the array of pointers to be written .
3422	Compares the serializedRepresentation with the given key .
3423	Grows the key array .
3424	Rehashes the previously added data .
3425	Returns an empty key array with the given size .
3426	Returns true if the matchIdx and otherMatchIdx are equal .
3427	Find the matching object for the given key .
3428	Swap the current read state with the pending read state .
3429	Returns the size of the hash table .
3430	Run compaction cycle .
3431	Writes a snapshot of the current state to an output stream .
3432	Writes the delta to the given output stream .
3433	Adds the given schema names to the given set if it is not a primitive or collection type .
3434	Normalize field path to parameter name .
3435	Reindex the hash index .
3436	Finds the matches of the given query .
3437	Trigger an async refresh with a random delay .
3438	Trigger an async refresh with a delay .
3439	Add a type diff .
3440	Calculates the differences for all the types .
3441	Writes a long value to the output stream .
3442	Writes a VInt to an OutputStream .
3443	Write a VInt to the byte array at the given position .
3444	Reads a VInt from the given input stream .
3445	Reads a long value from the given input stream .
3446	Add a child view .
3447	Refresh the loading views size .
3448	Updates the UI for the current mode .
3449	Called when a pull event is received .
3450	OverScroll the view .
3451	Adds a given rule .
3452	Adds the given facts to the rule .
3453	Creates a new rule builder .
3454	Creates a new instance of GoldenRule .
3455	Sets the fact type of the rule .
3456	Sets the result type of the rule .
3457	Returns a builder for a given rule .
3458	Returns a builder for the given rule .
3459	Creates a new ThenRuleBuilder .
3460	Gets the rule instance .
3461	Gets the annotated field .
3462	Gets the annotated method .
3463	Returns the annotation of the given type .
3464	Registers the given auditable rule .
3465	Updates the rule status .
3466	Gets the rule status map .
3467	Sets the result type of this builder .
3468	Adds an action to the then rule .
3469	Adds an action to the current rule .
3470	Resets the value to the default value .
3471	Adds a new rule to the rule book .
3472	Returns the list of rules that should be applied to the pojo .
3473	Read an empty line or end of table .
3474	Convert a list of services to an array .
3475	Get the list of ports from the build configuration
3476	Extract the list of ports from the config .
3477	Parses a port mapping string .
3478	Adds the port if it is not null .
3479	Returns the first ServicePort in the list or null if the list is empty .
3480	Add missing service parts .
3481	Append an image stream resource to the target file .
3482	Returns true if the ports match .
3483	Returns the value of the service port environment variable or the system property if not set .
3484	Returns the host and port for the given service .
3485	Adds a value to a map if it does not already exist .
3486	Merges the specified map with the specified map if it does not already exist .
3487	Merge two maps .
3488	Adds all entries from toPut if it is not null .
3489	Wait until the pod is ready .
3490	Validates that the given value is a valid kubernetes id .
3491	Converts an entity to a list of HasMetadata objects .
3492	Gets the resource version .
3493	Checks if a pod is ready .
3494	Returns the current context .
3495	Checks if the listBuilder has a route with the given name .
3496	Returns true if any of the given paths exist in the compile class loader .
3497	Read and enrich a fragment from a file .
3498	Converts a map of env vars to a list of EnvVar objects .
3499	Merge resources .
3500	Merge maps and remove empty strings .
3501	Checks if local customisation is enabled .
3502	Read configuration from a file .
3503	Adds the port to the map if it is valid .
3504	Gets docker json config string .
3505	Returns the configuration for the given plugin .
3506	Returns the secret configuration for the given id .
3507	Downloads the given URL to the target file .
3508	Compares two versions .
3509	Blends the given profile with the given configuration .
3510	Looks up a profile by name in the given directory .
3511	Read profiles from classpath .
3512	Read all profiles from the classpath .
3513	Finds the profile file in the given directory .
3514	Returns a list of paths to the meta - inf profile files .
3515	Creates a list of profiles from yaml .
3516	Gets the image pull policy .
3517	Returns true if the runtime is in open shift mode .
3518	Gets the replica count .
3519	Returns the first child element with the given name .
3520	Installs a template .
3521	Removes a tag by name .
3522	Creates a new namespace if it doesn t already exist
3523	Apply a project .
3524	Apply a project request to the current project .
3525	Returns the namespace for the given entity .
3526	Logs an error message and throws a RuntimeException .
3527	Add a default namespace if not already present .
3528	Enrich the given list builder with the current namespace .
3529	Returns the environment variables .
3530	Returns the duration in seconds .
3531	Returns the duration in nanoseconds .
3532	Scans the build output directory for files that match the given patterns .
3533	Disable OpenShift features .
3534	Checks if the given service has an IngressRule .
3535	Parses the given input stream and returns a map of file names to list of file names .
3536	Returns the generator context .
3537	Extract the generator config from the profile .
3538	Returns the enricher context .
3539	Extract the enricher config .
3540	Returns the default icon .
3541	Copy all files from the app config directory to the build directory
3542	Returns the properties from the given resource .
3543	Gets the SpringBoot version .
3544	Creates a list of service objects from the given descriptor paths .
3545	Enrich a list of enrichers .
3546	Returns the raw configuration .
3547	Returns a flattened view of the given map .
3548	Extract the configuration for the watcher .
3549	Returns the singleton template for the given list of resources .
3550	Gets the build reference date .
3551	Returns the value for the given key or the default value if the key does not exist .
3552	Returns the configuration map for the given name .
3553	Prepares a list of processors to be executed .
3554	Adds the from to the build image configuration .
3555	Get from mode default .
3556	Returns the name of the image .
3557	Gets the registry .
3558	Returns true if the fabric8 is online .
3559	Returns the external service URL for the given service .
3560	Returns the value of the given property as a Boolean .
3561	Creates a new Jest client .
3562	Create the internal node .
3563	Scan for plugins .
3564	Creates an AmericanExpressRewardsBalance from a JSON string .
3565	Get the rewards balance for the given payment method nonce and currencyIsoCode
3566	Creates a PayPalPaymentResource from a JSON string .
3567	Executes a GET request on the given path .
3568	Override this method to add authorization fingerprint to the data .
3569	Creates a VenmoConfiguration object from a JSON object .
3570	Collect device data from the fragment .
3571	Collect device data .
3572	Collect paypal device data .
3573	Get PayPal client metadata id .
3574	Returns true if the signature of the given certificate is valid .
3575	Get a property as a string or fallback if the property is not present .
3576	Parses the payment method nonce list from a JSON string .
3577	Gets the browser checkout configuration .
3578	Returns the billing agreement recipe for the browser .
3579	Executes a GET request on the given path .
3580	Submits a HTTP POST request to the given path .
3581	Performs a HTTP POST request .
3582	Starts a payment .
3583	Approves the local payment .
3584	Adds a new listener to this instance .
3585	Removes a listener from the Braintree instance .
3586	Request billing agreement .
3587	This method is called when an intent is received from the activity .
3588	Creates a PayPalAccountBuilder based on the response from the request .
3589	Adds a list of words to the dictionary .
3590	Remove words from dictionary .
3591	Convert a sequence of tokens to a Java string list .
3592	Extract phrases from a sequence of tokens .
3593	Detokenize a list of tokens .
3594	Reads bytes from the given channel into the given buffer .
3595	Join a list of NAL units into a single ByteBuffer .
3596	Joins a list of NAL units into a single byte buffer .
3597	Returns the profile for the given integer .
3598	Normalize and generate fixed precision .
3599	Reads to the next marker and writes it to the given output buffer .
3600	Read to the next marker new buffer .
3601	Returns the maximum number of available frames .
3602	Modify an MP4 file .
3603	Copies the source file to the destination file .
3604	Returns the duration of the edit of the specified track .
3605	Convert a frame number to a time value .
3606	Convert a time value to a frame number .
3607	Returns the number of times the given media should be edited .
3608	Given a trak box and edited TV return the media time of the edit .
3609	Returns the QT frame number for the specified movie .
3610	Get the player time for a given movie .
3611	Convert a timevalue to a timecode frame
3612	Format a timecode .
3613	Generates a 7 - bit integer from the four four values .
3614	Set n elements of a list to a new value .
3615	Returns true if this color space matches the input color space .
3616	Returns the size of the specified component in the specified size .
3617	Create an MP4 demuxer from an input channel .
3618	Reads an integer from the cache .
3619	Creates a WAV header for the given AudioFormat .
3620	Returns a wav header for a multi - channel wav file .
3621	Parse MP4 decoder specific information .
3622	Encode a single symbol .
3623	Read the decoder s pic - marking information .
3624	Splits a movie into a pair of edits .
3625	Decode a single frame .
3626	Sets the big - endian flag .
3627	Deblock a P - block .
3628	Encode a native frame .
3629	Encodes a long into an array of bytes .
3630	Returns the length of an EBML value .
3631	Adds a packet to the packet stream .
3632	Repositions the file .
3633	Decodes a binary value .
3634	Decode binary bypass .
3635	Goto marker .
3636	Returns the sample frequency for the given integer .
3637	Subclasses should override this method to use the super class .
3638	Sets the start of the block with the given dc value .
3639	Calculates the coeff of a block .
3640	Finishes a 64 - bit block .
3641	Concatenates bits from a bits buffer to this buffer .
3642	Reverses a 32 bit integer in reverse order .
3643	Repositions to the reverse of a 64 - bit integer .
3644	Seeks to the specified key frame .
3645	Get the pixel buffer for the given frame .
3646	Returns the id of the gain change point for the given lngain .
3647	Converts a byte array to an integer array .
3648	Converts an integer array to a byte array .
3649	Converts a AudioFormat into a FloatBuffer .
3650	Reads a float from the given buffer .
3651	Interleave an array of bytes into an output buffer .
3652	Deinterleaves the given input buffer into the output buffer .
3653	Returns the compressed size of the video track .
3654	Build the box out map .
3655	Build the wipe map .
3656	Reads a batch of ULs from the given ByteBuffer .
3657	Read a batch of 32 - bit integers from a ByteBuffer .
3658	Calculates the median value of two vectors .
3659	Encodes the given picture into an encoded frame .
3660	Encode an IDR frame .
3661	Encode a P - frame .
3662	Returns a list of all supported codecs .
3663	Returns a list of all supported tags .
3664	Adds a reference to the pool .
3665	Deletes all references from the reference queue .
3666	Flushes the cache .
3667	Load a library .
3668	Unpacks a library from the classpath .
3669	Deletes all temporary files .
3670	Returns the default layout for the specified number of channels .
3671	Returns the AudioChannel . Type associated with the given layout and index .
3672	Create a new MediaPacket .
3673	Gets the version information .
3674	Get the default time base .
3675	Create a new Demuxer .
3676	plays a video .
3677	Display video at correct time .
3678	Returns a new codec descriptor for the given codec id .
3679	Prints an option .
3680	Register a HumbleIO factory for the given protocol prefix .
3681	Generates a unique name for an object .
3682	Create a new MediaAudioResampler .
3683	Gets the supported video frame rates .
3684	Returns a list of supported pixel formats .
3685	Returns the list of supported audio sample rates .
3686	Returns the list of supported audio formats .
3687	Returns the list of supported channels .
3688	Sets the value of the specified flag .
3689	Sets the value of the specified flag .
3690	Returns the decoder associated with this stream .
3691	Returns the demuxer associated with this stream .
3692	Returns a list of all available formats .
3693	Create a new filter graph .
3694	Returns the type of this filter .
3695	Returns a java . nio . ByteBuffer with the specified offset and length .
3696	Creates a new audio frame from the given audio format .
3697	Resample the given image using the given resampler .
3698	Validates that the passed image is of the correct type .
3699	Validates that the given picture is valid .
3700	Returns the filter graph associated with this link .
3701	Returns the meta data associated with this media raw .
3702	Returns the CPUArch for the given javaCPU .
3703	Get the CPUArch from a GNU string .
3704	Returns the OSFamily for the given OS name .
3705	Get the OSFamily from a GNU string .
3706	Play the specified sound .
3707	Loads a library from the system .
3708	Set the major version of a library .
3709	Load a library from a list of candidates .
3710	Initializes the search paths .
3711	Returns true if the specified library is already loaded .
3712	Record a frame in the screen .
3713	Deletes this object from the pool .
3714	Returns the MuxerStream associated with the specified position .
3715	Returns the Muxer handle for this stream .
3716	Creates a set script transaction .
3717	Decodes a base58 string into a byte array .
3718	Generates a random seed .
3719	Returns the transaction with the given id .
3720	Get a list of transactions for the given address .
3721	Returns a list of transactions for the given address .
3722	Returns a list of block headers in the range [ from to ) .
3723	Get the block with the given signature .
3724	Send a request to the server .
3725	Set a script in the chain .
3726	Compile a script .
3727	Writes a primitive array to the output stream .
3728	Flushes the buffer to the output stream .
3729	Writes an object to the specified memory address .
3730	Reads a class from the input stream .
3731	Writes the given object to the given byte array .
3732	Sets the file and file channel .
3733	Returns the specificity of the given class .
3734	Resizes the store .
3735	Removes the element with the given key from the index .
3736	Write a string in Ascii format .
3737	Set the output stream .
3738	Creates a new JSON configuration .
3739	Creates a configuration object that can be used to create a struct configuration .
3740	This method calculates the size of an object not a utility .
3741	Clears all cached objects .
3742	Get the object input .
3743	Returns an object input for the given array of bytes .
3744	Returns an object input that copies the contents of the given byte array .
3745	Get the object output stream .
3746	Register cross - platform class mapping .
3747	Returns the class name for the given class .
3748	Writes a long value to the output stream .
3749	Write a long to the output .
3750	Write a long value to the output stream .
3751	Write a primitive array .
3752	Writes an array of bytes to the buffer .
3753	Get the cached FSTFieldInfo for the given possible classes .
3754	Notifies the listener that an object is about to be written .
3755	Notifies the listener that an object has been written .
3756	Get the FSTClazzInfo for the given field .
3757	Write an array .
3758	Sets the string .
3759	Write primitive array .
3760	Finish tracking changes .
3761	Creates a snapshot of the changes from the origin .
3762	Register an object for write .
3763	Writes an object to a byte array .
3764	Reads an object from a byte array .
3765	Reads a byte array from the buffer .
3766	Reads a 4 - byte integer from the stream .
3767	Adds the specified number of elements to the end of the queue .
3768	Sets whether the thread pool is enabled .
3769	Starts the embedded Cassandra daemon .
3770	Clean data embedded cassandra .
3771	Copies the given resource to the given directory .
3772	Prints information about all active threads .
3773	Returns true if the remote port taken .
3774	Returns an empty subscriber state .
3775	Returns a map of OpDescriptors from the onnxops . json file .
3776	Calculates the output shape .
3777	Performs a logical OR on a vector of complex numbers .
3778	Returns true if n and cond
3779	Applies the given condition to the given array of dimensions
3780	Performs a logical OR operation on the given array of dimensions
3781	Apply a condition to a vector
3782	Returns the index of the first element of the given array
3783	As flat properties .
3784	Creates a new FunctionProperties from a FlatProperties object .
3785	Convert a collection of FunctionProperties into a flat properties vector .
3786	Sets the exception .
3787	Sets the exception if it s not already set .
3788	Merges two lists of coordinates .
3789	Partition a variable into a list of lists .
3790	Convert TensorProto . DataType to nd4j type
3791	Shuts down the transport .
3792	Get current device architecture
3793	2 - image convolutions
3794	Pooling 2D
3795	Creates a new compression descriptor from a byte buffer .
3796	Splits the given list into batches of the given partition size .
3797	Validate that all arrays have the same dimensions
3798	Sets the data type .
3799	Create a random number array with values between lower and upper
3800	Flatten a collection of matrices
3801	Returns the bilinear products of the given tensor
3802	Creates a complex ndarray from the given double array .
3803	Create a complex number array with the given value
3804	Create a complex array with the specified shape and value
3805	Returns true if it should be replicated .
3806	Subtracts this complex number from the given complex number .
3807	Computes the angle of a complex number
3808	Ceiling a complex number
3809	Negates a complex number
3810	Get the absolute value of a complex number
3811	Power a complex number to a complex number
3812	Returns a new Aeron context .
3813	Binarizes the features according to the given cutoff
3814	Samples a number of examples and outcomes
3815	Returns the memory footprint of this matrix
3816	Converts an exception to a string .
3817	Returns the simple hostname of the given hostname .
3818	Convert an array of strings to a string .
3819	Converts a byte array into an hexadecimal string .
3820	Returns an array of all the values of the given string in the specified delimiter .
3821	Splits a string into an array of strings .
3822	Split a string into an array of strings .
3823	Returns the index of the first occurrence of the given separator or - 1 if the separator is not found .
3824	Escapes an HTML string .
3825	Joins the given strings using the given separator .
3826	CamelCase a string .
3827	Replaces all tokens in the given template with the given replacements .
3828	Returns the stack trace of the given thread .
3829	Returns the inverse of the given matrix
3830	Returns the element at the given index .
3831	Is actual on host side .
3832	Is actual on device side .
3833	Create the shape information for the given shape
3834	Create the shape information
3835	Returns true if shapeInfo is a vector .
3836	Returns the order of the elements in the given array
3837	Get the offset for the given indexes
3838	Convert an array of indices to an array of indices
3839	Returns the short at the given position in this buffer .
3840	Creates a new data buffer with the specified length .
3841	Copies n bytes from one buffer to another .
3842	Returns a constant buffer for the given float array
3843	Returns the URI of the Kafka broker .
3844	Performs a power operation on an ndarray
3845	Logarithm of an ndarray
3846	Max function .
3847	Computes the maximum of two ndarrays
3848	Returns the k - th minimum value of an ndarray
3849	Computes the minimum of two ndarrays
3850	Stabilizes the given ndArray with the given k
3851	Expm1 operation
3852	Compute the log1p of an ndarray
3853	Prepare the bounds for the given x
3854	Adjusts the scheme to the lower and upper bounds
3855	Returns the next data set in the epoch .
3856	Performs a SGEQRF decomposition on the given matrix
3857	Creates an AllocationShape for the given DataBuffer .
3858	Checks if the given name exists in the given path .
3859	Read the data from the input stream .
3860	Sweep the tail of the queue .
3861	Create an ndarray from a native NumpyPointer
3862	Create an ndarray from a python file .
3863	This method can be used to allocate a page of memory .
3864	Attaches an object to the cache .
3865	Returns true if the server is started .
3866	Executes the given op .
3867	Flushes the queue blocking .
3868	Returns the input stream for this resource .
3869	Returns the device associated with the given thread .
3870	Attaches a thread to a device
3871	Returns the next available device for the given thread .
3872	Returns the name of the operating system .
3873	Calculates the ARCH type from the os . arch property .
3874	Publish an array to the camel context
3875	Starts the server .
3876	Creates a new DataBuffer for the given type and length .
3877	Intercept int data type .
3878	Adds two complex numbers .
3879	Process the message .
3880	Average pooling 3d operation .
3881	Depth - wise convolution .
3882	Resets the internal state .
3883	Returns the class name of the given Op .
3884	Store and allocate a new INDArray for this variable
3885	Returns the shape of the array .
3886	Evaluate the function .
3887	Compress a double array
3888	Computes the absolute value of each complex number in the array
3889	Returns the center of the given array
3890	Truncate a vector to a given dimension
3891	Returns a new IComplexNDArray with the specified shape filled with zeros
3892	Computes the element - wise element - wise maximum value of a vector
3893	Broadcast the given array to all devices
3894	Process the aggregation message .
3895	Returns the gamma of the given MathContext .
3896	Returns the square root of x .
3897	Cbrt .
3898	Returns the root of a number n .
3899	Returns the exp of the given BigDecimal .
3900	Returns the exponential value of this number .
3901	Power x by y .
3902	Rounds a BigDecimal to a power of n .
3903	Sine a number .
3904	Returns the Tangent of x .
3905	Cosh function .
3906	Sineh function .
3907	Tanh function .
3908	Asinh function .
3909	Returns the acosh function of the given value .
3910	Gamma function .
3911	Performs the broadhurst algorithm .
3912	Scales a BigDecimal by a given number of decimals .
3913	Scales a BigDecimal by the preferred precision .
3914	Convert an error value to a precision value
3915	Put a DifferentialFunction instance for the given id
3916	Returns the inputs for the given DifferentialFunction .
3917	Update the array for a given variable
3918	Adds a new shape for the given variable .
3919	Associate an array with a variable
3920	Gets property for function .
3921	Add a property for a given DifferentialFunction
3922	Adds an outgoing function to this instance .
3923	Adds the given arguments for the given function .
3924	Replies if the given DifferentialFunction has any incoming arguments .
3925	This method returns the output variables of each operation .
3926	Create a new variable with the specified shape
3927	The ones like operation .
3928	Zero - like operation .
3929	Remove arg from function .
3930	Set the gradient for the given variable name
3931	Average pooling 3d operation .
3932	Create a GRU cell
3933	Execute a list of ops
3934	Create a while statement
3935	Execute the given function
3936	Executes the given operation on the given function .
3937	Execute the backward and return the result
3938	Adds a variable as a place holder .
3939	Allocates memory from the device or host .
3940	Returns the length of the data in the given type .
3941	Returns the d - type name for the given allocation mode .
3942	Get the data type from the context
3943	Returns the number of operations with the given name .
3944	Destroy all workspaces for the current thread .
3945	Prints the allocation statistics for the current thread .
3946	This method performs a trifocal vector translation
3947	Receives an ndarray from the server
3948	Execute the operation and return the result
3949	Decode the given encoded vector into the target vector
3950	Returns the name of the node .
3951	Invoke the TAD on the given dimension .
3952	Assert that no active workspaces are open
3953	Returns the negative log likelihood
3954	Request a tick .
3955	Try to request toe .
3956	Release the toe .
3957	Returns the current access state .
3958	Build the environment
3959	Process a vector complete message .
3960	Initialize the current dataset from the list of examples
3961	Initialize the host collectors
3962	Gets the device pointer .
3963	Synchronize host data .
3964	Applies the update to the given gradient
3965	If the given allocation point is constant then wait for it to finish . If it is not constant then wait for it to finish .
3966	Create an array of indices for the given index
3967	Gets properties for function .
3968	Returns true if this operation has a place holder input .
3969	Returns a list of the differences between the input and the output variables
3970	Format the given INDArray
3971	Import the given graph .
3972	Convert a complex array to a blob
3973	Load a complex array from a blob
3974	Saves a complex array to the database .
3975	Copies the real value of the linear view to the given array
3976	Copy the imaginary values of the linear view to the given array
3977	Compute the EPS value of the linear view of this array
3978	Assigns the values of this array to the values of the other array .
3979	Returns the rows of the matrix with the given indices
3980	Adds a row of the matrix to the current row
3981	Put a complex number to a column
3982	Subtraction of this vector with another vector .
3983	Adds a complex number to this array .
3984	Returns the subtraction of this array with the given result array
3985	Adds the elements of this array to the given array .
3986	Assigns a complex number to this array
3987	Returns a copy of this array .
3988	Returns the eigenvalues of the given matrix
3989	Computes the symmetric generalized eigenvalue of A and B
3990	Computes the element - wise element - wise element - wise maximum of a complex number .
3991	Copies the contents of x to y .
3992	Scales a complex number to a complex number .
3993	Process the Skip Gram request message .
3994	Count the number of non - zero values in the given labels
3995	Reduce the given loss to the given output name
3996	Returns the no - arg constructor for the given class .
3997	Gets the constructor for the given class .
3998	Invokes the given method handle with the given parameters .
3999	Returns the annotation of the given type .
4000	Returns the declared annotation of the given type .
4001	Checks if an annotation is present on the given class .
4002	Creates a proxy for the given result type .
4003	Loads the given entity .
4004	Saves the given entity to the database .
4005	Creates a proxy for the given raw service .
4006	Returns the metadata for the given kind .
4007	Performs a keys - only query .
4008	Performs a hybrid query .
4009	Performs a normal query .
4010	Executes a projection query .
4011	Executes a query and returns the number of keys returned .
4012	Partition the input iterator by the given chunkSize .
4013	Loads the given keys and returns the results .
4014	Append a message to a path .
4015	Creates a key for the given pojo .
4016	Compares two keys with the identity hash code .
4017	Converts the raw key to a Key .
4018	Converts a typed key to its raw representation .
4019	Get the kind here .
4020	Returns true if the given type has no type parameters .
4021	Checks if the given type is a super type of the given type .
4022	Returns the exact direct super types of the given type .
4023	Capture a parameterized type .
4024	Returns a translator for the given type key .
4025	Get the populator for the given class and path .
4026	Returns true if the given class has an Index annotation or null if not .
4027	Returns true if the given method is of interest .
4028	Returns a list of all properties declared in the given class .
4029	Gets the key metadata .
4030	Returns the cached result for the given key .
4031	Executes the round .
4032	Fetch the pending entities .
4033	Adds the discriminators for the given class .
4034	Registers a subclass of the given class translator .
4035	Returns the component type of a collection .
4036	Returns the key type of the map .
4037	Creates a new forward path from the given path .
4038	Returns the final path of this path .
4039	Returns a string representation of this path .
4040	Returns the depth of this path .
4041	Adds a collection of updates to the cache .
4042	Empty the cache for the given keys .
4043	Cache put if untouched .
4044	Gets all values from the cache .
4045	Returns the keys of a collection of buckets .
4046	Recursively finds all the fields that are annotated with @Id .
4047	Sets the key of the given entity .
4048	Sets the id of the given POJO .
4049	Returns the raw key of the parent .
4050	Registers a subclass of the given class .
4051	Returns true if the two types could have a common subtype .
4052	Transform the given owner type .
4053	Returns the annotation of the given type or null if it doesn t exist .
4054	Adds all values from the other session to this session .
4055	Loads the given key from the cache .
4056	Execute the round .
4057	Translate the raw Result .
4058	Fetches a set of entities from the datastore .
4059	Load entity .
4060	Creates a raw key for the given kind and id .
4061	Returns the raw representation of the given key .
4062	Returns the id value for the given key .
4063	Converts a url - safe key to a datastore key .
4064	Create a new instance of this transactor .
4065	Performs a new transaction .
4066	Transact the given work once .
4067	Returns true if the given conditions match .
4068	Returns the Objectify instance .
4069	Returns an AsyncDatastore .
4070	Gets the metadata for the given entity .
4071	Allocates the specified number of keys .
4072	Open an objectify .
4073	Closes the context .
4074	Homogenize indexes .
4075	Creates a new reference to the given value .
4076	Returns the value associated with this key .
4077	Adds the specified value to the list for the specified key .
4078	Returns true if the future is done .
4079	Generates an array of If conditions for the given If classes .
4080	Called when the engine is done .
4081	Returns the container of the given type in the given path .
4082	Returns the Stat object for the given kind .
4083	Unwraps the given exception and throws it .
4084	Returns the translator for the given type key .
4085	Returns the root translator for the given class .
4086	Creates a new translator .
4087	Loads the property from the given container into the given intoPojo .
4088	Get the value of the property from the container .
4089	Sets the value of this property to the given value .
4090	Saves the value of the given property to the given entity .
4091	Get the value of the property .
4092	Writes the extensions of the given message .
4093	Writes a content category .
4094	Writes a list of content categories .
4095	Processes the given snippet and returns the result .
4096	Returns an iterable over the bids in the given response .
4097	Returns a Bid . Builder for a given id .
4098	Updates all the bids in the response .
4099	Remove all bids in the response that match the given filter .
4100	Returns an iterable over the imps in the given request that match the given filter .
4101	Read extensions .
4102	Returns true if the parser is empty and the current token is null .
4103	Registers an OpenRtbJsonExtReader for the given class .
4104	Registers an OpenRtbJsonExtWriter .
4105	Processes the bid response .
4106	Process the fields of the bid .
4107	Updates all objects in the given list using the given updater .
4108	Returns a copy of the given list that does not match the given predicate .
4109	Returns the name of the current token .
4110	Returns true if the current token is a START_OBJECT .
4111	Returns true if the current token is the start of an array .
4112	Peek the next token from the given JsonParser .
4113	Writes a boolean field .
4114	Writes a list of strings .
4115	Writes a list of integers to the given JSONGenerator .
4116	Writes a list of long values to the given JSONGenerator .
4117	Writes a list of enums to the given JSONGenerator .
4118	Resolve a URL to a target .
4119	Fixes pure query targets .
4120	Returns the host segments of the given URL .
4121	Returns the host of the given URL .
4122	Returns the page of the given URL .
4123	Load list from storm conf
4124	Extract the config element from a map .
4125	Returns the protocol for the given URL .
4126	Generates the WARC header .
4127	Extract refresh url .
4128	Get the metadata for an outlink .
4129	Filters the metadata .
4130	Add a new URL to the queue .
4131	Clean the field name .
4132	Get the character set name from the BOM .
4133	Get the charset from the text .
4134	Get the charset from the meta data .
4135	Searches for the first occurrence of the clue in the content .
4136	Sets the value for the given key .
4137	Returns the first value for the given keys .
4138	Get a list of cookies from a list of cookies strings .
4139	Checks if the domain name matches the host name of the cookie .
4140	Returns the cache key for the given URL .
4141	Gets the robot rules set from the cache .
4142	Extract meta tags from a document fragment .
4143	Acknowledges a tuple .
4144	Returns true if the given URL matches this filter .
4145	Filter the given URL .
4146	Read rules from the rules file .
4147	Process the query elements of the URL .
4148	Loads the NavigationFilters from the storm conf .
4149	Adds a record format to this bolt .
4150	Returns the amount of time that the last query was sent .
4151	If the time last query was received and the max delay between queries is greater than the max delay between queries the method returns true .
4152	Load the ParseFilters from storm conf .
4153	Append a new node to the current node .
4154	Ignorable whitespace .
4155	Add a processing instruction .
4156	Append a comment .
4157	This method is called by the parser when a cdata character is encountered .
4158	Start a DTD declaration .
4159	Start a prefix mapping .
4160	Returns the value for the URL .
4161	Trim the text if it is longer than maxLengthText
4162	Checks if a custom interval is present in the metadata .
4163	Loads the URLFilters from the storm conf .
4164	Set the number of items in the wheel .
4165	Resolve size and state based on measure spec .
4166	Set the empty item drawable .
4167	Sets the angle of the wheel .
4168	Updates the selected position based on the current angle .
4169	Invalidates the wheel item drawable at the given position .
4170	Convert a raw position to a wheel position .
4171	Update the velocity by the given deltaTime .
4172	Gets the contrast color .
4173	Clamp the given value to the upper limit .
4174	Writes the coveralls data .
4175	Returns the data as a ByteBuffer .
4176	Sets the string .
4177	Make a 1 - D String Array .
4178	Creates a new ArrayChar from a String .
4179	Create an ArrayChar from an ArrayObject .
4180	Make a char array from a string array
4181	Returns the offset of the time interval for the given record .
4182	Show the IndependentWindow .
4183	Show the window if the frame is not already iconified .
4184	Make a size estimate for a given grid dataset .
4185	Main method to read a Grib1 file .
4186	Creates a new unit name with the given name and plural .
4187	Creates a new UnitName with the given name plural and symbol .
4188	Returns the plural form of the given name .
4189	Returns true if this date is included in the given date .
4190	Returns the intersection of this range with the specified range .
4191	Extend this date range with the specified date range .
4192	Extend this date with a given date .
4193	Sets the start date .
4194	Sets the end date .
4195	Sets the duration .
4196	Recalculates the duration .
4197	Add a map bean to the menu .
4198	Called by the parser when an error occurs .
4199	Returns the name of this node .
4200	Returns a string representation of the parameters .
4201	Creates a new DSP from the given raw data .
4202	Compute the bounds .
4203	Synchronize the UI .
4204	Compute the unlimited chunking .
4205	Registers a directory with the catalog watcher .
4206	Process events from the watcher .
4207	Sets the reference date .
4208	Open a feature dataset .
4209	Wrap a feature dataset .
4210	Checks if a feature type is ok .
4211	Find the feature type from the NetCDF file
4212	Writes a catalog to the response .
4213	Converts a catalog to HTML .
4214	Gets the user CSS .
4215	Gets the user head .
4216	Make a dynamic catalog for a given directory .
4217	Add the global services to the catalog .
4218	Initializes the HTTP session with the given credentials provider and user agent .
4219	Gets the content as a string .
4220	Puts the given content into the given URL .
4221	Get the front page .
4222	Creates a catalog from the grib collection .
4223	Extract a geospatial coverage from a group .
4224	Returns a single dataset or by its type name .
4225	Returns true if the two VertCoordValues are nearly equal .
4226	Create a new UnitID from a name plural and symbol .
4227	Parse an attribute specification .
4228	Reads the top of the file .
4229	Converts two shorts into an int .
4230	Convert a byte array to an integer .
4231	Returns a java . util . Date from the given julian days and msecs .
4232	Make sure that the name is a valid NetCDF object name .
4233	Returns true if the given name is a valid NetCDF3 object name .
4234	Opens a NetcdfFile for writing .
4235	Reads the record data from the given section .
4236	Read the record data subset .
4237	Fill non - record variables .
4238	Returns a time struct for the given time index .
4239	Make a GradsTimeStruct from a Calendar .
4240	Returns true if the given string is a valid time template .
4241	Add a server side function .
4242	Get a boolean function .
4243	Returns the BTFunction with the given name . If the BTFunction does not exist it will be created .
4244	Load a new function .
4245	Returns the name of the level .
4246	Get the description of a level .
4247	Get the level unit name .
4248	Returns the type of the projection .
4249	Returns true if the given grid record is a vertical coordinate .
4250	Returns true if the given record is a layer .
4251	Make a CoordinateTransform from a NetcdfDataset .
4252	Creates a dummy coordinate transform variable .
4253	Make a projection from a CoverageTransform .
4254	Main entry point for the dataset chooser .
4255	Saves the current state of the info window .
4256	Sets the time zone for this chronology .
4257	Writes the given count to the output stream .
4258	Write an atomic array .
4259	Writes a byte array to the output stream .
4260	Writes the specified bytes to the output stream .
4261	Finish initialization .
4262	Creates a CalendarDateRange from a DateRange .
4263	Creates a new instance of Grib2Gds .
4264	Parses the specified text using the specified DDS .
4265	Parse the specified text using the specified DAS parser .
4266	Swaps the header of the grid .
4267	Reads a grid from the file .
4268	Main method to read a grid file .
4269	Write a constraint .
4270	Write the WFS headers and SS .
4271	Writes the list of operations .
4272	Iterate over all files in the given directory starting with the given filter .
4273	Scans a log file .
4274	Returns the packing type of the specified grid .
4275	Returns the GempakGridRecord for the given parameter .
4276	This is the inverse of DM_RPKG .
4277	Unpack data .
4278	Returns the DP_UGRB representation of an integer array .
4279	Unpack Grib1 data .
4280	Unpack Grib2 data .
4281	Print the grids .
4282	Reads the next byte from the input stream .
4283	Returns a new calendar date with the specified fields .
4284	Creates a CalendarDate from a java . util . Date .
4285	Creates a calendar date from the given milliseconds .
4286	Returns a new calendar date with the specified time in milliseconds .
4287	Parse a UD units string into a CalendarDate .
4288	Get the difference between this date and the specified period .
4289	Create an atomic variable from a data cursor .
4290	Sets up the request .
4291	Escapes a string .
4292	Creates a list of slices from a list of ranges .
4293	Unwraps a NetcdfFile .
4294	Returns true if the dimset contains a variable length dimension .
4295	Compute the effective shape of the dimset .
4296	Adds the specified date to this date .
4297	Multiply this unit by another unit .
4298	Divides this unit by the given unit .
4299	Divides this unit into the given unit .
4300	Returns a new instance of this unit with the specified power .
4301	Convert the given amount to a derived unit .
4302	Convert an array of float values to a derived unit .
4303	Converts the given amount to this derived unit .
4304	Returns the canonical string representation of this derived unit .
4305	Read data from a SectionIterable .
4306	Read the data from the collection .
4307	Flattens this point feature collection into a subset of the specified station names .
4308	Finds the service with the given name .
4309	Returns the gate size for the given datatype .
4310	Returns the gate start for the given data type .
4311	Returns the gate count for the given datatype .
4312	Writes an XML document to an OutputStream .
4313	Returns the preferred layout size for the given container .
4314	Verifies that the given path is a descendant of the given dataset .
4315	This method is used to generate a catalog from a CrawlableDataset .
4316	Returns a new instance of CalendarDateUnit for the given calendarName and udunitString .
4317	Creates a new instance of CalendarDateUnit with the specified calendar .
4318	Returns a new instance of CalendarDateUnit .
4319	Make the offset from a reference date .
4320	Returns a new calendar date based on the specified value .
4321	Returns a new quantity dimension for this unit .
4322	Returns true if the given file is a valid file .
4323	Read the names of the station names .
4324	Read a variable from the input stream .
4325	Read int data .
4326	Read data from a variable to a writable byte channel .
4327	Calculates the elevation of an angle .
4328	Calculates the step value for the given range .
4329	Calculates the angle between two angles .
4330	This method calculates the data value for a given record header .
4331	Calculates the Nyquist value .
4332	Creates a vertical transform for the given dataset .
4333	Set the debug flags .
4334	Sets whether or not the index should be extended .
4335	Reads a point in the grid .
4336	Returns true if the specified location is missing in the specified grid variable .
4337	Gets the LatLon bounding box .
4338	Finishes the structure .
4339	Appends a tab to a StringBuffer .
4340	Pads a string to the specified width .
4341	Pads the given integer value to the specified width .
4342	Pads a long value to the specified width .
4343	Format a byte size .
4344	Prints the format of a double .
4345	Print the dfrac .
4346	Returns a string representation of the shape .
4347	Finishes the slice .
4348	Returns a string representation of this constraint .
4349	Compose the target slice with the source slice .
4350	Maps i - th element of target to i - th element of target .
4351	Prints the contents of a ByteBuffer to the standard error stream .
4352	Dumps the contents of a ByteBuffer into a byte array .
4353	Returns the EarthEllipsoid with the specified name .
4354	Returns the EarthEllipsoid for the specified EPSG .
4355	Decode vlen data .
4356	Decode vlen data .
4357	Extract the HTML from a URL .
4358	Get the text content of the given URL .
4359	Filters out meta tags from the input stream .
4360	Read data from a variable to a writable byte channel .
4361	Adds all attributes from the given Iterable .
4362	Remove the attribute with the given name .
4363	Remove an attribute ignoring case .
4364	Gets the offsets in time units .
4365	Add an action source listener .
4366	Returns the standard date for the given text .
4367	Returns the standard date or ISO date .
4368	Gets the date origin .
4369	Gets the date .
4370	Make a date from a double value .
4371	Make a value based on the given date .
4372	Make a standard date string from a double value .
4373	Get the grid spacing in km .
4374	Adds the dimensions to the NetcdfFile .
4375	Add a coordinate axis .
4376	Make a projection .
4377	Add GDS parameters .
4378	Add a coordinate system variable .
4379	Make a Lambert Conformal coordinate system .
4380	Make the projection .
4381	Make mercator .
4382	Make the message geostationary .
4383	Set the DX and DY coordinates .
4384	Read a dataset .
4385	Read a dataset scan .
4386	Read the metadata content from the given URL .
4387	Gets the level type 1 .
4388	Checks if the given file is a valid file .
4389	Writes bytes to the underlying stream .
4390	Sets the clear name .
4391	Get the coordinate name for a given axis type
4392	Returns the coordinate name for the given axis type and dimension
4393	Build the XML representation of this error .
4394	Build a dap exception .
4395	Break up the levels .
4396	Make a z - coordinate axis .
4397	Create new variables .
4398	Make a time coordinate axis from a reference variable .
4399	Bit shave a float .
4400	Main entry point for the GribToNetcdfWriter .
4401	Creates a new NetcdfDataset for the given NetcdfFile .
4402	Opens a NetcdfFile from the given location .
4403	Clears all coordinate systems .
4404	Returns the coordinate axis of the given type .
4405	Find a coordinate axis by its full name .
4406	Find a coordinate system by its name .
4407	Find a coordinate transform by its name .
4408	Returns true if at least one of the requested enhance modes is needed .
4409	Sets the values of a variable .
4410	Sets the values for the given variable .
4411	Creates an Array from a list of Strings .
4412	Returns the index of this vector .
4413	Returns the MFileOS7 object for the given filename .
4414	Returns a list of features that intersect the specified bounding box .
4415	Discretizes the n - th element of d .
4416	Adds a ThreddsMetadata object .
4417	Add a documentation with the specified type and content .
4418	Remove all docs of a given type .
4419	Returns the number of bytes that can be used to store the given segment .
4420	Checks if the given NetcdfFile is mine .
4421	Add a dataset to the mfiles .
4422	Break up convention names .
4423	Build a convention attribute .
4424	Build the coordinate systems .
4425	Find the coordinate axes for each variable process .
4426	Find all coordinate systems in the dataset .
4427	Make coordinate systems .
4428	Make the coordinate systems maximal .
4429	Returns true if the given variable is a coordinate axis for the given variable .
4430	Add a coordinate variable to the coordinate variable map .
4431	Sets this dataset to be a subset of this dataset .
4432	Sets the filter for this dataset .
4433	Returns true if the dataset should be marked .
4434	Delete a dataset .
4435	This method should only be called once per request .
4436	Counts the given value for the given name .
4437	Adds a new prefix definition .
4438	Compares this row with another row .
4439	Compares two boolean values .
4440	Gets the group scope .
4441	Pass all reserved attributes to the given node .
4442	Checks if a date range is valid .
4443	Returns true if the iterator is at the end of the list .
4444	Registers a class with the DAP server .
4445	Register a new DSP .
4446	Returns true if the given DSP class is registered .
4447	Unregisters a DSP from the registry .
4448	Creates a new instance of Grib2Tables .
4449	Returns the size of the time interval in hours .
4450	Returns the offset of the time interval for the given record .
4451	Returns the VertCoordType for the given code .
4452	Finishes the tree .
4453	Sort the nodes in the tree .
4454	Get the RAF file for a given partition .
4455	Finds the variable with the given attribute name .
4456	Finds a variable with the specified attribute value .
4457	Finds the name of the variable with the given attribute value .
4458	Finds a variable with the specified attribute name and value .
4459	Finds the nested structure of the given structure .
4460	Returns true if the dataset has a netcdf3 record structure .
4461	Returns the literal value for the given key .
4462	Get the feature type from the given key .
4463	Returns the variable name for the given key .
4464	Returns the value of the coordinate at the specified positions .
4465	Convert a longitude value to a longitude value .
4466	Returns the coordinate values of the coordinate axis .
4467	Returns the section of this coordinate axis with the specified ranges .
4468	Finds the index of the closest point to the target .
4469	Returns the name of this element .
4470	Add an action to this menu .
4471	Returns the first match for the given path .
4472	Main entry point for the ProjectionManager .
4473	Returns the index of the first occurrence of the specified range of the specified byte array .
4474	Adds a source picture to the cache .
4475	Report the contents of the cache .
4476	Stop the background loading .
4477	Stop background loading of the picture from the given URL .
4478	Creates a GET request .
4479	Creates a new instance of the HTTPMethod class .
4480	Returns a random float value .
4481	Returns a random number in the given range .
4482	Read data for a given variable and section .
4483	Get the provider for the given URI .
4484	Read the station table .
4485	Returns the index of the given group .
4486	Removes the data variable with the given name .
4487	Returns the cloud hgt2 meters .
4488	This method is used to read the data from a given section .
4489	Sets the number of colors .
4490	Calculates the transformation for the TPanel .
4491	Convert a URI to an AuthScope .
4492	This method should be called after the file has been read .
4493	Returns true if this factor is reciprocal of the given factor .
4494	Get the catalog for a directory .
4495	Returns the index of the first occurrence of want in this sequence .
4496	Read the metadata content from a URL .
4497	Read metadata content .
4498	Add metadata content .
4499	Validate metadata content .
4500	Read the catalogGenConfig element .
4501	Read a dataset source element .
4502	Read a dataset namer element .
4503	Read a dataset filter element .
4504	Read the result service element .
4505	Create the XML element for the CatalogGenConfig object .
4506	Create the XML element for a dataset source .
4507	Create a dataset namer element .
4508	Create a dataset filter element .
4509	Create the XML element for the result service .
4510	Returns the value of the flag with the given name .
4511	Construct a JMenu with all items in the store .
4512	Recursively adds all entries in the preferences to the given menu .
4513	Adds the parameters from the specified table .
4514	Creates a GempakParameter from a list of words .
4515	Returns the parameter with the given name .
4516	Read the contents of an input stream .
4517	Reads a byte array from an input stream .
4518	Replace file template .
4519	Set the station information .
4520	Returns true if the buffer is valid .
4521	Show the format information for the given textfield .
4522	Returns the Grib2 Bitmap .
4523	Set the NetcdfFile to use .
4524	Set the debug flags .
4525	Parse a name .
4526	Returns true if the DStructure is a group .
4527	Get the NetCDF string length dimension .
4528	Gets the shared dimension of the given dimension .
4529	constructs a list of dimensions from a DArray .
4530	Returns true if the given type is an unsigned type .
4531	Read Data from NetCDF Server
4532	Get an icon from a resource .
4533	Get an image from the classpath
4534	Creates a custom cursor with the specified name .
4535	Reads the data from the specified layout using the specified fill value .
4536	Reads the data from the input stream and fills it with the specified value .
4537	Read a data array with the specified fill value .
4538	Make a primitive array of the specified type .
4539	Converts a byte array to a UTF - 8 char array .
4540	Convert a char array to a byte array .
4541	Convert a byte array to a char array
4542	Read an array from a section specification .
4543	Create an ArrayStructure from a ParsedSectionSpec .
4544	Get a scalar string .
4545	Returns the scalar structure at the given index .
4546	Returns the value of the given member as an array .
4547	Returns the structure members for the given variable .
4548	Adds the dimensions to the NetcdfFile .
4549	Creates a crawlable dataset .
4550	Normalize the given path .
4551	Adds an explicit dataset to the cache .
4552	Add a dataset scan .
4553	Finishes building the netcdf dataset .
4554	Creates the list of datasets for this aggregation .
4555	Returns the typical dataset for this aggregation .
4556	Create a NetcdfDataset .
4557	Put a resource control for a dataset .
4558	Adds a point to the curve .
4559	Returns the upper bound of the bounding box .
4560	Gets the upper bound of the bounding box .
4561	Validates this filter .
4562	Checks if the given dataset matches this filter .
4563	Adds all features from a feature dataset .
4564	Parse a constraint .
4565	Evaluate all clauses .
4566	Prints the constraint .
4567	Amends a structure from an ODL file .
4568	Sets the dimensions of a variable to a list of values .
4569	Check if there is an unknown dimension with the given name .
4570	Finds the group with the given name in the parent group .
4571	Reads the content of an Xlink link .
4572	Returns the standard URI for this dataset .
4573	Set the projection .
4574	Add a component to the layout .
4575	Invalidates the layout .
4576	Remove a component from the layout .
4577	Returns the minimum size of the layout .
4578	Layout the given container .
4579	Checks if the given coordinate system is a radial coordinate system .
4580	Returns the maximum radial value .
4581	Opens a connection to the given URL .
4582	Convert from Earth to Saturation .
4583	Convert sat to earth .
4584	Converts a GEST to a GEOS value .
4585	Converts a scan geometry to a sweep angle axis .
4586	Converts a sweep angle axis to a scan geometry .
4587	Sets the coordinate runtime coordinates .
4588	Write a point obs dataset .
4589	Rewrite a point feature dataset .
4590	Returns the array sequence for the given member name .
4591	Returns the full name .
4592	Returns the unique ID for this request .
4593	Returns the access for the given service type .
4594	Find a dataset by its name .
4595	Gets the parent catalog .
4596	Returns the metadata of the specified type .
4597	Returns the service with the given name .
4598	Returns the list of variables for the given vocabulary .
4599	Find all catalog references in a dataset tree .
4600	Escapes the given path for use in a URL .
4601	Add a stagger to an array .
4602	extrapolates the values of an array .
4603	Computes the roh for a given location .
4604	Returns the detail information for this parser .
4605	Creates a new structure for the given partName and dimensions .
4606	Creates a missing variable .
4607	Creates a variable for the given parameter .
4608	Add the global attributes to the NetCDF file .
4609	Returns the size of a variable .
4610	Returns the 1D array of the given type and length .
4611	yy_lr_goto_state_ .
4612	yysyntax_error .
4613	prints a stack entry for the given rule .
4614	Reads a DMR or DAP request .
4615	Reads an error document from the stream .
4616	Reads data from the stream into the specified byte array starting at the specified offset .
4617	Reads the header from the input stream .
4618	Convert an ISO - 8601 string to a Date .
4619	Reads a table from a URL .
4620	Transfer the source group to the target group .
4621	Returns the STN file for the given location .
4622	Open the NCML file .
4623	Returns the beginning of the node at the given index .
4624	Returns the end of the node at the given index .
4625	Create all runtime collections .
4626	Set the edit value .
4627	Returns the data type for the given format .
4628	Convert from ECF to LLA .
4629	Clean a unit .
4630	Clean the name .
4631	Checks if a unit is unitless .
4632	Creates a new notes object .
4633	Returns the variable id for a given note .
4634	Parses a DAS file .
4635	Find the DodsV with the given name .
4636	Returns the DodsV for the given dodsV .
4637	Find a child by its index .
4638	Returns the parent group of this group .
4639	Returns the dimension at the given index .
4640	Returns the index of the dimension with the given name .
4641	Returns the units string .
4642	Get the shape as a Section .
4643	Returns a new variable that is a subset of this variable .
4644	Sets the enum typedef for this variable .
4645	Reads an array from the input stream .
4646	Reads a scalar string from the input stream .
4647	Read data from the proxy .
4648	Reads the data from the specified section .
4649	Writes the CDL document to a String .
4650	Returns a string representation of this variable .
4651	Sets the data type .
4652	Sets the dimensions of this shape .
4653	Resets the shape .
4654	Sets the dimensions of this variable .
4655	Resets the dimensions of this variable .
4656	Sets the dimension at the given index .
4657	Sets the cached data .
4658	Returns a list of all dimensions .
4659	Sets the bounding box .
4660	Finishes the grid .
4661	Returns a list of all datasets contained in this dataset .
4662	Returns true if the given path ends in SYNEXTENSIONS .
4663	Opens the CDMDSP .
4664	Build the DMR .
4665	Builds the sequence types for the given CDM variable .
4666	Builddimrefs a list of cdm dimensions .
4667	Find a matching enum typedef .
4668	Returns the core dimension set .
4669	Scans a BARF file for messages .
4670	Process a Bufr message as a dataset .
4671	This method is called when a POST request is received .
4672	Returns the transformation for this navigation .
4673	Returns true if we want to rotate the map .
4674	Returns the map area .
4675	Convert a world coordinate to a screen coordinate .
4676	Pan the map .
4677	Zoom to the specified coordinates .
4678	Recalculates the coordinates from the bounding box .
4679	Add a listener to the listener manager .
4680	Remove a listener .
4681	Sends an event to all registered listeners .
4682	Send an event to all registered listeners .
4683	Prints the given command to the given writer .
4684	Prints the given command to the given output stream .
4685	Print variable data .
4686	Prints a variable s data section .
4687	Print the structure data .
4688	Print a plain array .
4689	Print an Array to a PrintWriter .
4690	Writes a NetCDF file to a writer .
4691	Read a double attribute .
4692	Add a parameter to the coordinate transform .
4693	Runs the access log parser .
4694	Reads an object of the given basetype from the given slices .
4695	Checks if the given record is positive up .
4696	Returns true if this unit is compatible with the given one .
4697	Returns the label for the given quantityID .
4698	Sets the bit offset .
4699	Read nb bits from the input stream and convert them to a long .
4700	Read a long value from the input stream .
4701	Opens a HTTP connection to the given URL .
4702	Get the DAS .
4703	Get the DDS .
4704	Returns the complete CE string .
4705	Convert a projection point to a LatLon point .
4706	Get the catalog of a dataset .
4707	Convert the given range to an idv compatible range .
4708	Returns true if the file is valid .
4709	Handle the saturation information .
4710	Handle sensor information .
4711	Read the root element from the given location .
4712	Clean XML character data .
4713	Xunescape a string .
4714	Escapes a URL query string .
4715	Unescapes a URL query string .
4716	Decode a backslash - encoded string .
4717	Escapes backslash characters in a string .
4718	Add lightning global attributes .
4719	Swap a short from a byte array at a specific offset .
4720	Swap a 32 - bit integer from a byte array .
4721	Swap a double from a byte array .
4722	Swap a float value .
4723	Swap a double value .
4724	Convert a short value to a byte array .
4725	Convert an integer to a byte array .
4726	Convert a long to a byte array .
4727	Returns a new VerticalTransform that is a subset of this transform .
4728	Writes the document to an XML string .
4729	Returns a new array with the values of a and b .
4730	Start the XML file .
4731	Writes the features to the file .
4732	Add levels to the levels list .
4733	Adds the dimensions for the given group to the NetcdfFile .
4734	Adds the record to the NetCDF file .
4735	Find a coordinate transform for a given group .
4736	Returns the index of the given record .
4737	Cancels the timer .
4738	Returns the file for the given location .
4739	Returns the existing file or cache if it does not exist .
4740	Show the cache .
4741	Cleans up the cache .
4742	Calculates the beat between two points .
4743	Calculates the beat between two points .
4744	Main method that calculates the beat between two points .
4745	Find a point in the Earth .
4746	Find a point in the Earth .
4747	Find a point in the Earth .
4748	Loads the picture in a new thread .
4749	Loads a picture from the specified URL .
4750	Loads the source picture .
4751	Stop loading the source picture .
4752	Stop loading the picture except for the given url .
4753	Returns the size of the image .
4754	Sets the buffered image of the source picture .
4755	Returns the standard URI for this dataset .
4756	Creates an associated field descriptor .
4757	Transfer information from one list to another .
4758	Count the number of bits in this data descriptor .
4759	Compares two DataDescriptors .
4760	Loads the header from the input stream .
4761	Load the data .
4762	Returns the field with the given name .
4763	Returns the values of a field as a double array .
4764	Returns the values of the character field with the given name .
4765	Returns the value of a boolean field .
4766	Returns the name of the field at the given index .
4767	Returns the names of all the fields .
4768	Prints the dump of a Dbase file .
4769	Gets the attributes .
4770	Set a new attribute .
4771	Removes the specified attribute from this object .
4772	Returns the group of this node .
4773	Returns the container of this node .
4774	Returns the escaped short name .
4775	Returns the path of this node .
4776	Returns the group path of this node .
4777	Computes the fully qualified name of this node .
4778	Returns true if this DapSort is a top level DapSort .
4779	Builds a DAP dataset from a byte array .
4780	Put a bean collection .
4781	Returns the list value for the given key .
4782	Returns the value for the given key .
4783	Read the data from the specified file .
4784	Prints all variables in the DSP .
4785	Prints a compound instance .
4786	Writes the given element to a string .
4787	Writes the given element to the given file .
4788	Writes the given element to the given output stream .
4789	Writes the given XML element to the given writer .
4790	Creates a dimension element .
4791	Make a coordinate transform for the given attribute container
4792	Returns an integer array for the given attribute name .
4793	Create a new base unit .
4794	Create a new unit with the given name and symbol .
4795	Returns the base unit database .
4796	Creates a derived unit database .
4797	Get the singleton instance of SI .
4798	Finds the coordinate element for the given target .
4799	Finds the closest coordinate to the given target .
4800	Returns the subset of the values of the axis .
4801	Open a feature dataset .
4802	Open a feature dataset .
4803	annotate a dataset to a NetcdfDataset
4804	Read data from a Grib1 file .
4805	Assembles the URI .
4806	Canonicalizes a string .
4807	Normalize the given units .
4808	Compile the DAP dataset .
4809	Finishes parsing the metadata .
4810	Returns the value associated with the specified key .
4811	Associates the specified value with the specified key . If the key already exists it will be replaced .
4812	Gets the date .
4813	Prints the attributes of a DAP node .
4814	Print an XML attribute .
4815	Returns true if the given attribute is special .
4816	Prints the dimensions of a variable .
4817	Returns true if the file is a valid area file .
4818	Set the area directory attributes .
4819	Set the attributes for the navigation block .
4820	Returns the Calibrator type for the given calName .
4821	Set the attributes of the Calibrator .
4822	Find the coordinates for a given predicate .
4823	Returns the name of the coordinate axis of the given type .
4824	Find the coordinate axis of the specified type .
4825	Find a coordinate by type .
4826	Find the dimension by type .
4827	Finds the best coordinate system in the dataset .
4828	Finds the dependent axis of the given type .
4829	Get a variable from the DSequence .
4830	Old version of deserialize .
4831	Reads a marker from the input stream .
4832	Writes a marker to the output stream .
4833	Report a fatal error .
4834	Creates a dataset with the given name start and count values .
4835	Main entry point for the demo .
4836	Returns the contents of the given member as a Java String array .
4837	Returns a list of all the parameters in this sensor .
4838	Sets the list of stations .
4839	Sets the selected station .
4840	Redraws the image .
4841	Deserializes this rectangle from a stream .
4842	Writes this rectangle to the specified stream .
4843	Adds a new UnitDBImpl to this DB .
4844	Adds a unit to the unit set .
4845	Adds a symbol to this unit .
4846	Returns the unit with the given id .
4847	Adds a unit with the given name .
4848	Add a unit by its symbol .
4849	Adds a new unit to the given map .
4850	Add the current look and feels to the given menu .
4851	Finds a Grib2Record from a given DRS position .
4852	Read the data from the dataset .
4853	Serialize the structure to the output stream .
4854	Returns the values of the specified parameter .
4855	Construct a copy of this projection .
4856	Open a Thredds feature dataset .
4857	Open a feature dataset .
4858	Open a dataset .
4859	Annotate the given dataset with the given NetcdfDataset .
4860	Removes duplicates from a list of properties
4861	Adds a new partition to this collection .
4862	Make a GribCollectionMutable from the index .
4863	Returns a new instance of RegExpAndDurationTimeCoverageEnhancer for the given matchPattern substitutionPattern and duration .
4864	Returns a new instance of the RegExpAndDurationTimeCoverageEnhancer with the specified match pattern substitution pattern and duration .
4865	Writes the query capability to a file .
4866	Read the structure data .
4867	Loads a picture from the given URL .
4868	Sets the buffered image .
4869	Zoom the picture to fit .
4870	Paint the component .
4871	TG_FTOI - > TG_FTOI
4872	TG_ITOC - TG_CDTM - TG_CFTM
4873	get TI_ITOC from int array
4874	Returns the day of the month in the TI calendar .
4875	LV_CCRD returns the VCRD for the specified ivcord .
4876	Swaps the specified integer array in place .
4877	Returns the name of a grid packing type .
4878	Returns the data type for the given type .
4879	Reads the data from the input stream .
4880	Externalize the output stream .
4881	Returns the tag enum for the given tag code .
4882	Get the next image .
4883	Returns the number of bytes required to store the given type .
4884	Returns the sum of all values in the given array .
4885	Set the spatial grid size .
4886	Sets the overlap value .
4887	Clear the grid .
4888	Marks the given rectangle as clear .
4889	Finds the intersection of the specified rectangle .
4890	Finds the intersection of the specified point .
4891	Finds the closest object to the given point .
4892	Returns the squared Euclidean distance between the specified point and the grid cell .
4893	Get or create a new base unit .
4894	Returns the type of the given fragment .
4895	Returns the service type for the given URL .
4896	Decode the path extension .
4897	Checks if a location is a DODS service .
4898	Check if DAP4 is available .
4899	Send a data packet to the client .
4900	Returns the suffix of the given class name .
4901	Returns the prefix of a fully qualified class name .
4902	Locates a file in a directory .
4903	Locates a relative path .
4904	Extracts the bytes from the given ByteBuffer .
4905	Returns the structure path of the given variable .
4906	Returns null if the path is null or empty .
4907	Join an array of strings with a separator .
4908	Returns true if the given path contains a drive letter .
4909	Returns a list of all protocols in the given URL .
4910	Convert an Index to a List of Slices .
4911	Convert an offset into a list of slices .
4912	Returns true if the given list of slices is contiguous .
4913	Returns true if the given list of slices contains only one point .
4914	Convert a list of slices to an index .
4915	Reads the data from an input stream .
4916	Set the station information .
4917	Set short names .
4918	Read a feature collection configuration from a catalog .
4919	Adds a new declaration to this group .
4920	Update the groups .
4921	Returns the variable with the given name .
4922	Returns the axis type for the given variable .
4923	Returns the GribStatType for the given time range indicator .
4924	Returns the subset of the lon axis .
4925	Gets the ranges .
4926	Set default values .
4927	Gets the session id .
4928	Sets the maximum number of redirects that should be allowed for this session .
4929	Sets whether sessions should be used .
4930	Closes the request .
4931	Set authentication and proxy .
4932	Track a session .
4933	Sets the credentials provider for the given scope .
4934	Validates the given URL .
4935	Creates an Index for the given shape .
4936	Compute the stride for the given shape .
4937	Creates a new index from the given ranges .
4938	Reduce this index to a new one .
4939	Returns a new index for the specified dimension .
4940	Transposes two indices .
4941	Returns a new index with the specified dimensions .
4942	Returns an index iterator for the given array .
4943	Returns the index of the current element .
4944	Sets the index to the given array .
4945	Sets the value of the specified dimension .
4946	Sets the values of this index to the given values .
4947	Returns the name of the time interval .
4948	Returns a CalendarDateRange for the given Calendar .
4949	Returns a list of date - time strings for the file .
4950	Creates a list of GempakParameters for a given DMPart .
4951	Returns the list of all known stations .
4952	Creates a new GempakStation from the given header .
4953	Returns the names of all keys in the station .
4954	Returns the list of dates .
4955	Finds the index of the station with the given id .
4956	Returns the file type .
4957	Increase the depth by n .
4958	Sets the indentation level .
4959	Read or create an index from a single file .
4960	Add a directory scan .
4961	Checks if a scan is needed .
4962	Scan first time .
4963	Sets the debug flags .
4964	Adds a new variable to the model .
4965	Writes the data to the file .
4966	Validates an XML document .
4967	Returns a string representation of this constraint .
4968	Sets the original variable of this StructureDS .
4969	Override reallyRead to read the data from the org variable .
4970	This method does the real work of reading the data from the given section .
4971	Returns true if the conversion is needed .
4972	Convert the given array to the given section .
4973	Convert the members of a StructureMembers object to a StructureMembers object .
4974	Finds the variable with the given orgName .
4975	Returns true if the given variable has data .
4976	Enhances all variables in this dataset .
4977	Returns true if the resource control is ok .
4978	Make an empty sequence .
4979	Creates an ArraySequence from the given parameters and values .
4980	Creates a new sequence from the parameters of the given part .
4981	Adds the vertical coordinate attribute to the given variable .
4982	Read XML as a synchronous catalog .
4983	Read a catalog from an XML string .
4984	Reads an XML catalog from a StringReader .
4985	Write the catalog to the output stream .
4986	Returns the metadata converter for the given key .
4987	Returns the dimensionless ID .
4988	Multiply this unit by the given unit .
4989	Divide this unit by the given unit .
4990	Convert the input float array to a derived unit .
4991	Returns true if this unit is compatible with the given unit .
4992	Writes a feature to the output .
4993	Write a Point to the XML file .
4994	Write a line .
4995	Write a polygon .
4996	Pull the value of a named attribute from a node .
4997	Returns all subnodes of the given parent node .
4998	Parses a response node .
4999	Pass all reserved attributes to the DapNode .
5000	Returns a string representation of a subset of a variable .
5001	Creates a new ArrayStructureMA from the given array structure .
5002	Set a member array .
5003	Creates a new ArrayStructureMA with the given shape .
5004	Returns the GeometryType associated with the given name .
5005	Make a new station feature .
5006	compiles the given CEAST .
5007	Compile a filter expression .
5008	Add a dimredef to the constraint .
5009	Creates a view of the array .
5010	Returns true if this region is contained in the given region .
5011	Extend the bounds of this bounds by the given point .
5012	Extend this rectangle with the specified rectangle .
5013	Returns the intersection of this rectangle with the specified rectangle .
5014	Adds two arrays .
5015	Checks if the two arrays are conformable .
5016	Returns true if shapeA is conformable to shapeB
5017	Convert an Array to another Array .
5018	Copies the elements of the given array into the given result array .
5019	Copies the elements of the specified array into the specified result array .
5020	Copies the elements of the given array into the given result array .
5021	Returns the minimum and maximum value of the given array .
5022	Sets the value of each element of the given array to the given value .
5023	Creates a catalog builder for this catalog .
5024	Creates a new instance of ProjectionImpl .
5025	Unescapes a DAP identifier .
5026	URL - decode a string .
5027	Unescape the given URL .
5028	Escapes backslash characters in a string .
5029	Unescapes any backslash characters in a string .
5030	Tokenizes an escaped name .
5031	Returns the index of the first occurrence of the specified character in the escaped name .
5032	Converts a backslash - escaped string to a DAP string .
5033	Read an atomic scalar .
5034	Returns the path of the given cursor .
5035	Returns the value of the given property in the given class .
5036	Returns the J class for the given component .
5037	Compiles the dataset .
5038	Compiles a structure array .
5039	Compiles a structure .
5040	Compile a sequence array .
5041	Compiles a sequence .
5042	Reads a Little Endian long from the stream .
5043	Returns the field with the given name .
5044	Returns the value of the named field .
5045	Sets the value of the named field .
5046	Add a field to the cursor .
5047	Adds a Field . CheckBox field .
5048	Adds a Date Field .
5049	Adds a Double Field .
5050	Adds a Int field .
5051	Adds a Password Field .
5052	Add a text field .
5053	Add a text combo field .
5054	Add a TextArea Field .
5055	Add a heading to the layout .
5056	Add a component to the layout .
5057	Adds an empty row to the layout .
5058	Find the active frame .
5059	Gets the cell spacing .
5060	Returns an array of all factors .
5061	Multiply this dimension by another dimension .
5062	Returns an array of factors with the specified power .
5063	Returns true if this dimension is reciprocal of the specified dimension .
5064	Returns true if all factors are dimensionless .
5065	Creates a new instance of Grib1ParamTables .
5066	Factory method to create a Grib1ParamTables object from a jdom2 element .
5067	Add a parameter table lookup .
5068	Add a parameter table to the lookup table .
5069	If the given power is 0 this unit is returned . Otherwise this unit is returned .
5070	Convert an array of float values to a derived unit .
5071	Initialize the unit table .
5072	Create a vertical variable .
5073	Peek the name of the descriptor .
5074	Grabs a short from the byte array at the given offset .
5075	Grabs an int from the given byte array .
5076	Grabs a float from a byte array .
5077	Grabs a double from a byte array .
5078	Create an alias and name .
5079	Add a new symbol to the database .
5080	Create a converter from the given unit to the given unit .
5081	Set the structure data .
5082	Set the point feature data .
5083	Draws all the shapes .
5084	Get the list of shapes .
5085	Reads the contents of the input stream and processes them .
5086	Read bytes from the input stream .
5087	Reads more bytes from the input stream .
5088	Reads the specified number of bytes from the input stream into the specified byte array .
5089	Skips the specified number of bytes .
5090	Adds the dimensions to the NetcdfFile .
5091	Returns the index of the coordinate in the grid record .
5092	Returns true if the file is valid .
5093	Reads the header from the specified file .
5094	Read data from a single section .
5095	Read one row of data .
5096	Creates the data structures from a NetcdfDataset .
5097	Create a base type for a variable .
5098	Fire the map area event .
5099	Set the map area .
5100	Set the map area .
5101	Set the center of the map area .
5102	Set the projection .
5103	Add the actions to the given menu .
5104	Redraws the gauge in a later time .
5105	Set the current screen size to a new rectangle .
5106	Sets the selected variable .
5107	Returns the double value at the given offset .
5108	Returns the double value stored at the given index .
5109	Returns the object at the given index .
5110	Returns the name of the sector .
5111	Read a scaled integer from a byte buffer .
5112	Finds the parameter with the given name ignoring case .
5113	Returns true if there are more elements in the set .
5114	Swaps the byte order .
5115	Returns the number of time steps per file for a given file .
5116	Returns the full path of the file with the specified index .
5117	Returns a list of file names .
5118	Get the path to the DDF file .
5119	Returns the full path for the given filename .
5120	Add a chsub to the list of chsubs .
5121	Convert a reference date to a time value .
5122	Reads a WMO from a file .
5123	Returns a copy of the uncompdata .
5124	Special graphic symbol code 12n 13n 14 .
5125	pcode_25 - pcode_25
5126	Reads the nids product header from the given file .
5127	PCODE_5 = 5
5128	This method is used to create a pcode for a text and special symbol .
5129	pcode_10n9 - pcode_10n9
5130	Convert a short array to an array of levels .
5131	Returns the dualpol levels of the given short array .
5132	Adds a new variable to the dataset .
5133	Add a parameter to the dataset .
5134	Uncompress a byte array from a ByteBuffer .
5135	Get an unsigned integer from a byte array .
5136	Get an int from a byte array .
5137	Convert a byte array to a data type .
5138	Do the DMR processing .
5139	Returns the request state for the given request .
5140	Sends an error to the client .
5141	Set the anchor point to point p .
5142	Stretch the component by the given point .
5143	Returns the bounds of this rectangle .
5144	Returns the last bounds .
5145	Date only format .
5146	Replace data variables .
5147	Ensure that the memory array size is okay .
5148	Reads two integer values from the specified file .
5149	Reads an unsigned integer from the specified file .
5150	Reads three integer values from the specified file .
5151	Reads two unsigned integer from the specified file .
5152	Reads three bytes from the specified file .
5153	Reads a 4 - byte floating point number from the specified file .
5154	Returns a 4 - bit floating point number .
5155	Reads an 8 - bit integer from the given file .
5156	Count the number of bits in the given bitmap .
5157	Create a copy of this projection .
5158	Returns the WKS representation of this Protein .
5159	Escapes a string for use in an entity .
5160	Unescapes a backslash - escaped string .
5161	Split a string into a list of strings .
5162	Create a FmrcInv object .
5163	Returns the special service name for the given path .
5164	Returns the number of projected components .
5165	Gets the reference time .
5166	Creates a new ArrayStructureBB .
5167	Runs the main method .
5168	Read a Grib1 record .
5169	Checks if the given NetcdfFile is mine .
5170	Make UTM projection .
5171	Re - acquire the area file .
5172	Checks if this date is before the specified date .
5173	Returns true if this date is before the specified date .
5174	Returns true if this date is after the specified date .
5175	Set the value at the given index .
5176	Adds a coordinate system to this variable .
5177	Sets the units string .
5178	Returns the units string .
5179	Initializes this instance with the given read mode .
5180	Read a catalog .
5181	Process a list of datasets .
5182	Recursively read the catalog files in the given directory .
5183	Returns true if lon is between lonBeg and lonEnd .
5184	Converts a latitude value to a string .
5185	Convert a longitude value to a human - readable string .
5186	Compares this quantity with the specified quantity .
5187	Returns the selected dataset .
5188	Sets the selected dataset .
5189	Creates a tree path for the given node .
5190	Open all the catalog tree .
5191	Opens a catalog from the given location .
5192	Set the catalog .
5193	Find the alias of the coordinate axis .
5194	Write a VInt to the stream .
5195	Writes a sequence of characters .
5196	Reads characters from the input stream .
5197	Set the debug flags .
5198	Adds a member .
5199	Hides a member .
5200	Returns a list of member names .
5201	Returns the member with the given name .
5202	Reads the bitmap from the Grib1 Bitmap section .
5203	Restore the state of the table .
5204	Returns the rows that are currently selected .
5205	Returns the model index of the columns .
5206	Returns the value of a member as an array .
5207	Returns the value of the given member as a double .
5208	Returns the value of the given member as a double array .
5209	Returns the value of the given member as a float .
5210	Returns the contents of the given member as a float array .
5211	Returns the byte value for the given member .
5212	Returns the value of the given member as a byte array .
5213	Returns the value of the given member as an integer .
5214	Returns the value of the given member as an int array .
5215	Returns the short value of the given member .
5216	Returns the contents of the given member as a short array .
5217	Returns the long value of a scalar member .
5218	Returns the long array stored in the given member .
5219	Returns the char value for the given member .
5220	Get the contents of an array as a char array .
5221	Writes a single dataset to the file .
5222	Returns true if the given dataset can be used .
5223	Creates a copy of this dataset .
5224	Transfer metadata from one DatasetNode to another .
5225	Get the metadata that can be inherited from this dataset .
5226	Adds a new product to the grid .
5227	Prints information about missing entries .
5228	Prints a summary of the missing records .
5229	Find a record in the grid .
5230	Returns a string representation of the grid .
5231	Returns the long name of the parameter .
5232	Subset by intervals .
5233	Checks if two byte arrays are equal .
5234	Parses a DMR document .
5235	Process the attributes of the given dataset .
5236	Add a list of coordinates to the partition .
5237	Sets the Gaussian Lats of the GdsHorizCoordSys .
5238	Parse a variable selector .
5239	Creates a string representation of a section specification .
5240	Returns true if the point is inside the bounding box .
5241	Closes this method .
5242	Executes the HTTP method and returns the response code .
5243	Identify the encoding station .
5244	Returns the name of the variable that matches the given axis type and dimension .
5245	Sets the input stream .
5246	Reads a single character from the input stream .
5247	Start the progress monitor .
5248	Parse a string into a URI .
5249	Returns a new URI that is not excluded from the given URI .
5250	Returns null if the string is null .
5251	Returns the canonical path of the given prefix and suffix .
5252	Returns true if the dataset has been modified since the last modified date .
5253	Copies information from another GribCollectionMutable .
5254	Returns the names of all files .
5255	Set the index file .
5256	Returns the path of the index file in the cache .
5257	Closes the index .
5258	Returns the number of counters .
5259	Add a global attribute .
5260	Add a global attribute .
5261	Deletes a global attribute .
5262	Renames a global attribute .
5263	Adds a new variable attribute .
5264	Adds a variable attribute .
5265	Deletes an attribute from a variable .
5266	Rename a variable attribute .
5267	Make the file subtype .
5268	Write the header and body of the feature collection .
5269	Write members .
5270	Write the station obs dataset as an XML string .
5271	Write the XML representation of the station collection .
5272	Write a DSR to the DAP file .
5273	Sends a DMR or DSR request .
5274	Sends an error to the client .
5275	Closes the stream .
5276	Flushes the buffer to the client .
5277	Create a copy of this projection .
5278	Returns true if the array contains the specified element .
5279	Returns the element at the specified index .
5280	Shifts this range by the specified origin .
5281	Read data from the file .
5282	Read data from the layout .
5283	Returns a subset of this primitive vector .
5284	Returns the list of catalog extensions .
5285	Delete the old database file for the specified trackerNumber .
5286	Set the values .
5287	Get the data chunk iterator without applying a filter .
5288	Convert an array of ints to a double array .
5289	Gets the dataset boundaries .
5290	Checks that the requested variables are contained in the requested dataset .
5291	Get the structure with the given name .
5292	Get the real path of a resource .
5293	Given a list of vertCoordList and a group make the dimensions for each vertCoordList .
5294	Reads the PIB from the file .
5295	Finishes this dataset .
5296	Transfers the metadata from the parent dataset to the public metadata .
5297	Transfers metadata from another dataset to this dataset .
5298	Transfer inherited metadata from a dataset to a target dataset .
5299	Sets the list of contributors .
5300	Add a dataset to the dataset list .
5301	Remove a dataset from this catalog .
5302	Replace the specified dataset in this catalog .
5303	Adds a new service to the registry .
5304	Remove a service from the registry .
5305	Sets the list of local services .
5306	Removes the given metadata from the local dataset .
5307	Get a user property .
5308	Validates this dataset namer .
5309	Returns a list of descriptor names .
5310	Construct the path to the server .
5311	Get the capabilities from the server .
5312	Get a feature .
5313	Checks the parameters for errors .
5314	HTTP handler .
5315	Get the capabilities for the given URL .
5316	Returns the length of the object .
5317	Returns the last modified date of the object .
5318	Sets up all variables in the given dataset .
5319	Returns a file .
5320	Send a string to the client .
5321	Sets the response content length .
5322	Get the URI of the request .
5323	Gets the request path .
5324	Gets the request base .
5325	Returns the value of the specified parameter ignoring case .
5326	Saves the preferences for this split .
5327	Writes a directory to the response .
5328	Sets the bit offset for the given key .
5329	Creates a new nested bit counter .
5330	Counts the number of bits in this row .
5331	Append a line to the history .
5332	Creates a DOM Document representing all stations in the data set .
5333	Returns the XML representation of the capabilities .
5334	Returns the record at the given subset params .
5335	Returns the coordinate at the specified index .
5336	Adds an item to the list .
5337	Handle an exception .
5338	Returns the slice at the given index .
5339	Returns the index of the next slice in the given range .
5340	Get the NCEP gen process .
5341	Returns the feature type for the given DMRF endpoint .
5342	Set has value .
5343	Returns a Grib1Gds instance for the given gridNumber and center .
5344	Copy bytes from the input stream to the output stream .
5345	Reads the contents of an input stream into a String .
5346	Reads the contents of an input stream into a byte array .
5347	Writes the contents of the given string to the given OutputStream .
5348	Copy the contents of a file to an output stream .
5349	Copy a range of bytes from a RAF file to an OutputStream .
5350	Copies a directory tree .
5351	Reads the contents of a file into a byte array .
5352	Read a file and return it as a String .
5353	Writes a string to a file .
5354	Writes the contents of a string to a file .
5355	Writes the contents of the input stream to the output file .
5356	This method is called when a parse exception occurs .
5357	This method is called when a DAP2Exception occurs .
5358	Sends a bad URL page to the client .
5359	Get the catalog .
5360	Print the catalog for this server .
5361	Prints the status of the server .
5362	Print a bad URL page .
5363	Gets the reference date .
5364	Read vlen data .
5365	Reads a NcML document from a String .
5366	Open a NetCDF file and return a NcmlCollectionReader
5367	Allow a string to contain only letters or digits .
5368	Clean up the given hash .
5369	Returns a new string that contains only the characters in okChars .
5370	Filter 7 bits in a string .
5371	Make sure that the given name is a valid CDM object name .
5372	Returns the index of the first character in the second string .
5373	Pads a string to a length of desiredLength .
5374	Pads a string to the right with the specified string .
5375	Removes all occurrences of sub from s .
5376	Removes the specified character from the specified string .
5377	Removes the specified character from the end of the string .
5378	Collapses all whitespace characters in a string .
5379	Replaces all occurrences of out in in with in .
5380	Replace all occurrences of replaceChar in x with replaceWith
5381	Replaces all occurrences of the specified pattern with the specified value .
5382	Replaces all occurrences of match in original with subst .
5383	Substitutes a string with a set of matches .
5384	Removes all occurrences of a character from a StringBuilder .
5385	Removes all occurrences of the given character from the given StringBuilder .
5386	Replaces all occurrences of a character in a StringBuilder with another string .
5387	Substitutes all occurrences of match in sbuff with subst
5388	Removes leading and trailing characters from a string .
5389	Process a collection update event .
5390	Returns a copy of the current state .
5391	Updates the state .
5392	Generates a list of unique templates for the given collection .
5393	Returns the list of datasets .
5394	Release the resources .
5395	Create a deep copy of the structure data .
5396	Copies the contents of an ArrayStructure to an ArrayStructureBB .
5397	Copy an ArrayStructure to an ArrayStructureBB
5398	Returns a copy of the given structure data to an ArrayStructureBB .
5399	Creates a new ArrayStructureBB from the given StructureData and StructureMembers .
5400	Returns the size of the time interval in hours .
5401	Returns the section of this coordinate axis with the specified range .
5402	Creates a new instance of the TableAnalyzer .
5403	Returns the first feature type in the tree .
5404	Analyze a feature type .
5405	Synchronizes the file with the grid reader .
5406	Returns an array of values of the specified type in the specified range .
5407	Swaps a long value from a byte array .
5408	Swaps a float value from a byte array .
5409	Swap a char from a byte array at a specific offset .
5410	Find coordinate axes .
5411	Add a parameter to the coordinate transform .
5412	Returns the common parent of this group and the other group .
5413	Returns true if this group is the parent of the other group .
5414	Sets the parent group .
5415	Adds a new dimension to this group .
5416	Adds a dimension to this group if it doesn t already exist .
5417	Adds a new group to this group .
5418	Adds an enumeration typedef to this group .
5419	Adds a new variable to this group .
5420	Removes the dimension with the given name .
5421	Make a group relative to this group .
5422	Convert DDS alias fields to DAS alias fields .
5423	Print the DAS object to a PrintWriter .
5424	Returns the variable with the given name .
5425	Write a grid to the file .
5426	Replace missing values .
5427	Replace missing values with zero values .
5428	Get the xstart of the given lon array .
5429	Write a GeoReferencedArray to the file .
5430	Writes the exception to the HttpServletResponse .
5431	Returns the value of the nc_inq_libvers attribute .
5432	Creates the top index file from the config .
5433	Returns the type of the collection .
5434	Update a GRIB collection .
5435	Update the leaf collection .
5436	Open a GribCollection from a RAF file .
5437	Open a GribCollectionImmutable from a data file .
5438	Open a GribCollection from a data file .
5439	Returns true if the given URL matches the given pattern .
5440	Add a triple .
5441	Finds the value for the given key in the cache .
5442	This method is used to set the value of all known properties to null .
5443	Loads the specified rc file .
5444	Inserts a Triple into the store .
5445	Returns the local list of datasets .
5446	Finds a dataset by its name .
5447	Set the projection .
5448	Returns an iterator over all the shapes in the feature set .
5449	Create a list of shapes for each feature .
5450	Compares this string with the specified string .
5451	Start the progress monitor task .
5452	Checks if the collection index file needs to be updated .
5453	Normalizes the given list of observations .
5454	Sets the object at the specified index .
5455	Returns the structure data at the specified index .
5456	Copy structures from the array to the given index iterator .
5457	Returns the value of the specified member as an object .
5458	Convert a scalar value to a double .
5459	Convert a scalar value to an integer .
5460	Get a float value from a record .
5461	Get a single byte value from a record .
5462	Returns the short value of the specified member in the record .
5463	Returns the value of the specified member as a char .
5464	Get a scalar string .
5465	Returns the array structure for a given record .
5466	Get the array sequence .
5467	Returns the array object for the specified member .
5468	Returns the minimum value of the given value .
5469	Evaluates the given CEAST .
5470	Returns a string representation of this constraint .
5471	Returns true if the given node is a reference to this node .
5472	Evaluate the expression and return true if the expression matches .
5473	Returns the number of expansion variables in the given structure .
5474	Computes the list of enumeration types .
5475	Computes the groups .
5476	Compiles a constraint .
5477	Returns true if the given file is a valid GRIB2 or Partition2 index .
5478	Make the actions system .
5479	Returns the byte order of the file .
5480	Sets the byte order of the file .
5481	Finds the key with the given name .
5482	Find the file header with the given name .
5483	Returns the file header for the given name .
5484	Print the parts .
5485	Returns the data pointer for the given row and column .
5486	Returns the RMISSD value of the specified word .
5487	Read a string from the file .
5488	UnPK a given part of the DM .
5489	Returns a string representation of a bit .
5490	Writes a NetcdfFile to a WritableByteChannel .
5491	Parse a BaseType element .
5492	Parses a grid element .
5493	Parse aliases .
5494	Returns a list of DataDescriptors for the given keyDesc .
5495	Replicates a list of keys .
5496	Get the filename of the dataset .
5497	Returns the CFFeature type .
5498	Returns true if the absolute difference between two float values is less than or equal to the maximum absolute difference .
5499	Returns true if the given node references this node .
5500	Parse a unit specification .
5501	Probe an object .
5502	Returns true if the given variable is tiled .
5503	Returns the best coordinate time from the complete coordinates .
5504	Converts a LatLonRect to a ProjectionRect array .
5505	Show the time series of logs .
5506	Make a map from a list of Attributes .
5507	Returns the array of values for this column .
5508	Returns the numeric value at the given index .
5509	Write the CDL .
5510	Sets the string value of this attribute .
5511	Sets the values of the attribute .
5512	Sets the values of this array .
5513	Scan the current level .
5514	Generate the catalog for the given ProxyDatasetHandler .
5515	Add a message to the queue .
5516	Set the ThreddsDatatype for the given dataset .
5517	jumpto threddsDatatype
5518	Jumpto thredds data type .
5519	Set the dataset .
5520	Prepares the GUI .
5521	Creates the tools frame .
5522	Convert a list of coordinate axes to a full name .
5523	Returns the coordinate axis that is lesser than the rank of the two given coordinate axes .
5524	Find the axis with the given type .
5525	Gets the ProjectionCT .
5526	Returns true if this projection is a GeoXY projection
5527	Returns true if this coordinate axis is regular .
5528	Returns true if the given set is a subset of the given subset .
5529	Checks if a list of axes are contained in this coordinate .
5530	Returns true if the coordinate axis with the given name exists .
5531	Returns true if the domain is contained in wantDimensions .
5532	Checks if a list of axis types is contained in this axis .
5533	Returns true if there is a coordinate axis with the given type .
5534	Clone the DAG .
5535	Returns the selected bean .
5536	Get the list of selected beans .
5537	Returns the selected cells .
5538	Set the selected bean .
5539	Restore the state of the table .
5540	Returns the UnknownUnit for the given name .
5541	Closes the stream .
5542	Returns true if the given variable is an extra variable .
5543	Returns true if the given variable is a coordinate .
5544	Find the coordinate axis in the given table .
5545	Add all non - data variables to the list .
5546	Add the parent join .
5547	Creates a new station feature .
5548	Create the node map .
5549	Creates a new SimpleUnit with the given name .
5550	Creates a new SimpleUnit with the given name .
5551	Creates a new unit from the given name .
5552	Checks if two units are compatible with exceptions .
5553	Checks if the given unit is a valid date unit .
5554	Returns true if the given string represents a time unit .
5555	Returns the conversion factor for the given input and output units .
5556	Converts the given value to the given output unit .
5557	Returns true if this unit is unknown .
5558	Returns the value of this unit .
5559	Creates a new rel - op clause .
5560	Creates a new boolean function clause .
5561	Creates a new BTFunctionClause .
5562	Creates a grayscale image from an array of pixels .
5563	Crawl the catalog .
5564	Crawl a dataset .
5565	Crawl direct datasets .
5566	Gets a file or caches it if it does not exist .
5567	Get an existing file or cache it if it doesn t exist .
5568	Sets the debug leaks flag .
5569	Returns a sorted list of all files .
5570	Closes the file .
5571	Seeks to the given position .
5572	Flushes the buffer to the file .
5573	Reads a single byte from the input stream .
5574	Reads a short array from the input stream .
5575	Reads a 4 - byte integer from the input stream .
5576	Reads an integer array from the input stream .
5577	Reads a long array from the input stream .
5578	Reads a float array from the input stream .
5579	Reads a double array from the input stream .
5580	Read a string from the input stream .
5581	Reads a string from the input stream .
5582	Writes an array of boolean values to the stream .
5583	Writes n shorts from the specified short array .
5584	Writes a sequence of characters .
5585	Writes an array of ints to the output stream .
5586	Write long array .
5587	Writes a float array to the output stream .
5588	Writes a double array to the output stream .
5589	Write a string to the output stream .
5590	Writes a character array to the underlying stream .
5591	Search for the next match in the file .
5592	Append the query to the StringBuffer .
5593	Creates a new collection .
5594	Finds the index for this partition .
5595	Checks if the partition is a leaf partition .
5596	Construct the children .
5597	Scan for children .
5598	Reads the files from the index .
5599	Returns a list of all gridsets .
5600	Acquires a file from the cache .
5601	Remove a file from the cache .
5602	Eject a file from the cache .
5603	Release a file from the cache .
5604	Returns the 4 - bit integer represented by a b c d .
5605	Updates the element in the cache .
5606	Removes all entries from the cache .
5607	Make the vertical transform .
5608	Returns true if this axis is a global longitude axis .
5609	Returns true if the z - axis is positive up .
5610	Find the xy index of a given coordinate .
5611	Find the x and y coordinates in the grid .
5612	Find the x - coordinate indices for a given lat - lon coordinate .
5613	Find the xyindex from the lat lon bounding box .
5614	Returns the position of the currently selected item .
5615	Returns the item index for the specified pixel .
5616	Iterate over all files in the collection directory .
5617	Download the logs from the remote server .
5618	Returns the name of the subcenter .
5619	Convert a unit string to a CalendarPeriod .
5620	Returns a new instance with the specified value and field .
5621	Creates a CalendarPeriod from the given UDUNIT string .
5622	Subtracts the given date from this date .
5623	Gets the conversion factor .
5624	Gets the value in milliseconds .
5625	Returns the offset between two dates .
5626	Synchronizes the current index with the current index .
5627	Initialize the tables .
5628	Put the given date root ext into the map .
5629	Find the longest path match .
5630	Find the data root for the given request path .
5631	Convert a DataRootExt to a DataRoot
5632	Returns a CalendarDateRange for the given Calendar .
5633	Reindex a list of coordinates .
5634	Creates a new NetcdfFileWriter .
5635	Add a new group to this group .
5636	Adds an enumeration type definition to the given group .
5637	Deletes an attribute from a group .
5638	Rename a group attribute .
5639	Add a record structure to the file .
5640	Aborts the connection .
5641	Writes the properties of this object to the specified PrintWriter .
5642	Extract the metadata from a ThreddsDataset .
5643	Divide this unit into the given one .
5644	Convert this amount to a derived unit .
5645	Converts the given amount to this derived unit .
5646	Convert a nested variable .
5647	Convert a top - level variable to a DODS variable .
5648	Convert a DodsV to a DAP2 Array
5649	Close all bdb caches .
5650	Opens the database .
5651	Convert a value to a joda . time . Period .
5652	Ensures that the array has at least the given capacity .
5653	Returns the string at the given index .
5654	Make a catalog for a directory .
5655	Returns a catalog that can be used to resolve a proxy dataset .
5656	Returns the coordinate type for this dimension .
5657	Creates a new instance of Grib2Pds .
5658	Calculates the time from the given startIndex .
5659	Apply a scale factor to a value .
5660	Parse a local concept from a file .
5661	Adds a local concept from an input stream .
5662	Clean the line .
5663	Store a new concept .
5664	Write grib1 tables .
5665	Write the lookup table file .
5666	Prints the local concepts .
5667	Main entry point for the ECMwfLocalConcepts example .
5668	Returns the DatasetSourceType for the given name .
5669	Expand the access point dataset .
5670	Expand the dataset source and return the full expanded catalog .
5671	Name all datasets in the dataset container .
5672	Name the dataset list .
5673	Recursively name the dataset tree .
5674	Loads a picture from the specified image URL .
5675	Stops the loading of the given URL except for the given URL .
5676	Called when the source status of the picture has changed .
5677	Notifies all registered listeners of a source load progress notification .
5678	Creates and starts a new thread to scale the picture .
5679	Returns the size of the image .
5680	Returns the size of the image .
5681	Returns a list of the SNDT parts .
5682	Creates the header for a GempakStation .
5683	Returns a list of all valid types .
5684	Checks to see if the given group is valid .
5685	Sets the root directory .
5686	Creates the root directory for the disk cache .
5687	Returns the cache file for the given location .
5688	Delete all files in the cache that are older than cutoff
5689	Clean the disk cache .
5690	Returns true if the given fxy is a BuffR table .
5691	Creates a new coordinate axis .
5692	Returns a copy of this coordinate axis with no cache .
5693	Checks if the data type is numeric .
5694	Prints information about this axis .
5695	Gets the calendar from the CF . CALENDAR or CF . CONVENTIONS .
5696	Sets the list of rows .
5697	Returns the selected row .
5698	Increments the selected row by one .
5699	Returns the model index of this column .
5700	Sets the current index of the slider
5701	Quick sort .
5702	Swaps the elements of the specified array .
5703	Gets an existing file .
5704	Rotates the given lonlat .
5705	Create an XMLStore from a file .
5706	Create an XMLStore from the given input streams .
5707	Create an XMLStore from a resource .
5708	Creates a standard file name for the given store name .
5709	Saves the contents of this store to a temporary file .
5710	Saves the preferences to an output stream .
5711	Write an atomic variable .
5712	Writes the structure of the given data cursor .
5713	Write a structure .
5714	Write a sequence .
5715	Write a record .
5716	Checks if the given file is a valid BufrIndicator file .
5717	Get the wmo id .
5718	Reads a row from the input stream .
5719	Returns the data at the specified index .
5720	Read the data from the file .
5721	Get the data for a Grib2Drs . Type0
5722	Reads an object from a list of slices .
5723	Create a CFGridFile from a grid dataset .
5724	Make a grid file size estimate .
5725	Create a netcdf file from a list of grids .
5726	Sets the list of stations .
5727	Sets the selected station .
5728	Picks the closest station to the given point .
5729	Picks the closest station to the given point .
5730	Returns the selected station .
5731	Get the name of the project .
5732	Returns the list of stations in the given bounding box .
5733	Returns the station with the given name .
5734	Get the data iterator for a given station .
5735	Gets the data iterator for a given station .
5736	Reads the data from the given file .
5737	Computes the dot product of this vector and the given vector .
5738	Returns the norm of this vector .
5739	Normalize the vector .
5740	Sets the services .
5741	Returns the parameter with the given id .
5742	Returns the local parameter with the given id .
5743	Adds a new name to the set .
5744	Add a symbol with a given value .
5745	Gets the prefix of the given string .
5746	Returns true if the given source has an email address .
5747	Returns the value of a parameter .
5748	Calculates the CRC value for this grid definition .
5749	Returns true if this packet is a thin packet .
5750	Returns the index of the field with the given name .
5751	Returns the time type name for the given time range indicator .
5752	Gets the time coord .
5753	Sets the next polygon .
5754	Sets the previous polygon .
5755	Finds the property with the given name .
5756	Set the current projection .
5757	Returns the time offset axis for a given run date .
5758	Register an IOProvider .
5759	Register IOProvider .
5760	Register an IOProvider as preferred .
5761	Checks if an IOServiceProvider is registered for the given class .
5762	De - registers the IOServiceProvider for the given class .
5763	Returns true if the given location can be opened .
5764	Opens a NetcdfFile in - memory .
5765	Open a NetcdfFile in memory .
5766	Opens a NetcdfFile in memory .
5767	Opens a NetcdfFile from the given URI .
5768	Find the global attribute with the given name ignoring case .
5769	Converts the NetcdfFile to a NetCDF file .
5770	Writes the CDL to the given output stream .
5771	Writes the CDL to the specified PrintWriter .
5772	Write the CDL .
5773	Adds an attribute to a parent group .
5774	Adds an attribute to this group .
5775	Adds the given group to the given parent .
5776	Adds a dimension to a parent group .
5777	Removes a dimension from the given group .
5778	Adds a new variable to the given group .
5779	Adds a new variable to this group .
5780	Adds a string variable .
5781	Removes a variable from the given group .
5782	Send an IOSP message .
5783	Make a record structure .
5784	Finishes the group .
5785	Read a single section from the input stream .
5786	Read a variable from the SPI and write it to a writable channel .
5787	Reads a list of arrays .
5788	Read a variable section from the file .
5789	Returns the full name of the given node .
5790	Returns the full name of the group with the given name .
5791	Returns true if the given file should be included .
5792	Returns true if the given file should be excluded .
5793	Applies the and filters to the given MFile .
5794	Append a value to the end of the vector .
5795	Dispatches a check value .
5796	Force the given value to be a byte value .
5797	Check that a String is a Byte value .
5798	Check if a short value is a valid short value .
5799	Check if a string is an integer .
5800	Check if a string is a valid unsigned integer .
5801	Check if a string is a float .
5802	Check if a string is a valid double .
5803	Returns the data type for the given attribute .
5804	Returns true if the dataset is viewable .
5805	Returns true if the string is a valid boolean string .
5806	Returns true if the given string is a valid alphanumeric string .
5807	Returns true if the specified string is a valid alphanumeric string constrained by the specified set of characters .
5808	Returns true if the given path is a valid file path .
5809	Converts a Unicode code point to a percent - encoded string .
5810	Get the value of a parameter .
5811	Compares two grid definition records .
5812	Reads the contents of the input stream and processes them .
5813	Process a message from a buffer .
5814	Removes double quotes from a string .
5815	Marks all stacked variables in the given stack .
5816	Writes the NetCDF file to the editor .
5817	Get value from ThreddsConfig
5818	Writes the CDL document to a String .
5819	Create a new StationHelper .
5820	Validates the result .
5821	Returns the azimuth in degrees .
5822	Returns the elevation of the message .
5823	Returns the latitude values of all the rays .
5824	Returns the longitudes of all the rays .
5825	Returns an array of the altitude values for all the rays .
5826	Gets the azimuths .
5827	Returns an array of the elevations of all the rays .
5828	Select a subset of this structure .
5829	Returns the structure with the specified variable name .
5830	Adds a member variable to this structure .
5831	Sets the member variables .
5832	Sets the parent group of this variable .
5833	Calculates the element size .
5834	Reads the structure at the given index .
5835	Reads an array structure from the file .
5836	Returns an iterator over the structure data .
5837	Returns the data category for the given category .
5838	Gets the class name .
5839	Adds a new parameter .
5840	Gets the header .
5841	Convert a LatLonRect to a ProjectionRect
5842	Returns the version number for the given convName .
5843	Gets the positive value of a zaxis .
5844	Deletes the next file .
5845	Set the color scale parameters .
5846	Renders the plan view .
5847	Returns true if this group is a child of another group .
5848	Returns the type with the given name .
5849	Installs all columns in the given table .
5850	Sets the API key and secret .
5851	Creates a label with the given value .
5852	Creates a label with the given lines .
5853	Creates a label with the given value .
5854	Connect to the Cloud SQL instance .
5855	List of ip types .
5856	Connect to the MySQL server .
5857	Purges a logger from the registry .
5858	Compile all the source code .
5859	Compile the class with the given name and source code .
5860	Adds a source code to the compiler .
5861	Reads the graphic control extension .
5862	Returns the next frame in the bitmap .
5863	Replies the selectablePersons property .
5864	Initialize the list events .
5865	Returns the person with the given id .
5866	Adds a validation message to this validator .
5867	Sets the id of the person .
5868	Creates and injects a ViewModel into the given View .
5869	Create a ViewModelType for the given View .
5870	Loads the countries from the ISO 3166 . xml file .
5871	Loads the list of subdivisions from the ISO 3166 - 2 location .
5872	Defines a field that will be used to retrieve the value of the property .
5873	Sets an immutable field .
5874	Creates a new JavaView step .
5875	Creates a new fxml view step .
5876	Clears the map .
5877	Creates the index events .
5878	Access a member .
5879	Load a view from the FXML file .
5880	Creates the fxml path for the given view type .
5881	Query for a style row .
5882	Returns the pixel value of the specified pixel in the specified image .
5883	Get the pixel values from the image bytes .
5884	Validate the image type
5885	Create an image from the tile width and height .
5886	Set the tile data .
5887	Performs a raw query to the database .
5888	Performs a raw query and returns the result .
5889	Executes the query and returns the result .
5890	Query the database .
5891	Handles a cursor .
5892	Get the feature row for the given geometry index
5893	Register the table with the cursor wrapper
5894	Retrieve a tile row from the database .
5895	Get the coverage data
5896	Get the coverage data
5897	Get the coverage data
5898	Returns the results for the requested coverage data request .
5899	Returns the results of zooming in or out of the requested tile matrix .
5900	Returns the results of zooming in the requested tile matrix .
5901	Returns the results of zooming out the requested tile matrix .
5902	Get the tile matrix for the requested coverage data request
5903	Get the value of the specified tile row .
5904	Sets the icon for the given geometry type .
5905	Get the icon for a geometry type
5906	Open or get bindings db .
5907	Converts a byte array into a bitmap .
5908	Converts a bitmap into a byte array .
5909	Create the table metadata
5910	Delete a table from a geoPackage
5911	Get or create a table metadata
5912	Get the id of the GeoPackage
5913	Reads the table metadata from the cursor .
5914	Creates the extension if it does not already exist .
5915	Get the feature row .
5916	Performs a raw query on the table .
5917	Query for features within the bounding box .
5918	Query for rows within the given envelope .
5919	Count the number of points in the envelope .
5920	Query for rows within the specified range .
5921	Build the where clause .
5922	Query for features within the bounding box
5923	Count the number of features in the bounding box
5924	Query for features within the given envelope .
5925	Query for features within the specified range .
5926	Count the number of rows in the range [ minX minY )
5927	Set the data from a bitmap .
5928	Set the bitmap data .
5929	Sets the bitmap compression configuration .
5930	Returns the number of tiles in the bounding box .
5931	Adjusts the bounding box for the specified zoom level .
5932	Adjusts the tile grid bounding box according to the WGS84 projection .
5933	Adjust the bounding box to match the WGS84 format .
5934	Adjusts the bounding box to match the web mercator bounding box .
5935	Get the bounding box for the specified zoom level .
5936	Returns the tile grid for the specified zoom level .
5937	Query for a tile row .
5938	query for tiles in the given zoom level descending order
5939	Get the closest zoom level for the specified length .
5940	Get the approximate zoom level for a given length
5941	Query for the tile grid for the given zoom level .
5942	Delete a tile from the table .
5943	Returns the number of tiles in the specified zoom level .
5944	Checks if the bounding box is Google tiles .
5945	Returns the value of the pixel at the specified location in the image .
5946	Returns the pixel values for the given image bytes .
5947	Validate the image type
5948	Creates a coverage data image from the tile width and height .
5949	Sets the value of the first pixel in the image .
5950	Get the GeoPackage or create it if it doesn t exist
5951	Returns the current row .
5952	Move the cursor to the next invalid position
5953	Query by base feature id
5954	Delete by base id and geometry type name
5955	Returns a rectangle of the specified width and height .
5956	Get a rounded float rectangle .
5957	Delete missing databases .
5958	Create and close the GeoPackage
5959	Check if the database name is valid
5960	Validate database and close on error .
5961	Validates the database and closes the database .
5962	Validates a SQLite database .
5963	Validate the SQLite database header
5964	Check if the database header is valid
5965	Add the internal databases
5966	Add the external databases
5967	Import the GeoPackage from the input stream
5968	Get the GeoPackage Metadata
5969	Get the GeoPackage metadata at the external path
5970	Create a new GeometryMetadata object .
5971	Populates a new geometry metadata object from the given envelope .
5972	Delete all geometries for a given geoPackageId
5973	Creates or updates the geometry if it does not already exist .
5974	Update the geometry metadata
5975	Count the number of rows in a table within a bounding box
5976	Create the geometry metadata from a cursor .
5977	Update the records in the table .
5978	Draws a tile with the specified text .
5979	Returns a list of rows for the given ids .
5980	Checks the integrity of a cursor .
5981	Returns a UserMappingDao for the given table .
5982	Returns a new SimpleAttributesDao for the given table .
5983	Returns the mappings for the given base id .
5984	Returns the mappings for the given extended relation and related id
5985	Checks if there is a mapping for the given base id and related id .
5986	Count the number of rows in the cursor .
5987	Register a cursor wrapper for the table
5988	Read a table from the GeoPackage
5989	Get the tile from the request bounding box
5990	Draw a tile .
5991	Reproject the tile to the requested tile width and height .
5992	Retrieve the tile results .
5993	Calculates the overlap between the point icon and the point icon .
5994	Sets the density .
5995	Sets the Paint used to paint the line .
5996	Sets the Paint used to paint the polygon .
5997	Draw a tile into a byte array .
5998	Draw a tile .
5999	Draw the tile query index .
6000	Query for the number of features in the specified tile in the specified zoom level
6001	Query for the number of features in the bounding box .
6002	Query for feature index results .
6003	Query for features in the web mercator bounding box
6004	Query for all features in the tile .
6005	Simplify a list of points .
6006	Get the point paint .
6007	Get the paint for the line .
6008	Gets the polygon paint .
6009	Get the paint used to fill the polygon .
6010	Get the paint for the feature style .
6011	Get the style paint
6012	Get the paint for a style row .
6013	Returns the paint associated with the specified style id and type .
6014	Put a bitmap for an icon row .
6015	Creates a bitmap from an icon row .
6016	Wrap the given content values with quotes .
6017	Creates and returns the bitmap .
6018	Recycle the bitmaps .
6019	Returns the bitmap for the specified layer .
6020	Returns the canvas for the specified layer .
6021	Creates the bitmap and canvas .
6022	Get the style mapping DAO for the feature table
6023	Get the style DAO
6024	Get the Icon DAO
6025	Returns the feature styles for the specified feature table .
6026	Get the styles for a feature table .
6027	Get the style for a feature table and geometry type
6028	Returns the icons for the feature table .
6029	Get the icon for the feature table and geometry type
6030	Returns the feature styles for the given feature row .
6031	Returns the feature styles for the specified feature .
6032	Get the styles for a feature row .
6033	Gets the icons for a feature row .
6034	Get the styles for a feature
6035	Get the icons for a feature
6036	Sets the feature styles for a feature table .
6037	Sets the styles for a feature table .
6038	Set the icons for a feature table
6039	Sets the feature styles for a feature row .
6040	Sets the feature styles for the feature .
6041	Sets the styles for a feature row .
6042	Set the styles for a feature .
6043	Set the style for a feature row
6044	Set the default style for the feature row .
6045	Set the default style for the feature .
6046	Sets the icons for the given feature row .
6047	Sets the icons for a feature .
6048	Set the icon for a feature row
6049	Set the default icon for a feature row .
6050	Set the default icon for a feature .
6051	Returns the style id or inserts it if it doesn t exist .
6052	Returns the icon id or inserts it if it doesn t exist .
6053	Insert a new style mapping .
6054	Delete the table style mapping for the feature table
6055	Delete the icon for a feature table
6056	Deletes the style mapping for the feature table .
6057	Delete the style mapping for the feature table
6058	Delete a style mapping .
6059	Get all style ids for a feature table
6060	Get all icon ids for a feature table
6061	Get all style ids for a feature table
6062	Get all icon ids for a feature table
6063	Returns the image bytes .
6064	Flushes the output stream .
6065	Get the value of the pixel at the specified coordinates
6066	Reads the pixels from the image .
6067	Draw the feature in the tile
6068	Draw a line path .
6069	Draw a polygon path .
6070	Add a LineString to a Path
6071	Adds a polygon to the path
6072	Returns the cache for the given table .
6073	Removes the feature row from the table .
6074	Clears the cache and resizes the cache .
6075	Returns the cached table styles .
6076	Returns the cached icons for the table .
6077	Get the RTree Index Table DAO
6078	Set the width of the column
6079	Set the height of the column
6080	Returns the dimensions of the bitmap .
6081	Compute the tile density .
6082	Read blob value .
6083	Read the user custom table
6084	Returns the current color or creates a new one if it doesn t exist .
6085	Validate the color
6086	Creates a color from the given hex color and opacity .
6087	Get the GeoPackageManager
6088	Set the progress
6089	Returns the index of the given types .
6090	Returns true if the row is indexed .
6091	Deletes a collection of feature index types .
6092	Deletes the index for the given row and types .
6093	Deletes the index for the given geometry id and feature index types .
6094	Delete the feature index
6095	Returns true if the feature index is indexed .
6096	Returns the list of feature index types .
6097	Query for all features .
6098	Count the number of features .
6099	Returns the bounding box of the feature .
6100	Query for all features in the bounding box .
6101	Returns the feature index type .
6102	Gets the internal file .
6103	Returns the absolute path of the given file .
6104	Gets the geometry type .
6105	Sets the geometry type .
6106	Checks if the url has a bounding box .
6107	Replace the x and y coordinates in the URL .
6108	Returns true if the given URL has XYZ .
6109	Replace the bounding box in the URL .
6110	Replace the bounding box in the url
6111	Get the geometry of the column
6112	Index the feature row
6113	Update the last indexed time of the table
6114	Deletes the feature index .
6115	Deletes the index for the given geometry .
6116	Returns true if the feature is indexed .
6117	Query for all geometry metadata .
6118	Query for all geometries in the bounding box .
6119	Count the number of features in the bounding box
6120	Query for rows that match the geometry envelope
6121	Count the number of geometries in the given envelope .
6122	Query for features within the bounding box
6123	Count the number of features in the bounding box
6124	Get the feature bounding box
6125	Get the geometry metadata from the cursor .
6126	Get the feature row from the cursor
6127	Get the feature row for a geometry
6128	Get all tile DAOs for a feature table
6129	Get the list of feature DAOs for a tile table
6130	Get the bounding box
6131	Query by ids .
6132	Returns a list of all base ids .
6133	Returns a list of all unique related ids .
6134	Delete by base id
6135	Delete by related id
6136	Delete by ids .
6137	Build where ids .
6138	Create the metadata in the table
6139	Delete the data for the database
6140	Rename the name of the GeoPackage metadata
6141	Rename the column name
6142	Get all the metadata
6143	Get the metadata for the database
6144	Get the metadata for the id
6145	Get or create the GeoPackage Metadata
6146	Check if the database is external
6147	Get the metadata for the external GeoPackage at the path
6148	Returns a list of column names where the column name is like the like string .
6149	Returns a list of metadata column names that are not like the given string .
6150	Get the metadata column names where the column name like the like string
6151	Create the metadata for the GeoPackage
6152	Notifies all registered listeners that a view has been created .
6153	Adds a view to the parallaxViews list .
6154	Creates a new view .
6155	Internal method to create a custom view .
6156	Appends the given event to the given CyclicBuffer .
6157	Finds the logback config file from system properties .
6158	Returns the URL of the resource with the given filename .
6159	Auto configuration .
6160	Status on resource search .
6161	Convert a socket address to its string representation .
6162	Creates a new thread pool executor service .
6163	Starts all the converters in the list .
6164	If the current file is triggering the event then rollover the current file .
6165	Adds a substitution property .
6166	Returns the value for the given key .
6167	Compiles the given converter map .
6168	Return the next node .
6169	Returns a node representing the current token .
6170	Escape characters .
6171	Returns the regular expression for a fixed date .
6172	Starts the interpretation .
6173	Called when an error occurs .
6174	Initializes the logger with the given logger context .
6175	Returns a new instance of the specified context selector class .
6176	Sets up the properties .
6177	Get the path to the external storage directory .
6178	Gets the database directory path .
6179	Returns the absolute path of the file .
6180	Returns true if the logging event is an error .
6181	Gets discriminating value .
6182	Update the mask if necessary .
6183	Returns the decision for the given event .
6184	Creates the key managers .
6185	Create the trust managers .
6186	Creates a keystore factory bean from system properties .
6187	Gets the location from the system property .
6188	Returns the URL for the given location .
6189	Returns true if the given converter chain handles a throwable .
6190	Stop the logback context .
6191	Print in case of errors or warnings .
6192	Prints the status of the given context if errors have been detected .
6193	Prints the status of the given context .
6194	Handle the first line of the stack trace .
6195	Returns the entry for the given key from either the live or lingerers map .
6196	Removes the entry for the given key from the live map .
6197	Returns a FormatInfo object for the given format string .
6198	Renames the source file to the target file .
6199	Checks if the source file and target file are on different volumes .
6200	Returns the value of an environment variable .
6201	Returns the value of an Android system property .
6202	Sets the MDC property map .
6203	Output MDC for all keys .
6204	Extract the stack trace from a Throwable .
6205	Checks if the current class is in the framework space list .
6206	Adds a new status to the status list .
6207	Adds a status listener to the list of listeners .
6208	Looks up an implicit action for the given element path and attributes .
6209	Returns the list of applicable actions for the given element path and attributes .
6210	Set the class loader .
6211	Get the value of a system property .
6212	Get a system property as a boolean .
6213	Decapitalizes the first letter of a name .
6214	Returns an array of MethodDescriptors for the given class .
6215	Returns an array of PropertyDescriptors for the given class .
6216	Starts the appender .
6217	Adds the given OnConsoleStatusListener instance to the status manager .
6218	Ends the interpretation of a property .
6219	Returns the discriminating value for the logging event .
6220	Returns true if the logging event is discardable .
6221	Starts the processing of a shutdown hook .
6222	Called at the end of the interpretation .
6223	Returns the list of enabled protocols .
6224	Returns the list of enabled cipher suites .
6225	Returns the values of the included and excluded strings .
6226	Convert a scope string to a scope .
6227	Sets the properties in the given scope .
6228	Adds a new appender to the list .
6229	Detach an appender from the list of appenders .
6230	Removes the appender with the given name .
6231	Handles a parent level change .
6232	Call the appenders of this logger .
6233	Detaches the given appender from this logger .
6234	Create a child logger by last name part .
6235	Call turbo filters .
6236	Log a slf4j event .
6237	Creates a new socket and returns it .
6238	Creates the parent directories for the given file .
6239	Returns the integer value for this level .
6240	Converts an integer value to a logging level .
6241	Gets the resource occurrence count .
6242	Returns the URL of the given resource .
6243	Returns the class loader of the given object .
6244	Get the class loader as a privileged access .
6245	Returns the class loader of the given class .
6246	Starts the tag encoder .
6247	Returns the tag for the given logging event .
6248	This method is called at the beginning of the interpretation process .
6249	Returns the index of the first occurrence of a DOT or DOLLAR character in the given name starting from fromIndex .
6250	Returns true if the given logging event is contained in the marker list .
6251	Returns the name of the client thread .
6252	Checks if two files are on the same file store .
6253	Starts the mail session .
6254	Append an event object to the buffer .
6255	Send the buffer to the client .
6256	Adds an MDC value level pair .
6257	Creates a converter for the given keyword .
6258	Creates a composite converter for the given composite node .
6259	Determine the compression mode .
6260	Configures the Joran configuration from the given URL .
6261	Configures the Joran configuration from the given file .
6262	Sets the configuration from an input stream .
6263	Builds the interpreter .
6264	Performs the actual configuration .
6265	Configures the Joran interpreter .
6266	Returns the value associated with the given key .
6267	Sets the name of this context .
6268	Returns true if the given context has a StatusListener .
6269	Returns the timestamp of the last reset message .
6270	Starts the scanner .
6271	Returns the effective converter map .
6272	Returns the file header .
6273	Gets the file footer .
6274	Starts the parsing of an appender .
6275	Ends the interpretation .
6276	Returns a copy of the clients .
6277	Adds a client to the list of clients .
6278	Removes a client from the list of clients .
6279	Returns a copy of the context map .
6280	Gets the value of method .
6281	Returns the decision of the chain of turbo filters .
6282	Checks if the current operating system is an Android OS .
6283	Initializes the logger context .
6284	Returns all files in the given folder that match the given regular expression .
6285	Print the retrospective status .
6286	Convert a syslog facility string to an integer .
6287	Gets the database file .
6288	Clear expired logs .
6289	Checks if the last check is expired .
6290	Sub append the logging event to the insert statement .
6291	secondary sub append .
6292	Binds the logging event to the statement .
6293	Returns a string that is truncated to 254 characters .
6294	Compute the reference mask for the given logging event .
6295	Merge property maps .
6296	Insert an exception into the database .
6297	Returns the length of the prefix match between this path and the given path .
6298	Returns the effective level of this status .
6299	Sets the value of the named property .
6300	Returns true if the class is unequivocally instantiable .
6301	Returns the child value .
6302	Process an include .
6303	Opens an input stream for the given URL .
6304	Trims the head and tail of the recorder .
6305	Returns true if the server should start .
6306	Returns true if this exception is transient .
6307	Sets the default hosts .
6308	Ensure that the local index exists .
6309	Synchronizes the data selection queries .
6310	Synchronizes the mirror if the last sync date is greater than the delayBetweenSyncs .
6311	Wait for a task to be published .
6312	List all indexes in offline mode .
6313	Reads the contents of the given stream into a char array .
6314	Returns the contents of the given stream as a byte array .
6315	Consumes the input stream and closes the connection .
6316	Returns the list of hosts that are up .
6317	Sets the type of the Places query .
6318	Starts the index .
6319	Adds a new entry to the cache .
6320	Returns the value associated with the given key .
6321	Wait for all threads to complete .
6322	Compares two version strings .
6323	Reports an exception to the Agent .
6324	Copies the contents of a directory to the target directory .
6325	Initializes the properties from the given file .
6326	Returns the value of a static field .
6327	Returns the method with the given name .
6328	Format a percentage value .
6329	Formats a double .
6330	Format a long .
6331	Reads a JSON syntax character .
6332	Returns the value of the given hex character .
6333	Write a JSON string .
6334	Write a JSON integer .
6335	Write a double .
6336	Reads a JSON string .
6337	Reads a JSON numeric value .
6338	Reads a JSON integer .
6339	Reads a double .
6340	Reads a JSON string and returns it as a Base64 encoded string .
6341	Execute a method call .
6342	Invokes a method call .
6343	Enqueue a method call .
6344	Gets the resource from the file system path .
6345	Updates the decorators .
6346	Refreshes the repository view .
6347	Gets the resource history view .
6348	Opens an editor .
6349	Reports an authentication failure to the user .
6350	Prompt for authentication .
6351	Creates the default page .
6352	Start the animation thread .
6353	Sets the keep - all - alive flag .
6354	Sets the flag indicating whether the request should be ignored .
6355	Sets the owner of this node .
6356	Adds a new condition factor .
6357	Creates a new condition term from the given tokenizer .
6358	Returns true if this condition term matches the given condition term .
6359	Returns the content of the DSL configuration file .
6360	Loads the DSL configuration from the given input file .
6361	Reads the configuration from the given input stream .
6362	Get the menu for this wizard .
6363	Adds a response element .
6364	Adds a new href .
6365	Inserts the new href before the refHref .
6366	Removes a href from the document .
6367	Add a propstat element .
6368	Returns the href of the element .
6369	Gets the status .
6370	Replies the stack frame for the given value .
6371	Returns true if class1 is a subtype of class2 .
6372	Checks if the given collection of proposals contains the given new proposals .
6373	Clones a node .
6374	Resets the reader to the initial state .
6375	Create the actions .
6376	Adds a connection to the connection list .
6377	Returns the value of the specified property .
6378	Removes the specified connection from this connection .
6379	Sets the location of the gauge .
6380	Sets the value of the specified property .
6381	Sets the size of the gauge .
6382	Dump the constraints .
6383	Adds a lock entry .
6384	Adds a new child to this vertex .
6385	Removes the given child from this vertex .
6386	This method is called when the bundle is started .
6387	This method is called when the bundle is stopped .
6388	Get a resource string from the resource bundle .
6389	Gets the resource bundle .
6390	Returns the form colors for the rule builder .
6391	Sets the date time .
6392	Sets the date and time using the given pattern .
6393	Create a new error status .
6394	Log an error message .
6395	Adds a field editor to the list of fields .
6396	Adjusts the grid layout .
6397	Apply the font .
6398	Calculates the number of columns .
6399	Initializes the field editors .
6400	Fire a PropertyChangeEvent to all registered PropertyChangeListeners .
6401	Set the active editor .
6402	Add the ZoomComboContributionItem to the tool bar .
6403	Determine the dialect .
6404	Creates a new context with the given user context and locator .
6405	Saves the current editor input to a file .
6406	Add the listeners to the table .
6407	Creates the table .
6408	Adds a value to the map .
6409	Put a value into the cache .
6410	Adds a token to this node .
6411	Add a child node to this node .
6412	Sets the file .
6413	Adds a new condition to the list of conditions .
6414	Adds a state token condition .
6415	Returns true if this condition matches the given condition .
6416	Returns the prop element .
6417	Returns the status of the node .
6418	Sets the property .
6419	Get the last line of the text .
6420	Get the last non - dash line .
6421	Binds the given binding to the given id .
6422	Binds two bindings .
6423	Returns the message with the given id and bindings .
6424	Create the process for the given type .
6425	Create a process unit for the given example type .
6426	Returns the runtime id .
6427	Visit a given Rete .
6428	Visit the given node .
6429	Returns the dot id for the given object .
6430	Adds a remove element .
6431	Adds a set of properties .
6432	Create a new locator with the given resource URL and label .
6433	Returns a new PresentationReconciler .
6434	Returns true if the given object is the same as this one .
6435	Returns true if the given term is contained in this condition .
6436	Creates a new state token from the given tokenizer .
6437	Add the text and rete pages .
6438	Performs a HTTP DELETE request .
6439	Sends a POST request to the KieREST server .
6440	Returns the status of the given job .
6441	Executes the pull operation .
6442	Handles the results of a pull request .
6443	Sets the element at the given index to the given string value .
6444	Adds an active lock .
6445	Filter proposals that start with the given prefix .
6446	Reads a prefix from the given document .
6447	Calculates the row list for a given root .
6448	Paint the outline .
6449	Returns the edit part for the given model element .
6450	Returns the image descriptor for the given path .
6451	Declare an image in the registry .
6452	Adds a vertex to the row at the specified depth .
6453	Returns the row index of the given vertex .
6454	Gets the width of all rows in the table .
6455	Dumps the vertices of the matrix .
6456	Optimize the table .
6457	Load the rete model .
6458	Initialize the graphical viewer .
6459	Draw the graph .
6460	Returns the DroolsLineBreakpoint for the given source .
6461	Sets the href .
6462	Returns true if the server can talk to the server .
6463	Copy a collection of properties to a destination .
6464	Examines a multi - status response .
6465	Extract the property stats from the multi status .
6466	Gets the content of the resource .
6467	Returns an enumeration of all active locks .
6468	Returns the status of a property .
6469	Executes a HEAD request on the DAV server .
6470	Acquires a lock .
6471	Move all properties from one location to another .
6472	Performs a check - in operation .
6473	Refreshes the lock .
6474	Remove a collection of properties .
6475	Remove the property with the given name .
6476	Sets the content of this resource to the given input stream .
6477	Sets the properties of this element .
6478	Sets the property of this element .
6479	Unlocks the specified lock .
6480	Updates the resource with the specified version .
6481	Perform a version control request .
6482	Deletes the resource .
6483	Examines the status code .
6484	Checks if a property has a child .
6485	Writes the request body to the OutputStream .
6486	Converts a byte array to a hexadecimal string .
6487	Convert an array of integers to a hex string .
6488	Sets the value of allprop .
6489	Sets the value of the propname attribute .
6490	Sets the property .
6491	Removes the last word from a prefix .
6492	Updates the rules .
6493	Writes the contents of this stream to the given OutputStream .
6494	Step over the current stack frame .
6495	Marks the parser errors as markers .
6496	Skips over all whitespace characters .
6497	Add a file to the Guvnor server .
6498	Commits changes to a given file .
6499	Returns the value of the age property .
6500	Returns the value of the Content - Length header .
6501	Returns the maximum number of forwards .
6502	Returns the value of the overwrite property .
6503	Returns true if Passthrough is set .
6504	Returns the timeout in seconds .
6505	Adds a value to the context . If the value is null or empty the context is removed .
6506	Sets the timeout value .
6507	Open a DSL file .
6508	Parse the file .
6509	Get the object metadata .
6510	Removes the object metadata from the given text .
6511	Add tokens to the tree .
6512	Returns the children of the condition .
6513	Returns the children of the given object .
6514	Adds all children of a node to a list .
6515	Prints the tree .
6516	Prints a node .
6517	Print the specified number of tabs .
6518	Reads a JSON value from the given text .
6519	Returns the image descriptor for the given id .
6520	Invokes the request .
6521	Sets the value of a request header field .
6522	Creates the rule launcher .
6523	Create the rule .
6524	Create the ruleflow .
6525	Create the rule flow launcher .
6526	Returns the selected IUs .
6527	Creates and saves an image to an output stream .
6528	Returns the field name of this node .
6529	Gets the evaluator .
6530	Returns the field value of this node .
6531	Add Guvnor resource properties .
6532	Performs baseline control on the specified locator .
6533	Bind the specified member to the specified source .
6534	Get a member by its name .
6535	Optimize the graph .
6536	Initializes the controls .
6537	Validates the page .
6538	Generate an entity tag .
6539	Gets the opposite of the given vertex .
6540	Validates a list of OTPs
6541	Check if YubiKey belongs to user
6542	Returns the username for the given publicId from the given filename .
6543	Adds the yubikey to the user .
6544	Verify the OATH OTP .
6545	Clear the password .
6546	Returns the public id of the given OTP .
6547	Returns true if the given string is a valid OTP format .
6548	Creates an evaluation for the given node .
6549	Create an evaluation .
6550	Clears the cache .
6551	Checks if is jdk - 15 .
6552	Returns the package name of the given object .
6553	Returns the package name of a class .
6554	Returns a unique descriptor for the given object .
6555	Returns the class of the argument .
6556	Checks if two classes are more specific .
6557	Returns the best matching method for the given name and arguments .
6558	Returns the value of a property .
6559	Gets the property descriptors for the given class .
6560	Gets the property descriptor from an array of property descriptors .
6561	Gets the read method .
6562	Reads a character from the input stream .
6563	A projection expression .
6564	1 . 2 . 3
6565	Convert value to long .
6566	Convert value to double .
6567	Convert value to a BigInteger .
6568	Converts a value to a BigDecimal .
6569	Convert an object to a string .
6570	Returns the numeric type of the given value .
6571	Convert the given value to the given type .
6572	Returns the integer value of the given value .
6573	Returns the numeric type of the two given types .
6574	Returns the numeric type of the two values .
6575	Creates a Number from a long value .
6576	Removes the current evaluation from the stack .
6577	Generate OGNL getter .
6578	Generate OGNL setter .
6579	Flattens the tree .
6580	Initializes this SimpleNode .
6581	Escapes a character in the image .
6582	Sets the root context .
6583	Evaluate an OGNL expression and return the result .
6584	Sets the value of an expression .
6585	Sets the value of the root node in the tree .
6586	Returns true if the given expression is a constant .
6587	Returns the default watch service id .
6588	Wait for the server to start .
6589	Reads the contents of the source file into a string .
6590	Reload the current application class loader .
6591	Returns the archiver with the given name .
6592	Check the archiver for problems .
6593	Reads the contents of a file into a String .
6594	Create the project .
6595	Add a system property .
6596	Add a system property .
6597	Opens a new folder dialog .
6598	Changes the selected directory .
6599	Refresh the button state .
6600	Creates and returns a file observer that notifies when a file is created or deleted .
6601	Return the currently selected folder .
6602	Creates a new folder .
6603	Checks if the given file is a valid file .
6604	Start a background job .
6605	Starts a list .
6606	Ends a list .
6607	Handles a motion event .
6608	Returns the crop rectangle .
6609	Compute the layout of the cropping rectangle .
6610	Register the RTTextListener with the RTMediaFactory
6611	Add a span watcher to the text .
6612	Returns the view which should be used to show the spinner .
6613	Returns the drop down view for the specified item .
6614	Converts the specified text to HTML .
6615	Checks if the given text is within a paragraph .
6616	Create a unique file in the target folder .
6617	Determines the original file name from the given Uri .
6618	Returns the namespace for the given name .
6619	Returns the local name of the given name .
6620	Set an attribute .
6621	Set an attribute .
6622	Returns the name of the font in the given file .
6623	Returns the name of the font from the given file path .
6624	Check if we need to allocate a new buffer .
6625	Writes a portion of a byte array to the buffer .
6626	Writes a single byte to the buffer .
6627	Writes the contents of an input stream to the output stream .
6628	Writes the contents of this buffer to the given OutputStream .
6629	Returns the contents of this buffer as a byte array .
6630	Set the font size .
6631	Converts Windows path separators to Unix path separators .
6632	Recomputes the focus of the highlight views .
6633	Ensure that the view is visible .
6634	Center the view based on the highlight view .
6635	Resets the document locator .
6636	Validates the given string .
6637	Add an element type .
6638	Sets an attribute on an element .
6639	Sets the parent of a child element .
6640	Returns the ElementType for the given name .
6641	Returns the entity associated with the given name .
6642	Removes all paragraph effects from the given editor .
6643	Applies the given value to the selection of the given editor .
6644	Returns true if the given domain is valid .
6645	Executes the given operation on the given editor .
6646	Redo the current operation .
6647	Replaces all occurrences of search in source with replace .
6648	Returns the status of the given thread or creates a new one if it doesn t exist .
6649	Sets the decoding options for the given thread .
6650	Returns true if the given thread can be de - encoded .
6651	Decode a file descriptor .
6652	Returns a list of all available fonts .
6653	Returns a map of font names to their file paths .
6654	Returns a map of all the system fonts .
6655	Sets up the XML parser .
6656	Get the reader from the input source .
6657	Returns an input stream for the given public and system ids .
6658	Add an attribute to the new element .
6659	Expands entities in the given string .
6660	Lookup an entity from a char array .
6661	Move the stack to the next element in the stack .
6662	Pop an element from the stack .
6663	Pop an element from the stack and anonymize it if necessary .
6664	Returns the prefix of the given name .
6665	Checks if the given prefix and namespace are foreign .
6666	Removes leading and trailing quotes from a string .
6667	Splits a string into an array of strings .
6668	rectify the given element .
6669	Make a name from a character array .
6670	Save the state of the dialog .
6671	Called when the editor is being destroyed .
6672	Called by the main thread when a media event is received .
6673	Handles a link event .
6674	Returns the base rotation matrix for the given bitmap .
6675	Returns the maximum zoom level .
6676	Checks if there is any spans in the selection .
6677	Find spans and remove them from the paragraph .
6678	Encodes the given URL .
6679	Decode query string .
6680	Picks a directory .
6681	Rotate an image .
6682	Sets the output writer .
6683	Writes a character to the output stream .
6684	Writes a string to the output stream .
6685	Returns true if the specified attribute is a boolean attribute .
6686	Write a UTF - 16 encoded string .
6687	Write the namespace declarations .
6688	Write an element name .
6689	Creates a stream if it does not exist .
6690	Wait for stream activation .
6691	Completes the store snapshot with missing instance snapshots .
6692	Wait for the minimal duration to execute the next provisioning request .
6693	Get records from Kinesis .
6694	Performs an Amazon action with retries .
6695	Try Amazon Action .
6696	Checks if the given bucket is accessible .
6697	Load all entity stores from the snapshot store .
6698	Trigger the wildcard expansion .
6699	Replaces all occurrences of oldPattern with newPattern .
6700	Delete any of the characters in the given string .
6701	Adds a report to the list of reports .
6702	Update properties with configuration .
6703	Returns the configuration properties .
6704	Creates an input stream that can be used to auto - detect the wro file .
6705	Converts a map of resource pre - processors to a map of post - processors .
6706	Compiles the given content and returns the result .
6707	Reloads the cache with a new value .
6708	Reloads the model with a new value .
6709	Gets the wrapped servlet request for the given location .
6710	Gets the base name suffix transformer .
6711	Called when an error occurs .
6712	Sends a redirect to the specified location .
6713	Process a resource .
6714	Create the expander handler .
6715	Locates an input stream for the given URI .
6716	Creates the Wro configuration .
6717	Register property change listeners .
6718	Process the request .
6719	Sets the configuration .
6720	Identify duplicate group names .
6721	Merge the given model with this model .
6722	Locate an input stream for the given URI .
6723	Apply post processors .
6724	Decorates a resource post processor .
6725	Process the resource .
6726	Splits a command line option into an array of strings .
6727	Load properties from an input stream .
6728	Parse properties from a string .
6729	Creates a custom WroManagerFactory .
6730	Persists the resource fingerprints for the given groups .
6731	Checks if the given group is a target group .
6732	Extend the plugin classpath .
6733	Gets the model resource as an input stream .
6734	Initializes the WroManagerFactory .
6735	Sets the model transformers .
6736	Compile the given content with the given name .
6737	Processes the given list of resources and returns the merged result .
6738	Process and merge resources .
6739	Run the resources in parallel .
6740	Apply preProcessors to the given resource .
6741	Decorates the pre processor with the given criteria .
6742	Saves the fallback storage to disk .
6743	Returns all fields of the given object .
6744	Rewrite the given cssUri and imageUrl .
6745	Computes the new image location for the given cssUri and imageUrl .
6746	Add a model transformer .
6747	Serve the processed bundle .
6748	Initialize the aggregated folder path .
6749	Extract variables from the body .
6750	Parses the given CSS string and returns the parsed CSS string .
6751	Replaces all variables in the given CSS with their corresponding values .
6752	Converts the given post processor to a pre - processor .
6753	Checks if the resource is eligible for the given resource type .
6754	Applying gzip on the response .
6755	Returns a new PathPatternProcessorDecorator that will include the given patterns .
6756	Exclude the given patterns from the given processor .
6757	Creates a new resource change handler .
6758	Remember a resource .
6759	For each css import apply .
6760	Filters the given collection and returns the filtered list .
6761	Checks if the request should be minimized .
6762	Find imported resources .
6763	Compute the absolute URL for the given resource URI and import URL .
6764	Creates a string representation of the given items .
6765	Returns the list of aliases .
6766	Creates and returns the context for evaluating the commons . js file .
6767	Evaluate the expression from the given reader .
6768	Evaluate the given script and return the result .
6769	Process the resource bundle .
6770	Checks if the request is a handler request .
6771	Create the request handler path .
6772	Renames an input stream to a new name .
6773	Compute the destination folder for the given resource type .
6774	Processes a group .
6775	Check if a change is required for a given group .
6776	Locates a resource in any of the context folders .
6777	Create a new object pool .
6778	Locates an input stream from the given folder .
6779	Opens a JAR file .
6780	Extracts the path from a URI .
6781	Returns true if the request should be minimized .
6782	Add URI Locators .
6783	Decorates a WroModelFactory with the given modelTransformers .
6784	Adds a require .
6785	Processes the given content and returns the updated content .
6786	Logs the summary of the errors .
6787	Called when a resource is being processed .
6788	Gets the lock for the given key .
6789	Create a process for the given source file .
6790	Parses a comma separated list of properties .
6791	Get the task info .
6792	Returns the compilation command .
6793	Parse header .
6794	Add no - cache headers .
6795	Gets the path info from the given location .
6796	Gets servlet path from location .
6797	Checks if the request URI matches the given path .
6798	Loads a regexp from the regexp . properties file .
6799	Copy the contents of a Reader to a Writer . Closes both the Reader and Writer .
6800	Creates a temporary file with the given extension .
6801	Clean image url .
6802	Sets the value of the given attribute .
6803	Generates a data URI from an input stream and a file name .
6804	Generate the data URI .
6805	Sets the context to the given configuration .
6806	Unregisters the context .
6807	Check the cache for changes .
6808	Called when an exception occurs while checking for resource changes .
6809	Check if a resource has changed .
6810	Updates the hash for the given group .
6811	Checks if there are resources of the given type .
6812	Create a process for the given source file and destination file .
6813	Encodes a java . io . Serializable object into a String .
6814	Processes the groups .
6815	Parses a group definition .
6816	Creates a new group from the given element .
6817	Parses a resource element .
6818	Returns a collection of resources for the given group .
6819	Log this timer .
6820	Stop a timer .
6821	Returns a timer with the given name and flags .
6822	Returns a timer with the given name and flags . If the timer already exists it will be replaced .
6823	Prints the saturation statistics .
6824	Wake up workers .
6825	Updates the processed counters .
6826	Updates the finished counters .
6827	Updates the given counter if it is smaller than the given value .
6828	This is the default implementation of the visitor .
6829	Inerts the given property into the taxonomy .
6830	Ensure that the axiom loading is complete .
6831	Restores the saturation of the taxonomy .
6832	Returns true if the consistency checking state is consistent .
6833	Restore the taxonomy .
6834	Restore the instance taxonomy .
6835	Returns the evidence for the given conclusion .
6836	Called before the reasoner has been initialized .
6837	Invalidate this reasoner and all its sub - stages .
6838	Returns the collection of individuals to add .
6839	Returns the collection of individuals to be removed .
6840	Returns an UnsupportedOperationException if the given method is unsupported .
6841	Removes the element at the specified position from the specified array .
6842	Removes the element at pos from k and v .
6843	Returns the position of the moved element in the specified array .
6844	Returns true if the specified object is contained in the specified array .
6845	Adds an element to the end of the array if it does not already exist .
6846	Checks that the occurrence numbers of this element are valid .
6847	Adds the given timer to this timer .
6848	Adds the given rule application timer .
6849	Put a key - value pair into the keys and values arrays .
6850	Removes the entry for the given key .
6851	Enlarges the map .
6852	Increases the capacity of this map by a power of two .
6853	Saves the given configuration to disk .
6854	Print the class declarations .
6855	Returns the set of all instances of the given node .
6856	Removes all entries from this set .
6857	Combines multiple hashes .
6858	Combine a list of hashes .
6859	Copies the contents of the input stream to the output stream .
6860	Returns a new IncompletenessMonitor that delegates to this one .
6861	Processes the Taxonomy .
6862	Submits the input to the pool .
6863	Append an elkObject to an Appendable .
6864	Marks the given query class as not computed .
6865	Adds a direct type node .
6866	Checks that the given chain of properties matches the given start position .
6867	Returns a new set that contains only elements that satisfy the given condition .
6868	Applies a functor to a set .
6869	Adds an element to the set .
6870	Removes the specified element from the specified slot .
6871	Adds the given class conclusion counter to this one .
6872	Log memory usage .
6873	Sets the configuration options .
6874	Shuts down the ELK reasoner .
6875	Prints the header .
6876	Prints the specified values to the logger .
6877	Returns a string representation of the specified character .
6878	Adds the given counter to this set .
6879	Writes a resource .
6880	Gets the action input parameter .
6881	Gets the property descriptor for the given property path .
6882	Returns a map of all required parameters .
6883	Returns true if the given class is a single value type .
6884	Adds a rel parameter .
6885	Sets the media type of the link .
6886	Adds the hreflang parameter .
6887	Adds a revision to the link .
6888	Adds a link parameter .
6889	Expands the partial URI with the given arguments .
6890	Returns the list of rels .
6891	Returns the list of revs for this link .
6892	Returns true if any of the required parameters are unsatisfied .
6893	Returns the formatted value .
6894	Returns true if the given property is hidden .
6895	Returns true if the given property is contained in the input annotation .
6896	Checks if the input annotation has explicit or implicit property include value .
6897	Returns true if the request is required .
6898	Returns the default value .
6899	Returns the name of the parameter .
6900	Gets the exposed property or parameter name .
6901	Returns the vocabulary for the given bean and class .
6902	Returns the query string .
6903	Append the form .
6904	Write an input button .
6905	Append an input or select .
6906	Combines the given affordance builder with this one .
6907	Returns the components of this partial uri template .
6908	Removes any optional variables from the URI template .
6909	Returns the first UberNode with the given name .
6910	Returns the first UberNode with the given rel .
6911	Returns an iterator over the children of this UberNode .
6912	Returns a PersistentHashMap that contains all of the entries in the specified Iterable that are equivalent to the specified Equator .
6913	Creates a PersistentTreeMap from the given Iterable of Maps .
6914	Returns an empty PersistentTreeMap .
6915	Returns an immutable view of the entries of this TreeMap .
6916	Returns the key of the last element in this map .
6917	Returns an Xform that can be used to transform an Iterable into an Iterable .
6918	Returns the result of applying the given operation to the given source .
6919	Drop elements from this stream while the given predicate evaluates to true .
6920	Applies a reduction function to each element of the run list .
6921	Convert a Map . Entry to a Tuple2 .
6922	Returns the result of the operation .
6923	Register a list of classes .
6924	Returns the element at the given index .
6925	Appends the specified element to the end of this vector .
6926	Concatenates the specified collection of items into this vector .
6927	Returns a mutable view of the specified items .
6928	Returns a mutable view of the specified items .
6929	Returns an immutable set containing the specified items .
6930	Returns an immutable view of the specified items .
6931	Create an iterable from an array of items .
6932	Returns a StringBuilder that will indent the specified number of spaces .
6933	Returns a string representation of the given array of items .
6934	Creates a new LazyRef from the given producer function .
6935	Applies the producer and returns the value .
6936	Inserts the specified item into the specified array at the specified index .
6937	Creates a deep copy of the given array .
6938	Suspend if assoaciated with the current thread .
6939	This method is called before an async operation has been performed .
6940	Builds a list of service components from the given service descriptor file .
6941	Validates that the given directory is valid .
6942	Creates an inheritance link between the concrete class and the super class .
6943	Copy methods from the source class to the destination class .
6944	Copy the given methods to the destination class .
6945	Recursively tree the given FQDNNode .
6946	Remove the sbb entity with the current class loader .
6947	Returns true if notifications are enabled for the given parameter name .
6948	Returns the RA entity links which does not exist in the service .
6949	Installs the given service component .
6950	Uninstalls a service .
6951	Returns true if the given RA link name is referenced by this resource adapter .
6952	Returns the usage parameter sets for the specified Sbb .
6953	Reset all usage parameters .
6954	Returns the profiles of the specified profile table .
6955	Gets the profile table activity .
6956	This method is used to retrieve a profile from a profile table .
6957	Display the result .
6958	Unfolds the given array .
6959	Execute an event .
6960	Binds a name to the cache .
6961	Unbinds a name from the cache .
6962	Looks up a node by its name .
6963	Returns the name bindings of all child nodes of this node .
6964	Returns the next SbbEntity for the given event .
6965	Returns true if this level is higher than the specified level .
6966	Extracts the contents of a jar file into a destination directory .
6967	Writes the contents of the input stream to the output stream .
6968	Put an object into the cache .
6969	Attaches a sbb entity to this node .
6970	Detaches a sbb entity from this node .
6971	Returns true if there are no SBB entities attached .
6972	Returns the set of SbbEntities attached to this SBB .
6973	Attaches a timer to this node .
6974	Detaches a timer .
6975	Returns true if there are no timers attached .
6976	Returns the set of attached timers .
6977	Add a name to the name bound list .
6978	Removes a name from the name bound list .
6979	Returns true if there are no names bound .
6980	Returns a copy of the names bound to this node .
6981	Sets the value of a CMP attribute .
6982	Returns the value of the attribute with the given name .
6983	Returns a copy of the attributes of this node .
6984	Initialize the notification info .
6985	Send a usage notification to all registered listeners
6986	Downloads a DU from the remote server .
6987	Update the list of deployed components .
6988	Installs a deployable unit .
6989	Uninstalls a deployable unit .
6990	Process an internal undeploy request .
6991	Show the status of the deployable units .
6992	Log a LogRecord .
6993	Returns the logger for the given log record .
6994	Returns the set of components that are referring to the given component .
6995	Returns the set of SbbEntityIDs contained in the node .
6996	Returns the permissions for the current policy .
6997	Returns the code sources for the current policy holder .
6998	Checks if the profile with the given name exists in the profile table .
6999	Remove the profile table .
7000	Updates the configuration properties of the resource adaptor entity .
7001	Called by the SLEE when the entity is running .
7002	Suspend the RA object .
7003	Activates this entity .
7004	Deactivates this entity .
7005	Schedule the end of all activities .
7006	Remove this entity .
7007	Returns the resource adaptor interface for the specified resource type .
7008	Invoked when a service is active .
7009	Derives the activity handle from the given handle .
7010	Called when an activity has been ended .
7011	Updates the configuration with the given properties .
7012	Verify that the new configuration properties are valid .
7013	Notify the resource adapter object that it is stopping .
7014	Notify the resource adapter object that it is no longer active .
7015	Unconfigure the resource adapter .
7016	Unconfigures the resource adaptor context .
7017	Declarative Services method to unset the fault tolerant resource adaptor context .
7018	Build the profile attribute map .
7019	Resume the event routing .
7020	Returns the activity context handles for this node .
7021	Remove this MBean from the MBeanServer .
7022	Get the usage MBean for a given parameter set .
7023	Decorates the abstract class .
7024	Fires an event on the specified SBB entity .
7025	Fires an event on the specified SbbEntity .
7026	Returns the CMP method for the specified profile .
7027	Returns the usage parameter set associated with the specified SbbEntity .
7028	Gets the abstract methods from a class .
7029	Gets the interface methods from the interface .
7030	Creates a new object pool for the given profile table .
7031	Remove the object pool for the given profile table .
7032	Returns true if the given notification source is the owner of the alarm .
7033	Raises an alarm .
7034	Returns the usage parameter set with the specified name .
7035	Returns the event type descriptor .
7036	Returns true if the given URL accepts the given deployable unit .
7037	Method init .
7038	Start the deployment for the given URL and name .
7039	Un - uninstalls a single deployable unit .
7040	Show the status of the deployment manager .
7041	Execute after commit actions .
7042	Execute after commit priority actions .
7043	Execute after rollback actions .
7044	Executes the before commit actions .
7045	Executes the before commit priority actions .
7046	Returns the names of all defined tracers .
7047	Creates a new tracer with the specified name .
7048	Remove the replicated data .
7049	Registers the property editors .
7050	Processes a SleeComponentWithUsageParametersInterface .
7051	Returns the object pool for the given service and sbbID .
7052	Creates an object pool for the given service ID and SBB component .
7053	Execute the given activity handle .
7054	Start an activity with the given flags .
7055	End an activity .
7056	Checks that the given event object is compatible with the given event type .
7057	Fires an event on an activity handle .
7058	Generate the SbbLocalObjectConcrete class .
7059	Make the getter method .
7060	Convert a string argument to a primitive type .
7061	Sets the profile table name and profile name .
7062	Extract the message from the result .
7063	Returns true if the given object is in the cache .
7064	Checks if this relation contains all of the elements in the given collection .
7065	Removes all elements from the specified collection .
7066	Returns true if this level is higher than the specified level .
7067	Returns the object that can be used to read from the stream .
7068	Removes all classes from the class pool .
7069	Add a call to a profile .
7070	Returns the profile object for the specified profile name .
7071	Passivate a profile object on the transaction end .
7072	Sets the value of this property to the given text .
7073	Generate the concrete class for the activity context interface .
7074	Generate concrete methods .
7075	Set data attribute .
7076	Add a name binding .
7077	Remove all naming bindings from the cache .
7078	Removes a name binding from the cache .
7079	Attaches a timer to the cache .
7080	Remove all timers from the cache .
7081	Attaches a sbb entity to this activity context .
7082	Detaches a sbb entity from the activity context .
7083	Returns the set of SbbEntityIDs that are not in the excludeSet .
7084	Ends the current activity context .
7085	Adds a component to the deployment .
7086	Returns the external dependencies of this component .
7087	Returns true if the container has dependencies satisfied .
7088	Checks to see if there are any components that are already deployed .
7089	Get the install actions .
7090	Returns the list of uninstallable unit actions .
7091	Checks to see if there is a DU that has a referring component .
7092	Close a profile table .
7093	Get the object name .
7094	Change the state to read - write .
7095	beforeSetCmpField is called before the profile table has been updated .
7096	afterSetCmpField is called after setCmpField is called .
7097	Method beforeGetCmpField .
7098	afterGetCmpField is called after getCmpField is called .
7099	This method is called before the management method invocation .
7100	Called after management method invocation .
7101	Deletes the given path .
7102	Creates the default constructor .
7103	Create the default usage parameter getter .
7104	Creates the getter and setter methods for SbbEntity .
7105	Creates the fire event methods .
7106	Creates and returns the method to get the SbbActivityContextInterface object .
7107	Adds the given query expression to this query .
7108	Binds the given name to the given target object .
7109	Rebinds the specified name to the specified target object .
7110	Decorates the Abstract Sbb .
7111	Invoke a method on the proxy and return the result .
7112	Returns the real field name for the given field name .
7113	Sets the value of the specified field .
7114	Returns the value of the field with the given name .
7115	Set the profile context for this object .
7116	Initialize the object with the given name .
7117	unset the profile context .
7118	Gets the profile local object .
7119	Fires a profile added or updated event if necessary .
7120	Gets the profileCmpSlee10Wrapper .
7121	Create a class with the given name and interfaces .
7122	Creates an inheritance link for the given class .
7123	Adds an annotation to a class or method .
7124	Adds the member values to the annotation .
7125	Returns the ActivityContextInterface associated with the given activity .
7126	Returns the class pool for this component .
7127	Sets the deployable unit .
7128	Called when the application is undeployed .
7129	Execute an activity .
7130	Checks if the classOrInterfaceWithInterfaces contains the given interfaceSearched .
7131	Returns all methods from all interfaces of the given xInterfaceClass .
7132	Resolve an entity .
7133	Checks that the given tracerName is valid .
7134	Returns a collection of all profiles that match the specified static query .
7135	Checks the dependencies of the given sleeComponent .
7136	Creates a temporary DU deployment directory .
7137	Gets the entity manager .
7138	Start the container .
7139	Switch the given class loader to the given profile object .
7140	Make a proxy call .
7141	Checks if the current transaction is the same as the current one .
7142	Converts the last access time to a TTL .
7143	Returns true if the profile class is visible .
7144	Get the profile object for the given profile entity in the current transaction . If the object does not exist in the current transaction it will be created .
7145	Get the names of all loggers that match the given regular expression .
7146	Reset the logger levels .
7147	Method clearLoggers .
7148	Add a logger to the log .
7149	Method addSocketHandler .
7150	Remove a handler from a logger
7151	Convert a tracer name to a log4j logger name
7152	Syncs the current level with the log4j level .
7153	Assigns the log4j level .
7154	Reset the flags of the cache .
7155	Send a trace notification .
7156	Checks that the given tracerName is a valid tracer name .
7157	Writes the object to the stream .
7158	Deserializes the object from an input stream .
7159	Adds a URLClassLoaderDomainImpl to the list of direct dependencies .
7160	Returns a list of all dependencies of this domain .
7161	Returns the class with the given name .
7162	Returns the URL of the resource with the given name .
7163	Override this method to find resources locally .
7164	Creates and registers the profile MBean .
7165	Resume a transaction .
7166	Returns a set of all the SbbIDs in the component repository .
7167	Gets the resource adaptor entity links .
7168	Initializes the slee .
7169	Shuts down the slee .
7170	Validates that the given state transition is valid .
7171	Generate a getter for the usage parameter set .
7172	Sets the specified field to the specified value .
7173	Build the PolyJDBC instance .
7174	Adds a value to the insert query .
7175	Executes the given operation on this transaction .
7176	Creates a new RegionRequest from a string .
7177	Gets the region .
7178	Resolves the given dimensions to a rectangle .
7179	Gets the on type .
7180	Sets the list of viewing hints .
7181	Adds a viewing hint to the resource .
7182	Sets the other content renderings .
7183	Adds a list of renderings to this resource .
7184	Merges a list of profiles into one .
7185	Merges this profile with the specified profile .
7186	Creates a new rotation request from a string .
7187	Parses a string into a SizeRequest .
7188	Initializes the adb connection .
7189	Get the dump .
7190	Handles the pop box of a device .
7191	Pushes the automator . jar to the device
7192	Deletes the temp files .
7193	Pulls a qian dump file to the pc .
7194	Gets the current crash log .
7195	Detabifies the contents of the text editor .
7196	Indent the text with the given number of spaces .
7197	Returns a collection of HTML tokens .
7198	Returns a Markdown representation of the given text .
7199	Escapes special characters within tag attributes .
7200	Adds an exception to the list of exceptions .
7201	Closes the statement cache .
7202	Finds the fully qualified name of the parent class .
7203	Writes the class to the given filer .
7204	Writes a BitVector01Divider .
7205	Appends a set of bit strings to a bit vector .
7206	Reads from an input stream .
7207	Returns the JSON object for the given path .
7208	Gets list .
7209	Sets up the KlovReporter .
7210	Adds a screenshot to the current step .
7211	Sets the system info for the given key to the given value .
7212	Creates a selector that selects the specified property .
7213	Creates a selector that selects the given property as the given alias .
7214	Extract validation annotation data .
7215	Finds all the annotations for the given property .
7216	Finds the annotations for the given property .
7217	Returns the property descriptor for the given property name .
7218	Returns the value of the given object expression .
7219	Creates an instance of the given class from the given map .
7220	Converts a map of properties to an object of the given class .
7221	Creates a new instance of the given class from the given value map .
7222	Convert an object to a map .
7223	Convert an object to a map .
7224	Returns the values of the given annotation .
7225	Creates a new instance of the composite validator .
7226	Lookup the list of validators and initialize them with the meta data .
7227	Looks up a validator in the registry .
7228	Apply validation meta data properties to validator .
7229	If the property is blank remove it .
7230	Sets the current time .
7231	Returns the size of all caches .
7232	Returns the hash code for the given key .
7233	Returns the default options .
7234	Opens the database .
7235	Puts all of the values in the given map to the database .
7236	Removes the specified keys from the cache .
7237	Search for a key - value pair in the database .
7238	Load all by keys .
7239	Closes the database .
7240	Performs a reduceBy operation on the given double array .
7241	Performs a reduceBy operation on the given double array .
7242	Returns the variance of the specified array of values .
7243	Returns the mean of the values in the specified range .
7244	Invokes a method on the given object using the given arguments .
7245	Reduce the values in the array using the given reduceBy function .
7246	Euro UTC system date string .
7247	Returns true if the given object matches the given criteria .
7248	Creates a Criterion that is not in the given values .
7249	Creates a criteria from a list of objects .
7250	Creates a criteria from a JSON string .
7251	Adds an array of integers to the end of the array .
7252	Returns the maximum element in the given array .
7253	Returns the first count elements of the given list .
7254	Returns the last element of the list .
7255	Returns the last element of the list .
7256	Returns the least count elements of the given list .
7257	Returns the minimum element in the list .
7258	Returns the minimum element of the array .
7259	Process an array of maps .
7260	Handles a collection of maps .
7261	Creates an object from a map .
7262	Returns the value associated with the given key .
7263	Creates a tooltip for the given field name using the given resource bundle .
7264	Generates a label value for the given field name .
7265	Adds a hexidecimal value to this CharSequence .
7266	Process the read queue .
7267	Process the write queue .
7268	Start the data store process .
7269	Find the first occurrence of the specified character in the specified string starting at the specified index .
7270	Returns a substring of the specified string starting from the specified index .
7271	Checks if a char array is contained in a string .
7272	Add a character to a string .
7273	Add objects to a String .
7274	Compacts a string .
7275	Splits a string into an array of strings .
7276	Split by space .
7277	Split a string by pipes .
7278	Converts a char array of char array to a string array .
7279	Convert a string to camelCase
7280	Returns true if start string is inside of end string
7281	under - bar - case .
7282	Convert a Number to a String .
7283	Creates a new Sort from the given array of Sorts .
7284	Sorts the given list according to the given fields .
7285	Returns a comparator for this field .
7286	Gets the child comparators .
7287	Returns true if the given value is contained in the given map .
7288	Returns true if the expected value is equal to the got value .
7289	Checks if two arrays are equal .
7290	Returns the sum of the values in the specified range .
7291	Round up to power of 2 .
7292	Sorts the given list according to the given sortBy and fields
7293	Sorts the given list according to the given sortBy and fields .
7294	Sets the value of a field from a map .
7295	Converts an object to a list .
7296	Create the SQL to load all version data .
7297	Returns a deep copy of the given list .
7298	Returns true if the specified object has a String field .
7299	Checks if a class has a string field with the specified name .
7300	Returns true if the specified class has a field with the specified name .
7301	Gets the first comparable or primitive field name from the given class .
7302	Returns the sortable field name for the given object .
7303	Compares this object with the specified object .
7304	Compare the time of this entry with the given one .
7305	Sorts the given list according to the given sorts .
7306	Sorts the given list according to the given sortBy and ascending .
7307	Sorts the entries of the given map .
7308	Sorts the values of a Map .
7309	Sorts the keys of the given map .
7310	Sorts the given array according to the given sortBy and ascending .
7311	Returns a comparator for the given field .
7312	Returns a comparator that can be used to sort the objects in ascending or descending order .
7313	Returns the value associated with the given key .
7314	Returns the value associated with the given key or null if the key does not exist .
7315	Returns the current order .
7316	If the size of the list is greater than the evictSize then remove all entries from the map .
7317	If the given value is not already initialized it will be initialized . Otherwise it will be initialized .
7318	Allocates a buffer for the specified size .
7319	Determines if we should exit .
7320	Manages the input writer channel .
7321	Check if the queue is empty and if so flush it .
7322	Start monitoring .
7323	Start monitoring .
7324	Returns the value associated with the specified key .
7325	Main query plan .
7326	Filters the given group .
7327	Updates the current time .
7328	Syncs the output stream to disk .
7329	Closes the output stream .
7330	Writes the next buffer to the output stream .
7331	Writes the buffer out to the output stream .
7332	Initializes the output stream .
7333	Adds all values from the given map to this map .
7334	Converts the given key to a byte array .
7335	Reads the validator meta data from the properties file .
7336	Extract meta data from a string .
7337	Reads the validator meta data for the given property .
7338	Extract the validator meta data for the given field and property .
7339	Extract metadata from annotations .
7340	Convert annotation data to validator meta data .
7341	Splits a string into an array of strings .
7342	Splits a string by whitespace .
7343	Splits a string by delimiters .
7344	Remove chars from a string .
7345	Splits the specified string into an array of strings using the specified delimiters .
7346	Parse a double .
7347	Parse an integer from a string .
7348	Parse a long from a string .
7349	Returns the value of the property at the given path .
7350	Gets the fields from an object .
7351	Returns the type of the property .
7352	Injects the specified value into the specified object property .
7353	Sets the property at the given path to the given value .
7354	Returns the value of the collection property at the given index in the path .
7355	Returns the value of a property in an object .
7356	Returns the value of a property as an int .
7357	Initializes the message .
7358	Creates a message with the specified key and arguments .
7359	Creates a validation message .
7360	Converts a list of keys to an array of values .
7361	Returns the subject .
7362	Parses a JSON string into an object .
7363	Sends an HTTP request to the client .
7364	Deletes a database .
7365	Creates a database .
7366	Returns a list of UUIDs .
7367	Lists all resources under the given path .
7368	Triggers the replication .
7369	Query for a single value .
7370	Sets whether the view should be sorted descending or not .
7371	Synchronize all design documents with the database .
7372	Retrieves the design document with the given id from the database .
7373	Gets all design docs from the Desk directory .
7374	Gets a DesignDocument from the Desk .
7375	Saves the replicator to the database .
7376	Find the replicator document .
7377	Finds all documents in the database .
7378	Removes a document from the replicator .
7379	Finds an object from the database .
7380	Finds all documents that match the given JSON query .
7381	Returns true if the document with the given id exists in the database .
7382	Bulk inserts a list of objects into the database .
7383	Performs an HTTP PUT on the given URI .
7384	Performs an HTTP PUT on the given URI with the given content .
7385	Performs a POST request to the given URI .
7386	Performs a HTTP DELETE on the given URI .
7387	Validates the given HTTP response .
7388	Sets the entity .
7389	Adds an attachment .
7390	Returns the changes for the feed .
7391	Reads the next row from the continuous stream .
7392	Converts a double value to a string .
7393	Shuts down the lock manager .
7394	Writes the given data to the given output stream .
7395	Adds tags to a metric .
7396	Verify and create temp tables .
7397	Returns the project id for the given namespace .
7398	Checks if the request is a query .
7399	Send the authentication request .
7400	Returns the HTTP verb for the given request .
7401	Generate a subject access token .
7402	Handles a request result .
7403	Handles a client request failure .
7404	Initializes the database .
7405	Find all scheduled jobs for a given time slice .
7406	Converts a map of buckets to a list of buckets .
7407	End the exchange with the specified status code and reason phrase .
7408	Find all data from the bucket .
7409	Returns the number of buckets between start and end with the given step .
7410	Send a message .
7411	Send one - way message .
7412	Send delay message .
7413	Scan for keys .
7414	Sets the value for the given property .
7415	Adds a file to the zip .
7416	Replaces the contents of the given file with the given text .
7417	Builds the zip file .
7418	Generate metrics for the given component and product .
7419	Fetch content .
7420	Fetch order content .
7421	Uploads an export transformation to the server .
7422	Generates the metrics for the given components .
7423	Creates a new directory in the given parent directory .
7424	Adds a plural object to the end of the tree .
7425	Registers an adaptor for the given type .
7426	Register an attribute renderer for the given type .
7427	Prepare the template .
7428	Add a domain object to the assembler .
7429	Sets a property .
7430	Adds a child object to the given collection .
7431	Returns a supplier that can be used to create a file from a directory .
7432	Copies the contents of an input stream to an output stream .
7433	Parses the given file .
7434	Parses an XML document from the given reader .
7435	Returns the elements in the given parent element .
7436	Returns all nodes in the given parent element .
7437	Returns the first child element with the given names .
7438	Returns a stream of all named elements in the given parent .
7439	Validates the given XML using the given XML schema .
7440	Entry point for the file archiver .
7441	Creates a new content builder from the given input stream .
7442	Creates a builder from a resource .
7443	Reads an entry from the zip and processes it .
7444	Encodes the given string using the ASCII characters encoding .
7445	Sets the signature of the request .
7446	Removes all non - whitespace characters from the given char array .
7447	Signs the request .
7448	Sets the data to the recorder .
7449	Complete multi upload .
7450	This method is invoked when the action is invoked .
7451	Adds a new state for an entry .
7452	Returns true if the cache has expired .
7453	Returns the notification with the given id .
7454	Returns the list of addressees for a notification
7455	Returns the addressee for the given addressee id .
7456	Returns the list of events for a given notification
7457	Returns the event for the given event id .
7458	Returns the REST URL for a single notification .
7459	Returns the entry with the given id .
7460	Gets the authentication token .
7461	Returns the number of notifications .
7462	Add new categories .
7463	Fetch the SSP Notifications for the active task .
7464	Creates a notification response with an error message .
7465	Maps the given response entity to a NotificationResponse .
7466	Maps a row to a notification entry .
7467	Attaches the actions to the given NotificationEntry .
7468	Normalize the given link .
7469	Gets the notification category .
7470	Returns the source of the notification .
7471	Invoke the action .
7472	Reads the data from a file .
7473	Returns the user s school id .
7474	Extract the user id from the response .
7475	Hide or unhide the notification .
7476	Gets the attributes map .
7477	Normalizes the given tuple so that it can be used as a location .
7478	Returns true if boxA is contained in boxB .
7479	Finds the point which is closest to P .
7480	Returns the sign of the point .
7481	Sets the camera parameters from the Se3_F64 .
7482	Sets the rotation matrix .
7483	Converts a rectangle into a 4D polygon .
7484	Converts a 4 - sided polygon into a 4 - sided polygon .
7485	Computes the bounding rectangle of the quad
7486	Computes the bounding rectangle of the polygon
7487	Returns the center of the quad .
7488	Computes the average point for each vertex in the polygon
7489	Computes the convex hull from a list of points
7490	Removes all vertices in the polygon that are below the given tolerance .
7491	Returns the average error of the points on the line that are closest to the target polygon .
7492	Computes the intersection of two polygons .
7493	Returns true if the quad contains the given point .
7494	Returns true if the given point is inside the triangle
7495	Returns the intersection of two lines
7496	Returns the intersection of two line segments .
7497	Computes the intersection of two lines .
7498	Computes the intersection of the line segment with the target line segment .
7499	Computes the intersection of two polygons .
7500	Returns true if the specified ellipse contains the specified point .
7501	Computes the intersection area of two rectangles .
7502	Returns the value at the given index in the matrix .
7503	Converts a 3x3 matrix into a 3x3 quaternion .
7504	Computes the rotation matrix R
7505	Sets the rotation matrix .
7506	Computes the rotation matrix for Y axis .
7507	Rotates a 3x3 rotation matrix .
7508	Sets the rotation matrix to a rotation matrix .
7509	Converts a rotation matrix into a 3x3 matrix .
7510	Computes the rotation about the axis
7511	Sets the angle .
7512	Computes the twist coordinate from the motion .
7513	Sets the initial and end camera transformations .
7514	Interpolates a point from the initial to the output .
7515	Computes the SVD of a list of points .
7516	Solves a point on the plane .
7517	Returns the length of the side at the specified index .
7518	Returns true if the given point is inside the image .
7519	Converts a ConicGeneral_F64 into a 3x3 matrix .
7520	Converts a ConicGeneral_F64 into a real 3x3 matrix .
7521	Converts a ConicGeneral_F64 into a Parabola General_F64
7522	Converts a Parabola general image into a ConicGeneral image .
7523	Divides the coordinates of p by v
7524	Converts a GeoTuple3D_F64 into a 3x3 matrix
7525	Converts a 3D matrix into a GeoTuple .
7526	Sets the parameter vector .
7527	Computes the distance between two angles .
7528	Returns true if the two lines intersect .
7529	Returns true if the plane is contained within the plane .
7530	Returns true if the line and the sphere intersect .
7531	Interpolate two Se2_F64s
7532	Extracts the quaternion from the quaternion matrix .
7533	Computes the hull from the input points .
7534	Sets the camera to no motion
7535	Converts a Se3_F64 image into a homogeneous image .
7536	Converts a Se2_F64 image into a homogeneous image .
7537	Computes the 3x3 axis of a Se3 image .
7538	Returns true if two Se3_F64 are identical .
7539	Converts a latitude longitude coordinate to a unit vector .
7540	Returns true if the point is inside the circle
7541	Computes the squared Euclidean distance between two points .
7542	Returns the point closest to l0 and l1 .
7543	Returns the point closest to the given point .
7544	Returns the point which is closest to the plane s origin .
7545	Returns the point closest to the given point .
7546	Returns the point which is closest to the given point .
7547	Transform a Point2D_F64 into a Point2D_F64
7548	Transform the points in the Se2_F64 image .
7549	Returns true if this quad is equal to the given tolerance .
7550	Computes the acute angle between two lines
7551	Converts a line polar into a line parametric image .
7552	Converts a line general image into a line polar image .
7553	Converts a line segment into a line parametric image .
7554	Converts a line segment into a line general image .
7555	Converts two lines into a line general image .
7556	Convert a line into a line parametric image .
7557	Converts a line parametric into a line polar .
7558	Converts a line parameteretric image into a line general image .
7559	Converts a line general image into a line parametric image .
7560	Converts a plane normal into a general plane .
7561	Converts a plane tangent into a plane normal .
7562	Converts a 3D plane into a 3D plane .
7563	Convert a Point2D into a 3D Point .
7564	Convert a plane to a world plane .
7565	Returns true if this matrix and t are identical .
7566	Returns a copy of this matrix .
7567	Returns the squared value of this vector .
7568	Computes the t - value of the point on the line .
7569	Returns true if this matrix is uncountable .
7570	Returns true if the parabola is equivalent to this one .
7571	Returns the center of the plane .
7572	Computes the acute angle between two lines .
7573	Returns true if the given point is infinite .
7574	Random number of points
7575	Converts a point in homogeneous coordinate system into a 3D coordinate system .
7576	Subtracts two vectors .
7577	Returns true if the two values are the same sign .
7578	Sets this rectangle to be equal to the specified rectangle .
7579	Converts an ellipse to a quadratic quadratic .
7580	Computes the point of the ellipse at a given time .
7581	Computes the angle between a point and an ellipse .
7582	Computes the tangent of an ellipse
7583	Selects the tangent .
7584	Returns the corner at the specified index .
7585	Computes the distance between two lines .
7586	Returns the distance between a line and a point .
7587	Returns the distance between a point and a line segment .
7588	Returns the distance between the plane and the given point .
7589	Computes the distance between a point and a cylinder .
7590	Returns the Euclidean distance between two line segments .
7591	Returns the squared Euclidean distance between two line segments .
7592	Returns the Euclidean distance between the quad and the given point .
7593	Returns the squared Euclidean distance between a point and a line segment .
7594	Computes the Euclidean distance between a polygon and a point .
7595	Returns the squared Euclidean distance between a point and a line segment .
7596	Computes the distance from the origin to the line .
7597	Computes the Euclidean distance between a point and an ellipse .
7598	Computes the Euclidean distance between a point and an ellipse .
7599	Adds a transform to the path .
7600	Returns the point closest to the given point .
7601	Finds the closest point in the ellipse to the given point
7602	Computes the polynomial curve .
7603	Creates a random vector from the specified values .
7604	Computes the perpendicular 3D vector .
7605	Returns true if the two vectors are identical .
7606	Normalize a vector .
7607	Creates a 3x3 matrix from the given vector .
7608	Converts a 3x3 matrix into a 3x3 matrix .
7609	Returns the Euclidean distance between the specified coordinates .
7610	Sets the ellipse .
7611	Normalize this vector .
7612	Computes the distance between two triangle points .
7613	Returns the value of the quadrilateral triangle .
7614	Computes the simple distance between two polygons .
7615	Returns the mean of the points in the list .
7616	Returns the order of the points in the CCW direction .
7617	Computes the normal covariance matrix .
7618	Returns true if the polygon is convex .
7619	Multiply this vector by the given scalar .
7620	Returns the maximum absolute value .
7621	Computes the Euclidean distance between two points .
7622	Returns the squared Euclidean distance between the specified points .
7623	Returns a random number of points in the plane .
7624	Randomly generates a list of points .
7625	Random number of points
7626	Computes the mean of a list of points .
7627	Computes the mean of a list of points .
7628	Invalidates all credentials from the cache .
7629	Invalidates all jwt contexts that match the given predicate .
7630	Combines the given collections into a single set .
7631	Get the server features from the server . xml file .
7632	Get the server features from the configDropins folder .
7633	Get the features from the server . xml file .
7634	Parse the include node .
7635	Parse the feature manager node .
7636	Downloads the json file for the given product id and version .
7637	Returns the set of liberty features found in the given JSON files .
7638	Checks if there are only Open Liberty features to install .
7639	Checks if the given collection contains all of the target strings ignoring case .
7640	Returns the next product version .
7641	Extracts the symbolic name from a jar file .
7642	Returns the install map jar for the kernel .
7643	Returns true if file1 is a replacement jar .
7644	Extracts the version from a file name .
7645	Compares two versions .
7646	Executes the productInfo command on the specified install directory .
7647	Checks if the given artifact is a Spring Boot Uber jar .
7648	Get a property from the arquillian properties .
7649	Returns true if the given file is working in this environment .
7650	Move back to center .
7651	Checks if two objects are equal .
7652	Loads an integer from a string .
7653	Throw a pizza party .
7654	Verify the Turtle image .
7655	Swaps the blank index of this puzzle with the target index .
7656	Gets the distance to the goal .
7657	Prints a formatted string using the default locale .
7658	Prints a formatted string to the standard output stream .
7659	Makes a decision for a given number of fishes .
7660	Print a variable .
7661	Returns a uniform value between a and b .
7662	Returns a uniform value between a and b .
7663	Returns the k - th poisson distribution for the given lambda .
7664	Returns the index of the first non - negative entry in the given array .
7665	This is the main method of the StdRandom class .
7666	Capitalizes the first character of a word .
7667	UnCapitalizes the first character of a word .
7668	Fixes the path .
7669	Converts a CriteriaJoin to a String
7670	Gets the token sentence .
7671	Filter the request .
7672	Extract the auth token from a cookie list .
7673	Registers the injector as a guice bound .
7674	Gets all role permissions for the given role .
7675	Adds a projection to the list .
7676	Convert JobInfo to JobDetail
7677	Convert trigger info to trigger .
7678	Sets the count interval values .
7679	Sets the start and end time .
7680	Add a mail item to the queue .
7681	Writes the contents of the buffered input stream to the output stream .
7682	Initializes the scheduler .
7683	Returns a sorted list of all fields of the given class .
7684	Returns the field map for the given class .
7685	Converts an exception to a response .
7686	Configures the encryptor with the given configuration .
7687	Generate the attributes hash .
7688	Generate a new token string .
7689	Send a mail item .
7690	Generates a strong password for the given user .
7691	Changes the password of a user .
7692	Returns the user for the given account name .
7693	Hashes a password .
7694	Verifies that the given account name is a valid email address .
7695	Verifies the strength of the new password .
7696	Provide the search model .
7697	Commit the transaction if it is active .
7698	Rollback the current transaction if it is active .
7699	Starts the transaction .
7700	Configures a field by name .
7701	Checks if the given token is authorized for the given matchedTemplates and method .
7702	Parses the given object using the specified field .
7703	Returns the internal error response .
7704	Creates an equals restriction .
7705	Creates a not equals restriction .
7706	Creates a less than restriction .
7707	Creates a less or equal to restriction
7708	Creates a greater than restriction .
7709	Creates a greater or equal to restriction
7710	Creates an ilike restriction .
7711	Creates an IN restriction .
7712	Adds a new namespace to this manager .
7713	Returns a copy of this representation with the given content .
7714	Adds a new rel to this representation .
7715	Returns a copy of this representation with a new value .
7716	Adds a namespace to the representation .
7717	Returns true if the given byte array can be decoded .
7718	Encodes a string into a byte array .
7719	Returns true if two Reader objects are equal .
7720	Moves a file from one location to another .
7721	Creates and sets last modified time of the given files .
7722	Returns the base name of a file .
7723	Add padding .
7724	Returns the short name of a class .
7725	Returns the set of super types of the given class .
7726	Verifies the given hash against the given password .
7727	Reads a string from System . in using the specified charset .
7728	Appends a byte to the end of the buffer .
7729	Appends the specified bytes to this buffer .
7730	Creates a copy of the given array .
7731	Adds the given fraction to this fraction .
7732	Subtracts the given fraction from this fraction .
7733	Multiplies this fraction by the given fraction .
7734	Divides this fraction by the given fraction .
7735	Returns the maximum value of the given long values .
7736	Returns the minimum value of the given long values .
7737	Checks if the condition is true .
7738	Fetches the content of a location forecast .
7739	Fetch Sunrise data .
7740	Fetch Sunrise data .
7741	Returns a list of forecasts for the given number of hours from now .
7742	Finds the nearest forecast for a given date .
7743	Fetches the content of a specific forecast .
7744	Create a simple long term forecast .
7745	Create a long term forecast .
7746	Creates a new Location from the given coordinates string .
7747	Fetches the available data from Meteo .
7748	Returns the wid symbol name for the given point forecast .
7749	Find the BeaufortLevel for a given PointForecast .
7750	Creates a new URI from the given string .
7751	Checks if the current date is SUN .
7752	Returns the point forecast for the given date .
7753	Gets the best fit period forecast .
7754	Fetch text location weather data .
7755	Fetches the content of a text location weather .
7756	Update the database .
7757	Invoke a string method .
7758	Acquires the object from the data source .
7759	Returns a ReferencedObject for the given class and reference .
7760	Gets the wrapped object .
7761	Returns the configuration for the given class .
7762	Gets the isSubstitutorEnabled .
7763	Creates a class iterator for the given service and serviceName .
7764	Get the Decoder from the configuration .
7765	Returns a list of all instances of the specified interface .
7766	Returns the module instance for the given interface implemented and moduleType .
7767	Acquires the stream .
7768	Returns the size of the data .
7769	Gets the wrapped data .
7770	Returns the component at the given index .
7771	Returns the prefix of this name with the given index .
7772	Returns true if this node is colored .
7773	Executes the given regular expression using the given flags .
7774	C - find loop .
7775	Sets the match to a subset of the expression .
7776	Returns true if the given subexpression can be considered to be cdissected .
7777	Returns true if t is a c - br - dissected subexpression .
7778	Clones the out chains of the old state .
7779	Optimize a sub - tree .
7780	Mark a subre as in use .
7781	Returns the number of nodes in the tree .
7782	Parse a regular expression .
7783	Recursively deltraverse a state .
7784	Create a new non - word state .
7785	Clones the state of a word .
7786	Reads a reference number from the scanner .
7787	Consumes a bracket .
7788	Scan a plain string .
7789	Creates a new lacon .
7790	Handle a single character .
7791	Do a vector of characters .
7792	Returns the color associated with the given codepoint .
7793	Returns the pseudocolor color .
7794	Adds an arc to the current state .
7795	Check that all the colors are ok .
7796	Sets the colorchain of an arc .
7797	Remove an arc from its colorchain .
7798	Dump all color descriptors .
7799	Lex a regular expression .
7800	Checks if there are any prefixes .
7801	Lex - nests an interpolated string .
7802	Returns the color of the given codepoint .
7803	Initializes the state set .
7804	Returns the last cold state .
7805	Returns a UnicodeSet that contains the specified character .
7806	Returns the UnicodeSet for the given class name .
7807	Sort the arcs in ascending order .
7808	Dump the state of this node .
7809	Creates a new state .
7810	Move all outputs from old state to new state .
7811	Move old state to new state .
7812	Copies a state from one state to another .
7813	Copy outchains from old state to new state .
7814	Drop a state .
7815	Frees a state .
7816	C - parity of an arc .
7817	Performs a deep - traversal of a state .
7818	Sets the special colors .
7819	Dump the nfa .
7820	Dump a state .
7821	Dump the contents of the outputs to a StringBuilder .
7822	Dump an arc to a string builder .
7823	Dump a Arc to a StringBuilder .
7824	Optimize the regular expression .
7825	Analyzes the chain and returns the flags . REG_UEMPTYMATCH flag .
7826	Combines two Arcs .
7827	Clean up the state tree .
7828	Mark a state as reachable .
7829	Mark a state as canreach .
7830	Fixes all empty states .
7831	Returns true if the arc is unempty .
7832	Returns the rule parameters from the rule parameters file .
7833	Gets the rule interpreter plugins .
7834	Gets the report plugins .
7835	Returns the rule selection for the given rule set .
7836	Runs the command line .
7837	Gets the error message .
7838	Gather standard options .
7839	Gather tasks options .
7840	Gathers task names .
7841	Interprets the command line .
7842	Returns the command line .
7843	Executes the given task .
7844	Reads the properties from the properties file .
7845	Prints the usage .
7846	Returns the home directory .
7847	Creates a plugin class loader .
7848	Returns the ids of all the containing ids of all cells in the grid .
7849	Returns a set of all ids that are intersecting with the given coordinates .
7850	Returns the URI for the given target .
7851	Add a route to the router .
7852	Returns the number of routes in this chain .
7853	Add a route to the first route list .
7854	Add a route to this router .
7855	Adds a route to the end of the routing chain .
7856	Returns true if any of the request path tokens are matched .
7857	Returns a Criterion that is equal to the given value .
7858	Returns the file name for the store .
7859	Compares two folders .
7860	Compares two entries .
7861	Compares two Bookmarks .
7862	Sets the last modified time of the servlet class .
7863	Returns the dependants of this JspSource .
7864	Find the class with the given name .
7865	Parses the Authorization header and returns the tokens .
7866	Returns a new instance of the ProtectedFunctionMapper .
7867	Maps a method to a function .
7868	Returns a new ProtectedFunctionMapper for the given method name and arguments .
7869	Returns the method for the given prefix and local name .
7870	Sets the values of this buffer .
7871	Resolves a variable in the EL context .
7872	Parse a tag file .
7873	Parses the given file into a tree of nodes .
7874	Parse the tag file directives .
7875	Do the actual parsing of the file .
7876	Create a Jasper compiler .
7877	Returns a resource as a java . io . InputStream
7878	Calculates the last mod of all channels .
7879	Returns a list of all the class loaders in the stack .
7880	Checks if the given classloader is a parent of this class loader .
7881	Starts the loading of the given name .
7882	Read the stream header .
7883	Paginate a list of objects .
7884	Create a MetaKey from a string .
7885	Fill the requirements .
7886	Returns the TagFileInfo for the given tag file name .
7887	Parse the implicit TLD .
7888	Gets the checksum for a file .
7889	Returns the size of the given file .
7890	Validates the channel name .
7891	Seeks to the given block number .
7892	Locates the block at the given position .
7893	Returns the list of Maven artifacts for the given channel .
7894	Updates the state of the current option .
7895	calculate 1 - byte prices .
7896	Calculates the price for a long match .
7897	Calculates the normal match prices .
7898	This method throws a UTFDataFormatException with an expected byte .
7899	This method throws an exception if the given byte is invalid .
7900	Scan the TLDs in the WEB - INF directory .
7901	Scan the TLD .
7902	Adds a new wrapper for the specified jsp uri .
7903	Returns the parent class loader .
7904	Sets the bytecode for the given name .
7905	Gets the bytecode birth time .
7906	Saves the bytecode of a class to a file .
7907	Performs the actual compile of all the servlets .
7908	Initialize the classpath .
7909	Start the thread .
7910	Stops the current thread .
7911	Run the compile loop .
7912	Finds a channel by its name .
7913	Finds a channel .
7914	Update the deploy group cache .
7915	Returns a list of groups .
7916	Copies the contents of an input stream to an output stream .
7917	Parse the contents of a file .
7918	Parse the attributes from the specified JspReader .
7919	Parse a quoted string .
7920	Add include directives .
7921	Parse a jsp attribute and a jsp body .
7922	Add an attribute .
7923	Add a child node .
7924	Returns an iterator over the attributes .
7925	Returns the children of this node .
7926	Finds all children with the given name .
7927	Returns a copy of this MavenCoordinates .
7928	Finds the alias for the given variable name .
7929	Sets the thread .
7930	Un - sets the thread .
7931	Returns the wrapped PrintStream .
7932	Write an optional field .
7933	Writes the given value to the given writer .
7934	Add a new element to a parent element .
7935	Adds an element to the first child of the given parent element .
7936	Writes the contents of the buffer to the specified Writer .
7937	Sets the writer .
7938	Re - allocates the buffer for the specified length .
7939	Maps a page to an EL function .
7940	Gets the same parent state .
7941	Registers a new model provider .
7942	Streams the contents of the given meta key to the given IOConsumer .
7943	Monitor a job .
7944	Checks if the user is authenticated .
7945	Finishes writing the output stream .
7946	Creates a new Gson instance .
7947	Encode for LZMA2 .
7948	Returns the union of the provided meta data and extracted meta data .
7949	Get the Throwable associated with this request .
7950	Checks if the given coordinates have a checksum extension .
7951	Finishes the stream .
7952	Gets the exception .
7953	Evaluate an EL expression .
7954	Make the prefix from the osgi . service . http . port .
7955	Checks if the file is an XML file .
7956	Parse the tag file directives .
7957	Load a tag file .
7958	Remove all generated class files for a given class file name .
7959	Main entry point for the jspc command .
7960	Set the URI root .
7961	Scan all files in the given directory .
7962	Locates the uri root .
7963	Initialize the system class loader .
7964	Moves to the next available position in the chain .
7965	Returns true if this string matches the given string .
7966	Checks if the given string is followed by any optional spaces .
7967	Skips until the given string is found .
7968	Skip until the next character in the limit is found .
7969	Skip until a tag is found .
7970	Parses the next token .
7971	Pop a file from the current stream .
7972	Returns an unclassified version of this coordinates .
7973	Filters the given list of AspectInformation by the given predicate .
7974	Returns an array of ids that are required for this aspect .
7975	Sets the schema resource prefix .
7976	Sets the DTD resource prefix .
7977	URL - encode a prefix .
7978	Convert a node to a tree node .
7979	Merge errors .
7980	Initializes the binder .
7981	Scan aspect information .
7982	Unqualifies a path .
7983	Invokes the tag plugin .
7984	Returns a byte array with the specified size .
7985	Returns an int array with the specified size .
7986	Converts a collection of artifact results into an AetherResult .
7987	Returns the input stream for the specified resource .
7988	This method is used to validate the tag library .
7989	Pushes a stream to the include stack .
7990	Get the encoding for a file .
7991	Scan an XML declaration .
7992	Report a fatal error .
7993	Returns the real path of the resource .
7994	Returns the resource at the given path .
7995	Gets a resource as an input stream .
7996	Returns a set of resource paths for the given path .
7997	Log a message and exception .
7998	Add a filter .
7999	Get the buffer size .
8000	Get the memory usage in bytes .
8001	Sets the preset dictionary .
8002	Moves the read window to the write window .
8003	Fills the window with the specified bytes .
8004	Process pending bytes .
8005	Returns the number of bytes in the buffer that are equal to the specified length .
8006	Returns the length of the first occurrence of a character in the buffer .
8007	Verifies that the matches have the same length .
8008	Moves the read position to the next available position .
8009	Recycle the response .
8010	Flushes the buffer to the underlying output stream .
8011	Clears the contents of the buffer .
8012	Flushes the response .
8013	Closes the output stream .
8014	Writes a string to the output stream .
8015	Allocate a char buffer .
8016	This method will throw a JasperException if the compilation fails .
8017	Make a key from a meta data map .
8018	Generate the class .
8019	Compile the Jasper file .
8020	Remove all generated files .
8021	Initialize the JavaCompiler .
8022	Returns true if the given path points to a system jar in WEB - INF .
8023	Quote a character .
8024	Generate the declarations for the page .
8025	Compile the tag handler pool list .
8026	Generate the XML prolog .
8027	Generate common postamble .
8028	Generate the postamble for the page .
8029	Generates a Jasper page .
8030	Generate the tag handler attributes .
8031	Read properties from an input stream .
8032	Export a channel to an output stream .
8033	Validates the XML view .
8034	Returns the tag handler for the given class .
8035	Parse an EL expression .
8036	Selects the property from the prev and curr groups .
8037	Checks if the given URI is a jsp page .
8038	Prints a comment .
8039	Print in a string .
8040	Print a string .
8041	Print a multi - line string .
8042	Returns the expression in XML .
8043	Checks that the given scope is valid .
8044	Escapes an XML string .
8045	Validates the given expressions .
8046	Returns the class name of the tag handler class .
8047	Make a Java package name from a path .
8048	Splits a path into an array of strings .
8049	Make a Java identifier .
8050	Mangles the given character .
8051	Returns true if the given key is a java keyword .
8052	Add a property to a map .
8053	Returns a string representation of the given modifier .
8054	Returns the metadata for the given namespace and key .
8055	Run the task .
8056	Returns the basename of the given name .
8057	Put a value into the cache .
8058	Load a value from the database .
8059	Builds the metrics collection from the given payload .
8060	Resolve a number .
8061	Writes an object to an output stream .
8062	Returns the TTL for the given rollup type and granularity .
8063	Create prepared statements .
8064	Track the delayed metrics for the given tenant .
8065	Track delayed aggregated metrics for the given tenant .
8066	Reads a double or long from the stream .
8067	Put an unversioned double or long .
8068	Returns an unmodifiable view of all properties .
8069	Creates a new container .
8070	Schedule all slots eligible for rollup .
8071	Clears the given slot from running .
8072	Adds a listener to the specified event .
8073	Registers a listener to be called only once .
8074	Remove an event from the emitter .
8075	Emits an event to all registered listeners .
8076	Returns the list of listeners for the given event .
8077	Returns the remote name .
8078	Append a RollupEvent to the output stream .
8079	Parse a timestamp from a file name .
8080	Start the server .
8081	Returns the RollupComputer for the given type and granularity .
8082	Get the IOContainer from the configuration .
8083	Put a TTL value into the given table .
8084	Compute maximums .
8085	Format the header .
8086	Formats an array of output strings .
8087	Register metrics for ZooKeeperShardLockManager .
8088	Sets the name of the pool .
8089	Adds the given metric index to the set of metrics .
8090	Returns the complete metric names from the metric index map .
8091	Returns a list of tokens for the given locator .
8092	Adds a rollup to the cache .
8093	Returns the granularity for the given points in the given interval .
8094	Returns a granularity that is less than or equal to the requested duration .
8095	Sets the server time .
8096	Returns the set of unique hosts .
8097	Returns the maximum number of connections per host .
8098	Returns an iterable over the metric column families .
8099	Inserts a collection of metrics into the database .
8100	Inserts the given metrics into the metrics table .
8101	Returns the set of Locators for the given execution context .
8102	Fetch metric names from elasticsearch .
8103	Returns the current level of the regex that matches the given query .
8104	Start the storage manager .
8105	Stops the file uploader .
8106	Check if the given Locator is currently in the batch layer .
8107	Returns true if the given locator is currently in the discovery layer .
8108	Returns true if the given locator is currently in the token discovery layer .
8109	Returns true if the given locator is currently in the given slot .
8110	Set a new locator for the current slot .
8111	Returns a map of ranges that are finer than the given range .
8112	Returns an iterable over the ranges in the given range .
8113	Insert full metrics .
8114	Inserts the given metrics into the given column family .
8115	Checks if the given metric is delayed .
8116	Returns the bound statement for the given metric if it is delayed .
8117	Gets metadata values .
8118	Returns an AbstractSerializer for the given type .
8119	Checks if the content type is valid .
8120	Checks if the accept header is valid .
8121	Inserts a batch of metrics into the elasticsearch index .
8122	Checks that at least one of the aggregated metrics is present .
8123	Do the actual check .
8124	Returns a new instance of the extractor .
8125	Returns true if the given OS names and versions match .
8126	Starts the download and extract process .
8127	Stops the server .
8128	Returns a default instance of PnSignalingParams .
8129	Add ice servers .
8130	Add ice servers .
8131	Transmit a message to a user
8132	Send a message to all peers .
8133	Gets the value of the weitereAdresse property .
8134	Gets the value of the userDefinedSimplefield property .
8135	Gets the value of the userDefinedAnyfield property .
8136	Sets the value of the apiSuchfelder property .
8137	Gets the value of the multimediaAnhang property .
8138	Gets the value of the statusVBM property .
8139	Gets the value of the status field .
8140	Gets the value of the statusHP property .
8141	Gets the value of the importmodus property .
8142	Gets the value of the adressdruck property .
8143	Gets the value of the waehrung property .
8144	Gets the value of the bodenbelag property .
8145	Sets the value of the region property .
8146	Sets the value of the area property .
8147	Sets the value of the address property .
8148	Sets the value of the description property .
8149	Sets the value of the rentCollectionPeriod property .
8150	Sets the value of the furnished property .
8151	Sets the value of the phone1 property .
8152	Sets the value of the phone2 property .
8153	Sets the value of the contactName property .
8154	Sets the value of the phoneInfo property .
8155	Sets the value of the mainEmail property .
8156	Sets the value of the ccEmail property .
8157	Sets the value of the externalId property .
8158	Sets the value of the agentId property .
8159	Sets the value of the epart property .
8160	Sets the value of the jahrgang property .
8161	Sets the value of the gebaeudeart property .
8162	Sets the value of the bueroTyp property .
8163	Checks if a string is a numeric value .
8164	Sets the value of the gebiete property .
8165	Sets the value of the gruppe property .
8166	Sets the value of the agent property .
8167	Gets the value of the property property property property property .
8168	Sets the value of the stand property .
8169	Gets the value of the userDefinedExtend property .
8170	Sets the value of the zeiteinheit property .
8171	Gets the value of the zimmer property .
8172	Gets the value of the haus property .
8173	Gets the value of the bueroPraxen property .
8174	Gets the value of the gastgewerbe property .
8175	Gets the value of the landUndForstwirtschaft property .
8176	Gets the value of the sonstige property .
8177	Gets the value of the zinshausRenditeobjekt property .
8178	Gets the value of the terrain property .
8179	Sets the value of the umfang property .
8180	Sets the value of the wohnungtyp property .
8181	Returns the ISO 2166 - 2 code for the given country .
8182	Gets the country ISO 2 code from ISO 3166 - 1 code .
8183	Returns the ISO 3166 - 3 code for the given country .
8184	Returns the ISO 3166 - 3 country code for the given ISO 2166 - 2 code .
8185	Returns the name of a country .
8186	Translate a country name .
8187	Gets the value of the anbieter property .
8188	Sets the value of the category property .
8189	Gets the value of the pdf property .
8190	Sets the value of the aktionart property .
8191	Sets the value of the realestateitems property .
8192	Sets the value of the pacht property .
8193	Downgrades the given OpenImmoDocument to the previous version .
8194	Upgrade the OpenImmoDocument from the previous version .
8195	Gets the value of the content property .
8196	Returns the names of the fields .
8197	Sets the value of the blick property .
8198	Sets the value of the pauschalmiete property .
8199	Sets the value of the monatsmiete property .
8200	Gets the value of the parkplatz property .
8201	Sets the value of the lastenaufzug property .
8202	Sets the value of the zustandArt property .
8203	Gets the value of the feld property .
8204	Handles a validation event .
8205	Dump the contents of this record to the specified writer .
8206	Returns the value at the given position .
8207	Print the rows .
8208	Sets the value at the given position .
8209	Sets the value of the ctype property .
8210	Sets the value of the haustyp property .
8211	Gets the value of the energiepass property .
8212	Sets the value of the keller property .
8213	Sets the value of the grundstTyp property .
8214	Sets the value of the geschlAttr property .
8215	Sets the value of the hallenTyp property .
8216	Gets the wiederholungstermin property .
8217	Gets the value of the teilungsversteigerung property .
8218	Upgrade the OpenImmoDocument from the previous version .
8219	Gets the value of the bevorzugt property .
8220	Gets the value of the wunsch property .
8221	Sets the value of the art property .
8222	Sets the value of the modus property .
8223	Gets the value of the emailSonstige property .
8224	Gets the value of the telSonstige property .
8225	Sets the value of the handelTyp property .
8226	Downgrades the given OpenImmoDocument to the previous version .
8227	Sets the value of the apiSuchfeld1 property .
8228	Sets the value of the apiSuchfeld2 property .
8229	Sets the value of the apiSuchfeld3 property .
8230	Gets the value of the row property .
8231	Sets the value of the distanzZuSport property .
8232	Gets the value of the anhang property .
8233	Gets the value of the objektKategorie2 property .
8234	Gets the value of the objektzoneustand property .
8235	Gets the value of the hausKategorie property .
8236	Gets the value of the ausstattungsqualitaet property .
8237	Gets the value of the vermarktungsart property .
8238	Gets the value of the interessent property .
8239	Sets the value of the wert property .
8240	Sets the value of the ackerland property .
8241	Sets the value of the bauerwartungsland property .
8242	Sets the value of the bootsstaende property .
8243	Sets the value of the buero property .
8244	Sets the value of the camping property .
8245	Sets the value of the doppelhaus property .
8246	Sets the value of the einfamilienhaus property .
8247	Sets the value of the einzelhandelGross property .
8248	Sets the value of the einzelhandelKlein property .
8249	Sets the value of the garagen property .
8250	Sets the value of the garten property .
8251	Sets the value of the gastronomie property .
8252	Sets the value of the gewerbe property .
8253	Sets the value of the hotel property .
8254	Sets the value of the industrie property .
8255	Sets the value of the keineBebauung property .
8256	Sets the value of the kleingewerbe property .
8257	Sets the value of the lager property .
8258	Sets the value of the mehrfamilienhaus property .
8259	Sets the value of the obstpflanzung property .
8260	Sets the value of the parkhaus property .
8261	Sets the value of the produktion property .
8262	Sets the value of the reihenhaus property .
8263	Sets the value of the stellplaetze property .
8264	Sets the value of the villa property .
8265	Sets the value of the wald property .
8266	Sets the value of the anbieter property .
8267	Gets the value of the wohnung property .
8268	Gets the value of the grundstueck property .
8269	Gets the value of the einzelhandel property .
8270	Gets the value of the hallenLagerProd property .
8271	Gets the value of the parken property .
8272	Gets the value of the freizeitimmobilieGewerblich property .
8273	Gets the value of the objektartZusatz property .
8274	Gets the value of the stellplatzart property .
8275	Sets the value of the maxDauer property .
8276	Gets the value of the feature property .
8277	Sets the value of the zimmertyp property .
8278	Upgrade the OpenImmo document from the previous version .
8279	Sets the value of the keineAngabe property .
8280	Sets the value of the erdwaerme property .
8281	Sets the value of the solarheizung property .
8282	Sets the value of the pelletheizung property .
8283	Sets the value of the gas property .
8284	Sets the value of the oel property .
8285	Sets the value of the fernwaerme property .
8286	Sets the value of the strom property .
8287	Sets the value of the kohle property .
8288	Returns a random string of the specified length .
8289	Returns a random string of the given length .
8290	Returns a random string of the specified length .
8291	Gets the value of the wohnungKategorie property .
8292	Sets the value of the benutzer property .
8293	Sets the value of the OBJEKTE property .
8294	Gets the value of the feed property .
8295	Sets the value of the moeb property .
8296	Gets the value of the serviceleistungen property .
8297	Sets the value of the subAdministrativeArea property .
8298	Sets the value of the city property .
8299	Sets the value of the locality property .
8300	Downgrades the OpenImmoDocument to the previous version of OpenImmo .
8301	Upgrade the OpenImmo document from the previous OpenImmo version .
8302	Sets the value of the landTyp property .
8303	Gets the value of the field property .
8304	Upgrade the OpenImmoDocument from the previous version .
8305	Gets the value of the ad property .
8306	Sets the value of the gastgewTyp property .
8307	Sets the value of the platzart property .
8308	Gets the value of the datenVerkabelung property .
8309	Gets the value of the klimaanlage property .
8310	Gets the value of the image property .
8311	Sets the value of the priceType property .
8312	Sets the value of the newDevelopmentAvailability property .
8313	Sets the value of the directions property .
8314	Sets the value of the co2Rating property .
8315	Sets the value of the energyRating property .
8316	Sets the value of the viewingDetails property .
8317	Sets the value of the propertyStatus property .
8318	Sets the value of the pictures property .
8319	Sets the value of the bebaubarAttr property .
8320	Upgrade the OpenImmoDocument from the previous version .
8321	Sets the value of the parkenTyp property .
8322	Sets the value of the alterAttr property .
8323	Sets the value of the freizeitTyp property .
8324	Sets the value of the telefonart property .
8325	Sets the value of the emailart property .
8326	Sets the value of the overseasSales property .
8327	Sets the value of the overseasRental property .
8328	Creates a user - defined simplefield node .
8329	Gets the value of the fehler property .
8330	Sets the value of the erbpacht property .
8331	Gets the value of the stpSonstige property .
8332	Gets the value of the valuelist property .
8333	Sets the value of the minDauer property .
8334	Sets the value of the zinsTyp property .
8335	Gets the value of the photo property .
8336	Sets the value of the metadata property .
8337	Sets the value of the projects property .
8338	Sets the value of the properties property .
8339	Downgrades the given document to the previous version of Kyero .
8340	Upgrade the KyeroDocument from the previous version .
8341	Gets the value of the immobilie property .
8342	Gets the value of the objekt property .
8343	Gets the value of the fehlerliste property .
8344	Gets the value of the status property .
8345	Sets the value of the sonstigeTyp property .
8346	Sets the value of the distanzZu property .
8347	Gets the value of the distanzen property .
8348	Gets the value of the distanzenSport property .
8349	Returns true if the given exception is compatible with the throws clause .
8350	Sets the bindings .
8351	Binds the given namespace URI to the given prefix .
8352	Removes a binding for a given prefix .
8353	Returns true if the given string has a opening tag .
8354	Consumes tokens from a comment line .
8355	Consumes the next token from the given line .
8356	Returns the index of the first occurrence of the given token in the line .
8357	Initialize logging for the given location .
8358	Starts the namespace mapping .
8359	Adds an iterator to the composite .
8360	Adds an option to the command line .
8361	Adds a String option .
8362	Adds an integer option .
8363	Adds a long option .
8364	Adds a double option .
8365	Adds a boolean option .
8366	Parse the command line arguments .
8367	Creates a new instance of the given class .
8368	This method is called after an access has been made .
8369	Sets the target object .
8370	Sets the target class and target method .
8371	Finds the best matching method .
8372	Convert an unsigned integer to a string .
8373	Serializes an object to a byte array .
8374	Deserializes an object from a byte array .
8375	Returns the first child element with the given name .
8376	Returns the value of the first child element with the given name .
8377	Returns all child elements of the given element .
8378	Returns true if the node s name matches the desired name .
8379	Returns true if the node s name and local name match the desired names .
8380	Sets the length of a string .
8381	Register a release listener for a given handle .
8382	Adds an entry to the tracked entries .
8383	Keep monitoring thread alive .
8384	Calculates the mobile city for a given phone number
8385	Start a namespace mapping .
8386	End a prefix mapping .
8387	Adds a callback to the future .
8388	Parse the jar and return the tree .
8389	Returns the text color for the given item .
8390	Sets the values of the item .
8391	Returns the color of the item at the given position .
8392	Sets the text size .
8393	Returns the x - coordinate of the item in bounds .
8394	Gets the intro file .
8395	Returns the names of the keywords in the test library .
8396	Returns the arguments for the specified keyword .
8397	Returns the documentation for the specified keyword .
8398	Main entry point for the remote server .
8399	Stops the remote server .
8400	Starts the remote server .
8401	Converts properties from a file to a JSON string .
8402	Converts properties from a file to a JSON string .
8403	Converts the given input stream to a JSON string .
8404	Converts a Properties object to a JSON string .
8405	Converts a map of properties to a JSON string .
8406	Convert from values as object map .
8407	Convert from values as object map .
8408	Converts a properties object to a JSON string .
8409	Returns the radius of the shadow .
8410	Returns a builder for the OCSPFetcher .
8411	Finds the intermediate certificate for the given certificate .
8412	Execute the action .
8413	Processes the markdown files from the given input directory .
8414	Substitutes the given template with the given variables .
8415	Returns the title from the raw list of lines .
8416	Adds the title to the HTML file .
8417	Replaces the variables in the initial content with the given variables .
8418	Update relative paths in html includes .
8419	Copies all files from one directory to another .
8420	Check if the path is a statement or more statement .
8421	Wrap the content of the slider .
8422	Fade up the resize animation .
8423	Fade down the resize view .
8424	Calculates the percentage of the given width .
8425	Overlaps the views with the given width .
8426	Creates an intent to launch an activity .
8427	Launches the activity .
8428	Get Todos
8429	Get FactSheets Get FactSheets
8430	Download file from response .
8431	Build the HTTP client .
8432	Create access control entity
8433	Update Data Model Update Data Model
8434	Create full export
8435	Get Export List
8436	Sets the token provider host .
8437	Sets the client credentials .
8438	Process GraphQL Multipart
8439	Get Bookmarks
8440	Adds the given permissions to the given graph .
8441	Writes the given permissions to the given graph .
8442	Adds a set of rulesets to the graph .
8443	Closes the connection .
8444	Execute a select query .
8445	Create a dataset graph .
8446	Limit the number of threads per process .
8447	Resize the geometry to the specified width and height .
8448	Rotate the GM operation .
8449	Sets the gravity of the operation .
8450	Removes all profiles from the command line .
8451	Sets the font to use .
8452	Adds a source image to the image manager .
8453	Adds an image to the command .
8454	Parses the command line arguments .
8455	Prints the usage of the given target object .
8456	Extract time unit from string .
8457	Parses the given target object .
8458	Executes a slide from the specified URL .
8459	Executes the specified file .
8460	Interprets a PPTX file .
8461	Sort a list of rectangles by their size
8462	Renders the given template text .
8463	Gets the slide . xml . rels file .
8464	Returns true if the mouse event is in the range of the screen .
8465	Finds the elements which overlap vertically with the specified element .
8466	Executes an outbound operation on the queue .
8467	Executes the outbound operation .
8468	Returns the file with the given name .
8469	Gets or creates the temporary directory .
8470	Returns a new LogValueMap with the specified keys and values .
8471	Log a message with a level of TRACE .
8472	Log a message with a level of TRACE .
8473	Log a message with a level of DEBUG .
8474	Log a message with a level of DEBUG .
8475	Log a message with a level of INFO .
8476	Log a message with a level of INFO .
8477	Logs the specified combination of two data items with the specified severity .
8478	Log a message with a level of WARN .
8479	Log a message with a level of WARN .
8480	Log a message with a level of ERROR .
8481	Log a message with a level of ERROR .
8482	Add to context line and method .
8483	Start the steno wrapper .
8484	Writes a list of key - value pairs .
8485	Serialize an IThrowableProxy .
8486	Returns the log value .
8487	Gets the caller data .
8488	Encodes the given value to the given encoder .
8489	Create a new database .
8490	Check the mappings for the given array position .
8491	Parse save attribute .
8492	SaveDataToObjectInContext Method .
8493	Refresh a sheet row from the context .
8494	Parse save attribute string .
8495	Gets the save attribute list from a row .
8496	Get the saved attribute from a list of attributes .
8497	Sets the save object attribute in the hidden column .
8498	Sets save attributes for all rows in a sheet .
8499	Sets the save attributes for the given row .
8500	Prepare the context and attributes for a given cell .
8501	Formats a number .
8502	Put shift attributes .
8503	Set the Workbook to use .
8504	Gets the workbook wrapper .
8505	Gets the formula evaluator .
8506	Recalculate the max column counts .
8507	Load a web sheet from an input stream
8508	Load web sheet .
8509	Load work sheet by tab name .
8510	Export the file .
8511	Do the actual save .
8512	This method is called when the form is submitted .
8513	Populate the component .
8514	Gets the current sheet configuration .
8515	deserializes this object from a stream .
8516	Returns the locale for the given component .
8517	Get the picture from the session map .
8518	Gets the cell helper .
8519	Gets the PicturesHelper .
8520	Gets the validation handler .
8521	Gets the chart helper .
8522	Convert a list of ptgs to a list of shared formulas .
8523	Convert a ptg to an array of ptgs .
8524	Convert a ptg for a watch list .
8525	Creates a new Ptg array with the given parameters .
8526	Returns the rows list for a given row .
8527	Assembles the rows list from the rows mapping .
8528	Fixup a row one - to - one relationship .
8529	Build a new row for a Ref3DPxgBase .
8530	Build a dynamic row for an area ptg base .
8531	Get the background color for the solidFill .
8532	Returns the XColor for the given index from the given shape properties .
8533	Find the automatic fill color .
8534	Get an XColor from a CTSchemeColor .
8535	Converts a CTSRgbColor to an XColor
8536	Gets the XColor with automatic fill .
8537	Converts an XSSF color to a CLR color .
8538	Gets the triplet from an XSSFColor .
8539	Gets the background color from a cell .
8540	Finds the component name from its class name .
8541	Populates the attributes of the given component .
8542	matchParaMeterOfMethod returns the AttributesType for the given method name .
8543	Sets an object property .
8544	Returns the value of a property of an object .
8545	Setup the control attributes .
8546	Find the validate attributes for a cell .
8547	Setup the faces cell s picture and charts .
8548	Setup the faces cell charts .
8549	Setup the faces cell s picture .
8550	Initializes the charts map .
8551	Gets the pie title .
8552	Set the style of a series .
8553	Create a 3D chart .
8554	Setup the style for the bar .
8555	Initializes the XSSF charts map .
8556	Gets the chart id from the parent .
8557	This method initializes the anchors map .
8558	Generate a single XSSFChart .
8559	Transforms a collection expression into a collection object .
8560	Gets the full name from a row .
8561	Rebuilds the upper level formula .
8562	Sets up the upper level formula for the given cell .
8563	Build a cell formula for shifted rows .
8564	gather rows mapping by full name
8565	Change index number in shift map .
8566	Change upper level final length .
8567	Change index number in hidden column .
8568	Sets the full name in the hidden column .
8569	Gets the original row number in the hidden column .
8570	Sets the original row number in the hidden column .
8571	Find parent rows mapping from shift map .
8572	Find child rows mapping from shift map .
8573	Finds the item in a collection .
8574	Build the current range from the source config range and the insert position .
8575	Returns true if the given row index is a static row .
8576	Checks if the given row is a static row reference .
8577	Replace expression with cell value .
8578	Returns the index of the merged region of the given sheet .
8579	Returns the list of skipped cells in the given region .
8580	Adds the skip cells to the list .
8581	Build a sheet comment from a list of TieCommandAliases
8582	Builds a cell comment from a list of aliases .
8583	Build the configuration .
8584	Gets the sheet configuration .
8585	Creates a form command from a sheet configuration .
8586	Verify that the last cell in the row is a blank cell .
8587	Build the sheet .
8588	Checks to see if there is a last row in the sheet .
8589	Build a list of config commands from a sheet comment .
8590	Sets the parent for a child command .
8591	Checks if there is an each command in the list .
8592	Match command to sheet config form .
8593	Copy template for tie commands .
8594	Builds a list of config commands .
8595	Process a method line .
8596	Process the command line .
8597	Move the comment to a map .
8598	Create a config command .
8599	Builds the attribute map from the command line .
8600	Get the sheet configuration from the form command .
8601	Set footer of sheet configuration .
8602	Sets the body of the sheet configuration .
8603	Sets the header of the sheet configuration .
8604	Deletes a row .
8605	Remove ranges from shift map .
8606	Find the list of full names to remove from the sheet .
8607	Gets the each command from the parts name .
8608	Insert an empty object in the context .
8609	Deletes the object from the given context .
8610	Prepare collection data context .
8611	Index all commands in the source config range .
8612	Checks if a row is allowed to be added to a sheet .
8613	Insert each template in the source config range .
8614	Evaluate normal cells .
8615	Evaluate the user formula .
8616	Checks if the given string is a user formula .
8617	Creates a comment for a cell .
8618	Evaluate a boolean expression .
8619	Remove rows from a sheet .
8620	Removes a single row from a sheet .
8621	Remove the cached cell for the given row .
8622	Remove rows from the body .
8623	Loads the picture from the current row and column .
8624	Loads the chart for the specified row and column .
8625	Assembles the new value .
8626	Get the value of a cell using the formula evaluator and data formatter .
8627	Get the cell value without formatting .
8628	Get the string value of a cell .
8629	Get cell string value with number type .
8630	Set the value of a cell .
8631	Sets the string value of a cell .
8632	Sets the value of a cell to a boolean value .
8633	Sets the value of a cell to a date
8634	Sets the value of a numeric cell .
8635	Copies rows from the source sheet to the destination sheet .
8636	Copies a single row from one sheet to another .
8637	Copy a cell from one row to another .
8638	Copy the value of a cell to a new cell .
8639	Copy the style from the source cell to the new cell
8640	Clones a comment from the source cell .
8641	Creates a comment anchor .
8642	Create or insert a comment .
8643	Match the comment settings from the source cell to the target cell .
8644	Get the VML drawing from a cell .
8645	Get the shape of a cell from a VML drawing .
8646	Get the cell style from the source cell .
8647	Convert a cell to a FacesCell .
8648	Get the row and column from the component attributes .
8649	Gets the initial rows from the sheet configuration .
8650	Get a FacesRow from a body row .
8651	Gets the cell from the body row .
8652	Gets the POI cell from a sheet .
8653	Gets the key from a poi cell .
8654	Gets or adds the tie cell in the map if it doesn t exist .
8655	Returns the current data context name .
8656	Evaluate a Jexl expression .
8657	Evaluate the expression and return the result .
8658	Calls the default serialization method .
8659	Remove a row from the table .
8660	Merge the rows from the add map .
8661	Recover all rows in the given sheet .
8662	Gets the chart type .
8663	Converts a style name to a stroke object .
8664	Initializes the chart data from an XSSFChart .
8665	Sets up the chart data .
8666	Initializes the XSSF anchors map .
8667	Initialize anchortMap and positionMap for the given sheet .
8668	Returns the chart id associated with an anchor .
8669	Gets the chart id from the child node attributes .
8670	Build each object .
8671	Save data in context .
8672	Recalculates the formula .
8673	Get the cell with the row and column from a tab .
8674	Gets the cell with the row and column from the current page .
8675	Restore data context .
8676	Get the last collection for the given full name .
8677	Checks if we need to restore the data context .
8678	Start restore data context .
8679	Shifts the row reference by the given number of rows
8680	Set the first row reference .
8681	Set the last row plus reference .
8682	Builds the cells for the given row .
8683	Build a single cell .
8684	Deserializes the data context from the input stream .
8685	Build the category list from a CTAxDataSource .
8686	Build the series list .
8687	Build the chart series in the list of cells .
8688	Get the color list from the dpt list and the list of cells .
8689	Get the dpt from the list with the given index .
8690	Sets the command index map .
8691	Get a map of Picues from a workbook .
8692	Gets the XSSFPictrues map .
8693	Index the picture in the map .
8694	Generate the style for a picture .
8695	Generate the style for the specified chart .
8696	Returns the size of the specified anchor .
8697	Gets the pattern .
8698	Returns the picture of the chart .
8699	Recover the cell from the given sheet .
8700	Gets the row style .
8701	Gets the cell font style .
8702	Gets the cell font color .
8703	Gets the cell font decoration .
8704	Gets the cell style .
8705	Gets the column style .
8706	Get the text alignment from the cell style .
8707	Gets the vertical alignment from the cell style .
8708	Calculates the total height of a sheet .
8709	Setup the cell style .
8710	Get the input type from the cell type .
8711	Returns the set of resource paths for the given path .
8712	Returns the specified resource as an InputStream .
8713	Remove the prefix path from a resource .
8714	Evaluate the type of the input string .
8715	Finds the bean with the given name .
8716	Join the specified short array with the specified separator .
8717	Rounds the given value to the specified number of places .
8718	Returns the tab type of the active sheet .
8719	Returns the style of the tab .
8720	Returns the default date pattern .
8721	Gets the decimal separator by default locale .
8722	Gets the thousand separator by default locale .
8723	Sets the tie command alias list .
8724	Build the watch list for all FORMULA cells .
8725	Builds the watch list for a given cell .
8726	Adds a row to the watch list if it is not already in the watch list .
8727	Checks if the given string is a command string .
8728	Parses the widget attributes .
8729	Gets the attribute key in map by cell .
8730	Parse validate attributes .
8731	Find the position of the pair bracket .
8732	Parse command attributes .
8733	Parse input attributes .
8734	Parse validation attributes .
8735	Split by eual sign .
8736	Parse special attributes .
8737	Process calendar attributes .
8738	Process select item attributes .
8739	Gather special attributes .
8740	Parse a comment string into a map .
8741	Finds the position of the first non - cell name character .
8742	Removes characters from a string .
8743	Convert a number to an Excel column name .
8744	Convert a column name to an integer .
8745	Gets the cell by reference .
8746	Convert height units to pixels .
8747	Checks if a string is a valid date .
8748	Parse a date .
8749	Checks if a string is a numeric value .
8750	Returns true if the given character should continue .
8751	Sets an object property .
8752	Compares two cells .
8753	Returns true if child range is inside parent range .
8754	Removes all hidden columns from a sheet .
8755	Deletes the hidden columns from the given row .
8756	Deletes a cell from a row .
8757	Process event .
8758	refresh after status changed .
8759	Validate with row and col in current page .
8760	Validate by tie web sheet validation bean .
8761	Check the error message from the context object .
8762	Validates all rules for a single cell .
8763	Do validation .
8764	Validates a cell .
8765	Validates the current page .
8766	Validate the row in the current page .
8767	Validates a row .
8768	Refresh the cached cells in the current page .
8769	Refresh the cached cells in a row .
8770	Sets the submit mode in the view .
8771	This method is called before the page has been validated .
8772	Clear the contents of this cell .
8773	Load the header rows .
8774	Load header row without configuration tab .
8775	Fills the header cells to the maximum number of columns .
8776	Gets the header column style .
8777	Gets the width style .
8778	Load the header row with the configuration tab .
8779	Gets the column width style .
8780	Clear the workbook .
8781	Initialize the tabs .
8782	Load the data .
8783	Refresh the data .
8784	Refresh the data for the given row .
8785	Refresh the data for a cell .
8786	Finds the index of the tab with the given name .
8787	Load a work sheet .
8788	Prepare work shee .
8789	Sets the first row of the data table .
8790	save objs in viewMap
8791	Setup the row info .
8792	Loads the body rows .
8793	Assembles a faces body row .
8794	This method is used to refresh the cached cell .
8795	Process a refresh cell .
8796	Create dynamic columns .
8797	Adds a row to the repeat list .
8798	Refresh the body rows in the given range .
8799	Set unsaved status .
8800	Returns the unsaved status .
8801	Returns the most specific common constructor of the given type .
8802	Writes an input stream to an output stream .
8803	Writes a long value to a writer .
8804	Writes a string to a writer .
8805	Set the traffic stats tag .
8806	Adds a bitmap to the result .
8807	Add a file descriptor .
8808	Removes the parameter with the given name .
8809	Add a header to the request .
8810	Clears this request description .
8811	Call the play intent .
8812	Call the stop intent .
8813	Bind to the streaming service .
8814	Unbind the radio .
8815	Drop the listener from the playback .
8816	Stores the image to disk .
8817	Transfers the contents of an InputStream to a String .
8818	Convert the contents of an InputStream to a String .
8819	Send the content of the message to the given OutputStream .
8820	Returns the number of bytes available to read .
8821	Closes the input stream .
8822	Reads a single byte from the input stream .
8823	Resets the mark to the beginning of the stream .
8824	Send the start of the part .
8825	Send the content disposition header .
8826	Send the content type header .
8827	Send the transfer encoding header .
8828	Send the end of the header .
8829	Send the end of the request .
8830	Send the given parts to the output stream .
8831	Returns the total length of the given parts .
8832	Checks if the given URI is a redirect .
8833	Sends a 304 Not Modified response .
8834	Sets the date header .
8835	Sets the date and cache headers .
8836	Sets the content type header .
8837	Writes an empty buffer to the channel if the channel is connected .
8838	Write the file name to the output stream .
8839	Send data to the client .
8840	Installs the cache .
8841	Ensures that the working directory exists .
8842	Get a response from the disk cache .
8843	Creates an input stream for the body of the entry .
8844	Resets the bitmap to a new size .
8845	Get an instance of the WebsockifySslContext .
8846	Validates a keystore using the specified password and key password .
8847	Replace the scale type .
8848	Stop listening .
8849	Get a pending intent for the given request builder .
8850	Disconnects the connection .
8851	Bind to the GoroService .
8852	Unbind from application service .
8853	Notify about view changes .
8854	Called when the channel is opened .
8855	Override this method if you want to override this method .
8856	Called when the dialog has been reset .
8857	Wait for the loader to complete .
8858	Sets the text of a TextView or hides it if the text is empty .
8859	Hides the soft input from the given textView .
8860	Shows the given textView as a soft input .
8861	Toggle the soft input of the given textView .
8862	Get pixels width .
8863	Cancels the direct connection timer .
8864	Clears the cache for the given url .
8865	Populates the image of the given view with the given URL .
8866	Cancels the image loading of the given view .
8867	Create image consumer .
8868	Sets the image for the given image result .
8869	Sets the loading image .
8870	Start a new image loader task .
8871	Add an image to the cache .
8872	Releases the given buffer to the pool .
8873	Invoked when the URLConnection is prepared .
8874	Adds a parameter to the request .
8875	Attempt to connect to the core connection . If the core connection is not a HttpsURLConnection it will connect to the core connection .
8876	Returns the MD5 hash of the given text .
8877	Returns the String identifying the given GEMM algorithm .
8878	Returns the String identifying the given status code .
8879	Checks the given result code and throws a CudaException if the result is not cublasStatus . CUBLAS_STATUS_SUCCESS .
8880	Check the status of the BLAS operation .
8881	Adds a new lexeme to the frequency .
8882	Adds a new ending .
8883	Returns the estimated frequency for the given wordform .
8884	Prints the long description of this token .
8885	Sets the character at the given index to the value of the given attribute .
8886	Convert an AttributeValues object to a KAMOLS markup .
8887	Verifies that the character at the given index is equal to the given value and adds the attribute to the AVS object .
8888	Removes the ambiguity markup formatting from a tag .
8889	Returns the metrics for this application .
8890	Returns the query string .
8891	Processes the given JSON node and returns a list of MetricData objects .
8892	Parses the given JSON string into a list of AppInfo objects .
8893	Returns the connection configuration .
8894	Perform the request for the given apps and time params .
8895	Returns a reader for the GC04 code list .
8896	Returns a reader for the GC04 code list set .
8897	Returns a reader for the GC - 04 column set .
8898	Returns a reader for the GC10 code list .
8899	Returns a reader for the GC10 code list set .
8900	Returns a reader for the GC10 column set .
8901	Get the column element ID .
8902	Get the value of the specified column .
8903	Get the column with the specified ID .
8904	Get all key IDs from the column set
8905	Get the key of the passed ID .
8906	Check if the passed column is a key column .
8907	Create a new column .
8908	Create a new key .
8909	The number of lines to skip .
8910	Add a new column to the specified index .
8911	Create a writer writer for GC04 code list .
8912	Create a writer writer for GC04 code list set .
8913	Create a column set writer
8914	Create a writer writer for GC10 code list .
8915	Create a CodeListSetWriter
8916	Create a column set writer
8917	Creates a validator which allows to validate GC - 04 code list documents .
8918	Creates a validator for GC - 04 Code List Set Documents .
8919	Creates a validator which allows to validate a GC - 04 column set .
8920	Returns a validator which allows to validate the GC10 code list .
8921	Returns a validator which allows to validate a GC10 CodeListSet document .
8922	Creates a validator which allows to validate a GC10 column set document .
8923	Send logs to the server .
8924	Sets the context .
8925	Get the current logger level .
8926	Get the current capture state .
8927	Sets the maximum size of the log file .
8928	Prepends the metadata to the message .
8929	Appends the stack trace metadata to a JSON object .
8930	Creates a JSON object from the given parameters .
8931	Logs the current location information .
8932	Sets the user identity .
8933	Get a byte array from a file .
8934	Starts the location updates .
8935	Size a partitioned or local region .
8936	Size the partitioned region .
8937	Size a replicated or local region .
8938	Reads a snapshot record from the input stream .
8939	Prints the time stamps .
8940	Returns the time values since the given index .
8941	Convert a GFS file to a Chart
8942	Returns the pool for the given server name .
8943	Returns the pool for the given locator .
8944	Checks if the given region is already on the server .
8945	Get the member with the given name .
8946	Returns a list of all the hosts on the GemFire server .
8947	Looks up an IP address in the host property file .
8948	Check if the given data is an error and send an exception .
8949	Executes the given function and returns the results of the execution .
8950	Recursively flatten a collection of objects .
8951	Executes the given query and returns the results .
8952	Returns a CacheListenerBridge that allows to be invoked after an entry is added to the cache .
8953	Returns a CacheListenerBridge that allows to be invoked after an entry has been deleted .
8954	Handle an exception .
8955	Returns an array of onRegionFilterKeyFacts .
8956	Execute the function .
8957	Returns a list of all hosts on the GemFire server .
8958	Executes the search on a region .
8959	Returns the name of the application .
8960	Construct the security properties .
8961	Returns the region with the given name .
8962	Returns the region with the given name .
8963	Construct the comparison from the source and target map .
8964	Returns true if the value at insert point must be inserted .
8965	Closes the input stream .
8966	Reads the stats files from the given directory and dumps them to CSV files .
8967	Runs the GfStatsReader .
8968	Reconnect to the JMX server .
8969	Stop all members on the given host .
8970	Shuts down a member .
8971	Shuts down all members of the given JMX server .
8972	Shuts down all members in the given redundancy zone .
8973	Stores the pagination results into the pageKeysRegion .
8974	Read results by page .
8975	Import the given region .
8976	Check if remoteLocators and locators match .
8977	Execute the function .
8978	Builds the check sum map for the given region .
8979	Returns the value of the specified column .
8980	Returns true if the given TypeMirror is an integer type .
8981	Serializes the given object to a byte array .
8982	Deserializes the given byte array .
8983	Creates a new instance of the given class .
8984	Check for table id .
8985	Check for fields .
8986	Checks if the element is a super type of the given type .
8987	Returns the schema of the table .
8988	Brew Java code .
8989	Emit the get id method .
8990	Returns the results of the query as an observable .
8991	Checks that the given column name is a valid column name .
8992	Returns the value of the given string or the default string if the string is blank .
8993	Capitalizes the first character of a string .
8994	Returns true if the given TypeMirror is a subtype of the real type .
8995	Add a DESC clause to the query .
8996	Reads the temperature from the device .
8997	Returns the supported cursor method for the given type .
8998	Log a message with the NOTE level .
8999	Log an error message .
9000	Get the list of icon fonts .
9001	Returns a list of all available icons .
9002	Creates the layout for the SLD editor .
9003	Gets the background decoration .
9004	Returns the power of pexponent of px .
9005	Set the array of values .
9006	Returns the power of the given BigDecimal by the given exponent .
9007	Returns the root of a number at a given index .
9008	Performs an exponential taylor .
9009	Returns the logarithm of a BigDecimal .
9010	L - ln - newton .
9011	arctan taylor .
9012	Arctan taylor .
9013	Computes the square root of a BigDecimal .
9014	Prints the pi string .
9015	Returns the timestamp for the given time .
9016	Sets the minimum and maximum width .
9017	Put a new value into the histogram .
9018	Print all the counters .
9019	Adds another complex number to this one .
9020	Subtract a complex number from this one .
9021	Multiply this complex number by another complex number .
9022	Divide this complex number by another complex number .
9023	Set the values of this matrix .
9024	Get the row at the specified index .
9025	Get the column of this matrix .
9026	Set the array of values .
9027	Transpose this matrix .
9028	Add this matrix to another matrix .
9029	Subtracts this matrix from another matrix .
9030	Multiply this matrix by k .
9031	Multiply this matrix by another matrix .
9032	Print the contents of this matrix to the specified PrintStream .
9033	Sets the image resource .
9034	Validates the coefficients .
9035	Compute the next position .
9036	Clears the state of this SLD .
9037	Converts a StyledLayerDescriptorInfo to an XML string .
9038	Converts a raw SLD to a StyledLayerDescriptorInfo .
9039	Validates the given StyledLayerDescriptorInfo .
9040	Validate the given raw sld .
9041	Get the area of the image .
9042	Sets the values of this matrix to the values of the given matrix .
9043	Set the array of values .
9044	Returns the inverse of this matrix .
9045	Returns the determinant of this matrix .
9046	Returns the norm of this matrix .
9047	Solves a matrix b .
9048	Print the decomposed matrix to the specified PrintStream .
9049	Perform forward elimination .
9050	Forward substitution of a column vector .
9051	Back substitution .
9052	Improve a matrix .
9053	Convert a square matrix to a real square matrix .
9054	Returns the next von neumann value .
9055	Do the iteration procedure .
9056	Compute the next position .
9057	Check if the current position has changed .
9058	Compute the next position .
9059	Check if an interval is valid .
9060	Adds a new value to the current value .
9061	Multiply two integers .
9062	Returns the power of pexponent with the given m .
9063	Do the iteration procedure .
9064	Returns the SLDManager .
9065	Convert a long to a char array .
9066	Decomposes the bits .
9067	Print the representation of this value to the specified PrintStream .
9068	Validates that the given integer is a valid floating point exponent value .
9069	Validates that the given value is a valid float unbiased exponent value .
9070	Validates that the given value is a valid double biased exponent .
9071	Validates that the given value is a valid double unbiased exponent value .
9072	Create the SldGwtService .
9073	Returns the next central value .
9074	Returns the next value in the Polar distribution .
9075	Returns the next ratio .
9076	Returns the sieve of n .
9077	Returns an array of the factors of the given number .
9078	Performs the iteration procedure .
9079	Compute the next position .
9080	Check if the current position has changed .
9081	Sets the JavaFX application .
9082	Sets the configuration file .
9083	Sets the default configuration .
9084	Initializes the FXML loader .
9085	Specifies the latitude and longitude of the geocode request .
9086	Extract the host and port pair from the service instance .
9087	Returns the applicable attribute definition for the given attribute definition uuid .
9088	Evaluate an attribute filter expression against the given attribute definition .
9089	Sanitize a tag .
9090	Sets the address of the geocode request .
9091	Specifies the componenets to be geocoded .
9092	Query for names .
9093	Query for service instances .
9094	Get all to by logged in user .
9095	Returns the meta data for decimal as .
9096	Change the password for the logged - in user .
9097	Retrieves a listing of all users .
9098	Get the gravatar for the given email address and size
9099	Get the gravatar for a user
9100	Populate from ElasticSearch JSON .
9101	Returns the ElasticSearch field type .
9102	Create a new flow step .
9103	Update a flow step .
9104	Get a flow step by id and type
9105	Get the flow step by step .
9106	Get all steps for a given flow .
9107	Delete a flow step .
9108	Force delete a flow step .
9109	Populates the table fields .
9110	Closes the connection .
9111	This method is called when a message is received .
9112	Called when the connection has been closed .
9113	Gets the cho messages from the return value .
9114	Get a list of all personal inventory items .
9115	Create a new TableRecord .
9116	Delete a form container .
9117	Get the form flow historic data .
9118	Gets the form and field historic data .
9119	Get the most recent form and field historic data .
9120	Lock the form container .
9121	Unlocks a form container .
9122	Unlocks a form container .
9123	Maps a form container to a form container .
9124	Converts a role listing parameter to a list of roles .
9125	Create a new form definition .
9126	Updates a form definition .
9127	Returns the form definition with the given id .
9128	Returns the form definition with the given name .
9129	Get all Forms for the logged in user .
9130	Deletes a form definition .
9131	Returns the storage key from the given parameters .
9132	Initializes the memcached client .
9133	Shuts down the memcached client .
9134	Converts a string to a long .
9135	Convert a document to a PDF file .
9136	Gets the field values for a given form from the local cache .
9137	Create a new FlowStepRule .
9138	Create a new flow step rule .
9139	Create a new FlowStepRule .
9140	Update the flow step entry rule .
9141	Update the flow step rule exit rule .
9142	Update the Flow step view rule .
9143	Move the flow step entry rule up .
9144	Move the flow step entry rule down .
9145	Delete a flow step entry rule .
9146	Delete the flow step exit rule .
9147	Delete a FlowStepViewRule .
9148	Initializes the session .
9149	Retrieves a listing of all user queries .
9150	Get the list of all roles .
9151	Returns the service ticket as a hexadecimal upper case string .
9152	Create a new text field .
9153	Creates a new text field .
9154	Create a field with a decimal spinner .
9155	Create a field that can be used as a decimal slider .
9156	Create a table field .
9157	Updates the specified field with the specified text masked value .
9158	Update a field s text barcode .
9159	Update a field s decimal spinner .
9160	Update a field s decimal slider .
9161	Update a table field .
9162	Returns the field with the given name .
9163	Get fields by form name and logged - in user .
9164	Get a list of fields for a given form type id and logged - in user .
9165	Deletes a field from the form .
9166	Force delete a field .
9167	Returns the meta data for a table field .
9168	Updates the value of a user field .
9169	Gets or creates an index if it does not exist .
9170	Create a new flow .
9171	Update a flow .
9172	Returns the flow with the given id .
9173	Get a flow by name .
9174	Delete a flow .
9175	Force delete a flow .
9176	Update the value of a global field .
9177	Returns a list of all global field values .
9178	Get the form definition id and title .
9179	Decrypts an init packet .
9180	Closes the connection and cleans up the connection .
9181	Initializes a new request .
9182	Get the exception message in verbose mode .
9183	Create a new admin user
9184	Returns an access token .
9185	Returns the user profile information for the given access token .
9186	Execute a JSON request .
9187	Execute a form request .
9188	Returns a response handler for a JSON response .
9189	Checks if the connection is valid .
9190	Returns the closeable http client .
9191	Gets the path to the system property fluid . trust . store .
9192	Closes the connection .
9193	Get a list of FluidItems for a specific JobView .
9194	Send a form to a flow .
9195	Called when a connection has been closed .
9196	Called when a message is received .
9197	Send a JSON object to the Fluid server .
9198	Send a message to the remote endpoint .
9199	Closes the user session .
9200	Executes a native SQL query .
9201	Request a license .
9202	Apply a license .
9203	Creates a new field in PLAIN format .
9204	Create a ParagraphText field .
9205	Creates a new ParagraphText field .
9206	Creates a MultiChoice Select Many Field .
9207	Creates a new date - time field .
9208	Update the field text plain .
9209	Update the ParagraphText of a route field .
9210	Update the field datetime date and time .
9211	Update Field Decimal . PLAIN
9212	Update the value of a route field .
9213	Method createFieldValue .
9214	Get configuration by key .
9215	Retrieves a listing of all the configurations .
9216	Create an attachment .
9217	Retrieves an attachment by id .
9218	Deletes an attachment .
9219	Force delete an attachment .
9220	Parses the contents of a JAR file .
9221	Sets the class loader .
9222	Rule 2 .
9223	Rule 3 .
9224	Rule 3 .
9225	Returns the schema node for the given file .
9226	Rule 7 .
9227	Rule 3 .
9228	Convert the given value to this type .
9229	Create a CLI interface .
9230	Creates a new instance of Cli .
9231	Parse command line arguments .
9232	Parses the given arguments using the given options .
9233	Returns the URL builder for the given path .
9234	Remove a footer view .
9235	Returns the value of this point .
9236	Returns a 3 - D gradient of a 3 - D vector .
9237	3 - D int noise .
9238	Returns the 3 - D noise value .
9239	Cubic Interp function .
9240	SCurve5 function .
9241	Sets the bounds .
9242	Process the event .
9243	Process the event .
9244	Gets the account id of the event .
9245	Applies the rule entity to the rule violation entity .
9246	Returns the event serializer for the given input stream .
9247	Creates a file with the given name .
9248	Creates a directory with the given name .
9249	Restores the system properties .
9250	Creates an implementation of the delegate map .
9251	Adds an object to the collection .
9252	Set a property .
9253	Get an array property .
9254	Returns the next state for the given action name .
9255	Process the garbage collector queue .
9256	Returns the corresponding object for the given type .
9257	Returns a parameterized instance of the given type .
9258	Returns the type variable for the given type .
9259	Prints the stack trace of this exception .
9260	Prints the stack trace of this exception .
9261	Replace a remote object with a stub .
9262	Run the task .
9263	Sets the task .
9264	Returns true if the task was accepted .
9265	Called when a task is rejected .
9266	Returns true if the task was started .
9267	Called when the task has completed .
9268	Stop the task .
9269	Get the current job .
9270	Put a job into the queue .
9271	Returns the block mode for the given name .
9272	Returns the mode to which the object should be read .
9273	Setup the readers for this resolver .
9274	Adds a reader to the catalog .
9275	Copy the readers from the map to the new catalog .
9276	Creates a new catalog .
9277	Loads the system catalogs .
9278	Parse a catalog from a URL .
9279	Parse the pending catalog files .
9280	Parses a catalog file .
9281	This method is called when an unknown entry is encountered in the catalog .
9282	Parse all the catalog entries .
9283	Resolve the doctype for the given entity name publicId and systemId .
9284	Resolves the catalog for a document .
9285	Resolve a system identifier .
9286	Resolve a local URI .
9287	Resolve all subordinate catalogs .
9288	Make an absolute system identifier .
9289	Normalize a URI .
9290	Encode a byte .
9291	Add a new entry to the delegate list .
9292	Create a SoftValueRef .
9293	Notifies all registered listeners of a throwable .
9294	Add a throwable to the stack .
9295	Creates an implementation of the delegate list .
9296	Compares this task with the specified task .
9297	Returns the value of this property as an InetAddress .
9298	Returns the object at the given index .
9299	Sets the element at the given index .
9300	Removes all objects from the pool .
9301	Adds an entry type .
9302	Returns the entry type for the given entry .
9303	Returns the number of arguments for the given entry type .
9304	Returns the entry argument at the given index .
9305	Sets the thread s context class loader .
9306	Swaps two elements of the queue .
9307	Removes the node at the given index .
9308	Clean up the timeout object .
9309	Loads the class with the given name .
9310	Preload all available protocols .
9311	Creates a new URLStreamHandler for the given protocol .
9312	Check the java . protocol . handler . pkgs property .
9313	Returns the value of this property .
9314	Create the implementation of the set .
9315	Creates a synchronized wrapper for the given counter .
9316	Make a directional counter .
9317	Checks if the current namespace is in the extension namespace .
9318	Check the result of a stream notification .
9319	Rebinds the specified name to the specified target object .
9320	Get an object from the wrapper map .
9321	Substitutes a string from a map .
9322	Splits a string into an array of strings .
9323	Joins a byte array into a single string .
9324	Default toString method .
9325	Returns the value of the block mode .
9326	Creates the entry map .
9327	Returns the value associated with the specified key .
9328	Returns the value associated with the specified key .
9329	Removes the entry for the given key .
9330	Flushes all entries .
9331	Returns a list of all keys that are currently in the cache .
9332	Sets the resolution .
9333	Peek the entry associated with the given key .
9334	Returns the children of the element with the given tag name .
9335	Returns the first child element with the given tag name .
9336	Returns the first child element with the given tag name .
9337	Get the content of an element .
9338	Returns the content of the first child element with the given tag name .
9339	Returns the content of the first child element with the given tag name .
9340	Sets the maximum queue size .
9341	Sets the blocking mode .
9342	Set the blocking mode string .
9343	Executes the task .
9344	Resolve a system identifier .
9345	Resolve the given publicId and systemId .
9346	Resolve an external system .
9347	Resolve an external public .
9348	Query a resolver .
9349	Append a vector to a given vector .
9350	Resolve all system reverse definitions for the given system id .
9351	Resolve a system identifier in reverse order .
9352	Resolve all system definitions for the given system id .
9353	Resolve all local system definitions for the given system id .
9354	Resolve all subordinate catalogs .
9355	Reads a catalog from a file URL .
9356	Reads a catalog from an input stream .
9357	Connect to the file system .
9358	Returns an OutputStream for writing to the file .
9359	CAS the next node .
9360	Deletes a node from the tree .
9361	Returns the value of this header .
9362	Creates a snapshot of this entry .
9363	CASs the right value of this node with the given index .
9364	Creates a logger for this class .
9365	Append a list of objects to the given StringBuilder .
9366	Returns the short name of the class .
9367	Returns a string representation of this class .
9368	Returns an iterator over the names of the properties .
9369	Returns the property group for the given basename .
9370	Returns the compatible constructor for the given type and value type .
9371	Creates a deep copy of an object .
9372	Dereferences an object .
9373	Initializes the context .
9374	Update the jndi cache .
9375	Returns the set of keys .
9376	Returns the set of entries .
9377	Removes a property listener .
9378	Notifies all PropertyListeners that a property has been added .
9379	Notifies all PropertyListeners that a property has been removed .
9380	Fires a property changed event to all registered PropertyListeners .
9381	Fires a property changed event to all bound listeners .
9382	Make a property name prefixed with the given prefix .
9383	Load properties from a PropertyReader .
9384	Loads a property from the given class name .
9385	Returns the property group for the given basename and index .
9386	Returns true if the entity has been resolved .
9387	Resolve the given system ID .
9388	Attempts to resolve a system ID as a URL .
9389	Resolve the classpath name for the given system id .
9390	Sets the value of this attribute to the given text .
9391	Normalize a public id .
9392	Encodes the given publicId into an encoded urn .
9393	Decodes the given urn .
9394	Replace all occurrences of oldStr in str with newStr
9395	Start the timer .
9396	Stop the timer .
9397	Make a synchronized StopWatch .
9398	Compares this object with the specified object .
9399	Generates a hash code from the given byte array .
9400	Generates a hash code for an array of objects .
9401	Creates the map and list .
9402	Sets the value of the field .
9403	Returns the next token from the token stack .
9404	Initializes the date editor .
9405	Adds a vertex to the graph .
9406	Sets the root vertex .
9407	Removes a vertex from the graph .
9408	Performs a depth - first search .
9409	Performs a depth - first traversal of the tree using the given visitor .
9410	Finds a vertex by its data .
9411	Finds all cycles in the graph .
9412	Normalize a string .
9413	Parses the given XML string .
9414	Parses an XML document from an input stream .
9415	Parses the given input source and returns the root element .
9416	Create a new element with the specified name .
9417	Resolve a qualified name .
9418	Copy all attributes from the src element to the dest element .
9419	Returns true if the given node has child elements .
9420	Get all child elements of a node .
9421	Get the text content of a node .
9422	Get all child elements of the given node .
9423	Returns the parent element of the given node .
9424	Add a resource to the waiting list .
9425	Reads a catalog from an input stream .
9426	Reads a catalog from a URL .
9427	Gets the host address .
9428	Resolve an entity .
9429	Sets the value of a system property .
9430	Display the class information .
9431	Prints a description of a class .
9432	Removes the package name from a class name .
9433	Returns the package name of the given class name .
9434	Attempts to load the given class .
9435	Returns the wrapper class for the given primitive class .
9436	Get all interfaces of a class .
9437	Returns an array of all unique interfaces of the given class .
9438	Returns true if the given type is a primitive wrapper .
9439	Instantiates an object from a property .
9440	Returns the getter method for the specified attribute .
9441	Returns the setter method for the specified attribute .
9442	Convert a parameter name to a Java class .
9443	Get a system property .
9444	Gets the filenames of a property .
9445	Removes all weak objects from the set .
9446	Returns an iterator over the elements in this set .
9447	Creates a URLLister for the given protocol .
9448	Returns a set of all entries in this group .
9449	Add a bound property listener .
9450	Remove a bound property listener .
9451	Checks if a string is null .
9452	Finds an editor for the given type name .
9453	Registers an editor with the PropertyEditorManager .
9454	Converts the given text to the given type .
9455	Returns the thread s context class loader .
9456	Returns an ApplicationDeadlockException if the given Throwable is an ApplicationDeadlockException .
9457	Schedules the given timeout to the given target .
9458	Do the work .
9459	Create a subcontext with the given name .
9460	Lookup an object by name .
9461	Checks that the given object is an instance of the given class .
9462	Append information about a class .
9463	Returns the transition with the given name .
9464	Reads the properties from the classpath .
9465	Query the system property for the verbosity .
9466	Query for relative catalogs .
9467	Query for the list of catalog files .
9468	Returns the list of catalog files .
9469	Query the system property to see if we should prefer public .
9470	Query whether or not to use the static catalog .
9471	Resolve an entity .
9472	Resolve a URL to a source .
9473	Make an absolute URI .
9474	Resolve the class for the given ObjectStreamClass .
9475	Invokes the setter with the given value .
9476	Returns the local name of the element .
9477	Returns the namespace URI of the given node .
9478	Returns the namespace URI for the given element .
9479	Convert an enumeration to a list .
9480	Returns an input stream for the given filename .
9481	Loads properties from a file .
9482	Reads the properties from the specified filenames .
9483	Adds an edge to the graph .
9484	Adds an outgoing edge to this vertex .
9485	Adds an incoming edge to the graph .
9486	Returns true if the given edge is in the graph .
9487	Removes an edge from the graph .
9488	Finds an outgoing edge from the given destination vertex .
9489	Finds an edge in the graph .
9490	Returns the cost of this vertex to the destination vertex .
9491	Writes a jar file to the output stream .
9492	Returns true if the iterator has more elements .
9493	Fire an event .
9494	Installs the jvm type provider .
9495	Recursively deletes all files in the given folder .
9496	Dispatch an action on the FX application thread .
9497	Returns the event stream of the given action type .
9498	Creates the fxml path for the given view type .
9499	One - to - many relationship .
9500	Returns a stream of T2 objects representing the many - to - one relationship between the two rights .
9501	Returns a stream consisting of the items of the given collection of rights .
9502	Performs a strict one - to - one traversal on the given rights .
9503	Returns true if the request allows robots .
9504	The instruction generated should be \"([^\"]*)\"
9505	Entry point for the main method .
9506	Runs the performance algorithm .
9507	Returns the sum of degree of all words .
9508	Returns the arguments for the superclass .
9509	Notifies the resource loader that this resource loader has been loaded .
9510	Attempts to connect to the data source .
9511	Creates an iterable of the given type .
9512	Returns an array of the given type .
9513	Returns a list of the specified type .
9514	Generates a collection of the specified type .
9515	Returns a list containing all of the elements of the given type .
9516	Creates an Either that is an instance of the given type .
9517	Creates an instance of the right type .
9518	Thrown if the type is not parameterized .
9519	Validates that the given type is an instance of the given type .
9520	Returns a Try that succeeds only if the type is parameterized .
9521	Connect jdbc on with url and driver and username and password .
9522	Run in the sql .
9523	Query in with sql .
9524	Returns the contents of this UBArray as a boolean array .
9525	Add an example to the query
9526	On upgrade .
9527	Backup the table .
9528	Restore the table from a CSV file .
9529	Sets the empty text of the list view .
9530	Dump the table to CSV .
9531	Unescapes quotes in a CSV string .
9532	Get the values from a CSV row .
9533	Convert a CSV string to a Map
9534	Converts a map of strings to a CSV string .
9535	Join a list of strings .
9536	Join a list of strings .
9537	Read a database from the index .
9538	Write to index .
9539	Inspects the id field of the entity .
9540	Get the base DAO class .
9541	Returns the bind type .
9542	Import data from a CSV file .
9543	Backup all tables to csv .
9544	Restore all tables from CSV .
9545	Writes the index .
9546	Creates a query using the given EntityManager .
9547	Creates a typed query using the given EntityManager .
9548	Render the query .
9549	Deletes the record with the given id .
9550	Saves the given object in the database .
9551	Updates an object in the table .
9552	Add a logical not in clause .
9553	Add a subquery to the where clause .
9554	Returns the next active stack .
9555	Returns an empty intention stack .
9556	Adds a set of bindings for a given plan .
9557	Selects a plan based on the specified policy .
9558	Selects a plan at a random index .
9559	Sets the plan variables .
9560	Returns the result at the given index .
9561	Returns the parents of this node .
9562	Returns the children of this node .
9563	Grows the given byte array by the given amount .
9564	Creates a logger with the specified name level and file .
9565	Performs a step on the body .
9566	Sets the goals .
9567	Pause for user input .
9568	Initializes the intention selection pools .
9569	Initialize the intention selection threads .
9570	Start the intention selection threads .
9571	Shuts down the intention selection threads .
9572	Registers a Jill extension .
9573	Reset the catalog .
9574	Loads an agent from the classpath .
9575	Processes the plans for a given GoalType .
9576	Creates the agents in the catalog .
9577	Loads a class from the classpath .
9578	Loads an extension from the classpath .
9579	Checks if two objects have the same name .
9580	Returns the usage string for this application .
9581	Parses the command line arguments .
9582	Parses an argument with an option .
9583	Runs the given query on the given agent .
9584	Returns the object at the given index .
9585	Finds the object with the given name .
9586	Pushes an object onto the stack .
9587	Returns the object at the given index .
9588	Pushes an object onto the stack .
9589	Pop an object from the stack .
9590	Returns the type of the given object .
9591	Returns true if the query matches the given belief .
9592	Runs the main method .
9593	Converts a String to a byte array .
9594	Post a new goal to the agent .
9595	Send a message to an agent .
9596	Send a message to an agent .
9597	Returns the goals .
9598	Creates a new belief set .
9599	Adds a new belief to this model .
9600	Evaluate the query and return the result .
9601	Suspend the agent .
9602	Returns the field with the given name .
9603	Registers a number of neighbours of a belief .
9604	Build a random name .
9605	This method is called when the pool is exiting .
9606	Checks if the execution stack is valid .
9607	Remove finished agents from the active agents set .
9608	Manages a single goal .
9609	Sends a shutdown message to the pool .
9610	Sets whether the agent is idle .
9611	Moves the specified pin from one pin to another .
9612	Initializes the global state .
9613	Wait until the pool is idle .
9614	Finishes the program .
9615	Returns true if all the pools are idle .
9616	Returns the poolid for the given agentid .
9617	Picks and returns the current expression .
9618	Sets the expression .
9619	Creates a JPA join for the given attribute .
9620	Recursively joins the properties at the given index .
9621	Finds or creates a join for the given property .
9622	Returns true if the end of the range is reached .
9623	Gets the uploaded stream .
9624	Handle the request .
9625	Check if a parameter with the specified name and value exists .
9626	Get parameter value .
9627	Parse content type parameters .
9628	Configure the transaction manager .
9629	Gets the target file .
9630	Writes the generated artifact to the target file .
9631	Post - process the instance .
9632	Returns the declared constructor for the given implementation class .
9633	Builds a string representation of the descriptor .
9634	Returns the method from the interfaces of the given method .
9635	Returns the type of the field .
9636	Returns the value of the dependency of the given type .
9637	Persists the file to disk .
9638	Sets the default link .
9639	Sets the default link template .
9640	Handles the links in the response .
9641	Handles the header links .
9642	Parse links from a JSON body .
9643	Parse a link object .
9644	Returns the value of the given key in the given map or creates it if it doesn t exist .
9645	Sets the allowed methods .
9646	Returns true if the given method is allowed .
9647	Register instance processors .
9648	Registers an instance factory for the given instance type .
9649	Registers an instance processor .
9650	Registers a class processor .
9651	Get an instance of the given interface class .
9652	Add an argument .
9653	Create target file list .
9654	Convert this object to an XML string .
9655	Initializes the generator .
9656	Returns true if this template has a reference to the given template file .
9657	Create a ParameterizedTemplateModel from the given reader .
9658	Create a ParameterizedTemplateModel from a file .
9659	Sets the request path .
9660	Returns an observable that emits all entities in the specified range starting from the specified startIndex .
9661	Returns an instance scope for the given string .
9662	Sets the value of a field .
9663	Adds a capture appender to the given logger .
9664	Removes the given appender from the given logger .
9665	Clears the given appender from the given logger .
9666	Reads the request and returns the arguments .
9667	Parses the EMF model file .
9668	Resolve all proxies .
9669	Returns the files in the given directory .
9670	Parse a directory .
9671	Replies if the model is fully resolved .
9672	Find all EObjects in the given resource set .
9673	Sets the model directories .
9674	Sets the file extensions .
9675	Sets the model resources .
9676	Reads the next record from the input stream .
9677	Sets the designated parameter to the given String array .
9678	Sets the designated parameter to the given boolean value .
9679	Executes the specified SQL for a large update statement .
9680	Convert a string to an instance type .
9681	Merge a velocity template .
9682	Returns the model directory .
9683	Returns the template directory .
9684	Writes the given value to the HTTP response .
9685	Starts the web UI .
9686	Configures the given web window .
9687	Print to the given web view .
9688	Writes the contents of the input stream to the output stream .
9689	Invokes a method on the interface .
9690	Attaches this request context to this request context .
9691	Detaches this request .
9692	Gets the cookies .
9693	Dumps the request context .
9694	Returns the list of invocation meters .
9695	Configures this event stream with the given config .
9696	Sets the remote host .
9697	Returns the event stream parameter with the given name .
9698	Removes the prefix from the given path .
9699	Returns the common directory between two given directories .
9700	Convert absolute path to relative path .
9701	Convert a relative path to an absolute path .
9702	Returns the depth of a directory .
9703	Dumps the error to the log .
9704	Send a JSON object to the client .
9705	Add a ParameterizedTemplateModel .
9706	Add a list of ParameterizedTemplateModels .
9707	Initializes the template .
9708	Find all references to the given template file .
9709	Sets the enabled state of the save button .
9710	Delete the dialog .
9711	Deletes the endpoint .
9712	Creates a new instance of the given managed class .
9713	Returns an array of all the files .
9714	Returns the summary of the file counts .
9715	Gets the summary row .
9716	Get the summary row of a directory .
9717	Creates a new instance of the given managed class .
9718	Returns the setup class .
9719	Returns the model directories .
9720	Returns the model resources .
9721	Sets the list of candidates .
9722	Loads a configuration document from an XML file .
9723	Called when an error occurs .
9724	Checks if the given parameter is an object .
9725	Reads an array of objects from the HTTP request .
9726	Read an object from an input stream .
9727	Extracts the parameter from the fit cell .
9728	Gets the value of the hints property .
9729	Checks if the request is an XHR request .
9730	Checks if the request is an Android request .
9731	This method is called when a message is received from the client .
9732	Returns a list of all properties that are annotated with the given annotation .
9733	Returns the annotation on the given property .
9734	Log a message .
9735	Look up a WhoisResult for a given domain .
9736	Returns true if the JVM has a parser for the given whois host .
9737	Returns the managed class for the given interface .
9738	Gets the managed method .
9739	Process a message that does not contain an exception
9740	Process not contains .
9741	ResultSet object as a boolean .
9742	Method isWrapperFor .
9743	Serialize the response .
9744	Get cookie value by name .
9745	Add a new cookie .
9746	Removes the cookie with the given name .
9747	Returns an iterator over the cookies .
9748	Gets the TargetFileListProducer .
9749	Adds a field to the class .
9750	Compile the class .
9751	Verifies the response for the given token .
9752	Returns the value of the given file .
9753	Ensure that the path ends with a slash .
9754	Login with the given username and password .
9755	Get the HTTP request .
9756	Invokes a method on the managed instance .
9757	Executes a method in a mutable transaction .
9758	Executes an immutable transactional method .
9759	Returns the list of files in this directory .
9760	Returns the last file in the directory .
9761	Gets the concrete configuration .
9762	Returns true if the requestPath starts with the pathComponent .
9763	Gets the factories for the given model type .
9764	Returns the session associated with the given instance key .
9765	Writes the contents of the file to the HttpServletResponse .
9766	Reads the metadata of the resource .
9767	Handle the request .
9768	Closes the statement .
9769	Force close stale event streams .
9770	Handle allowed methods .
9771	Upload the blob .
9772	Delete the endpoint .
9773	Extract column parameters .
9774	Returns the names of the arguments .
9775	Schedule a periodic task for the given period .
9776	Sets the timeout for the given task .
9777	Configures the views repository configuration .
9778	Returns the next file in the list .
9779	Configures the application .
9780	Print the welcome banner .
9781	Prints the stopped banner .
9782	Creates a ChameRIA instance .
9783	Register a shutdown hook to stop the Chameleon .
9784	Trigger the notification .
9785	Trigger the endpoint .
9786	Insert a new row into the table and replace it with the new row .
9787	Returns the counts of all the file counts .
9788	setter for score - sets
9789	getter for variants - gets
9790	setter for variants - sets
9791	getter for questionType - gets
9792	setter for questionType - sets
9793	getter for token - gets
9794	getter for depLabel - gets
9795	setter for depLabel - sets
9796	getter for semanticType - gets
9797	setter for semanticType - sets
9798	getter for sections - gets
9799	setter for sections - sets
9800	indexed getter for sections - gets an indexed value -
9801	indexed setter for sections - sets an indexed value -
9802	getter for uris - gets
9803	setter for uris - sets
9804	getter for types - gets
9805	setter for types - sets
9806	getter for targetType - gets
9807	setter for targetType - sets
9808	getter for rank - gets
9809	setter for rank - sets
9810	getter for queryString - gets
9811	setter for queryString - sets
9812	getter for candidateAnswers - gets
9813	setter for candidateAnswers - sets
9814	indexed getter for candidateAnswers - gets an indexed value -
9815	indexed setter for candidateAnswers - sets an indexed value -
9816	getter for query - gets
9817	setter for query - sets
9818	getter for hitList - gets
9819	setter for hitList - sets
9820	indexed getter for hitList - gets an indexed value -
9821	indexed setter for hitList - sets an indexed value -
9822	getter for abstractQuery - gets
9823	setter for abstractQuery - sets
9824	getter for searchId - gets
9825	setter for searchId - sets
9826	setter for docId - sets
9827	getter for offsetInBeginSection - gets
9828	setter for offsetInBeginSection - sets
9829	getter for offsetInEndSection - gets
9830	setter for offsetInEndSection - sets
9831	getter for beginSection - gets
9832	setter for beginSection - sets
9833	getter for endSection - gets
9834	setter for endSection - sets
9835	getter for aspects - gets
9836	setter for aspects - sets
9837	getter for triple - gets
9838	setter for triple - sets
9839	getter for sourceRelation - gets
9840	setter for sourceRelation - sets
9841	getter for subject - gets
9842	setter for subject - sets
9843	getter for predicate - gets
9844	setter for predicate - sets
9845	getter for isObjUri - gets
9846	setter for isObjUri - sets
9847	getter for operator - gets
9848	setter for operator - sets
9849	getter for operatorArgs - gets
9850	setter for operatorArgs - sets
9851	getter for concept - gets
9852	getter for score - gets
9853	getter for text - gets
9854	setter for text - sets
9855	getter for id - gets
9856	setter for id - sets
9857	getter for name - gets
9858	getter for abbreviation - gets
9859	setter for abbreviation - sets
9860	setter for concept - sets
9861	getter for variants - gets
9862	setter for variants - sets
9863	getter for namedEntityTypes - gets
9864	setter for namedEntityTypes - sets
9865	getter for conceptType - gets
9866	setter for conceptType - sets
9867	getter for occurrences - gets
9868	setter for occurrences - sets
9869	getter for concepts - gets A collection of objects of type uima . julielab . uima . Concept O
9870	setter for concepts - sets
9871	getter for originalText - gets
9872	setter for originalText - sets
9873	getter for args - gets
9874	setter for args - sets
9875	getter for label - gets
9876	setter for label - sets
9877	Returns the index of the next clear bit in this set .
9878	Sets the bit at the given index .
9879	Free the given buffer .
9880	Creates a new instance of the cache value .
9881	Rehashes the given array of values .
9882	method to convert the MonomerNotations to HELM2 notation
9883	Check of brackets in the annotation section .
9884	Adds the details from the given string .
9885	Returns the HELM representation .
9886	method to add an element to the MonomerNotationGroup
9887	Main method to convert a HELM1 or HELM2 file
9888	Checks if the polymerId is valid .
9889	Checks if the polymerId is valid .
9890	Checks if the details of a connection are valid .
9891	Checks if the group ID is valid .
9892	Checks if the given string is repeating .
9893	Checks if the last element of the polymer section is a Peptide or Rna Polymer
9894	Returns the JSON representation of this object .
9895	method to get a simple polymer
9896	Gets the current groupingNotation
9897	Returns the HELM representation of this model .
9898	method to convert a Polymer to HELM2
9899	Returns the HELM notation of all connections .
9900	Returns the HELM notation for the grouping .
9901	Returns the HELM2 representation of the annotation .
9902	method to get the list of polymer and grouping IDs
9903	method to get the polymer for the given id
9904	Set the polymer elements .
9905	Convert a HELM string to a HELM string .
9906	Sets the annotation .
9907	Sets the count .
9908	method to decide which MonomerNotation
9909	method to decide which MonomerNotationGroupElement
9910	decide what HELMEntity to use
9911	Returns the value of the interval .
9912	Parses the given HELM2 test .
9913	method to set the contents of the MonomerNotationUnit
9914	Define the ambiguity .
9915	Returns the statistics for this worker thread .
9916	Creates an ADiGraph from the given collection of edges .
9917	Creates an ADiGraph from the given nodes and edges .
9918	Initializes the internal list of paths .
9919	Returns a sorted list of all nodes in the graph sorted by reachability .
9920	Subscribes a pattern to a method .
9921	Send a subscribe_count request to the server .
9922	Unsubscribe from a pattern .
9923	Send a request to the remote Erlang server .
9924	Send a return_sync command to the remote node .
9925	Polls for a request .
9926	Send a shutdown message with the given reason .
9927	If the given exception is a local exception it is wrapped in a unchecked exception . Otherwise it is wrapped in a unchecked exception .
9928	Unlocks the run state .
9929	Creates a new worker thread .
9930	Try to add a worker to the run state .
9931	Register a worker thread .
9932	De - registers a worker .
9933	Signal the current thread to the given work queue .
9934	Run a worker .
9935	Wait for a work to complete .
9936	Returns the number of queued tasks in the pool .
9937	Returns the common submitter queue .
9938	external help complete .
9939	Submits a ForkJoinTask to the pool .
9940	Make a common ForkJoinPool .
9941	Returns the value of this Completer .
9942	Build a string from an AStatement1
9943	Get the thread pool statistics .
9944	Creates an AList from the given elements .
9945	Reverses this list .
9946	Returns true if the predicate is true for all elements in the collection false otherwise .
9947	Folds the elements of the given collection starting with the given value using the supplied function .
9948	Folds the elements of a List into a single value using the supplied Function2 .
9949	Pushes a task onto the stack .
9950	Creates an AOption from a non - null value .
9951	Creates an ALongHashMap from the given keys and values .
9952	Returns an empty AListMap .
9953	Creates a list map from the given keys and values .
9954	Creates an AListMap from the given keys and values .
9955	Returns the keys of this map .
9956	Normalize a resource name .
9957	Marshals a bound type to a string .
9958	Returns a sub - sequence of this string .
9959	Returns a binary search for the given list .
9960	Returns a binary search for the given list using the given comparator .
9961	Send email .
9962	Send an email .
9963	Binds the given route binding to the application .
9964	Binds the given filter binding to the application .
9965	Returns true if the user has at least one role .
9966	Returns the int value of the given long .
9967	Removes duplicate strings from the given array .
9968	Returns a string like the specified string .
9969	Performs the run .
9970	Login the given user with the given password .
9971	Returns the login user from the cookie or null if not found .
9972	Gets the login user from the session .
9973	Checks if the given password matches the given salt .
9974	Saves the given user in the login cookie .
9975	Returns the login key for the given user .
9976	Returns the user associated with the given uuid .
9977	Forward the request to the specified path .
9978	Appends a file separator to a path .
9979	Returns the value of a request parameter .
9980	Record a debug message .
9981	Returns information about the caller of the given level .
9982	Convert a char array to a byte array .
9983	Converts a CharSequence to a byte array .
9984	Convert a byte array to a char array .
9985	Converts a CharSequence to an ASCII byte array .
9986	Returns the LocaleData for the given locale code .
9987	Schedules the execution of the job in the given number of seconds .
9988	Crop the specified image to the specified destination file .
9989	Schedules the given invocation for the given amount of time .
9990	Executes the given direct invocation in the current thread .
9991	Gets the rest operations .
9992	Render an error response .
9993	Render an AJAX forbidden response .
9994	Returns the template for the given view .
9995	Parse the path from the url .
9996	Renders the data tables .
9997	Renders empty data tables .
9998	Sets the list of items .
9999	Sends the redirect to the given URL .
10000	Returns a list of all providers bound to this type .
10001	Returns the current method name .
10002	Compacts the memory .
10003	Propagate a Metrics object to the local MetricsCollection .
10004	Encodes the given string .
10005	Returns the charset of the given file .
10006	Copies the contents of the input stream to the output stream .
10007	Copy bytes from the input stream to the output stream .
10008	Copies the contents of the given input stream to the given output stream using the default encoding .
10009	Copy the contents of the input stream to the output stream .
10010	Copies the specified number of characters from the specified Reader to the specified Writer .
10011	Copies the contents of the Reader to the OutputStream using the default encoding .
10012	Copies the contents of the input stream to the output stream using the given encoding .
10013	Compares two input streams .
10014	Compares two Reader objects .
10015	Applies the given io to all stages .
10016	Returns the SQL for the given SQL group and SQL ID .
10017	Unmarshals a string into an object of the specified type .
10018	Unzips the given zip file to the given destination directory .
10019	Creates and returns a new instance of the PermissionDialogFragment .
10020	Override onResume to add a key listener to the dialog .
10021	Add a core value type .
10022	Returns true if the given value matches the given regular expression .
10023	Checks if the given value is a mobile phone number .
10024	Checks if value is a phone number .
10025	Returns true if the given value is a valid birth day .
10026	Checks if the given string is a valid URL .
10027	Checks if the given string is a valid date time .
10028	Process the request .
10029	Encodes the given string using Base64 .
10030	Decodes a base64 encoded string .
10031	Converts a hexadecimal string into a byte array .
10032	Read properties from a UTF - 8 stream .
10033	Read content as string .
10034	Reads the content of a file into a String .
10035	Writes a byte array to a file .
10036	Copies the contents of a directory to the target directory .
10037	Serializes an XML document to a String .
10038	Get a Document object from an XML file .
10039	Returns a Document object from the given XML string .
10040	Get a Document object from an input stream .
10041	Validates an XML signature .
10042	Sign a document using the specified public key and private key .
10043	Returns true if the given class is cached by the given classloader .
10044	Checks if the given class is an array of primitive types .
10045	Checks if the given class is a primitive wrapper array .
10046	Resolves a primitive type if possible .
10047	Returns true if the given type is assignable to the given type .
10048	Returns true if the given value is assignable to the given type .
10049	Returns all interfaces implemented by the given instance .
10050	Returns all interfaces implemented by the given instance .
10051	Writes the configuration to a temporary file .
10052	Returns the variables for the given URI .
10053	Adds a new permission to this bean .
10054	Creates a DruidPlugin from the given database properties .
10055	Binds an implementation to an extension point .
10056	Returns the built - in object for the given type .
10057	Returns the primitive value for the given type .
10058	Convert the given object to the given type .
10059	Convert user defined value type .
10060	Returns the value of a query parameter .
10061	Returns the value of a cookie .
10062	Returns the value of the named session parameter .
10063	Initializes the data source .
10064	Sets the Ftl shared variable .
10065	Adds a parameter to the query .
10066	Sets the specified field to equal to the specified value .
10067	Shows a permission dialog .
10068	Returns true if all values are granted .
10069	Returns true if any value in the given array is denied .
10070	Find records .
10071	Returns the first record matching the query .
10072	Returns true if the given model is new .
10073	Checks if the given method declares an exception .
10074	Processes the queue and removes all entries from the map .
10075	Adds a new value to the map .
10076	Returns true if string matches pattern .
10077	Reads the arguments from the command line .
10078	Gets the protobuf entity annotation .
10079	Returns true if the given class is a protobuf entity .
10080	Returns a map of all fields from the given class .
10081	Returns the protobuf getter for the given field .
10082	Returns the POJO setter for the given field .
10083	Gets the object mapper .
10084	Gets the json factory .
10085	Convert an object to a JSON string .
10086	Sets the borders .
10087	Returns the user record for the given domain and user name .
10088	Copy out attributes of an object .
10089	Copy out attributes .
10090	Get the value of a property .
10091	Set a property .
10092	Add this application to the frame .
10093	Saves the given token to the session .
10094	Gets the access token .
10095	Returns the default class loader .
10096	Returns the URL of the named resource .
10097	Gets a resource from the classpath .
10098	Returns an input stream for the given class .
10099	Initializes this URI with the information from the given URI .
10100	Initialize the scheme from a URI specification .
10101	Initializes the path from a URI specification .
10102	Sets the scheme .
10103	Sets the userinfo .
10104	Sets the host .
10105	Sets the port .
10106	Appends the given path to the current path .
10107	Sets the query string .
10108	Sets the URI fragment .
10109	Get the URI string .
10110	Creates a prepared statement from the given iterator .
10111	Initialize this applet .
10112	Get the value of this parameter .
10113	Set the value of this parameter .
10114	Returns the contents of the clipboard .
10115	Set the contents of the clipboard .
10116	Open a file as an input stream .
10117	Load all the services of the given type .
10118	Sets the service params .
10119	Returns a map of service parameters for the given operation .
10120	Find a parmetrized service .
10121	Finds a service by its class .
10122	Parses a query response .
10123	Returns an iterator over the elements in this buffer .
10124	Get the encoding from an XML string .
10125	Gets the parent logger .
10126	Creates a proxy to the given connection .
10127	Get the authorization code from the command line .
10128	Visit a PackageDeclaration .
10129	Visit a ClassDeclaration .
10130	Visit a ExecutableDeclaration .
10131	Returns the value associated with the given key .
10132	Returns a DeclarationFilter that only accepts the given modifiers .
10133	Returns a DeclarationFilter that only accepts Declaration objects of the given type .
10134	Returns a new DeclarationFilter that matches this one and the given DeclarationFilter .
10135	Returns a DeclarationFilter that returns true if this DeclarationFilter or the given DeclarationFilter .
10136	Returns the cache as a Map .
10137	Make the constructor accessible .
10138	Prepare a query for an MBean object .
10139	Replaces all slashes with hyphens .
10140	Converts a byte array into a hexadecimal string .
10141	Returns the indexes for the given parameter name .
10142	Parse a named SQL statement .
10143	Converts a collection of objects to protobuf entities .
10144	Set the value of a protobuf field .
10145	Sets the value of the given protobuf attribute to the given value .
10146	Check if this file should be included .
10147	Creates a new ResultSet proxy .
10148	Maps the given list of labels to their corresponding index .
10149	Extract the expected values from a list of values .
10150	Gets the generic supertype of the given type .
10151	Polls for objects .
10152	Poll individually .
10153	Returns the field of the given class or null if it doesn t exist .
10154	Returns the declared methods of the given class .
10155	Returns the declared method or null if the method does not exist .
10156	Returns all methods annotated with the given annotation .
10157	Returns all constructors annotated with the given annotation .
10158	Prints a single byte to stdout .
10159	Returns the index of the first occurrence of the specified substring in the specified string ignoring case .
10160	Removes all of the characters from a string .
10161	Clean the state of the subject .
10162	Initializes the audit .
10163	Initializes the message queue .
10164	Initializes the password validator .
10165	Initializes the password authenticator .
10166	Resolve locale code .
10167	Returns the LocaleInfo for the given locale code .
10168	Creates a proxy to the given statement .
10169	Removes all elements from this list .
10170	Pushes an element onto the stack .
10171	Removes the top element from the stack .
10172	Returns the input stream for this file .
10173	Parse the command line arguments .
10174	Returns true if the tokens match the patterns .
10175	Moves the current position by the specified amount .
10176	Returns true if this rectangle encloses the other rectangle .
10177	Returns true if the rectangle contains the specified point .
10178	Returns the intersection of this rectangle with the specified rectangle .
10179	Returns the union of this rectangle with the specified rectangle .
10180	Replaces the x value of this Rectangular with the x value of the other Rectangular .
10181	Replaces the y values of this Rectangular with the values of the other Rectangular .
10182	Returns the offset of the specified column .
10183	Returns the offset of the specified row .
10184	Returns the bounds of a cell relative to this cell .
10185	Calculates the columns .
10186	Calculates the number of rows .
10187	Unwrap a throwable .
10188	Main method .
10189	This method is called when a code buffer is updated .
10190	Copy and resize the code buffer .
10191	Renders a list of instructions .
10192	Initializes the servlet context .
10193	Returns a copy of this parameter with the specified excluded elements .
10194	Adds a child node to this node .
10195	Clears the children of this node .
10196	Returns the next solution in the sequence or null if the sequence is exhausted .
10197	Adds the given instructions to this WAM .
10198	Adds the given list of instructions to the parent .
10199	This method is called when the property of the work panel is changed .
10200	Register the work panel .
10201	Updates the present component flags .
10202	Creates a new instance of the type .
10203	Returns true if the given term should be evaluated .
10204	Optimize a list of instructions .
10205	Compares two collections .
10206	Sends the request to the client .
10207	Render the first and back buttons .
10208	Renders an HTML button .
10209	Reset to the initial state .
10210	Initializes the model .
10211	Returns the value associated with the specified key .
10212	Returns the index of the specified key .
10213	Sets the value at the given index .
10214	Removes the value associated with the specified key from this map .
10215	Removes the element at the given index .
10216	Returns true if the given property exists .
10217	Sets the value of a property .
10218	Returns the value of the specified property .
10219	Checks if the wrapper type is assignable to the primitive type .
10220	Initializes the getters and setters for the given callee .
10221	Returns the decision tree for the given state .
10222	Initializes the lookup table .
10223	Unify the query and statement .
10224	Unify the left and right terms .
10225	Unify a variable .
10226	Compile a query .
10227	Finds the maximum number of arguments in a clause .
10228	Allocates the query registers for the given clause .
10229	Gather the position and occurrence information for the given clause .
10230	Display a WAM compiled predicate .
10231	Display a compiled query .
10232	Put a 32 - bit integer into the given buffer .
10233	Converts a byte buffer into a String .
10234	Returns the string value for this attribute .
10235	Sets the value of this EnumeratedStringType .
10236	Read a term .
10237	Checks if a class exists and is loadable .
10238	Checks if the given class is a subtype of the given parent class .
10239	Checks if parent class is a subtype of child class .
10240	Returns true if parentClass is a subtype of childClass
10241	Tries to load the class with the given name .
10242	Creates a new instance of the given class .
10243	Creates a new instance of the given constructor with the given arguments .
10244	Calls a method overriding illegal access .
10245	Calls a method on an object .
10246	Call a static method .
10247	Gets the constructor for the given class .
10248	Finds the set methods for the given property name .
10249	Returns a transactional copy of the given queue .
10250	Returns a transactional re - queue .
10251	Returns the type of the given object .
10252	Resets the state machine .
10253	Returns the current state of the search .
10254	Creates a new int range type .
10255	Add support of TZ .
10256	Adds an alternate dimension for the specified timezone .
10257	Adds a dimension to the database .
10258	Finds all free variables .
10259	Finds free non - anonymous variables .
10260	Compares two search nodes .
10261	Writes the given object to the given output file .
10262	Reads the contents of an input stream into a String .
10263	Creates a new search node for the given state .
10264	Generate a trace indent string .
10265	Allocate the argument registers for the given expression .
10266	Returns true if the given body term is the last body term in the argument position only .
10267	Returns the majority classification for the given property .
10268	Checks if all examples have the same classification .
10269	Choose the best property to decide on .
10270	Returns a new functor with the given name and arguments .
10271	Returns a new variable with the given name .
10272	Override this method if you want to override this method .
10273	Returns the page at the specified index .
10274	Sets the texture .
10275	Override paint immediately to enable double buffering .
10276	Creates a buffered image of the specified type .
10277	Creates a 2D Graphics .
10278	Create a binary image .
10279	Create a SGISurface .
10280	Sets the queue search algorithm .
10281	Search for a node in the queue .
10282	Searches for a node in the search tree .
10283	Entry point for the main method .
10284	Returns the clause for this sentence .
10285	Reads a list of terms from the source code .
10286	Consumes a functor .
10287	List a functor .
10288	Returns the argument list .
10289	Consumes a VAR token .
10290	Consumes an integer literal .
10291	Consumes a floating point literal .
10292	Consumes a string literal .
10293	peek and consume a directive .
10294	Intern an operator .
10295	Initializes the built - ins .
10296	Consumes a token from the token source .
10297	Consume the next token from the token source .
10298	Binds this session to the current thread .
10299	Rolls back the transaction .
10300	Collect the elements from the iterator into the target collection .
10301	Reserve a call point .
10302	Convert a time of day to a number of ticks .
10303	Convert ticks to years .
10304	Returns the ticks with hours set to the given value .
10305	Returns the ticks with minutes set to the given value .
10306	Returns the number of ticks with the given number of seconds set .
10307	Returns the number of ticks that have been set to the given year .
10308	Returns the number of ticks that have been set to the given month .
10309	Returns the ticks with date set to the given value .
10310	Returns the start of the given year in milliseconds .
10311	Returns the month of the given ticks in the given year .
10312	Reads a block of bytes from the source .
10313	Applies the given key to the given entry .
10314	Returns the entry for the given key .
10315	Returns null if the given entry is not in the hash table .
10316	Rehashes the hash table .
10317	Called when the user clicks on an action button .
10318	Sets the next available state .
10319	Sets the value of prevAvailable property .
10320	Sets the value of the finished property .
10321	Returns an instance of the WAMResolvingNativeMachine .
10322	Returns an iterator over the set of variables in this sequence .
10323	Returns the expected I for the given probabilities .
10324	Returns the probability distribution for the given counts .
10325	Sets the ticks .
10326	Perform the sorting .
10327	Creates a new URL from a string .
10328	Get the request info .
10329	Returns the headers of the request .
10330	Returns the cookies of the current request .
10331	Returns the parameters of the request .
10332	Returns the scope of the request attributes .
10333	Returns the page scope .
10334	Gets the current session scope .
10335	Returns the application scope .
10336	Gets the user principal .
10337	Writes the debug information to the page .
10338	Converts a map of properties to an HTML table .
10339	Performs a search on the given search state .
10340	Sets the current screen state .
10341	Walks the tree starting from the given term .
10342	Compares two search nodes .
10343	Updates the internal registers .
10344	Notifies all active PropertyChangeListeners of the given changes .
10345	Leave the given clause .
10346	Returns true if the given context is a top level functor .
10347	Returns an array containing all of the elements in this sequence .
10348	Sets the arguments for the operator .
10349	Returns the current fixity .
10350	Returns true if the model is infix .
10351	Compares two OpSymbols by their priority .
10352	This method is called when a property is changed .
10353	Register the work flow controller .
10354	Returns an enum attribute factory for the given class .
10355	Creates a component factory from a class name .
10356	Returns the storage cell for the given variable .
10357	Returns true if this cell is bound .
10358	Sets a column attribute .
10359	Sets the row attribute .
10360	Returns the column attribute at the specified index or null if the column does not exist .
10361	Returns the row attribute or null if the row does not exist .
10362	Internal insert method .
10363	Creates a new time range type .
10364	Creates a new instance of StringPatternType .
10365	Returns true if the given CharSequence is an instance of this Pattern .
10366	Creates the initial context for the given term .
10367	Updates the registers of this memory layout .
10368	Returns the value of this variable .
10369	Finds the goal path .
10370	Join both paths .
10371	Returns the list of items in the specified block .
10372	Returns the properties for the given resource .
10373	Sets the rate in hertz .
10374	Reads bytes from the source and copies them into the given byte array .
10375	Skips the specified number of bytes .
10376	gather a list of expressions for a disjunction
10377	Reads an int from the byte array at the given offset .
10378	Writes an int to a byte array at a specific offset in big - endian order .
10379	Write 24 - bit int to byte array .
10380	Read a 24 - bit integer from the byte array at the given offset .
10381	Reads a short from the given byte array at the given offset .
10382	Writes a short to a byte array at a specific offset in big - endian order .
10383	Returns the child state for the given operator .
10384	Returns an iterator over all valid operators in the tree .
10385	Returns the id of the attribute .
10386	Returns the value of the attribute .
10387	Sets the value of this IdAttribute .
10388	Convert a list of strings to an array .
10389	Converts an array of strings to a string .
10390	Converts a class name to a camel case name .
10391	Convert the case of a string .
10392	Returns the current configuration .
10393	List the handlers .
10394	Resolve a call point for a given functor .
10395	Add a code address to the symbol table .
10396	Returns true if the given hierarchy attribute is a sub category of this category .
10397	Returns the id of the attribute .
10398	Returns the value at the given level .
10399	Returns the last value of the path .
10400	Writes this attribute to the stream .
10401	Deserializes this object from a stream .
10402	Compute the H value for a given search node .
10403	Returns the mod of the given long .
10404	Adds a user - readable error message .
10405	Handles the given exception and adds them to the given errors .
10406	Writes a string to the output stream .
10407	Classifies the decision tree .
10408	Compares two objects using the partial ordering .
10409	Returns an iterator over the items in the cluster .
10410	Returns the log2 of the given integer .
10411	Returns the log2 of the given integer in Base 2 v2 .
10412	Returns the log10 of the given signed integer in Base 10 v2 .
10413	Returns the logarithm of the given integer in Base 10 v3 .
10414	Returns the number of bytes required to store the given long in Base 10 .
10415	Returns the integer value represented by the given long in Base 10 v2 .
10416	Returns the number of characters in the given int value .
10417	Returns the number of characters in the given long value .
10418	Returns the number of characters required to represent the given decimal value .
10419	Sets the head of the WAM .
10420	Emits the code from the instruction listing .
10421	Sets the current screen .
10422	Evaluate the chain of predicates .
10423	Returns the value of the property with the specified key .
10424	Returns the properties for the given key .
10425	Returns an iterator over the keys in this key order .
10426	Creates the array properties .
10427	Sets the rate .
10428	Returns the negative value of the given number .
10429	Find the properties .
10430	Gets the properties using the system property .
10431	Get the properties from the classpath .
10432	Gets the properties using the current working directory .
10433	Leave a built - in functor .
10434	Returns the value of this variable .
10435	Sets the substitution .
10436	Creates a priority queue .
10437	Closes the output stream .
10438	Append a logging event to the socket .
10439	Starts the connector thread .
10440	Initialize the printers .
10441	Commits the current transaction to the database .
10442	Rolls back the current transaction .
10443	Requests a write operation .
10444	Adds the given cached write operation to the write cache .
10445	Acquires the global write lock .
10446	Release the global write lock .
10447	Enlist this resource with the current session .
10448	Enter a rule set node .
10449	Inserts the specified element at the tail of this queue waiting up to the specified timeout .
10450	Returns the first element in this queue or null if the queue is empty .
10451	Put an element into the queue .
10452	Inserts an element into the queue . If unlockAndBlock is true blocks until the queue is full .
10453	Returns the next object in the iterator .
10454	Returns the value of a property as a boolean .
10455	Returns the value of a property as an integer .
10456	Returns the value of a property as a Long .
10457	Call a mixin .
10458	Set up an InclusiveNodeVisitor .
10459	Backtrack a search node .
10460	Retrieve the code for a given call point .
10461	Execute the query and extract the bindings .
10462	Decode a heap instruction .
10463	Captures the values of the object .
10464	Restores the values of an object .
10465	Returns the value of the specified attribute in the specified class .
10466	Put a value for a class attribute .
10467	Returns all field names for the given class .
10468	Execute the command .
10469	Inserts the specified element at the end of this queue .
10470	Removes and returns the first element from the list .
10471	Creates a new search node .
10472	Creates a priority queue .
10473	Returns a new TermWalker using the given visitor .
10474	Returns a new TermWalker that walks the term tree starting from the given unary predicate .
10475	Returns a new TermWalker that traverses the given PositionalTermVisitor .
10476	Returns a new TermWalker for the given unary predicate and a PositionalTermVisitor .
10477	Returns a new TermWalker that walks the given PositionalTermVisitor using the given visitor .
10478	Loads the properties from the given input stream .
10479	Reads the properties from the given file .
10480	Gets the properties from the given URL .
10481	Returns a Properties object for the given pathname .
10482	Compute the grid size .
10483	Initialize the font metrics .
10484	Add a PropertyChangeListener to the list of listeners .
10485	Add a PropertyChangeListener to the list of listeners .
10486	Remove a property change listener .
10487	Fires a PropertyChangeEvent to all registered PropertyChangeListeners .
10488	Creates a new double range type .
10489	Do the fading .
10490	Show the status bar .
10491	Shows the left bar .
10492	Show the right bar .
10493	Sanitize radio controls .
10494	Wait for the given task to complete .
10495	Await for the specified time to complete .
10496	Execute the command .
10497	Appends the classpath to the command line .
10498	Creates a new date range type .
10499	Prints the Introduction information .
10500	Initializes the command line reader .
10501	Evaluate the given sentence .
10502	Evaluate the query .
10503	Returns the MultiTypeData for the given boolean .
10504	Convert a byte to a MultiTypeData .
10505	Returns the MultiTypeData for the given character .
10506	Returns the MultiTypeData for the given short .
10507	Returns the MultiTypeData for the given integer .
10508	Returns the MultiTypeData for the given long .
10509	Get the MultiTypeData for a float .
10510	Get the MultiTypeData for a double .
10511	Returns a MultiTypeData object for the given string .
10512	Returns the MultiTypeData for the given object .
10513	Convert a MultiTypeData to a Java type .
10514	Put a value into the page context .
10515	Clears all values up to the specified key .
10516	Expands the array to contain the specified key .
10517	Internal method to insert a character into the table .
10518	Compares two search nodes .
10519	Parse the operators .
10520	Returns the set of operators matching the given name .
10521	Tries to resolve the given candidate operator to one of the given fixities .
10522	Creates a new search node for the given successor .
10523	Right pad a string .
10524	Returns the parsing errors .
10525	Gets the options in force .
10526	Returns the usage string .
10527	Add trailing pairs to properties .
10528	Add options to properties .
10529	Adds an option to the command line .
10530	Takes a list of free arguments and returns them as a Properties object .
10531	Checks that the given argument matches the expected format .
10532	Compares the given iterators using the given mapping function .
10533	Returns an enumeration of options for the command line .
10534	Returns the command line options .
10535	Set the stemmer .
10536	Get the actual stemmer .
10537	Returns the stem of the specified word .
10538	Runs the PTStemmer .
10539	Creates a new float range type .
10540	Resets the internal state .
10541	Trace the current frame of the environment .
10542	Trace a choice frame .
10543	Call the internal function .
10544	Returns the index of the next stack frame .
10545	Returns true if the backtrack was successful .
10546	Add an address to the trail .
10547	Unwinds a portion of the array .
10548	Tidy up the trail .
10549	Unify a pair of registers .
10550	Unify a constant .
10551	Print the slot .
10552	Get a random start state .
10553	Returns true if the given puzzle state is solvable .
10554	Returns a new child state for the given operator .
10555	Returns an iterator of valid operators .
10556	Pretty print the board .
10557	Returns the number of times the specified tile cannot be swapped to the specified location .
10558	Swaps two tiles .
10559	Convert a board string to a list of characters
10560	Convert a character list to an EightPuzzle state .
10561	Converts a log4j record to a log4j message .
10562	Returns the log4j level corresponding to the given log4j level .
10563	Requeues the specified element .
10564	Adds an element to the queue .
10565	Increments the size and count .
10566	Decrement the size and count .
10567	Signal on size threshold crossing .
10568	Returns an enumeration of names in this context .
10569	Returns an enumeration of bindings for the specified name .
10570	Add a property to the environment .
10571	Removes the specified property from the environment .
10572	Run GCTill stable .
10573	Literal .
10574	Resolve a mixin reference .
10575	Pushes a variable reference to the value stack .
10576	Sets the maximum height of a row .
10577	Updates the max column width .
10578	This method is invoked when an error occurs while processing the action .
10579	Creates a new node for the given successor .
10580	Executes the action .
10581	Substitute built ins .
10582	Initialise the symbol table .
10583	Performs a top - level check on the given clause .
10584	Converts a list of expressions to a string .
10585	Returns true if the first number is less than the second number .
10586	Sets the state to Running .
10587	Sets the state to Shutdown .
10588	Sets the state to Terminated .
10589	Inserts the specified element into this queue .
10590	Ceiling log2 .
10591	Updates the minimum node .
10592	Compares two nodes .
10593	Inserts a new node into the tree .
10594	Restarts the sweep thread .
10595	Returns the set of objects that match the given search method .
10596	Returns a collection of objects that match the given search method .
10597	Finds all solutions .
10598	Returns the next element in the sequence .
10599	Restores the values of an object .
10600	Returns the value of the given property on the underlying class .
10601	Put a MultiTypeData value .
10602	Sets the value of a property .
10603	Capture properties from an object .
10604	Removes and returns the element at the top of this list .
10605	Returns a string representation of the given modifiers .
10606	Convert a string to an integer .
10607	Convert a string to a Date .
10608	Checks if a string is a valid date .
10609	Checks if a string is a time .
10610	Checks if a string is a valid date time .
10611	Returns a TokenSource for the given string .
10612	Returns a token source for the given file .
10613	Returns a token source for the given input stream .
10614	Returns true if the given instruction is a constant instruction .
10615	Returns true if the given instruction is a void variable .
10616	Returns true if the given instruction is a non - argument instruction .
10617	Returns an iterator over the children of this clause .
10618	Returns the argument at the given index .
10619	Returns an iterator over the children of this operator .
10620	Returns the string representation of the arguments .
10621	Retrieve a summary from the database .
10622	Retrieve records from the database .
10623	Executes the query and returns the results .
10624	Emits the given code buffer .
10625	Sets the basic type .
10626	Consults the given input stream .
10627	Print a variable binding .
10628	Expand the result set to a map .
10629	Read data from the input stream .
10630	Reads the next packet from the stream .
10631	Returns the current time in milliseconds .
10632	Returns the current time in milliseconds .
10633	Updates the track info .
10634	Updates the play info .
10635	Render the final output .
10636	Handles a resource request .
10637	Handles an event request .
10638	Fire the start music request event .
10639	Initializes the parser .
10640	Starts the connection .
10641	Shuts down the connection .
10642	Reset the parser .
10643	Parse packets from the XML stream .
10644	Process a packet .
10645	Sets the cli option .
10646	Create a new chat .
10647	Internalize the content manager .
10648	Resets the content to the given map .
10649	Sets the value of a property .
10650	Adds a new filter to the list .
10651	Process a request .
10652	Resets the properties of all stores .
10653	Initializes the Packet Writer .
10654	Sends a packet to the server .
10655	Returns the next packet in the queue or null if the queue is empty .
10656	Open the stream .
10657	Returns a list of all information about this type .
10658	Returns true if the descriptor is contained in the descriptor list .
10659	Add event life cycle listener .
10660	Shuts down the timer .
10661	Returns true if the contents of two files are equal .
10662	Clean a direct byte buffer .
10663	Returns true if the given entry is valid .
10664	Returns the null key if it is null .
10665	Checks if two objects are equal .
10666	Returns the entry for the specified key .
10667	Resizes the table to the given capacity .
10668	Adds all entries from the given map to this map .
10669	Removes the value associated with the specified key from this map .
10670	Removes the entry for the given key .
10671	Removes a mapping from the table .
10672	Adds an entry to the table .
10673	Create delegate map .
10674	Encode a binary attribute value .
10675	Encodes a byte array into a hexadecimal string .
10676	Encodes the given string into Base64 .
10677	Encodes a byte array into a Base64 string .
10678	Iterate over the given collection .
10679	Sets the track selector controller .
10680	Sets the progress controller that will be invoked when a jump is requested .
10681	Sets the controller that will be called when the playback is changed .
10682	Sets the volume changeable controller .
10683	Broadcasts the available playlists .
10684	Handles command resources .
10685	Handles the volume change .
10686	Handles a jump event .
10687	Handles the select track command .
10688	Returns the thread cache .
10689	Gets the request cache .
10690	Returns the alt field for the given field and stream id .
10691	Returns a filtered view of the source map .
10692	Returns the shard path for the given id .
10693	Adapts an object to a Session .
10694	Try to invoke a method on a target object .
10695	Deletes a tree of content .
10696	Updates the given entity with the specified properties .
10697	Sets the ping interval .
10698	Schedules the ping server task .
10699	Adds the given options to the command line .
10700	Returns true if the given option is a valid option .
10701	Parse the command line .
10702	Prints the usage for the given application .
10703	Parse the command line .
10704	Initializes the connection .
10705	Sends a starttls request to the server .
10706	Returns the compression handler or null if none was found .
10707	Request stream compression .
10708	Start stream compression .
10709	Notifies all connection listeners that the connection has been closed .
10710	Notifies all connection listeners that the reconnection was successful .
10711	Register a SASLMechanism .
10712	Returns the registered SASL mechanisms .
10713	Returns the output plugin behaviour for the given identifications .
10714	Log a message at the INFO level .
10715	Log an error message .
10716	Log a message with a stack trace .
10717	Creates a start event .
10718	Creates a start event .
10719	Notifies the listeners that a string has been written .
10720	Checks if the given resource is contained in the list of resources .
10721	Returns true if this model contains resources from the given source .
10722	Checks if the given list of resources IDs provides a resource .
10723	Provides a list of resources that match the given resource IDs .
10724	Gets a value from the cache .
10725	Gets the cache key .
10726	Removes a key from the cache .
10727	Puts the given properties into the cache if it is not already in the cache .
10728	Returns the locations of the files in the classpath .
10729	Includes a file or directory .
10730	Includes a jar file .
10731	Adds the specified SASL mech to the list of default mechs .
10732	Adds a collection of SASL mechs .
10733	Creates the debug streams .
10734	This method is called when the service is activated .
10735	Register standard events .
10736	Registers an event listener .
10737	Registers a new event ID .
10738	Attempts to acquire a lock on the given channel .
10739	Unregisters a previously registered event ID .
10740	Returns true if this event can be run .
10741	Creates a new DSE session .
10742	Creates a music player error .
10743	Start playing the specified track .
10744	Stops playing the music .
10745	Sends a command to the player .
10746	Creates a new BroadcasterPlaylist request .
10747	Creates a new BroadcasterPlaylist for the given Identification and Playlist .
10748	Appends the given parts to the URL .
10749	Adds a query parameter to the URL .
10750	Adds a query parameter to the URL .
10751	Adds a query parameter to the URL .
10752	Adds a query parameter .
10753	Get the playlist from the event model .
10754	The launch button has been pressed .
10755	Check if Nakamura is running .
10756	Checks if the URL exists .
10757	browserButtonActionPerformed This method is called when the browser button is pressed .
10758	Create an image icon from a file .
10759	Launch Nakamura .
10760	Sets the value of this IntArray to the specified values .
10761	Export to a HashMap .
10762	Returns the value at the given index .
10763	Returns the value associated with the specified key .
10764	Returns the value as an integer .
10765	Returns the value as a Double .
10766	Returns the value as a string .
10767	Creates a command resource .
10768	Verifies that the given command is valid .
10769	Verifies the capabilities for the given command .
10770	Verifies that the given command and capabilities are valid .
10771	Execute a batch of statements asynchronously .
10772	Returns a set of all subclasses of the given class .
10773	Returns all subclasses of the given class name .
10774	Search for classes in the given location .
10775	Searches the given directory for a class in the given package .
10776	Search for a class in a jar .
10777	Returns this resource as a list .
10778	Returns the size of this map .
10779	Process a packet .
10780	Returns the volume for the given event model .
10781	Creates an error response for a page not found request .
10782	Creates an error response .
10783	Determines if the given Identifiable is the target of the EventModel .
10784	Sets whether the login should be enabled .
10785	Decorates the given set with a SynchronizedSet .
10786	Sets the name of this roster .
10787	Updates the state of the message .
10788	Returns a collection of all groups contained in this roster .
10789	Appends the RSM element to the query element .
10790	Parses a RSM query element .
10791	Filters a list of Identifiable objects based on the RSM response .
10792	Creates a LeavingEvent .
10793	Reloads the roster .
10794	Creates an entry in the roster .
10795	Returns an unmodifiable collection of all entries in this roster .
10796	Returns the presence of the user with the specified resource .
10797	Sets the offline presences .
10798	Notifies the listeners that the roster has changed .
10799	Sets the digest .
10800	Generates a new music resource .
10801	Creates a new player request .
10802	Gets the time passed .
10803	Registers an update listener .
10804	Initializes the properties file .
10805	Reload the properties from the properties - file .
10806	Parses a stream error element .
10807	Parse the mechanisms element .
10808	Parses the compression methods .
10809	Parses a packet extension .
10810	Decode a string value .
10811	Verifies that the given event model can be played .
10812	Returns the playback state of the specified resource .
10813	Returns the secret key for the given subdomain .
10814	Returns true if the given subdomain is allowed .
10815	Associates the specified value with the specified key .
10816	Returns the set of keys in this map .
10817	Returns the values of this map .
10818	Purges a reference from the hash table .
10819	Returns the entry for the given key or null if the key is null .
10820	Returns the hash code for the given key and value .
10821	Creates a new hash entry .
10822	Checks if the event is present in the presence indicator .
10823	Sets whether this Vague is present .
10824	Updates the most vague .
10825	Send a message to all registered listeners .
10826	Generate script .
10827	Initialize the output directory .
10828	Loads a property file from the classpath .
10829	Write a file .
10830	Returns the progress of the event .
10831	Decorates the given collection with a SynchronizedCollection .
10832	Returns a collection of ServiceResolver instances for a given range of IPs .
10833	Returns the configuration for this request .
10834	Gets the thread pool .
10835	Creates a StopMusic request for the given source and target Identifications .
10836	Verifies that the given event model contains a StopMusic descriptor .
10837	Returns the DSE cluster with the given parameters .
10838	Adds a connection listener .
10839	Adds a packet listener .
10840	Adds a packet sending listener .
10841	Notifies all listeners that a packet has been sent .
10842	Adds a packet interceptor .
10843	Notifies all registered interceptors of the given packet .
10844	Converts an array of values to an array of values .
10845	Called when the connection is lost .
10846	Gets the current thread id .
10847	Returns true if the given node is valid .
10848	Returns the key associated with the given value .
10849	Returns the value at the given index .
10850	Returns the valid node for the given data and index .
10851	Looks up the node with the given data and index .
10852	Compares two objects .
10853	Returns the least node from the given node and index .
10854	Returns the most node after the given index .
10855	Returns the next node that is greater than or equal to the given index .
10856	Returns the most valid node after the given thread_id .
10857	Returns the least valid node after the given thread_id .
10858	Copies a color from one node to another .
10859	Returns true if the node at the given index is red .
10860	Returns true if the given node is black .
10861	Returns the parent of the given node at the given index .
10862	Returns the parent of the given node at the given index .
10863	Returns the right child of the given node .
10864	Returns the left child of the given node .
10865	Rotates the left child of the given node .
10866	Rotates the right child of the given node .
10867	Performs a red - black insert .
10868	Performs a red - black - delete .
10869	Checks that the specified object is not null and is a Comparable .
10870	Inserts a new value into the map .
10871	Returns true if the specified key is present in this map .
10872	Check if the map contains the specified value .
10873	Returns the value associated with the specified key .
10874	Removes the value associated with the specified key from this map .
10875	Removes all entries from the tree .
10876	Returns the set of keys in this map .
10877	Returns a collection of all values in this map .
10878	Returns a filterable set of all entries .
10879	Copies all entries from this map to the new map .
10880	Deletes expired entries from the cache .
10881	Culls the cache if the size of the cache exceeds maxCacheSize .
10882	This method is called when the application is activated .
10883	Returns the player request for the specified playlist .
10884	Initializes a new roster store .
10885	Open a roster store .
10886	Scan for a range of addresses .
10887	Returns the address of the first subnet of the given address .
10888	Export the data .
10889	Import a TrackInfo from a HashMap .
10890	Adds all applications from the given set of classes .
10891	Execute the given application .
10892	Print the list .
10893	Prints the usage information .
10894	Main entry point .
10895	Creates a mute event for the given source and target Identifications .
10896	Creates a new mute event .
10897	Returns the schema for the given schema name .
10898	Write a list of lines to a file .
10899	Checks if the application is in an executable jar .
10900	Adds an option to the command line .
10901	Gets the schema .
10902	Returns the field with the given name .
10903	Returns the package name of the given JAR entry .
10904	Maps the content of the given base map to the corresponding values .
10905	Creates an event listener .
10906	Sets the state of the iteration .
10907	Iterate over the given collection .
10908	Do the iteration .
10909	Get the track information from the event model .
10910	Export the data to a HashMap .
10911	Import a resource from the given resource model .
10912	Returns the error image for the given lines .
10913	Get an image from the given URL .
10914	Gets a JSON result from the given URL .
10915	Reverse the source map to the target map .
10916	Performs a Cartesian product .
10917	Start the daemon .
10918	Return this object to the pool .
10919	Creates an EndedEvent .
10920	Returns the current track info .
10921	Updates the current playback mode with a new one .
10922	Shuffles the queue of tracks .
10923	Verifies that the given capabilities can be played .
10924	Export the data .
10925	Escapes a string for use in an XML document .
10926	Called when a challenge has been received .
10927	Returns the JSON representation of this object .
10928	Run the event loop .
10929	Handles an event .
10930	Join all queues .
10931	Sets the value of a property .
10932	Removes the property with the given key .
10933	Adds a principal to the list of principals .
10934	Removes a principal from the list of principals .
10935	Called when the root window is closed .
10936	Called when the user enters a presence event .
10937	Called when an event is fired .
10938	Returns true if the resource is permanent .
10939	Sets the name of this roster .
10940	Returns true if the specified key is present in this map .
10941	Returns true if the set contains the specified value .
10942	Associates the specified value with the specified key .
10943	Clears the hash table .
10944	Returns the hash code for the given key .
10945	Checks if two keys are equal .
10946	Checks if two values are equal .
10947	Ensures that the array has the given capacity .
10948	Calculates a new capacity based on the proposed capacity .
10949	Creates an iterator over the entries in this map .
10950	Reads a row from a binary stream .
10951	Registers the module .
10952	Initializes this add - on with the given context .
10953	Notifies all connection listeners that the reconnection has failed .
10954	Notifies all connection listeners that the connection should be re - established .
