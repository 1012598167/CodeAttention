0	Emit the given value to the downstream .
1	Wraps an ObservableSource into an Observable .
2	Returns an observable that sorts the items according to the provided comparator .
3	Observe the given ConnectableObservable on the given Scheduler .
4	Creates a new unicast processor .
5	Creates a new unicast processor .
6	Try scalar x map subscribe .
7	Scalar x map flowable .
8	Reset the internal state .
9	Creates an Maybe from a CompletableSource .
10	Creates an Maybe from a SingleSource .
11	Retry the given number of times if the predicate evaluates to true .
12	Throws a NullPointerException with the specified message if the object is null .
13	Returns an identity function .
14	Creates a callable that returns the given value .
15	Creates a function that just returns the given value .
16	Returns a function that casts the given value to the given target type .
17	Creates a new unicast subject .
18	Creates a new unicast subject .
19	Creates a new unicast subject .
20	Creates a new unicast subject .
21	Get the error .
22	Blocks until an error is encountered or the timeout is reached .
23	Await for the result of the operation to complete .
24	Drains the given queue until the queue is full .
25	Request the given number of times for the given subscription .
26	Post complete .
27	Completes the operation .
28	Returns the value of the notification .
29	Returns the error of the notification .
30	Validates that the upstream and the next disposable are disposed .
31	Sets the next disposable to the given AtomicReference and notifies the observer that the next disposable has been disposed .
32	Validates the subscription .
33	Sets the next subscription to the upstream subscription .
34	Add two values to the end of the array .
35	Multiply a by b .
36	Adds n to the requested set .
37	Convert an exception to a NullPointerException .
38	Adds an object to the end of the list .
39	Shuts down the pool .
40	Creates a new thread pool .
41	Sets the subscription .
42	Emit loop .
43	Wrap the given exception if it is an Error or a RuntimeException .
44	Flattens an exception into a list .
45	Throw an exception if it is not already an exception .
46	Removes all resources from the set .
47	Returns the number of resources in this set .
48	Try to map an ObservableSource to an ObservableSource .
49	Returns an observable that maps the input value to the result of applying the given function to the result .
50	Returns true if the given subscriber is accepted .
51	Accept all of the elements in this queue .
52	Starts the queue .
53	Starts the queue with an empty subscription .
54	Adds a new item to the queue .
55	Gets the resource .
56	Completes the observer with the given value .
57	Sends an error event to the downstream .
58	Completes the task .
59	Concatenates this flowable by applying the provided function to each element of this flowable by applying the provided function to each element of this flowable .
60	Concatenates this flowable by applying the provided function to each element of this flowable .
61	Sorts the contents of this flowable according to the provided comparator .
62	Wait for the specified number of milliseconds .
63	Requests the given number of bytes to be received .
64	Adds a publish disposable to the list of subscribers .
65	Removes the given PublishDisposable from the queue .
66	Observe the given ConnectableFlowable using the given Scheduler .
67	Parse the annotations and return an HttpServiceMethod .
68	Sets the delay in milliseconds .
69	Creates an error response .
70	Calculates the delay in milliseconds .
71	Creates the sample data .
72	Returns the HttpMethod object for the given HTTP method .
73	Search for a user in the directory .
74	Encodes the given raw password .
75	Returns whether the given raw password matches the given encoded password .
76	Perform version checks .
77	Returns whether or not checks should be disabled .
78	Returns the Spring version .
79	Add an attribute exchange configurer .
80	Creates an OAuth2 client .
81	Creates a new OAuth2ResourceServerConfigurer .
82	Returns the channel security registry .
83	Compares the specified attribute with the specified value .
84	Retrieve an entry from the directory .
85	Search for a single attribute value .
86	Search for multiple attributes .
87	Search for a single entry .
88	Build the search controls .
89	Lookup the primary keys .
90	Build a PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails object .
91	Creates the embedded server .
92	Create servlet - api - provision filter .
93	Creates the JAAS API filter .
94	Creates a new type resolver builder with the default typing .
95	Register the Spring Security Filter chain .
96	Get the token for a given series .
97	Gets the list of grants for the given attributes .
98	Creates a new Cipher with the specified algorithm .
99	Override afterPropertiesSet to set the authentication manager .
100	Checks if the request requires authentication .
101	Checks if the pre - authenticated principal has changed .
102	Authenticate the request .
103	Check the content length .
104	Maps a collection of authorities to a set of authorities .
105	Sets the login processing URL .
106	Update authentication defaults .
107	Update access defaults .
108	Maps a password value to a string .
109	Extract the remember me cookie from the request .
110	Encodes the given cookie tokens into a base64 encoded string .
111	Adds a cookie to the response .
112	Resolve the argument .
113	Extract the query string from the request .
114	Gets the service port from the URL .
115	Returns the principal of the current user .
116	Invalidate the http session and clear the context .
117	Authenticate the given authentication .
118	Build the provider URL .
119	Sets the context environment properties .
120	Returns the redirect URL .
121	Write the ui suffix to the output stream .
122	Initializes the UserDetailsService .
123	Gets the UserDetailsService .
124	Adds the PKCE parameters to the given attributes and additional parameters .
125	Require authentication .
126	Service ticket request .
127	Proxy ticket request .
128	Checks if the current user is authenticated .
129	Checks if the request is a proxy receptor request .
130	Creates a security expression root .
131	Gets the JWKSet .
132	URL encodes the given value .
133	Get the webSphere groups based granted authorities .
134	Load user details by assertion .
135	Gets the pre - authenticated principal .
136	Concatenates the given arrays .
137	Creates a sub - array from a byte array .
138	Returns the list of granted authorities for the given attributes .
139	Pre - processes the attributes2grantedAuthoritiesMap .
140	Gets the collection of Granted Authorities for the given value .
141	Adds a collection of GrantedAuthority objects to the given collection .
142	Gets the pre - authenticated J2EE principal .
143	Returns the shared object for the given type .
144	Build the HTTPS redirect URL for the given request .
145	Invokes the interceptor and returns the result .
146	Returns the name of the given role .
147	Returns an array of roles that contains any of the given roles .
148	Process auto - login cookie .
149	This method is called when the login is successful .
150	Attempt to switch to a user .
151	Attempt to exit the current user .
152	Sets the exit user URL .
153	Display public index
154	Creates a filter chain for web security .
155	Decodes the given token and validates it .
156	Authorize using access expression .
157	Authorize using url check .
158	Convert a JWT to a collection of Granted Authorities .
159	Generates a new CSRF token .
160	Display admin page
161	Display the add permission page for a contact
162	Add a permission to a contact .
163	Delete a permission from a contact
164	Returns the role if the defaultRolePrefix is null or empty .
165	Creates a new user details resource factory bean from the given string .
166	Returns the values of the attribute with the given name .
167	Returns the first value of the specified attribute .
168	Encodes a CharSequence into a byte array .
169	Decodes a byte array into a String .
170	Lookup parameter names .
171	Adds a new contact .
172	Find all attributes that have been specified against the target class .
173	Adds a secure method .
174	Get all config attributes .
175	Returns true if the method name matches the mapped name .
176	Configure any request .
177	Handle bind exception .
178	Returns a random contact
179	Removes the authentication attributes from the session .
180	Locates a field on a class .
181	Create service url .
182	Create redirect url .
183	Extract the SHA prefix .
184	The pre - authenticated entry point .
185	Check the filter stack for duplicate filters .
186	Returns an array of all registered types .
187	Extract the cause of the given throwable .
188	Register the access manager .
189	Convert a collection of authorities to a set of authorities .
190	Checks if two bytes are equal .
191	Sets the default failure URL .
192	Set the resolve hidden inputs function .
193	Build the request url .
194	Checks if the given URL is absolute .
195	Returns the attribute list for the given identifier .
196	Convert the identifier from the result set .
197	Creates the entries for the given ACL .
198	Inserts an object identity into the database .
199	Update the ObjectIdentity of the ACL .
200	Saves the request to the session .
201	Returns a server web exchange matcher for the given path patterns .
202	Returns a matcher that matches any web exchange .
203	Creates a new encryptor for the given password and salt .
204	Creates a text encryptor for the given password and salt .
205	Queryable text encryptor .
206	Write headers to the response .
207	Determine the target URL .
208	Determine the target URL from the request .
209	Sets the targetUrlParameter .
210	Get the directory with the immediate parent populated .
211	Build a DN based on the given username .
212	Creates the shared objects .
213	Sets the login . config . url property if not already set .
214	Returns the current date .
215	Internal parse date .
216	Updates the cache .
217	Sets the details of the authentication request .
218	Returns the security name for the given subject .
219	Returns the list of groups for the given security name .
220	Change password .
221	Build the group DN .
222	Throw an exception if the maximum number of allowable sessions exceeded .
223	Copies the details from the source Authentication to the destination Authentication .
224	Returns the list of filters that match the given request .
225	Get a list of filters for the given url
226	Returns the application context for the given page context .
227	Returns the full DN .
228	Updates the session attributes .
229	Creates a basic authentication scheme .
230	Adds a list of filters to RestAssured .
231	Adds a filter to the list of filters .
232	Creates a basic authentication scheme .
233	Creates an NTLM authentication scheme .
234	Creates a form authentication scheme .
235	Creates a proxy for the given URI .
236	Prints the response body to the given output stream .
237	Creates a new RestAssuredConfig with the given redirect config .
238	Sets the default query parameter charset .
239	Creates a new ObjectMapperConfig with the specified default object mapper type .
240	Sets the jaxb object mapper factory .
241	Creates a new RestAssuredMockMvcConfig with the specified log config .
242	Sets the session config .
243	Creates a new instance with the specified object mapper config .
244	Creates a new RestAssuredMockMvcConfig with the specified JsonConfig .
245	Creates a new RestAssuredMockMvcConfig with the specified XML configuration .
246	Creates a new instance with the specified encoder config .
247	Creates a new RestAssuredMockMvcConfig with the specified header config .
248	Creates a new RestAssuredMockMvcConfig with the specified AsyncConfig .
249	Creates a new RestAssuredMockMvcConfig with the specified MockMvcConfig .
250	Sets the multi part config .
251	Returns a new instance with the specified param config .
252	Returns a new instance with the specified matcher configuration .
253	Allow all hostnames .
254	Declares the given namespaces .
255	Sets the declared namespace .
256	Sends a request to the server .
257	Sets the default request headers .
258	Set the default proxy for this connection .
259	Sets the name of the control .
260	Adds a header to the request .
261	Set basic credentials .
262	Set NTLM credentials .
263	Creates a new Headers object with the given header and additional headers .
264	Resets the instance to the initial state .
265	Adds a header to the response .
266	Build the response .
267	Returns a new instance of the DetailedCookieMatcher with the specified value .
268	Matches a cookie s comment .
269	Matches a cookie s expiry date .
270	Returns a new matcher that matches cookies with the specified domain .
271	Returns a new matcher that matches cookies with the given path .
272	Matches a cookie if it is secured .
273	Returns a new matcher that matches cookies that are HTTP - only .
274	Returns a new matcher that matches cookies with the specified version .
275	Returns a new matcher that matches cookies with the specified max - age .
276	Expect the given header name to match the expected value .
277	Expect a header .
278	Expect a cookie to be set .
279	Returns a new proxy specification with the given host .
280	Returns a new instance with the specified number return type .
281	Sets the default parser type .
282	Returns a new instance of LogConfig with the default configuration .
283	Enable logging of request and response if validation fails .
284	Creates an HTTP request .
285	Sets the default boundary .
286	Adds an attribute to the request .
287	Adds a header to the request .
288	Adds a multi part to the request .
289	Add additional result handlers .
290	Sets the parameter with the given name and value .
291	Adds the given HTTP client parameters to this configuration .
292	Creates a new HttpClientConfig with the specified HttpClientFactory .
293	Sets the HTTP multipart mode .
294	Returns the result of a GET request .
295	Returns the integer value associated with the given path .
296	Returns the byte value at the given path or null if the path does not exist .
297	Returns the short value associated with the given path or null if the path does not exist .
298	Returns the float value associated with the given path .
299	Returns the double value stored at the given path .
300	Returns the long value associated with the given path .
301	Returns a list of objects from the given path .
302	Returns the map at the given path .
303	Returns the object at the given path .
304	Sets the body of the request .
305	Adds a cookie to the request .
306	Adds a parameter to the request .
307	Adds a parameter to the request .
308	MockMvcParamConfig with custom update strategy .
309	Logs the response to the given stream if the matcher matches .
310	Creates a new Cookies instance with the given additional cookies .
311	Clean up the backing map for collected state .
312	Index the bindings .
313	Returns the binding for the given key or null if no such binding exists .
314	Convert a constant string binding .
315	This method is called when a binding is failed .
316	Removes a failed JIT binding .
317	Returns the internal dependencies of the given binding .
318	Creates an uninitialized binding .
319	Injects all parameters from the given parameter injectors .
320	Binds the injector to the injector state .
321	Binds the logger to the injector .
322	Check for misplaced binding annotations .
323	Returns true if a overrides b .
324	Initializes the delegate .
325	Returns the provider type .
326	Resolve all of the given types .
327	Canonicalizes the given type literal .
328	Prepare built - in converters .
329	Canonicalize the given class loader .
330	Checks if the class loader has the same version of cglib .
331	Checks if the given member is publicly callable .
332	Fixes annotations .
333	Request injection for the given instance .
334	Validates all of the pending injections .
335	Creates a new instance of this class .
336	Returns the request dispatcher for the given servlet request .
337	Scope the given factory using the given Scoping .
338	Make the given Scoping injectable .
339	Normalize the given path .
340	Generates an annotation for the given annotation type .
341	Checks if the given annotation is retained at runtime .
342	Finds the scope annotation .
343	Returns the key for the given type and annotation .
344	Returns the name of the given key .
345	Initializes the delegate provider .
346	Adds the direct type binding .
347	Get the constructor injector from the cache .
348	Checks if the interceptor class has a scope annotation .
349	Creates a new real map binder .
350	Returns the key for the new value .
351	Creates a new instance of the given type .
352	Write replace .
353	Creates a new module from the given module .
354	Returns a collection of all assisted methods .
355	Checks if the type is not specified .
356	Checks if the constructor has matching parameters .
357	Returns the set of dependencies for the given constructor and implementation .
358	Removes assisted dependencies from a set of dependencies .
359	Checks if the dependency set is valid for optimized assisted inject .
360	Create a binding from a new injector .
361	Invokes a method on this injector .
362	Returns an error message if there is no implementation for the given key .
363	Creates a new multibinder and installs it to the given key .
364	Returns the key for the new item .
365	Returns the next filter that matches the given request .
366	Checks if a constructor has at - inject annotation .
367	Gets the internal constructor .
368	Returns the set of internal dependencies .
369	Returns a new Module instance for the given module .
370	Returns the annotation claimed by the scanner .
371	Returns the line number of the given member .
372	Initializes the injector with the given errors .
373	Returns a callable that will continue the execution of the given callable .
374	Transfers a request to the server .
375	Validate and canonicalize the given value .
376	Returns the member injector for the given key .
377	Creates a new instance of the given type with all registered listeners .
378	Returns an immutable list of injectors for the given injection points .
379	Returns a new key for the given type and annotation strategy .
380	Returns a strategy for the given annotation .
381	Creates a strategy for the given annotation type .
382	Prunes the stack trace from the given exception .
383	Returns the source of the binding .
384	Formats a collection of messages .
385	Creates a new message with the given message format and arguments .
386	Creates a new exception message with the given message format and arguments .
387	Creates a new message with the given message format and arguments .
388	Convert an object to an element .
389	Returns true if the given class should be skipped .
390	Creates a stack trace from a list of module class names .
391	Main entry point for jconsole .
392	Pushes a dependency to the stack .
393	Pushes the source object to the stack .
394	Creates a new instance of the given type .
395	Provision the provider .
396	Process a connection event .
397	Add a connection event processor .
398	Get the result of a future task .
399	Throws the given exception if it is unchecked .
400	Register a processor for the given command code .
401	Register the default processor .
402	Returns the processor for the given command code .
403	Try to get the url .
404	Decodes the protocol code .
405	Returns a map of all connections in the pool .
406	Scan the pool .
407	Get a connection from the pool and create it if it doesn t exist .
408	Create a connection pool and heal if needed .
409	Remove a task from the pool .
410	Heal connection pool if needed .
411	Creates the connection pool .
412	Close the connection to the given address .
413	Close the connection .
414	Close the connection .
415	Sets the value of the specified attribute if it is not already present .
416	Register user processor .
417	Register user processor .
418	Dispatch to user processor .
419	Deserialize a RpcRequestCommand .
420	Pre - process remoting context .
421	Log the request timeout .
422	Debug log .
423	Process the message .
424	Invokes the given request with the given callback .
425	Sends a remoting command to the remote peer .
426	Convert a bit set to a byte .
427	Convert an integer to a bit set .
428	Add a reconnect task .
429	Stop the heal connection .
430	Convert a request to a remoting command .
431	Filter the given list of connections .
432	Monitor connection pools .
433	Close the last select connection and add it to the list of serviceOffConnections
434	Get a boolean property .
435	Log an info message .
436	Checks if the request timeout has been set .
437	Returns the user processor for the given class .
438	Get a random connection from the list .
439	Returns the value associated with the given key or the default if not found .
440	Returns the value of a property .
441	Resolve the response object .
442	Converts a response command into a response object .
443	Converts a response command to an exception .
444	Returns the detail error message .
445	Creates a server exception .
446	Print connection trace log .
447	Creates a new event loop group .
448	Parse remote address .
449	Parse the local address .
450	Parse the remote IP address .
451	Parse the remote host name .
452	Parse the local IP address .
453	Parse the remote port .
454	Parse the local port from the given channel .
455	Parse socket address to host ip .
456	Adds a connection to the pool .
457	Remove a connection and try to close it .
458	Get a connection from the pool .
459	Register a custom serializer for a given class .
460	Returns the custom serializer for the given class .
461	Register a custom serializer for the given command code .
462	Returns the custom serializer for the given command code .
463	Starts the connection monitor .
464	Check if the remote address is connected .
465	Initialize write buffer water mark .
466	Returns a new FramedataImpl1 for the given opcode .
467	Batch writes to the socket .
468	Sets the code of the close frame .
469	Validate UTF8 .
470	Updates the payload .
471	Checks if the requested protocol is one of the known protocols .
472	Checks the length of a single frame .
473	Checks if the maxpacketsize is less than the realpacketsize .
474	Generate the final key .
475	Process a continuous and non - fin frame .
476	Process a binary frame .
477	Logs the runtime exception during onWebsocketMessage .
478	Process a text frame .
479	Process a continuous frame .
480	Process a continuous frame that is not finished .
481	Process a closing frame .
482	Checks if the buffer limit is reached .
483	Get the payload from the byte buffer list .
484	Returns the total size of all the buffers in the list .
485	Translate handshake http server response .
486	Translate HTTP status code and http status message .
487	Decodes frames from the given socket buffer .
488	Close connection due to wrong handshake .
489	Close the connection due to a server error .
490	Generate HTTP response due to error .
491	Sends text to the client .
492	Resets the connection .
493	Connect to the server .
494	Get the port from the URI .
495	Sends the handshake to the server .
496	Set the connection lost timeout .
497	Stop the connection lost timer .
498	Start the connection lost timer .
499	Restarts the connection lost timer .
500	Execute connection lost detection .
501	Cancels the connection lost timer .
502	On websocket handshake received as server .
503	Sends a ping frame .
504	Closes all connections and closes the selector thread .
505	Returns the port of the server .
506	Reads additional data from the input queue .
507	Accept a new connection .
508	Reads data from the socket .
509	Writes data to the socket .
510	Setup the selector and server thread .
511	Ensure that a single thread can be started .
512	Shuts down the server .
513	Returns the socket associated with the given connection .
514	Broadcasts data to all clients .
515	Broadcast the given text to all registered clients .
516	Send data to all registered clients .
517	Fill the frames map for the given draft .
518	Transfer a ByteBuffer to another ByteBuffer .
519	Start the JPA API .
520	Returns the entity manager with the given name .
521	Adds the given block to the transaction .
522	Convert an array of arguments to a scala buffer .
523	Wrap the given arguments into a list if necessary .
524	Returns the value for the given key in the given language .
525	Returns the value for the given key in the given language .
526	Returns true if the given key is defined at the given language .
527	Returns the preferred messages for the given languages .
528	Returns the preferred messages for the given request .
529	Sets the language of the given result .
530	Returns a copy of this builder with the specified modules .
531	Injects the given modules into this instance .
532	Creates a new instance with the given bindings .
533	Overrides this builder with the specified modules .
534	Overrides this instance with the specified modules .
535	Overrides this instance with the specified bindings .
536	Disable one or more modules .
537	Call the method with the given context .
538	Call the method with the given request .
539	Returns the existing file for the given path .
540	Returns the binding in the specified scope .
541	Creates a new tuple with the given elements .
542	Returns a new tuple consisting of 5 elements .
543	Converts an execution context to an executor .
544	Creates a new JPAConfig with the given name and unit name .
545	Creates a new JPAConfig instance with the given parameters .
546	Creates a new JPAConfig from a map of persistence units .
547	Creates a flow from a string .
548	Creates a flow from JSON data .
549	Adds a constraint validator to the factory .
550	Creates a new instance of a constraint validator .
551	Returns the first accessible method that matches the given method name and parameter types .
552	On client error .
553	On bad request .
554	On forbidden .
555	Handle not found response .
556	Handle server error .
557	Logs a server error .
558	Converts the given throwable to a useful exception .
559	On dev server error .
560	On development error .
561	Creates a build doc handler from a list of files and directories .
562	Creates a build doc handler from a directory .
563	Creates a build doc handler from a directory and a jar file .
564	Creates a build doc handler from a directory and a jar file .
565	Creates a build doc handler from a jar file .
566	Consumes data from the stream .
567	Creates an entity from the given content .
568	Creates a new HttpEntity from the given content .
569	Creates a chunked HTTP entity from the given data .
570	Returns a JSON response with the given status code and content .
571	Sends a JSON response with the given status code and content .
572	Creates a new result with the given status code and content .
573	Sends an HTTP response with the given status code and content length .
574	Returns a response with the given status code and content .
575	Find user by id .
576	Returns the preferred language for the given languages .
577	Returns a unique call .
578	Returns a new call with the specified fragment .
579	Returns the absolute URL of the given request .
580	Returns the web socket URL for the given request .
581	Returns a connection function that runs the given connection runnable .
582	Creates a connection function .
583	Creates a new server for the given mode and port .
584	Convert an object to JSON .
585	Convert a JSON object to an instance of the given class .
586	Parse the given string into a JsonNode .
587	Parse an input stream into a JsonNode .
588	Returns the path relative to the target path .
589	Canonicalize the given URL .
590	Convert a set of constraints to a list of displayable constraints .
591	Gets the displayable constraint .
592	Wait for the given amount of time for the given completion stage to complete .
593	Checks if the given arrays are assignable .
594	Parse a CRON expression and return the next valid time after it .
595	Returns the next interval for the given cron pattern .
596	Creates a new AhcWS client .
597	Creates a new instance of the GuiceApplicationBuilder .
598	Render a todo page .
599	Sets the value for the given key in the session .
600	Adds a flash key - value pair to the session .
601	Returns a binding key that is qualified with the given instance .
602	Returns a binding key that is qualified with the given annotation .
603	Sets the type of this binding to the given type .
604	Returns a binding to the given provider .
605	Sets the value of the underlying binding to the given instance .
606	Returns the binding for the given key .
607	Convert this binding to a provider .
608	Returns all available languages for the given application .
609	Returns the preferred language for the given languages .
610	Creates an evolutions reader from a map of evolutions .
611	Creates an evolutions reader from an array of evolutions .
612	Cleanup evolutions .
613	Adds a configuration loader to the application .
614	Adds a module loader to the application .
615	Loads the given modules into the application .
616	Loads the given modules into the application .
617	Load the given modules into the application .
618	Loads the given bindings into the application .
619	Creates a new instance of GuiceApplicationBuilder .
620	Encodes the given cookie .
621	Returns the current EntityManager bound to this thread .
622	Returns the current entity manager stack .
623	Push or pop an EntityManager from the stack or throw an exception if none was set .
624	Apply a splitter to a flow .
625	Splits a flow into two using the merge strategy .
626	Creates a flow from an actor ref .
627	Convert error arguments to an unmodifiable list .
628	Fill the form with the given value .
629	Returns all global errors .
630	Returns a JSON representation of the errors .
631	Returns the value for the given key .
632	Fill the form with the given value .
633	Parse the given text into an object of the specified type .
634	Parse the given text into an instance of the given field .
635	Print the given object to the console .
636	Prints the value of the given field .
637	Prints the given object to a String .
638	Register an optional converter .
639	Register a formatter for the given type .
640	Register an annotation formatter .
641	Encodes the given cookie .
642	Returns a list of nodes matching the given path .
643	Convert java . util . List to scala . collection . immutable . Seq
644	Convert an array to a sequence .
645	Returns an immutable sequence of the elements in the given array .
646	Creates a new acceptor that accepts JSON messages .
647	Accept or result flow .
648	Try to make sure that the given object is accessible .
649	Calculates the promotion cost for a primitive type .
650	Returns the total cost of the transformation for the given executable .
651	Get the object transformation cost .
652	Returns the value for the given key in the current language .
653	Get a list of messages .
654	Creates a new database with the given driver url and configuration .
655	Creates a new ParallelSorter with the given arrays .
656	Quick sort .
657	Merge sort .
658	Invokes the protected method .
659	Casts a numeric type to another type .
660	Loads the argument at the given index .
661	Emit a field instruction .
662	Adds zero or null to the stack .
663	Unbox a primitive type or zero .
664	Processes an array .
665	Compare two null values .
666	Resolve all bridges .
667	Returns a list of all methods declared in the given superclass and interfaces .
668	Filter constructors by visibility .
669	Sets the superclass of this class .
670	Get a field .
671	Adds a method to the list of methods .
672	Returns the cardinality of this set .
673	Sets the naming policy .
674	Find methods by names and descriptors .
675	Resolve a child path .
676	Read a string from a file .
677	Sets the host of the request .
678	Creates a new request with the given method and destination .
679	Creates a CONNECT request .
680	Creates a GET request .
681	Creates a new HTTP POST request .
682	Creates a PUT request .
683	Creates a PATCH request .
684	Creates a DELETE request .
685	Creates a HEAD request .
686	Creates a new HTTP TRACE request .
687	Creates an OPTIONS request .
688	Sets the request path .
689	Add cookies to the request .
690	Add a query parameter .
691	Adds the query parameters to the request .
692	Sets the query string .
693	Returns the query string .
694	Returns the host URL .
695	Set basic authentication .
696	Sets the host header .
697	Creates a new request buffer .
698	Send the request and receive the response .
699	Removes the given range from the given handler .
700	Returns the length of the exception table .
701	Collect all action interceptors .
702	Collect all action filters .
703	Collect all action results .
704	Collect all action runtimes .
705	Set a simple property .
706	Returns the value of the property with the given name .
707	Extract this reference from a property name .
708	Get the writer .
709	Set a reference to an object .
710	Returns the object reference for the given name .
711	Lookup an object reference .
712	Returns the entity descriptor for the given table reference .
713	Find table descriptor by column ref .
714	Returns the alias for the given table reference .
715	Register a table reference .
716	Lookup table reference .
717	Register a hint .
718	Serializes the given value .
719	Inject attributes from servlet request .
720	Inject parameters from servlet request .
721	Inject uploaded files .
722	Convert a property name to a column name .
723	Convert a column name to a property name .
724	Convert a column name to a column name .
725	Stores the value to the given PreparedStatement .
726	Prepare get value .
727	Returns a set of all the wrappers .
728	Resolve the given wrapper class .
729	Creates a new wrapper instance .
730	Converts a path to a system path .
731	Get the path of a file .
732	Split a filename into its components .
733	Returns the relative path to the target file .
734	Register a madvoc component .
735	Register an action config .
736	Starts the Madvoc application .
737	Configure default values .
738	Register Madvoc components .
739	Exclude the specified jars from scanning .
740	Include the specified jars .
741	Include the specified rules entries .
742	Exclude the given entries from the scan .
743	Scan a jar file .
744	Scan the class path .
745	Returns the bytecode signature of the given type .
746	Scans the given paths for classes .
747	Scan the jar files and scan the classpath .
748	Creates a new JtxTransaction .
749	Get default or scope type .
750	Gets or creates a new instance of the given scope type .
751	Creates a new scope and passes it to the given consumer .
752	Decodes a string into a byte array .
753	Prepare CSRF token .
754	Assure the size of the set is at least maxTokensPerSession .
755	Checks the CSRF token .
756	Creates a new BeanCopy from the given object .
757	Creates a new instance of the BeanUtilBean .
758	Visit a property .
759	Register the table reference .
760	Resolve a scope .
761	Register a petite bean .
762	Register a bean .
763	Removes all beans of the given type .
764	Resolve bean names for a given type .
765	Register a petite constructor injection point .
766	Register a petite property injection point .
767	Register a petite set injection point .
768	Register a Petite method injection point .
769	Register Petite init methods .
770	Register petite destroy methods .
771	Register a petite provider .
772	Register a petite provider .
773	Iterate through all beans of the given type .
774	Define parameters .
775	Intercepts an action request .
776	Resolve the Java version .
777	Push an int to the stack .
778	Checks that the given argument index is valid .
779	Advice field name .
780	Advice method name .
781	Load special method arguments .
782	Load static method arguments .
783	Load virtual method arguments .
784	Load a method argument .
785	Stores a method argument .
786	Prepare the return value .
787	Creates a method signature key .
788	Creates a new array instruction .
789	Stores the given component type into an array .
790	Extract encoding from content - type .
791	Checks if the given flags are empty .
792	Resolve auth bearer token .
793	Require authentication .
794	Prepare download response .
795	Prepare the response .
796	Returns all cookies with the given name .
797	Read request body from reader .
798	Read request body from stream .
799	Stores the context path in the request and the servlet context .
800	Stores the context path .
801	Checks if the request contains a GET parameter .
802	Prepare parameters .
803	Copy all parameters from the servlet request to the servlet request attributes .
804	Invokes the body method .
805	Renders the body of the given fragment .
806	Renders the given body into a String .
807	Invoke all init methods with the given invocation strategy .
808	Call destroy methods .
809	Creates a new bean instance .
810	Inject the parameters to the bean .
811	Rewrite the action path .
812	Adds a header to the response .
813	Adds the given value to the given map .
814	Put a base property .
815	Put a profile property .
816	Get the profile property .
817	Resolve macros .
818	Extract the properties from the properties file .
819	Read the next 4 bytes from the given byte array .
820	Hash a password with a salt .
821	Checks if the password is correct .
822	Copies all bytes from the stream to the given output stream .
823	Copies max bytes from the stream to the given output stream .
824	Parse an action .
825	Resolve the action config .
826	Detects and registers the action alias .
827	Read action interceptors .
828	Read action filters .
829	Read the package action path .
830	Read method action path .
831	Parse method alias .
832	Creates an action runtime .
833	This method is called before the response is committed .
834	Apply the advice to the target class .
835	Inject target into proxy .
836	Visit an annotation .
837	Resolve the real name for the given JSON name .
838	Resolve a json name .
839	Lookup the type data for the given type .
840	Lookup the type data for the given type .
841	Finds the subtype type data for the given class .
842	Resolve a JSON name .
843	Resolve a real name .
844	Returns the content of the file .
845	Copy bootstrap methods .
846	Set the major version and class name .
847	Put the constant pool into the given byte vector .
848	Puts the bootstrap methods into the given byte vector .
849	Add a constant field reference .
850	Add a constant method reference .
851	Adds a constant member reference to the constant pool .
852	Adds a constant member reference .
853	Adds a constant to the constant pool .
854	Adds a constant integer or float .
855	Adds a constant to the constant pool .
856	Adds a constant long or double .
857	Adds a constant to the constant pool .
858	Adds a constant name and type .
859	Adds a constant to the constant pool .
860	Adds a constant UTF - 8 .
861	Add a constant method handle to the constant pool .
862	Adds a constant method handle .
863	Add a dynamic constant .
864	Add a constant invoke dynamic method .
865	Adds a constant to the constant pool .
866	Adds a constant dynamic or invoke dynamic reference .
867	Adds a constant to the constant pool .
868	Adds a constant UTF - 8 reference .
869	Adds a bootstrap method .
870	Adds a merged type to the type table .
871	Returns the hash value of the given name .
872	Removes all entries from this map .
873	Returns all values with the given name .
874	Returns an iterator over the entries in this map .
875	Returns a list of all entries in this map .
876	Grows the buffer by the given capacity .
877	Appends a CharSequence to this FastCharBuffer .
878	Visit an annotation .
879	implements the visitor to create the proxy methods .
880	Creates the first chain delegate .
881	Creates the method for the first chain delegate .
882	Parse a path .
883	Push a field to the end of the path .
884	Configure servlet context .
885	Execute the method .
886	Returns the list of all field descriptors .
887	Creates a bean definition for registration .
888	Convert JtxTransactionMode to DbTransactionMode .
889	Read a property from the source object .
890	Adds all entries from the given map to this map .
891	Appends the given buffer to the end of this buffer .
892	Writes the contents of this list to the given writer .
893	Writes the contents of this list to the given output stream .
894	Writes the contents of this list to the given output stream .
895	Returns the value of the specified key or null if the key does not exist .
896	Returns the integer value associated with the given key .
897	Returns the long value associated with the given key .
898	Returns the double value associated with the given key .
899	Returns the value associated with the given key or null if the key does not exist .
900	Returns the value associated with the given key .
901	Adds a key - value pair to the JSON object .
902	Use a folder .
903	Receives all messages matching the given filter .
904	Updates the flags of the received email .
905	Close the given folder if it is open .
906	Lookup a named parameter .
907	Returns the alias for the given target .
908	Validate the action .
909	Adds a Violation to the validator .
910	Sets the mime type .
911	Set the file name to be downloaded .
912	Sets the target stream .
913	Sets the target class name .
914	Sets the target class .
915	Process the target class .
916	Creates the proxy .
917	Define the target class .
918	Creates a new instance of the Proxetta class .
919	Dump the class in the debug folder .
920	Sets the user s email address .
921	Add a recipient address .
922	Sets the recipient address .
923	Set the recipient address .
924	Set the cc address .
925	Sends a plain text message .
926	Sends an HTML message .
927	Adds a header to the response .
928	Returns the value of a system property .
929	Returns the value of a boolean property .
930	Returns the value of the given parameter as an integer or the default value if the parameter is not found .
931	Get a long property .
932	Returns the resolved parameters for this method .
933	Serialize a key - value pair .
934	Lookup an alias .
935	Resolve an alias .
936	Resolve the result path .
937	Resolve the result path string .
938	get the last index of the last slash .
939	find the last dot after a slash
940	Returns the index of the last dot after the last slash .
941	Removes the last camel word from the given name .
942	Resolve the schema name .
943	Resolve column descriptors .
944	Initializes the threefish key .
945	Mix the elements of x into y .
946	Destructively demix a vector .
947	Update the key schedule .
948	Initializes this key with the given key message and tweaks .
949	Encrypt a block .
950	Convert a byte array to a long array .
951	Removes any bounding characters from a string .
952	Returns the path to the method .
953	Compress the given file .
954	GZip a file .
955	Ungzip the given file .
956	Returns a list of all the entries in the given zip file .
957	Unzip the given zip file to the given destination directory .
958	Adds a file to a zip file .
959	Adds a file to a zip file .
960	Returns the field descriptor for the given name .
961	Returns the property descriptor for the given name .
962	Set the bundle name for this request .
963	Set the session locale .
964	Gets the session locale .
965	Filter parameters for bean name .
966	Adds a profile to the list of profiles .
967	Read a little - endian 32 - bit long from the buffer at the given offset .
968	Read the data from an input stream .
969	Read a label .
970	Returns the bytecode offset of a type annotation .
971	Reads the element values .
972	Read the verification type information .
973	Read bootstrap methods attribute .
974	Inspect constructors .
975	Returns the ctor descriptor for the given arguments .
976	Gets the request map .
977	Creates the request map .
978	Convert an array to a long array .
979	Initialize DecoraManager and DecoraParser .
980	Register a file consumer .
981	Add a search path .
982	Add a search path .
983	Include the given patterns .
984	Exclude the given patterns .
985	Adds a path to the list of paths .
986	Returns a list of all files in the directory .
987	Initializes the list of files and folders .
988	Returns an iterator over all files in the directory .
989	Resolve bean wiring mode .
990	Resolve the bean name .
991	Returns the output stream .
992	Get the output stream .
993	Returns the class name of this type .
994	Get the constructor descriptor .
995	Get method descriptor .
996	Get method descriptor .
997	Appends the descriptor .
998	Returns the size of this array .
999	Returns the number of arguments and return sizes for the given method descriptor .
1000	Mark this transaction as rollback only .
1001	Commit or rollback the transaction .
1002	Rollback all resources .
1003	Request a resource .
1004	Pop a name from the stack .
1005	Write a string .
1006	Write a unicode character .
1007	Writes a char sequence to the JSON stream .
1008	Sets the parsing error log level .
1009	Start a region .
1010	Checks if the value is contained in the include string .
1011	Register a pseudo function .
1012	Lookup a pseudo function .
1013	implements the visitor to create the proxy class .
1014	Visit an annotation .
1015	Creates the static init block .
1016	Creates the proxy constructor .
1017	Process super methods .
1018	Returns the index of the last element in the range .
1019	Adds the prefix and suffix to the given string .
1020	Replace ASM instructions .
1021	Get the attribute prototypes .
1022	Register default types .
1023	Register a type .
1024	Lookup the SQL type for the given class .
1025	Lookup SQL type .
1026	Creates a SOCKS4 proxy .
1027	Creates a SOCKS5 proxy .
1028	Creates a new HTTP proxy .
1029	Returns the total number of thread transactions .
1030	Returns the number of threads with the given status .
1031	Associate a transaction with the current thread .
1032	Checks if the destination mode is compatible with the source mode .
1033	Lookup the resource manager for the given resource type .
1034	Creates the proxy object for the given target class .
1035	Append method name .
1036	Aligns the given text to the left and pads it if necessary .
1037	Converts an object to a pretty string .
1038	Converts a String to a CamelCase String .
1039	Format a paragraph of text .
1040	Convert tabs to spaces .
1041	Escape a Java string .
1042	Unescapes a Java string .
1043	Returns the bean with the given name .
1044	Returns the bean with the given name .
1045	Initializes the bean definition .
1046	Invokes the provider method .
1047	Register a bean with Petite .
1048	Sets the value of a bean property .
1049	Returns the value of a bean property .
1050	Shuts down the cache .
1051	Resolves the parameters of the given method or constructor .
1052	This method is called after the body has been parsed .
1053	Returns the value of the property .
1054	Ends the dom tree .
1055	Creates a new element node .
1056	Adds a tag to the DOM .
1057	Removes the last child node if it is empty .
1058	Returns the query string .
1059	Get the action class name .
1060	Calculates the to value .
1061	Iterate a collection .
1062	Iterate an array .
1063	Replaces all occurrences of sub with with .
1064	Replaces all occurrences of sub with with .
1065	Replaces all occurrences of sub with with .
1066	Replaces the first occurrence of sub with with .
1067	Replaces the first occurrence of sub with with .
1068	Replaces the last occurrence of sub with with .
1069	Replaces the last occurrence of sub with with .
1070	Removes all occurrences of sub from s .
1071	Removes the specified character from the given string .
1072	Checks if all of the given strings are empty .
1073	Checks if all of the given strings are blank .
1074	Convert an object to an array of strings .
1075	Change first character case .
1076	Returns the title of the given string .
1077	Compress the characters in a string .
1078	Checks if the source starts with the subS ignoring case .
1079	Checks if the string ends with the specified character .
1080	Count the number of occurrences of sub in source ignoring case .
1081	Compares two strings .
1082	Returns the index of the first whitespace character in the specified string .
1083	Removes the leading character from the beginning of the given string .
1084	Removes the trailing character from the end of the string .
1085	Removes the specified character from the given string .
1086	Removes the first occurrence of the specified character from the given string .
1087	Removes the first occurrence of the specified character from the given string .
1088	Crop all the given strings .
1089	Removes leading whitespace from the beginning of the given string .
1090	Removes all whitespace from the end of a string .
1091	Returns the index of the first occurrence of the specified region in the specified string .
1092	Joins the given collection with the given separator .
1093	Joins an array of objects using the given separator .
1094	Converts the source string to the new charset .
1095	Checks if the character at the specified index is equal to the specified character .
1096	Surrounds the given string by the given prefix and suffix .
1097	Adds a prefix to a string if it does not already start with the prefix .
1098	Adds a suffix to a string if it doesn t already end with the suffix .
1099	Cut the given string to the first occurrence of the given substring .
1100	Cut the given substring from the beginning of the given string .
1101	Cut the prefix of a string .
1102	Cut the suffix from the end of the string .
1103	Cut a string surrounded by a prefix and suffix .
1104	Inserts the specified string at the specified offset .
1105	Repeat a string .
1106	Reverses a String .
1107	Returns the longest common prefix between two strings .
1108	Finds the common prefix of the given strings .
1109	Shorten a string to the specified length .
1110	Converts a string to upper case .
1111	Removes quotes from a string .
1112	Convert a byte array to a hexadecimal string .
1113	Convert a String to a byte array .
1114	Detect quote character .
1115	Visit a property .
1116	Visit an enum .
1117	Visit an annotation .
1118	Register an entity type .
1119	Register an entity .
1120	Removes an entity from the registry .
1121	Creates an entity instance .
1122	Sets the target interface .
1123	Inject target into wrapper .
1124	Lookup the annotated properties for the given type .
1125	Detect database and configure db om .
1126	Close the output stream .
1127	Writes a single byte to the output stream .
1128	Invalidate the session if it exists .
1129	Returns the name of the message .
1130	Returns the contents of this buffer as a byte array .
1131	Writes the data to a file .
1132	Writes the data to an output stream .
1133	Appends an argument to an argument description .
1134	Prepend an argument to an argument description .
1135	Change the return type .
1136	Sets the text to be stripped .
1137	Register a type converter .
1138	Lookup the converter for the given type .
1139	Returns a list of nodes matching the given CSS query .
1140	Returns a list of nodes matching the given selectors .
1141	Process a list of selectors .
1142	Returns the first node matching the given query .
1143	Walks all descendant nodes and adds them to the result list .
1144	Walks the root node and adds the result to the result list .
1145	Select a node and add it to the result list .
1146	Filter the current results based on a CSS selector .
1147	Unpack c map .
1148	Refill the buffer if necessary .
1149	Get a page of data .
1150	Removes the select part from a SQL statement .
1151	remove from from
1152	remove the last order by
1153	Decodes an HTML string .
1154	Detect entity name .
1155	Build order sql .
1156	Build page sql .
1157	Resolve column names and properties .
1158	Find column descriptor by column name .
1159	Find a column descriptor by its property name .
1160	Returns the property name for the given column name .
1161	Returns the column name for the given property .
1162	Returns the id value of the given object .
1163	Sets the id value of the given object .
1164	Returns the key value for the given object .
1165	Appends the specified string to the end of this band .
1166	Sets the index .
1167	Expand the capacity of the array .
1168	Calculates the length of the array .
1169	Creates the mixing message .
1170	Creates a scoped proxy bean .
1171	Loop the body .
1172	Initialize the map .
1173	Returns true if the file should be ignored .
1174	Use a watch file .
1175	Start polling .
1176	Notify the listeners that a file has changed .
1177	Adds an enumeration to the enumeration list .
1178	Compute the size of the field info .
1179	Puts the field info into the given byte vector .
1180	Creates a new target with the given value and scope data .
1181	Write a property value .
1182	Decorates a page and writes it to the given writer .
1183	Parse the content of a page .
1184	Writes the content of the decorated page .
1185	Writes the content of the given region to the given writer .
1186	Starts the server .
1187	Runs the given process and returns the result .
1188	Gets the store .
1189	Creates a new gzipped response stream .
1190	Initializes the template with the given data .
1191	Appends the alias to the query .
1192	Append column name .
1193	Adds a rule to the list of rules .
1194	Applies the rule to the given value .
1195	Process the includes .
1196	Process the excludes .
1197	Get the pseudo class name .
1198	Adds all elements from the given collection to this set .
1199	Finds the insertion point .
1200	Bind an annotation config .
1201	Register a new action configuration .
1202	Lookup an action configuration .
1203	Register an action config with the given action config type .
1204	Setup system mail properties .
1205	Validates the given value against the given validation context .
1206	Finds the last table node .
1207	Fix the foster elements .
1208	Register session beans .
1209	Gets the session map .
1210	Initialize the proxy .
1211	Add advice init method .
1212	Register the bundle with the bundle manager .
1213	Adds a key - value pair to the profile .
1214	Extract profiles and add them to the list .
1215	Adds a key - value pair to the properties .
1216	Convert a typedesc to a class name .
1217	Converts a type reference description to a type reference name .
1218	Convert a typedesc to a signature .
1219	Returns the Typeref name for the given type .
1220	Adds all consumers to this consumer list .
1221	Creates a collection of the specified length .
1222	Converts the given value to a single element collection .
1223	Converts the given value to a collection .
1224	Convert a collection to a collection .
1225	Convert a primitive array to a collection .
1226	Add a new line number .
1227	Visit this label .
1228	Puts the instruction at the given offset into the given byte vector .
1229	Adds a forward reference .
1230	Resolve the forward instructions .
1231	Mark this basic block as a subroutine .
1232	Adds all successor nodes from the given subroutine to this subroutine .
1233	Compare two digits .
1234	Fix the accent .
1235	Put a single byte into this vector .
1236	Put two bytes into this vector .
1237	Put a 16 - bit integer into this vector .
1238	Put a 12 - byte integer into this vector .
1239	Put four bytes into the byte vector .
1240	Put an int into the byte vector .
1241	Put two bytes into the byte vector .
1242	Put a long into this vector .
1243	Put a byte array into this vector .
1244	Enlarges the buffer by the given size .
1245	Authenticate user via http session .
1246	Authenticate user via token .
1247	Authenticate user via basic auth .
1248	Finds the default message for the given key .
1249	Get a resource bundle .
1250	Returns the element at the given index in the given array .
1251	Sets the entity id .
1252	Saves an entity to the database .
1253	Updates the given entity .
1254	Updates a property of an entity .
1255	Updates the property of an entity .
1256	Find entity by id .
1257	Find entity by property .
1258	Find one entity .
1259	Deletes the entity with the given id .
1260	Deletes the given entity from the database .
1261	Count the number of entities of the given type .
1262	Increases a property .
1263	Decreases a property .
1264	Find related entities .
1265	Returns a list of all entities of the given type .
1266	Removes all attributes from the cache .
1267	Returns a set of all the attributes in this object .
1268	Put a key - value pair into the cache .
1269	Removes the value associated with the given key .
1270	Returns the current stack trace .
1271	Returns the stack trace of the given exception .
1272	Gets the stack trace chain from the given exception .
1273	Gets the exception chain of the given exception .
1274	Returns the stack trace of the given exception .
1275	Convert an exception chain to a string .
1276	Build the error message .
1277	Unwraps a Throwable .
1278	Register as consumer .
1279	Accept madvoc component class .
1280	Returns the system class loader .
1281	Returns an input stream for the given resource .
1282	Returns an input stream to a resource .
1283	Returns an input stream for the given class .
1284	Returns an input stream for the specified class .
1285	Adds a new route chunk to this chunk .
1286	Find or create a child chunk .
1287	Parse the request .
1288	Convert a value to a collection .
1289	Invoke the setter .
1290	Sets the value of an array at the given index .
1291	Creates a bean property .
1292	Extract the type of the property .
1293	Stop the authentication process .
1294	Start the authentication session .
1295	Convert a local date to a date .
1296	Convert a local date - time to a calendar .
1297	Define proxy .
1298	Adds a check to the list .
1299	Resolves a validation context for the given class .
1300	Adds all checks for the given class .
1301	Collect property annotation checks .
1302	Collect annotation checks .
1303	Copy default check properties .
1304	Encodes a URI component .
1305	Encodes the given string using the given encoding .
1306	Encodes the given scheme using the given encoding .
1307	Encodes the given host with the given encoding .
1308	Encodes the given port using the given encoding .
1309	Encodes the given path using the given encoding .
1310	Encodes the given query string using the given encoding .
1311	Encodes a query parameter .
1312	Encodes the given fragment using the given encoding .
1313	Inspect the bean properties .
1314	Returns an array of all property descriptors .
1315	Returns the set - cookie headers .
1316	Unzip the response body .
1317	Close the http connection .
1318	Returns true if the reference scope is a proto scope or singleton scope .
1319	Prints the routes .
1320	Encrypt a byte array .
1321	Decrypts the given encrypted content .
1322	Convert a map to a bean .
1323	Convert a list to a bean .
1324	Set the value of the given property .
1325	Creates a new map from the given map .
1326	Sort by column name .
1327	Sets the default header .
1328	Sends an HTTP request .
1329	Sends the request .
1330	Adds the default headers to the request .
1331	Read the cookies from the HTTP response .
1332	Adds the cookies to the request .
1333	Sends an email .
1334	Sets the subject .
1335	Sets the sent date .
1336	Sets the headers to the given message .
1337	Set the people .
1338	Sets the recipients for the given email .
1339	Adds the body data to the message .
1340	Sets the content of the given email message .
1341	Creates a body part for an attachment .
1342	Get the content - type header .
1343	Save the result set .
1344	Close all ResultSets associated with this query .
1345	Close the query .
1346	Close the database .
1347	Sets the fetch size .
1348	Sets the maximum number of rows that should be returned .
1349	Executes the update .
1350	Execute the count query .
1351	Returns the generated columns .
1352	Returns the query string .
1353	Creates a proxy instance of an aspect class .
1354	Creates a collection from an iterator .
1355	Creates a stream from an iterator .
1356	Compares two objects .
1357	Sets the default wiring mode .
1358	Prints a message to the console .
1359	Returns the caller class name .
1360	Shorten the class name .
1361	Exclude the given types .
1362	Serialize the given object to the given Appendable .
1363	Serializes the given object into a String .
1364	Clone an object using serialization .
1365	Write an object to a file .
1366	Read an object from a file .
1367	Convert an object to a byte array .
1368	Convert a byte array to an object .
1369	Resolve mapped types table names .
1370	Creates the table names for the given types .
1371	Read column value .
1372	Cache the result set entities .
1373	Resolve a provider definition .
1374	Convert table name to table name .
1375	Checks if the connection is valid .
1376	Render the view .
1377	Locates the target .
1378	Returns the writer for this response .
1379	Returns the output stream for this response .
1380	Writes the content to the response .
1381	Sets the content type .
1382	Print a string to the output stream .
1383	Login the user .
1384	Token as json .
1385	Login via basic auth .
1386	Logout the user .
1387	Converts a URL to a container file .
1388	Creates a directory if it does not already exist .
1389	Creates a directory if it does not already exist .
1390	Copies the source file to the destination file .
1391	Copies a directory .
1392	Moves a file to a directory .
1393	Move a directory .
1394	Delete the contents of the given directory .
1395	Reads all UTF - 8 characters from the given file .
1396	Read chars from a file .
1397	Write chars to a file .
1398	Write a string to a file .
1399	Append a string to a file .
1400	Read a number of bytes from a file .
1401	Write bytes to a file .
1402	Append bytes to a file .
1403	Copies a file to another directory .
1404	Deletes a file or directory .
1405	Creates a temporary directory .
1406	Checks if the given file is binary .
1407	Checks that the source and destination directories are the same .
1408	Checks that the contents of the given file are the same .
1409	Prints the usage of the command .
1410	Resolve action method .
1411	Register an action .
1412	Register a path alias .
1413	Move to the next iteration .
1414	Creates a new CharArraySequence from the given char array .
1415	Execute the target method .
1416	Checks if the target is uppercase .
1417	Returns a sequence of characters from from to to .
1418	Returns an array of URLs for the given class .
1419	Add bcc addresses .
1420	Register a serializer for the given type .
1421	Lookup the serializer for the given type .
1422	Parse the request stream .
1423	Returns the value of the parameter with the given name .
1424	Returns the value of the parameter with the given name .
1425	Returns the uploaded file or null if not found .
1426	Gets the uploaded files from the request .
1427	Initializes this filter .
1428	Parse the given template and append it to the given builder .
1429	Finds the end of the end of a macro .
1430	Count the number of escape characters in the given template .
1431	Build query string .
1432	Parse a query string into a multi map .
1433	Prepare header parameter name .
1434	Extract the media type from the given content type .
1435	Returns the HTML representation of the given node .
1436	Returns the inner HTML of the given node .
1437	Set the parameters from the servlet context .
1438	Resets this object to the initial state .
1439	Sets whether the parser should be lazy - loaded .
1440	Replace the mapped type for the given path .
1441	Parse a JSON string as a list of objects .
1442	Parse a JSON string as a map .
1443	Resolve lazy value .
1444	Skip object .
1445	Parse a string .
1446	Parse string content .
1447	Parse a Unicode character .
1448	Parse the unquoted string content .
1449	Parse a number .
1450	Parse array content .
1451	Creates an empty constructor .
1452	Creates a simple method wrapper .
1453	Resolve the raw type name .
1454	Resolve a reference from a property value .
1455	Resolve reference from values .
1456	Read all references from annotation .
1457	Build default references .
1458	Build the default reference .
1459	Remove all duplicate names .
1460	Convert a list of references to a list of BeanReferences .
1461	Convert an annotation value to a list of BeanReferences .
1462	Run Joy .
1463	Finds the method with the given name .
1464	Finds a constructor with the given parameter types .
1465	Resolve all interfaces of the given type .
1466	Compares two parameters .
1467	Force access to the given object .
1468	Creates a new instance of the given class with the given parameters .
1469	Returns all superclasses of the given type .
1470	Returns the child class of the given class .
1471	Returns the jar file of the given class .
1472	Sleeps for the specified number of milliseconds .
1473	Sleeps for the specified amount of time .
1474	Wait for an object to complete .
1475	Creates a daemon thread factory .
1476	Returns the current value .
1477	Visit a parameter .
1478	Visit an annotation .
1479	Visit a type annotation .
1480	Visit a parameter annotation .
1481	Visit a field instruction .
1482	Visit a method instruction .
1483	Visit a invoke dynamic instruction .
1484	Visit a jump instruction .
1485	Visits a multi - anew array instruction .
1486	Visits a try catch block .
1487	Visits a local variable annotation .
1488	Convert properties to a writer .
1489	Process the input stream .
1490	Returns the next element .
1491	Moves to the next element .
1492	Joins an array of arrays into a single array .
1493	Joins an array of arrays into a single array .
1494	Resize the given array to the given size .
1495	Appends a new element to the end of the given array .
1496	Removes the specified number of bytes from the given array .
1497	Returns the index of the first occurrence of the specified value in the specified array or - 1 if the array is empty .
1498	Returns the index of the first occurrence of the value in the array or - 1 if the value is not found .
1499	Returns the index of the first occurrence of the first occurrence of the given sub - array starting at the given index .
1500	Enable XHTML mode .
1501	Parse the given content into a DOM Document .
1502	Parse the Lagarto document .
1503	Compute the maximum stack and local stack .
1504	End the current basic block with no successor .
1505	Collect attribute prototypes .
1506	Inject the context for the given target object .
1507	Register a pseudo class .
1508	Lookup a pseudo class .
1509	Invoke the action .
1510	Get all bean property names .
1511	Visit properties .
1512	Returns true if the given property name matches the given rule .
1513	Resolve method injection points for the given type .
1514	Read filter config parameters .
1515	Sends the bundle file to the response .
1516	Lookup the bundle file for the given bundle id .
1517	Lookup gzip bundle file .
1518	Register a bundle .
1519	Creates the SHA - 256 digest of the given string .
1520	Creates a bundle .
1521	Deletes all the bundle files from the bundle folder .
1522	Fix CSS relative urls .
1523	Update column .
1524	Create table ref name .
1525	Request the db session .
1526	Converts the given value to a single element array .
1527	Parse the signature for generics .
1528	Resolve the injection points for the given type .
1529	Returns true if the given property type matches the excluded property types .
1530	Open the connection for the query .
1531	Opens the database transaction .
1532	Close the transaction .
1533	Commits the current transaction .
1534	Rollbacks the current transaction .
1535	Creates a new Properties object from a properties file .
1536	Creates a new Properties object from the given string .
1537	Loads properties from a string .
1538	Get a subset of a properties .
1539	Creates a new Properties object from the classpath .
1540	Get the value of a property .
1541	Resolve all variables in the given properties .
1542	Resolve a property .
1543	Resolve the scope pattern .
1544	Get the transaction mode .
1545	Register annotations .
1546	Read transaction annotation .
1547	Accept the given node .
1548	Checks if the given node is an element .
1549	Accept the current results of this selector .
1550	Unescape the given value .
1551	Build JRE packages .
1552	Clone this node to another node .
1553	Detaches this node from its parent .
1554	Adds a new child node to this node .
1555	Inserts a child node at the given index .
1556	Inserts a new child node before the given child node .
1557	Inserts the specified child nodes before the specified child node .
1558	Inserts the newChild after the refChild .
1559	Inserts the newChilds after the refChild .
1560	Removes all child nodes from this node .
1561	Finds the child node with the given name .
1562	Returns all child nodes that match the given predicate .
1563	Checks the validity of this node .
1564	Initializes the child element nodes .
1565	Initialize sibling names .
1566	Initializes the list of child nodes .
1567	Change the owner document of a node .
1568	Returns the previous sibling name .
1569	Returns the text content of this node .
1570	Returns the HTML representation of this element .
1571	Returns the inner HTML of this element .
1572	Visit all children of this node .
1573	Returns the CSS path of this node .
1574	On decora tag .
1575	On the start of an id attribute .
1576	Define the decora tag .
1577	Adds a proxy aspect .
1578	Adds a mapping for the root package .
1579	Adds the root package of the given action class .
1580	Finds the root package for the given action path .
1581	Resolve validation message .
1582	Remove duplicate names .
1583	Adds a file name pattern to the properties file .
1584	Iterates over all targets and passes them to the given consumer .
1585	For each target and in .
1586	For each target and out .
1587	Extract parameters values .
1588	Creates a list of targets for the given action and method parameters .
1589	Creates an action method argument .
1590	Registers a session created event .
1591	Removes the session from the session map .
1592	Adds the given value to the end of this array .
1593	Adds all elements of the given array to this array .
1594	Removes the element at the given position .
1595	Resolve the target .
1596	Send error if target not found .
1597	Returns the string value of the given value .
1598	Add an action filter to the router .
1599	Get the pseudo function name .
1600	Resolve all property injection points for the given type .
1601	Creates a SOCKS4 proxy socket .
1602	Returns the number of attributes in this object .
1603	Returns all action results .
1604	Returns true if c equals one .
1605	Returns the index of the first occurrence of the first occurrence of the match .
1606	Returns the index of the first occurrence of the first occurrence of the match .
1607	Add arguments to the command line .
1608	Sets the environment variable .
1609	Run the command .
1610	Invoke a listener .
1611	Copies the contents of the given frame into this frame .
1612	Get the abstract type from the API format .
1613	Get the abstract type from the descriptor .
1614	Set the input frame from the API format .
1615	Returns the abstract type for the given local index .
1616	Sets the local index .
1617	Push an abstract type to the output stack .
1618	Push an abstract type to the stack .
1619	Pop elements from the stack .
1620	Pop a descriptor from the stack .
1621	Adds an initialized type .
1622	Get the initialized type .
1623	Put an abstract type into the given byte vector .
1624	Removes expired entries from the cache .
1625	Schedule a prune task .
1626	Visit a module .
1627	Visit a NestHost .
1628	Visit an outer class .
1629	Visit an annotation .
1630	Visit a NestMember .
1631	Visit an inner class .
1632	Visit a field .
1633	Get the current thread session .
1634	Close the current thread session .
1635	Creates the execution array .
1636	Invokes the action method .
1637	Read the request body .
1638	Calculates the first item index of a page .
1639	Calculates the index of the first item in a page .
1640	Returns true if the given value is the same as the current value .
1641	Convert a char array to a byte array .
1642	Returns the index of the first difference in the source array .
1643	Resolve the node name .
1644	Resolve the name of an attribute .
1645	Renders an attribute .
1646	Load properties from a file .
1647	Load properties from a file .
1648	Load properties from an input stream .
1649	Load properties from a map .
1650	Load properties from a map .
1651	Load properties from classpath .
1652	Returns the value associated with the given key or the default value if the key is not found .
1653	Sets the value of a property .
1654	Extract the properties to the target map .
1655	Extract properties from the properties file .
1656	Extract all sub properties from the given target map .
1657	Get the inner map .
1658	Add inner map .
1659	Resolve the active profiles .
1660	Returns a list of all profiles .
1661	Returns the names of all profiles that match the given wildcard .
1662	Add a property injection point .
1663	Adds a set injection point .
1664	Adds a method injection point .
1665	Adds the given init method points .
1666	Adds a list of destroy method points .
1667	Resolve the target class .
1668	Inject target into wrapper .
1669	Gets the target wrapper type .
1670	Finds the field with the given name .
1671	Returns the type of this field .
1672	Resolve the key type .
1673	Resolve the component type .
1674	Convert an object to a JSON result .
1675	Creates a JSON result from an exception .
1676	Resolve http method from method name .
1677	Returns true if the string matches the pattern .
1678	Resolve loading .
1679	Resolve resource loading .
1680	Load a class .
1681	Returns the URL of the resource with the given name .
1682	Wait until the end condition is reached .
1683	Detect annotation type .
1684	Build the injection point .
1685	This method is called for every property in the class .
1686	Returns an array of URLs for the given class .
1687	Set the bean .
1688	Updates the bean .
1689	Loads the property descriptor .
1690	Returns the getter for this property .
1691	Returns the setter for this property .
1692	Connect to the database .
1693	Adds an iterator to the list .
1694	Print the logo .
1695	Stop joy .
1696	Creates a socket .
1697	Creates an SSL socket .
1698	Returns the default SSLSocketFactory .
1699	Returns the socket factory for the given proxy .
1700	Returns a random string with the specified number of characters .
1701	Returns a random string in the specified range .
1702	Returns a random string with the specified number of random characters .
1703	Creates a new instance of the given type .
1704	Inject the given value into the target object .
1705	Convert the given value to the target type .
1706	Visit the provide method .
1707	Creates a new instance of the default cache .
1708	Adds a value to the map .
1709	Returns all method descriptors .
1710	Resolve an IP address .
1711	Convert an IP address to an int .
1712	Checks if the given string is a valid Austria IP Adress V4 format .
1713	Resolve the hostname of an IP address .
1714	Downloads the given URL into a byte array .
1715	Download a string from the given URL .
1716	Downloads a file from the given URL .
1717	Injects the targets into the action request .
1718	Outjects the given targets .
1719	Connect to the given host and port .
1720	Connect to the given host and port .
1721	Returns the index of the primitive class name .
1722	Loads a class using the specified class loader .
1723	Load array class by component type .
1724	Shuts down the bean manager .
1725	Returns a binary search for the given array .
1726	Returns a binary search for the given array .
1727	Exclude one or more rules .
1728	Include one or more rules .
1729	Include all bean properties of the given type .
1730	Sets the start index of this tag .
1731	Register a web application component .
1732	Resolve column db sql type .
1733	Preprocess sql string .
1734	Creates a new ResultSetMapper .
1735	Find the generated key .
1736	Populate the entity with the generated keys .
1737	Creates the wrapper bean .
1738	Set bean .
1739	Sets the parameters of the query .
1740	Sets an array of objects .
1741	Inserts a chunk after another chunk .
1742	Lookup entity type .
1743	Returns the table descriptor for the given column reference .
1744	Resolve the table name .
1745	Resolve the class of the given object .
1746	Appends a space if it is not present .
1747	Returns an enumeration of file parameter names .
1748	Include the specified page .
1749	Returns the URL of the request .
1750	Gets the request URI .
1751	Resolve parameter names from action class method .
1752	Start petite .
1753	Stop Petite .
1754	Add subject .
1755	Add a message id to the query .
1756	Add a from address .
1757	Add a recipient address .
1758	Add a cc recipient .
1759	Add a bcc address .
1760	Add a flag to the filter .
1761	Add a flag to the filter .
1762	Add a received date filter .
1763	Add a date filter to the query .
1764	Add a size filter to the query .
1765	Add the given email filters to this filter .
1766	Add the given filters to this filter .
1767	Add a not filter to the query .
1768	Concatenates the given search term .
1769	Encodes a byte array into a base32 string .
1770	Convert a value to a byte array .
1771	Checks if gzip is eligible for the given request .
1772	Validates the given target object .
1773	Validates the given validation context against the target object .
1774	Use the specified profile .
1775	Sets the list of enabled profiles .
1776	Checks if the given list of profiles matches .
1777	Parse the request body .
1778	Returns the number of milliseconds since January 1 1970 .
1779	Adds the specified JulianDate to this date .
1780	Returns the subtraction of this date from the given date .
1781	Sets the integer and the fraction .
1782	Initializes the parser .
1783	Emit a comment .
1784	Print an error message .
1785	Creates a hash for the given password .
1786	Generates a PBKDF2 key .
1787	Convert a hex string to a byte array .
1788	Resolve provider definitions .
1789	Sets the name of the attachment .
1790	Sets the content id from the name if not already set .
1791	Resolve the content type .
1792	Parse a type .
1793	Compute the size of the attributes .
1794	Puts the attributes of this module into the given byte vector .
1795	Decodes the given string using the given encoding .
1796	Decodes a query string .
1797	Start the database .
1798	Check connection provider .
1799	implements the visitor to look for method signatures .
1800	Visits the end of the class .
1801	Creates a method signature visitor .
1802	Convert an array of objects to a CSV string .
1803	Convert a line to an array of strings .
1804	Resolve the injection point for the given type .
1805	Creates a class reader for the given advice class .
1806	Get cached advice class reader .
1807	Encrypt a string .
1808	Decrypt a string .
1809	Returns the logger with the given name .
1810	Sets the name of the cookie .
1811	Creates an action request .
1812	Creates the wrapper bean .
1813	Destroy a bean .
1814	Call destroy methods on all registered beans .
1815	Gets the list of messages from the server .
1816	Launches the ClusteredServiceContainer .
1817	Run the reporting function .
1818	Print an error message .
1819	Print rate .
1820	Maps an existing file to read - only .
1821	Close the archive .
1822	Do the actual work .
1823	Returns the current position .
1824	Inserts the given vectors into the buffer and returns the new position .
1825	Appends padding to the current position .
1826	Close the archive .
1827	Poll for error response .
1828	Stop a replay session .
1829	Logs the event that an image has been available .
1830	Logs an event when an image is unavailable .
1831	Returns a status indicator reader for sending channel status .
1832	Read channel status indicator .
1833	Sets the limit of the buffer .
1834	Appends the specified number of bytes from the specified source buffer to this buffer .
1835	Poll for the response from the server .
1836	Maps the loss report to a file .
1837	Returns a snapshot of the streams .
1838	Creates a default header .
1839	Sets the key buffer .
1840	Adds a label buffer to the counter message .
1841	Sends a connect request to the server .
1842	Try to connect to the server .
1843	Sends a session close request .
1844	Sends a start recording request .
1845	Stop recording .
1846	Sends a replay request to the server .
1847	Stop a replay request .
1848	List recordings request .
1849	List recordings for a URI .
1850	List a recording .
1851	Extend a recording .
1852	Sends a recording position request to the server .
1853	Sends a stop position request to the server .
1854	List recording subscriptions .
1855	Returns true if the given udp channel matches this tag .
1856	Returns the destination address of the given channel .
1857	Returns the description of this channel .
1858	Adds a destination to the list of image connections .
1859	Inserts a packet .
1860	Find control toggle .
1861	Adds a parameter to the request .
1862	Returns the channel tag .
1863	Returns the entity tag .
1864	Adds a session id to a channel .
1865	Returns the tag value of the given parameter .
1866	Appends padding to the log .
1867	Updates the publisher limit .
1868	Allocates a new position for a new counter .
1869	Returns the label name for the given type id .
1870	Scan for available bytes .
1871	Clear the state of this builder .
1872	Validates the state of this builder .
1873	Sets the prefix of the URI .
1874	Sets the media type .
1875	Sets the control mode .
1876	Sets the term length .
1877	Sets the term offset .
1878	Sets the linger value .
1879	Opens the datagram channel .
1880	Close the connection .
1881	Check if the frame is valid .
1882	Receive data from the socket .
1883	On Nak .
1884	Process timeouts .
1885	Returns the string representation of the given status .
1886	Allocates a new AtomicCounter .
1887	Resets this vector to the given buffer .
1888	Validates this vector .
1889	Validate and compute the length of the given vectors .
1890	Returns the length of the producer window .
1891	Validate socket buffer lengths .
1892	Validates the page size .
1893	Validates the session id range .
1894	Validates the publication unblock timeout and client Liveness timeout .
1895	Sets the error code .
1896	Resets the state to the initial state .
1897	Encode a list of cluster members to a string .
1898	Adds the publication information for all members in the cluster to the aeron .
1899	Close all publications of the cluster members .
1900	Checks if there is an active quorum .
1901	Returns the quorum position of the given cluster members .
1902	Resets the log positions of all cluster members .
1903	Checks if there are voters at the given position and leadership term id .
1904	Checks if there are enough votes on a candidate term .
1905	Checks if a cluster member has majority vote .
1906	Determine the cluster member .
1907	Validate clusterMembers and memberEndpoints .
1908	Checks if two cluster members have the same endpoints .
1909	Checks if the given candidate is an unanimous candidate .
1910	Checks if a candidate is a quorum candidate .
1911	Checks if there are no duplicate endpoints .
1912	Finds the index of the member with the given id .
1913	Removes a member from the given array .
1914	Returns the highest member id for the given cluster members .
1915	Map existing CnC file .
1916	Checks if a CnC is active .
1917	Checks if the driver is active .
1918	Checks if the driver is active .
1919	Request driver termination .
1920	Returns the length of the frame in bytes .
1921	Writes the frame length to the given buffer .
1922	Writes the frame type to the given buffer .
1923	Writes the frame flags to the given buffer .
1924	Writes the frame term offset to the given buffer .
1925	Writes the term id to the given buffer .
1926	Finds the counter id by recording id .
1927	Find the counter id by session id .
1928	Returns the recording id for the given counter .
1929	Checks if a recording is active .
1930	Write application specific feedback to the status message .
1931	Reloads the index map from the file .
1932	Returns the last term entry .
1933	Creates a recovery plan .
1934	Creates a recovery plan from a list of snapshots .
1935	Appends a term to the log .
1936	Appends a snapshot entry to the log .
1937	Commits the log position .
1938	Tombstones an entry .
1939	Close the connection .
1940	Adds the given vectors to the publication .
1941	Unblocks the given term .
1942	Returns the current channel .
1943	Sets the channel of the image .
1944	Checks that the term length is valid .
1945	Checks the page size .
1946	CAS the active term count .
1947	Compute the position .
1948	Compute the log length .
1949	Stores the default frame header to the given metadata buffer .
1950	Apply the default header to the given metadata buffer .
1951	Rotates the log .
1952	Initialise the tail with the given term id .
1953	Returns the offset of the term .
1954	Get the tail volatile value from the metadata buffer .
1955	CAS raw tail .
1956	Writes the token data to the token buffer .
1957	Allocates a new counter .
1958	Find the counter id .
1959	Checks if the given counter has a replay state .
1960	Gets the snapshot recording id .
1961	Convert a flags value to a character array .
1962	Sets the channel of the message .
1963	Offer data to the cluster .
1964	Wrap this buffer with the given buffer .
1965	Commit the current frame to the buffer .
1966	Aborts the frame .
1967	Main method .
1968	Close all resources .
1969	Returns the current position .
1970	Allocates a new counter .
1971	Finds the id of the given service .
1972	Creates a snapshot of the stream backlog .
1973	Allocates a new AtomicCounter .
1974	Close the connection .
1975	Dispatch a descriptor to the given consumer .
1976	Adds a new slab .
1977	Sets the byte at the given index to the given value .
1978	Adds the given statistics to the statistics .
1979	Calculates the row ranges for the given filter .
1980	Convert an array type to a group type .
1981	Convert a struct type to a group type .
1982	Annotate a message at the given position .
1983	End the previous bit packed run .
1984	Read one field from the stream .
1985	Read all the footers from the given file .
1986	Read all footers from a summary file .
1987	Read the footer of a Parquet file .
1988	Read the next row group .
1989	Read the next row group .
1990	Read a dictionary page .
1991	Adds a writer to the list of writers .
1992	Removes a writer from the list of writers .
1993	Update the allocation .
1994	Register a scale callback .
1995	Start writing the magic .
1996	Start a new block .
1997	Start a new column .
1998	Writes a dictionary page .
1999	Writes a data page .
2000	Write a column chunk .
2001	Ends the current block .
2002	Copies bytes from the input stream to the output stream .
2003	End the Parquet file .
2004	Merge a list of metadata files into a Parquet metadata object .
2005	Write merged metadata file .
2006	Write metadata file .
2007	Merge the given metadata into the given metadata .
2008	Reads the next value from the input stream .
2009	Checks if the given schema is null or union .
2010	Coalesce an array of objects returning the first non - null object .
2011	Make a value from a string .
2012	Creates a new ThriftMetaData object from the given extra metadata .
2013	Creates a new ThriftMetaData from the given thrift class .
2014	Returns the extra metadata for this object .
2015	Writes a null value .
2016	Writes a page to the Parquet .
2017	Initializes the buffer from a page of data .
2018	Allocates the values buffer .
2019	Checks if the expected type is an enum .
2020	Calculates the bit widths for the delta block buffer .
2021	Throws the given exception if it is an instance of the given exception class .
2022	Get statistics based on primitive type .
2023	Creates a builder for reading a primitive type .
2024	Merge statistics .
2025	Gets the non - null schema .
2026	Creates a new TaskAttemptContext .
2027	Invokes a method on an object .
2028	Write the members to a string .
2029	Merge the fields of this group into another group .
2030	Initializes the counter from the given reporter .
2031	Get the filter for the given configuration .
2032	Read all footers in parallel using summary files .
2033	Generates a list of ParquetInputSplits from a list of row group blocks .
2034	Writes a record to the log .
2035	Validates the mapping .
2036	Serialize the descriptor .
2037	Creates a direct codec factory .
2038	Amends missing required fields .
2039	Check set .
2040	Read the metadata from the given input stream .
2041	Close the record writer .
2042	Sets the schema for the group .
2043	Adds a primitive type to the map .
2044	Assert that the given primitive type is valid for the given column .
2045	Casts a long to an int .
2046	Creates a new schema mapping from an arrow schema .
2047	Creates a new schema mapping from a parquet schema .
2048	Maps an arrow schema to a parquet schema .
2049	Writes the header of a data page .
2050	Skip over records that match the record filter .
2051	Write object to conf as base64 .
2052	Removes an entry from the cache .
2053	Adds a new entry to the cache .
2054	Returns the current value for the given key .
2055	Write the given value to the avro schema .
2056	Write value without conversion .
2057	Sets the glob pattern .
2058	Writes the given content to the given file .
2059	Opens an input stream for the given file .
2060	Returns a new unbound record filter for the specified column .
2061	Convert a StructType to a Thrift message type .
2062	Creates a list wrapper for a list type .
2063	Creates a list type from the given element type .
2064	Gets the merged key - value metadata .
2065	Get the parquet input split .
2066	Returns a map of field names to field types .
2067	Resolve schema access .
2068	Get the list of input files .
2069	Checks if there are enough parquet files to merge .
2070	Get the input files from the given directory .
2071	Returns a new unbound filter that filters records from the specified start position to the specified page size .
2072	Creates a list consumer for the given type .
2073	Initialize the mapred work .
2074	Merge a tuple into a summary data .
2075	Sum up a tuple .
2076	Read a struct .
2077	Reads a map entry .
2078	Writes an integer to the output stream .
2079	Reads a little endian integer from the given byte buffer at the given offset .
2080	Sets the Avro schema .
2081	Creates a topic if it doesn t already exist .
2082	Duplicate pipeline stage beans .
2083	Creates a stage bean .
2084	Creates interceptor beans .
2085	Creates an interceptor bean .
2086	Parse Avro schema .
2087	Returns the number of days since the epoch .
2088	Get Avro schema from header .
2089	Upgrade v1 to v2 .
2090	Returns the length of the file .
2091	Copy blobstore files to staging directory .
2092	Resets the statement to its initial state .
2093	Report the health of a thread .
2094	Register a gauge for the given thread .
2095	Stores the new control hub configs .
2096	Attempts to authenticate the user with the given web credential .
2097	Upgrade the given pipeline configuration if necessary .
2098	Upgrade the given stage configuration if necessary .
2099	Upgrade the given stage configuration if necessary .
2100	Upgrade services if needed .
2101	Upgrade the stage if necessary .
2102	Returns the list of fields to be null .
2103	Checks if the given name is a system class .
2104	Adds the specified element to the list .
2105	Adds the specified element to the list and returns the evicted element or null if the list is full .
2106	Returns the value of the given key or the default value if the key is missing .
2107	Adds reported errors to the list of stages output .
2108	Returns the descriptor for the given proto descriptor file .
2109	Get all file descriptors from the given file descriptor set .
2110	Populate default values and extensions .
2111	Returns the descriptor for the given message type .
2112	Convert a protobuf message to an SDC field .
2113	Convert an SDC record to a protobuf message .
2114	Convert an SDC field to a protobuf message .
2115	Upgrade Jersey config bean to Jersey config bean .
2116	Check connection .
2117	Converts a Kudu type to a Field . Type .
2118	Creates a Field from a RowResult .
2119	Intercepts a list of records .
2120	Returns the contents of the file as a String .
2121	Adds missing configurations to the given stage .
2122	Parse the response .
2123	Adds the response headers to the record .
2124	Write the response header to the record .
2125	Write response header to record header .
2126	Saves the metadata to disk .
2127	Configures the client .
2128	Parse headers only .
2129	Increments the source offset by the given amount .
2130	Parse a paginated result record .
2131	Adds the response headers to the header .
2132	Resolve headers .
2133	Process the response .
2134	Checks if a property is defined .
2135	Convert a DataParserException to a DataParserException .
2136	Convert a DataGeneratorException to a DataGeneratorException
2137	Gets the credentials from the credentials file .
2138	Preview with override . Preview with override .
2139	Copies the given character to the given buffer .
2140	Removes duplicates from a set of packages .
2141	Empty the batch .
2142	Find the next main line in the given chunk .
2143	Resolve a chunk .
2144	Closes the current connection .
2145	Escape a quoted string .
2146	Get flow control settings .
2147	Creates the gRPC channel provider .
2148	Put a batch of entries into the data channel .
2149	Compile the given expression .
2150	Digest a Grok expression .
2151	Adds a dictionary from an input stream .
2152	Adds a dictionary from an input stream .
2153	Stop the aggregator .
2154	Roll the data window to the new end time .
2155	Serialize an object to a JSON string .
2156	Deserialize a JSON string into an object .
2157	Deserialize an object from a JSON file .
2158	Write the exception detail message .
2159	Resolves an EL expression and returns the result .
2160	Generate inner field from the list .
2161	Gets the table name from the metadata record .
2162	Get the database name from the metadata record .
2163	Returns the internal field value of the given metadata record .
2164	Returns the location of the given metadata record .
2165	Returns the custom location for the given metadata record .
2166	Get Avro schema .
2167	Get the data format from the given metadata record .
2168	Creates a new schema change metadata field builder .
2169	Validate partition information .
2170	Generate partition path .
2171	Serialize schema to HDFS .
2172	Sets the parameters for the given operation .
2173	Get system configuration . Get system configuration .
2174	Parse rfc3164 time .
2175	Format a string .
2176	Start the batch .
2177	Checks if the given record contains the given solr fields .
2178	Returns a list of field names that are not in the autogeneratedFieldNamesMap .
2179	Send onRecordErrorException to errorRecordHandler .
2180	Parse a jar name .
2181	Parse a URL into a dependency .
2182	Returns the instance of CouchbaseConnector .
2183	Closes the bucket and environment .
2184	Validates the config .
2185	Returns the label for the given operation code .
2186	Verify that the dependency exists .
2187	Read a value from Vault .
2188	Get the write operation from the header .
2189	Write document .
2190	Build subdoc mutation .
2191	Creates the SQL string to alter a table .
2192	Configures the SASL client with the specified configuration .
2193	Take a batch of messages from the producer .
2194	Commit the last committed offset .
2195	Called when an error occurs .
2196	Injects the given stage into the given object .
2197	Get definitions .
2198	Returns the publisher definition for the given name .
2199	Format the column name .
2200	Formats the given value .
2201	Get pipeline configuration . Get pipeline configuration .
2202	Create a pipeline fragment . Create a pipeline fragment .
2203	Get a list of pipelines
2204	Import a pipeline fragment . Import a pipeline fragment .
2205	Returns the file path for the given record .
2206	Get operation code from record .
2207	Returns the field path for the given column .
2208	Get the next event from the event queue .
2209	Get the next runner from the queue .
2210	Returns the next runner in the queue or null if the queue is empty .
2211	Return a runner to the pipeline .
2212	Destroy the pipeline .
2213	Validates that the pipeline is not destroyed .
2214	Checks if the stream exists .
2215	Returns the last shard id for the given stream .
2216	Process a queue of records .
2217	Handle SQL exception .
2218	Returns the column hash for the given record .
2219	Compares two files .
2220	Returns the PID of the process if possible .
2221	Validate and extract fields to hash .
2222	Creates a proxy user .
2223	Roll the stats .
2224	Creates a snapshot of the current statistics .
2225	Ensure that the directory exists .
2226	Writes a batch of records to the database .
2227	Writes a batch of records to the database .
2228	Writes a batch of records to the database .
2229	Generate No More Data Event
2230	Detects a new partition .
2231	Updates the record for HDFS .
2232	Process the given group and value .
2233	Checks if two stages have the same version .
2234	Main method to run Mesos driver .
2235	Configure auth and build client .
2236	Resolve headers .
2237	Get HTTP method .
2238	Fill null types .
2239	Returns null if the field is not found in the record .
2240	Load a schema from the registry .
2241	Register a schema with the registry .
2242	Loads a schema from the registry .
2243	Gets the schema id from the given subject .
2244	Loads a schema from the registry .
2245	Writes the schema id to the given stream .
2246	Detect schema id .
2247	Returns the default values for the given schema .
2248	Parse all records from the given payload .
2249	Logs the validation results .
2250	Get the bad records from the error sink .
2251	Initializes the schema generator .
2252	Returns the outward edge vertices for the given vertex .
2253	Returns the inward edge vertices for the given vertex .
2254	Serialize a map of offsets to JSON .
2255	Deserialize the offset map .
2256	Queue a report .
2257	Get a report .
2258	Checks if the check point file exists .
2259	Writes the offsets to the main offset file .
2260	Delete a blob .
2261	Handle error .
2262	Handles the archiving of a blob .
2263	Returns a LiveFileReader for the current file .
2264	Release the reader .
2265	Set the DPM base URL for this client .
2266	Adds a default header to the request .
2267	Parse a date from a string .
2268	Escape the given string .
2269	Gets the client .
2270	Initializes the connection to Kinetica .
2271	Get the table metadata .
2272	Create bulk inserter .
2273	Creates a new event builder .
2274	Build a schema from a map of fields and levels .
2275	Converts an operation code from Oracle to SDC code .
2276	Adds the jars to the job .
2277	Adds the jars to the job .
2278	Checks if the fieldOrderByList contains the given field name .
2279	Check condition expressions .
2280	Get the offset lag for a file .
2281	Set the instrumentation for the bootstrap main .
2282	Gets the parallelism of the Kafka consumer .
2283	Run a BigQuery query .
2284	Convert a list of fields to a map of fields .
2285	Returns the description of the table .
2286	Validate that the table accepts inserts .
2287	Get the column type for the given field .
2288	Checks if the type is nullable .
2289	Get the schema for a table .
2290	Get the column properties for a given table .
2291	Returns the class for the given type name .
2292	Initializes the AerospikeBean with the given connection string .
2293	Returns the topic for the given record .
2294	Upgrade v5 to v6 .
2295	Returns an input stream to the file .
2296	Returns an OutputStream for writing to the file .
2297	Checks if the file exists .
2298	Parse a FsPermission string .
2299	Validates that all services are available .
2300	Creates a simple aggregator .
2301	Get the aggregator unit .
2302	Creates an aggregator with the given name and time window .
2303	Creates a new group by aggregator .
2304	Starts the data window .
2305	Stop the data provider .
2306	Roll the data window to the next window .
2307	Acquires a login manager .
2308	Release the login manager .
2309	Converts a glob to a regular expression .
2310	List objects lexicographically .
2311	Stop the pipeline .
2312	Produce empty batches for idle runners .
2313	Creates the failure snapshot .
2314	Convert a Record to a BoundStatement .
2315	Sets the current configuration to the new configuration .
2316	Generate lookup key .
2317	Checks if the partitioning is turned off or on .
2318	Read a single line from the input stream .
2319	Roll the usage timer down .
2320	Enable DPM .
2321	Disable DPM for the given username and password .
2322	Normalize DPM base URL .
2323	Retrieve user token .
2324	Logout the user .
2325	Updates the token file .
2326	Update DPM properties .
2327	Returns the schema field for the given field .
2328	Returns the complex schema for the given field .
2329	Get decimal scale or precision .
2330	Returns the default value for the given schema .
2331	Initializes the metrics if necessary .
2332	Compares two files .
2333	Returns the index of the specified group .
2334	Returns a list of all group names .
2335	Checks if the character at the given position is escaped .
2336	Checks if the current position is a slash escaped character .
2337	Checks if a character class is inside a bracket .
2338	Count the number of open parentheses .
2339	Extract the group info from a named pattern .
2340	Replaces all occurrences of the given pattern with the given replacement .
2341	Returns the result of a GET request .
2342	Refresh the schema .
2343	Returns true if the given entry is expired .
2344	Returns the current offset in bytes .
2345	Fast forward .
2346	Creates an empty envelope for detached stage .
2347	Convert a string to an Appropriate number .
2348	Parse the part .
2349	Parse the values .
2350	Lookup primary keys .
2351	Creates custom field mappings .
2352	Returns the SQL type name for the given type .
2353	Returns the table name .
2354	Sets the primary keys of the given record .
2355	Handle SQL exception .
2356	Execute the pipeline .
2357	Prepare the batch context .
2358	Finishes the given batch context .
2359	Flatten the entire record .
2360	Creates a detached stage runtime .
2361	Checks if the record has the exception detail message .
2362	Returns a map of columns to parameters .
2363	Returns the condition for the given partition column .
2364	Validate stored and specified offset .
2365	Returns the list of requested generator definitions .
2366	Returns an array of non - empty arguments .
2367	Returns the operation for the given operation .
2368	Convert bytes to display format .
2369	Scans the current LiveFile for files .
2370	Returns the number of pending files .
2371	Checks if a dependency is whitelisted .
2372	Returns true if the given set of versions matches .
2373	Run BootstrapClusterStreaming . main .
2374	Propagate runtime configuration .
2375	Validates the report description .
2376	Creates a JdbcRecordWriter .
2377	Creates a JdbcRecordWriter .
2378	Upgrade V1 to V2 .
2379	Extract the named groups from the raw text .
2380	Sends a consumer commit message to the producer .
2381	Creates an embedded SDC .
2382	Sets the fields in the record .
2383	Gets the remote pipelines with changes .
2384	Creates a new remote data collector result from the given future .
2385	Creates a gauge .
2386	Get the columns to parameters map .
2387	Generate header attributes .
2388	Validates the given record .
2389	Delete old temp parquet files .
2390	Get an input stream from an Avro record .
2391	Get a file reader from an input stream .
2392	Write a parquet file .
2393	Checks that the given field is an input encrypt field .
2394	Checks that the input field is a valid encrypt field .
2395	Check that the input field is a byte array .
2396	Check that the input field is a byte array .
2397	Prepare encrypt field .
2398	Sets the parent pattern for this matcher .
2399	Appends the replacement to the given StringBuffer .
2400	Returns a map of named groups .
2401	Replaces all properties of this pattern with the given replacement string .
2402	Ensure that avroSchema exists .
2403	Returns the value of a global variable .
2404	Creates the start event .
2405	Creates a stop event record .
2406	Fix offset .
2407	Extract the value of a field as a runtime value .
2408	Execute alter table add partition query .
2409	Execute alter table set table properties query .
2410	Describe a database .
2411	Execute a query .
2412	Execute a query and return the result .
2413	Execute a batch of pipelines .
2414	Iterates through all pipes and passes them to the consumer .
2415	Returns the offset commit trigger for this pipeline .
2416	Checks if the pipeline has failed to stop .
2417	Invokes the consumer for the given pipeline .
2418	Get the record id for the given record .
2419	Gets the value from a field .
2420	Sets the fragment in the given record .
2421	Sets the document in the given record .
2422	Set N1QL row in record .
2423	Handles the whole file data format .
2424	Check if the incomplete transactions contain the given sequence number .
2425	Sets the current thread s context class loader .
2426	Sets the stage creator .
2427	Logout from Kerberos .
2428	Sets the exceptions from the given configuration .
2429	Replaces variables in the given path .
2430	Ensure that the given path is allowed to access the data collector internal directories .
2431	Run BootstrapEmrBatch . main .
2432	Returns the directory path for the given record .
2433	Rename the file to the final name .
2434	Checks if the record should be rolled .
2435	Checks if the given string matches the given pattern .
2436	Get the offsets for the current file .
2437	Get the remaining wait time .
2438	Get the offset lag for the given offset map .
2439	Creates a new stage library delegate and initializes it .
2440	Creates a new stage library delegate .
2441	Creates a new instance of the given delegate definition .
2442	Get the value of a metric .
2443	Find the end of the header .
2444	Returns the size of the body .
2445	Save a buffer to a temporary file .
2446	Creates an SSLServerSocketFactory using the specified keystore and passphrase .
2447	Returns the mime type for the given file .
2448	Handle the request .
2449	Stop all connections .
2450	Adds the mappings to the router .
2451	Sends the response to the given stream .
2452	Sends the request body to the given output stream .
2453	Creates a new fixed length response .
2454	Use gzip when accepted .
2455	Set a cookie .
2456	Unload all cookies from the response .
2457	Decode the given base64 value .
2458	Base64 encodes a cookie value .
2459	Sets the table name .
2460	Returns the name of the given principal .
2461	Register the Spring session repository filter .
2462	Resolve the principal name from the session .
2463	Returns the session with the given id or null if no session exists .
2464	Get the JNDI name .
2465	Returns the canonical parameter types of the given view method .
2466	Register an intermediate synchronization .
2467	This method is called before the transaction is completed .
2468	Get the current transaction .
2469	Adds the module dependency to the deployment unit .
2470	Returns true if the given persistence unit name matches the cache region prefix .
2471	Returns the list of dependency names for the server config .
2472	Decreases the read lock count .
2473	Increment the read lock count .
2474	Adds a service to this bean deployment archive .
2475	Handle restoration calculation .
2476	Adds the search dependency if it is a JPA deployment .
2477	Make all top - level beans visible from static modules .
2478	Create JBoss agnostic meta data for POJO webservice deployment .
2479	Sets the config name and config file .
2480	Returns a list of JSESecurityMetaData for the given security constraints .
2481	Gets the servlet url patterns mappings .
2482	Gets the servlet class mappings .
2483	Resolve the EJBs .
2484	Returns the list of available connectors .
2485	Parse the core environment element .
2486	Parse the process id environment element .
2487	Returns the path address of the given operation .
2488	Sets the operation address .
2489	Gets the attribute value from the given operation .
2490	Determines whether to include defaults from the given operation .
2491	Creates a composite operation .
2492	Creates an add operation .
2493	Creates an add operation .
2494	Creates a read - attribute operation .
2495	Creates the write attribute operation .
2496	Creates an undefine attribute operation .
2497	Returns the value of the entry .
2498	Adds a url context factory for the given scheme .
2499	Removes the URL context factory for the given scheme .
2500	Load all providers from the given class loader .
2501	Modify the deployment .
2502	Configure the endpoints for the deployment .
2503	Modify the context root .
2504	Gets the transport class name from the deployment .
2505	Sets the run as identity .
2506	Pop the RunAs identity from the SecurityContext .
2507	Process management .
2508	Injects the given property value into the given object .
2509	Returns true if the class type and property type match .
2510	Finds the method with the given name and parameter type .
2511	Finds the field with the given name and type .
2512	Initializes the options .
2513	Derives the useful information from an HTTP request .
2514	Collect a standalone Jdr report .
2515	Collect the Jdr report .
2516	Register a resource adapter deployment .
2517	Unregister a resource adapter deployment .
2518	Register the transformers .
2519	Writes the parameters to the given output stream .
2520	Read an exception from an input stream .
2521	Returns the owner of the current thread .
2522	Releases the lock on the given instance .
2523	Adds the given content to the log .
2524	Adds the CDI flag to the WarMetaData
2525	Returns the component view .
2526	Invokes an endpoint .
2527	Get the component view method .
2528	Returns true if the given method matches the given method .
2529	Creates the management statistics resource .
2530	Gets the EJBSecurityMetaData for the given endpoint .
2531	Checks if oldSecurityDomain and nextSecurityDomain are the same .
2532	Ensure that two security domains are the same .
2533	Set the IDL name .
2534	Returns the absolute name of this entry .
2535	Creates a new JNDI name from the given name .
2536	Adds the IronJacamarXmlDescriptor to the deployment unit .
2537	Handles the request .
2538	Checks if the current thread is in a transaction .
2539	Returns the transaction synchronization registry .
2540	Get the connection factory .
2541	Returns the last component of the given name .
2542	Checks if the given name is empty .
2543	Creates a NameNotFoundException with the given name and context name .
2544	Creates a new NamingException with the given message and cause .
2545	Creates a new NamingException with the given message and the given exception and the remaining name .
2546	Creates a CannotProceedException with the given resolved object and remaining name .
2547	Creates a NamingEnumeration from a collection .
2548	Rebind the given name to the given value .
2549	Returns the activeMQ component control .
2550	Parse connection attributes .
2551	Creates a new instance of this component .
2552	Returns the root of the Spring integration JAR .
2553	Resolve the runtime name .
2554	Creates a builder for a listener resource .
2555	Returns the primitive analysis for the given primitive type .
2556	Shuts down the thread .
2557	Gets a list of url patterns .
2558	Gets the servlets metadata .
2559	Gets the servlet mappings for the given JBossWebMetaData .
2560	Gets the security constraints for the given JBossWebMetaData .
2561	Gets the login config .
2562	Returns the list of context parameters .
2563	Gets the web resource collections metadata .
2564	Gets the servlet init params .
2565	Creates a new security constraint .
2566	Creates a new web resource collection .
2567	Creates a new servlet .
2568	Creates a new servlet mapping metadata .
2569	Create auth constraint metadata .
2570	Creates a new user data constraint .
2571	Creates a new param value metadata .
2572	Creates a new ParamValueMetaData object .
2573	Register session bean interceptors .
2574	Process injection targets .
2575	Stop the Weld container .
2576	Get the JNDI name from the model node .
2577	Resolve the attribute .
2578	Returns the type of the given URL pattern .
2579	Checks if the target server targets a pooled connection factory .
2580	Checks if the given resource adapter targets an external pooled connection factory .
2581	Returns the activeMQ server name .
2582	Returns the default persistence unit name .
2583	Register this Activity .
2584	Unregisters the activity .
2585	Suspends this activity .
2586	Resume the server .
2587	Indicate that the invocation has completed .
2588	Called when a transaction is created .
2589	Bind the resource into the naming store .
2590	Removes the resource from the naming store .
2591	Returns the capability service name for the given capability base name .
2592	Creates the list of resource roots from the deployment root .
2593	Get all deployment module class loaders .
2594	Checks if the persistence provider needs class file transformer .
2595	Allow two phase bootstrap .
2596	Allow default data source use .
2597	Checks whether to skip mixed synchronization type check .
2598	Get an ORB from the environment .
2599	Initializes the ORB for the given applet .
2600	Initialize method handles .
2601	Set the active naming store .
2602	Validate default values .
2603	Checks the type of the parameter .
2604	Lookup the default value annotation .
2605	Validate base type .
2606	Get deferred entity managers .
2607	Returns the string representation of the given status code .
2608	Add cache dependencies to all registered event listeners .
2609	Extract dialects from sql .
2610	Detects the database dialect .
2611	Identify the dialect .
2612	Checks the database .
2613	Parse the given string as a scheduler date .
2614	Set the node name .
2615	Marks a deployment unit .
2616	Read the parameters from the given input stream .
2617	Writes the return value to the output stream .
2618	Writes an exception to the output stream .
2619	Returns the first occurrence of the first occurrence of the first occurrence of the given lookup .
2620	Begin SFSB creation .
2621	End SFSB creation .
2622	Get the current SFSB call stack invocation .
2623	Pushes the given entity managers to the call stack .
2624	Pop a call from the stack .
2625	Get the current call from the stack .
2626	Adds the dependency to the deployment unit .
2627	Processes the XML managed beans .
2628	Process phase listeners .
2629	Returns the IDL name for the given class .
2630	Inserts a primitive into an Any object .
2631	Converts a java name to an IDL name .
2632	Checks if the given string is a reserved IDL keyword .
2633	Returns the signature of the given class .
2634	Returns the signature of a method .
2635	Returns the IDL name for a primitive type .
2636	Returns a batch permission by its name .
2637	Gets or creates a transaction scoped entity manager .
2638	Inserts the specified key - value pair into this map .
2639	Convert the security role to a ModelNode .
2640	Returns the most recent entity version .
2641	Loads the timers from a file .
2642	Returns the directory name for the given object id .
2643	Adds a listener to the list of listeners .
2644	Remove a listener .
2645	Fire an event .
2646	Close an AutoCloseable .
2647	Adds a private credential to the subject .
2648	Get the object instance .
2649	Adds the CMT transaction interceptor for the given view .
2650	Substitutes the given string from the given string to the given string .
2651	Creates the InVM transport configuration .
2652	Add EAR prefix if relative name .
2653	Returns the root deployment unit .
2654	Returns the service name .
2655	Creates a new view configuration .
2656	Creates the injection source .
2657	Returns the view interceptors for the given method .
2658	Add a view interceptor to this proxy factory .
2659	Adds an interceptor to the list of interceptor factories for the given method .
2660	Returns the client interceptors for the given method .
2661	Adds a client interceptor to the proxy factory .
2662	Add a client interceptor .
2663	Put private data .
2664	Throws an exception if an unexpected element is encountered .
2665	Gets the list of EJBEndpoints from the JAX - WS deployment .
2666	Gets the list of POJOEndpoints from JAX - WS deployment .
2667	Gets the endpoint name .
2668	Gets the endpoint class name .
2669	Returns the servlet with the given name or null if not found .
2670	Gets the attachment value from the deployment unit .
2671	Gets the optional attachment from the deployment unit .
2672	Gets the JBossWebMetaData from the deployment unit .
2673	Returns the JBossPortComponentMetaData for the given jboss webservice name .
2674	Gets the webservice metadata EJB endpoint .
2675	Gets the context root .
2676	Loads the class with the given name .
2677	Returns the URL of the named resource .
2678	Returns a collection of all resources found in the classpath .
2679	Returns a list of all resources under the given path .
2680	Pop the call from the non - transactional stack .
2681	Returns the entity manager associated with the given pu scoped name or null if none exists .
2682	Register the cleanup listener for the given JMSContext instance .
2683	Processes the annotations from the given deployment unit .
2684	Updates the server config .
2685	Checks if all fields are public .
2686	Creates an http endpoint .
2687	Creates a new deployment for the given deployment unit .
2688	Checks if the deployment is a javax . xml deployment .
2689	Sets the next timeout for this timer .
2690	Sets the state of the timer .
2691	Merge a list of deployment data into this deployment .
2692	Adds the JBoss invocation dependency to the deployment unit .
2693	Adds the remote transactions dependency to the deployment .
2694	Returns all container interceptors .
2695	Checks if the given method is a method level .
2696	Checks that only one of the given elements is present .
2697	Returns the type for the given class name .
2698	Returns the type at the given index or null if the index is out of bounds .
2699	Creates the key store resource definition .
2700	Creates the resource definition for the key managers .
2701	Creates the trust managers resource definition .
2702	Parse a name into a CNCompoundName .
2703	Convert a string into a vector of components .
2704	Parse a name component from a string .
2705	Deactivates the IR object .
2706	Convert a CORBA servant to a reference .
2707	Authenticate with the given username and password .
2708	Checks if the type is matched .
2709	Lookup a binding by its name .
2710	Unbinds a JNDI binding .
2711	Instantiates a bean .
2712	Configure the bean .
2713	Dispatch a lifecycle joinpoint .
2714	Returns the current selector .
2715	Converts a name to a JBoss bean name .
2716	Returns the JBOSS instance name for the given class and state .
2717	Returns the EEModuleClassDescription for the given name or null if not found .
2718	Process annotations .
2719	Post parse the persistence units .
2720	Validates the given descriptor .
2721	Creates the WarMetaData and JBossWebMetaData .
2722	Creates the web . xml descriptor .
2723	Gets the authentication method for the given deployment .
2724	Adds the JBoss service descriptor to the deployment unit .
2725	Handle stateless session bean .
2726	Creates a stub class .
2727	Returns an anonymous object id .
2728	Returns the list of persistence providers for this application .
2729	Clear the cache of persistence providers for the given deployment class loaders .
2730	Adds a persistence provider to the list of persistence providers for the given deployment class loaders .
2731	Find the parent module class loader .
2732	Adds the JBossServiceXmlDescriptor to the deployment unit .
2733	Adds the persistence unit service to the deployment .
2734	Sets the annotation indexes for all persistence units .
2735	Get persistence provider adaptor .
2736	Save per deployment shared persistence provider adaptor .
2737	Lookup the persistence provider .
2738	Returns the annotations for the given URIs .
2739	Creates the EJB archive metadata for the given deployment .
2740	Build the EJB bean metadata .
2741	Refresh the participant .
2742	Returns the container analysis for the given class .
2743	Lookup the done state for the given class .
2744	Creates a work - in - progress container analysis .
2745	Returns the IDL module name .
2746	Convert an integer to its hexadecimal representation .
2747	Converts a long into a hexadecimal string .
2748	Checks if the method is an accessor method .
2749	Checks if the method is a mutator .
2750	Checks if the given method has non - app exceptions .
2751	Returns the read name of an attribute .
2752	Get the attribute write name .
2753	Fixup overloaded operation names .
2754	Fixup case names .
2755	Escape IR name .
2756	Parse the XTS environment element .
2757	Parse the default context propagation element .
2758	Process attributes .
2759	Load provider module by name .
2760	Creates the add operation .
2761	Add the EJB API and EJB client dependencies to the deployment unit .
2762	Write an attribute .
2763	Returns the method intf associated with the given interceptor context .
2764	Creates a remote session .
2765	Returns the destination name of the given address .
2766	Register endpoint handlers .
2767	Returns an unmodifiable set of XML names for the given job .
2768	Load all job xml files and add them to the job list .
2769	Returns the URI of the request .
2770	Create a resolve result from a URL .
2771	Lookup an object by its name .
2772	Bind an object to a named name .
2773	Unbinds the specified path .
2774	Returns an enumeration of bindings for the given name .
2775	Call destroy on the given naming context .
2776	Destroy a subcontext .
2777	Bind a new context .
2778	Creates a new subcontext with the given name .
2779	Lookup a link by its name .
2780	Add a property to the environment .
2781	Remove a property from the environment .
2782	Adds transformations to the resource transformation description builder .
2783	Parse a credential .
2784	Remove a security domain .
2785	Look up the JNDI for the given name .
2786	Creates a ModularReference for the given type and factory class .
2787	Creates a new instance of the given factory class .
2788	Creates a new ModularReference for the given type and address .
2789	Returns the local IDLType for the given type code .
2790	Wait for a security domain service .
2791	Compute the masked password .
2792	Initializes the security vault .
2793	Start the vault session .
2794	Print the description of the creation of an attribute .
2795	Display the vault configuration .
2796	Returns the vault configuration .
2797	Throws an exception if the service is not started .
2798	Returns the deployment service name for the given resource adapter .
2799	Inserts the value into the given Any object .
2800	Returns true if this permission implies the given permission .
2801	Returns the action string .
2802	Returns the name of the log file .
2803	Sends a state change notification .
2804	Returns the state to bind to .
2805	Returns the value of the given type .
2806	Returns the context service name .
2807	Returns the set of all interceptors .
2808	Adds an interceptor to the given method .
2809	Adds a dependency to this component .
2810	Returns the list of component interceptors for the given method .
2811	Returns the interceptors for the given method .
2812	Add a timeout view interceptor .
2813	Adds an interceptor factory to the list of around construct interceptors .
2814	Add a post - construct interceptor .
2815	Adds an interceptor factory to the list of preDestroy interceptors .
2816	Add pre - passivate interceptor .
2817	Add a post - activate interceptor .
2818	Sets the component create service factory .
2819	Remove JNDI aliases .
2820	Add the remote transport provider to the builder .
2821	Returns the service name for the given component .
2822	Returns the context service name for the given application and module .
2823	Returns the bind info for an environment entry .
2824	Returns the bind info for the given JNDI name .
2825	Gets the cache .
2826	Get the value members .
2827	Get the value members for the type code .
2828	Creates the root of the Federation subsystem .
2829	Parse the configuration .
2830	Start the naming service .
2831	Adds the Weld integration service .
2832	Returns the job - operator service name .
2833	Adds a component to the deployment .
2834	Add a message destination .
2835	Returns the set of components for the given view type .
2836	Returns the set of component descriptions for the given component name .
2837	Returns a set of ViewDescriptions for the given component name and view name .
2838	Resolve message destination .
2839	Build transformers 2 . 1 . 0 .
2840	Reject defined attributes with default value .
2841	Rename an attribute .
2842	Pop the identity from the context .
2843	Loads the ids for the main module .
2844	Check version integrity .
2845	Compute the slot based on the jsf version
2846	Returns the constant type code for the given class .
2847	Adds a type code for the given class .
2848	Creates a package if it doesn t already exist .
2849	Add the interfaces in the given container analysis .
2850	Add the abstract base valuetypes .
2851	Adds a class to the list .
2852	Add an interface .
2853	Add a value to the value map .
2854	Add an exception to the exception map .
2855	Gets the class level injection type .
2856	Checks if jts is enabled .
2857	Start the naming store .
2858	Closes the root context .
2859	Check if the given method is allowed .
2860	Checks if transaction is sync .
2861	Get all component classes .
2862	Get the waiting on transaction completion timers .
2863	Returns the extra parameters from the given parameters .
2864	Get the parameters from the given configuration .
2865	Converts a type to a class .
2866	Converts the given value to the given type .
2867	Returns the types of the given values .
2868	Simple check .
2869	Returns the next binding in the list .
2870	Returns true if there are more bindings .
2871	Maps a CosNaming . Binding to a javax . naming . Binding .
2872	Observes the health check procedure .
2873	Close all health checks .
2874	Returns the EJB reference for the given locator .
2875	Returns the handle for the given locator .
2876	Convert an enum value to an enum value .
2877	Skips the given amount of bytes from the given input stream .
2878	Checks that there are only one required element .
2879	Add a component to the module .
2880	Adds the given set of class loaders to the deployment .
2881	Unbind the named component .
2882	Lookup an object by its name .
2883	Returns a list of all names in the directory .
2884	Returns a list of bindings for the given name .
2885	Adds a context handle factory .
2886	Save the current context to the database .
2887	Creates the IO subsystem .
2888	Creates the welcome - content handler .
2889	Get a bean from the pool .
2890	Calculates the operation analysis map .
2891	Collect resource metrics .
2892	Prepare the deployment unit .
2893	Adds the deployment to the deployment unit .
2894	Publishes the web application .
2895	Stop web app .
2896	Starts the container .
2897	Register an endpoint config .
2898	Attempt to retry the timer if it is active .
2899	Post timeout processing .
2900	Returns the declared methods of the given class .
2901	Returns an array of all declared fields of the given class .
2902	Returns a constructor with the given parameters .
2903	Returns the named method in the specified class .
2904	Adds the Messaging ActiveMQ extension .
2905	Checks if the parameter is allowed .
2906	Migrate the generic transport factory to the new one .
2907	Cancels the task .
2908	Run the task if it is not cancelled .
2909	Change the type of this property .
2910	Check if the function can be executed without an index .
2911	Estimates the number of indexes in the given class .
2912	Find all classes in the given directory .
2913	Returns the list of classes that implement the given interface .
2914	Get generic multivalue type .
2915	Evaluate a single record .
2916	Derives the field type from the given field name .
2917	Updates the given record .
2918	Find a record in the cache .
2919	Get minimal set of nodes for sharded query .
2920	Move flatteded equalities left .
2921	Adds additional ORDER BY projections to the query planning info .
2922	Extract all subqueries from the query planning info .
2923	Checks if the given rid is from the specified clusters .
2924	Handle class with index for sort only .
2925	Checks if the given class is a diamond hierarchy .
2926	Get the order direction .
2927	Checks if the given key condition requires multiple index lookups .
2928	Finds the best index for the given block .
2929	Build index search descriptor for fulltext .
2930	Returns the common factor for the given list of search descriptors .
2931	Creates a new instance of the given strategy .
2932	Check if the user has permission to execute the specified operation .
2933	Check if a rule is defined .
2934	Get the compact server status .
2935	Initializes the system database .
2936	Load local databases .
2937	Removes a member from the cluster .
2938	Acquires a new lock manager .
2939	Assign the lock manager to the cluster .
2940	Commit the micro - transaction .
2941	Rollbacks the current micro - transaction .
2942	Updates the identity after a record is committed .
2943	Updates the record cache after rollback .
2944	Prepare for file creation or replacement .
2945	Try to move the source file to the target file . If atomic move is not possible it will fall back to regular move .
2946	Returns a list of disjoint patterns .
2947	Execute only locally if it is idempotent .
2948	Append a sequence of characters .
2949	Returns true if the socket is connected .
2950	Merge two buffers into a short .
2951	Split a short into two buffers .
2952	Execute the command .
2953	Put a single value into the index .
2954	Remove a value from the map .
2955	Run the command .
2956	Run the query and return the first result .
2957	Creates the file .
2958	Checks that the requested region is valid .
2959	Replaces the content of this file with the given content file .
2960	Execute a command .
2961	End the request .
2962	Adds the given host to the list of available servers .
2963	Begin a request .
2964	Get the current database .
2965	Get connection by channel id and protocol .
2966	Kills the connection .
2967	Interrupt the given channel .
2968	Disconnects a connection from the server .
2969	Push distrib config to all clients .
2970	Swaps the value at the given index with the new value .
2971	Release all locks associated with this storage .
2972	Synchronize the schema .
2973	Update the metadata .
2974	Return the last cluster .
2975	Reads the next character from the stream .
2976	Execute the command .
2977	Set the onAsyncReplicationError callback .
2978	Register a compression algorithm .
2979	Get the limit of simultaneously open files for disk cache .
2980	Returns true if this expression allows indexed function execution on the given target clause .
2981	Move this buffer to the specified position .
2982	Fill the buffer with the specified length .
2983	Execute the script until the return value is found .
2984	Execute all steps until the return is found .
2985	Evaluate the record .
2986	Execute the command .
2987	Loads the configuration from the database .
2988	Parse the request .
2989	Execute the command .
2990	Update the schedule starting at .
2991	Adds an index definition to the composite key .
2992	Split the projection for an aggregate projection .
2993	Determine the type of the object .
2994	Returns the collate for the given document .
2995	Returns the string value .
2996	Advance the probe .
2997	Execute the command .
2998	Build a JSON document from a file .
2999	Check the password against the hash .
3000	Creates a hash .
3001	Checks if the given algorithm is supported .
3002	Creates a new index .
3003	Returns an iterable of all vertices in the graph .
3004	Returns an iterable of edges .
3005	Get the partition key .
3006	Get the distributed timeout .
3007	Returns the feature set .
3008	Checks if changes are filled up to the given page index .
3009	Parse the timeout .
3010	Parse the current token and check if it is NONE or RECORD .
3011	Creates a new cluster .
3012	Free a cluster .
3013	Register the current size of the cache .
3014	Shuts down the profiler .
3015	Creates a new result set with the given entity and transformer .
3016	Grant access to a role .
3017	Revoke access to the given resource .
3018	Delete a record from the database .
3019	Bind parameters .
3020	Resets the table .
3021	Returns the index of the given item .
3022	Spread a random number .
3023	Create an index .
3024	Drop all indexes related to this property .
3025	Returns the first index in the current schema .
3026	Returns the linked class .
3027	Convert the indexes to a stream .
3028	Remove a listener from the list of listeners .
3029	Register a distributed database .
3030	Timeouts a request .
3031	Create a copy of this database .
3032	Try to merge this bag with another bag .
3033	Replaces the underlying sbtree with the given collection pointer .
3034	Transform result .
3035	Adds the cluster to the database .
3036	Close the database pool .
3037	Called when a storage is unregistered .
3038	Returns the set of function names .
3039	Get the set of collate names .
3040	Returns a set of all available command types .
3041	Read the field size and type from the current position .
3042	Write the status code and reason .
3043	Write the response headers .
3044	Write the records to the response .
3045	Write a record to the response .
3046	Sends the response to the client .
3047	Sends a stream to the client .
3048	Open the database .
3049	Releases the database from the pool .
3050	Listen for changes to a collection .
3051	Completes a component operation .
3052	Pushes all counters from the snapshot to the given map .
3053	Push write cache counters to the snapshot .
3054	Push the storage counters to the snapshot .
3055	Push the WAL counters to the snapshot .
3056	Pushes the counters for the given component .
3057	Stop the write cache flush timer .
3058	Stop the fuzzy checkpoint timer .
3059	Stop the full checkpoint timer .
3060	Stop the commit timer .
3061	Stop the WAL record timer .
3062	Stop the WAL flush timer .
3063	Parse the statement .
3064	Initializes the receive messages thread .
3065	Initialize the check disconnect timer .
3066	Removes the record from the graph .
3067	Sets the value of the property .
3068	Removes a property from this vertex .
3069	Checks if the given class is a subclass of the base class .
3070	Wrap a cursor in an OIndexChangesWrapper .
3071	Define the vertex attribute strategy .
3072	Define the edge attribute strategy .
3073	Get new record entries by class .
3074	Get new record entries by cluster ids .
3075	Adds an index entry to the index .
3076	Merge two sets .
3077	Update the given record .
3078	Check if the function can be executed without an index .
3079	Prepare the keys for the given index .
3080	Writes a page to the buffer .
3081	Read a page from the file .
3082	Truncate the given page .
3083	Opens the WAL file .
3084	Check if replication is active .
3085	Returns the new node strategy .
3086	Check if execution mode is synchronous .
3087	Check if read - your - writes is enabled for the cluster .
3088	Get the server cluster map .
3089	Get the list of configured servers .
3090	Checks if a server is contained in all clusters .
3091	Checks if a server is contained in a cluster .
3092	Get the list of master servers .
3093	Get all configured servers .
3094	Get the set of clusters on the server .
3095	Get the set of clusters owned by this node .
3096	Get the owner of the cluster .
3097	Get the owner of the cluster .
3098	Get the list of configured servers .
3099	Get the list of registered servers .
3100	Get the set of data centers .
3101	Get the data center write quorum .
3102	Check if the cluster is sharded .
3103	Returns the list of servers in the specified data center .
3104	Returns the data center of the server .
3105	Get the global read quorum .
3106	Get the write quorum .
3107	Get the cluster configuration .
3108	Gets the data center configuration .
3109	Clear the initialization stack .
3110	Returns the index with the given name .
3111	Drop an index .
3112	Add a vertex to the graph .
3113	Adds an edge to the graph .
3114	Returns the vertex with the given id .
3115	Get all vertices of a given class .
3116	Get all edges of the specified class .
3117	Get an edge by its id .
3118	Reuse the given database .
3119	Shuts down the database .
3120	Returns the base type of this vertex .
3121	Get the vertex type .
3122	Create a new vertex type .
3123	Drop a vertex type .
3124	Get the edge type .
3125	Create an edge type .
3126	Returns the element with the given id .
3127	Drop a key index .
3128	Creates an index for the given key .
3129	Remove a background exception listener .
3130	Fire the background data flush exception event .
3131	Stop monitoring .
3132	Register the mbean with the platform MBeanServer .
3133	Unregister an MBean for performance statistics .
3134	Fetch the write cache counters .
3135	Fetch system counters .
3136	Fetch the counters for the given component .
3137	Compress a JSON string to a byte array .
3138	Get the value of a property .
3139	Detach the object from the database .
3140	Returns the version of the given object .
3141	Execute a command .
3142	Set the dirty state of the given object .
3143	Unset the dirty state of the given object .
3144	Get the list of index types .
3145	Returns a set of all available index engines .
3146	Returns the list of missing nodes .
3147	Returns the list of conflict responses .
3148	Returns the best response group .
3149	Compute quorum response .
3150	Get the list of received responses .
3151	Get the execution plan for the given statement .
3152	Returns true if the operator allows indexed function execution on the given target .
3153	Get the library for the given language .
3154	Release the database engine .
3155	Get the next position .
3156	Updates the size of the bag .
3157	Returns the value at the given index .
3158	Can be used by order by after filter .
3159	Returns the index of the first occurrence of iToFind within iText .
3160	Jump white spaces to the current position .
3161	Jump the character at the current position .
3162	Set the fetch plan .
3163	Enqueue a repair record .
3164	Cancel a repair record .
3165	Enqueue a repair cluster .
3166	Returns the dependencies of the given pattern .
3167	Creates a new pojo of the specified class .
3168	Register entity classes .
3169	Register entity classes .
3170	Set the class handler .
3171	Acquire a database .
3172	Returns the number of available connections .
3173	Acquire a database .
3174	Execute the cluster synchronization .
3175	Lookup provider with orient class loader .
3176	Check the cache memory configuration .
3177	Convert a JSON vertex to a vertex .
3178	Convert a JSON edge to an edge .
3179	Convert an element to a JSON object .
3180	Convert an element to an object node .
3181	Execute the import .
3182	Returns the current status of the job .
3183	Get the active data center map .
3184	Extract the algorithm from the given string .
3185	Creates an OSymmetricKey object from the given configuration .
3186	Create an OSymmetricKey from a file .
3187	Creates an OSymmetricKey from an input stream .
3188	Encrypt the given bytes using the given transform .
3189	Save the key to an output stream .
3190	Save the key to keystore .
3191	Set the child context .
3192	Adds an object to the unique result .
3193	Get the value as object or map .
3194	Authenticates a database .
3195	Get the value of an entry in a map .
3196	Get the current record .
3197	Read the current record from the database .
3198	Get the transaction graph .
3199	Get no - tx graph .
3200	Setup the pool .
3201	Get the property .
3202	Stop the transaction .
3203	Parse a statement .
3204	Get the next token .
3205	Returns the token at the given index .
3206	Generate a parse exception .
3207	Returns an iterable of all the vertices in the database .
3208	Remove this vertex from the graph .
3209	Adds an edge to the graph .
3210	Adds an edge to the graph .
3211	Get the connection class .
3212	Get the connection class for a given field .
3213	Process broken RIDs .
3214	Get the list of available console methods .
3215	Executes the task on the local node .
3216	Returns the number of nodes with the given status .
3217	Backup the file to the given output stream .
3218	Wait for next retry .
3219	Get the argument at the given position .
3220	Check if the request has any of the specified parameters .
3221	Connect to the remote server .
3222	Returns a list of all available databases .
3223	Get server information .
3224	Check if a database exists .
3225	Drop a database .
3226	Freeze the remote database .
3227	Releases the remote database .
3228	Returns the cluster status .
3229	Execute the command .
3230	Get the current active graph .
3231	Parse the retry .
3232	Saves a record to the database .
3233	Delete a record .
3234	Gets the authentication header .
3235	Authenticate by username and password .
3236	Check if the user is authorized to execute the specified resource .
3237	Run the server .
3238	Adjust the beginning line and column .
3239	Set the bucket pointer .
3240	Get the bucket pointer .
3241	End an atomic operation .
3242	Acquires the exclusive lock and adds it to the atomic operation .
3243	Change the maximum amount of memory used by the disk cache .
3244	Listen for incoming connections .
3245	Read parameters from server configuration .
3246	Shuts down the log manager .
3247	Adds an item to the cache .
3248	Removes the entry with the given key .
3249	Acquires the entry for the given key .
3250	Returns the value associated with the given key .
3251	Clear the cache .
3252	Closes the entry for the given key .
3253	Empty the read buffers .
3254	Called after a write operation .
3255	This method is called after the entry has been read .
3256	Put the entry in the read buffer .
3257	Returns the closest power of two .
3258	Called when an event is received from the server .
3259	Convert a key to an enum value .
3260	Convert all values of the underlying map to their corresponding enum values .
3261	Get the serializer for the given type .
3262	Initialize the shutdown queue .
3263	Returns the engine with the given name .
3264	Execute the optimize operation .
3265	Execute the query .
3266	Adds a new state to the list of readers .
3267	Authenticate the user with the given token .
3268	Creates the metadata for the user .
3269	Try to acquire a read lock .
3270	Returns the current vertex in the given direction .
3271	Returns the id of the element .
3272	Sets the value of the property .
3273	Removes a property from the graph .
3274	Removes all sub - trees from the tree .
3275	Deletes this bucket .
3276	End the importer .
3277	Adds a new vertex to the graph .
3278	Parse the strategy .
3279	Get the positions from an embedded collection .
3280	Execute the command .
3281	Fix link .
3282	Fill the given record with the contents of the given buffer .
3283	Set the version of the record .
3284	Get the record type .
3285	Initializes the database instance .
3286	Print the stack trace of an exception .
3287	Execute the index query .
3288	Convert a link to a record .
3289	Register a command instance .
3290	Creates a server user configuration from the given user document .
3291	Analyze the given condition and return a list of index search results .
3292	Creates an indexed property .
3293	Attaches all fields to the given object .
3294	Returns the index class .
3295	Next with new current value .
3296	Truncate this class .
3297	Add a base class to this class .
3298	Adds the polymorphic cluster ids to the index .
3299	Link to stream .
3300	Release a pointer to the pool .
3301	Checks that all memory leaks have been detected .
3302	Removes all pointers from the pool .
3303	Convert a byte array to an int .
3304	Called when the node is opened .
3305	Install clusters of a given class .
3306	Dump server status .
3307	Returns the index of the first occurrence of the specified object in the specified array or - 1 if the array is empty .
3308	Returns the index of the object in the array or - 1 if the object is not present in the array .
3309	Returns the set of clusters that are involved in the target .
3310	Handle the result .
3311	Get the current temporary RID counter .
3312	Report the message to the user .
3313	Parse the fetch plan .
3314	Parse the NOCACHE keyword .
3315	Optimize the sort .
3316	Returns the current status of the job .
3317	Execute the command .
3318	Handle JVM error .
3319	Put a value into the index .
3320	Rolls back the given micro - transaction .
3321	Execute a command .
3322	Register a cluster .
3323	Set the property .
3324	Execute the CREATE CLASS command .
3325	Execute the SYNCHRONIZE DATABASE .
3326	Delete a record from the database .
3327	Callback all registered hooks for the given type .
3328	Delete a record from the database .
3329	Count the number of rows in a given view .
3330	Count the number of instances of the specified class .
3331	Activate this database on the current thread .
3332	Register a storage encryption algorithm .
3333	Returns the relative index of the given position .
3334	Parse the next word .
3335	Parse the required word .
3336	Parse the next chars .
3337	Parse an optional keyword .
3338	Check if the current character is a separator .
3339	Execute the DROP CLASS command .
3340	Clear the configuration files .
3341	Get the current position as a byte array offset .
3342	Extract the token .
3343	Acquires an access token .
3344	Copy the access token from the current context .
3345	Returns true if there are no more characters .
3346	Read a line from the input stream .
3347	Read a line from the input stream .
3348	Skips n bytes from the input stream .
3349	Skips n bytes from the input stream .
3350	Ensure that the offset and length are valid .
3351	Merge sort .
3352	Swaps the elements of two integers .
3353	Perform a quick sort in parallel .
3354	MurmurHash3 hash function .
3355	MurmurHash3 hash function .
3356	Writes the given byte buffer to the underlying file .
3357	Truncate the file to the given size .
3358	Sets the position of the underlying byte stream .
3359	No fail refresh end metrics reporting .
3360	Await the completion of the current tasks .
3361	Find matches .
3362	Find all compactions that are dependent on any targeted types .
3363	Delete all the snapshots .
3364	Returns the hash code for the given field .
3365	Returns true if the two fields are equal .
3366	Remove references outside closure .
3367	Called when an announcement is complete .
3368	Called when a cycle is complete .
3369	Read the header tags .
3370	Extract the primary key from an object .
3371	Clear all the bits in this set .
3372	Reads the ordinals from the given stream .
3373	Returns the number of bits used by this set .
3374	Gets the field value .
3375	Copies length bytes from src to dest .
3376	Copies length bytes from srcPos to destPos .
3377	Returns true if all the bytes in the given range are equal .
3378	Copies the specified bytes from the source byte array to the destination byte array .
3379	Returns the number of bytes copied from srcPos to destPos .
3380	Reads from the given input stream .
3381	Writes the contents of this buffer to the given stream .
3382	Ensure that the given segment is allocated at least once .
3383	Returns the position of the given field .
3384	Calculates the total number of select buckets .
3385	Checks if there are any collections in a dataset .
3386	Generates the Java files for the Hollow API .
3387	Generate files for Hollow schemas .
3388	Returns true if the given keys match .
3389	Returns the record key for the given ordinal .
3390	Creates a field path for a primary key .
3391	Creates a field path for a hash index .
3392	Creates a field path for a prefix index .
3393	Put an object into the cache .
3394	Initializes the totalWords and averageWordLen .
3395	Returns true if the given key exists in the prefix index .
3396	Returns the change percent .
3397	Adds a field to the specified type .
3398	Returns a list of ordered schemas from a collection of schemas .
3399	Initialize with the next major version defaults .
3400	Returns the value at the given index .
3401	Find all matching records for the given field and field value .
3402	Find all matching records for the given type and field .
3403	Sets the element match paths .
3404	Sets the element key paths .
3405	Calculates the results .
3406	Restore from last state .
3407	Run the cycle .
3408	Exclude the given key .
3409	Exclude all objects that are referenced by this object .
3410	Writes the HollowBlobHeader to the stream .
3411	Calculates the total heap footprint and populated ordinals for each type .
3412	Writes the data to the given byte buffer .
3413	Write a fixed length integer .
3414	Write fixed length long .
3415	Return an ordinal to the pool .
3416	Sort the free ordinals .
3417	Returns a hash value for the given key and field type .
3418	Returns the hash code for the given key and field type
3419	Resize the storage .
3420	Finds the free ordinal for the given preferred ordinal .
3421	Prepare for write .
3422	Compares the serialized representation with the given key .
3423	Grows the key array .
3424	Rehashes the previously added data .
3425	Returns an empty key array with the given size .
3426	Returns true if the matchIdx and otherMatchIdx are equal .
3427	Find a match for the given key .
3428	Swaps the current state with the pending state .
3429	Returns the size of the hash table .
3430	Run compaction cycle .
3431	Writes the current state to the given output stream .
3432	Writes the delta to the given stream .
3433	Adds the given schema names to the given set if it is not primitive or collection .
3434	Normalize a field path to a parameter name .
3435	Reindex the hash index .
3436	Find matches .
3437	Trigger async refresh with random delay .
3438	Trigger an async refresh with a delay .
3439	Add a type diff .
3440	Calculates the differences for all the types .
3441	Write a VLong to the output stream .
3442	Write a VInt to the output stream .
3443	Write a VInt to a byte array .
3444	Reads a VInt from an input stream .
3445	Reads a VLong from an input stream .
3446	Add a child view to the list .
3447	Refresh the loading views size .
3448	Updates the UI for the current mode .
3449	Called when a pull event is received .
3450	Over scroll by .
3451	Creates a new given rule builder .
3452	Adds the given facts to the given rule .
3453	Creates a new rule builder .
3454	Creates a new rule builder .
3455	Creates a new rule builder with the given fact type .
3456	Returns a new instance of this builder with the specified result type .
3457	Creates a new rule with the given name and value .
3458	Creates a new rule with the given facts .
3459	Creates a new ThenRuleBuilder with the given action .
3460	Creates a new instance of the given rule .
3461	Returns the first field annotated with the given annotation .
3462	Returns the first method annotated with the given annotation .
3463	Returns the annotation of the given type or null if not found .
3464	Register an audit rule .
3465	Updates the status of a rule .
3466	Returns the map of rule status for the current thread .
3467	Sets the result type of this builder .
3468	Adds an action to the then rule .
3469	Adds an action to the then rule .
3470	Resets the value to the default value .
3471	Adds a new rule to the rule book .
3472	Returns a list of all rules found in the given package .
3473	Read an empty line or end of table .
3474	Convert a list of services to an array .
3475	Get the list of ports from the build configuration
3476	Extract ports from config .
3477	Parse port mapping .
3478	Adds a port if it is not null .
3479	Removes the first port from the list and returns it .
3480	Adds missing service parts .
3481	Appends an image stream descriptor to the given target file .
3482	Checks if the ports match .
3483	Returns the value of the service port environment variable or the system property if not set .
3484	Get service host and port .
3485	Adds the value to the map if it doesn t already exist .
3486	Merge the given map with the given map if it does not already exist .
3487	Merge two maps into one .
3488	Adds the given map to the given map if it is not null .
3489	Wait until the pod is ready .
3490	Validate the Kubernetes ID .
3491	Converts an entity to a list of HasMetadata objects .
3492	Gets the resource version of an entity .
3493	Checks if a pod is ready .
3494	Get the current context .
3495	Checks if a route exists .
3496	Checks if any of the given paths exists in the compile class loader .
3497	Read and enrich a fragment from a file .
3498	Convert a map of environment variables to a list of EnvVar objects .
3499	Merge two resources .
3500	Merge the override map and remove empty strings .
3501	Checks if the pod is local customisation .
3502	Read the configuration from a file .
3503	Adds the port if it is valid .
3504	Get docker json config string .
3505	Returns the configuration for the given plugin .
3506	Returns the secret configuration for the given id .
3507	Downloads the given URL to the target file .
3508	Compares two versions .
3509	Blends the given profile with the given configuration .
3510	Lookup a profile by its name .
3511	Read a profile from the classpath .
3512	Read all profiles from the classpath .
3513	Finds the profile yaml file .
3514	Get the list of meta - inf profile paths .
3515	Creates a list of profiles from yaml .
3516	Get image pull policy .
3517	Checks if the runtime is in OpenShift mode .
3518	Gets the replica count .
3519	Returns the first child element with the given name .
3520	Installs a template .
3521	Removes a tag by its name .
3522	Apply a namespace to the given entity .
3523	Apply a project .
3524	Apply a project request to OpenShift .
3525	Get the namespace for the given entity .
3526	Logs an error and throws a runtime exception .
3527	Adds a default namespace or project to the list builder .
3528	Enrich the given KubernetesListBuilder .
3529	Get environment variables .
3530	Returns the duration in seconds .
3531	Returns the duration in nanoseconds .
3532	Scans the output directory for files that match the given patterns .
3533	Disable OpenShift features .
3534	Checks if the given service has an IngressRule .
3535	Parse the given mapping .
3536	Creates a generator context .
3537	Extract the generator config .
3538	Gets the enricher context .
3539	Extract enricher config .
3540	Returns the default icon ref .
3541	Copy the app config files to the build directory .
3542	Get the properties from the given resource .
3543	Gets the SpringBoot version from the Maven project .
3544	Creates a list of service objects from the given descriptor paths .
3545	Enrich a list of enrichers .
3546	Get the raw config map .
3547	Convert a map into a flattened map .
3548	Extract the watcher config from the profile .
3549	Gets the singleton template from a list of resources .
3550	Get the build reference date .
3551	Returns the value of the given key or the default value if the key is not found .
3552	Returns the configuration map for the given name .
3553	Returns a list of processors for the given type .
3554	Adds the from configuration to the builder .
3555	Get from mode default .
3556	Returns the image name .
3557	Returns the registry .
3558	Checks if the fabric8 is online .
3559	Get the external service URL .
3560	Returns the value of the given property or null if the property is not set .
3561	Creates the Jest client .
3562	Creates the internal node .
3563	Scans the classpath for plugins .
3564	Creates an AmericanExpressRewardsBalance from a JSON string .
3565	Gets the rewards balance .
3566	Creates a PayPalPaymentResource object from a JSON string .
3567	Get the resource at the given path .
3568	Sends a POST request to the server .
3569	Creates a VenmoConfiguration object from a JSON object .
3570	Collect device data from a fragment .
3571	Collect device data .
3572	Collect paypal device data .
3573	Get PayPal client metadata id .
3574	Checks if the signature is valid .
3575	Get the value of a property as a string or fallback if the property is not present .
3576	Parse the payment method nonce list from a JSON string .
3577	Get the browser checkout config .
3578	Returns the billing agreement recipe for the browser .
3579	Execute a GET request on the server .
3580	Sends a POST request to the given path with the given data .
3581	Sends a POST request to the server .
3582	Starts a local payment .
3583	Approves the local payment .
3584	Adds a listener to the Braintree .
3585	Remove a listener .
3586	Request billing agreement .
3587	On activity result .
3588	Parse the response to a PayPalAccountBuilder .
3589	Adds a list of words to the dictionary .
3590	Removes the given words from the dictionary .
3591	Convert a sequence of tokens to a list of Java strings .
3592	Extract phrase from a sequence of tokens .
3593	Detokenize a list of tokens .
3594	Reads data from the given channel into the given buffer .
3595	Join a list of NAL units into a single ByteBuffer .
3596	Joins a list of NAL units into a single byte buffer .
3597	Returns the profile with the given index .
3598	Normalize and generate fixed precision .
3599	Reads to the next marker partial .
3600	Read to the next marker new buffer .
3601	Returns the maximum number of available frames .
3602	Modify an MP4 file .
3603	Copies the contents of a file to another file .
3604	Returns the total duration of all edits in the given track .
3605	Returns the time value of a given frame .
3606	Convert a time value to a frame number
3607	Convert a media time to the edited time .
3608	Converts the edited time to the media time .
3609	Get the QT player frame number .
3610	Get the player time .
3611	Convert a timevalue to a timecode frame
3612	Format a timecode .
3613	Returns a 7 - bit integer .
3614	Set a number of bits in a list .
3615	Returns true if this color space matches the input color space .
3616	Returns the size of the specified component .
3617	Creates an MP4 demuxer from an input channel .
3618	Reads the next word from the cache .
3619	Creates a WAV header .
3620	Creates a multi - channel wav header from an array of wav headers .
3621	Parse MP4 decoder specific info .
3622	Encodes the state of the state machine .
3623	Read the decoder pic marking .
3624	Split a movie and a track .
3625	Decodes a single frame from the input stream .
3626	Sets whether the data is big - endian or not .
3627	Deblock the given block from left to top .
3628	Encode a native frame .
3629	Encode a long into a byte array .
3630	Returns the length of an EBML value .
3631	Adds a packet to the output stream .
3632	Repositions the file .
3633	Decodes a binary value .
3634	Decode binary bypass .
3635	Goto marker .
3636	Returns the sample frequency for the given integer .
3637	Predicts the plane .
3638	Sets the start of the block .
3639	Calculates the coeff of a block .
3640	Finishes a block .
3641	Concatenates the given bits buffer into this buffer .
3642	Rewind the reverse of a 32 - bit integer .
3643	Rewinds the reverse of a 64 - bit integer .
3644	Seeks to the specified key frame .
3645	Get the pixel buffer for the first frame .
3646	Returns the ID of the change point .
3647	Convert a byte array to an int array .
3648	Converts an integer array to a byte array .
3649	Convert a AudioFormat into a FloatBuffer .
3650	Read a float from the given buffer .
3651	Interleaves an array of bytes into an output buffer .
3652	Deinterleaves the input buffer into the output buffers .
3653	Returns the compressed size of the video track .
3654	Build the box out map .
3655	Build the wipe map .
3656	Read a batch of ULs from the given ByteBuffer .
3657	Read a batch of 32 - bit integers from the given ByteBuffer .
3658	Calculates the MV prediction median .
3659	Encode a frame .
3660	Encode an ID frame .
3661	Encode a P frame .
3662	Returns a list of all supported codecs .
3663	Returns a list of all supported tags .
3664	Adds a reference to the list of valid references .
3665	Remove all references from the reference queue .
3666	Flush all references to the cache .
3667	Load a library .
3668	Unpacks a library .
3669	Delete temporary files .
3670	Returns the default layout for the specified number of channels .
3671	Returns the channel at the specified index in the specified layout .
3672	Create a new media packet .
3673	Get the version information .
3674	Get the default time base .
3675	Create a new Demuxer .
3676	Play a video .
3677	Display video at correct time .
3678	Create a new codec descriptor .
3679	Prints an option to the given stream .
3680	Register a factory for the given protocol prefix .
3681	Generates a unique name .
3682	Create a new MediaAudioResampler .
3683	Gets the supported video frame rates .
3684	Returns a list of supported pixel formats .
3685	Returns the list of supported audio sample rates .
3686	Returns the list of supported audio formats .
3687	Returns the list of supported audio channel layouts .
3688	Sets the flag of this coder .
3689	Sets the value of the specified flag .
3690	Returns the decoder associated with this stream .
3691	Get the current demuxer .
3692	Gets the list of supported formats .
3693	Create a new filter graph .
3694	Returns the type of this filter .
3695	Returns a byte buffer with the specified offset and length .
3696	Creates a new audio frame from the given audio format .
3697	Resample the given image using the given resampler .
3698	Validates the passed image .
3699	Validates the given picture .
3700	Returns the filter graph associated with this link .
3701	Returns the metadata of this media .
3702	Returns the CPUArch for the given Java CPU .
3703	Get the CPUArch from a GNU string .
3704	Returns the OS family for the given OS name .
3705	Get the OS family from a GNU string .
3706	Play a sound .
3707	Load the specified library if it is not already loaded .
3708	Set the major version of a library .
3709	Load a library from a list of libraries .
3710	Initializes the search paths .
3711	Checks if the specified library is already loaded .
3712	Record the screen .
3713	Deletes this object from the pool .
3714	Returns the stream at the specified position .
3715	Get the current Muxer .
3716	Creates a script transaction .
3717	Decodes a base58 encoded string into a byte array .
3718	Generates a random seed .
3719	Returns the transaction with the given id .
3720	Get a list of transactions for a given address .
3721	Get a list of transactions for a given address .
3722	Returns a list of all block headers in the specified range .
3723	Get the block with the given signature .
3724	Send a transaction .
3725	Set a script .
3726	Compile a script .
3727	Write a primitive array .
3728	Flushes the buffer to the output stream .
3729	Writes an object to the output stream .
3730	Read the last direct class .
3731	Serialize an object to a byte array .
3732	Set the file and the file channel .
3733	Returns the specificity of the given class .
3734	Resizes the store .
3735	Removes the given key from the index .
3736	Write a string in Ascii format .
3737	Set the output stream .
3738	Creates a new FSTConfiguration from the given flag combination .
3739	Creates an instance of the FSTConfiguration class .
3740	Calculates the size of the object not a utility .
3741	Clear all cached objects .
3742	Get a FSTObjectInput from an input stream .
3743	Get an object input .
3744	Get a copy from an array of bytes .
3745	Get the object output stream .
3746	Register cross platform class mapping .
3747	Returns the CP name for the given class .
3748	Write an integer .
3749	Write a raw int .
3750	Write an int packed .
3751	Write an array .
3752	Writes an array of bytes to the buffer .
3753	Get the FSTFieldInfo for the given possible classes .
3754	Notifies the listener that an object has been written .
3755	Notify the listener that an object has been written .
3756	Get the FSTClazzInfo for the given class .
3757	Write an array .
3758	Set the string .
3759	Write a primitive array .
3760	Finish the change tracking .
3761	Creates a snapshot of changes from the origin .
3762	Register an object for writing .
3763	Write an object to a byte array .
3764	Converts a byte array into an object .
3765	Read a byte array .
3766	Reads a 4 - byte integer from the stream .
3767	Moves the index back to the end .
3768	Enable or disable the thread pool .
3769	Start embedded cassandra .
3770	Clean data embedded cassandra .
3771	Copy a resource to the given directory .
3772	Prints information about all active threads and their state .
3773	Returns true if the remote port is taken .
3774	Creates a new empty subscriber state .
3775	Loads the onnxops . json file and returns it as a map .
3776	Calculates the output shape .
3777	Returns true if the condition evaluates to true for all elements in the given array .
3778	Returns true if the condition evaluates to true
3779	Returns a boolean array of all the elements of n that match the given condition
3780	Returns a boolean array where each element is greater than 0
3781	Apply a condition to an ndarray
3782	Returns the first index of the given array
3783	As flat properties .
3784	Create FunctionProperties from FlatProperties
3785	Convert a collection of FunctionProperties into a flat properties vector .
3786	Set the exception .
3787	Set the first exception .
3788	Merge two lists of coordinates .
3789	Partition a variable .
3790	Convert TensorProto . DataType to DataBuffer . Type
3791	Shuts down the connection .
3792	Get the current device architecture
3793	Convert a column to an image
3794	Pooling 2D image
3795	Creates a new compression descriptor from a byte buffer .
3796	Splits the given list into batches of the given size .
3797	Validate that all arrays have the same dimensions
3798	Set the data type .
3799	Linspace function .
3800	Flatten a collection of matrices into a flattened array
3801	Bilinear products of a tensor
3802	Creates a complex ndarray from a double array .
3803	Create a complex value vector
3804	Create a complex value of the given shape
3805	Returns whether or not we should replicate .
3806	Subtracts this complex number from another complex number .
3807	Returns the angle of a complex number
3808	Ceil of a complex number
3809	Negate a complex number
3810	Returns the absolute value of a complex number
3811	Pow of two complex numbers
3812	Creates a new Aeron context .
3813	Binarizes the features according to the given cutoff
3814	Sample the data set using the provided random number generator
3815	Returns the number of bytes required to store the data in memory
3816	Converts an exception to a string .
3817	Returns the first part of the given hostname .
3818	Convert an array of strings to a comma separated string .
3819	Converts a byte array into a hexadecimal string .
3820	Returns an array of all the values of the given string separated by the given delimiter .
3821	Split a string into an array of strings .
3822	Split a string into an array of strings .
3823	Returns the index of the first occurrence of the given separator or - 1 if the separator is not found .
3824	Escape HTML .
3825	Joins an iterable of strings using the given separator .
3826	CamelCase a string .
3827	Replaces all tokens in the given template with the given replacements .
3828	Returns the stack trace of the given thread .
3829	Returns the inverse of an array
3830	Returns the element at the given index .
3831	Checks if the device is on the host side .
3832	Checks if the device is on the device side .
3833	Creates the shape information .
3834	Create the shape information .
3835	Checks if the given shape is a vector .
3836	Returns the order of the elements in the given array
3837	Returns the offset for the given indexes
3838	Convert an array of indices to an array of indices
3839	Returns the short at the given position in this buffer .
3840	Reallocate the data buffer .
3841	Copies n bytes from the given buffer to the given buffer .
3842	Get the constant buffer for the given array
3843	Returns the URI of the Kafka broker .
3844	Pow function .
3845	Logarithm of an ndarray
3846	Compute the maximum value of an ndarray
3847	Computes the maximum value of two arrays
3848	Compute the minimal value of an ndarray
3849	Computes the minimum value of two arrays
3850	Stabilizes an ndarray
3851	Expm1 operation .
3852	Log 1 logarithm of an ndarray
3853	Prepare the bounds
3854	Adjusts the scheme to the bounds
3855	Returns the next data set .
3856	SGEQRF algorithm .
3857	Build an allocation shape from a data buffer .
3858	Checks if the given name exists in the given path .
3859	Read the data from the stream .
3860	Sweep the tail of the queue .
3861	Create an ndarray from a NpyPointer
3862	Create an ndarray from a NPY file
3863	Allocates a new pointer to this workspace .
3864	Attaches an object to the cache .
3865	Returns true if the server is started .
3866	Executes the given op .
3867	Flushes the queue blocking .
3868	Returns an input stream to the file .
3869	Returns the device id for the given thread .
3870	Attaches a thread to a device
3871	Returns the next available device for the given thread .
3872	Returns the name of the operating system .
3873	Calculates the architecture of the operating system .
3874	Publish an array to the server
3875	Start the server .
3876	Creates a new DataBuffer .
3877	Intercept int data type .
3878	Adds two complex numbers .
3879	Process the message .
3880	Avg pooling 3d operation
3881	Depth - Wise Conv2d operation
3882	Resets the aggregator .
3883	Returns the class name of the given op .
3884	Store and allocate a new array .
3885	Returns the shape of the array .
3886	Evaluate the function .
3887	Compress a double array
3888	Returns the expi of the given array
3889	Returns the center of an array .
3890	Truncate an IComplexNDArray .
3891	Pads the given IComplexNDArray with zeros .
3892	Compute the maximum value of the elements of an ndarray
3893	Broadcast an array to all devices
3894	Process the message .
3895	Returns the GAMMA value .
3896	Returns the square root of x .
3897	Cbrt .
3898	Returns the root of a number .
3899	Returns the exp of x .
3900	Returns the exp of this number .
3901	Pows x by y .
3902	Pows the given number of times .
3903	Returns the sin of the given number .
3904	Tan function .
3905	Cosh function .
3906	Sineh function .
3907	Tanh function .
3908	Asinh function .
3909	Cosh function .
3910	Gamma function .
3911	Broadhurst algorithm .
3912	Scales a BigDecimal by the given number of decimal places .
3913	Scales a BigDecimal to the nearest precision .
3914	Convert an error value to a precision value .
3915	Put a function for the given id .
3916	Returns the inputs for the given function .
3917	Updates the array for the given variable .
3918	Put a shape for a variable .
3919	Associate an array with a variable
3920	Get property for function .
3921	Add a property for a given function
3922	Add outgoing arguments for a given function .
3923	Adds the given arguments for the given function .
3924	Check if the given function has any incoming arguments .
3925	Execute the operation and return the results .
3926	One variable with constant init scheme .
3927	One - by - one operation .
3928	Zero - like operation .
3929	Remove argument from function .
3930	Set the gradient for the given variable name
3931	Average pooling 3d operation .
3932	Create a GRU cell
3933	Execute a list of ops
3934	Create a while statement
3935	Execute the function .
3936	Executes the given function and returns the results .
3937	Execute the backward operation and return the result
3938	Adds a variable as a place holder .
3939	Allocates memory from host or device .
3940	Returns the length for the given data type .
3941	Returns the d - type name for the given allocation mode .
3942	Get the data type from the context
3943	Get the op number by its name .
3944	Destroy all workspaces for the current thread .
3945	Print the allocation statistics for the current thread
3946	Tridiagonal MV operation
3947	Receive the data from the server
3948	Execute the accumulation operation
3949	Decode the given encoded vector into the target vector
3950	Returns the name of the node .
3951	Invoke the tad operation .
3952	Assert that no workspaces are open
3953	Returns the negative log likelihood
3954	Request a tick .
3955	Try to request toe .
3956	Release the toe .
3957	Returns the current access state .
3958	Build the environment
3959	Process the message .
3960	Initialize the current dataset from a list of examples
3961	Initialize host collectors
3962	Get the pointer to the device .
3963	Synchronize host data .
3964	Apply the update to the historical gradient
3965	Synchronizes the given allocation point to the host .
3966	Creates an NDArrayIndex from an ndarray
3967	Gets properties for function .
3968	Check if there are any place holder inputs .
3969	Execute the diff operation .
3970	Format an ndarray
3971	Import a graph into a SameDiff .
3972	Convert an IComplexNDArray to a Blob
3973	Load a complex array from a blob
3974	Save a complex array to a file .
3975	Copy the real values to the given array
3976	Copies the real and imaginary values to the given array
3977	Set the EPS of this array to the EPS of the given number
3978	Assigns the elements of this array to the elements of the other array .
3979	Get the rows of the matrix
3980	Put a row into the matrix
3981	Put a column to this matrix
3982	Subtraction of this vector with another vector
3983	Adds the elements of this vector to the result vector .
3984	Subtraction of this vector with another vector
3985	Adds the elements of this vector to the result vector .
3986	Assign a complex number to this array
3987	Returns a copy of this array .
3988	Returns the eigenvalues of the given matrix
3989	Calculates the symmetric generalized eigenvalues of A and B
3990	Computes the maximum value of a complex array .
3991	Copies a complex vector to another complex vector .
3992	Scales an array of complex numbers .
3993	Process the SkipGramRequestMessage .
3994	Count the number of non - zero labels
3995	Reduce loss .
3996	Returns the no - arg constructor for the given class .
3997	Gets the constructor for the given class .
3998	Invokes the given method with the given arguments .
3999	Returns the first annotation of the given type .
4000	Returns the declared annotation of the given type .
4001	Checks if an annotation is present on the given class .
4002	Creates a proxy for the given result type .
4003	Load the given entity .
4004	Saves the given POJO to the database .
4005	Creates a proxy for the given MemcacheService .
4006	Gets metadata safe .
4007	Query keys - only .
4008	Run a hybrid query .
4009	Executes a normal query .
4010	Executes a projection query .
4011	Count the number of keys in the datastore .
4012	Partition an iterator by the given size .
4013	Loads the results from the given iterator .
4014	Append a message to the given path .
4015	Creates a key for the given pojo .
4016	Compares two keys using the identity hash .
4017	Creates a new Key object from the raw key .
4018	Converts a typed key into a datastore key .
4019	Get the kind of the entity .
4020	Checks if the given type is missing type parameters .
4021	Checks if the given type is a super type of the given type .
4022	Returns the exact direct super types of the given type .
4023	Capture the given type .
4024	Returns the translator for the given type .
4025	Get the populator for the given type .
4026	Returns whether or not the given class is an index instruction .
4027	Checks if the method is of interest .
4028	Returns a list of all properties declared in the given class .
4029	Returns the key metadata for this entity .
4030	Get the result for the given key .
4031	Executes the round .
4032	Fetch all pending entities from the datastore .
4033	Adds the indexed discriminators for the given class .
4034	Register a class translator .
4035	Returns the component type of the given collection type .
4036	Returns the key type of the map .
4037	Creates a new forward path from the given path .
4038	Returns the final path of this path .
4039	Returns a string representation of this path .
4040	Returns the depth of this path .
4041	Adds the given updates to the cache .
4042	Remove all items from the cache .
4043	Cache put if undouched .
4044	Get all values from memcache .
4045	Gets the keys of a collection of buckets .
4046	Find all key fields in the class hierarchy .
4047	Sets the key of an entity .
4048	Sets the id of the given POJO .
4049	Get the parent raw key .
4050	Register a superclass .
4051	Returns true if two types could have common subtypes .
4052	Transform the given owner type .
4053	Returns the annotation of the given type or null if the annotation is not found .
4054	Adds all values from another session to this session .
4055	Loads a key from the cache .
4056	Execute the round .
4057	Translate a result to a map of entities .
4058	Fetch a set of keys from the datastore .
4059	Load entity .
4060	Creates a raw key .
4061	Returns the raw value of the given key .
4062	Gets the id value .
4063	Converts a URL - safe key to a datastore key .
4064	Create a transactionless object .
4065	Transact a new object .
4066	Transacts the given work once .
4067	Returns true if any of the conditions match .
4068	Get the Objectify instance .
4069	Returns an async datastore .
4070	Gets metadata for entity .
4071	Allocates the given number of keys .
4072	Open an objectify .
4073	Close the objectify context .
4074	Homogenize indexes .
4075	Creates a new reference to the given value .
4076	Returns the value associated with this key .
4077	Adds a value to the map .
4078	Returns whether the future is done .
4079	Generate if conditions .
4080	Execute the engine and all the deferred tasks .
4081	Returns the first container matching the given type .
4082	Get the stat for the given kind .
4083	Unwraps the given exception and throws it .
4084	Returns the translator for the given type .
4085	Get the root translator .
4086	Creates a translator for the given type .
4087	Loads the given property into the given object .
4088	Get the value of the property from the container .
4089	Sets the value of the property .
4090	Saves the value of the given property into the given entity builder .
4091	Get the value of the property .
4092	Writes the extensions of the given message .
4093	Writes the content category .
4094	Write content categories .
4095	Process the given snippet .
4096	Returns an iterable over all bids in the given response .
4097	Returns the bid builder with the given id .
4098	Updates all Bids in a SeatBidResponse .
4099	Remove all bids that match the given filter .
4100	Returns an iterable of all imps that satisfy the given filter .
4101	Read extensions .
4102	Returns true if the current token is null .
4103	Register an extension reader .
4104	Register an OpenRtbJsonExtWriter .
4105	Processes the given SnippetProcessorContext .
4106	Process the bid fields .
4107	Updates all objects in the given iterable using the provided updater .
4108	Returns a copy of the given list that does not match the given predicate .
4109	Returns the current name of the current token .
4110	Start a JSON object .
4111	Start an array .
4112	Returns the next token from the given JsonParser .
4113	Write a boolean field .
4114	Writes a list of strings to a JSON object .
4115	Writes a list of integers to a JSON object .
4116	Writes a list of long values to a JSON object .
4117	Writes a list of enums to a JsonGenerator .
4118	Resolve a URL to a target .
4119	Fix pure query targets .
4120	Returns the host segments of the given URL .
4121	Returns the host of the given URL .
4122	Returns the URL of the page .
4123	Load list from storm conf
4124	Extract the config element from a map .
4125	Returns the protocol for the given URL .
4126	Generate WARC info .
4127	Extract the refresh URL .
4128	Get the metadata for an outlink .
4129	Filter the metadata .
4130	Add a new URL to the queue .
4131	Clean the field name .
4132	Get the charset name from the BOM .
4133	Detect charset from text .
4134	Get the charset from the meta data .
4135	Sniff the given content .
4136	Sets the value for the given key .
4137	Returns the first value in the metadata .
4138	Get a list of cookies from a list of cookies strings .
4139	Checks if the domain match to the url .
4140	Returns the cache key for the given URL .
4141	Returns the set of robot rules for the given URL .
4142	Extract meta tags from a document fragment .
4143	Acknowledge a tuple .
4144	Filter the given URL .
4145	Filter the given URL .
4146	Loads the rules from the given file .
4147	Process query elements .
4148	Load the NavigationFilters from stormConf .
4149	Adds a record format to the bolt .
4150	Returns the number of time elapsed since last query was sent .
4151	Trigger queries .
4152	Load the ParseFilters from storm conf .
4153	Append a new node to the document .
4154	Ignorable whitespace .
4155	Append a processing instruction .
4156	Append a comment .
4157	Append a CDATASection or Comment .
4158	Start DTD .
4159	Start a prefix mapping .
4160	Returns the URL for the given tuple .
4161	Trim the given text if it is longer than the maximum length .
4162	Checks the custom intervals for the given status .
4163	Loads the URLFilters from the storm conf .
4164	Set the number of items in the wheel .
4165	Resolve size and state .
4166	Set the empty item drawable .
4167	Sets the angle of the wheel .
4168	Update the selected position .
4169	Invalidate the wheel item drawable at the given position .
4170	Convert a raw position to a wheel position .
4171	Update the angular velocity .
4172	Returns the contrast color for the given entry .
4173	Clamp the given value to the given upper limit .
4174	Writes the coveralls data to a JSON file .
4175	Returns the data as a ByteBuffer .
4176	Sets the value of this char to the given string .
4177	Make one - dimensional array of strings .
4178	Creates a new ArrayChar from a String .
4179	Make an ArrayChar from an ArrayObject .
4180	Make an ArrayChar from an ArrayObject .
4181	Get the time interval offset for a given record .
4182	Show the window .
4183	Show the window if the frame is not iconified .
4184	Make the size estimate of a grid .
4185	Main method to scan a Grib1 file .
4186	Creates a new unit name with the given name and plural .
4187	Creates a new unit name .
4188	Returns the plural form of the given name .
4189	Returns true if the given date is included .
4190	Intersects this range with the given range .
4191	Extend this date range by another date range .
4192	Extend the start and end date with the specified date .
4193	Sets the start date .
4194	Sets the end date .
4195	Sets the duration .
4196	Recalculates the duration .
4197	Add a map bean to the menu .
4198	This method is called by the parser when an error occurs .
4199	Returns the name of the file .
4200	Returns a string representation of the parameters .
4201	Opens the DSP from the given raw data .
4202	Compute the bounds .
4203	Synch UI .
4204	Compute the unlimited chunking .
4205	Register a directory with the catalog watcher .
4206	Process events .
4207	Sets the reference date .
4208	Open a feature dataset .
4209	Wrap a feature dataset .
4210	Checks if the feature type is ok .
4211	Find the feature type from a NetCDF file .
4212	Writes a catalog to the response .
4213	Convert a catalog to an HTML string .
4214	Gets the user CSS .
4215	Gets the user head .
4216	Make a dynamic catalog for a given directory .
4217	Adds the global services to the catalog .
4218	Set the credentials provider and user agent .
4219	Get the content as a string .
4220	Puts the given content into the given URL .
4221	Get the front page .
4222	Make a catalog for the given path .
4223	Extract geospatial coverage .
4224	Get a single dataset or by its type name
4225	Returns true if the two VertCoordValues are nearly equal .
4226	Creates a new unit ID from the given name plural and symbol .
4227	Parse an attribute specification .
4228	Read the top of the file .
4229	Converts two shorts into an int .
4230	Convert a byte array into an int .
4231	Returns a java . util . Date with the given number of milliseconds .
4232	Make sure that the name is a valid NetCDF object name .
4233	Checks if the given name is a valid NetCDF3 object name .
4234	Opens a file for writing .
4235	Read the record data .
4236	Read the record data subset .
4237	Fill non - record variables .
4238	Creates a time struct for the given time index .
4239	Make a GradsTimeStruct from a Calendar
4240	Checks if the given template contains a time template .
4241	Adds a function to the registry .
4242	Returns the boolean function with the given name .
4243	Returns the BTFunction with the given name .
4244	Load a new function .
4245	Returns the name of the level of the given grid record .
4246	Returns the description of the specified level .
4247	Get the level unit for a given grid record .
4248	Returns the type of the projection .
4249	Checks if the given grid record is a vertical coordinate .
4250	Checks if the given grid record is a layer .
4251	Make a CoordinateTransform from a NetcdfDataset .
4252	Creates a dummy coordinate transform variable .
4253	Make a projection from a CoverageTransform .
4254	Main entry point for the dataset chooser .
4255	Saves the current state of the info window .
4256	Returns a copy of this chronology with the specified timezone .
4257	Writes the count to the stream .
4258	Write an atomic array to the output stream .
4259	Write bytes to the output stream .
4260	Writes the bytes to the output stream .
4261	Finish initialization .
4262	Creates a CalendarDateRange from a DateRange .
4263	Creates a new GDS object from a byte array .
4264	Parse the given text using the specified DDS .
4265	Parse the given text using the specified DAS .
4266	Swaps the grid header .
4267	Read a grid .
4268	Main method to read a grid file .
4269	Write a constraint .
4270	Write WFS headers and SS .
4271	Writes the list of operations .
4272	Read all log files in the given directory .
4273	Scans a log file .
4274	Get the grid packing type .
4275	Finds the grid with the given parameter name .
4276	Read a RPKG from the input stream .
4277	Unpack the data .
4278	Get the DP_UGRB grid .
4279	Unpack Grib1 data .
4280	Unpack Grib2 data .
4281	Print the grids .
4282	Read the next byte from the input stream .
4283	Creates a new instance of a CalendarDate .
4284	Creates a CalendarDate from a java . util . Date .
4285	Creates a calendar date from the given milliseconds .
4286	Creates a new instance of a CalendarDate with the specified milliseconds .
4287	Parse a UD units string into a CalendarDate .
4288	Get the difference between two dates .
4289	Create a CDMArrayAtomic from a DataCursor .
4290	Setup the request .
4291	Escape a string .
4292	Creates a list of slices from a list of ranges .
4293	Unwraps a NetcdfFile .
4294	Checks if a list of dimensions contains a variable length .
4295	Compute the effective shape for the given dimension set .
4296	Adds the given date to this date .
4297	Multiply by another unit .
4298	Divide this unit by another unit .
4299	Divide this unit into another unit .
4300	Returns a new unit that is a power of this unit .
4301	Convert the amount to a derived unit .
4302	Convert an array of floats to a derived unit .
4303	Convert the amount to the derived unit .
4304	Returns the canonical string representation of this derived unit .
4305	Read the data from the given SectionIterable .
4306	Read data from the data store .
4307	Flatten a set of features into a set of points .
4308	Find the service with the given name .
4309	Returns the gate size for the given data type .
4310	Returns the start of the gate for the given datatype .
4311	Returns the number of gates for the given datatype .
4312	Write an XML document to an output stream .
4313	Returns the preferred layout size for the given container .
4314	Verify that the given dataset is a descendant of the given ancestor dataset .
4315	Generate proxy ds resolver catalog .
4316	Creates a new instance of CalendarDateUnit from the given calendar name and udunit string .
4317	Creates a new instance of CalendarDateUnit with the specified Calendar and UDUNIT string .
4318	Creates a new instance of a CalendarDateUnit .
4319	Make the offset from a reference date .
4320	Creates a calendar date from the given value .
4321	Returns a new quantity dimension for this unit .
4322	Checks if the given file is a valid file .
4323	Read the STN names from a file .
4324	Read a variable from the data stream .
4325	Read an array of integers from the input stream .
4326	Read data to a byte channel .
4327	Calculates the elevation of an angle .
4328	Calculates the step value .
4329	Calculates the angle between two angles .
4330	Calculates the data .
4331	Calculates the nyquist .
4332	Make a vertical transform for the given dataset .
4333	Set the debug flags .
4334	Set whether or not to extend the index .
4335	Read the xy data .
4336	Checks if a point is missing in the grid .
4337	Get the bounding box .
4338	Finishes the sequence .
4339	Appends a tab character to a StringBuffer .
4340	Pads a string to the specified width .
4341	Pads the given integer to the given width .
4342	Pads a long value to the specified width .
4343	Format a byte size .
4344	Print the format . d .
4345	Print 2 decimal places .
4346	Returns a string representation of the given shape
4347	Finishes the slice .
4348	Returns a string representation of this constraint .
4349	Compose two slices .
4350	Map i - th element of target to i - th element of target
4351	Dump the contents of the given buffer to stdout .
4352	Dump the bytes from the given buffer to the output stream .
4353	Returns the EarthEllipsoid type with the given name .
4354	Returns the EarthEllipsoid with the specified id .
4355	Decode vlen data .
4356	Decode vlen data .
4357	Extract the HTML from the given URL .
4358	Get the text content of the given URL .
4359	Filter meta tags from an input stream .
4360	Read a variable into a writable byte channel .
4361	Add all attributes from an iterable .
4362	Remove the attribute with the given name .
4363	Remove an attribute ignoring case .
4364	Get the offsets in time units .
4365	Add an action source listener .
4366	Get the standard date .
4367	Get the standard or ISO date .
4368	Get the date origin .
4369	Returns the current date .
4370	Make a date from the given value .
4371	Make the value of the time unit from the given date .
4372	Make a standard date string from a double value .
4373	Get the grid spacing in km .
4374	Adds the dimensions to the NetCDF file .
4375	Adds a coordinate axis .
4376	Make the projection .
4377	Adds GDS parameters to the given variable .
4378	Adds a coordinate system variable .
4379	Make Lambert Conformal .
4380	Make the Stereographic projection .
4381	Make mercator .
4382	Make the message geostationary .
4383	Set the DX and DY coordinates .
4384	Read a dataset .
4385	Read a dataset scan .
4386	Read the metadata content from the given URL .
4387	Get the grib level type 1 .
4388	Checks if the given file is a valid file .
4389	Writes bytes to the output stream .
4390	Set the clear name .
4391	Get the coordinate name for a given axis type
4392	Get the coordinate name for a given axis type and dimension
4393	Build the XML representation of this error .
4394	Build a DAP exception .
4395	Break up the levels .
4396	Make a z - coordinate axis .
4397	Create new variables .
4398	Make a time coordinate axis from a reference variable
4399	Bit shave a float .
4400	Main entry point for the GribToNetcdfWriter .
4401	Wrap a NetcdfDataset if necessary .
4402	Opens a NetcdfFile from the given location .
4403	Clear all coordinate systems .
4404	Finds the coordinate axis with the given type .
4405	Find a coordinate axis by its full name .
4406	Find a coordinate system by its name .
4407	Find a coordinate transform by its name .
4408	Checks if an enhance mode is needed .
4409	Sets the values of a variable .
4410	Sets the values for the given Variable .
4411	Creates an array from a list of strings .
4412	Returns the index of this vector .
4413	Returns the MFileOS7 object for the given filename .
4414	Returns a list of features that intersect the given bounding box .
4415	Discretely discretizes the data .
4416	Adds the given ThreddsMetadata to this ThreddsMetadata .
4417	Adds a documentation for the given type and content .
4418	Remove all docs of the given type .
4419	Returns the number of bytes that can be written to the given segment .
4420	Checks if the given NetCDF file is mine .
4421	Add a dataset to the list of mfiles
4422	Break up conventions names .
4423	Build conventions attribute .
4424	Build coordinate systems from a NetCDF Dataset
4425	Find all coordinate axes in the dataset .
4426	Find coordinate systems .
4427	Make coordinate systems .
4428	Make the coordinate systems maximal .
4429	Checks if the given variable is a coordinate axis for a given variable .
4430	Add a coordinate variable .
4431	Add a subset of this dataset to this catalog .
4432	Sets the filter for this dataset .
4433	Mark a dataset .
4434	Delete a dataset from the catalog .
4435	Initialize the TDS server .
4436	Count the number of occurrences of the given value .
4437	Adds a name symbol and a double definition .
4438	Compares this row with another row .
4439	Compares two boolean values .
4440	Get the group scope .
4441	Pass all reserved attributes to the given node .
4442	Checks if a date range is valid .
4443	Returns true if the iterator is at the end of the slice .
4444	Register a DSP .
4445	Register a DSP .
4446	Returns true if the given DSP class is registered .
4447	Unregister a DSP from the registry .
4448	Creates a new Grib2Tables instance .
4449	Get the size of the time interval in hours .
4450	Get the time interval offset for a given record .
4451	Returns a VertCoordType for the given code .
4452	Finishes the graph .
4453	Sort the list of nodes .
4454	Get the RAF file for a given partition .
4455	Finds the variable with the given attribute name .
4456	Finds a variable with the specified attribute value .
4457	Returns the name of the variable with the given name and value .
4458	Finds a variable with the given name and value .
4459	Finds a nested structure .
4460	Checks if the dataset has a netcdf3 record structure .
4461	Get the value of a global attribute .
4462	Get the feature type from a dataset .
4463	Returns the variable name for the given key .
4464	Returns the value of the coordinate at the specified location .
4465	Connect to a longitude .
4466	Get the coordinate values for this axis .
4467	Create a section of the coordinate axis .
4468	Finds the index of the closest point in the run .
4469	Returns the name of the element .
4470	Add an action to the menu .
4471	Returns the first match of the given path or null if no match is found .
4472	Main method .
4473	Returns the index of the first occurrence of the first occurrence of the given byte array .
4474	Adds a picture to the cache .
4475	Report the contents of the cache .
4476	Stop the background loading .
4477	Stop the background loading of the picture from the given URL .
4478	Creates an HTTP GET request .
4479	Creates a new HTTP method instance .
4480	Returns a random float value .
4481	Returns a random number between 1 and max .
4482	Read the data for the given variable and section .
4483	Get the FileSystemProvider for the given URI .
4484	Read the station table .
4485	Returns the index of the given group .
4486	Removes the data variable with the given name .
4487	Returns the cloud hgt2 meters .
4488	Read the data from a given section .
4489	Set the number of colors .
4490	Calculates the transform for the given screen and bounds .
4491	Convert a URI to an AuthScope .
4492	This method is called after all data has been read .
4493	Returns whether this factor is reciprocal of the given factor .
4494	Get the catalog for the given directory .
4495	Returns the index of the first occurrence of want .
4496	Read metadata content from URL .
4497	Read metadata content .
4498	Adds the content of the given content object to the given XML element .
4499	Validate the metadata content .
4500	Read the catalog gen config element .
4501	Read a dataset source element .
4502	Read dataset namer element .
4503	Read a dataset filter element .
4504	Read the result service element .
4505	Create the catalogGenConfig element .
4506	Creates a dataset source element .
4507	Creates the dataset namer element .
4508	Creates the dataset filter element .
4509	Creates the result service element .
4510	Returns true if the given flag is set .
4511	Construct the given menu .
4512	Adds the menu to the given menu .
4513	Adds the parameters from a table .
4514	Make a GempakParameter from a list of words
4515	Returns the parameter with the given name .
4516	Reads the contents of an input stream into a String .
4517	Reads a byte array from an input stream .
4518	Replace the file template with the name of the ensembles .
4519	Set the station information .
4520	Accepts the given buffer and returns true if the buffer is valid .
4521	Show the format info for the given text field .
4522	Read the Grib2 Bitmap section .
4523	Set the NetCDF file .
4524	Set the debug flags .
4525	Parse the name .
4526	Checks if the DStructure is a group .
4527	Get the NetCDF Strlen dimension for a DODS variable .
4528	Adds a shared dimension to the given group .
4529	Construct a list of dimensions from a DArray .
4530	Returns true if the given DAP type is unsigned .
4531	Read data from server .
4532	Get an image icon from the classpath .
4533	Get an image from the classpath .
4534	Creates a custom cursor with the specified name .
4535	Read data from a file into a primitive array .
4536	Reads the data from the given input stream and fills it with the given value .
4537	Read data into an array of primitive arrays .
4538	Creates an array of primitive types .
4539	Convert a byte array to a char array .
4540	Convert a char array to a UTF - 8 byte array .
4541	Convert a byte array to a char array
4542	Read an array from a section specification .
4543	Create an ArrayStructure from a ParsedSectionSpec .
4544	Returns the string value of a single record .
4545	Returns the scalar structure at the given index .
4546	Returns the value of the given member in the given record .
4547	Creates a StructureMembers object from a DAP variable .
4548	Adds the dimensions to the NetCDF file .
4549	Creates a crawlable dataset .
4550	Normalize the given path .
4551	Adds an explicit dataset to the cache .
4552	Add a dataset scan to the dataset manager .
4553	Finishes the processing of the dataset .
4554	Make the list of datasets .
4555	Get the typical dataset for this aggregation .
4556	Creates a new dataset .
4557	Put the resource control for a dataset
4558	Adds a point to the curve .
4559	Returns the upper bound of the bounding box .
4560	Returns the lower bound of the bounding box .
4561	Validate this DatasetFilter .
4562	Checks if the dataset matches this filter .
4563	Adds all features from a feature dataset .
4564	Parse a constraint .
4565	Evaluate the clauses .
4566	Print the constraint .
4567	Amends a file from an ODL file .
4568	Sets the shared dimensions for a variable .
4569	Checks if there is an unknown dimension with the given name .
4570	Finds the nested group with the given name .
4571	Read the content of an Xlink file .
4572	Get the standard URI for this catalog .
4573	Set the projection .
4574	Add a component to the layout .
4575	Invalidates the layout .
4576	Remove a component from the layout .
4577	Returns the minimum size of the layout .
4578	Layout the given container .
4579	Checks if the given coordinate system is a radial coordinate system .
4580	Returns the maximum radial value .
4581	Opens an HTTP connection to the given URL .
4582	Convert Earth to Saturation .
4583	Convert sat to earth .
4584	Converts a GOES to a geospatial coordinate .
4585	Converts a scan geometry to a sweep angle axis .
4586	Converts a sweep angle axis to a scan geometry .
4587	Sets the runtime coordinates .
4588	Write a point obs dataset to a file .
4589	Rewrite a . nc file to a . nc file
4590	Returns the array sequence for the given member name .
4591	Returns the full name of this node .
4592	Returns the unique ID .
4593	Returns the access for the given service type .
4594	Find a dataset by its name .
4595	Get the parent catalog .
4596	Get all metadata of the requested type .
4597	Find the service with the given name .
4598	Returns all the variables for the given vocabulary .
4599	Find all catalog refs in a dataset tree .
4600	Escape a path for a URL .
4601	Adds a stagger to an array .
4602	extrapolates an array .
4603	Computes the Rho of the earth .
4604	Get the detail information .
4605	Creates a Gempak Structure from a Gemfile .
4606	Creates a missing variable .
4607	Make a GempakParameter variable .
4608	Add global attributes to the NetCDF file .
4609	Returns the size of a stn variable .
4610	Returns the 1 - dimensional array for the given data type .
4611	yyp_goto_state_
4612	Generate the error message for a syntax error .
4613	Print the stack for a given rule .
4614	Read the DMR from the input stream .
4615	Reads an error document from the stream .
4616	Read data from the input stream .
4617	Read the header from the input stream .
4618	Convert an ISO - 8601 string to a date .
4619	Read a table from a file .
4620	Transfer a group to another group .
4621	Get the STN file for the given location .
4622	Open the NCML file .
4623	Returns the beginning of the node at the given index .
4624	Returns the end of the node at the given index .
4625	Create all runtime collections .
4626	Set the edit value .
4627	Returns the data type for the given format .
4628	Convert an ECF to LLA .
4629	Clean a unit .
4630	Clean the name .
4631	Checks if the unit is unitless .
4632	Creates a new notes object .
4633	Returns the variable id for a given note .
4634	Parse the DAS .
4635	Find the DodsV with the given name .
4636	Find the DodsV in the tree .
4637	Returns the child with the given index or null if no child exists .
4638	Returns the parent group .
4639	Returns the dimension at the given index .
4640	Returns the index of the dimension with the given name .
4641	Get the units string .
4642	Returns the shape as a section .
4643	Creates a slice of this variable .
4644	Sets the enum typedef for this variable .
4645	Read an array of ranges from the file .
4646	Read a scalar string .
4647	Read data from the proxy .
4648	Read data from the specified section .
4649	Write the CDL to the file .
4650	Returns a string representation of this variable .
4651	Sets the data type .
4652	Sets the list of dimensions for this shape .
4653	Reset the shape .
4654	Sets the dimensions of this variable .
4655	Resets the dimensions of this variable .
4656	Sets the dimension at the given index .
4657	Sets the cached data .
4658	Returns a list of all dimensions .
4659	Set the bounding box .
4660	Finishes the grid .
4661	Returns a list of all the datasets in this dataset set .
4662	Returns true if the path ends with one of the SYNEXTENSIONS .
4663	Opens the CDMDSP .
4664	Build the DMR .
4665	Builds the sequence types from a CDM variable .
4666	Builddimrefs a list of cdm dimensions .
4667	Returns a list of EnumTypedef objects that match the given varenum .
4668	Get the core dimensions from a list of dimensions
4669	Scans a BARF file .
4670	Process a Bufr Iosp message as a dataset
4671	This method is called when a POST request is received .
4672	Get the transform for this navigation .
4673	Returns true if the map should be rotated .
4674	Get the map area .
4675	Convert a world coordinate to a screen coordinate .
4676	Pan the map .
4677	Zoom the image .
4678	Recalculate the x and y coordinates from the bounding box
4679	Adds a listener to the listener manager .
4680	Removes a listener from the list .
4681	Sends an event to all registered listeners .
4682	Sends an event to all registered listeners .
4683	Prints a command to the given output stream .
4684	Prints the given command to the given output stream .
4685	Print variable data .
4686	Print a variable s data section .
4687	Print a StructureData object to a PrintWriter .
4688	Print a plain array .
4689	Print an array to the given PrintWriter .
4690	Writes a NCML file to the given writer .
4691	Read a double attribute .
4692	Add a parameter to the coordinate transform .
4693	Main method to parse a log file .
4694	Read an object from the DAP file .
4695	Checks if the given grid record is positive up .
4696	Checks if this unit is compatible with another unit .
4697	Make a label for the given quantity ID .
4698	Sets the bit offset .
4699	Convert a number of bits into an unsigned integer .
4700	Convert a number of bits into a signed integer .
4701	Opens a connection to the DAP2 server .
4702	Get the DAS .
4703	Get the DDS .
4704	Get the complete CE .
4705	Convert a projection point to a LatLon point .
4706	Get the catalog of a dataset .
4707	Convert a date range to an idv compatible range .
4708	Checks if the file is valid .
4709	Handle the saturation information .
4710	Handles sensor information .
4711	Read the root element from the given location .
4712	Clean XML character data .
4713	Xunescape a string .
4714	Escape a URL query .
4715	Unescape a URL query string .
4716	Removes all backslash characters from a string .
4717	Escape backslash characters in a string .
4718	Add lightning global attributes .
4719	Swaps a short from a byte array .
4720	Swaps a byte array at a given offset .
4721	Swap a double from a byte array .
4722	Swaps a float .
4723	Swaps a double .
4724	Convert a short to a byte array .
4725	Convert an integer to a byte array .
4726	Convert a long to a byte array .
4727	Returns a new VerticalTransform that is a subset of this transform .
4728	Write the document to an XML file .
4729	Make a C matrix .
4730	Start the XML document .
4731	Writes the feature list to the file .
4732	Adds a list of records to the list of levels .
4733	Adds the dimensions of the given group to the given NetcdfFile .
4734	Adds the record to the NetCDF file .
4735	Find the coordinate transform for a given grid level .
4736	Returns the index of the given record .
4737	Exit the disk cache .
4738	Returns the file at the given location .
4739	Returns the existing file or cache if it exists .
4740	Show the contents of the cache .
4741	Clean the cache .
4742	Calculate the beat between two points .
4743	Calculate the beat between two points .
4744	Main method to calculate the bearing and backazimuth of a point .
4745	Find a point in the Earth .
4746	Find a point in the Earth .
4747	Find a point in the Earth .
4748	Load a picture in a thread .
4749	Load a picture .
4750	Load the image into the sourcePicture object .
4751	Stop loading the image .
4752	Stop loading the image except the given url .
4753	Returns the size of the image .
4754	Sets the source image .
4755	Returns the standard URI for this dataset .
4756	Creates an associated field descriptor .
4757	Transfer information from one list to another .
4758	Count the number of bits .
4759	Compares two DataDescriptors .
4760	Load the header .
4761	Load the data from the input stream .
4762	Returns the field with the given name or null if not found .
4763	Returns the value of a field as a double array .
4764	Returns the values of the character field with the given name .
4765	Returns the value of the named boolean field as a boolean array .
4766	Returns the name of the field at the given index .
4767	Returns an array of all the field names .
4768	Dump a Dbase file to stdout .
4769	Returns a map of attribute names to DAP attributes .
4770	Add an attribute to the list of attributes .
4771	Removes an attribute from the list of attributes .
4772	Returns the group of this node .
4773	Returns the container of this node .
4774	Returns the escaped short name .
4775	Returns the path to the current container .
4776	Returns the group path of this node .
4777	Returns the fully qualified name of this node .
4778	Returns true if this node is a top level node .
4779	Build the DAP dataset .
4780	Put a bean collection .
4781	Returns the value of the specified key or null if the key does not exist
4782	Returns the value associated with the given key .
4783	Read the data from a GRIB file .
4784	Print the top variables of the DSP .
4785	Print a compound instance .
4786	Writes the given element to a String .
4787	Writes the given element to the given file .
4788	Writes an XML element to an output stream .
4789	Writes the given XML element to the given writer .
4790	Creates a dimension element .
4791	Make a coordinate transform .
4792	Get an int array from an attribute container .
4793	Creates a new unit with the given name symbol and quantity .
4794	Creates a new unit with the given name and symbol .
4795	Creates the base unit db .
4796	Creates a derived unit database .
4797	Returns the SI instance .
4798	Returns the index of the element in the coordinate space .
4799	Finds the closest coordinate in the axis .
4800	Returns a subset of the values in the specified range .
4801	Opens a feature dataset .
4802	Open a feature dataset .
4803	annotate a dataset to a NetcdfDataset
4804	Read data from a Grib1 file .
4805	Assembles the URI .
4806	Returns the canonical form of the given string .
4807	Normalize the given units .
4808	Compile the DAP dataset .
4809	Finishes the parsing of the XLink metadata .
4810	Returns the value associated with the given key .
4811	Put a key - value pair into the map .
4812	Returns the current date .
4813	Print XML attributes .
4814	Print an XML attribute .
4815	Checks if the attribute is a special attribute .
4816	Print the dimensions of a variable .
4817	Checks if the given file is a valid area file .
4818	Set the area directory attributes .
4819	Set the navigation block attributes .
4820	Get the Calibrator type
4821	Set the attributes for the calibration type .
4822	Find the coordinates for a given predicate .
4823	Finds the name of the coordinate axis of the given type .
4824	Find a coordinate axis by type .
4825	Find a coordinate by type .
4826	Find the dimension by type .
4827	Finds the best coordinate system in the dataset .
4828	Find the dependent axis of the given type .
4829	Get a variable from the DSequence .
4830	Deserialize a single record from the given input stream .
4831	Reads the marker from the input stream .
4832	Writes the marker .
4833	Throw a SAXParseException with a fatal error .
4834	Creates a dataset .
4835	Example of the demo .
4836	Returns a Java array of Strings .
4837	Get the parameter list .
4838	Set the stations .
4839	Set the selected station
4840	Redraw the image .
4841	Reads the rectangle from the stream .
4842	Writes the image to a stream .
4843	Adds the given unit to this unit set .
4844	Adds a unit to the unit set .
4845	Add a symbol to this unit .
4846	Returns the unit with the given id or null if not found .
4847	Adds a unit with the given name .
4848	Adds a new unit to the symbol map .
4849	Adds a new unit to the given map .
4850	Add the current look and feels to the given menu .
4851	Find a Grib2Record by its DRS position .
4852	Read the data from the file .
4853	Serialize the dataset to the output stream .
4854	Get the parameter values from the RDAT .
4855	Construct a copy of this projection .
4856	Open a feature dataset .
4857	Open a feature dataset .
4858	Open a dataset .
4859	Annotate a dataset into a NetcdfDataset .
4860	Remove duplicates from a list of properties
4861	Adds a partition to the partition list .
4862	Make a GribCollectionMutable from the index .
4863	Creates a new instance of the RegExpAndDurationTimeCoverageEnhancer with the specified match pattern substitution pattern and duration .
4864	Creates a new instance of the RegExpAndDurationTimeCoverageEnhancer with the specified match pattern substitution pattern and duration .
4865	Write an XML document to a file .
4866	Read the structure data .
4867	Load a picture from the specified URL .
4868	Sets the buffered image .
4869	Zoom the image to fit .
4870	Paint the image .
4871	The TG_FTOI function .
4872	TG_ITOC - TG_CDTM - TG_CFTM - TG_CDTM - TG_CFTM - TG_CFTM
4873	Get the TI_ITOC string from an array of integers
4874	Returns the day of the week in the given year .
4875	Get the VCRD for a given ivcord .
4876	Swaps an array of integers in reverse order .
4877	Get the grid packing type .
4878	Returns the data type for the given type .
4879	Read data from the input stream .
4880	Externalize the response to an output stream .
4881	Returns the tag enum for the given tag code .
4882	Get the next image .
4883	Returns the size of the given type .
4884	Returns the sum of all values in an array .
4885	Set the grid size
4886	Set the overlap value .
4887	Clear the grid .
4888	Mark the given rectangle if it is clear .
4889	Finds the intersection of the given rectangle .
4890	Finds the intersection of the specified point .
4891	Finds the closest object to the given point .
4892	Returns the squared distance between two points .
4893	Creates a base unit if it doesn t already exist .
4894	Returns the service type for the given fragment .
4895	Returns the service type for the given URL .
4896	Decode the path extension .
4897	Check if DODS is available .
4898	Check if DAP4 is available .
4899	Send data to the given output stream .
4900	Returns the suffix of a fully qualified name .
4901	Returns the prefix of the given fully qualified name .
4902	Locates a file .
4903	Locates a relative path .
4904	Extract the bytes from the given buffer .
4905	Returns the structure path of the given variable .
4906	Returns null if path is null or empty .
4907	Joins an array of strings into a single string .
4908	Checks if the given path contains a drive letter .
4909	Returns a list of all protocols in the given URL .
4910	Convert an index to a list of slices .
4911	Convert an offset to a list of slices .
4912	Checks if a list of slices is contiguous .
4913	Checks if a list of slices contains only one point .
4914	Convert a list of slices to an index .
4915	Read data from an input stream .
4916	Set the station information .
4917	Set the short names .
4918	Read a feature collection config from a catalog .
4919	Adds a new declaration to this group .
4920	Updates the list of groups .
4921	Returns the variable with the given name .
4922	Returns the axis type of the given variable .
4923	Returns the GribStatType for the given time range indicator .
4924	Subset the lon axis .
4925	Returns a list of the ranges of this axis .
4926	Set default properties .
4927	Get the session id from the cookie store
4928	Set the maximum number of redirects for this session .
4929	Set whether sessions should be used .
4930	Close all resources .
4931	Set authentication and proxy .
4932	Track a session .
4933	Sets the credentials provider for the given scope .
4934	Validate the given URL .
4935	Creates an Index with the specified shape .
4936	Compute the stride for the given shape .
4937	Create a new index from a list of ranges .
4938	Reduce this index to a new one .
4939	Returns a new index for the specified dimension .
4940	Transposes two indices .
4941	Permutes this index .
4942	Returns an iterator for the given array .
4943	Returns the current element .
4944	Sets the current index to the given array .
4945	Sets the value of the specified dimension .
4946	Sets the elements of this index to the given values .
4947	Returns the name of the time interval .
4948	Make a calendar date range .
4949	Make a list of date strings .
4950	Creates a list of GempakParameters for a given DMPart .
4951	Get the list of all stations in the file .
4952	Creates a new GempakStation from the given header .
4953	Returns a list of the names of all the station keys .
4954	Get the list of dates .
4955	Finds the index of the station with the given id .
4956	Get the file type .
4957	Increase the current indentation level .
4958	Set the indent level .
4959	Read or create an index from a single file .
4960	Add a directory scan .
4961	Checks if a scan is needed .
4962	Scan first time .
4963	Set the debug flags .
4964	Adds a new variable to the model .
4965	Writes the data to the file .
4966	Validates an XML document .
4967	Returns a string representation of this constraint .
4968	Set the original variable .
4969	Read the data from the database .
4970	Returns the contents of the given section .
4971	Returns true if the conversion is needed .
4972	Convert an array structure to an array structure .
4973	Convert member info to variable info .
4974	Finds the variable with the given org name .
4975	Checks if a variable has data .
4976	Enhances all variables in this dataset .
4977	Check if the resource control is ok .
4978	Make an empty sequence .
4979	Creates an array sequence from an array of parameters .
4980	Creates a sequence from a Gempak part .
4981	Adds the vertical coordinate attribute to the given variable .
4982	Read the XML as a synchronous catalog .
4983	Read a catalog from an XML string .
4984	Read an InvCatalog from an XML string .
4985	Write the catalog to an output stream .
4986	Returns the metadata converter for the given key .
4987	Returns the dimensionless ID .
4988	Multiply this unit by another unit .
4989	Divide this unit by another unit .
4990	Convert the input array into the output array .
4991	Checks if this unit is compatible with another unit .
4992	Write a geometry to the file .
4993	Write an epsg . xml file .
4994	Write a line .
4995	Write a polygon .
4996	Pull the value of an attribute from a node .
4997	Returns all subnodes of the given parent node .
4998	Parse the response .
4999	Pass all reserved attributes to the DAPNode .
5000	Get the string representation of a subset of a variable .
5001	Creates an ArrayStructureMA from an ArrayStructure .
5002	Set a member array .
5003	Creates an ArrayStructureMA from a Structure .
5004	Returns the geometry type for the given name .
5005	Creates a new station feature .
5006	Compile a CEAST .
5007	Compile a filter expression .
5008	Add a dimredef to the CE .
5009	Creates an array with the given index .
5010	Returns true if the given rectangle is contained in this rectangle .
5011	Extend this bounding box by the given point .
5012	Extend this rectangle by the given rectangle .
5013	Returns the intersection of this rectangle with the specified rectangle .
5014	Adds two arrays .
5015	Checks if two arrays are conformable .
5016	Checks if shapeA and shapeB are conformable .
5017	Convert an array to another array .
5018	Copies the contents of an array to the result array .
5019	Copies the boolean values from the array to the result array .
5020	Copies the elements from one array to another array .
5021	Returns the minimum and maximum value of an array .
5022	Sets the value of each element in the result array to the given value .
5023	Creates a new catalog builder .
5024	Creates a new instance of ProjectionImpl .
5025	Unescape a DAP identifier .
5026	URL - decode a string .
5027	Unescape the given URL .
5028	Escape a backslash - escaped string .
5029	Unescape backslash characters .
5030	Tokenizes an escaped name .
5031	Returns the index of the first occurrence of the given character in the escaped name .
5032	Converts a backslash to a DA - DA - DA .
5033	Read an atomic scalar .
5034	Returns the path to the given cursor .
5035	Returns the value of the property in the given class or null if not found .
5036	Returns the J class of the given component .
5037	Compile all variables in the dataset .
5038	Compile a structure array .
5039	Compile a structure .
5040	Compile a sequence array .
5041	Compile a sequence into a D4Cursor .
5042	Reads a little endian 64 - bit integer from the stream .
5043	Returns the field with the given name or null if not found .
5044	Returns the value of the field with the given name .
5045	Sets the value of a field .
5046	Adds a new field to the cursor .
5047	Adds a new checkbox field to the form .
5048	Adds a date field to the form .
5049	Adds a Double field to the table .
5050	Adds an integer field to the form .
5051	Adds a password field to the form .
5052	Add a text field .
5053	Add a text combo field .
5054	Add a text area field .
5055	Adds a new heading to the layout .
5056	Adds a component to the layout .
5057	Adds an empty row to the layout .
5058	Find the active frame .
5059	Get the cell spacing .
5060	Returns a copy of the current set of factors .
5061	Multiplies this dimension by another dimension .
5062	Returns an array of factors that are the power of this factor .
5063	Returns whether this dimension is reciprocal of the given dimension .
5064	Returns true if all factors are dimensionless .
5065	Creates a new instance of Grib1ParamTables .
5066	Creates a new Grib1ParamTables object from a jdom2 . Element .
5067	Add a parameter table lookup .
5068	Add a parameter table to the standard lookup .
5069	Raise the unit to the given power .
5070	Convert an array of floats to a derived unit .
5071	Initialize the unit table .
5072	Make a vertical variable .
5073	Peek the name of the file .
5074	Grabs a short from the byte array at the given offset .
5075	Grabs an int from a byte array .
5076	Grabs a float from the given byte array .
5077	Grabs a double descriptor from the given byte array .
5078	Create an alias with the given name .
5079	Add a new unit to the registry .
5080	Creates a converter from the given unit to the given unit .
5081	Set the structure data .
5082	Set the point feature data .
5083	Draw the shape to the given graphics context .
5084	Get the list of shapes for this feature .
5085	Process the input stream .
5086	Read data from the input stream .
5087	Reads more bytes from the input stream .
5088	Reads at most len bytes from the stream into a byte array .
5089	Skips the given number of bytes .
5090	Adds the dimensions to the NetCDF file .
5091	Returns the index of the point in the grid .
5092	Returns true if the file is valid .
5093	Open the NCDF file .
5094	Read data from a section .
5095	Read one row data .
5096	Creates a gridarray from a NetCDF Dataset .
5097	Create a variable .
5098	Fire the map area event .
5099	Set the map area
5100	Set the map area .
5101	Set the center of the map area .
5102	Set the projection .
5103	Add the actions to the given menu .
5104	Redraws the gauge after a certain amount of time
5105	Set the new screen size .
5106	Set the selected variable .
5107	Returns the double value at the given offset .
5108	Returns the double value at the given index .
5109	Returns the object at the given index .
5110	Returns the name of the sector .
5111	Read a scaled integer .
5112	Finds the parameter with the given name ignoring case .
5113	Returns true if the next Odometer is available .
5114	Swap the byte order .
5115	Returns the number of time steps per file .
5116	Returns the full path to the file with the specified index .
5117	Get the list of file names .
5118	Returns the path to the DDF file .
5119	Returns the full path to the file .
5120	Adds a chsub .
5121	Convert a reference date to a TimeCoordIntvValue
5122	Read WMO .
5123	Returns a copy of the uncompdata at the given offset .
5124	pcode_12n13n14
5125	pcode_25 .
5126	Read the nids product header .
5127	Pcode 5 .
5128	pcode_128 .
5129	Pcode 10n9 .
5130	Returns an array of levels for a given number of levels .
5131	Get the dualpol levels .
5132	Adds a new variable to the file .
5133	Adds a parameter to the given NetcdfFile .
5134	Uncompress a byte buffer into a byte array .
5135	Get an unsigned integer from a byte array .
5136	Convert a byte array into an int .
5137	Convert a byte array to an object .
5138	Process a DMR request .
5139	Get the request state .
5140	Sends an error to the client .
5141	Set the anchor point .
5142	Stretch the specified point .
5143	Returns the bounds of this rectangle .
5144	Returns the bounds of the last rectangle .
5145	Parse a date only format .
5146	Replace data variables .
5147	Ensure that the array size is okay .
5148	Reads a 2 - bit integer from a file .
5149	Reads an unsigned integer from the given file .
5150	Reads a 3 - byte integer from the given file .
5151	Reads a 2 - bit unsigned integer from the given file .
5152	Reads a 3 - byte integer from the given file .
5153	Reads a 4 - byte float from the given file .
5154	Returns a 4 - bit floating point number .
5155	Reads an 8 - bit integer from the given file .
5156	Count the number of bits in the given bitmap .
5157	Construct a copy of this projection .
5158	Returns the WKS representation of this Projc .
5159	Escape entities in a string .
5160	Unescape backslash characters .
5161	Split a string into a list of strings .
5162	Make the FMRC inv .
5163	Returns the service special name for the given path
5164	Returns the number of projected components .
5165	Gets the reference time .
5166	Creates a new ArrayStructureBB .
5167	Main method to save the index to a directory .
5168	Read a Grib1Record .
5169	Checks if the given NetCDF file is mine .
5170	Make UTM projection
5171	Reacquires the area file .
5172	Returns true if this date is before the specified date .
5173	Returns true if this date is before the specified date .
5174	Returns true if this date is after the specified date .
5175	Sets the value at the given index .
5176	Adds a coordinate system to this variable .
5177	Sets the units for this variable .
5178	Returns the value of the units attribute .
5179	Initializes this instance with the specified read mode .
5180	Read a catalog .
5181	Process datasets .
5182	Read all cats in the given directory .
5183	Returns true if lon is between lonBeg and lonEnd .
5184	Converts a latitude value to a string .
5185	Converts a longitude value to a string .
5186	Compares this quantity with another quantity .
5187	Returns the selected dataset .
5188	Set the selected dataset .
5189	Creates a tree path from the given node .
5190	Opens all catalog nodes .
5191	Set the catalog from the given location .
5192	Set the catalog .
5193	Find the alias of the coordinate axis .
5194	Write a VInt .
5195	Writes a sequence of characters to the stream .
5196	Reads a number of characters from the stream into a char array .
5197	Set the debug flags .
5198	Adds a member to the group .
5199	Hide a member .
5200	Returns a list of all member names .
5201	Returns the member with the given name .
5202	Read the bitmap from the Grib1 file .
5203	Restore the state of the table .
5204	Returns an iterator over the selected rows .
5205	Returns the model index .
5206	Returns the array value for the given member .
5207	Returns the scalar value of the given member .
5208	Returns a Java array of double values .
5209	Returns the float value of the given member .
5210	Returns a Java array of float values .
5211	Returns the byte value of a scalar member .
5212	Get a Java array as a byte array .
5213	Returns the integer value of a scalar member .
5214	Get a Java array as an int array .
5215	Returns the short value of the given member .
5216	Get a short array from a StructureMembers .
5217	Returns the long value of a scalar member .
5218	Get a long array from a StructureMembers .
5219	Returns the scalar char value of the given member .
5220	Get a java array as a char array .
5221	Write one dataset to the file .
5222	Checks if a dataset is useable .
5223	Creates a copy of this dataset .
5224	Transfer metadata from one DatasetNode to another .
5225	Get the inheritable metadata .
5226	Adds a product to the grid .
5227	Prints information about missing records .
5228	Prints a summary of the missing records .
5229	Returns the record at the specified location .
5230	Returns a string representation of the grid .
5231	Returns the long name for the first record .
5232	Subset by intervals .
5233	Checks if two byte arrays are equal .
5234	Parse a DMR document .
5235	Process the attributes of the given dataset .
5236	Adds a list of coordinates to the partition .
5237	Sets the Gaussian Lats .
5238	Parse a variable selector .
5239	Creates a section specification string from a list of ranges .
5240	Returns true if the bounding box is found .
5241	Close the connection .
5242	Execute the HTTP method .
5243	Identify the encoding station .
5244	Returns the name of the axis with the given type and dimension .
5245	Sets the stream .
5246	Reads the next character from the input stream .
5247	Start the progress monitor .
5248	Parse a string to a URI .
5249	Returns a URI that is excluded from the given URI .
5250	Nullify a String if it is not null .
5251	Returns the canonical path of the given prefix and suffix .
5252	Returns true if the dataset has been modified since the last modified time .
5253	Copy information from another GribCollectionMutable .
5254	Returns a list of all files in the directory .
5255	Set the index file .
5256	Get the index file path in cache .
5257	Close the index file .
5258	Returns the number of counters in this group .
5259	Add a global attribute .
5260	Add a global attribute .
5261	Delete a global attribute .
5262	Rename a global attribute .
5263	Adds an attribute to a variable .
5264	Adds an attribute to a variable .
5265	Delete an attribute from a variable .
5266	Rename a variable attribute .
5267	Make the type of the file .
5268	Write the WFS headers and BB .
5269	Write members .
5270	Write the station obs dataset to an XML file .
5271	Write the station collection XML .
5272	Write DSR .
5273	Sends a DMR or DSR request .
5274	Sends an error response to the client .
5275	Close the stream .
5276	Flushes the buffer to the server .
5277	Construct a copy of this projection .
5278	Returns true if this set contains the specified element .
5279	Returns the index of the element at i .
5280	Shifts this range by the specified origin .
5281	Read data from the file .
5282	Read data from the file .
5283	Returns a subset of this vector .
5284	Returns an iterable of all catalog extensions .
5285	Delete the old database files before the given tracker number .
5286	Set the values of the GDS .
5287	Get the data chunk iterator without filtering .
5288	Make a double array from an array of ints .
5289	Get the dataset boundaries .
5290	Checks if the requested variables are contained in the requested dataset .
5291	Returns the dataset source structure for the given name .
5292	Get the resource path .
5293	Make the vertical dimensions of a group .
5294	Reads the PIB from the file .
5295	Finishes this dataset .
5296	Transfer local metadata inheritable to public metadata .
5297	Transfer metadata from another dataset to this dataset .
5298	Transfer inheritable metadata from one dataset to another .
5299	Sets the contributors .
5300	Add a dataset to the dataset list .
5301	Remove a dataset from this catalog .
5302	Replace a dataset in the catalog .
5303	Adds a service to the registry .
5304	Removes a service from the registry .
5305	Sets the list of local services .
5306	Removes a local metadata from this dataset .
5307	Returns the value of a user property .
5308	Validates this dataset namer .
5309	Returns a list of all the descriptors .
5310	Construct the server path .
5311	Get the capabilities from the server .
5312	Get a feature .
5313	Check parameters for error .
5314	HTTP handler .
5315	Get the capabilities for the given URL .
5316	Returns the size of the object in bytes .
5317	Returns the last modified date .
5318	Add all variables referenced by this dataset .
5319	Return a file .
5320	Send a string to the response .
5321	Set the response content length .
5322	Get the request URI .
5323	Get the request path .
5324	Gets the request URL .
5325	Returns the value of the parameter with the given name ignoring case .
5326	Saves the current settings to the preferences .
5327	Writes a directory to the response .
5328	Sets the bit offset for the given key .
5329	Creates a new nested counter .
5330	Counts the number of bits in this row .
5331	Append a line to the text history pane .
5332	Make a StationCollectionDocument from a LatLonRect .
5333	Get the capabilities document .
5334	Returns the record at the given coordinates .
5335	Returns the coordinate at the specified index .
5336	Adds a new item to the list .
5337	Handle uncaught exception .
5338	Returns the slice at the given index .
5339	Step the index .
5340	Get the NCEP gen process map .
5341	Get the feature type from a Cdmrf endpoint
5342	Set has value .
5343	Creates an instance of Grib1Gds using the specified grid number .
5344	Copy data from an input stream to an output stream .
5345	Read the contents of an input stream into a String .
5346	Read the contents of an input stream to a byte array .
5347	Writes the contents to the given output stream .
5348	Copy the contents of a file to an output stream .
5349	Copy the contents of a RAF file to an output stream .
5350	Copy a directory tree .
5351	Read a file into a byte array .
5352	Read a file and return it as a String
5353	Writes the contents to the given file .
5354	Write the contents to a file .
5355	Writes an input stream to a file .
5356	Parses the exception and writes it to the response .
5357	DAP2 exception handler .
5358	Sends a bad URL page .
5359	Get the catalog .
5360	Print the catalog available for this server .
5361	Prints the status of the server .
5362	Print a bad URL page .
5363	Gets the reference date .
5364	Read vlen data .
5365	Read a NcML String into a NcmlCollectionReader
5366	Open a NetcdfDataset and return a NcmlCollectionReader
5367	Allow characters in a string .
5368	Clean up the given hash .
5369	Filter the input string if it is one of the okChars .
5370	Filter 7 - bit characters .
5371	Make sure the name is a valid CDM object name .
5372	Returns the index of the first occurrence of s1 and s2 .
5373	Pads the given string to the specified length .
5374	Pads a string to the right .
5375	Removes the first occurrence of sub from s .
5376	Removes the specified character from the given string .
5377	Removes a character from the end of a string .
5378	Collapse whitespace .
5379	Replaces all occurrences of out with in .
5380	Replaces all occurrences of replaceChar with replaceWith .
5381	Replaces all occurrences of the given pattern with the given value .
5382	Replaces all occurrences of the match with the subst .
5383	Substitutes a string .
5384	Removes all occurrences of a character from a string .
5385	Replace all occurrences of in in with out .
5386	Replaces all characters in out with in .
5387	Replaces all occurrences of match with subst in sbuff .
5388	Trims the given string from the beginning and end of the given string .
5389	Process a collection update event .
5390	Returns a copy of the current state .
5391	Updates the state .
5392	Show unique GDS and PDS templates .
5393	Get the list of datasets .
5394	Release all resources .
5395	Creates a deep copy of the given StructureData .
5396	Copy an ArrayStructure to a ArrayStructureBB .
5397	Copy an ArrayStructure to an ArrayStructureBB .
5398	Copy a StructureData to an ArrayStructureBB .
5399	Copy a StructureData to a ArrayStructureBB
5400	Get the time interval size in hours .
5401	Create a section of the coordinate axis .
5402	Creates an instance of the TableAnalyzer class .
5403	Returns the first feature type in the tree .
5404	Analyzes the data set and creates nested tables .
5405	Sync the grid file .
5406	Get the Gaussian Latitudes for a given type .
5407	Swaps a long from a byte array .
5408	Swaps a float from a byte array .
5409	Swap a char from a byte array .
5410	Find coordinate axes .
5411	Add a parameter to a coordinate transformation .
5412	Returns the common parent of this group and the given group .
5413	Checks if the given group is a parent of this group .
5414	Sets the parent group .
5415	Adds a dimension to the group .
5416	Adds a dimension to the group if it doesn t already exist .
5417	Adds a new group to this group .
5418	Adds an enumeration to this group .
5419	Adds a new variable to this group .
5420	Removes the dimension with the given name .
5421	Make a group relative to this group .
5422	Convert DDS alias fields to DAS alias fields .
5423	Print the DAS object to the specified PrintWriter .
5424	Returns the variable with the given name .
5425	Write a grid to the file .
5426	Replace missing values .
5427	Replace missing values with zero values .
5428	Get the x start of a geo shift .
5429	Write a grid to the file .
5430	Writes the exception to the response .
5431	Returns the value of nc_inq_libvers .
5432	Make the top index file from the config .
5433	Returns the type of the GRIB collection .
5434	Update a GRIB collection .
5435	Update the leaf collection .
5436	Open a GribCollection from a RAF file .
5437	Open a GribCollectionImmutable from a data file .
5438	Open a GribCollection from a data file .
5439	Returns true if the given url matches the given pattern .
5440	Adds a triple to the cache .
5441	Returns the value for the given key or null if the key is not found .
5442	Set the Well - known properties .
5443	Load the specified rc file .
5444	Inserts a triple into the triplestore .
5445	Get the local list of datasets .
5446	Finds a dataset by its name .
5447	Set the projection to use .
5448	Returns an iterator over all the shapes in the feature set .
5449	Make a list of shapes for each feature .
5450	Compares this string with the specified string .
5451	Start a progress monitor task .
5452	Checks if the collection index file needs to be updated .
5453	Normalize a list of observations .
5454	Sets the value at the specified index .
5455	Returns the structure data at the specified index .
5456	Copies all the structures from the array to the result index iterator .
5457	Returns the scalar value for the given record .
5458	Convert a scalar to a double .
5459	Convert a scalar integer to an int .
5460	Returns the float value of a single record .
5461	Get a scalar byte .
5462	Returns the short value of a single record .
5463	Returns the char value of a single record .
5464	Get scalar string .
5465	Get an ArrayStructure from a StructureMembers . Member
5466	Get an ArraySequence from a StructureMembers .
5467	Get an array object from a StructureMembers .
5468	Returns the minimum and maximum value of the given value .
5469	Evaluate a CEAST .
5470	Returns a string representation of this constraint .
5471	Returns true if the given node is a reference to another node .
5472	Evaluate the expression and return true if the expression matches .
5473	Returns the number of expansion variables in the given structure .
5474	Compute the list of enums for all variables .
5475	Compute the groups .
5476	Compile a constraint .
5477	Check if the given file is a valid GRIB2 or Partition2 .
5478	Make the actions system .
5479	Returns the byte order of the file .
5480	Set the byte order of the file .
5481	Finds the key with the given name .
5482	Find the file header with the given name .
5483	Get the file header .
5484	Print the parts .
5485	Get the data pointer for a given part .
5486	Read the RMISSD value of a word .
5487	Read a string from the file .
5488	UnPK a part .
5489	Returns a string representation of a bit .
5490	Writes a NetcdfFile to a WritableByteChannel .
5491	Parse a BaseType element .
5492	Parse a grid element .
5493	Parse aliases .
5494	Decodes a list of key descriptors into a list of DataDescriptors
5495	Replicates a list of keys .
5496	Returns the filename of the dataset .
5497	Returns the CFFeature type .
5498	Returns true if a and b are nearly equal .
5499	Returns true if the given DAP node references this DAP node .
5500	Parse a unit specification .
5501	Probe an object .
5502	Checks if a variable is tiled .
5503	Make the best coordinate time from the complete .
5504	Convert a LatLonRect to a ProjectionRect array
5505	Show a list of time series .
5506	Make a map from a list of attributes .
5507	Returns the values of this field .
5508	Returns the numeric value at the given index .
5509	Write the CDL .
5510	Sets the string value of the attribute .
5511	Sets the values of the attribute .
5512	Sets the values of this array .
5513	Scans the current level and creates a list of InvCrawlablePairs .
5514	Generate proxy ds resolver catalog .
5515	Add a message to the queue .
5516	Set the thredds datatype .
5517	Jumpto ThreddsDatatype .
5518	Jumpto thredds data type .
5519	Set the dataset .
5520	Prepare the GUI .
5521	Creates the tools frame .
5522	Convert a list of coordinate axes to a human readable name .
5523	Returns the first coordinate axis that is lesser than the second one .
5524	Finds the first coordinate axis of the given type .
5525	Get the projectionCT .
5526	Returns true if this projection is a geo - xy projection .
5527	Returns true if all the coordinates are regular .
5528	Checks if the given set is a subset of the given set .
5529	Checks if there are any axes in wantAxes .
5530	Returns true if this coordinate axis contains the given axis name .
5531	Checks if the domain contains one of the requested dimensions .
5532	Returns true if this axis is contained in the list of axis types .
5533	Returns true if there is an axis with the given type .
5534	Clone this DAG .
5535	Returns the currently selected bean .
5536	Get the list of selected beans .
5537	Get the selected cells .
5538	Set the selected bean .
5539	Restore the state of the table .
5540	Creates an unknown unit with the given name .
5541	Close the stream .
5542	Returns true if the given variable is an extra .
5543	Checks if the given variable is a coordinate .
5544	Find coordinate axis .
5545	Adds all nondata variables to the list .
5546	Adds the extra joins to the parent table .
5547	Make a station feature from a StructureData .
5548	Creates the nodemap .
5549	Creates a new SimpleUnit with the given name .
5550	Factory with exceptions .
5551	Make a unit from the given name .
5552	Checks if two units are compatible with exceptions .
5553	Checks if the given unit is a valid date unit .
5554	Checks if the given unit is a time unit .
5555	Get conversion factor .
5556	Converts the given value to the given output unit .
5557	Returns true if this unit is unknown .
5558	Returns the value of this unit .
5559	Creates a new rel - op clause .
5560	Creates a new boolean function clause .
5561	Creates a new BTFunctionClause .
5562	Creates a grayscale image from an array .
5563	Crawl the catalog .
5564	Crawl a dataset .
5565	Crawl direct datasets .
5566	Get the file or cache .
5567	Get an existing file or cache it if it doesn t exist .
5568	Set the debugLeaks flag .
5569	Returns a sorted list of all files .
5570	Close the file .
5571	Seeks to the given position .
5572	Flushes the buffer to the file .
5573	Reads the next byte from the file .
5574	Reads a short array from the input stream .
5575	Reads a 4 - byte integer from the stream .
5576	Reads n bytes from the input stream into an array of ints .
5577	Reads n bytes from the stream into a long array .
5578	Reads n bytes from the stream as a float array .
5579	Reads a double array from the stream .
5580	Read a string from the stream .
5581	Read a string from the input stream .
5582	Write a boolean array to the stream .
5583	Writes n bytes from a short array to the stream .
5584	Writes an array of characters to the output stream .
5585	Write an array of ints to the output stream .
5586	Writes n bytes from a long array to the stream .
5587	Writes an array of floats to the stream .
5588	Writes a double array to the stream .
5589	Write a string to the output stream .
5590	Writes a character array to the output stream .
5591	Search for the next match .
5592	Appends the query to the given StringBuffer .
5593	Creates a new directory collection .
5594	Finds the index file .
5595	Checks if the index is a leaf .
5596	Construct children .
5597	Scan for children .
5598	Read a list of files from the index .
5599	Returns a list of all gridsets in this dataset .
5600	Acquires a file from the cache .
5601	Remove a file from the cache .
5602	Remove a file from the cache .
5603	Release a file from the cache .
5604	Returns a 4 - bit integer .
5605	Update in cache .
5606	Clear the cache .
5607	Make the vertical transform .
5608	Returns whether this axis is a global longitude axis .
5609	Returns true if the z - axis is positive .
5610	Find the x and y index from a coordinate .
5611	Find the x and y index from a coord - bounded coordinate .
5612	Find the x and y coordinates for a given location .
5613	Find the xyindex from a lat - lon bounding box .
5614	Returns the position of the selected item .
5615	Returns the item at the specified pixel .
5616	Iterate over the MFileCollection .
5617	Get the list of remote files .
5618	Returns the name of the subcenter .
5619	Convert a unit string to a CalendarPeriod .
5620	Creates a new instance of a CalendarPeriod .
5621	Creates a CalendarPeriod from a UDUNIT string .
5622	Subtracts the given date from this date .
5623	Get conversion factor .
5624	Returns the value in milliseconds .
5625	Returns the offset between two dates .
5626	Sync the index .
5627	Initialize the tables .
5628	Put the given date root ext into the map .
5629	Find the longest path match .
5630	Find the data root for the given request path .
5631	Convert a DataRootExt to a DataRoot .
5632	Get the date range for the given calendar .
5633	Reindex a list of coordinates .
5634	Creates a new NetcdfFileWriter .
5635	Adds a new group to the parent group .
5636	Adds an enumeration type definition to the given group .
5637	Delete an attribute from a group .
5638	Rename a group attribute .
5639	Add a record structure to the file .
5640	Aborts the connection .
5641	Writes the properties of this object to the given writer .
5642	Extract the ThreddsMetadata from a ThreddsDataset .
5643	Divide this unit into another unit .
5644	Convert this unit to a derived unit .
5645	Convert the amount to the derived unit .
5646	Convert a nested variable to an array .
5647	Convert the top variable to a DODS variable .
5648	Convert a DodsV to an Array
5649	Close all bdb caches .
5650	Opens the database .
5651	Converts an integer value to a Joda Period .
5652	Ensure that the array has at least the given capacity .
5653	Returns the string at the given index .
5654	Make a catalog for a directory .
5655	Make a catalog for a proxy ds resolver .
5656	Returns the coordinate type of the first dataset .
5657	Creates a new instance of the Grib2Pds class .
5658	Calculates the time from the start index .
5659	Apply scale factor .
5660	Parse a local concept .
5661	Adds a local concept .
5662	Clean the line .
5663	Store a concept for a given table version and parameter number
5664	Writes the grib1 tables to disk .
5665	Write the lookup table file .
5666	Show the local concepts .
5667	Main entry point for EcmwfLocalConcepts .
5668	Returns the source type for the given name .
5669	Expand the access point catalog .
5670	Expand the dataset source .
5671	Name all datasets in a dataset container .
5672	Name the dataset list .
5673	Name the dataset tree .
5674	Load a picture from an image .
5675	Stop loading the image except the given url .
5676	Called when the source picture status changes .
5677	Notifies all registered listeners that the source load progress has changed .
5678	Creates a scaled picture in a thread .
5679	Returns the scaled size of the image .
5680	Returns the scaled size of the image .
5681	Returns the merged parts of this message .
5682	Make the header of a GempakStation .
5683	Returns a list of all the types that are valid for SNCKUA .
5684	Checks if the given part is a valid group .
5685	Set the root directory .
5686	Creates the root directory .
5687	Get the cache file .
5688	Clean all cache files that are older than cutoff .
5689	Clean the cache .
5690	Checks if the given frame is a Buffr Table .
5691	Creates a new coordinate axis .
5692	Creates a copy of this coordinate axis with no cache .
5693	Returns true if the data type is numeric .
5694	Prints the information about this axis .
5695	Get the calendar from the attribute .
5696	Set the list of rows .
5697	Returns the selected row .
5698	Increments the selected row .
5699	Returns the model index of this column .
5700	Sets the selected index .
5701	Quick sort .
5702	Swaps the elements i and j .
5703	Returns the MFileOS object for the given filename .
5704	Rotates the given lonlat .
5705	Create an XMLStore from a file .
5706	Create a new XMLStore from an input stream .
5707	Create an XMLStore from a resource .
5708	Make a standard filename for an XML store .
5709	Saves the preferences file to the file system .
5710	Save the preferences to an output stream .
5711	Write an atomic variable .
5712	Writes the structure of the given variable to the given output stream .
5713	Write the structure 1 .
5714	Writes a sequence to the given output stream .
5715	Write a record to the given output stream .
5716	Checks if the given file is valid .
5717	Returns the WMO ID .
5718	Read a single row from the input stream .
5719	Returns the data at the given index .
5720	Read the data from the GDR file .
5721	Get the data from a Grib2Drs .
5722	Read an object from a list of slices .
5723	Create a CFGridFile from a grid dataset .
5724	Make a grid file size estimate .
5725	Make a NetCDF file from a grid dataset .
5726	Sets the list of stations .
5727	Set the selected station .
5728	Picks the closest station to the given point .
5729	Picks the closest station to the given point .
5730	Returns the selected station .
5731	Returns the name of the project .
5732	Get all stations in the given bounding box .
5733	Returns the station with the given name .
5734	Get the data iterator for a given station .
5735	Get the data iterator for a given station .
5736	Read the data from the ray file .
5737	Returns the dot product of this vector and the given vector .
5738	Returns the norm of the matrix .
5739	Normalize the vector .
5740	Sets the services for each DatasetBuilder .
5741	Returns the parameter with the given id .
5742	Returns the local parameter with the given id .
5743	Adds a name to the set of prefixes .
5744	Adds a symbol to the prefix set .
5745	Returns the first prefix in the set .
5746	Checks if the email address is valid .
5747	Returns the value of a parameter .
5748	Calculates the CRC value of the grid definition .
5749	Returns true if this is a thin .
5750	Returns the index of the field with the given name .
5751	Returns the time type name for the given time range indicator .
5752	Returns the time coordinate .
5753	Set the next polygon .
5754	Set the previous polygon .
5755	Returns the value of the property with the given name .
5756	Set the current projection .
5757	Get the time offset axis for a given run date .
5758	Register an IOProvider .
5759	Register IOProvider .
5760	Register an IOProvider with the given target class .
5761	Checks if an IOServiceProvider is registered .
5762	De - register an IOSP service provider .
5763	Returns true if the given file can be opened .
5764	Open a NetcdfFile in memory .
5765	Open a NetcdfFile in memory .
5766	Open a NetCDF file in memory .
5767	Open a NetcdfFile in memory .
5768	Finds the global attribute with the given name ignoring case .
5769	Convert this object to NCML .
5770	Write the CDL to the given output stream .
5771	Writes the contents of this object to the specified PrintWriter .
5772	Write the CDL .
5773	Adds an attribute to the given parent group .
5774	Adds an attribute to the given parent group .
5775	Adds a new group to this group .
5776	Adds a dimension to the given parent group .
5777	Removes a dimension from the given group .
5778	Adds a new variable to the given group .
5779	Adds a new variable to the given group .
5780	Adds a string variable to the given group .
5781	Removes a variable from the given group .
5782	Send IOSP message .
5783	Make the record structure .
5784	Finishes the group .
5785	Read a variable section .
5786	Read a variable into a byte channel .
5787	Read a list of arrays .
5788	Read a variable section from the file .
5789	Make the full name of the given node .
5790	Returns the full name of the given group .
5791	Returns true if the given file should be included .
5792	Returns true if the file should be excluded .
5793	Returns true if any of the filters match .
5794	Append a value to the end of the vector .
5795	Dispatch check value .
5796	Force the given value to be a byte value .
5797	Checks if the given String is a Byte .
5798	Checks if the given string is a valid short .
5799	Checks if the given string is an integer .
5800	Check if the given string is a valid unsigned integer .
5801	Checks if the given string is a valid float .
5802	Checks if a string is a valid double .
5803	Get the data type for an attribute .
5804	Checks if the given dataset is viewable .
5805	Checks if the given string is a valid boolean string .
5806	Checks if the given string is a valid alphanumeric string .
5807	Checks if the given string is a valid alphanumeric string constrained by the given set .
5808	Returns true if the given path is a file path .
5809	Convert a Unicode code point to a percent - encoded hexadecimal string .
5810	Returns the value of the parameter with the given key .
5811	Compares two GridDefRecords .
5812	Process the contents of the given input stream .
5813	Process a buffer .
5814	Removes quotes from a string .
5815	Marks all variables in a stack .
5816	Writes the NCML file to the specified location .
5817	Get value from thredds config .
5818	Write the CDL to the file .
5819	Create a new station helper .
5820	Validate the result .
5821	Returns the azimuth in degrees .
5822	Returns the elevation of the message .
5823	Get the Latitudes of the Rays .
5824	Get the longitudes of all the rays .
5825	Returns an array of all the altitude values of the Rays .
5826	Returns an array of the azimuths of the Rays .
5827	Returns an array of the elevations of the Rays .
5828	Select a subset of this Structure .
5829	Returns a structure with the given variable name .
5830	Adds a member variable to this structure .
5831	Sets the list of member variables .
5832	Sets the parent group of this variable .
5833	Calculates the element size .
5834	Read the structure at the given index .
5835	Read a vector structure from the file .
5836	Returns an iterator over the contents of this Structure .
5837	Get the data category .
5838	Returns the class name .
5839	Adds a parameter .
5840	Returns the header of the class .
5841	Convert a LatLonRect to a ProjectionRect .
5842	Returns the version number of the given conventions .
5843	Get the zis positive value .
5844	Delete the next file .
5845	Set the color scale parameters .
5846	Render the plan view .
5847	Returns whether this group is a child of another group .
5848	Returns the type with the given name .
5849	Installs all columns in the given table .
5850	Sets the API key and API secret .
5851	Creates a new label with the given value .
5852	Creates a label for a list of lines .
5853	Creates a new HTML label with the given value .
5854	Connect to Cloud SQL instance .
5855	Returns the list of supported ip types .
5856	Connect to MySQL .
5857	Purges a logger from the registry .
5858	Compile all the source code .
5859	Compile a class .
5860	Adds a source code to the compiler .
5861	Read the graphic control extension .
5862	Get the next frame .
5863	Returns a property which allows to select the persons .
5864	Initialize the list events .
5865	Returns the person with the given id or null if not found .
5866	Adds a validation message to this validator .
5867	Sets the person id .
5868	Creates and injects a view model .
5869	Creates a ViewModel from a View .
5870	Loads the countries from the ISO 3166 . xml file .
5871	Loads the list of subdivisions from ISO 3166 - 2 . xml .
5872	Add a field that gets and sets the value of the property .
5873	Add an immutable field to this bean .
5874	Creates a Java view step .
5875	Creates a fxml view step .
5876	Removes all listeners from the map and passes them to the consumer .
5877	Creates the index events .
5878	Access a member .
5879	Load FXML view tuple .
5880	Creates the fxml path .
5881	Query for a style row .
5882	Get the pixel value of an image .
5883	Get the pixel values from a byte array .
5884	Validate the image type
5885	Creates an image with the specified width and height .
5886	Set the tile data .
5887	Execute a raw query .
5888	Wrap a query in a CursorResult .
5889	Executes the query and returns the result .
5890	Execute a user query .
5891	Convert a cursor to a TResult .
5892	Get the feature row for the given geometry index
5893	Register a table with the cursor wrapper
5894	Retrieve the tile row .
5895	Get the gridded coverage data
5896	Get the coverage data for the tile
5897	Get the coverage data
5898	Get the results for the requested coverage data request .
5899	Get the results zoom in or out of the bounding box .
5900	Get the results zoom in the requested zoom level .
5901	Get the results zoom out of the requested tile matrix .
5902	Get the tile matrix for the requested coverage data request .
5903	Returns the value of the specified tile .
5904	Sets the icon for the given geometry type .
5905	Returns the icon for the given geometry type .
5906	Open or get bindings database .
5907	Converts a byte array into a bitmap .
5908	Convert a bitmap to a byte array .
5909	Create the table metadata
5910	Delete a table from the database .
5911	Get or create the table metadata
5912	Get the id of the GeoPackage
5913	Create table metadata .
5914	Creates the extension if it doesn t already exist .
5915	Get the feature row .
5916	Execute a raw query and return a UserCustomCursor
5917	Query for features within a bounding box .
5918	Query for points in the given envelope .
5919	Count the number of points in the given envelope .
5920	Query for rows within the specified range .
5921	Build where clause .
5922	Query for features within a bounding box .
5923	Count the number of features in the bounding box
5924	Query for features within the given envelope .
5925	Query for features within the specified range .
5926	Count the number of elements within the specified bounds .
5927	Set the data from a bitmap .
5928	Set the data from a bitmap .
5929	Sets the bitmap compression configuration .
5930	Returns the number of tiles in the map .
5931	Adjusts the bounding box .
5932	Adjusts the tile grid bounding box according to the WGS84 projection .
5933	Adjusts the bounding box to the WGS84 bounds .
5934	Adjusts the bounding box based on the web mercator bounds .
5935	Returns the bounding box for the specified zoom level .
5936	Returns the tile grid for the specified zoom level .
5937	Query for a tile row .
5938	query for tile descending
5939	Get the closest zoom level .
5940	Get the approximate zoom level .
5941	Query for the tile grid for the specified zoom level .
5942	Delete a tile from the table .
5943	Returns the number of tiles in the specified zoom level .
5944	Check if this is Google tiles .
5945	Get the pixel value of an image .
5946	Get the pixel values from an image .
5947	Validate the image type
5948	Creates an image for the coverage data .
5949	Sets the value of the first pixel in the image .
5950	Get the GeoPackage or create it if it doesn t exist
5951	Get the current row .
5952	Move to the next invalid position
5953	query by base feature id
5954	Delete by base id and geometry type
5955	Get a rectangle from a bounding box and a bounding box section
5956	Get a rectangular float rectangle .
5957	Delete missing databases .
5958	Create and close the GeoPackage
5959	Check if the database is valid
5960	Validate database and close on error .
5961	Validate the database and close it .
5962	Validates the database .
5963	Validate the database header
5964	Check if the database header is valid
5965	Add internal databases
5966	Add external databases
5967	Import the GeoPackage from an input stream
5968	Get the GeoPackage metadata
5969	Get the GeoPackage metadata at the external path
5970	Creates a new geometry in the database .
5971	Populate a geometry metadata from an envelope .
5972	Delete the geometry from the database .
5973	Creates or updates the GeometryMetadata if it does not exist .
5974	Updates the geometry metadata .
5975	Count the number of rows in a table in a given bounding box .
5976	Create a geometry metadata from a cursor .
5977	Update the table .
5978	Draw a tile .
5979	Returns a list of simple attributes rows for the given ids .
5980	Checks the integrity of the given cursor .
5981	Returns a UserMappingDao for the given table .
5982	Get the SimpleAttributes DAO for the given table .
5983	Returns all the mappings for the given base relation .
5984	Returns the mappings for the given related relation .
5985	Checks if there is a mapping with the given base id and related id
5986	Returns the number of rows in the given cursor .
5987	Register the cursor wrapper
5988	Read a user custom table
5989	Get the tile for the requested bounding box
5990	Draw a tile .
5991	Reproject a tile .
5992	Retrieve the tile results from the database .
5993	Calculate the overlap between the line and polygon .
5994	Sets the density of the polygon .
5995	Sets the Paint used to paint the line .
5996	Sets the paint for the polygon .
5997	Draw a tile into a byte array .
5998	Draw a tile .
5999	Draw a tile in the specified zoom level .
6000	Query the number of features in the specified zoom level .
6001	Returns the number of features in the specified bounding box .
6002	Query for features in the specified zoom level .
6003	Query for features in the specified bounding box .
6004	Draw all features in the specified zoom level
6005	Simplify a list of points .
6006	Get the point paint .
6007	Get the paint for the line .
6008	Get the polygon paint based on the feature style .
6009	Get the paint for the fill polygon .
6010	Get the paint for a feature style .
6011	Get the style paint
6012	Returns the paint for the given style row and type .
6013	Returns the paint for the specified style id and type .
6014	Put a bitmap for an icon row .
6015	Creates an icon from an icon row .
6016	Quote the given ContentValues .
6017	Creates a new bitmap .
6018	Recycle all bitmaps .
6019	Returns the bitmap for the given layer .
6020	Returns the canvas for the given layer .
6021	Creates the bitmap and canvas for the specified layer .
6022	Get the style mapping dao for the feature table .
6023	Get the style DAO .
6024	Get the Icon DAO
6025	Returns the feature styles for the specified feature table .
6026	Get the styles for a feature table .
6027	Get the style for a feature table and geometry type
6028	Returns the icons for the specified feature table .
6029	Get the icon for the given table and geometry type
6030	Gets the feature styles for a feature row .
6031	Returns the feature styles for the specified feature .
6032	Returns the styles for the given feature row .
6033	Get the icon for a feature row
6034	Get the styles for a feature .
6035	Get the icons for a feature .
6036	Sets the feature styles for a feature table .
6037	Sets the styles for a feature table .
6038	Sets the icons for a feature table .
6039	Set the feature styles for a feature row .
6040	Sets the styles and icons of a feature .
6041	Sets the styles for a feature row .
6042	Sets the styles for a feature .
6043	Sets the style of a feature row .
6044	Set the default style for the given feature row .
6045	Set the default style for a feature .
6046	Set the icons for the given feature row .
6047	Sets the icons for a feature .
6048	Set the icon for a feature .
6049	Sets the default icon for the given feature row .
6050	Set the default icon for a feature .
6051	Returns the style id or inserts it if it doesn t exist .
6052	Get the icon id or insert it if it doesn t exist .
6053	Insert a style mapping .
6054	Delete a style mapping for a feature table .
6055	Delete the icon for a feature table .
6056	Delete all style mappings for the feature table .
6057	Delete the style mapping for a feature table .
6058	Delete a style mapping .
6059	Get all style ids for a feature table
6060	Get all icon ids for a feature table
6061	Get all style ids for a feature table
6062	Get all icon ids for a feature table
6063	Get the image bytes .
6064	Flushes the output stream .
6065	Get the pixel value
6066	Reads the pixels from the image .
6067	Draw the feature in the tile
6068	Draw a line path .
6069	Draw a polygon path .
6070	Adds a line string to the path .
6071	Adds a polygon to the path .
6072	Returns the cache for the given table .
6073	Removes a feature row from the table .
6074	Clear the cache and resize the cache .
6075	Returns the cached table styles .
6076	Returns the cached icons for the table .
6077	Get the RTree Index Table DAO
6078	Set the width of the column
6079	Set the height of the gauge
6080	Returns the dimensions of the image .
6081	Returns the tile density .
6082	Read blob value .
6083	Read the user custom table
6084	Get the current color or create a new one if none is set .
6085	Validate the color
6086	Creates a color object from the given hex color and opacity .
6087	Get the GeoPackageManager
6088	Set the progress
6089	Returns the index of the given feature types .
6090	Index a feature row .
6091	Delete a collection of feature index types .
6092	Delete the index for the given row .
6093	Delete the index for the given geometry id .
6094	Delete the feature index
6095	Returns true if this feature is indexed .
6096	Returns the list of indexed feature types .
6097	Query for all features .
6098	Count the number of features .
6099	Returns the bounding box of this feature .
6100	Query for features in the specified bounding box .
6101	Returns the index type .
6102	Get the internal file .
6103	Returns the absolute path to the given file .
6104	Get the geometry type .
6105	Sets the geometry type .
6106	Checks if the url has a bounding box .
6107	Replace the x and y coordinates in the url .
6108	Checks if the given url has an XYZ image .
6109	Replace the bounding box in the url .
6110	Replace the bounding box in the url .
6111	Get the geometry data
6112	Index the feature row
6113	Update the last indexed time
6114	Delete the feature index .
6115	Delete the index for the given geometry .
6116	Checks if the feature is indexed .
6117	Query for all geometry metadata .
6118	Query for all features in the specified bounding box .
6119	Count the number of features in the given bounding box
6120	Query the geometry metadata for the given envelope .
6121	Count the number of features in the given envelope
6122	Query for features in the specified bounding box .
6123	Count the number of features in the bounding box .
6124	Get the feature bounding box
6125	Get the geometry metadata from a cursor .
6126	Get the feature row from a cursor .
6127	Get the feature row for a geometry .
6128	Get the tile DAO for a feature table
6129	Get a list of FeatureDaos for a tile table
6130	Get the bounding box
6131	Query by ids .
6132	Returns a list of unique base ids .
6133	Returns a list of unique related ids .
6134	Delete by base id
6135	Delete by related id
6136	Delete by ids .
6137	Build where ids .
6138	Create the metadata table
6139	Delete the data from the database
6140	Rename the name of the GeoPackage
6141	Rename the column name
6142	Get all the metadata
6143	Get the metadata for the database
6144	Get the metadata for the given id
6145	Get or create the metadata for the GeoPackage
6146	Check if the database is external
6147	Get the external metadata at the path
6148	Returns a list of metadata column names that match the given like expression .
6149	Returns a list of metadata column names that are not like the given string .
6150	Get the metadata names where the name is like or not like
6151	Create the GeoPackage metadata
6152	Notify all registered listeners that a view has been created .
6153	Adds a parallax view to the parallax views .
6154	Creates a view .
6155	Creates a custom view .
6156	Appends the given event to the given CyclicBuffer .
6157	Finds the logback config file from system properties .
6158	Returns the URL of the resource with the given filename .
6159	Autoconfigures the Joran configuration .
6160	Status on resource search .
6161	Converts a socket address to its string representation .
6162	Creates a new thread pool executor executor .
6163	Starts all converters from the given head .
6164	Adds the given event to the end of the current file .
6165	Adds a substitution property .
6166	Returns the value of the property with the given key .
6167	Compile the converter tree .
6168	Get the next node .
6169	Parse the current token and return a formatting node .
6170	Escape characters .
6171	Returns a regular expression for a fixed date .
6172	Adds an evaluator to the evaluator stack .
6173	Called when the evaluator is ended .
6174	Initializes the context selector .
6175	Creates a dynamical context selector .
6176	Setup the properties .
6177	Get the absolute path to the external storage directory .
6178	Returns the database directory path .
6179	Returns the absolute path to the file .
6180	Returns true if the logging event is at the error level .
6181	Gets the discriminating value .
6182	Updates the mask if necessary .
6183	Returns the decision of the filter chain for the given event .
6184	Creates the key managers .
6185	Create trust managers .
6186	Creates a KeyStoreFactoryBean from system properties .
6187	Get the location from the system property .
6188	Returns the URL for the given location .
6189	Returns true if any of the converters in the chain are ThrowableHandlingConverters .
6190	Stop the logback context .
6191	Print in case of errors or warnings .
6192	Print a warning message if any errors occurred .
6193	Prints the current status of the given context .
6194	Write the first line of the stack trace .
6195	Get the entry from either the map or the lingerers map .
6196	Removes the entry from the live map and adds it to the lingerers map
6197	Creates a FormatInfo object from the given string .
6198	Renames the source file to the target file .
6199	Checks if two files are on different volumes .
6200	Returns the value of the given key or null if the key does not exist .
6201	Get the value of an Android system property .
6202	Sets the MDCPropertyMap for this event .
6203	Output MDC for all keys .
6204	Extract the stack trace from the given exception .
6205	Checks if the current class is in the framework space list .
6206	Adds a new status to the status list .
6207	Adds a status listener to the list of listeners .
6208	Lookup an implicit action .
6209	Returns the list of applicable actions for the given element path and attributes .
6210	Set the class loader .
6211	Returns the value of the specified property or the default value if the property is not set .
6212	Returns the value of the property with the given key or the default value if the property is not set .
6213	Decapitalize a name .
6214	Returns an array of MethodDescriptors for the given class .
6215	Returns the property descriptors for the given class .
6216	Start the appender .
6217	Adds an instance of the OnConsoleStatusListener to the status manager .
6218	Pop the property definer from the object stack .
6219	Returns the discriminating value for the given event .
6220	Returns true if the logging event is discardable .
6221	Creates a shutdown hook .
6222	This method is called at the end of the interpreter .
6223	Returns the list of enabled protocols .
6224	Returns the list of enabled cipher suites .
6225	Returns the included and excluded strings .
6226	Convert a scope string to a scope .
6227	Sets the properties for the given scope .
6228	Adds a new appender to the list .
6229	Removes the given appender from the list .
6230	Removes the appender with the given name .
6231	Handle parent level change .
6232	Call all appenders on this logger .
6233	Detach the given appender from this logger .
6234	Create child by last name part .
6235	Call turbo filters .
6236	Logs a slf4j event .
6237	Creates a socket and returns it .
6238	Creates the parent directories for the given file .
6239	Returns the current level as an integer .
6240	Converts an integer value to a logging level .
6241	Returns the number of occurrences of the given resource .
6242	Returns the URL of the given resource in the given class loader .
6243	Returns the class loader of the given object .
6244	Returns the class loader for the given class .
6245	Get the class loader of the given class .
6246	Start the appender .
6247	Returns the tag for the given event .
6248	This method is called at the beginning of the parsing process .
6249	Returns the index of the first dot or dollar character in the given name .
6250	Returns true if the event contains any of the marker strings .
6251	Returns the name of the client thread .
6252	Checks if two files are on the same file store .
6253	Starts the mail session .
6254	Append an event object to the buffer .
6255	Send a buffer to the server .
6256	Adds the given MDCValueLevelPair to the MDCValueLevelMap .
6257	Creates a converter for the given keyword .
6258	Creates a composite converter for the given composite conversion word .
6259	Determine the compression mode .
6260	Configure the Joran with the given URL .
6261	Configure a Joran configuration file .
6262	Configure the Joran with the given input stream .
6263	Build the interpreter .
6264	Register the current configuration as safe .
6265	Configures the interpreter with the given event list .
6266	Returns the value of the property with the given key .
6267	Sets the name of this context .
6268	Checks if the given context has any status listeners .
6269	Returns the time of the last reset .
6270	Starts the scanner .
6271	Returns the effective converter map .
6272	Returns the HTML file header .
6273	Get the file footer .
6274	This method is called at the beginning of the parser .
6275	This method is called at the end of the interpreter .
6276	Returns a copy of the client list .
6277	Adds a client to the list of clients .
6278	Removes a client from the list .
6279	Returns a copy of the context map .
6280	Gets the value of method .
6281	Decide if any of the turbo filters are accepted or not .
6282	Checks if the current operating system is Android OS .
6283	Initializes the logger context .
6284	Returns all files in the given folder that match the given stem regex .
6285	Print the retrospective status .
6286	Convert a syslog facility string to an integer .
6287	Get the database file .
6288	Clear expired logs .
6289	Checks if the last cleanup time has expired .
6290	Appends the logging event to the insert statement .
6291	Append a secondary sub - event to the log .
6292	Bind the logging event to the statement .
6293	Returns the string truncated to 254 characters .
6294	Compute the reference mask for the given event .
6295	Merge property maps .
6296	Insert an exception .
6297	Returns the length of the prefix match between this and p .
6298	Returns the effective level of this status .
6299	Sets the value of a property .
6300	Returns true if the class is unequivocally instantiable .
6301	Get the child value .
6302	Process an include file .
6303	Opens an input stream for the given URL .
6304	Removes all included and config tags from the head and tail of the list .
6305	Returns whether the server should be started .
6306	Returns whether this response is transient .
6307	Set the default hosts .
6308	Ensure that the local index exists .
6309	Sync with the data selection queries .
6310	If the last sync time is greater than the delayBetweenSyncs or the last sync time is older than the delayBetweenSyncs the sync is done .
6311	Waits for a task to be published .
6312	Lists all indexes in offline mode .
6313	Convert an input stream to a char array .
6314	Convert an input stream to a byte array .
6315	Consumes the data from the connection and closes the connection .
6316	Returns the list of hosts that are up or could be retried
6317	Sets the type of the Places query .
6318	Starts the index .
6319	Put a value into the cache .
6320	Returns the value associated with the given key or null if the key does not exist .
6321	Wait for all threads to complete .
6322	Compare two versions .
6323	Report an exception to the Agent .
6324	Copies the contents of a directory to the target directory .
6325	Initializes the properties from the given file .
6326	Get a static field value .
6327	Returns the method with the given name .
6328	Format a percentage value .
6329	Format a double .
6330	Format a long .
6331	Reads a JSON syntax character .
6332	Returns the hex value of the given character .
6333	Write a JSON string .
6334	Write a JSON integer .
6335	Write a double .
6336	Reads a JSON string .
6337	Read JSON numeric chars .
6338	Reads a JSON integer .
6339	Reads a double .
6340	Reads a JSON string and returns it as a Base64 encoded string .
6341	Executes the given method call .
6342	Invokes a method call .
6343	Enqueue a method call to the call queue .
6344	Returns the resource at the given location .
6345	Updates the decorators .
6346	Refresh the repository view .
6347	Get the resource history view .
6348	Opens an editor .
6349	Report authentication failure .
6350	Prompt for authentication .
6351	Creates the default page .
6352	Start the animation thread .
6353	Set the keepAllAlive flag .
6354	Set whether or not this node should be ignored .
6355	Sets the owner of this node .
6356	Adds a new condition factor .
6357	Creates a new condition term from the given tokenizer .
6358	Returns true if this condition term matches the given condition term .
6359	Get the content of the DSL configuration file .
6360	Loads the DSL configuration from the given file .
6361	Read the configuration from the given input stream .
6362	Creates a new menu with the given parent .
6363	Adds a response element .
6364	Adds an href attribute .
6365	Inserts the new href before the refHref .
6366	Removes the given href from the document .
6367	Adds a propstat element .
6368	Returns the href of the element .
6369	Returns the status of the server .
6370	Get the current stack frame for the given value .
6371	Checks if two classes are assignable .
6372	Checks if the given proposals contains the given new proposals .
6373	Clone a node .
6374	Resets the stream .
6375	Create the actions .
6376	Adds a connection to the connection list .
6377	Returns the value of the specified property .
6378	Removes a connection from this connection manager .
6379	Sets the location .
6380	Sets the property value .
6381	Sets the size of the image .
6382	Dump a list of constraints .
6383	Adds a lock entry .
6384	Adds a child to the graph .
6385	Removes a child from the graph .
6386	Set the useCachePreference property to true .
6387	Disposes all resources associated with this plugin .
6388	Get the resource string .
6389	Get the resource bundle .
6390	Returns the form colors used by the rule builder .
6391	Set the date time .
6392	Set the date and pattern .
6393	Create an error status .
6394	Logs an error message .
6395	Adds a field to the list of fields .
6396	Adjusts the grid layout .
6397	Apply the font .
6398	Calculates the number of columns .
6399	Initializes the editor .
6400	Fires a property change event to all registered listeners .
6401	Set the active editor .
6402	Add the toolbar to the given tool bar manager .
6403	Determine the dialect based on the given text .
6404	Creates a new context with the given user context and locator .
6405	Save the file to disk .
6406	Add the listeners to the table .
6407	Creates the table .
6408	Adds the value to the given URL .
6409	Put a value into the cache .
6410	Adds a token to the current node .
6411	Add a child node to this node .
6412	Sets the file offset and length .
6413	Adds a new condition to the list of conditions .
6414	Adds a state token condition .
6415	Returns true if the given condition matches .
6416	Returns the prop element .
6417	Returns the status of the node .
6418	Sets the prop element .
6419	Get the last line of the text .
6420	Get the last non - dash line .
6421	Bind the given id to the given binding .
6422	Bind two bindings .
6423	Returns the message with the given id and bindings .
6424	Creates the BPMN process .
6425	Creates the process junit .
6426	Returns the runtime id .
6427	Visit a rete .
6428	Visit the given node .
6429	Returns the dot id of the given object .
6430	Adds a remove element .
6431	Adds a set of properties .
6432	Creates a new locator with the given resource URL and label .
6433	Returns a new PresentationReconciler for the given source viewer .
6434	Returns true if the given object is the same as this one .
6435	Returns true if this condition contains the given term .
6436	Creates a new condition factor from the given tokenizer .
6437	Adds the pages to the editor .
6438	HTTP DELETE request .
6439	Post a request to the KieREST server .
6440	Get the status of a job .
6441	Executes the pull operation .
6442	Handle pull results .
6443	Sets the value at the given index .
6444	Adds an active lock .
6445	Filter proposals on prefix .
6446	Reads a prefix from the given document .
6447	Calculate the rete rows .
6448	Paint the image .
6449	Creates the edit part for the given model element .
6450	Returns the image descriptor for the given path .
6451	Declares an image in the registry .
6452	Adds a vertex to the graph at the specified depth .
6453	Returns the index of the row with the given vertex .
6454	Returns the maximum width of all rows in the table .
6455	Prints the vertices of this matrix to stdout .
6456	Optimize all rows .
6457	Load the rete model .
6458	Initialize the graphical viewer .
6459	Draw the graph .
6460	Returns the DroolsLineBreakpoint for the given source .
6461	Sets the href attribute .
6462	Check if we can talk to the DAV server .
6463	Copies the specified properties to the specified destination location .
6464	Examines a multi status response .
6465	Extract the property stats from a multi - status response .
6466	Gets the content from the DAV .
6467	Returns an enumeration of all active locks .
6468	Returns the property status for the given property name .
6469	Gets the current context .
6470	Acquires a lock .
6471	Moves all properties from one location to another .
6472	Check in .
6473	Refreshes the lock .
6474	Remove a collection of properties .
6475	Removes the property with the given name .
6476	Set the content of the file .
6477	Sets the properties of this element .
6478	Sets the property .
6479	Unlocks the specified lock token .
6480	Updates the current version of the DAV .
6481	Call the version control command .
6482	Delete the resource .
6483	Examines the status code .
6484	Checks if a property has a child .
6485	Writes the request body to the given stream .
6486	Convert a byte array to a hex string .
6487	Convert an array of integers to a hex string .
6488	Set the value of allprop .
6489	Set the value of the propname attribute .
6490	Sets the property .
6491	Removes the last word from the given prefix .
6492	Updates the rule tree .
6493	Writes the contents of this stream to the given output stream .
6494	Step over the current thread .
6495	Marks the parser errors .
6496	Skip over all whitespace characters .
6497	Add a file to guvnor .
6498	Commit changes to a file .
6499	Returns the value of the age property .
6500	Returns the value of the Content - Length header .
6501	Returns the maximum number of forwards .
6502	Get the value of the overwrite property .
6503	Get the value of the Passthrough property .
6504	Returns the timeout in seconds .
6505	Sets the value of a property . If the value is null or empty it is removed .
6506	Set the timeout .
6507	Open a DSL file .
6508	Parse the file .
6509	Get the object metadata .
6510	Removes the object metadata from the text .
6511	Adds the given tokens to the given root node .
6512	Returns the children of the given condition .
6513	Returns the children of the given object .
6514	Add a child node to the list .
6515	Prints the tree .
6516	Prints a node .
6517	Print the specified number of tabs .
6518	Read a JSON value from the given text .
6519	Returns the image descriptor for the given id .
6520	Invokes the request .
6521	Sets the value of a request header field .
6522	Creates the rule launcher .
6523	Creates the rule .
6524	Creates the ruleflow .
6525	Creates the rule flow launcher .
6526	Returns the selected IUs .
6527	Creates an image in the specified format .
6528	Returns the name of the field .
6529	Returns the evaluation string for this node .
6530	Returns the value of this node .
6531	Add Guvnor resource properties .
6532	Perform baseline control on the specified locator .
6533	Bind the specified member to the given locator .
6534	Get a member by its name .
6535	Optimizes the graph .
6536	Initializes the controls .
6537	Validates the page .
6538	Generate an entity tag .
6539	Returns the opposite of the given vertex .
6540	Validate a list of OTPs .
6541	Check if YubiKey belongs to user
6542	Get the username for a given public id .
6543	Adds a yubikey entry to a user .
6544	Verify OATH OTP .
6545	Clear the password .
6546	Returns the public id of the given OTP .
6547	Checks if the given OTP format is valid .
6548	Creates an evaluation for the given node and source .
6549	Creates an evaluation .
6550	Clear the cache .
6551	Checks if JDK 15 is enabled .
6552	Returns the package name of the given object .
6553	Returns the package name of the given class .
6554	Returns a unique descriptor for the given object .
6555	Returns the type of the argument .
6556	Checks if two classes are more specific .
6557	Returns the best matching method for the given name and arguments .
6558	Returns the value of the property with the given name .
6559	Returns a map of property descriptors for the given target class .
6560	Get the property descriptor from an array of property descriptors .
6561	Returns the read method .
6562	Reads a character from the stream .
6563	Projection an expression .
6564	Select all expressions .
6565	Convert a value to a long .
6566	Convert a value to a double .
6567	Convert a value to a BigInteger .
6568	Convert a value to a BigDecimal .
6569	Convert an object to a string .
6570	Returns the numeric type of the given value .
6571	Convert the given value to the given type .
6572	Converts the given value to an integer .
6573	Get the numeric type .
6574	Returns the numeric type of two values .
6575	Creates a number from a long value .
6576	Pop an evaluation from the stack .
6577	Generate OGNL getter .
6578	Generate OGNL setter .
6579	Flatten the tree .
6580	Initializes this node .
6581	Escape the current character .
6582	Sets the root context .
6583	Returns the value of the given expression .
6584	Set the value of an expression .
6585	Sets the value of the root node .
6586	Checks if the given expression is a constant .
6587	Returns the default watch service id .
6588	Waits until the server is started .
6589	Reads the file and returns it as a String .
6590	Reload the current application class loader .
6591	Get the archiver with the given name .
6592	Checks the archiver for problems .
6593	Read the contents of the given file into a String .
6594	Creates an ant project .
6595	Adds a system property .
6596	Adds a system property .
6597	Opens a new folder dialog .
6598	Changes the selected directory .
6599	Refresh the button state .
6600	Creates a file observer .
6601	Return the currently selected folder .
6602	Creates a new folder .
6603	Checks if the given file is a valid file .
6604	Start a background job .
6605	Start a list .
6606	End a list .
6607	Handles a motion event .
6608	Get the crop rect .
6609	Compute the layout of the image .
6610	Register the RTEditTextListener .
6611	Adds a span watcher to the text .
6612	Returns the view to use for the spinner .
6613	Creates a DropDownView for the specified item .
6614	Convert a Spanned to a RTHtml .
6615	Convert the text within a paragraph .
6616	Create a unique file .
6617	Determine the original file path from the given Uri .
6618	Returns the namespace for the given name .
6619	Returns the local name of the given name .
6620	Adds an attribute to an attribute list .
6621	Sets the value of an attribute .
6622	Get the font name from the given file path .
6623	Get the font name from an asset file .
6624	Adds a new buffer if necessary .
6625	Writes the specified bytes to the output stream .
6626	Writes a single byte to the buffer .
6627	Writes data from an input stream to the output stream .
6628	Writes the contents of this buffer to the given stream .
6629	Returns the contents of this buffer as a byte array .
6630	Set the font size .
6631	Converts Windows path separators to Unix path separators .
6632	Recompute the focus .
6633	Ensure that the view is visible .
6634	Center the view based on the highlight view .
6635	Resets the document locator .
6636	Validate the given value .
6637	Register an element type .
6638	Sets the value of an attribute of an element .
6639	Sets the parent of a child element .
6640	Returns the element type with the given name .
6641	Returns the entity value for the given name .
6642	Removes all paragraph effects from the given editor .
6643	Apply the given value to the selection .
6644	Checks if the given domain is valid .
6645	Executes the given operation on the given editor .
6646	Redo the given editor .
6647	Replaces all occurrences of the search string with the replace string .
6648	Returns the thread status for the given thread .
6649	Sets the decoding options for the given thread .
6650	Returns true if the given thread can be decoded .
6651	Decode a file descriptor .
6652	Returns a set of all the available fonts .
6653	Returns a map of all fonts found in the assets directory .
6654	Returns a map of all the system fonts .
6655	Setup the HTML parser .
6656	Get the reader from the input source .
6657	Get the input stream for the given publicid and systemid
6658	Adds an attribute to the current element .
6659	Expand entities .
6660	Lookup an entity .
6661	Move the stack to the next element .
6662	Pop the current element from the stack .
6663	Pop the current element from the stack and anonymize it if necessary .
6664	Returns the prefix of the given name .
6665	Returns true if the given prefix and namespace are foreign .
6666	Removes quotes from a string .
6667	Split a string into an array of strings .
6668	rectify an element .
6669	Make a name from a character array .
6670	Save the state of the toolbar .
6671	Unregister and destroy all registered editors and toolbars .
6672	Called by the main thread when a media event is received .
6673	Handles a link event .
6674	Get the rotation base matrix .
6675	Returns the maximum zoom level .
6676	Checks if the given text exists in the given selection .
6677	Find spans and remove them from the given paragraph .
6678	Encodes the given URL .
6679	Decodes the query string .
6680	Picks a directory .
6681	Rotate an image .
6682	Set the output stream .
6683	Writes a character to the output stream .
6684	Writes a string to the output stream .
6685	Checks if the attribute is a boolean attribute .
6686	Writes a UTF - 16 escape sequence .
6687	Write namespace declarations .
6688	Write the name .
6689	Creates a stream if it doesn t exist .
6690	Waits for stream activation .
6691	Complete store snapshot with missing instance snapshots .
6692	Wait for the minimal duration to execute the next provisioning request .
6693	Get records from Kinesis .
6694	Perform Amazon action with retry .
6695	Try Amazon action .
6696	Checks if the given bucket is accessible .
6697	Load all stores from the snapshot store .
6698	Trigger wildcard expansion .
6699	Replaces all occurrences of the oldPattern with the newPattern .
6700	Delete any of the characters in the given string .
6701	Adds a new resource lint report .
6702	Update properties with configuration .
6703	Gets the configuration properties .
6704	Creates an input stream for autodetected wro file .
6705	Convert a map of preProcessors to a map of postProcessors .
6706	Compile the given content .
6707	Reload the cache with the new value .
6708	Reload the model with the new value .
6709	Gets the wrapped servlet request .
6710	Returns a transformer that adds the given suffix to the base name .
6711	Called when an error occurs .
6712	Sends a redirect to the specified location .
6713	Process a resource .
6714	Create expander handler .
6715	Locates an input stream for the given URI .
6716	Creates the Wro configuration .
6717	Register change listeners .
6718	Process the request .
6719	Sets the Wro configuration .
6720	Identify duplicate group names .
6721	Merge the given model into this model .
6722	Locates an input stream for the given URI .
6723	Apply post processors .
6724	Decorates a resource post processor .
6725	Process a resource .
6726	Split the given option into an array of options .
6727	Load properties from an input stream .
6728	Parse properties .
6729	Creates a custom WroManagerFactory .
6730	Persist resource fingerprints .
6731	Checks if the given group is a target group .
6732	Extend the plugin classpath .
6733	Get the model resource as an input stream .
6734	Initializes the WroManagerFactory .
6735	Sets the transformers to use for the model .
6736	Compile the given content .
6737	Processes the given list of resources and merges them together .
6738	Process and merge resources .
6739	Run the preprocessing in parallel .
6740	Apply preProcessors to the given resource .
6741	Decorates a resource pre processor .
6742	Persist the fallback storage to disk .
6743	Get all fields of the given object .
6744	Rewrite an image .
6745	Compute the new image location .
6746	Add a model transformer to the factory .
6747	Serve processed bundle .
6748	Initialize the aggregated folder path .
6749	Extract variables from the body .
6750	Parse the CSS .
6751	Replaces all variables in the given CSS .
6752	Converts a post processor to a pre processor .
6753	Checks if the requested resource type is eligible for the requested resource type .
6754	Apply gzip response .
6755	Returns a new processor that will include the given patterns .
6756	Exclude the given patterns from the given processor .
6757	Creates a new resource change handler .
6758	Remember a resource .
6759	For each CSS import apply .
6760	Filter the given collection .
6761	Checks if the request is minimized .
6762	Find imported resources .
6763	Compute absolute url .
6764	Creates a comma - separated list of tokens from the given items .
6765	Get the list of aliases .
6766	Creates a new context and evaluates the commons script .
6767	Evaluate the expression from the given reader .
6768	Evaluate a JavaScript script .
6769	Process the bundle .
6770	Checks if the request is a handler request .
6771	Create handler request path .
6772	Renames an input stream to a new name .
6773	Compute the destination folder for the given resource type .
6774	Processes the given group .
6775	Checks if a change is required for the given group .
6776	Locates a resource in any of the context folders .
6777	Create a new object pool .
6778	Locates an input stream .
6779	Open a JAR file .
6780	Extract the path from the URI .
6781	Checks if the request is minimized .
6782	Adds one or more URI Locators to the factory .
6783	Decorates a WroModelFactory .
6784	Adds a require .
6785	Process the content .
6786	Logs the total number of errors found in the files .
6787	Process a resource .
6788	Returns the lock for the given key or creates a new lock if it doesn t exist .
6789	Creates the process for the given file .
6790	Parse properties .
6791	Returns a copy of the task list .
6792	Returns the compilation command .
6793	Parse header .
6794	Add no - cache headers .
6795	Get path info from location .
6796	Get servlet path from location .
6797	Checks if the request URI matches the given path .
6798	Loads the regular expression with the given key from the properties file .
6799	Copy the contents of the Reader to the Writer .
6800	Creates a temporary file with the given extension .
6801	Clean image url .
6802	Sets the value of an attribute .
6803	Generates a data URI from an input stream .
6804	Generate the data URI .
6805	Sets the context with the given configuration .
6806	Unregisters the context .
6807	Check if the group has changed .
6808	Check for resource changes .
6809	Checks if a resource has changed .
6810	Updates the hash for the given group .
6811	Checks if there are resources of the given type .
6812	Creates the process .
6813	Encodes a java . io . Serializable into a String .
6814	Process the groups .
6815	Parse a group definition .
6816	Creates a group from an XML element .
6817	Parse a resource .
6818	Get all resources for a given group .
6819	Logs the current state of this timer .
6820	Stop a named timer .
6821	Returns a named timer with the given name and flags .
6822	Register a timer with the given name and thread id .
6823	Print the current statistics .
6824	Wake up workers .
6825	Updates the processed counters .
6826	Updates the finished counters .
6827	Updates the given counter if it is smaller than the given value .
6828	Override the default visit method .
6829	Informs the taxonomy that the given property is equivalent to the given property .
6830	Ensure that the axiom loading is complete .
6831	Restore the saturation .
6832	Returns whether this classification is inconsistent .
6833	Restore the taxonomy .
6834	Restore the instance taxonomy .
6835	Returns the evidence of this ontology .
6836	Called before the reasoner has been initialized .
6837	Invalidate this stage and all of its postStages recursively .
6838	Returns the collection of added individuals .
6839	Returns a collection of ids that should be removed from the taxonomy .
6840	Returns an UnsupportedOperationException if the given OWL API method is not supported .
6841	Removes the element at the given position from the given array .
6842	Removes the element at the given position from the given array .
6843	Returns the position of the moved element .
6844	Returns whether the specified object is contained in the specified array .
6845	Adds an element to the end of the array .
6846	Check the number of occurrences .
6847	Adds the given timer to the list .
6848	Adds the given rule application timer .
6849	Put a key - value pair .
6850	Removes the entry for the given key .
6851	Enlarges the map .
6852	Shrinks the cache .
6853	Saves the given configuration to disk .
6854	Print declaration axioms .
6855	Returns all instance nodes of the given node .
6856	Removes all elements from this set .
6857	Combine multiple hashes .
6858	Combine a list of hashes .
6859	Copy data from an input stream to an output stream .
6860	Returns a new incompleteness monitor for this reasoner .
6861	Processes the given taxonomy and writes the result to the given writer .
6862	Submits the input to the queue .
6863	Append an elkObject to the given Appendable .
6864	Marks the given query class as not computed .
6865	Adds a direct type - node .
6866	Check that the given sub - object property expression matches the given chain .
6867	Returns a new set containing only the elements of the given set that satisfy the given condition .
6868	Maps a set of objects to a set of objects .
6869	Adds an element to the set .
6870	Removes an element from the set .
6871	Adds the given class conclusion counter .
6872	Logs the memory usage .
6873	Sets the configuration options .
6874	Shuts down the ELK reasoner .
6875	Print the header .
6876	Prints the given values to the log .
6877	Returns a string of the specified length .
6878	Adds the given rule counter to the set of rules .
6879	Writes a resource .
6880	Gets the action input parameter .
6881	Returns the property descriptor for the given property path .
6882	Returns a map of required parameters .
6883	Checks if the given type is a single value type .
6884	Adds a rel parameter to the link .
6885	Sets the media type of the link .
6886	Adds the hreflang parameter to the link .
6887	Adds a revision to the link .
6888	Adds a link parameter to the request .
6889	Expand the partial URI template with the given arguments .
6890	Returns the list of rels for this link .
6891	Returns the list of revs for this link .
6892	Checks if there are any unsatisfied required variables .
6893	Returns the value formatted .
6894	Returns true if the property is hidden .
6895	Returns true if the given property is contained in the input annotation .
6896	Checks if the input annotation has explicit or implicit property include value .
6897	Checks if the request is required .
6898	Returns the default value .
6899	Returns the name of the parameter .
6900	Gets the exposed property or parameter name .
6901	Returns the Vocab for the given bean .
6902	Returns the query string .
6903	Append the form .
6904	Write an input button .
6905	Append an input or select .
6906	Adds the given affordance builder to the current affordance .
6907	Returns an empty PartialUriTemplateComponents object .
6908	Removes optional variables from the uri template .
6909	Returns the first UberNode with the given name .
6910	Returns the first UberNode with the given rel .
6911	Returns an iterator over the children of this UberNode .
6912	Creates a persistent map from an iterable of map entries using the specified Equator .
6913	Creates a persistent map from an iterable of map entries .
6914	Creates a new empty map .
6915	Returns an immutable set containing all of the entries in this set .
6916	Returns the key of the last entry in this map .
6917	Creates an Xform from an iterable .
6918	Folds an iterable of operations .
6919	Drop the elements from this stream while the given predicate evaluates to true .
6920	Folds the run list with a reduction function .
6921	Convert a Map . Entry to a Tuple2 .
6922	Match function .
6923	Register a list of classes .
6924	Returns the element at the given index .
6925	Appends the specified element to the end of this vector .
6926	Concatenates the given items into this vector .
6927	Creates a mutable set from the given items .
6928	Returns a mutable view of the given items .
6929	Creates an immutable set from the given items .
6930	Returns an immutable view of the given items .
6931	Create an iterable from an array of items .
6932	Indent the given number of spaces .
6933	Convert an array of objects to a comma - separated string .
6934	Creates a LazyRef from a producer function .
6935	Apply the producer and return the result .
6936	Inserts an item into an array at the specified index .
6937	Creates a copy of the given array .
6938	Suspend if assoaciated with the current thread .
6939	Before async operation .
6940	Builds a list of service components from a jar file .
6941	Validates the given directory .
6942	Creates a link between the concrete class and the super class .
6943	Copy methods from one class to another class .
6944	Copies the given methods to the destination class .
6945	Creates a tree from a FQDNNode .
6946	Remove the sbb entity with current class loader .
6947	Returns whether or not notifications are enabled for the given parameter .
6948	Returns a set of all RA entity links that are not referenced by the service component .
6949	Installs the given service component .
6950	Uninstalls a service .
6951	Checks if the given ra link name is referenced .
6952	Returns the usage parameter sets for the specified SBB .
6953	Reset all usage parameters .
6954	Returns all profiles in the specified profile table .
6955	Gets the profile table activity .
6956	Get a profile by its indexed attribute value .
6957	Display the result .
6958	Unfolds the given array .
6959	Fire an event .
6960	Bind a name to a cache node .
6961	Unbinds a name from the cache .
6962	Lookup a node by its name .
6963	Returns the name bindings of this node .
6964	Returns the next SbbEntity that is attached to the given SbbEntity .
6965	Returns true if this level is higher than the specified level .
6966	Extract the contents of a jar file into a directory .
6967	Pipe input stream to output stream .
6968	Put a key - value pair into the node .
6969	Attach a sbb entity .
6970	Detach a sbb entity .
6971	Returns true if there are no SBB entities attached .
6972	Returns the set of SBB entities attached to this SBB .
6973	Attaches a timer to this node .
6974	Detach a timer .
6975	Returns true if there are no timers attached .
6976	Returns the set of attached timers .
6977	Add a name bound node .
6978	Removes a name from the name bound list .
6979	Returns true if there are no names bound .
6980	Returns a copy of the names bound to this node .
6981	Sets the value of the specified CMP attribute .
6982	Returns the value of the attribute with the given name .
6983	Returns a copy of the current CMP attributes .
6984	Initialize the notification info .
6985	Sends a usage notification to all registered listeners .
6986	Download a remote DU .
6987	Update the list of deployed components .
6988	Installs a deployable unit .
6989	Uninstalls a deployable unit .
6990	Undeploy a deployable unit .
6991	Show the status of deployable units .
6992	Log a log record .
6993	Returns the logger associated with the given log record .
6994	Get the referring components of the given component .
6995	Returns a set of all the sbb entities contained in this node .
6996	Get the permissions from the current policy .
6997	Returns the list of code sources for the current policy .
6998	Checks if a profile exists on the profile table .
6999	Remove the profile table .
7000	Updates the configuration properties of the resource adaptor entity .
7001	Called by the SLEE container when the entity is running .
7002	Suspends the RA object .
7003	Activates this entity .
7004	Deactivate this entity .
7005	Schedule the end of all activities .
7006	Remove this entity from the entity manager .
7007	Returns the resource adaptor interface for the specified resource type .
7008	Called when a service is active .
7009	Derrefer to an ActivityHandle .
7010	Called when an activity has been ended .
7011	Updates the ra configuration .
7012	Verify config properties .
7013	Notify the resource adapter that the ra object is stopping .
7014	Call this method to indicate that the ra object is inactive .
7015	Unconfigure the ra object .
7016	Declarative Services method for unsetting the resource adaptor context .
7017	Unsets the fault tolerant resource adaptor context .
7018	Build the profile attribute map .
7019	Resumes the event routing .
7020	Returns the set of activity context handles for this node .
7021	Removes all usage parameters from the MBeanServer .
7022	Returns the usage MBean for the specified parameter set .
7023	Decorates the abstract class .
7024	Fires an event .
7025	Fire an event .
7026	Returns the profile cmp method for the specified profile .
7027	Returns the usage parameter set associated with the specified sbb entity .
7028	Gets the abstract methods from the given class .
7029	Get interface methods from interface .
7030	Creates an object pool for the given profile table .
7031	Removes the object pool for the specified profile table .
7032	Checks if the given notification source is owner of the given alarm .
7033	Raises an alarm .
7034	Returns the usage parameter set with the given name .
7035	Returns the event type s specs descriptor .
7036	Checks if the given URL accepts the given deployable unit .
7037	Initialize the deployable unit .
7038	Start a deployable unit .
7039	Stop a deployable unit .
7040	Show the status of the deployment manager .
7041	Execute the after commit actions .
7042	Execute after commit priority actions .
7043	Execute the after rollback actions .
7044	Executes the before commit actions .
7045	Executes the before commit priority actions .
7046	Returns the names of all defined tracers .
7047	Creates a new tracer with the specified name .
7048	Remove all replicated data .
7049	Register the property editors .
7050	Generate the usage parameter class for the given component .
7051	Returns the object pool for the given service and sbbID .
7052	Creates the object pool for the given service and sbb component .
7053	Execute an activity .
7054	Start an activity .
7055	End an activity .
7056	Checks the validity of the fire event preconditions .
7057	Fire an event .
7058	Generate SbbLocalObjectConcreteClass .
7059	Make the getter operation .
7060	Convert a string to an object .
7061	Sets the profile table name and profile name .
7062	Extract the message from the result .
7063	Returns true if the given object is in the cache .
7064	Returns true if this relation contains all of the elements in the given collection .
7065	Removes all elements from the collection .
7066	Returns true if this level is higher than the specified level .
7067	Resolve the internal state .
7068	Removes all classes from the class pool .
7069	Add a profile call to the current transaction .
7070	Returns the profile object for the specified profile name or null if the profile does not exist .
7071	Passivate profile object on transaction end .
7072	Sets the value of this property to the given text .
7073	Generate the concrete activity context interface class .
7074	Generate concrete methods .
7075	Set data attribute .
7076	Adds a name binding to the cache .
7077	Remove all naming bindings from the cache .
7078	Removes a name binding from the cache .
7079	Attaches a timer to the cache .
7080	Remove all timers from the cache .
7081	Attaches a sbb entity to the activity context .
7082	Detaches a sbb entity from the activity context .
7083	Returns a sorted set of SbbEntityIDs that are not in the excludeSet .
7084	Ends the activity context .
7085	Adds a component to the deployment .
7086	Returns the external dependencies of this component .
7087	Returns true if all dependencies are satisfied .
7088	Checks if there are any components that are already deployed .
7089	Get the list of install actions .
7090	Returns the list of uninstallable unit actions .
7091	Checks if there are any referring components .
7092	Close the profile table .
7093	Get the object name .
7094	Change the state to read - write .
7095	This method is called before the profile has been written to the profile table .
7096	After setCmpField is called after the profile table has been updated .
7097	beforeGetCmpField is called beforeSetCmpField is called .
7098	afterGetCmpField is called after getCmpField is called .
7099	Before management method invocation .
7100	After management method invocation .
7101	Delete a file or directory .
7102	Creates the default constructor .
7103	Creates the default usage parameter getter .
7104	Creates the getter and setter methods .
7105	Creates the fire event methods .
7106	Creates the getSbbActivityContextInterface method .
7107	Adds the given query expression to the list of expressions .
7108	Binds the given object to the given name .
7109	Rebinds the given name to the specified target object .
7110	Decorates the Abstract Sbb Class .
7111	Invoke method and return void .
7112	Gets the real field name .
7113	Sets the value of the specified field .
7114	Returns the value of the field with the given name .
7115	Sets the profile context for this profile object .
7116	Initialize the profile object .
7117	Unregisters the profile context .
7118	Get the profile local object .
7119	Fires a profile added or updated event if necessary .
7120	Gets the profileCmpSlee10Wrapper .
7121	Creates a class with the given name and interfaces .
7122	Creates the inheritance link for the given concrete class .
7123	Adds an annotation to an annotation file .
7124	Adds the member values to an annotation .
7125	Returns the ActivityContextInterface associated with the given Activity object .
7126	Returns the class pool for this component .
7127	Set the deployable unit .
7128	Undeploy the class loader .
7129	Execute an activity .
7130	Checks if the given class or interface is one of the given interfaces .
7131	Returns a map of all methods implemented by the given xInterfaceClass .
7132	Resolve an entity .
7133	Check the tracer name .
7134	Get profiles by static query .
7135	Checks the dependencies of the given slee component .
7136	Creates a temp DU deployment directory .
7137	Gets the entity manager .
7138	Start the container .
7139	Switch to the given class loader .
7140	Make a safe proxy call .
7141	Checks if the current transaction is the same .
7142	Convert the last access time to a TTL .
7143	Checks if the profile class is visible .
7144	Returns the profile object that is valid in the current transaction .
7145	Get the names of all loggers that match the given regular expression .
7146	Reset the logger levels .
7147	Clear the loggers for the given name .
7148	Add a logger to the log .
7149	Add a socket handler to the log .
7150	Remove a handler from a logger
7151	Convert the tracer name to the log4j logger name .
7152	Syncs the current level with the log4j level .
7153	Assign the log4j level to the trace level .
7154	Reset the cache flags .
7155	Sends a notification to the trace MBean .
7156	Checks that the provided tracer name is valid .
7157	Writes the vendor data to the stream .
7158	Deserializes the object from the given stream .
7159	Add a direct dependency to this class loader .
7160	Returns a list of all dependencies of this class loader .
7161	Finds the class with the given name .
7162	Find resource locally .
7163	Find resources locally .
7164	Creates a profile MBean and registers it .
7165	Resume a transaction .
7166	Returns a set of all the SbbIDs contained in this SbbDescriptor .
7167	Returns a set of all the link names of all the resource adaptor entity bindings in the specified component repository .
7168	Initializes the slee .
7169	Shuts down the slee .
7170	Validate the state transition .
7171	Generate usage parameter getter method .
7172	Sets the value of a field .
7173	Build the PolyJDBC object .
7174	Adds a value to the insert query .
7175	Run a transaction .
7176	Creates a new RegionRequest from a string .
7177	Returns the region of this rectangle .
7178	Resolve the image dimensions to a rectangle .
7179	Gets the on type .
7180	Sets the list of viewing hints for this resource .
7181	Adds a viewing hint to the resource .
7182	Sets the list of other content that should be rendered .
7183	Add rendering to this resource .
7184	Merge a list of profiles into one .
7185	Merge this profile with another profile .
7186	Creates a new rotation request from a string .
7187	Creates a new size request from a string .
7188	Initializes the adb connection .
7189	Get the XML dump .
7190	Handles the pop box .
7191	Push the automator . jar to the device .
7192	Clean the temp directory .
7193	Pull the dump file to the pc .
7194	Gets the current crash log .
7195	Detabifies the contents of the text .
7196	Indent the text by the given number of spaces .
7197	Tokenize HTML .
7198	Returns a markdown version of the given text .
7199	Escape special chars within tag attributes .
7200	Adds an exception to the exception queue .
7201	Close all cached statements .
7202	Finds the parent class name .
7203	Writes the class to the given filer .
7204	Write a divider .
7205	Appends the given bit strings to the given bit vector .
7206	Read from an input stream .
7207	Get a list of objects .
7208	Returns a list of objects matching the given filters .
7209	Sets the klov report .
7210	Adds a screen capture to the current step .
7211	Sets the system info for the given key .
7212	Select a property .
7213	Creates a selector that selects the given property name as the given alias .
7214	Extract validation annotation data .
7215	Extract all annotations for a given property .
7216	Finds the annotations for a property .
7217	Returns the property descriptor for the given property name .
7218	Lookup an object expression .
7219	Creates an instance of the given class from the given map .
7220	Creates a new instance of the given class from the given map .
7221	Creates a new instance of the given type from the given value map .
7222	Convert an object to a map .
7223	Convert an object to a map .
7224	Get the values of the given annotation .
7225	Creates a composite validator with the given validation meta data .
7226	Lookup the list of validators and initialize them with metadata properties .
7227	Lookup the validator in the registry .
7228	Apply validation meta data properties to validator .
7229	If the property is blank remove it .
7230	Sets the current time .
7231	Returns the total number of entries in this cache .
7232	Returns the hash value for the given key .
7233	Returns the default options .
7234	Opens the database .
7235	Puts all of the given values into the database .
7236	Removes all keys from the cache .
7237	Search for a key - value pair .
7238	Load all by keys .
7239	Close the database .
7240	Returns the sum of the elements in the array .
7241	Reduce by R .
7242	Calculates the variance of a set of values .
7243	Returns the mean double .
7244	Invokes the given method on the given object with the given arguments .
7245	Reduce the elements of the given array by the given reduceBy function .
7246	Returns the euro UTC system date string .
7247	Returns true if the given object matches the given criteria .
7248	Create a not in criterion .
7249	Creates a criteria from a list of objects .
7250	Creates a criteria from a JSON string .
7251	Adds an array of integers to the end of the array .
7252	Returns the largest element in the array .
7253	Returns the first count elements of the given list .
7254	Returns the last element of the list .
7255	Returns the last count elements of the given list .
7256	Returns the least count elements from the given list .
7257	Returns the minimum element in the list .
7258	Returns the minimum element in the array .
7259	Process an array of maps .
7260	Handles a collection of maps .
7261	Creates an object from a map .
7262	Returns the value associated with the given key .
7263	Creates a ToolTip from a resource bundle .
7264	Generates the label value for the given field name .
7265	Adds the given hex value to the end of this CharSequence .
7266	Process the read queue .
7267	Process the write queue .
7268	Start the data store .
7269	Returns the first occurrence of the specified character at the given index .
7270	Returns a substring of the specified string starting at the specified index .
7271	Returns true if any of the given characters is contained in the given string .
7272	Adds a character to a string .
7273	Adds an array of objects to a String .
7274	Compacts a String .
7275	Split a String into an array of Strings .
7276	Split the given string by space .
7277	Split the given string by pipes .
7278	Convert a char array of array to a string array .
7279	Convert a String to camelCase .
7280	Checks if a string is inside of another string .
7281	under - bar - case .
7282	Convert a number to a string .
7283	Creates a new Sort object from the given array of sorts .
7284	Sorts the given list according to the specified fields .
7285	Returns the comparator for this field .
7286	Returns the child comparators .
7287	Checks if the given value is present in the given map .
7288	Checks if two numbers are equal .
7289	Checks if two arrays are equal .
7290	Returns the sum of the values in the specified range .
7291	Round up to power of 2 .
7292	Sorts the given list by the given field name and ascending .
7293	Sorts the given list according to the given sortBy and fields .
7294	Set field value from map .
7295	Converts an object to a list .
7296	Create SQL to load all version data .
7297	Returns a copy of the given list .
7298	Checks if the given object has a String field .
7299	Checks if a class has a string field .
7300	Checks if a class has a field with the given name .
7301	Returns the first comparable or primitive field from the given class .
7302	Returns the sortable field name for the given value .
7303	Compares this object with another object .
7304	Compares the given time with the current time .
7305	Sorts the given list using the given sorts .
7306	Sorts the given list according to the given sort method .
7307	Sorts the entries of the given map .
7308	Sorts the values of the given map .
7309	Sorts the keys of the given map .
7310	Sorts the given array according to the given sort method .
7311	Returns a comparator for the given field .
7312	Returns a comparator that sorts the given objects according to the given options .
7313	Returns the value associated with the given key .
7314	Returns the value associated with the given key or null if the key does not exist .
7315	Returns the current order .
7316	Removes all entries from the cache if necessary .
7317	If the value is not already initialized it will be initialized .
7318	Allocates a buffer for the given size .
7319	Determine if we should exit .
7320	Manages the input writer channel .
7321	If the queue is empty flush the data to disk . If the queue is empty flush the data to disk .
7322	Start monitoring .
7323	Start monitoring .
7324	Returns the value associated with the given key .
7325	Main query plan .
7326	Filter a group .
7327	Tick the file .
7328	Sync to disk .
7329	Closes the output stream .
7330	Writes the next buffer to the output stream .
7331	Writes the given buffer to the output stream .
7332	Initializes the output stream .
7333	Adds the given values to the map .
7334	Returns the byte array representation of the given key .
7335	Read the validator meta data from the properties file .
7336	Extract the validator meta data from a string .
7337	Returns the list of validator meta data for the given property .
7338	Extract the validator meta data for the given property .
7339	Extract metadata from annotations .
7340	Convert annotation data to validator meta data .
7341	Splits the given string into an array of strings .
7342	Split the given string by whitespace .
7343	Split by delimiters .
7344	Remove chars from a string .
7345	Split by chars none empty .
7346	Parse a double .
7347	Parse an integer from the beginning to the end .
7348	Parse a long from a string .
7349	Get property by path .
7350	Gets the fields from an object .
7351	Returns the type of the property .
7352	Inject a value into a property .
7353	Sets the value of the property at the given path .
7354	Returns the value of a property in a collection or null if the property is not found .
7355	Get the value of a property .
7356	Get a property value as an int .
7357	Initialize the message .
7358	Creates a message with the given key and arguments .
7359	Creates a validation message .
7360	Convert a list of keys to an array of values .
7361	Returns the current subject .
7362	Parse a JSON string .
7363	Sends an HTTP request .
7364	Delete a database .
7365	Creates a database .
7366	Returns a list of UUIDs .
7367	Returns a list of all resources under the given path .
7368	Trigger replication .
7369	Query for a single value .
7370	Specifies whether the view should be descending or not .
7371	Synchronize all design documents with the database .
7372	Get the design document with the given id from the database .
7373	Get all design docs from Desk .
7374	Get a DesignDocument from the Desk .
7375	Saves the replicator to the database .
7376	Find the replicator document .
7377	Returns all documents in the database .
7378	Removes the given document from the database .
7379	Find an object by its id .
7380	Find all documents matching the given JSON query .
7381	Returns true if the document contains the given id .
7382	Bulk writes the given objects to the database .
7383	Sends a PUT request to the given URI .
7384	Sends a PUT request to the given URI and returns the response .
7385	Execute a POST request .
7386	Perform a DELETE request on the given URI .
7387	Validates the response status code and reason phrase .
7388	Sets the entity .
7389	Adds an attachment .
7390	Get all changes in the feed .
7391	Reads the next row from the stream .
7392	Converts a double to a string .
7393	Release all active locks .
7394	Writes the given data to the given output stream .
7395	Adds tags to a metric .
7396	Verify and create temp tables .
7397	Returns the project id for the given namespace .
7398	Checks if the request is a query .
7399	Sends the authentication request .
7400	Gets the HTTP verb .
7401	Generate subject access token .
7402	On request result .
7403	Handle client request failure .
7404	Initializes the session .
7405	Find all scheduled jobs for a given time slice .
7406	Returns a list of buckets from the given map .
7407	End exchange with status code and reason phrase .
7408	Find all data from the bucket .
7409	Creates a new buckets from the given start and step .
7410	Sends a message to the server .
7411	Send one - way message .
7412	Send delay message .
7413	Scan for keys and values .
7414	Sets the value of the given property .
7415	Adds a file to the zip .
7416	Replaces the contents of the given file with the given text .
7417	Build the zip file .
7418	Generates metrics for the given component and product .
7419	Fetch content .
7420	Fetch order content .
7421	Upload an export transformation .
7422	Generates a file from the given components .
7423	Creates a new directory in the given parent directory .
7424	Adds the object to the end of the tree .
7425	Registers an adaptor for the given type .
7426	Register an attribute renderer for the given type .
7427	Prepare the template .
7428	Add a domain object to the assembler .
7429	Sets the value of a property .
7430	Adds a child object to the given collection .
7431	Creates a supplier that creates a file with the given prefix and suffix .
7432	Copies the contents of an input stream to an output stream .
7433	Parses the given file .
7434	Parse an XML document from the given reader .
7435	Returns a stream of all elements in the given parent .
7436	Returns a stream of all child nodes in the given parent .
7437	Returns the first child element in the given parent element .
7438	Returns all named elements in the given parent element .
7439	Validates the given XML using the given XML schema .
7440	Main method .
7441	Creates a new content builder from an input stream .
7442	Creates a builder from a resource .
7443	Process the given entry using the given processor .
7444	Encodes the given string using the ASCII characters encoding .
7445	Sets the signature of the request .
7446	Removes all non - whitespace characters from the given array .
7447	Sign the request .
7448	Sets the data to the recorder .
7449	Complete multipart upload .
7450	Add a favorite notification to the list of favorite notifications .
7451	Adds a new state to an entry .
7452	Checks if the cache has expired .
7453	Get a notification
7454	Get the list of addressees for a notification
7455	Get the details of an addressee .
7456	Get the list of events for a notification
7457	Returns the event with the given id .
7458	Gets the REST URL for a single notification .
7459	Returns the entry with the given id .
7460	Gets the authentication token .
7461	Returns the number of entries in the list .
7462	Adds new categories to the list of categories .
7463	Fetch the SSP Notifications for the active task .
7464	Creates a notification response with an error message .
7465	Maps a response entity to a notification response .
7466	Maps a row to a notification entry .
7467	Attach the available actions to the NotificationEntry .
7468	Normalize the given link .
7469	Gets the notification category from the request preferences .
7470	Gets the notification source from the request .
7471	Invoke the action .
7472	Read the notification response from a file .
7473	Gets the user s school id from the request .
7474	Extract the user id from the response .
7475	Hide or unhide the entry if it is not snoozed .
7476	Gets the attributes map .
7477	Normalize a point .
7478	Returns true if boxA is contained in boxB .
7479	Returns the closest point .
7480	Returns the sign of the vector
7481	Sets the projection matrix .
7482	Sets the rotation matrix .
7483	Convert a rectangle into a polygon
7484	Convert a polygon into a quadrilateral .
7485	Computes the bounding rectangle of a quad
7486	Computes the bounding rectangle of a polygon
7487	Returns the center of a quadrilateral
7488	Calculates the average of all vertices in a polygon
7489	Convert a list of points into a convex hull
7490	Removes all vertices in the polygon that are below the given tolerance .
7491	Calculates the average of point error between two polygons .
7492	Computes the area of the polygon .
7493	Returns true if the quad contains the given point .
7494	Returns true if the point is inside the triangle
7495	Returns the intersection of two lines
7496	Returns the intersection of two line segments .
7497	Computes the intersection of two lines .
7498	Returns the intersection distance between two segments .
7499	Computes the intersection of two polygons .
7500	Returns true if the specified ellipse is inside the specified ellipse .
7501	Returns the intersection area of two rectangles .
7502	Returns the value at the given index .
7503	Convert a matrix into a quaternion
7504	Rotates a rotation matrix .
7505	Sets the rotation matrix .
7506	Rotates a 3x3 matrix .
7507	Rotates a 3x3 matrix .
7508	Sets the rotation of a rotation matrix .
7509	Convert an euler rotation matrix to a matrix .
7510	Computes the rotation about the axis .
7511	Sets the angle .
7512	Convert a motion into a twist coordinate .
7513	Sets the rotation matrix .
7514	Interpolates the rotation matrix into the output matrix .
7515	SVD of a list of points
7516	Solves a point on the plane .
7517	Returns the length of the side at the given index .
7518	Returns true if the given point is inside .
7519	Convert a ConicGeneral_F64 image into a real image .
7520	Convert a ConicGeneral_F64 into a Matrix3x3
7521	Convert a Conic image into a Parabola General image
7522	Convert from Parabola to ConicGeneral
7523	Divide a point by a scalar .
7524	Convert a GeoTuple3D_F64 into a Matrix
7525	Converts a GeoMatrix into a GeoTuple3D_F64
7526	Sets the parameter vector .
7527	Returns the distance between two angles .
7528	Intersects two lines .
7529	Returns true if the plane is contained within the plane .
7530	Returns true if the line intersects the sphere .
7531	Interpolates two Se2 images .
7532	Extract the quaternion from the quaternion matrix .
7533	Process a set of points into a polygon .
7534	Sets the camera to no motion .
7535	Converts a Se3_F64 into a homogeneous matrix .
7536	Converts a Se2_F64 image into a homogeneous image .
7537	Creates a Se3_F64 from a rotation matrix .
7538	Checks if two Se3_F64 are identical
7539	Converts a latitude and longitude into a unit vector .
7540	Returns true if the point is inside the circle .
7541	Computes the square root of a circle .
7542	Returns the closest point between two lines .
7543	Returns the point closest to the given line .
7544	Returns the point which is closest to the origin of the plane .
7545	Returns the point closest to the given line segment .
7546	Returns the closest point between two vertices .
7547	Transform a Se2_F64 into a Point2D_F64
7548	Transform a Se2_F64 into a vector of points
7549	Returns true if this is equal to the given quadrilateral .
7550	Calculates the acute angle between two lines
7551	Converts a polar line into a parametric line .
7552	Convert a line into a line polar .
7553	Convert a line segment into a parametric image
7554	Convert a line segment into a general image .
7555	Convert a line into a line general image .
7556	Converts two points into a line parametric .
7557	Convert a line parameteretric to a line polar .
7558	Converts a parametric line into a general line .
7559	Converts a line into a parametric line .
7560	Convert a plane normal into a general plane .
7561	Converts a plane tangent into a plane normal .
7562	Convert a plane to a plane normal
7563	Convert a Point2D vector to a DL3D vector
7564	Convert a plane to a world .
7565	Returns true if this matrix is identical to the given matrix .
7566	Returns a copy of this matrix .
7567	Returns the norm of this matrix .
7568	Computes the t - value of the given line .
7569	Returns true if this matrix has any uncountable elements .
7570	Returns true if the parabola is equivalent to this parabola
7571	Returns the center of the image .
7572	Calculates the acute angle between two lines .
7573	Returns whether the given point is infinite .
7574	Randomly creates a list of points
7575	Convert a Hessenberg coordinate into an Euclidean coordinate .
7576	Subtracts two vectors .
7577	Returns true if the sign of the two vectors are identical .
7578	Sets this rectangle to the given rectangle .
7579	Convert an ellipse to a quadratic .
7580	Computes the point at which the ellipse is rotated .
7581	Computes the angle of an ellipse .
7582	Computes the tangent of an ellipse
7583	Select the tangent .
7584	Returns the corner at the given index .
7585	Calculates the distance between two lines
7586	Returns the distance between two points .
7587	Returns the distance between two points .
7588	Returns the distance between a plane and a point .
7589	Returns the distance between a cylinder and a point
7590	Returns the Euclidean distance between two segments
7591	Returns the squared distance between two segments .
7592	Returns the Euclidean distance between two points .
7593	Returns the squared distance between two points .
7594	Returns the Euclidean distance between two points .
7595	Returns the squared Euclidean distance between two points .
7596	Returns the origin of the given line .
7597	Returns the Euclidean distance between a point and an ellipse .
7598	Computes the 2 - dimensional distance between a point and an ellipse .
7599	Adds a transform to the path .
7600	Returns the point closest to the given point .
7601	Returns the closest point in the specified ellipse .
7602	Computes the polynomial curve .
7603	Creates a random vector
7604	Computes the perpendicular projection of A .
7605	Checks if two vectors are identical .
7606	Normalize a vector .
7607	Creates a matrix from a vector .
7608	Convert a matrix into a vector .
7609	Returns the distance between two points .
7610	Sets the ellipse .
7611	Normalize this vector .
7612	Returns the distance between two points .
7613	Returns the distance between two quadrilaterals .
7614	Calculates the simple distance between two polygons .
7615	Returns the mean of a list of points .
7616	Returns a list of points in the CCW order .
7617	Compute the normal covariance matrix for a list of points
7618	Returns true if the polygon is convex .
7619	Multiply this vector by the given scalar .
7620	Returns the maximum absolute value .
7621	Returns the Euclidean distance between two points .
7622	Returns the squared Euclidean distance between two points .
7623	Returns a list of random points from a plane .
7624	Randomly creates a list of points
7625	Returns a list of random points
7626	Calculates the mean of a list of points
7627	Returns the mean of a list of points
7628	Invalidate all credentials from the cache .
7629	Invalidate all tokens that match the given predicate .
7630	Combine a collection of Strings to a set of Strings .
7631	Get the server features from the server . xml file .
7632	Get the config dropins features from the configDropins folder .
7633	Get the features from the server . xml file .
7634	Parse the include node .
7635	Parse feature manager node .
7636	Downloads the json files for the given product id and version .
7637	Get the set of open liberty features from a set of JSON files .
7638	Checks if there are only Open Liberty features to install .
7639	Returns true if the reference contains all of the target strings ignoring case .
7640	Get the next product version .
7641	Extract the symbolic name from the given jar file .
7642	Gets the map based install kernel jar .
7643	Checks if the file is a replacement jar .
7644	Extract the version from the file name .
7645	Compares two versions .
7646	Executes the productInfo command and returns the result .
7647	Checks if the given artifact is a Spring Boot Uber jar .
7648	Get an arquillian property .
7649	Checks if the given file is working in this environment .
7650	Move back to center .
7651	Checks if two objects are equal .
7652	Load an integer from a string .
7653	Throw a pizza party .
7654	Verify the image .
7655	Swaps the blank cells of this puzzle to the target puzzle .
7656	Returns the distance to the goal .
7657	Print a formatted string to stdout .
7658	Writes a formatted string to the output stream .
7659	Make a decision based on the number of fishes
7660	Print a variable .
7661	Returns a random number between a and b .
7662	Returns a uniform value between 0 and b .
7663	Returns the k - th poisson distribution .
7664	Returns the index of the first non - negative entry in the array .
7665	The main method of the random number generator .
7666	Capitalizes the first character of a word .
7667	UnCapitalizes the first character of a word .
7668	Fix the path .
7669	Returns a String representation of the Join Criteria
7670	Gets the token sentence .
7671	Filter the request .
7672	Extract the auth token from the cookie list .
7673	Register guice bound classes .
7674	Get all role permissions .
7675	Adds a projection to the list .
7676	Convert JobInfo to JobDetail
7677	Convert a TriggerInfo to a Trigger
7678	Set the count interval values .
7679	Set start and end time .
7680	Adds a mail item to the queue .
7681	Writes the contents of the input stream to the given output stream .
7682	Initializes the scheduler .
7683	Returns the list of all fields of the given class .
7684	Get the field map for the given class .
7685	Converts an exception to a response .
7686	Configures the encryptor with the given configuration .
7687	Generate the attributes hash .
7688	Generate the token string .
7689	Sends a message to the server .
7690	Generates a strong password for the given user .
7691	Changes the password of a user .
7692	Returns the user with the given username .
7693	Hashes a password .
7694	Verify that the account name is a valid email address
7695	Verify the strength of the password .
7696	Provides a search model for the current request .
7697	Commit the transaction if it is active .
7698	Rollback the transaction if it is active .
7699	Starts the transaction .
7700	Configure a join field by name .
7701	Checks if the given token is authorized .
7702	Parse the given object into a date .
7703	Returns an error response .
7704	Creates an equals restriction with the given name and value .
7705	Creates a NOT_EQUALS restriction .
7706	Creates a less than expression .
7707	Creates a new Restriction with a less than or equals operator .
7708	Create a greater than expression .
7709	Create a greater or equal to restriction .
7710	Create an ilike restriction .
7711	Create a IN restriction .
7712	Adds a namespace to the representation factory .
7713	Returns a copy of this instance with the given content .
7714	Adds a rel to this representation .
7715	Returns a copy of this instance with the specified value .
7716	Adds a namespace to the resource .
7717	Returns whether the given input can be decoded .
7718	Encodes a string into a byte array .
7719	Returns whether two Reader objects are equal .
7720	Moves a file from src to dst .
7721	Creates and sets the last modified time of each file .
7722	Returns the base name of a file .
7723	Add padding .
7724	Returns the short name of the given class .
7725	Returns the set of super types of the given class .
7726	Verify the given hash .
7727	Read a string from System . in .
7728	Appends a byte to the end of this buffer .
7729	Appends the specified bytes to the end of this buffer .
7730	Creates a copy of the given array .
7731	Returns the addition of this fraction to the given fraction .
7732	Returns the difference of this fraction and the given fraction .
7733	Returns a new fraction that is multiplied by this fraction .
7734	Divides this fraction by the given fraction .
7735	Returns the largest of the given values .
7736	Returns the minimum of the given values .
7737	Checks if the condition is true .
7738	Fetch content from Meteo .
7739	Fetch Sunrise data from Meteo .
7740	Fetch Sunrise data from Meteo .
7741	Returns a list of forecasts for the given number of hours from now .
7742	Finds the nearest forecast for the given date .
7743	Fetch the content of a forecast .
7744	Create a simple long term forecast .
7745	Creates a long term forecast .
7746	Creates a new Location from a string of coordinates .
7747	Fetch the available data from Meteo .
7748	Creates a Wind symbol name from a point forecast .
7749	Find the BeaufortLevel for a given PointForecast .
7750	Creates an URI from a string .
7751	Checks if the current date is a SUN .
7752	Returns the point forecast for the given date .
7753	Get the best fit period forecast .
7754	Fetch content from Meteo .
7755	Fetch text location weathers from Meteo .
7756	Update the database .
7757	Invoke a string method .
7758	Acquires the object from the given DataSource .
7759	Returns a reference to an object .
7760	Returns a reference to a wrapped object .
7761	Get the configuration from the service path .
7762	Returns whether the substitutor is enabled .
7763	Creates a class iterator for the given service and service name .
7764	Get the Decoder from the configuration .
7765	Load all services from the classpath .
7766	Returns the module instance for the given module type .
7767	Acquires an InputStream from the given DataSource .
7768	Returns the size of the data in bytes .
7769	Returns a new ReferencedData object that wraps the given data .
7770	Returns the component at the given index .
7771	Returns the prefix of this name .
7772	Returns true if the compiler is colored .
7773	Execute a regular expression .
7774	Cfind loop .
7775	Add a subset to the match .
7776	Cdissects a given subexpression .
7777	CBR dissects an expression .
7778	Clone outchains .
7779	Optimize a sub - tree .
7780	Mark a subre as in use .
7781	Create a new NFA for a given tree node .
7782	Parse a regular expression .
7783	Deltraverse a state .
7784	Create a non - word arc .
7785	Clones the wordchrs .
7786	Returns the scannum .
7787	Brack a bracket .
7788	Scan plain text .
7789	Creates a new lacon .
7790	Add a single character .
7791	Do a vector .
7792	Returns the color associated with the given codepoint .
7793	Creates a pseudocolor .
7794	Adds an arc to the current state .
7795	Check if all colors are ok .
7796	Add an arc to the colorchain .
7797	Unlinks an arc from its colorchain .
7798	Dump all colors .
7799	Lex the start of the regex .
7800	Checks if there are prefixes .
7801	Lex - nests a pattern .
7802	Returns the color of the given codepoint .
7803	Initializes a new state set .
7804	Returns the last cold state .
7805	Returns a set of all cases of the given character .
7806	Returns the UnicodeSet for the given class name .
7807	Sort the arcs by color and target .
7808	Dump the current state of this node .
7809	Creates a new state .
7810	Moves all outputs from old to newState .
7811	Moves all ins from old to newState .
7812	Copy all ins from old to newState .
7813	Copy out chains from old state to new state .
7814	Drop a state .
7815	Frees a state .
7816	Cparc an arc .
7817	Duptraverse a state .
7818	Sets the special colors .
7819	Dump the nfa .
7820	Dump a state .
7821	Dump the contents of the output stream to the given StringBuilder .
7822	Dump an arc to a string .
7823	Dump an arc to a string .
7824	Optimize the regular expression .
7825	Analyzes the list of outchains .
7826	Combines two Arc objects .
7827	Removes all states that are reachable from the pre state .
7828	Mark a state as reachable .
7829	Mark a state as canreach .
7830	Fixes outchains that are empty .
7831	Returns true if the arc is empty .
7832	Get the rule parameters from the rule parameters file .
7833	Get the list of rule interpreter plugins .
7834	Get the report plugins .
7835	Returns the rule selection for the given rule set .
7836	Interprets the command line .
7837	Gets the error message .
7838	Gathers standard options .
7839	Gather task options .
7840	Gathers the task names .
7841	Interprets the command line .
7842	Get the command line .
7843	Executes the given task .
7844	Read the properties from the properties file .
7845	Prints the usage of the command .
7846	Gets the JQASSISTANT_HOME environment variable .
7847	Creates the plugin class loader .
7848	Returns a set of all the ids that are contained within the bounding box .
7849	Returns a set of all the ids of the intersecting cells .
7850	Returns the URI for the given request .
7851	Adds a route to the router .
7852	Returns the number of routes .
7853	Adds a route to the first route of this router .
7854	Add a route to this router .
7855	Adds a route to the last route of this router .
7856	Returns true if any of the given request path tokens are matched .
7857	Smart equal .
7858	Returns the file name for the store .
7859	Compares two folders .
7860	Compares two entries .
7861	Compares two Bookmarks .
7862	Sets the last modified time of the servlet class .
7863	Returns the list of dependants of this context .
7864	Find the class with the given name .
7865	Parse the Authorization header .
7866	Returns a new instance of the ProtectedFunctionMapper .
7867	Maps a function to a function .
7868	Returns a ProtectedFunctionMapper for the given method name and arguments .
7869	Resolve a function .
7870	Sets the contents of this buffer to the given character array .
7871	Resolve a variable .
7872	Parse a tag file .
7873	Parse a Jasper file .
7874	Parse directives from a tag file .
7875	Parse the given file .
7876	Creates a Jasper compiler .
7877	Returns an input stream to a resource .
7878	Calculates the last mod of all channels .
7879	Returns a list of all the class loaders found in this class loader .
7880	Checks if the given classloader is a parent of this class loader .
7881	Start loading a class .
7882	Read the stream header .
7883	Paginate a list of items .
7884	Creates a new MetaKey from the given string .
7885	Fill requirements .
7886	Get the TagFileInfo for the given tag file name .
7887	Parse the implicit TLD .
7888	Returns the checksum of the given file .
7889	Returns the size of the given file .
7890	Validates the channel name .
7891	Seeks to the given block .
7892	Locates the block at the given position .
7893	Get the list of Maven artifacts .
7894	Update opt state and reps .
7895	Calculate 1 - byte price .
7896	Calculate the long rep prices .
7897	Calculates the normal match prices .
7898	Throws an exception if the expected byte is not present .
7899	Throw an exception if the byte is invalid .
7900	Scan TLDs .
7901	Scan a TLD file .
7902	Adds a wrapper to the list of registered wrappers .
7903	Returns the parent class loader .
7904	Sets the bytecode for the given name .
7905	Get the bytecode birth time for a given name .
7906	Saves the bytecode for the given class to the given file .
7907	Checks if all jsps have been compiled .
7908	Initialize the classpath .
7909	Start the thread .
7910	Stop the thread .
7911	Run the JSP thread .
7912	Find by name .
7913	Finds a channel .
7914	Updates the deploy group cache .
7915	List deploy groups .
7916	Copies the contents of an input stream to an output stream .
7917	Parse a Jasper XML file .
7918	Parse the attributes from the given JspReader .
7919	Parse quoted string .
7920	Adds the include directives to the given parent node .
7921	Parse jsp attributes and body .
7922	Add an attribute .
7923	Adds a child node to this node .
7924	Returns an iterator over the attribute names .
7925	Returns an iterator over all children .
7926	Finds all children with the given name .
7927	Returns a copy of this MavenCoordinates .
7928	Finds the alias for the given variable name .
7929	Sets the thread to the current thread .
7930	Unsets the current thread .
7931	Returns the wrapped stream .
7932	Write optional field .
7933	Writes the given value to the given writer .
7934	Adds an element to a parent element .
7935	Adds an element to the first child of the given parent element .
7936	Writes the current character to the given output stream .
7937	Set the writer .
7938	Re - allocates the buffer if necessary .
7939	Maps a page to an EL function .
7940	Returns the parent of the given key or null if not found .
7941	Register a model provider .
7942	Streams the contents of this file to the given stream .
7943	Monitor a job .
7944	Checks if the user is authenticated .
7945	Finishes the stream .
7946	Creates a new Gson instance .
7947	Encode for LZMA2 .
7948	Returns the union of the provided and extracted metadata .
7949	Get the exception from the request .
7950	Checks if the given coordinates is a checksum .
7951	Finishes the stream .
7952	Get the exception from the request .
7953	Evaluate an EL expression .
7954	Make the prefix from the OSGi properties .
7955	Checks if the file is an XML file .
7956	Parse tag file directives .
7957	Load a tag file .
7958	Remove all generated class files for the given class file .
7959	Main method .
7960	Set the URI root .
7961	Scan all files in the given directory .
7962	Locates the uri root .
7963	Initialize the system class loader .
7964	Moves to the next position in the chain .
7965	Returns true if the given string matches .
7966	Returns true if the given string matches any of the optional spaces following the given string .
7967	Skip until the next character in the limit is found .
7968	Skip until the next character in the given limit is found .
7969	Skip until a tag is found .
7970	Parse the token .
7971	Pop a file from the current stream .
7972	Make the coordinates unclassified .
7973	Filter the given list by the given predicate .
7974	Get the missing ids for this aspect .
7975	Sets the schema resource prefix .
7976	Sets the DTD resource prefix .
7977	URL - encodes the given prefix .
7978	Convert a node to a tree .
7979	Merge errors from a binding result .
7980	Initializes the binder .
7981	Scans the service registry for aspect information .
7982	Unqualifies a path .
7983	Invoke the tag plugin .
7984	Get a byte array of the specified size . If the array is not yet cached a new array is created and filled with zeros .
7985	Returns an array of the specified size filled with zeros if necessary .
7986	Convert a collection of artifact results into an AetherResult .
7987	Returns an input stream to a resource .
7988	Validate the tag library .
7989	Pushes a stream to the include stack .
7990	Get the encoding of an XML file .
7991	Scan an XML declaration .
7992	Report a fatal error .
7993	Get the file path .
7994	Returns the resource at the given path .
7995	Returns an InputStream to the resource at the given path .
7996	Returns a set of resource paths for the given path .
7997	Log a message and exception .
7998	Add a filter .
7999	Returns the buffer size in bytes .
8000	Returns the memory usage in bytes .
8001	Set the preset dictionary .
8002	Moves the window to the end of the buffer .
8003	Fill the window with bytes from the given array .
8004	Process pending bytes .
8005	Returns the number of bytes that are equal to the specified length .
8006	Returns the length of the first match in the buffer .
8007	Verify that the length of the matches is the same .
8008	Moves the current position to the next available position .
8009	Recycle the stream .
8010	Flushes the buffer to the output stream .
8011	Clear the buffer .
8012	Flushes the response to the output stream .
8013	Close the output stream .
8014	Writes a string to the output stream .
8015	Allocates a char buffer .
8016	Throws a JasperException with the given error report .
8017	Make a list of keys from the given meta data .
8018	Generate the class .
8019	Compile the Jasper file .
8020	Remove generated files .
8021	Initialize the java compiler .
8022	Checks if the given path is in the web - inf .
8023	Quote a single character .
8024	Generate the declarations for a page .
8025	Compile the tag handler pool list .
8026	Generate xml prolog .
8027	Generate common postamble .
8028	Generate the postamble .
8029	Generates a Jasper page .
8030	Generate the tag handler attributes .
8031	Read properties from the given input stream .
8032	Export a channel to an output stream .
8033	Validate the XML view .
8034	Get a tag handler .
8035	Parse an EL expression .
8036	Select the property from the previous and the current group .
8037	Checks if the given URI is a jsp page .
8038	Print a comment .
8039	Print in a string .
8040	Print a single line of text .
8041	Print a multi - line string .
8042	Get the expression in xml .
8043	Checks if the given scope is valid .
8044	Escape an XML string .
8045	Validates the given expressions .
8046	Returns the tag handler class name for the given tag file .
8047	Make a Java package name from a class path .
8048	Split a path into its components .
8049	Make a Java identifier .
8050	Mangle a character .
8051	Checks if the given key is a java keyword .
8052	Adds a property to a map .
8053	Returns a string representation of the given modifier .
8054	Returns a sorted set of metadata for the given namespace and key .
8055	Run the task .
8056	Returns the basename of the given name .
8057	Put a value into the cache .
8058	Load a value from the database .
8059	Build a collection of metrics from an aggregated payload .
8060	Resolve a number .
8061	Writes the given object to the given output stream .
8062	Get the TTL for a given rollup .
8063	Create prepared statements .
8064	Track delayed metrics for the given tenant .
8065	Track delayed aggregated metrics for the given tenant .
8066	Reads a double or long from the stream .
8067	Put an unversioned double or long .
8068	Returns a map of all properties .
8069	Creates a new container .
8070	Schedule all slots eligible for rollup .
8071	Removes the given slot from running .
8072	Adds a listener to the given event .
8073	Register a listener for the given event .
8074	Removes all callbacks for the given event .
8075	Emit an event to all registered listeners .
8076	Returns the list of listeners for the given event .
8077	Returns the remote name .
8078	Appends the given rollup event to the output stream .
8079	Parse the timestamp from the file name .
8080	Start the server .
8081	Returns the appropriate RollupComputer for the given source type and granularity .
8082	Get the IOContainer instance from the configuration .
8083	Put a TTL config into the given table .
8084	Compute maximums .
8085	Format the header .
8086	Format a list of output formats .
8087	Register the metrics for the lock manager .
8088	Sets the name of the thread pool .
8089	Adds the given metric index and the given number of documents .
8090	Returns the complete set of metric names .
8091	Returns a list of tokens for the given locator .
8092	Adds a rollup to the database and returns the result set .
8093	Returns the granularity for the given points in the given interval .
8094	Returns the granularity of a given number of points less than or equal to the requested duration .
8095	Sets the server time .
8096	Returns the set of unique hosts .
8097	Returns the maximum number of connections per host .
8098	Returns an iterable of all metric column families .
8099	Inserts a collection of metrics into the database .
8100	Inserts the given metrics into the Astyanax database .
8101	Returns a set of all the locators that have been added to the rollup .
8102	Fetch metric names from elasticsearch .
8103	Returns the current level of the regex for the given query .
8104	Start the storage manager .
8105	Stop the uploader thread .
8106	Returns true if the given locator is currently in the batch layer .
8107	Returns true if the given locator is currently in the discovery layer .
8108	Returns true if the given locator is currently in the token discovery layer .
8109	Returns whether the given locator is currently being inserted for the given slot .
8110	Set the given locator for the current slot .
8111	Returns a map of ranges that are finer than the given range .
8112	Returns an iterable of ranges for the given interval .
8113	Inserts a set of metrics into the keyspace .
8114	Inserts the given metrics into the given column family .
8115	Checks if the given metric is delayed .
8116	Returns the bound statement for the given metric if it is delayed .
8117	Gets the metadata values for the given key .
8118	Returns a serializer for the given type .
8119	Checks if the content type is valid .
8120	Checks if the Accept header is valid .
8121	Inserts a batch of metrics into Elasticsearch .
8122	Checks if at least one of the aggregated metrics is present .
8123	Checks if the file manager is running . If the file manager is not running the process is terminated .
8124	Returns a new instance of the extractor .
8125	Checks if the OS matches .
8126	Start downloading and extraction .
8127	Shuts down the server .
8128	Creates a new instance of PnSignalingParams .
8129	Adds a list of ICE servers to this connection .
8130	Adds a new ice server to the list of ice servers .
8131	Transmits a message to a user .
8132	Transmits all peers
8133	Gets the value of the weitereAdresse property .
8134	Gets the value of the property userDefinedSimplefield property .
8135	Gets the value of the property userDefinedAnyfield .
8136	Sets the value of the apiSuchfelder property .
8137	Gets the value of the multimediaAnhang property .
8138	Gets the value of the property statusVBM .
8139	Gets the value of the property status_IS24 .
8140	Gets the value of the property statusHP .
8141	Gets the value of the importmodus property .
8142	Gets the value of the adressdruck property .
8143	Gets the value of the waehrung property .
8144	Gets the value of the bodenbelag property .
8145	Sets the value of the region property .
8146	Sets the value of the area property .
8147	Sets the value of the address property .
8148	Sets the value of the description property .
8149	Sets the value of the rentCollectionPeriod property .
8150	Sets the value of the furnished property .
8151	Sets the value of the phone1 property .
8152	Sets the value of the phone2 property .
8153	Sets the value of the contactName property .
8154	Sets the value of the phoneInfo property .
8155	Sets the value of the mainEmail property .
8156	Sets the value of the ccEmail property .
8157	Sets the value of the externalId property .
8158	Sets the value of the agentId property .
8159	Sets the value of the epart property .
8160	Sets the value of the jahrgang property .
8161	Sets the value of the gebaeudeart property .
8162	Sets the value of the bueroTyp property .
8163	Checks if the given value is numeric .
8164	Sets the value of the gebiete property .
8165	Sets the value of the gruppe property .
8166	Sets the value of the agent property .
8167	Gets the value of the property property property property property .
8168	Sets the value of the stand property .
8169	Gets the value of the property userDefinedExtend property .
8170	Sets the value of the zeiteinheit property .
8171	Gets the value of the property zimmer .
8172	Gets the value of the property haus .
8173	Gets the value of the bueroPraxen property .
8174	Gets the value of the property gastgewerbe .
8175	Gets the value of the landUndForstwirtschaft property .
8176	Gets the value of the property sonstige property .
8177	Gets the value of the property zinshausRenditeobjekt .
8178	Gets the value of the property terrain .
8179	Sets the value of the umfang property .
8180	Sets the value of the wohnungtyp property .
8181	Returns the ISO2 code for the given country .
8182	Get the country ISO 2 code from ISO 3166 - 1 .
8183	Returns the ISO 3166 - 1 country code .
8184	Returns the ISO 3166 - 1 country code .
8185	Returns the country name for the given country and language .
8186	Translate a country name to a language name .
8187	Gets the value of the anbieter property .
8188	Sets the value of the category property .
8189	Gets the value of the property pdf .
8190	Sets the value of the aktionart property .
8191	Sets the value of the realestateitems property .
8192	Sets the value of the pacht property .
8193	Downgrades the given OpenImmoDocument to the previous version .
8194	Upgrade the given OpenImmoDocument from the previous version .
8195	Gets the value of the value property .
8196	Returns the names of all the fields in this data type .
8197	Sets the value of the blick property .
8198	Sets the value of the pauschalmiete property .
8199	Sets the value of the monatsmiete property .
8200	Gets the value of the parkplatz property .
8201	Sets the value of the lastenaufzug property .
8202	Sets the value of the zustandArt property .
8203	Gets the value of the field feld .
8204	Handles a validation event .
8205	Dump the contents of this record to the given writer .
8206	Returns the value at the given position or the default value if the value is not found .
8207	Print the current record .
8208	Sets the value at the given position .
8209	Sets the value of the ctype property .
8210	Sets the value of the haustyp property .
8211	Gets the value of the property energiepass .
8212	Sets the value of the keller property .
8213	Sets the value of the grundstTyp property .
8214	Sets the value of the geschlAttr property .
8215	Sets the value of the hallenTyp property .
8216	Gets the value of the wiederholungstermin property .
8217	Gets the value of the teilungsversteigerung property .
8218	Upgrade from previous version .
8219	Gets the value of the bevorzugt property .
8220	Gets the value of the property wunsch .
8221	Sets the value of the art property .
8222	Sets the value of the modus property .
8223	Gets the value of the property emailSonstige property .
8224	Gets the value of the property telSonstige property .
8225	Sets the value of the handelTyp property .
8226	Downgrade the given OpenImmoDocument to the previous version .
8227	Sets the value of the apiSuchfeld1 property .
8228	Sets the value of the apiSuchfeld2 property .
8229	Sets the value of the apiSuchfeld3 property .
8230	Gets the value of the property row .
8231	Sets the value of the distanzZuSport property .
8232	Gets the value of the anhang property .
8233	Gets the value of the property objektKategorie2 .
8234	Gets the value of the property objektzustand property .
8235	Gets the value of the hausKategorie property .
8236	Gets the value of the property ausstattungsqualitaet .
8237	Gets the value of the property vermarktungsart property .
8238	Gets the value of the interessent property .
8239	Sets the value of the wert property .
8240	Sets the value of the ackerland property .
8241	Sets the value of the bauerwartungsland property .
8242	Sets the value of the bootsstaende property .
8243	Sets the value of the buero property .
8244	Sets the value of the camping property .
8245	Sets the value of the doppelhaus property .
8246	Sets the value of the einfamilienhaus property .
8247	Sets the value of the einzelhandelGross property .
8248	Sets the value of the einzelhandelKlein property .
8249	Sets the value of the garagen property .
8250	Sets the value of the garten property .
8251	Sets the value of the gastronomie property .
8252	Sets the value of the gewerbe property .
8253	Sets the value of the hotel property .
8254	Sets the value of the industrie property .
8255	Sets the value of the keineBebauung property .
8256	Sets the value of the kleingewerbe property .
8257	Sets the value of the lager property .
8258	Sets the value of the mehrfamilienhaus property .
8259	Sets the value of the obstpflanzung property .
8260	Sets the value of the parkhaus property .
8261	Sets the value of the produktion property .
8262	Sets the value of the reihenhaus property .
8263	Sets the value of the stellplaetze property .
8264	Sets the value of the villa property .
8265	Sets the value of the wald property .
8266	Sets the value of the anbieter property .
8267	Gets the value of the wohnung property .
8268	Gets the value of the property grundstueck property .
8269	Gets the value of the einzelhandel property .
8270	Gets the value of the hallenLagerProd property .
8271	Gets the value of the parken property .
8272	Gets the value of the property freizeitimmobilieGewerblich .
8273	Gets the value of the property objektartZusatz .
8274	Gets the value of the stellplatzart property .
8275	Sets the value of the maxDauer property .
8276	Gets the value of the property feature .
8277	Sets the value of the zimmertyp property .
8278	Upgrade the document from the previous version .
8279	Sets the value of the keineAngabe property .
8280	Sets the value of the erdwaerme property .
8281	Sets the value of the solarheizung property .
8282	Sets the value of the pelletheizung property .
8283	Sets the value of the gas property .
8284	Sets the value of the oel property .
8285	Sets the value of the fernwaerme property .
8286	Sets the value of the strom property .
8287	Sets the value of the kohle property .
8288	Returns a random string of the specified length .
8289	Returns a random letter string .
8290	Generate a random numeric string .
8291	Gets the value of the wohnungKategorie property .
8292	Sets the value of the benutzer property .
8293	Sets the value of the objekte property .
8294	Gets the value of the property feed .
8295	Sets the value of the Moeb property .
8296	Gets the value of the property serviceleistungen .
8297	Sets the value of the subAdministrativeArea property .
8298	Sets the value of the city property .
8299	Sets the value of the locality property .
8300	Downgrades the given OpenImmoDocument to the previous version .
8301	Upgrade the OpenImmo document from the previous version .
8302	Sets the value of the landTyp property .
8303	Gets the value of the field property .
8304	Upgrade the OpenImmoDocument from the previous version .
8305	Gets the value of the property ad .
8306	Sets the value of the gastgewTyp property .
8307	Sets the value of the platzart property .
8308	Gets the value of the property datenVerkabelung .
8309	Gets the value of the klimaanlage property .
8310	Gets the value of the property image .
8311	Sets the value of the priceType property .
8312	Sets the value of the newDevelopmentAvailability property .
8313	Sets the value of the directions property .
8314	Sets the value of the co2Rating property .
8315	Sets the value of the energyRating property .
8316	Sets the value of the viewingDetails property .
8317	Sets the value of the propertyStatus property of this OverseasSaleAd .
8318	Sets the value of the pictures property .
8319	Sets the value of the bebaubarAttr property .
8320	Upgrade the given OpenImmoDocument from the previous version .
8321	Sets the value of the parkenTyp property .
8322	Sets the value of the alterAttr property .
8323	Sets the value of the freizeitTyp property .
8324	Sets the value of the telefonart property .
8325	Sets the value of the emailart property .
8326	Sets the value of the overseasSales property .
8327	Sets the value of the overseasRental property .
8328	Creates a user - defined simplefield .
8329	Gets the value of the property fehler .
8330	Sets the value of the erbpacht property .
8331	Gets the value of the property stpSonstige property .
8332	Gets the value of the valuelist property .
8333	Sets the value of the minDauer property .
8334	Sets the value of the zinsTyp property .
8335	Gets the value of the property photo .
8336	Sets the value of the metadata property .
8337	Sets the value of the projects property .
8338	Sets the value of the properties property .
8339	Downgrades the given document to the previous version .
8340	Upgrade from the previous version of the KyeroDocument .
8341	Gets the value of the immobilie property .
8342	Gets the value of the property objekt property .
8343	Gets the value of the property fehlerliste .
8344	Gets the value of the property status .
8345	Sets the value of the sonstigeTyp property .
8346	Sets the value of the distanzZu property .
8347	Gets the value of the value property .
8348	Gets the value of the property distanzenSport .
8349	Checks if the given exception is compatible with the given throws clause .
8350	Sets the bindings .
8351	Binds the given namespace uri to the given prefix .
8352	Removes the binding for the given prefix .
8353	Checks if the given content has a opening tag .
8354	Consume comment tokens .
8355	Consumes the next token from the given line .
8356	Returns the index of the first token in the given line .
8357	Initialize logging .
8358	Start namespace mapping .
8359	Adds an iterator to the composite iterator .
8360	Adds an option to the command line .
8361	Adds a string option to the command line .
8362	Adds an integer option to the command line .
8363	Adds a long option to the command line .
8364	Adds a double option to the command line .
8365	Adds a boolean option to the command line .
8366	Parse the command line arguments .
8367	Creates a new instance of the given class .
8368	This method is called after an access has been made .
8369	Sets the target object .
8370	Sets the target class and target method .
8371	Finds the best matching method .
8372	Convert an unsigned integer to a string .
8373	Serialize an object to a byte array .
8374	Deserialize an object from a byte array .
8375	Returns the first child element with the given name .
8376	Get the value of a child element by its name .
8377	Returns all child elements of the given element .
8378	Returns true if the node name matches the desired name .
8379	Checks if the node name matches the desired names .
8380	Set the length of a String .
8381	Register a release listener for a given handle .
8382	Adds an entry to the list of tracked entries .
8383	Keep the reference monitor thread alive .
8384	Calculates the mobile city .
8385	Start prefix mapping .
8386	End prefix mapping .
8387	Adds a callback to the future .
8388	Parse the jar into a tree .
8389	Returns the text color for the given item .
8390	Sets the values of the item .
8391	Returns the color of the item at the given position .
8392	Sets the size of the text .
8393	Returns the x - coordinate of the item in the bounds .
8394	Read the intro . txt file .
8395	Get the list of keywords available in the test library .
8396	Get the arguments for the given keyword .
8397	Returns the documentation for the specified keyword .
8398	Main method to start the remote server .
8399	Stop the remote server .
8400	Starts the remote server .
8401	Convert properties from a file to a JSON string .
8402	Convert properties from a file to a JSON string .
8403	Converts an input stream to a JSON string .
8404	Converts a properties object to a JSON string .
8405	Converts a map of properties to a JSON string .
8406	Convert a map of properties to a JSON string .
8407	Convert a Map of properties to a String .
8408	Converts a properties object to a JSON string .
8409	Returns the radius of the shadow .
8410	Creates a builder for OCSP Fetchers .
8411	Finds an intermediate certificate .
8412	Copy markdown files from input directory to output directory .
8413	Preprocess markdown files .
8414	Substitutes the variables in the template .
8415	Get the title from the raw list .
8416	Adds the title to the HTML file .
8417	Replaces variables in the initial content .
8418	Update relative paths in html includes .
8419	Copies files from the given directory to the given directory .
8420	Check the path .
8421	Wrap the slider content .
8422	Fade up the view .
8423	Fade down the view .
8424	Calculates the percentage of the current width .
8425	Sets the width of the view .
8426	Creates an intent to launch an activity .
8427	Launch the activity .
8428	Get Todos List Todos
8429	Get FactSheets List FactSheets
8430	Download file from response .
8431	Build http client .
8432	Create access control entity Create access control entity
8433	Update DataModel Update DataModel
8434	Create full export
8435	Get Export List
8436	Set the token provider host .
8437	Sets the client credentials .
8438	processGraphQLMultipart . processGraphQLMultipart . processGraphQLMultipart . processGraphQLMultipart
8439	Get Bookmarks List Bookmarks
8440	Adds the given permissions to the given graph .
8441	Writes the given permissions to the graph .
8442	Sets the rulesets for this dataset graph .
8443	Close the connection .
8444	Execute a select query .
8445	Creates a dataset graph .
8446	Limit the number of threads per process .
8447	Resize the image .
8448	Rotate the specified number of degrees .
8449	Sets the gravity of the operation .
8450	Strip profiles from the command line .
8451	Set the font to use .
8452	Add a source image to the image manager .
8453	Adds an image to the command .
8454	Parse command line arguments .
8455	Prints the usage of the given target object .
8456	Extract the time unit from a string .
8457	Parse the arguments from the target object .
8458	Execute a slide on the given URL .
8459	Executes a slide on the specified file .
8460	Interprets a PPTX file .
8461	Sorts a list of rectangles by their size .
8462	Renders the template .
8463	Gets the slide . xml . rels file .
8464	Checks if the mouse event is inside the screen region .
8465	Finds elements that overlap vertically with the specified element .
8466	Execute outbound operation .
8467	Executes the outbound operation .
8468	Returns the file with the given name .
8469	Creates a temporary directory if it doesn t exist .
8470	Creates a new log value with the given keys and values .
8471	Log a message at the TRACE level .
8472	Log a message at the TRACE level .
8473	Logs a message at the DEBUG level .
8474	Logs a message at the DEBUG level .
8475	Logs a message at the INFO level .
8476	Logs a message at the INFO level .
8477	Logs a message at the INFO level .
8478	Logs a message at the WARN level .
8479	Logs a message at the WARN level .
8480	Logs a message at the ERROR level .
8481	Logs a message at the ERROR level .
8482	Add to context line and method .
8483	Start steno wrapper .
8484	Write key - value pairs .
8485	Serialize a ThrowableProxy to JSON .
8486	Returns the log value .
8487	Get the caller data .
8488	Encode the given value to the given encoder .
8489	Create a new database .
8490	Removes the mapping for the given array position .
8491	Parse save attribute .
8492	Save data to context .
8493	Refresh sheet row from context .
8494	Parse save attribute string .
8495	Get the save attribute list from a given row .
8496	Get the saved attribute from a list of attributes .
8497	Sets the value of the saveObjects attribute in the hidden column .
8498	Set save attributes for all rows in a sheet .
8499	Set save attributes for a given row .
8500	Prepare the context and attributes for a given cell .
8501	Format a number .
8502	Put shift attributes .
8503	Set the workbook .
8504	Get the XSSF evaluation workbook .
8505	Returns the formula evaluator .
8506	Recalculates the max column counts .
8507	Load a web sheet from an input stream .
8508	Load a web sheet .
8509	Load work sheet by tab name .
8510	Export the content to a file .
8511	Do the actual save .
8512	This method is called when the form is submitted .
8513	Populate the component .
8514	Get the current sheet configuration .
8515	Deserializes this object from a stream .
8516	Get the locale for the given component .
8517	Returns the picture of the current request .
8518	Returns the cell helper .
8519	Returns the PicturesHelper .
8520	Returns the validation handler .
8521	Returns the chart helper .
8522	Convert shared formulas .
8523	Convert a ptg to a ptg array .
8524	Convert a ptg for a watch list .
8525	Creates a new Ptg array for a single ptg .
8526	Get the rows list for the current row .
8527	Assembles rows list from rows mapping .
8528	Fix up ref - relative row one - to - one .
8529	Build dynamic row for RefPtgBase .
8530	Build dynamic row for area ptg base .
8531	Get the bgcolor .
8532	Get the ge color from the shape properties .
8533	Finds the automatic fill color .
8534	Get XColor from CTSchemeColor .
8535	Get the XColor from a CTSRgbColor
8536	Get the XColor with automatic fill .
8537	Converts an XSSFColor to a Clr Color .
8538	Get the triplet from an XSSFColor .
8539	Get the background color from a cell .
8540	Finds the component name from the class name .
8541	Populate the attributes of the given component .
8542	matchParaMeterOfMethod .
8543	Sets a property on an object .
8544	Gets a property value from an object .
8545	Setup control attributes .
8546	Find the validate attributes for a given cell .
8547	setupFacesCellPictureCharts setupFacesCellCharts
8548	Setup faces cell charts .
8549	Setup the faces cell picture .
8550	Initialize the charts map .
8551	Get the pie title .
8552	Set the style of a series .
8553	Create a pie 3D chart .
8554	Setup the style for the bar .
8555	Initialize the XSSF charts map .
8556	Get the chart id from the parent .
8557	Initialize the anchor map .
8558	Generate a single XSSF chart .
8559	Transform a collection expression to a collection object .
8560	Get the full name from a row .
8561	Rebuilds the upper level formula .
8562	Setup the upper level formula .
8563	Build the cell formula for shifted rows .
8564	Gathers rows mapping by full name .
8565	Change index number in shift map .
8566	Change upper level final length .
8567	Change index number in hidden column .
8568	Sets the full name in the hidden column .
8569	Get the original row number in the hidden column .
8570	Sets the original row number in the hidden column .
8571	Find parent rows mapping from shift map .
8572	Find child rows mapping from shift map .
8573	Finds the item in a collection .
8574	Build the current range .
8575	Checks if the given row index is static .
8576	Checks if the given row is a static row reference .
8577	Replace expression with cell value .
8578	Returns the index of the first merged region in the given sheet .
8579	Returns the list of skipped cells in the first region of the given sheet .
8580	Adds the skip cell list to the list of cells in the given region .
8581	Build a sheet comment from a list of TieCommandAliases .
8582	Build cell comment from alias list .
8583	Build the configuration map .
8584	Get the sheet configuration .
8585	Creates a form command from a sheet configuration .
8586	Verify the last cell in a sheet .
8587	Build a sheet .
8588	Check and repair the last row .
8589	Build the command list from a sheet comment .
8590	Sets the parent for a child command .
8591	Checks if there is at least one command in the list .
8592	Match command to sheet config form .
8593	Copy template for tie commands .
8594	Build the command list .
8595	Process a method line .
8596	Process the command line .
8597	Move a comment to a map .
8598	Creates a config command .
8599	Build attribute map from command line .
8600	Get the sheet configuration from the form command .
8601	Set the footer of the sheet configuration .
8602	Set the body of the sheet configuration
8603	Sets the header of the sheet configuration .
8604	Delete a row .
8605	Remove ranges from shift map .
8606	Returns a list of all the full names from the given sheet .
8607	Get each command from parts name .
8608	Inserts an empty object in the given context .
8609	Delete the object from the data context .
8610	Prepare collection data context .
8611	Index all commands in the given config range .
8612	Checks if a row is allowed to be added to a sheet .
8613	Insert each template in the source config range .
8614	Evaluate normal cells .
8615	Evaluate the user formula .
8616	Checks if the given string is a user formula .
8617	Creates a comment for a cell .
8618	Evaluate a boolean expression .
8619	Remove all rows in a sheet .
8620	Removes a single row from a sheet .
8621	Removes the cached cell for the given row .
8622	Removes the rows in the body .
8623	Loads a picture from the current page .
8624	Loads the chart from the current page .
8625	Assembles the new value .
8626	Get cell value with format .
8627	Get cell value without format .
8628	Get the string value of a cell .
8629	Get cell string value with number type .
8630	Set the value of a cell .
8631	Sets the string value of a cell .
8632	Set cell value boolean .
8633	Set a cell value as a date .
8634	Sets the numeric value of a cell .
8635	Copies rows from the source sheet to the destination sheet .
8636	Copies a single row from one sheet to another sheet .
8637	Copy a cell from one row to another .
8638	Copy a cell value to a new cell .
8639	Copy cell style from source cell to new cell .
8640	Clone a comment from another cell .
8641	Creates a comment anchor .
8642	Creates or inserts a comment in a cell .
8643	Match comment settings .
8644	Get the VML drawing from a cell .
8645	Get the CtShape from VML .
8646	Get the cell style from the source cell .
8647	Convert a cell to a faces cell .
8648	Get the row and column from the component attributes .
8649	Gets the initial rows from the given sheet configuration .
8650	Get the FacesRow from a body row .
8651	Get a cell from a body row .
8652	Get the Poi cell from a sheet .
8653	Get the key from a POI cell .
8654	Get or add a TieCell in the map if it doesn t exist .
8655	Returns the current data context name .
8656	Evaluate a JEXL expression .
8657	Evaluate the JEXL expression .
8658	Writes the row number to the stream .
8659	Removes a row from the table .
8660	Merge a map of rows into this map .
8661	Recover all rows in the given sheet .
8662	Returns the type of the given CTChart .
8663	Converts a style string to a stroke object .
8664	Initialize the chart data from an XSSF chart .
8665	Set up chart data .
8666	Initializes the anchor map for each sheet in the workbook .
8667	Initialize anchortMap and positionMap for a given sheet .
8668	Get the chart id associated with an anchor .
8669	Get the chart id from child node attributes .
8670	Build each object in the given collection .
8671	Save data in context .
8672	Recalculates the formula .
8673	Get the cell with the specified row and column from the specified tab .
8674	Gets the cell with the row and column from the current page .
8675	Restore data context .
8676	Get the last collect .
8677	Check if we need to restore the data context .
8678	Start restore data context .
8679	Shift row ref .
8680	Set the first row ref .
8681	Set the last row plus reference .
8682	Builds the cells for the given row .
8683	Build a single cell .
8684	Deserializes the data context from a stream .
8685	Build the category list from a CTAxDataSource
8686	Build the series list .
8687	Build chart series in list .
8688	Get the color list from a list of dpts and a list of cells .
8689	Get the dpt from the list with the given index .
8690	Set the command index map .
8691	Get the picture map from a workbook .
8692	Get the XSSFPictrues map .
8693	Index picture in map .
8694	Generate the style of a picture .
8695	Generate chart style .
8696	Get the size of an anchor .
8697	Returns the regular expression pattern .
8698	Get the chart picture
8699	Recover the cell from the given sheet .
8700	Gets the row style .
8701	Get the font style of a cell .
8702	Get the cell font color .
8703	Returns the decoration of a cell font .
8704	Get the cell style .
8705	Get the column style .
8706	Get the alignment of a cell .
8707	Get the vertical alignment from a cell style .
8708	Calculates the total height of a sheet .
8709	Setup the cell style .
8710	Get the input type from the cell type .
8711	Returns the set of resource paths for the given path .
8712	Returns an input stream to the specified resource .
8713	Removes the prefix path from the given resource .
8714	Evaluate the input type .
8715	Finds a bean by its name .
8716	Join an array of shorts with a separator .
8717	Round the given value to the specified number of places .
8718	Returns the type of the current tab .
8719	Returns the style of the active tab .
8720	Returns the default date pattern .
8721	Get the decimal separator by default locale .
8722	Get the thousand separator by default locale .
8723	Sets the tie command alias list .
8724	Build the watch list for the given sheet .
8725	Build the watch list for a given cell .
8726	Adds a new row to the watch list .
8727	Checks if the given string is a command string .
8728	Parse widget attributes .
8729	Gets the attribute key in map by cell .
8730	Parse validate attributes .
8731	Find the start position of a pair bracket .
8732	Parse command attributes .
8733	Parse input attributes .
8734	Parse validation attributes .
8735	Split by eual sign .
8736	Parse special attributes .
8737	Process calendar attributes .
8738	Process select item attributes .
8739	Gather special attributes .
8740	Parse a comment to a map .
8741	Find the first non - cell name position .
8742	Removes characters from a string .
8743	Convert a number to an Excel column name .
8744	Convert a column name to an integer .
8745	Get cell by reference .
8746	Convert the height units to pixels .
8747	Checks if the given string is a valid date .
8748	Parse a date .
8749	Checks if the given string is numeric .
8750	Returns true if the given character should continue .
8751	Sets a property on an object .
8752	Compares two cells .
8753	Checks if the child range is inside the parent range .
8754	Removes all hidden columns from a sheet .
8755	Delete the hidden columns in the given row .
8756	Delete a cell from a row .
8757	Process event .
8758	Refresh after status changed .
8759	Validate with row and column in current page .
8760	Validate by tie web sheet validation bean .
8761	Check the error message from the context object .
8762	Validate all rules for a single cell .
8763	Do validation .
8764	Validates a cell .
8765	Validate the current page .
8766	Validate a row in the current page .
8767	Validate a row .
8768	Refresh the cached cells in the current page .
8769	Refresh the cached cells in a row .
8770	Sets the submit mode in the view .
8771	Checks if the current page is valid and if so loads the first invalid page .
8772	Clear the contents of this cell .
8773	Load the header rows .
8774	Load the header row without the configuration tab .
8775	Fill the given list of header cells to the max columns .
8776	Get the header column style .
8777	Gets the width style .
8778	Load the header row with the configuration tab .
8779	Gets the column width style .
8780	Clear the workbook .
8781	Initialize the tabs .
8782	Loads the data from the parent .
8783	Refresh the data .
8784	Refresh the data for the given row .
8785	Refresh the data for a cell .
8786	Finds the index of the tab with the given name .
8787	Load a work sheet .
8788	Prepare work shee .
8789	Sets the first row of the data table page .
8790	save objs in viewMap
8791	Setup the row info .
8792	Loads the body rows .
8793	Assembles a faces body row .
8794	Refresh the cached cell .
8795	Process refresh cell .
8796	Creates dynamic columns .
8797	Adds a row to the repeat table .
8798	Refresh the body rows in the given range .
8799	Set unsaved status .
8800	Gets the unsaved status .
8801	Returns the most specific constructor of the given type .
8802	Writes an input stream to an output stream .
8803	Write a long to the given writer .
8804	Write a line to the given writer .
8805	Set the traffic stats tag .
8806	Adds a bitmap to the result .
8807	Adds a file descriptor to the result .
8808	Removes the parameter with the given name .
8809	Adds a header to the request .
8810	Clear the contents of this request .
8811	Call the play method .
8812	Call this method to stop the player .
8813	Bind to streaming service .
8814	Unbind the radio .
8815	Drop the listener .
8816	Stores the image to disk .
8817	Convert an InputStream to a String .
8818	Convert an InputStream to a String using UTF - 8 .
8819	Send the content to the given output stream .
8820	Returns the number of bytes available .
8821	Closes the stream .
8822	Reads the next byte from the stream .
8823	Resets the stream .
8824	Send the start of the message .
8825	Send the content disposition header .
8826	Send the content - type header .
8827	Send the transfer encoding header .
8828	Send the end of the header .
8829	Send the end of the message .
8830	Sends the given parts to the given stream .
8831	Returns the total length of the parts in bytes .
8832	Checks if the URI is a redirect .
8833	Sends a 304 Not Modified response .
8834	Sets the date header .
8835	Set the date and cache headers .
8836	Sets the content type header .
8837	Close the channel if it is connected .
8838	Send the file disposition header .
8839	Send data to the given output stream .
8840	Installs the cache .
8841	Ensures that the working directory exists and is a directory .
8842	Get the response from disk cache .
8843	Creates an input stream for the body of the entry .
8844	Resets the bitmap and canvas .
8845	Returns the SSL context for the given keystore .
8846	Validate the keystore .
8847	Replace the scale type .
8848	Stop listening for location changes .
8849	Get the pending intent for the given request builder .
8850	Disconnects the connection .
8851	Bind to this service .
8852	Unbind from application service .
8853	Notify about view changes .
8854	Called when the channel is opened .
8855	On accept data .
8856	Stop loading and release the received response .
8857	Waits for the loader to finish .
8858	Sets the text of a TextView or hides it if the text is empty .
8859	Hides the soft input from the given text view .
8860	Shows the given text view as a soft input .
8861	Toggle the textView s soft input .
8862	Returns the width of the pixels in pixels .
8863	This method is called when an exception occurs .
8864	Clears the cache for the given url .
8865	Populate the image for the given view .
8866	Cancels the image loading of the given view .
8867	Create image consumer .
8868	Set the result image .
8869	Sets the loading image .
8870	Start a new image loader task .
8871	Adds the image to the cache .
8872	Release the given buffer .
8873	On connection prepared .
8874	Adds a parameter to the request .
8875	Try to connect with a workaround .
8876	Returns the MD5 hash of the given text .
8877	Returns the String representation of the given integer .
8878	Returns the String identifying the CUBLAS status code .
8879	Check CUBLAS status .
8880	Check the status of the BLAS operation .
8881	Add a lexeme .
8882	Add a ending .
8883	Returns the estimate of the given wordform .
8884	Prints the long description of this token .
8885	Verify and set kamols attribute .
8886	Convert an AttributeValues to a KAMOLS markup .
8887	Verify and set an AVS attribute .
8888	Remove kamols markup formatting .
8889	Get the list of metrics for this application .
8890	Returns the query string for the request .
8891	Process the given JSON node into a list of MetricData objects .
8892	Parse a JSON string into a list of AppInfo objects .
8893	Returns the connection configuration .
8894	Perform the data request for the given apps and metrics .
8895	Returns a GenericodeReader for GC04 Code List documents .
8896	Returns a GenericodeReader for GC04 Code List Set documents .
8897	Returns a GenericodeReader for GC04 column set documents .
8898	Returns a GenericodeReader for GC10 Code List documents .
8899	Returns a GenericodeReader for GC10 Code List Set documents .
8900	Create a new GC10 column set document reader .
8901	Get the ID of the passed column element .
8902	Get the value of the specified column .
8903	Get the column with the specified ID .
8904	Get all key IDs from the given column set .
8905	Get the key of the passed ID .
8906	Check if the passed column is a key column .
8907	Create a new column .
8908	Create a new key .
8909	Set the number of lines to skip .
8910	Add a column to the read options .
8911	Create a writer for GC04 code list .
8912	Create a GenericodeWriter for GC04 Code List Set .
8913	Create a writer for GC04 column set .
8914	Create a writer for GC10 code list .
8915	Create a GenericodeWriter for GC10 Code List Set .
8916	Create a writer for GC10 column set .
8917	Creates a validator for GC04 code list documents .
8918	Validator for GC04 Code List Set .
8919	Creates a validator for GC04 column set documents .
8920	Creates a validator for the GC10 code list .
8921	Creates a validator for the GC10 code list set .
8922	Create a validator for GC10 column set documents .
8923	Send logs to server .
8924	Set the context .
8925	Get the current log level .
8926	Returns true if capture is enabled .
8927	Set max log store size .
8928	Prepend the metadata to the message .
8929	Appends the stack trace metadata to a JSON object .
8930	Creates a JSON object from the given parameters .
8931	Logs the current location .
8932	Sets the user identity .
8933	Get a byte array from a file .
8934	Starts the location updates .
8935	Size the given region .
8936	Size the partitioned region .
8937	Dump the size of a replicated or local region .
8938	Reads a snapshot record from the stream .
8939	Prints the time stamps to the given stream .
8940	Returns the time values since the given index .
8941	Convert a GFS file to a Chart
8942	Returns the pool for the given server name .
8943	Get the pool for the locator .
8944	Checks if a region exists on the server .
8945	Get the member with the given name .
8946	Returns the list of all hosts in the given JMX server .
8947	Lookup the network host .
8948	Check if the data is an error and send an exception .
8949	Executes the given function and returns the results of the execution .
8950	Flatten a collection of objects into a collection of objects
8951	Execute the given query and return the results .
8952	Creates a listener bridge to be used after a put operation .
8953	Creates a new listener bridge that will be notified after a delete event is received .
8954	Handle the exception .
8955	Returns an array of onRegionFilterKeyFacts .
8956	Execute the function .
8957	Returns a list of all the hosts in the given JMX server .
8958	Execute on a region .
8959	Get the app name from a list of resources .
8960	Construct the security properties .
8961	Get the region with the given name .
8962	Get the region with the given name .
8963	Construct comparison .
8964	Returns true if the next index must be inserted .
8965	Close the stream .
8966	Dump all the GFS stats files to a CSV file .
8967	The main method of the GfStatsReader .
8968	Reconnect to the JMX server .
8969	Stop all members on the given host
8970	Shuts down a member .
8971	Shuts down the distributed system .
8972	Shuts down all members in the given redundancy zone .
8973	Stores the pagination map .
8974	Read results by page .
8975	Import a region .
8976	Check if remoteLocators and locators match .
8977	Execute the function .
8978	Build the check sum map for the given region .
8979	Returns the value of the specified column .
8980	Checks if the given type is an integer type or not .
8981	Serialize an object to a byte array .
8982	Deserialize a byte array into an object .
8983	Creates an instance of the given class .
8984	Check for table id .
8985	Check for fields .
8986	Checks if the element is a supertype of the given type .
8987	Returns the schema of the table .
8988	Brew Java .
8989	Emit the getId method .
8990	Returns an observable of the results of the query .
8991	Checks that the given column name exists in the table .
8992	Returns the value of the given string or the given default string if the string is empty .
8993	Capitalizes the first character of a string .
8994	Returns true if the given typeMirror is a real type or not .
8995	Returns a builder that sorts the results in descending order .
8996	Read the temperature from the device file .
8997	Returns the supported cursor method for the given type .
8998	Print a message at the NOTE level .
8999	Print error message .
9000	Get the list of icon fonts .
9001	Returns a list of all available icons .
9002	Creates the editor layout .
9003	Gets the background decoration .
9004	Returns the power of the given exponent .
9005	Set the array of values .
9006	Returns the integer power of the given exponent .
9007	Returns the root of an integer .
9008	Expensive taylor .
9009	Returns the logarithm of a number .
9010	Lin Newton algorithm .
9011	Arctan taylor .
9012	Arctan taylor .
9013	Returns the sqrt of the given number .
9014	Print the pi .
9015	Get the timestamp string .
9016	Set the minimum and maximum limits .
9017	Add a new value to the counter .
9018	Print the bar .
9019	Adds another complex number to this complex number .
9020	Subtracts this complex number from another .
9021	Multiply this complex number by another complex number .
9022	Divide a complex number by another .
9023	Set the values of this matrix .
9024	Get a row vector .
9025	Get a column vector .
9026	Set the array of values .
9027	Returns a transpose of this matrix .
9028	Add this matrix to another matrix .
9029	Subtract a matrix from this matrix .
9030	Multiply this matrix by k .
9031	Multiply this matrix by another matrix .
9032	Print the contents of this matrix to the specified output stream .
9033	Sets the image resource .
9034	Validate the coefficients .
9035	Compute the next position .
9036	Clear the state of this SLD .
9037	Convert a StyledLayerDescriptorInfo to an XML string .
9038	Converts a raw SLD into a StyledLayerDescriptorInfo .
9039	Validate the given StyledLayerDescriptorInfo .
9040	Validate the given SLD .
9041	Get the area of the image .
9042	Set the values of this matrix .
9043	Set the array of values .
9044	Returns the inverse of this matrix .
9045	Returns the determinant of this matrix .
9046	Returns the norm of this matrix .
9047	Solves a matrix .
9048	Print the decomposed matrix .
9049	Perform forward elimination .
9050	Forward substitution .
9051	Back substitution .
9052	Improves the difference between two vectors .
9053	Convert a square matrix to a square matrix .
9054	Returns the next von neumann .
9055	Do the iteration procedure .
9056	Compute the next position .
9057	Check if the current position has changed .
9058	Compute the next position .
9059	Check the given interval .
9060	Adds the given value to the current value .
9061	Multiply two integers .
9062	Returns the power of the given exponent .
9063	Do the iteration procedure .
9064	Get the SLD manager .
9065	Convert a long to a char array .
9066	Decomposes the sign exponent and fraction bits .
9067	Print this value to the specified output stream .
9068	Validates the biased exponent value .
9069	Validate the unbiased exponent value .
9070	Validates the biased exponent value .
9071	Validate the unbiased exponent value .
9072	Create SldGwtServiceAsync .
9073	Returns the next central value .
9074	Returns the next polar .
9075	Returns the next ratio .
9076	Calculates the sieve of a given number .
9077	Returns the number of prime factors of the given number .
9078	Do the iteration procedure .
9079	Compute the next position .
9080	Check if the current position has changed .
9081	Set the JavaFX application .
9082	Sets the configuration file .
9083	Sets the default configuration .
9084	Initializes the FXML loader .
9085	Add a location to the reverse geocode request .
9086	Extract host and port pair from service instance .
9087	Returns the appropriate attribute definition for the given uuid .
9088	Evaluate an attribute filter expression .
9089	Sanitize a tag .
9090	Sets the address of the geocode request .
9091	Add a list of components to the query .
9092	Query for service names .
9093	Query for service instances .
9094	Get a list of all collaborators who are logged in .
9095	Get the meta data for decimal as .
9096	Change the password for the logged - in user .
9097	Get a list of all users .
9098	Get the gravatar for an email address .
9099	Get the gravatar for a user
9100	Populate from elastic search json .
9101	Returns the ElasticSearch field type .
9102	Creates a new flow step .
9103	Update a flow step .
9104	Get flow step by id and type
9105	Get flow step by step .
9106	Get all steps by flow .
9107	Delete a flow step .
9108	Force delete a flow step .
9109	Populate table fields .
9110	Close the ABaseES Connection
9111	Handles a message received from the server .
9112	Called when the connection has been closed .
9113	Get the list of ECHO messages from the return value .
9114	Get a list of all personal inventory items .
9115	Create a new table record .
9116	Delete a form container .
9117	Get the form flow historic data .
9118	Get the form and field historic data for a given form .
9119	Get the most recent form and field historic data .
9120	Lock the form container .
9121	Unlocks a form container .
9122	Unlocks a form container .
9123	Maps a form container to a Form object .
9124	Converts a role listing parameter into a list of roles .
9125	Create a new form definition .
9126	Update a form definition .
9127	Get a form definition by id .
9128	Get a form definition by name .
9129	Get all by logged - in user .
9130	Delete a form definition .
9131	Get storage key from parameters .
9132	Initializes the memcached client .
9133	Shuts down the memcached client .
9134	Converts a string to a long .
9135	Convert a document to a PDF .
9136	Gets the field values for a form from the local cache .
9137	Create a new flow step entry rule .
9138	Create a new exit flow step rule .
9139	Create a new flow step view rule .
9140	Update the flow step entry rule .
9141	Update the flow step exit rule .
9142	Update the flow step view rule .
9143	Move a flow step rule up .
9144	Move the flow step rule down .
9145	Delete a flow step entry rule .
9146	Delete a flow step exit rule .
9147	Delete a flow step view rule .
9148	Initializes the session .
9149	Get a list of all user queries .
9150	Get all roles .
9151	Get the service ticket as hex upper case .
9152	Create a new text field .
9153	Creates a new form field with text barcode .
9154	Create a new decimal spinner .
9155	Create a new decimal slider .
9156	Create a table field .
9157	Updates the specified field with the specified mask value .
9158	Update a field s text barcode .
9159	Update a field s decimal spinner .
9160	Update a field s decimal slider .
9161	Update a table field .
9162	Get a field by name .
9163	Get fields by form name and logged - in user .
9164	Get fields by form type id and logged - in user .
9165	Delete a form field .
9166	Force delete a field .
9167	Get the meta data for a table field .
9168	Update the value of a user field .
9169	Creates or creates an index if it does not already exist .
9170	Create a new flow .
9171	Update a flow .
9172	Get a flow by its id .
9173	Get a flow by its name .
9174	Delete a flow .
9175	Force delete a flow .
9176	Update the value of a global field .
9177	Get all global field values .
9178	Get the form definition id and title .
9179	Decrypt init packet .
9180	Close the ABaseClientWebSocket connection and clean it up .
9181	Initializes a new request .
9182	Get exception message verbose .
9183	Create an admin user .
9184	Get an access token .
9185	Get user profile information .
9186	Execute a JSON request .
9187	Execute a form request .
9188	Get response handler .
9189	Checks if the connection is valid .
9190	Get the http client .
9191	Gets the path to the Fluid specific trust store .
9192	Closes the connection .
9193	Get a list of FluidItems for a given JobView .
9194	Send a form to a flow .
9195	Called when a connection has been closed .
9196	Called when a message has been received .
9197	Send a message to the server .
9198	Sends a message to the remote endpoint .
9199	Closes the user session .
9200	Execute a native SQL query asynchronously .
9201	Request a license .
9202	Apply a license to the server .
9203	Creates a new field of type PLAIN .
9204	Creates a new field of type ParagraphText .
9205	Creates a new ParagraphText field .
9206	Create a multi - choice select many .
9207	Creates a new date - time field .
9208	Update a route field with plain text .
9209	Update the ParagraphText of a route field .
9210	Update the date and time of a route field .
9211	Update a field with Decimal . PLAIN .
9212	Update the value of a route field .
9213	Method createFieldValue .
9214	Get configuration by key .
9215	Returns a list of all the configured configurations .
9216	Create an attachment .
9217	Get an attachment by id .
9218	Delete an attachment .
9219	Force delete an attachment .
9220	Parse a JAR file .
9221	Set the class loader .
9222	Rule 2 .
9223	Rule 3 .
9224	Rule 3 .
9225	Get the schema node .
9226	Rule 7 .
9227	Rule 3 .
9228	Converts the given value to the appropriate type .
9229	Creates an instance of the Cli interface .
9230	Creates a new Cli instance using the given options .
9231	Parse command line arguments .
9232	Parse command line arguments using instance .
9233	Returns a new URL builder for the given path .
9234	Remove a footer view .
9235	Returns the value at the given point .
9236	Returns the gradient of a 3D noise .
9237	Returns the 3 - D noise of a 3 - D vector .
9238	Returns a 3 - D value noise .
9239	Cubic Interp function .
9240	S curve 5 .
9241	Sets the lower and upper bounds .
9242	Process the event .
9243	Process the event .
9244	Gets the account id of the event .
9245	Apply rule entity to violation entity .
9246	Get the event serializer .
9247	Creates a file with the given name .
9248	Creates a directory .
9249	Restore the system properties .
9250	Creates a new implementation of this map .
9251	Adds an object to the collection .
9252	Sets the value of a property .
9253	Get an array property .
9254	Returns the next state for the given action .
9255	Removes all items from the GC queue .
9256	Returns the value of the given type .
9257	Gets the parameterized type .
9258	Returns the type variable for the given type .
9259	Print the stack trace of this exception .
9260	Print the stack trace of this exception .
9261	Replace a remote object with a stub .
9262	Run the task .
9263	Sets the task .
9264	Returns true if the task is accepted .
9265	Called when a task is rejected .
9266	Returns true if the task has started .
9267	Notify the task that the task has completed .
9268	Stop the task .
9269	Returns the current job .
9270	Put a job into the queue .
9271	Returns the block mode for the given name .
9272	Returns the mode to which the object should be read .
9273	Setup readers .
9274	Adds a reader to the catalog .
9275	Copy the reader map to the new catalog .
9276	Creates a new catalog .
9277	Load system catalogs .
9278	Parse a catalog from the given URL .
9279	Parse the pending catalog files .
9280	Parse the catalog file .
9281	This method is called when an unknown entry is encountered in the catalog .
9282	Parse all the catalog entries .
9283	Resolve the doctype for the given entity name public id and systemId .
9284	Resolve the document catalog .
9285	Resolve a system identifier .
9286	Resolve the local URI .
9287	Resolve subordinate catalogs .
9288	Make the given system identifier absolute .
9289	Normalize a URI .
9290	Encode a byte .
9291	Adds the given entry to the delegate list .
9292	Creates a SoftValueRef for the given key and value .
9293	Fires a throwable event to all registered listeners .
9294	Adds a throwable to the list of registered listeners .
9295	Creates an implementation of the delegate list .
9296	Compares this task with another task .
9297	Returns the value of this property as an InetAddress .
9298	Returns the object at the given index .
9299	Set an object at the specified index .
9300	Maintains the memory used by this VM .
9301	Adds a new entry type .
9302	Returns the entry type for the given entry .
9303	Returns the number of arguments for the given entry type .
9304	Returns the entry argument with the given number .
9305	Sets the class loader for the given thread .
9306	Swaps two entries in the queue .
9307	Removes the node at the given index .
9308	Clean up the timeout object .
9309	Loads the class with the given name .
9310	Load all available protocols .
9311	Creates a URLStreamHandler for the given protocol .
9312	Checks the handler packages .
9313	Returns the value of this property as a class .
9314	Creates a new implementation of this set .
9315	Make a synchronized counter .
9316	Make a directional counter .
9317	Checks if the current thread is in an extension namespace .
9318	Notify the listener that a notification has been received .
9319	Rebinds the given name to the target object .
9320	Get the object instance .
9321	Substitutes a string from a map .
9322	Split a string into an array of strings .
9323	Joins an array of bytes into a single string .
9324	Appends the default string representation of the given object .
9325	Returns the value of the response mode .
9326	Creates the map .
9327	Returns the value associated with the given key or null if the key does not exist .
9328	Returns the value associated with the given key .
9329	Remove the entry with the given key .
9330	Flushes all entries to the cache .
9331	Returns a list of all valid keys .
9332	Sets the resolution .
9333	Returns the entry associated with the given key .
9334	Returns an iterator over all children of an element with the given tag name .
9335	Returns the first child with the given tag name .
9336	Returns the first child of the given element with the given tag name .
9337	Get the content of an element .
9338	Returns the content of the first child with the given tag name .
9339	Returns the content of the optional child element with the given tag name .
9340	Sets the maximum queue size .
9341	Sets the blocking mode .
9342	Sets the blocking mode .
9343	Execute the task .
9344	Resolve an external system .
9345	Resolve an external public or external system .
9346	Resolve an external system .
9347	Resolve an external public .
9348	Query a catalog .
9349	Append a vector to a given vector .
9350	Resolve all system reverse catalogs .
9351	Resolve a system identifier in reverse order .
9352	Resolve all subordinate catalogs for the given system id .
9353	Resolve all local system definitions .
9354	Resolve all subordinate catalogs .
9355	Read a catalog from a file .
9356	Read a catalog from an input stream .
9357	Connect to the file .
9358	Returns an OutputStream for writing to the file .
9359	CAS the next node .
9360	Remove a node from the list .
9361	Returns the valid value .
9362	Creates a new snapshot entry .
9363	CASs the right index .
9364	Creates a logger for the given class .
9365	Append a list of JBossObjects to a StringBuilder .
9366	Returns the short name of the class .
9367	Returns the string representation of this object .
9368	Returns an iterator of property names .
9369	Returns the property group for the given basename .
9370	Returns the compatible constructor for the given type .
9371	Creates a copy of the given object .
9372	Dereference an object and cast it to the expected type .
9373	Initializes the context .
9374	Updates the jndi cache .
9375	Returns the set of keys .
9376	Returns a set of all entries in this context .
9377	Removes a property listener .
9378	Fires a property added event to all registered listeners .
9379	Fires a property removed event .
9380	Fires a property changed event to all registered listeners .
9381	Fires a property changed event .
9382	Make a prefixed property name .
9383	Load properties from a PropertyReader .
9384	Loads a property from a class .
9385	Returns the property group with the given basename and index .
9386	Returns whether the entity has been resolved .
9387	Resolve the system id .
9388	Resolve a system id as a URL .
9389	Resolve the classpath name .
9390	Sets the value of this element to the given text .
9391	Normalize a public id .
9392	Encodes the given publicId to a URI .
9393	Decode an urn .
9394	Replace oldStr with newStr
9395	Start the timer .
9396	Stop the timer .
9397	Make a synchronized StopWatch .
9398	Compares this object with another object .
9399	Generates a hash code from a byte array .
9400	Generates a hash code for an array of objects .
9401	Creates the map and list .
9402	Sets the value of the field .
9403	Returns the next token .
9404	Initializes the DateEditor .
9405	Adds a vertex to the graph .
9406	Sets the root vertex .
9407	Removes a vertex from the graph .
9408	Performs a depth - first search on a given vertex .
9409	Walks the spanning tree starting from the given vertex .
9410	Finds a vertex by its data .
9411	Finds all cycles in the graph .
9412	Normalize the given string .
9413	Parse an XML string .
9414	Parse an XML document and return the root element .
9415	Parse the given input source and return the root element .
9416	Creates an element with the given name .
9417	Resolve a qualified name .
9418	Copy attributes from srcElement to destElement
9419	Checks if the given node has any child elements .
9420	Returns an iterator over all child elements of the given node .
9421	Returns the text content of the given node .
9422	Returns an iterator over all child elements of the given node .
9423	Returns the parent element of the given node .
9424	Add a resource to the waiting list .
9425	Read a catalog from an input stream .
9426	Read a catalog from a file .
9427	Returns the host address .
9428	Resolve an entity .
9429	Set system property class value .
9430	Display the class information .
9431	Prints a description of the given class .
9432	Removes the package name from a class name .
9433	Returns the package name of the given classname .
9434	Attempt to load the given class .
9435	Returns the wrapper class for the given primitive type .
9436	Get all interfaces of a class .
9437	Returns all unique interfaces of the given class .
9438	Checks if the given type is a primitive wrapper .
9439	Instantiates a new instance of the specified class .
9440	Returns the getter method for the given attribute .
9441	Returns the setter method for the specified attribute .
9442	Convert a parameter name to a Java class .
9443	Returns the value of a system property .
9444	Gets the filenames for the given property .
9445	Removes all weak references from the queue .
9446	Returns an iterator over the set .
9447	Creates a URLLister for the given protocol .
9448	Returns a set of all entries in this group .
9449	Adds a property listener to the list of bound listeners .
9450	Remove a bound property listener .
9451	Checks if the given value is null .
9452	Find an editor for the given type name .
9453	Register an editor with the property editor manager .
9454	Convert the given text to the given type .
9455	Returns the context class loader for the given thread .
9456	Returns the first ApplicationDeadlockException that is an ApplicationDeadlockException .
9457	Schedule a new timeout .
9458	Do the work in the thread pool .
9459	Create a subcontext with the given name .
9460	Lookup an object by its name .
9461	Checks that the given object is an instance of the given class .
9462	Append the class information for the given class .
9463	Returns the transition with the given name .
9464	Read the properties from the classpath .
9465	Query the verbosity .
9466	Query whether to allow relative catalogs .
9467	Query the list of catalog files .
9468	Get the list of catalog files .
9469	Query whether to prefer public or not .
9470	Query whether to use the static catalog .
9471	Resolve an entity .
9472	Resolve an absolute URL .
9473	Make an absolute URI .
9474	Resolve the class for the given ObjectStreamClass .
9475	Invoke the setter .
9476	Returns the local name of the given element .
9477	Get the namespace URI of the given node .
9478	Returns the namespace URI of the given element .
9479	Convert an enumeration to a list .
9480	Returns an input stream for the given file .
9481	Loads properties from a file .
9482	Read properties from the properties file .
9483	Adds an edge to the graph .
9484	Adds an outgoing edge to the graph .
9485	Adds an incoming edge to the graph .
9486	Returns true if this edge has the given edge .
9487	Removes an edge from the graph .
9488	Finds the edge with the given destination vertex .
9489	Finds the edge that is outgoing to this node .
9490	Returns the cost of the edge between this and dest .
9491	Writes a jar file to the output stream .
9492	Returns true if the iterator has more elements .
9493	Fires an event .
9494	Install the JVM type provider .
9495	Clean a folder .
9496	Dispatch an action on the FX application thread .
9497	Returns the event stream of the given action type .
9498	Creates the fxml path for the given view type .
9499	One - to - many relationship .
9500	Returns a stream of T2 objects from a collection of rights .
9501	Returns a stream consisting of the elements of the given collection of rights .
9502	Returns a stream that contains only the first element of the given collection .
9503	Returns true if the request is allowed to use robots .
9504	Verify that the instruction generated should be \"([^\"]*)\"
9505	Main method .
9506	Main method to perform performance on a directory .
9507	Returns the sum of the degree of the words .
9508	Returns a map of arguments for the superclass .
9509	Informs the resource loader that it is ready to read data .
9510	Attempts to connect to the data source .
9511	Creates an iterable from an instance of the given type .
9512	Returns an array of the given type .
9513	Returns a list of objects of the specified type .
9514	Generate a collection of the given type .
9515	Returns a list of all elements of the given type .
9516	Returns an Either instance of the given type .
9517	Creates an Either instance of the right type .
9518	Validates that the given type is invalid .
9519	Validates that the given type is valid .
9520	Returns a Try instance of the given type .
9521	Connect jdbc on with url driver and username and password .
9522	Run in the sql .
9523	Query in with sql .
9524	Returns this UBArray as a boolean array .
9525	Add an example filter to the query
9526	On upgrade .
9527	Backup the table .
9528	Restore the table from a CSV file .
9529	Set the empty text .
9530	Dump the table to CSV .
9531	Unescapes a csv string .
9532	Get the values from a CSV row .
9533	Convert csv pairs to map .
9534	Convert a map to a comma separated string .
9535	Join a list of strings .
9536	Returns a comma - separated list of strings .
9537	Read a database from the index file .
9538	Write to index .
9539	Inspects the id field .
9540	Returns the base DAO class for the given entity .
9541	Returns the bind type .
9542	Import data from a CSV file .
9543	Backup all tables to csv .
9544	Restore all tables from csv .
9545	Writes the index file .
9546	Creates a query using the given EntityManager .
9547	Creates a typed query using the given EntityManager .
9548	Render the query .
9549	Delete the record with the given id .
9550	Saves the given object to the database .
9551	Update an object in the database .
9552	Add a NOT IN clause to the query .
9553	Add a subquery to the query .
9554	Returns the next active stack .
9555	Returns an empty intention stack .
9556	Adds a new plan to the cache .
9557	Selects a plan based on the selection policy .
9558	Select a plan at random .
9559	Set the plan variables .
9560	Returns the result at the given index .
9561	Returns the parents of this node .
9562	Returns the children of this node .
9563	Grows the given byte array by the given amount .
9564	Creates a logger with the specified name and level and file .
9565	Step the body .
9566	Set the goals from a byte array .
9567	Pause for user input .
9568	Initialize the intention selection pools .
9569	Initializes the intention selection threads .
9570	Starts the intention selection threads .
9571	Shutdown all intention selection threads .
9572	Register a Jill extension .
9573	Reset the catalog .
9574	Load an agent .
9575	Processes the plans for a given GoalType .
9576	Creates the agents in the catalog .
9577	Loads a class from the classpath .
9578	Loads an extension from the classpath .
9579	Checks if two objects have the same name .
9580	Prints the usage of the application .
9581	Parse command line arguments .
9582	Parse an argument with an option .
9583	Runs the given query on the given agent .
9584	Returns the object at the given index .
9585	Finds the object with the given name .
9586	Push an object onto the stack .
9587	Returns the object at the given index or null if the object is empty .
9588	Pushes an object onto the stack .
9589	Pop an object from the stack .
9590	Returns the type of the given object .
9591	Returns true if the query matches the given belief .
9592	Main method .
9593	Converts a String to a byte array .
9594	Post a goal to the agent .
9595	Sends a message to an agent .
9596	Send a message to an agent .
9597	Returns a copy of the goals array .
9598	Creates a new belief set .
9599	Add a new belief .
9600	Evaluate the query .
9601	Suspend the agent .
9602	Returns the field with the given name .
9603	Register a number of neighbours .
9604	Build a random name .
9605	This method is called when the pool is idle .
9606	Checks if the execution stack is valid .
9607	Removes all finished agents from the active agent set .
9608	Manages a goal .
9609	Sends a shutdown message to the pool .
9610	Set whether the agent is idle .
9611	Moves the disc on the specified pin .
9612	Initializes the global state .
9613	Wait until all pools are idle .
9614	Finishes the program .
9615	Checks if all intention selectors are idle .
9616	Returns the poolid for the given agent id .
9617	Picks an expression and returns it .
9618	Sets the expression .
9619	Creates a JPA join for the given attribute .
9620	Recursively creates a join if necessary .
9621	Find or create a join .
9622	Returns true if the end of the range is reached .
9623	Gets the uploaded stream from the request .
9624	Handles the request .
9625	Checks if a parameter with the given name has the given value .
9626	Returns the value of the named parameter .
9627	Parse content type parameters .
9628	Configure the transaction manager .
9629	Gets the target file .
9630	Writes an artifact to the target file .
9631	Post - process the instance .
9632	Returns the declared constructor for the given implementation class .
9633	Build the string representation of the descriptor .
9634	Get the interface method for the given method .
9635	Returns the type of the given field .
9636	Gets the value of a dependency .
9637	Persist the file to disk .
9638	Sets the default link .
9639	Sets the default link template .
9640	Handles links from the given response .
9641	Handle header links .
9642	Parse body links .
9643	Parse link object .
9644	Gets the map or adds it if it doesn t exist .
9645	Handles the capabilities from the HTTP response .
9646	Checks if the given method is allowed .
9647	Register the instance processor .
9648	Register an instance factory for the given instance type .
9649	Register an instance processor .
9650	Register a class processor .
9651	Get an instance of the given interface class .
9652	Adds an argument to the command .
9653	Creates the target file list .
9654	Convert this object to an XML string .
9655	Initializes the template and target files .
9656	Checks if this template has a reference to the given file .
9657	Creates a ParameterizedTemplateModel from the given XML reader .
9658	Creates a ParameterizedTemplateModel from the given file .
9659	Sets the request path .
9660	Returns an observable that emits all entities in the given range starting at the given index .
9661	Creates a new instance scope from the given string .
9662	Sets the value of a field on the given instance .
9663	Adds a capture appender to the given logger .
9664	Removes the given appender from the given logger .
9665	Clear the contents of the given appender .
9666	Read the arguments from the request .
9667	Parse the model .
9668	Resolve all proxies .
9669	Returns the list of files in the given directory .
9670	Parse a directory .
9671	Check if the model is fully resolved .
9672	Finds all EObjects in the given resource set .
9673	Sets the model directories .
9674	Sets the file extensions .
9675	Sets the model resources .
9676	Reads the next record from the input stream .
9677	Sets the designated parameter to the given array of Strings .
9678	Sets the designated parameter to the given Java boolean value .
9679	Execute a large update .
9680	Convert a string to an instance of the specified type .
9681	Merge a velocity template .
9682	Returns the path to the model directory .
9683	Returns the path to the template directory .
9684	Writes the given value to the response .
9685	Starts the web ui .
9686	Configures the given web window .
9687	Print to the given view .
9688	Writes the contents of an input stream to an output stream .
9689	Invoke the method on the interface .
9690	Attaches the request and response .
9691	Detaches this request .
9692	Returns the cookies for this request .
9693	Dump the request context .
9694	Returns the list of invocation meters for all managed methods .
9695	Configures this event stream with the given config .
9696	Sets the remote host .
9697	Returns the value of the given parameter .
9698	Removes the prefix from the given path .
9699	Returns the common directory between two directories .
9700	Convert absolute path to relative path .
9701	Convert a relative path to an absolute path .
9702	Returns the depth of the given directory .
9703	Dump the error on the HTTP request .
9704	Send a JSON object to the client .
9705	Add a parameter template model .
9706	Add parameter templates .
9707	Initializes the template .
9708	Find all references to the given template file .
9709	Enable or disable the save button .
9710	Delete the file .
9711	Delete the endpoint .
9712	Creates a new instance of the given managed class .
9713	Returns an array of all the files in the fit .
9714	Returns the summary of the file counts .
9715	Get the summary row .
9716	Get the summary row of a directory .
9717	Creates a new instance of the given managed class .
9718	Get the setup class .
9719	Returns the list of model directories .
9720	Returns the list of model resources .
9721	Sets the list of candidates .
9722	Loads a configuration document from an input stream .
9723	Show an error notification .
9724	Checks if the type is an object .
9725	Read an array of objects from the HTTP request .
9726	Read a JSON object from an input stream .
9727	Extract cell parameter .
9728	Gets the value of the hints property .
9729	Checks if the request is an XHR request .
9730	Checks if the request is a Android request .
9731	Handles the event .
9732	Returns a list of all properties with the given annotation .
9733	Returns the annotation on the given property .
9734	Log a message at the severe level .
9735	Returns a WhoisResult for the given domain .
9736	Checks if there is a parser for the given whois host .
9737	Get the managed class from the container .
9738	Get the managed method .
9739	Process not contains exception .
9740	Process not contains .
9741	ResultSet object as a boolean .
9742	Returns whether this ResultSet object is a wrapper for the specified type .
9743	Serialize the response to the HTTP response .
9744	Returns the value of the cookie with the given name .
9745	Adds a cookie to the response .
9746	Removes the cookie with the given name .
9747	Returns an iterator over all cookies .
9748	Returns the target file list producer .
9749	Adds a field to the class .
9750	Compile the class .
9751	Verify response .
9752	Returns the value of the given file .
9753	Ensure that the path ends with a trailing slash .
9754	Login with the given username and password
9755	Get the HTTP request .
9756	Invokes a method on the managed instance .
9757	Execute a mutable transactional method .
9758	Execute an immutable transactional method .
9759	Returns an array of all files in this directory .
9760	Returns the last file in the directory .
9761	Returns the concrete configuration of the given parser config .
9762	Checks if the request path starts with the path component .
9763	Gets the factories for the given model type .
9764	Returns the session associated with the given instance key .
9765	Serialize the file to the response .
9766	Reads the metadata from the server .
9767	Handle the request .
9768	Close the statement and close it .
9769	Close all stale event streams .
9770	Handle allowed methods .
9771	Called when the upload is complete .
9772	Delete the data from the server .
9773	Extract column parameters .
9774	Returns the argument names .
9775	Schedule a periodic task for the given period .
9776	Schedule a timeout task .
9777	Loads the views from the given configuration .
9778	Returns the next file in the list .
9779	Configure the application .
9780	Print the welcome banner .
9781	Prints the stopped banner .
9782	Creates a chameleon .
9783	Register shutdown hook .
9784	Trigger the notification .
9785	Trigger the endpoint .
9786	Insert a new row into the table and replace it with a new row .
9787	Returns the counts of all the files in the result set .
9788	setter for score - sets
9789	getter for variants - gets
9790	setter for variants - sets
9791	getter for questionType - gets
9792	setter for questionType - sets
9793	getter for token - gets
9794	getter for depLabel - gets
9795	setter for depLabel - sets
9796	getter for semanticType - gets
9797	setter for semanticType - sets
9798	getter for sections - gets
9799	setter for sections - sets
9800	indexed getter for sections - gets an indexed value -
9801	indexed setter for sections - sets an indexed value -
9802	getter for uris - gets
9803	setter for uris - sets
9804	getter for types - gets
9805	setter for types - sets
9806	getter for targetType - gets
9807	setter for targetType - sets
9808	getter for rank - gets
9809	setter for rank - sets
9810	getter for queryString - gets
9811	setter for queryString - sets
9812	getter for candidateAnswers - gets
9813	setter for candidateAnswers - sets
9814	indexed getter for candidateAnswers - gets an indexed value -
9815	indexed setter for candidateAnswers - sets an indexed value -
9816	getter for query - gets
9817	setter for query - sets
9818	getter for hitList - gets
9819	setter for hitList - sets
9820	indexed getter for hitList - gets an indexed value -
9821	indexed setter for hitList - sets an indexed value -
9822	getter for abstractQuery - gets
9823	setter for abstractQuery - sets
9824	getter for searchId - gets
9825	setter for searchId - sets
9826	setter for docId - sets
9827	getter for offsetInBeginSection - gets
9828	setter for offsetInBeginSection - sets
9829	getter for offsetInEndSection - gets
9830	setter for offsetInEndSection - sets
9831	getter for beginSection - gets
9832	setter for beginSection - sets
9833	getter for endSection - gets
9834	setter for endSection - sets
9835	getter for aspects - gets
9836	setter for aspects - sets
9837	getter for triple - gets
9838	setter for triple - sets
9839	getter for sourceRelation - gets
9840	setter for sourceRelation - sets
9841	getter for subject - gets
9842	setter for subject - sets
9843	getter for predicate - gets
9844	setter for predicate - sets
9845	getter for isObjUri - gets
9846	setter for isObjUri - sets
9847	getter for operator - gets
9848	setter for operator - sets
9849	getter for operatorArgs - gets
9850	setter for operatorArgs - sets
9851	getter for concept - gets
9852	getter for score - gets
9853	getter for text - gets
9854	setter for text - sets
9855	getter for id - gets
9856	setter for id - sets
9857	getter for name - gets
9858	getter for abbreviation - gets
9859	setter for abbreviation - sets
9860	setter for concept - sets
9861	getter for variants - gets
9862	setter for variants - sets
9863	getter for namedEntityTypes - gets
9864	setter for namedEntityTypes - sets
9865	getter for conceptType - gets
9866	setter for conceptType - sets
9867	getter for occurrences - gets
9868	setter for occurrences - sets
9869	getter for concepts - gets
9870	setter for concepts - sets
9871	getter for originalText - gets
9872	setter for originalText - sets
9873	getter for args - gets
9874	setter for args - sets
9875	getter for label - gets
9876	setter for label - sets
9877	Returns the index of the next clear bit .
9878	Sets the bit at the given index .
9879	Free the given buffer .
9880	Creates a new instance of the cache .
9881	Rehash an array of values .
9882	method to get the HELM2 notation
9883	Check of brackets in the annotation section .
9884	Adds the information about the source and target unit .
9885	Returns the HELM2 representation of this RGroup .
9886	Adds an element to the MonomerNotationGroup .
9887	Main method to convert HELM1 to HELM2
9888	Checks if the polymerID is valid .
9889	Checks if the polymerID is valid .
9890	Checks if the connection s details are valid .
9891	Checks if the group ID is valid .
9892	Checks if the given string is repeated .
9893	Checks if the last element is a peptide or rna .
9894	Returns the JSON representation of this object .
9895	method to get a simple polymer
9896	method to get the current groupingNotation
9897	Returns the HELM2 representation of this object .
9898	Converts a list of polymer IDs to HELM2 notation
9899	Returns the HELM2 notation of the connections .
9900	Returns the HELM2 representation of the grouping .
9901	Convert the annotation section to the HELM2 format .
9902	method to get the list of polymer and grouping IDs
9903	method to get the polymerNotation for the given id
9904	Set the polymer elements .
9905	Convert a HELM to a HELM .
9906	Set the annotation .
9907	Sets the count .
9908	method to decide what MonomerNotation is
9909	method to decide which MonomerNotationGroupElement
9910	decide what HELMEntity to use
9911	Returns the value of the interval .
9912	Parse the HELM2 standard .
9913	method to set the RNA contents
9914	Define the ambiguity .
9915	Get the statistics for this worker thread .
9916	Creates an ADiGraph from the given edges .
9917	Creates an ADiGraph from the given nodes and edges .
9918	Initialize incoming paths and outgoing paths .
9919	Returns a sorted list of nodes sorted by reachability .
9920	Subscribes to events that match the given pattern .
9921	Get the number of subscribers that match the given pattern .
9922	Unsubscribe from the given pattern .
9923	Send an asynchronous or sync response .
9924	Send a return_sync command .
9925	Poll for a response .
9926	Shutdown the server .
9927	Returns the given exception for local handling .
9928	Unlocks the run state .
9929	Creates a new worker thread .
9930	Try to add a worker .
9931	Register a worker thread .
9932	Deregisters a worker thread .
9933	Signal the current thread .
9934	Run the worker .
9935	Wait for a work to complete .
9936	Returns the number of queued tasks in the current thread .
9937	Returns the common submitter queue .
9938	Completes the external help completion .
9939	Submits a task to the pool .
9940	Make the common pool .
9941	Wait for the task to complete .
9942	Build a string from AStatement1
9943	Get the thread pool statistics .
9944	Creates an AList from the given elements .
9945	Returns the reverse of this list .
9946	Checks if all elements of the given collection satisfies the given predicate .
9947	Folds the elements of a collection into a single value .
9948	Folds the elements of a List into a single value .
9949	Push a task onto the queue .
9950	Creates an option from a non - null value .
9951	Creates an ALongHashMap from the given keys and values .
9952	Returns an empty AListMap .
9953	Creates an AListMap from the given keys and values .
9954	Creates an AListMap from the given keys and values .
9955	Returns a set of all keys in this map .
9956	Normalize the resource name .
9957	Marshals a BoundType to a String .
9958	Returns a subsequence of this sequence .
9959	Returns a binary search for the given list .
9960	Returns a binary search for the given list .
9961	Sends an email .
9962	Send an email .
9963	Binds a route to the application .
9964	Binds the given filter handler to the application .
9965	Show the body of the tag .
9966	Returns the int value of the given long .
9967	Removes duplicate strings from an array .
9968	Returns a string that looks like the given value .
9969	Run the task .
9970	Login the user with the given password .
9971	Get the login user from the cookie or create a new one if it doesn t exist
9972	Gets the login user from the session .
9973	Check password .
9974	Save member in cookie .
9975	Get the login key .
9976	Returns the user associated with the given uuid .
9977	Forward the request to the given path .
9978	Appends the file separator to the given path .
9979	Returns the value of the given parameter or the default value if not found .
9980	Log a debug message .
9981	Get the caller information .
9982	Convert a char array to a simple byte array .
9983	Convert a CharSequence to a byte array .
9984	Convert a byte array to a simple char array .
9985	Converts a CharSequence to a byte array .
9986	Lookup the locale data for the given locale code .
9987	Run the job in the given number of seconds .
9988	Crop the given image to the specified location .
9989	Invokes the given invocation with the given amount of time .
9990	Invokes the given direct invocation in the current thread .
9991	Gets the rest operations .
9992	Render an error response .
9993	Render an AJAX forbidden response .
9994	Returns the template for the given view .
9995	Parse the path .
9996	Render the data tables .
9997	Render empty data tables .
9998	Set the list of items .
9999	Sends a redirect to the given URL .
10000	Returns a list of all providers bound to this type .
10001	Returns the current method of the current exception .
10002	Compacts the memory .
10003	Propagates the given metrics to the local metrics collection .
10004	Encodes the given string .
10005	Returns the charset of the given file .
10006	Copy data from an input stream to an output stream .
10007	Copy bytes from the input stream to the output stream .
10008	Copies the contents of the given input stream to the given output stream .
10009	Copies the contents of the given Reader to the given Writer .
10010	Copies the given number of characters from the given Reader to the given Writer .
10011	Copies the contents of the given reader to the given output stream .
10012	Copies the contents of the given reader to the given output stream .
10013	Compares two input streams .
10014	Compares two Reader objects .
10015	Apply the pipeline to the given io .
10016	Returns the SQL for the given group and SQL id .
10017	Unmarshals a string into an object of the specified type .
10018	Unzips the given zip file to the given destination directory .
10019	Creates a new PermissionDialogFragment with the specified bean and request code .
10020	Set the key listener to be called when the dialog is resumed .
10021	Adds a core value type .
10022	Checks if the given value matches the given regular expression .
10023	Checks if the given value is a mobile number .
10024	Checks if the given value is a phone number .
10025	Checks if the given date is a birth day .
10026	Checks if the given value is a valid URL .
10027	Checks if the given value is a valid date time .
10028	Process the HTTP request .
10029	Encodes a String to Base64 .
10030	Decodes a base64 encoded string .
10031	Decode a hex string into a byte array .
10032	Read properties from a UTF - 8 stream .
10033	Read content as string .
10034	Read the content of a file into a String .
10035	Writes a byte array to a file .
10036	Copies a directory to a target directory .
10037	Serialize an XML document .
10038	Creates a Document object from an XML file .
10039	Creates a Document object from an XML string .
10040	Get a Document object from an input stream .
10041	Validates an XML signature .
10042	Sign a document using the specified public key and private key .
10043	Checks if the given class is cache - safe .
10044	Checks if the given class is a primitive array .
10045	Checks if the given class is a primitive wrapper array .
10046	Resolve a primitive type if possible .
10047	Checks if two types are assignable .
10048	Checks if the given value is assignable to the given type .
10049	Returns all interfaces implemented by the given instance .
10050	Returns all interfaces of the given instance as a set .
10051	Write the properties to a temporary file .
10052	Returns the variables for the given URI .
10053	Add a permission to this bean .
10054	Creates a DruidPlugin from the given properties .
10055	Binds an extension to the given extension point .
10056	Returns the built - in object for the given type .
10057	Returns the primitive value of the given type .
10058	Convert the given object to the given type .
10059	Convert user defined value type .
10060	Returns the value of a query parameter .
10061	Returns the value of a cookie .
10062	Returns the value of the named session parameter .
10063	Initialize the data source .
10064	Set the FTL shared variable .
10065	Adds a parameter to the query .
10066	Sets the value of the given field to the given value .
10067	Show a permission dialog .
10068	Checks if all values granted .
10069	Checks if any value is denied .
10070	Find by SqlNode .
10071	Returns the first record matching the given query .
10072	Checks if the given model is new .
10073	Checks if the given method declares an exception .
10074	Process the queue .
10075	Put a value into the map .
10076	Checks if the given string matches the given pattern .
10077	Read the arguments from the command line .
10078	Returns the ProtobufEntity annotation for the given class .
10079	Checks if the given class is a ProtobufEntity .
10080	Get all protobuf fields .
10081	Returns the protobuf getter for the given field .
10082	Returns the Pojo setter for the given field .
10083	Returns the current object mapper .
10084	Get the json factory .
10085	Convert an object to a JSON string .
10086	Sets the borders .
10087	Get user record .
10088	Copy out the attributes from the target object to the target object .
10089	Copy out attributes .
10090	Get the value of a property .
10091	Set a property .
10092	Add this application to the frame .
10093	Save the token .
10094	Gets the access token .
10095	Returns the default class loader .
10096	Returns the URL of the resource with the given name .
10097	Returns an input stream to a resource .
10098	Returns an input stream for the given class .
10099	Initializes this URI from another URI .
10100	Initialize the scheme from a URI specification .
10101	Initializes the path from a URI specification .
10102	Sets the scheme .
10103	Sets the userinfo .
10104	Sets the host .
10105	Set the port number .
10106	Appends a path to the current path .
10107	Sets the query string .
10108	Sets the fragment of this URI .
10109	Get the URI string .
10110	Creates a prepared statement from an iterator of parameters .
10111	Initialize this applet .
10112	Get the Muffin value for this parameter .
10113	setMuffin Method .
10114	Returns the contents of the clipboard .
10115	Set the contents of the clipboard .
10116	Open an input stream to a file .
10117	Load all services of the given type .
10118	Sets the service params for the given operation .
10119	Get the service params from a parametrized operation .
10120	Find a parmetrized service .
10121	Finds a service by its class .
10122	Parse query response .
10123	Returns an iterator over the contents of this buffer .
10124	Get the encoding of an XML document .
10125	Returns the parent logger .
10126	Creates a new JdbcLogConnection proxy .
10127	Get the authorization code from the command line
10128	Visits a package declaration .
10129	Visits a class declaration .
10130	Visits an executable declaration .
10131	Returns the value of the property with the given key .
10132	Returns a DeclarationFilter that only accepts the given modifiers .
10133	Returns a DeclarationFilter for the given type .
10134	Returns a new DeclarationFilter that matches this and the given DeclarationFilter .
10135	Returns a new DeclarationFilter that matches this one or the given DeclarationFilter .
10136	Returns the map .
10137	Make the constructor accessible .
10138	Prepare an object query .
10139	Replaces all slashes with hyphens .
10140	Convert a byte array to a hexadecimal string .
10141	Returns the list of indexes for the given parameter .
10142	Parse named sql .
10143	Converts a collection of Protobuf entities to a list of Protobuf entities .
10144	Set protobuf field value .
10145	Sets the value of the given protobuf attribute to the given value .
10146	Accept this file .
10147	Creates a new instance of the ResultSet proxy .
10148	Maps the given list of labels to their index .
10149	Extract values from a list of values .
10150	Returns the generic supertype at the given index .
10151	Poll for all objects in the current thread . If the thread is shutdown this method will block until all objects are available .
10152	Poll individually .
10153	Returns the field with the given name or null if the field does not exist .
10154	Returns a list of all declared methods of the given class .
10155	Returns the declared method or null if the method does not exist .
10156	Returns all methods annotated with the given annotation .
10157	Returns all constructors annotated with the given annotation .
10158	Prints a single byte to stdout .
10159	Returns the index of the first occurrence of the first occurrence of the specified substring in the specified string ignoring case .
10160	Removes all chars from a string .
10161	Clean the state .
10162	Initializes the audit instance .
10163	Initializes the message queue .
10164	Initializes the password validator .
10165	Initializes the password authenticator .
10166	Resolve the locale code .
10167	Lookup the LocaleInfo for the given locale code .
10168	Creates a new JdbcLogStatement proxy .
10169	Removes all elements from the list .
10170	Adds an element to the end of the stack .
10171	Pop the top element from the stack .
10172	Make the input stream .
10173	Parse command line arguments .
10174	Returns true if the tokens match the patterns .
10175	Moves the current position by the specified amount .
10176	Returns true if this rectangle encloses another rectangle .
10177	Returns true if the given coordinates are contained in this rectangle .
10178	Returns the intersection of this rectangle with another rectangle .
10179	Returns the union of this rectangle with the given rectangle .
10180	Replaces the x - coordinate of this rectangular with the x - coordinate of the other rectangular .
10181	Replaces the y - coordinate of this rectangular with the other rectangular .
10182	Returns the offset of the specified column .
10183	Returns the offset of the specified row .
10184	Returns the bounds of a cell relative to the grid .
10185	Calculates the number of columns in the grid .
10186	Calculates the number of rows .
10187	Unwraps an exception .
10188	Main method .
10189	This method is called when the code buffer is updated .
10190	Copy and resize the code buffer .
10191	Render the instructions .
10192	Initialize the application .
10193	Returns a copy of this QueryParameter with the specified excluded elements .
10194	Adds a child to this node .
10195	Removes all children from this node .
10196	Returns the next element in the sequence .
10197	Adds instructions to this WAM .
10198	Adds the given instructions to the parent .
10199	This method is called when the state of the work panel is changed .
10200	Register the work panel .
10201	Updates the present component flags .
10202	Creates a new instance of a decimal type .
10203	Returns true if the given term evaluates to true .
10204	Optimize a list of instructions .
10205	Compares two collections .
10206	Service method .
10207	Render the first and back buttons .
10208	Render a button .
10209	Resets the model .
10210	Initializes the model .
10211	Returns the value associated with the given key .
10212	Returns the index of the given key .
10213	Sets the value at the given index .
10214	Removes the value associated with the given key .
10215	Removes the element at the given index .
10216	Returns true if the property exists .
10217	Sets the value of a property .
10218	Returns the value of the specified property .
10219	Checks if the wrapper type is assignable from the given primitive type .
10220	Initialize the getters and setters .
10221	Returns the decision tree for the given state .
10222	Initializes the lookup table .
10223	Unify a query and statement .
10224	Unify two terms .
10225	Unify a variable .
10226	Compile a query .
10227	Finds the maximum number of arguments in a given clause .
10228	Allocates the query registers for the given clause .
10229	Gathers the position and occurrence information for a given clause .
10230	Display a WAM predicate .
10231	Display a compiled query .
10232	Put a 32 - bit integer into the given buffer .
10233	Convert a ByteBuffer to a String .
10234	Returns the string value of this attribute .
10235	Sets the value of this EnumeratedStringAttribute .
10236	Read a term .
10237	Checks if the class exists and is loadable .
10238	Checks if the given class is a subtype of the given parent class .
10239	Checks if the parent class is a subtype of the child class .
10240	Checks if the given class is a subtype of the given class .
10241	Loads a class from the classpath .
10242	Creates a new instance of the given class .
10243	Creates a new instance of the given constructor with the given arguments .
10244	Calls a method overriding illegal access .
10245	Call a method on an object .
10246	Call a static method .
10247	Returns the constructor for the given class .
10248	Finds the set methods for the given property name .
10249	Creates a transactional queue .
10250	Creates a transactional re - queue .
10251	Returns the type of the given object .
10252	Resets the state machine .
10253	Returns the current state of the search .
10254	Creates a new int range type .
10255	Add support of TZ .
10256	Adds an alternate dimension for the specified timezone .
10257	Adds a dimension to the database .
10258	Find free variables .
10259	Find free non - anonymous variables .
10260	Compares two search nodes .
10261	Writes the given object to the given output file .
10262	Reads a stream into a String .
10263	Creates a new search node .
10264	Generate the trace indent .
10265	Allocates the argument registers for the given expression .
10266	Is the last body term in the argument position only?
10267	Returns the majority classification of the given examples .
10268	Checks if all examples have the same classification .
10269	Choose the best property to decide on .
10270	Creates a functor with the given name and arguments .
10271	Returns a new variable with the given name .
10272	Execute the action with error handling .
10273	Returns the page at the specified index .
10274	Set the texture .
10275	Paint the image immediately .
10276	Creates a buffered image .
10277	Creates the graphics for the given image .
10278	Creates a binary image .
10279	Creates a SGISurface .
10280	Sets the queue search algorithm .
10281	Search for the next node in the queue .
10282	Search for the next node in the search state .
10283	Main method .
10284	Returns the clause for this sentence .
10285	Parse a list of terms .
10286	Consume a functor .
10287	Returns a list of functors .
10288	Returns an array of the arguments of this expression .
10289	Consume a VAR token .
10290	Consume an integer literal .
10291	Consume a double literal .
10292	Consume a string literal .
10293	Consume a directive .
10294	Intern an operator .
10295	Initializes the built ins .
10296	Consume a token from the token source .
10297	Consume the next token from the token source .
10298	Bind to the current thread .
10299	Rollbacks all transactions .
10300	Collect the elements from the iterator into the target collection .
10301	Reserves a call point .
10302	Convert a time of day to a number of ticks .
10303	Convert a tick number to a year number .
10304	Returns the number of ticks with the given number of hours set to .
10305	Returns the number of ticks with the given number of minutes set .
10306	Returns the number of ticks with the given number of seconds set .
10307	Returns the number of ticks that are set to the given year .
10308	Returns the ticks with the given month set to the given ticks .
10309	Returns the number of ticks that are set to the given date .
10310	Returns the start of the given year in milliseconds .
10311	Returns the month of the year .
10312	Reads a block of bytes from the input stream .
10313	Apply the given key to the given entry .
10314	Returns the entry for the given key or null if the key is not found .
10315	Returns the next entry in the hash table .
10316	Rehashes the hash table .
10317	Updates the state of the work panel depending on the action .
10318	Sets the next available state .
10319	Sets the previous available state .
10320	Sets whether the task is finished or not .
10321	Returns a WAM resolving native machine .
10322	Returns an iterator over the current set of variables .
10323	Returns the expected I .
10324	Returns the probability distribution for the given counts .
10325	Sets the number of ticks .
10326	Perform the action .
10327	Creates a new URL from a string .
10328	Get the request info .
10329	Get the headers from the request .
10330	Gets the cookies from the request .
10331	Returns the parameters of the request .
10332	Gets the current request scope .
10333	Get the page scope .
10334	Gets the session scope .
10335	Returns the application scope .
10336	Gets the user principal .
10337	Writes the debug information to the page .
10338	Convert a map to an HTML table .
10339	Search for a set of states .
10340	Sets the current screen state .
10341	Walks the search tree starting at the given term .
10342	Compares two search nodes .
10343	Updates the registers .
10344	Notifies all active listeners that a change has occurred .
10345	Leave the given clause .
10346	Returns true if the given context is a top - level functor .
10347	Returns an array containing all elements of this list in the specified array .
10348	Sets the arguments for this operator .
10349	Returns the current fixity .
10350	Returns true if this is an infix .
10351	Compares this symbol with another symbol .
10352	This method is called when a property is changed .
10353	Register the work flow controller .
10354	Creates an enum attribute factory for the given class .
10355	Creates a component factory from the given class name .
10356	Returns the storage cell for the given variable .
10357	Returns true if this cell is bound .
10358	Sets the column attribute .
10359	Sets the row attribute .
10360	Returns the column attribute or null if it is not present .
10361	Get the row attribute or null if not found .
10362	Inserts the given attributes into the cell attributes map .
10363	Creates a new time range type .
10364	Creates a new instance of the StringPatternType .
10365	Returns true if the given CharSequence is an instance of this class .
10366	Creates the initial context for the given term .
10367	Updates the registers of this memory layout .
10368	Returns the value of this variable .
10369	Finds the goal path .
10370	Join both paths .
10371	Cache a block .
10372	Returns the properties for the given resource .
10373	Sets the rate of the batch .
10374	Reads a byte array from the underlying stream .
10375	Skips the given number of bytes .
10376	Gather disjunctions .
10377	Read an int from the byte array at the given offset .
10378	Write an int to a byte array .
10379	Write 24 - bit integer to byte array .
10380	Read a 24 - bit integer from a byte array .
10381	Read a short from a byte array .
10382	Write a short to a byte array at a specific offset .
10383	Returns the child state for the given operator .
10384	Returns an iterator over all valid operators .
10385	Returns the id of the attribute .
10386	Returns the value of the attribute .
10387	Sets the value of this IdAttribute .
10388	Convert a list of strings to an array .
10389	Converts an array of strings to a list of strings .
10390	Convert a name to a CamelCase name .
10391	Converts a case - insensitive string to a case - sensitive string .
10392	Returns the current configuration .
10393	List the handlers .
10394	Resolve a call point .
10395	Set the code address for a given functor .
10396	Checks if the given hierarchy attribute is a sub - category of this category .
10397	Returns the id of the attribute .
10398	Returns the value at the given level .
10399	Returns the last value in the path .
10400	Write the attributes to the stream .
10401	Deserializes this object from a stream .
10402	Compute the H value of a search node .
10403	Returns the mod of the given value .
10404	Adds an error message to the error list .
10405	Handles the given exception and adds them to the action errors .
10406	Writes a string to the output stream .
10407	Classify a decision tree .
10408	Compares two elements .
10409	Returns an iterator over all the items in the cluster .
10410	Returns the log2 of the given integer .
10411	Returns the logarithm of the given integer .
10412	Returns the log10 v2 of the given integer .
10413	Returns the log10 v3 of the given integer .
10414	Returns the log10 of the given value .
10415	intLogBase10v2 .
10416	Returns the number of characters in the given integer .
10417	Returns the number of characters in the given long value .
10418	Returns the number of decimal digits in the given integer value .
10419	Sets the head of the WAM .
10420	Emits the instruction listing .
10421	Sets the current screen .
10422	Evaluate the predicate chain .
10423	Returns the value of the property with the given key .
10424	Returns the properties for the given key .
10425	Returns an iterator over the keys .
10426	Creates the array properties .
10427	Sets the rate .
10428	Returns the negative value of the first number .
10429	Find properties .
10430	Get properties using system property .
10431	Get the properties from the classpath .
10432	Get the properties using the current working directory .
10433	Leave a functor .
10434	Returns the value of this variable .
10435	Sets the substitution for the given term .
10436	Creates a queue of search nodes .
10437	Clean up any resources held by this object .
10438	Appends the given event to this appender .
10439	Starts the connector thread .
10440	Initialize the printers .
10441	Commit the current transaction .
10442	Rollbacks the transaction .
10443	Request a write operation .
10444	Adds a cached write operation to the cache .
10445	Acquires the global write lock .
10446	Release the global write lock .
10447	Enlists this resource with the current session .
10448	Enter a rule set .
10449	Inserts the specified element into the queue waiting up to the specified amount of time .
10450	Returns the next element from the queue or null if the queue is empty .
10451	Put an element to the queue .
10452	Inserts an element into the queue .
10453	Returns the next object from the iterator .
10454	Returns the value of a property as a boolean .
10455	Returns the property value as an integer or null if the property is not found .
10456	Returns the value of the specified property as a long .
10457	Call a mixin .
10458	Set the addition visitor .
10459	Backtrack a search node .
10460	Retrieve the code for a given WAM call point .
10461	Execute the query and extract bindings .
10462	Decode a heap instruction .
10463	Capture the contents of an object .
10464	Restore the values from the map to the given object .
10465	Returns the value of the specified attribute in the specified class .
10466	Sets the value of the specified attribute on the specified class .
10467	Returns all the field names of the given class .
10468	Execute the command .
10469	Inserts the specified element at the end of the queue .
10470	Removes all items from the list .
10471	Creates a new search node .
10472	Creates a queue of search nodes .
10473	Creates a new TermWalker using the given visitor .
10474	Creates a new TermWalker using the given visitor and the given unary predicate .
10475	Creates a new TermWalker using the given visitor .
10476	Creates a new positional term walker using the given visitor .
10477	Returns a new TermWalker that traverses the given positional term and returns a new TermWalker that traverses the given positional term and returns a new TermWalker that traverses the result .
10478	Loads properties from the given input stream .
10479	Get properties from a file .
10480	Get the properties from the given URL .
10481	Returns the properties for the given file or URL .
10482	Compute the grid size .
10483	Initializes the font metrics .
10484	Add a property change listener .
10485	Add a property change listener .
10486	Remove a property change listener .
10487	Fires a property change event to all registered listeners .
10488	Creates a new DoubleRangeType .
10489	Fade to the specified target color .
10490	Show the horizontal bar .
10491	Show the left bar .
10492	Show the right bar .
10493	Sanitize radio controls .
10494	Waits for the specified amount of time .
10495	Waits for the specified amount of time to complete .
10496	Execute the command .
10497	Appends the classpath elements to the command line .
10498	Creates a new date range type .
10499	Print the Introduction .
10500	Initializes the command line reader .
10501	Evaluate the given sentence .
10502	Evaluate the query .
10503	Returns a MultiTypeData for the given boolean value .
10504	Convert a byte into a MultiTypeData .
10505	Returns a MultiTypeData for the given character .
10506	Returns a MultiTypeData for the given short .
10507	Returns a MultiTypeData for the given integer .
10508	Returns a MultiTypeData for the given long .
10509	Returns a MultiTypeData for the given float .
10510	Convert a double to a MultiTypeData .
10511	Convert a string into a MultiTypeData .
10512	Returns a MultiTypeData for the given object .
10513	Convert a MultiTypeData to a Java object .
10514	Sets the value of an attribute in the current page context .
10515	Clear all elements up to the given key .
10516	Expand the array .
10517	Inserts a character at the end of the table .
10518	Compares two search nodes .
10519	Parse operators .
10520	Returns the set of operators matching the given name .
10521	Check if the given candidate operator is one of the given fixities .
10522	Creates a new search node from the given successor .
10523	Right pad a string .
10524	Returns an empty string if there are no errors .
10525	Returns the options in force .
10526	Returns the usage of the command line .
10527	Adds trailing pairs to the given properties .
10528	Adds the options to the given properties .
10529	Adds an option to the command line .
10530	Take free arguments as properties .
10531	Checks if the argument format is valid .
10532	Compare iterators .
10533	Returns an enumeration of options that can be displayed to the user .
10534	Returns the command line options .
10535	Set the stemmer .
10536	Get the actual stemmer .
10537	Returns the stem of the given word
10538	Main method to use the stemmer .
10539	Creates a new float range type .
10540	Resets the internal state .
10541	Trace the current frame of the environment .
10542	Trace the current state of the choice frame .
10543	Call the internal function .
10544	Returns the next stack frame .
10545	Backtrack the current byte position .
10546	Add an address to the trail .
10547	Unwinds the trail .
10548	Tidy up the trail .
10549	Unify two instructions .
10550	Unify a constant .
10551	Print the slot .
10552	Get a random start state .
10553	Returns whether the given state is solvable .
10554	Returns the child state for the given operator .
10555	Returns an iterator of valid operators .
10556	Pretty print the board .
10557	Swap the specified tile to the location counting illegal .
10558	Swaps two tiles .
10559	Convert a board string to a list of characters .
10560	Convert a list of characters to an EightPuzzleState
10561	Converts a log4j record to a log4j message .
10562	Returns the log4j level corresponding to the given log4j level .
10563	Requeues the given element .
10564	Add an element to the queue .
10565	Increments the size and count .
10566	Decrements the size and count .
10567	Signal on size threshold crossing .
10568	Returns an enumeration of all names in this context .
10569	Returns an enumeration of all bindings for the given name .
10570	Add a property to the environment .
10571	Removes a property from the environment .
10572	Run GCTill stable .
10573	Literal
10574	Resolve a mixin reference .
10575	Push a variable reference .
10576	Sets the maximum height of a row .
10577	Updates the max column width .
10578	Execute the action with error handling .
10579	Creates a new heuristic search node .
10580	Executes the action .
10581	Substitutes built ins .
10582	Initialise the symbol table .
10583	Performs a top - level check on the given clause .
10584	Returns a string representation of the list of arguments .
10585	Returns whether the first number is less than the second number .
10586	Sets the state to running .
10587	Signal that the server is terminating .
10588	Sets the state to Terminated .
10589	Adds an element to the queue .
10590	Ceiling log2 .
10591	Updates the minimum node .
10592	Compares two nodes .
10593	Inserts a new node at the end of the list .
10594	Restarts the cache sweep thread .
10595	Returns a set of objects matching the given search method .
10596	Returns a collection of objects matching the given search method .
10597	Finds all solutions and adds them to the result collection
10598	Returns the next element in the sequence .
10599	Restore the values of an object .
10600	Returns the value of the property on the underlying class .
10601	Sets the value of the given property to the given value .
10602	Sets the value of a property .
10603	Captures the value of a property .
10604	Removes the first element from the stack and returns it .
10605	Returns the string representation of the given modifiers .
10606	Converts a string to an integer .
10607	Convert a string to a date .
10608	Checks if the given string is a valid date .
10609	Checks if the given string is a time .
10610	Checks if the given string is a valid date time .
10611	Returns a token source for the given string .
10612	Returns a token source for the given file .
10613	Creates a token source from an input stream .
10614	Checks if the given instruction is a constant instruction .
10615	Checks if the instruction is a void variable .
10616	Checks if the given instruction is a non - argument instruction .
10617	Returns an iterator over the children of this node .
10618	Returns the argument at the given index .
10619	Returns an iterator over the children of this operator .
10620	Returns the string representation of the arguments .
10621	Retrieve summary .
10622	Retrieve records from the database .
10623	Execute the query and return the results .
10624	Emits the given code buffer to the given machine .
10625	Set the basic type .
10626	Consults the given input stream .
10627	Print a variable binding .
10628	Expand the result set to a map of variables .
10629	Read data from the input stream .
10630	Reads the packet stream .
10631	Returns the current time in milliseconds .
10632	Returns the current time in milliseconds .
10633	Updates the track info .
10634	Updates the play info .
10635	Render the final output .
10636	Handles the request for a MusicUsageResource .
10637	Handles an event request .
10638	Fire the start music request event .
10639	Initializes the connection .
10640	Starts the connection .
10641	Shuts down the connection .
10642	Reset the parser .
10643	Parse all packets from the XML stream .
10644	Process a packet .
10645	Sets the cli option .
10646	Creates a chat for a user .
10647	Internalize this object .
10648	Resets the content to the given map .
10649	Sets the value of a property .
10650	Adds a new filter to the list .
10651	Process the request .
10652	Reset all properties .
10653	Initializes the Packet Writer .
10654	Sends a packet to the server .
10655	Returns the next packet in the queue .
10656	Opens the stream .
10657	Returns a list of all information about the type .
10658	Returns true if the given descriptor exists .
10659	Add an event life cycle listener .
10660	Shuts down the thread pool .
10661	Returns true if the contents of two files are equal .
10662	Clean a direct byte buffer .
10663	Checks if the given entry is valid .
10664	Mask null key .
10665	Returns true if x equals y .
10666	Returns the entry with the given key or null if no such entry exists .
10667	Resize the cache to the specified capacity .
10668	Adds all entries from the given map to this map .
10669	Removes the value associated with the given key .
10670	Removes the entry for the given key .
10671	Removes a mapping from the map .
10672	Adds an entry to the hash table .
10673	Creates a delegate map .
10674	Encodes an XML attribute value .
10675	Encodes a byte array into a hexadecimal string .
10676	Encodes a String to Base64 .
10677	Encodes a byte array into Base64 .
10678	Iterate over the given collection .
10679	Set the track selector controller .
10680	Set the progress controller that will be called when a jump is requested .
10681	Sets the controller that will be called when the playback is changed .
10682	Sets the volume changeable controller .
10683	Broadcasts the available playlists .
10684	Handles command resources .
10685	Handles the volume change .
10686	Handles a jump .
10687	Handles the select track command .
10688	Get the thread cache .
10689	Gets the request cache .
10690	Returns the alt field for the given field and stream id .
10691	Returns a filtered map from the source map .
10692	Returns the shard path for the given shard id .
10693	Adapts an object to a session .
10694	Invoke a method on the target object .
10695	Delete a tree .
10696	Updates one or more properties of an entity .
10697	Sets the ping interval .
10698	Schedule the ping server task .
10699	Adds the given options to the command line .
10700	Returns true if the given option is one of the used options .
10701	Parse the command line .
10702	Prints the help for the given application .
10703	Parse the command line .
10704	Initializes the connection .
10705	Sends a starttls request to the server .
10706	Returns the compression handler if any .
10707	Request stream compression .
10708	Start stream compression .
10709	Notifies all connection listeners that the connection has been closed .
10710	Notifies all connection listeners that the connection has been reconnected .
10711	Register a SASLMechanism .
10712	Returns the list of registered SASL mechanisms .
10713	Returns the output plugin behaviour for the given identifications .
10714	Logs a message at the INFO level .
10715	Log an error message .
10716	Logs a message .
10717	Creates a start event .
10718	Creates a start event .
10719	Notify the listeners that the given string has been written .
10720	Checks if the given resource provides a resource .
10721	Checks if there is a resource with the given source ID .
10722	Checks if the given list of resource IDs provides a resource .
10723	Provides a list of resources that match the given resource IDs .
10724	Gets a map from the cache .
10725	Gets the cache key .
10726	Removes a key from the cache .
10727	Put the properties into the cache .
10728	Get the location map from the java . class . path .
10729	Include a file .
10730	Include a jar file .
10731	Adds a SASL Mech .
10732	Adds a collection of SASL mechs .
10733	Creates the debug stream and connection listener .
10734	Activates the server .
10735	Register standard event listeners .
10736	Register an event listener .
10737	Register an event ID .
10738	Attempt to acquire a lock on the given channel .
10739	Unregister an event ID .
10740	Returns true if this action can be run .
10741	Creates a new DSE session .
10742	Creates a MusicPlayerError from an Identification .
10743	Start playing the player .
10744	Stop playing .
10745	Sends a command to the player .
10746	Creates a new BroadcasterPlaylist request .
10747	Creates a new BroadcasterPlaylist with the given provider and playlist .
10748	Appends the given postfixes to the URL .
10749	Adds a query parameter to the URL .
10750	Adds a query parameter to the URL .
10751	Adds a query parameter to the URL .
10752	Add a query parameter .
10753	Returns the playlist for the given event .
10754	The launch button has been pressed .
10755	Checks if Nakamura is running .
10756	Checks if the URL exists .
10757	The browser button .
10758	Creates an image icon from a file .
10759	Launch Nakamura .
10760	Sets the value of this array to the given values .
10761	Export the data to a map .
10762	Returns the value at the given index .
10763	Returns the value of the specified key or null if the key is not found .
10764	Returns the value as an integer or the default value if the value is not an integer .
10765	Returns the value as a double or the default value if the value is not a number .
10766	Returns the value as a string or the default value if the value is not a string .
10767	Creates a command resource .
10768	Verify that the given command is a valid command .
10769	Verify capabilities .
10770	Verify the given command and capabilities .
10771	Execute a batch of statements asynchronously .
10772	Returns a set of all subclasses of the given class .
10773	Returns the set of subclasses of the given class name .
10774	Search for classes in the given location .
10775	Search the given directory for a class in the given package .
10776	Search for classes in the given jar .
10777	Returns a copy of this resource as a list .
10778	Returns the number of elements in this map .
10779	Process a packet .
10780	Returns the volume for the given event .
10781	Creates an error response with a page not found error .
10782	Creates an error response .
10783	Checks if the given Identifiable is a target .
10784	Enable or disable login .
10785	Decorates the given set .
10786	Sets the name of this roster .
10787	Updates the state of the message .
10788	Returns a collection of all groups contained in this roster .
10789	Appends the given RSM to the query element .
10790	Parse RSM .
10791	Filter a list of Identifiable objects based on the RSM response .
10792	Creates a LeavingEvent .
10793	Reloads the roster .
10794	Creates an entry in the roster .
10795	Returns a collection of all entries in this roster .
10796	Returns the presence for the user with the given resource .
10797	Set offline presences .
10798	Fire roster event .
10799	Sets the digest for the given connection ID and password
10800	Generates a resource from the given resource model and event .
10801	Creates a new player request .
10802	Returns the time passed .
10803	Register an update listener .
10804	Initializes the properties file .
10805	Reload the properties file .
10806	Parse a stream error .
10807	Parse the mechanisms element into a list of strings .
10808	Parse compression methods .
10809	Parse a packet extension .
10810	Decode a string into an object .
10811	Verify whether the given event model is valid for the given capabilities .
10812	Get playback state from resource .
10813	Returns the secret key for the given subdomain .
10814	Checks if multiple domains are allowed .
10815	Put a key - value pair into the cache .
10816	Returns the set of keys associated with this map .
10817	Returns the values associated with this map .
10818	Purge a reference .
10819	Returns the entry for the given key or null if the key is null .
10820	Returns the hash code for the given key and value .
10821	Creates a new hash entry .
10822	Checks if the event is present or not .
10823	Sets whether the player is present or not .
10824	Updates the vague .
10825	Send a message to all registered listeners .
10826	Generate the script .
10827	Initialize the output directory .
10828	Loads a property file from the classpath .
10829	Write a file to a file .
10830	Returns the progress for the given event model .
10831	Decorates a collection .
10832	Returns a collection of ServiceResolvers for the given range of IPs .
10833	Returns the config for this request .
10834	Returns the thread pool .
10835	Creates a StopMusic request .
10836	Verify whether the given event model is a target of the given player .
10837	Get a DSE cluster .
10838	Adds a connection listener .
10839	Add a packet listener .
10840	Add a packet sending listener .
10841	Notifies all listeners that a packet has been sent .
10842	Add a packet interceptor .
10843	Fires all interceptors for the given packet .
10844	Convert a property value to an array of objects .
10845	Called when the connection has been lost .
10846	Gets the current thread id .
10847	Checks if the given node is valid .
10848	Returns the key for the given value .
10849	Returns the value at the given index or null if not found .
10850	Returns the next valid node for the given index .
10851	Lookup the node at the given index .
10852	Compares two objects .
10853	Returns the least node at the given index .
10854	Returns the most node at the given index .
10855	Returns the next node that is greater than the given index .
10856	Returns the most valid node .
10857	Returns the least valid node at the given index .
10858	Copies a color from one node to another .
10859	Checks if the node is red .
10860	Returns whether the given node is black or not .
10861	Returns the parent of the node at the given index .
10862	Returns the parent node at the given index .
10863	Returns the right child of the given node .
10864	Returns the left child of the given node .
10865	Rotate the left child of the given node .
10866	Rotate the right child of the given node .
10867	Insert a node into the red black tree .
10868	Delete a node from the tree .
10869	Checks that the given object is not null and is comparable .
10870	Inserts a new value into the map .
10871	Checks if the map contains the specified key .
10872	Checks if the map contains the given value .
10873	Returns the value associated with the specified key .
10874	Removes the value associated with the given key from the map .
10875	Removes all nodes from the tree .
10876	Returns the set of keys .
10877	Returns a collection of all values stored in this map .
10878	Returns a set of all entries in this map .
10879	Copies all entries from this map to the new map .
10880	Removes expired entries from the cache .
10881	Culls the cache .
10882	Activates the proxy .
10883	Get the player request for the specified playlist .
10884	Initializes the roster store .
10885	Open roster store .
10886	Scans for a range of addresses .
10887	Returns the address of the first subnet of the given address .
10888	Export the data to a map .
10889	Import a TrackInfo from a HashMap .
10890	Adds all application classes from the given set .
10891	Execute an application .
10892	Print the list .
10893	Prints the usage information .
10894	Main method .
10895	Creates a mute event .
10896	Creates a MuteEvent from an Identification .
10897	Returns the known schema for the given schema name .
10898	Write a list of lines to a file .
10899	Checks if the application is in an executable jar .
10900	Adds an option to the command line .
10901	Get the list of schema fields .
10902	Returns the field with the given name .
10903	Get the package name from a jar entry .
10904	Maps the contents of the given map to the corresponding values .
10905	Creates an event listener .
10906	Sets the state of this iteration .
10907	Iterate over the given collection .
10908	Do the iteration .
10909	Returns the track info for the given event model .
10910	Export the data to a map .
10911	Imports the given resource into a progress object .
10912	Creates a buffered image with the specified error lines .
10913	Get image from url .
10914	Get a JSON result from the given URL .
10915	Reverses a map .
10916	Returns the result of multiplication .
10917	Start the thread .
10918	Return this object to the pool .
10919	Creates an ended event .
10920	Returns the current track .
10921	Updates the list with a new track info .
10922	Shuffles the queue .
10923	Verify that the given capabilities can be played .
10924	Export the data to a map .
10925	Escape an XML string .
10926	Called when a challenge has been received .
10927	Serialize this object to a JSON stream .
10928	Run the task .
10929	Handle an event .
10930	Join all queues .
10931	Sets the value of a property .
10932	Removes the property with the given key .
10933	Adds a principal to the list of principals .
10934	Removes a principal from the list of principals .
10935	Called when the root window is closed .
10936	Called when the user enters a presence event .
10937	Called when an event is fired .
10938	Checks if the given resource model is permanent .
10939	Sets the name of this roster .
10940	Returns true if the map contains the specified key .
10941	Returns true if this hash table contains the given value .
10942	Inserts the specified key - value pair into this map .
10943	Removes all entries from the hash table .
10944	Returns the hash code of the given key .
10945	Checks if two keys are equal .
10946	Checks if two values are equal .
10947	Ensure that the size is at least the specified capacity .
10948	Calculates a new capacity based on the proposed capacity .
10949	Creates an iterator over the entries in this map .
10950	Read data from binary stream .
10951	Register the content generators and events controllers .
10952	Initialize the add - on .
10953	Notifies all connection listeners that a reconnection has failed .
10954	Notifies all connection listeners that the connection is reconnecting in the specified number of seconds .
