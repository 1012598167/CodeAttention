0	Perform the next item on the queue .
1	Wrap an Observable .
2	Returns the elements sorted by the given comparator .
3	Creates a ConnectableObservableObservableObservableObservable with the specified scheduler .
4	Creates a new instance of the specified capacity .
5	Creates a new durable processor .
6	Try to apply a scalar function to a subscriber .
7	Creates a Streamable with a scalar value .
8	Resets this instance to null .
9	Construct a Maybe from a Completable .
10	Creates a Maybe from a single source .
11	Retries the given predicate with the given predicate .
12	Ensures that the given object is non - null .
13	Returns the identity function .
14	Creates a simple callable for the given value .
15	Returns a function that evaluates to function .
16	Returns a function that casts to the given class .
17	Creates a new unicast subject .
18	Creates a new durable subject with the specified capacity .
19	Creates a new durable subject .
20	Creates a new unicast subject .
21	Returns the current request or null if the queue is empty .
22	Get the error or throw an exception .
23	Blocks until the error occurs or the timeout occurs .
24	Drains the given QueueD queue .
25	Requests a subscription to the given subscription .
26	Post complete to the given subscriber .
27	Completes the future .
28	Returns the notification value .
29	Gets the error .
30	Checks whether the given Disposable object is valid .
31	Atomically sets the given AtomicReference to the given AtomicReference .
32	Validates the next upstream of the given Subscription .
33	Atomically sets the next AtomicReference to another AtomicReference .
34	Add a long to a long .
35	Multiply two long values .
36	Adds the specified number to the specified amount .
37	Converts a Throwable to a NullPointerException .
38	Adds an object to the end of the list .
39	Shuts down the pool .
40	Create a scheduled executor service .
41	Sets the subscription .
42	Iterates over the queue .
43	Wraps a Throwable .
44	Flattens the given exception .
45	Throws an exception if the given throwable is a Throwable .
46	Clears all resources .
47	Returns the number of resources .
48	Try to apply a scalar function to the given observable source .
49	Converts a value to an Observable .
50	Accepts the given subscriber and returns true if it is not empty .
51	Iterates over all elements in the queue and returns true if the queue is empty .
52	Start the queue .
53	Start the stream .
54	Offers an object to the queue .
55	Gets the resource .
56	Completes the stream .
57	Adds an error to the stream .
58	Complete the task .
59	Concatenates a map and returns a Streamable containing the results of applying the provided function to each element .
60	Concatenates a map into a sequence of elements .
61	Returns the elements sorted by the given comparator .
62	Wait for the consumer to finish .
63	Submits a request to the stream .
64	Add the given object to the list of subscribers .
65	remove the given publisher
66	Creates a connectable flowable from a scheduler .
67	Parses the method annotations .
68	Sets the delay in milliseconds .
69	Creates an error response .
70	Calculates the delay in milliseconds .
71	Create sample data .
72	Returns the HttpMethod corresponding to the given string .
73	Search for a user .
74	Encodes the raw password .
75	Checks if the passed encoded password matches the encoded password .
76	Checks whether the system is running or not .
77	Determines whether or not the application should be disabled .
78	Returns the Spring security version .
79	Adds an attribute exchange configurer .
80	Enable OAuth2 client .
81	Enable OAuth2 resource server .
82	Gets the channel request selector .
83	Compares the specified LDAP attribute with the specified value .
84	Retrieves an entry for the specified distinguished name .
85	Search for single attribute values .
86	Searches for multiple attribute values .
87	Search for single entry .
88	Builds a new SearchControls .
89	Recursively find all primary keys .
90	Builds the web authentication details .
91	Creates an embedded server definition .
92	Create servlet filter .
93	Creates the jaas filter .
94	Creates a whitelisted default type resolver .
95	Creates the spring security filter chain .
96	Retrieves a remember token for a given series .
97	Get the granted authorities for a collection of attributes .
98	Creates a new Cipher object .
99	Verifies that all properties are set .
100	Handle the security check .
101	Returns true if the current authentication has changed .
102	Perform authentication .
103	Checks the given number of bytes to write .
104	Maps a collection of authorities to a set of authorities .
105	Sets the login processing url .
106	Update the authentication defaults .
107	Update access defaults .
108	Map password .
109	Extract the remember me cookie from the request .
110	Encode cookie .
111	Sets the cookie .
112	Resolve the argument .
113	Gets the query string from the request .
114	get port from cas service url
115	Gets the principal .
116	Clears the session .
117	Authenticate with the given authentication token .
118	Builds the provider URL .
119	Sets the environment properties .
120	Get the full request URL .
121	Render the end tag .
122	Initialize the UserDetailsService .
123	Gets the UserDetailsService .
124	Adds the Pkce s parameters .
125	Determines if the request requires authentication .
126	Handle request required authentication .
127	proxy service ticket request .
128	Determines whether the user is authenticated .
129	Checks whether a proxy request is configured for the proxy .
130	Creates the method security expression root .
131	Gets the JWK set .
132	URL encodes a string .
133	Gets the groups based on the granted authorities .
134	Load user by assertion .
135	Get the pre - authenticated principal .
136	Concatenates the given arrays .
137	Creates a new byte array .
138	Get the granted authorities for a collection of attributes .
139	Pre - processes an attribute map .
140	Gets the grantedAuthority collection .
141	Adds the granted authorities to the result .
142	Get the pre - authenticated user principal .
143	Returns the shared object of the specified type .
144	Build the redirect URL for the given request .
145	Invoke interceptor .
146	Checks whether the given role is present .
147	Converts a list of roles to an array of roles .
148	Process an auto login cookie .
149	On login success .
150	Attempt to switch to a user .
151	Attempts to exit the login user .
152	Sets the exit user URL .
153	Display public index .
154	Process the spring security filter .
155	Decode the given string .
156	Authorizes the access expression using the access expression .
157	Check if the request is authorized .
158	Convert jwt to authorities .
159	Generates a Csrf token .
160	Display admin permission .
161	Display the addPermission for a contact
162	Add a permission
163	Delete a permission
164	Gets the role prefix .
165	Creates a new UserDetailsResourceFactory from a string .
166	Returns the values of the specified attribute .
167	Returns the first attribute value for the given name .
168	Encodes the given string into a byte array .
169	Decodes the given bytes .
170	Looks up the parameter names of the given type .
171	Add a contact .
172	Returns all config attributes that are specified by the target class .
173	Add a security method .
174	Get all config attributes
175	Checks whether the mapped method name matches the mapped method name .
176	Sets any request matcher that matches any request matcher .
177	Handle bind exception .
178	Returns a random contact
179	Remove authentication exception from session .
180	Returns the field on the given class .
181	Constructs the service URL .
182	Create the redirect url .
183	Extract the SHA prefix .
184	This method is called by the client when a request is received .
185	Checks whether a list of supplied filters is valid .
186	Returns the list of registered types .
187	Finds the cause of the given exception .
188	Register access manager .
189	Convert a collection of user authorities to a set of authorities .
190	Compares two byte arrays .
191	Sets the default failure url .
192	Sets the resolution of the hidden input .
193	Build the request URL .
194	Checks if a given URL is an absolute URL .
195	Find the OpenIDAttributeList for the given identifier .
196	Converts an identifier into an identifier .
197	Creates new entries .
198	Creates an object identity .
199	Updates the object identity .
200	Saves the request .
201	Creates a server web exchange matcher that matches one of the given patterns .
202	Returns a Matcher that matches any existing WebExchange .
203	Creates a text encryptor with a salt .
204	Creates a text encryptor .
205	Creates an encryptor that encodes a password .
206	Writes the headers to the response .
207	Determines the target URL .
208	Determine the target URL .
209	Sets the target URL parameter .
210	Gets a directory with immediate parent parent .
211	Build a distinguished name .
212	Creates the shared objects .
213	Sets the jaas using the login configuration .
214	Get current date
215	Internal method to parse a date .
216	Update cache .
217	Sets the authentication details .
218	Determines the security name for the given subject .
219	Determine the groups for the given security name .
220	Changes the password of the user .
221	Build the Dn for a group
222	Throws an exception if the session is exceeded .
223	Copy token details from source to destination .
224	Returns the chain of filters matching the given request .
225	Gets a list of filters from the specified url .
226	Gets the application context .
227	Gets the full dn .
228	Sets the session attributes .
229	Creates a preemption scheme for the given user name and password .
230	Adds a list of filters .
231	Adds a filter .
232	Creates a new authentication scheme .
233	Creates an authentication scheme .
234	Creates a new authentication scheme .
235	Create a proxy for the given URI .
236	Prints the response body to the given stream .
237	Define a redirect configuration .
238	Sets default charset to charset charset .
239	Sets default object mapper .
240	Sets the Jackson object mapper configuration .
241	Sets the log config .
242	Specify session config .
243	Sets object mapper config .
244	Sets the mock config .
245	Sets the xml config .
246	Sets the encoder config .
247	Sets the header config .
248	Specify the async config .
249	Sets the mock mvc config .
250	Define a mock mock config .
251	Set parameter config .
252	Sets the config .
253	Sets the certificate auth settings for all certificates .
254	Declare an XML path config .
255	Sets the declared namespace .
256	Perform a request .
257	Sets the request headers .
258	Set proxy port
259	Sets the control name .
260	Sets a header .
261	Sets basic authentication .
262	Start ntlm .
263	Creates a new headers object .
264	Resets this mock context .
265	Sets the specified header .
266	Build the rest .
267	Fires a cookie matching the given matcher .
268	Fires a cookie matching the given matcher .
269	Fires a cookie matching the expiry date .
270	Fires a cookie matching the given matcher .
271	Fires a cookie matching the given pathMatcher .
272	Apply a secured cookie matcher .
273	Fires a cookie matching the specified matcher .
274	Fires a cookie matching the given matcher .
275	Fires a cookie matching the specified matcher .
276	Expect that the given header matches the given expected value .
277	Expect the given header to be expected .
278	Expect the given cookie with the expected value .
279	Sets the proxy configuration .
280	Returns a path config for the number return type .
281	Gets the default parser configuration .
282	Default implementation for default logging .
283	Enable logging of request and response .
284	Creates a new HTTP request based on the given URI and the given method .
285	Sets the default boundary .
286	Add an attribute .
287	Add a header .
288	Add a multi - part control request .
289	Add additional result handlers .
290	Sets the parameter with the given name and value .
291	Create a new HttpClientConfig with the given map of parameters .
292	Returns a new HttpClientConfig instance with the specified HttpClientFactory .
293	Sets the http multipart mode .
294	Gets the result at the given path .
295	Get integer value .
296	Get a byte value as a byte .
297	Get short value .
298	Get the float value .
299	Get a double value .
300	Gets the long value .
301	Gets the list .
302	Gets the map .
303	Get object from path .
304	Sets the body of the request .
305	Add a cookie to the request .
306	Add a parameter to the request .
307	Add a parameter to the request .
308	Sets the form params for this request .
309	If the stream matches the given matcher matches the given matcher .
310	Create a cookies object from the given cookie .
311	Clean up data from the backing map .
312	Index all explicit bindings .
313	Gets the binding .
314	Converts a constant string into a constant string .
315	Cleans up the binding .
316	Removes a failed jit binding .
317	Gets the internal dependencies .
318	Creates an uninitialized binding .
319	Gets all parameters .
320	Binds the injector .
321	Binds a Logger instance .
322	Returns true if the given member is invalid .
323	Returns true if two methods are overridden .
324	Initializes the delegate .
325	Returns the type of the provider .
326	Resolve all the types of the given types .
327	Canonicalize the type literal for the given type .
328	Prepare built - in converter classes .
329	Returns the canonical version of the given class loader .
330	Returns true if the classloader has the same version of cglib .
331	Returns true if the given member is public .
332	Makes sure that the key has the same type .
333	Request an injectable reference .
334	Validate any ongoing injections .
335	Creates a new instance of the class .
336	Returns a servlet request that dispatches the servlet .
337	Creates a factory using the given key and key .
338	Make injectable .
339	Normalize the given path .
340	Returns the annotation instance for the given annotation type .
341	Returns true if the specified annotation type is retained at runtime .
342	Find the scope annotation for the given annotations .
343	Returns the key for the given type and annotations .
344	Returns the name of the given key .
345	Initializes the provider .
346	Add a direct type binding .
347	Get a constructor in the cache .
348	Checks whether the given interceptor is scope .
349	Creates a real map binder .
350	Gets the key for the given key .
351	Creates a new instance .
352	Writes the message to the source stream .
353	Returns a module for the given module .
354	Get all persisted methods .
355	Checks if a type is not fully qualified .
356	Returns true if the given constructor has parameters matching the given parameters .
357	Returns the dependencies for the ctor .
358	Removes all known dependencies from the given set .
359	Determine if the dependency is valid for an optimization .
360	Creates a binding from the given method .
361	Invoke a method .
362	Creates an error message for the given key .
363	Installs a real set binder .
364	Gets the key for a new binding .
365	Returns the next filter for the given request .
366	Returns true if the given constructor has at least one annotation .
367	Gets the inner constructor .
368	Gets the internal dependencies .
369	Factory method for module annotations .
370	Gets the annotation for the given method .
371	Returns the number of lines associated with the given member .
372	Initialize the lookup .
373	Creates a callable that wraps the provided callable .
374	Transfer a callable to a callable .
375	Validates the given value .
376	Returns the member injector .
377	Creates a new member injector .
378	Gets the injectors .
379	Returns a new Key .
380	Creates a strategy for the given annotation .
381	Creates a strategy for the given annotation type .
382	Determines the stack trace of the given throwable .
383	Gets the binding source .
384	Formats the given list of error messages .
385	Creates a new message with the given message format and arguments .
386	Creates a new message with the specified cause and message format .
387	Creates a new message with the given cause .
388	Convert an object to an ElementSource .
389	Checks whether the given class should be skipped .
390	Determine the stack trace for the module classes .
391	Main entry point .
392	Push a new dependency .
393	Push the given key to the context .
394	Creates an initializable instance .
395	Creates an instance of the given provider .
396	Called when a connection is received .
397	Adds a processor for a specific event type .
398	Get the result of the future task .
399	Closes the given throwable .
400	Register a processor .
401	Register a default processor .
402	Returns the processor associated with the specified command code .
403	Tries to get a Url for the given URL .
404	Read protocol code .
405	Gets all connection pools .
406	Scans the pool and scans all pools .
407	Get a connection from the pool and create it if not already exists .
408	Create a connection and handle it if necessary .
409	Remove a task from the pool .
410	Reloads the given connection pool if necessary .
411	create a connection
412	Close a connection .
413	Invoked when the connection is closed .
414	Close the connection .
415	Sets the specified attribute to the specified value .
416	register user processor
417	Register a UserProcessor
418	Dispatch request to user processor
419	deserialize request command
420	Pre - processes a remoting context .
421	Print timeout log .
422	Debug log .
423	Process a message .
424	Invoke a remoting command .
425	On invocation .
426	Convert a BitSet to a byte value .
427	Convert an int to a BitSet .
428	Adds a new task to the list .
429	Stop the process .
430	Creates a remoting command .
431	Filter a list of connections
432	Monitor connections .
433	Close fresh connections .
434	Gets a boolean property .
435	Log an info message .
436	Is request timeout .
437	Get user processor by class name .
438	Get a random connection from the list of connections .
439	Returns the value for the given key .
440	Get a property by key .
441	Resolve response object .
442	Returns the response object .
443	Convert responseCommand to throwable .
444	detail error message
445	Create RpcServerException .
446	Print the connection trace log .
447	Creates a new EventLoopGroup with the specified number of threads .
448	Parse the remote address .
449	Parse the local address of a channel .
450	Parse the remote IP address .
451	Returns the hostname of the remote address .
452	Returns the IP address of the given channel .
453	Returns the remote port of the given channel .
454	Returns the local port of the given channel .
455	Returns the IP address of the given socket address .
456	Adds a connection to this pool .
457	Try to close the given connection .
458	Gets the connection .
459	Register custom serializer for className
460	Get custom serializer by class name
461	Register custom serializer for command code .
462	Get custom serializer for command code .
463	Start the connection monitor .
464	Checks whether the remote address is connected .
465	Initialize the write buffer water mark .
466	Factory method for framing data .
467	Write to socket .
468	Sets the code .
469	Validates the payload .
470	Update the message payload .
471	Checks whether the given protocol contains the requested protocol .
472	Translate payload length limit .
473	Translate singlepack packet size .
474	Generate final key .
475	Process a continuous frame .
476	Processes a binary message .
477	Log runtime exception
478	Processes a frame .
479	Called when the current frame is finished .
480	Called when the frame is not finished .
481	Process a close frame .
482	Checks whether the buffer limit is exceeded .
483	Gets the payload from the ByteBufferList .
484	Returns the total size of the byte buffer list .
485	Translates the HTTP request .
486	Translate the first line of HTTP client .
487	Decode data .
488	Closes the connection .
489	Sends a connection to the server .
490	Generates an HTTP response for the given error code .
491	Send text to the web socket .
492	Reset the connection .
493	Start the connection .
494	Returns the port .
495	Send the handshake .
496	Sets the connection lost timeout .
497	Stops the connection lost timer .
498	Start the connection lost timer .
499	Start a timer for a connection lost .
500	Executes the connection lost .
501	Cancels a connection lost timer .
502	On websocket handshake .
503	Sends a ping frame .
504	Stop the selector .
505	Returns the port .
506	Perform additional read .
507	Accepts a connection .
508	Handle a read .
509	Handle a write .
510	Setup the selector and register it .
511	Ensure that the selector is closed .
512	Do the shutdown .
513	Returns the socket associated with the given connection .
514	Broadcasts data to all clients .
515	Broadcasts text to all clients .
516	Broadcast data to clients .
517	Adds the frames to the map .
518	Transfer a byte buffer to destination .
519	Start entity manager .
520	Get the entity manager for the given name .
521	Registers a callback for the EntityManager .
522	Converts an array of arguments to a Scala buffer .
523	Wraps the given arguments if necessary .
524	Retrieves the message for the specified key and arguments .
525	Retrieves a localized message by key and arguments .
526	Checks if the specified language is defined .
527	Returns the messages for the given collection of languages .
528	Returns the messages for the given request .
529	Set the language of the result
530	Returns the bindings for the given modules .
531	Adds bindings for the given modules .
532	Sets the bindings for this application .
533	Specifies the overrides of the given modules .
534	Define the overrides for the given modules .
535	Specify the overrides of the specified bindings .
536	Disable the given modules .
537	Calls the request .
538	Calls the request .
539	Get existing file .
540	Returns a binding for the given class .
541	Creates a new tuple with the specified values .
542	Static factory method for creating a tuple .
543	Returns the executor for the given execution context .
544	Creates a default JPAC config .
545	Creates a default JPAC config .
546	Creates a new instance of JPAConfig .
547	Creates a string flow of the given callback name
548	Creates a flow of JSON nodes .
549	Adds a constraint validator .
550	Creates a new instance of the given class .
551	Returns a method matching the given method name and parameter types .
552	Handles a client error .
553	Handles a bad request .
554	Handler for forbidden pages .
555	Handles not found response .
556	Handle a server error .
557	Logs an internal error message .
558	Converts a throwable to a useful exception handler .
559	Called when an error is encountered .
560	Handles an error .
561	Creates a documentation handler from a list of files .
562	Creates a DocHandler from a directory .
563	Creates a builder from a directory and a base directory .
564	Creates a documentation handler for a directory and a jar file .
565	Creates a documentation handler from a jar file .
566	Consume the data from a Materializer .
567	Creates a new HttpEntity from content .
568	Creates a new HttpEntity from a string .
569	Create a new HttpEntity from a source .
570	Sets the status code .
571	Sends a response to the given status code .
572	Creates a response with the given status code .
573	Sends an input stream to the given stream .
574	Checks status code .
575	Get user by id
576	Gets the preferred language .
577	Returns a unique call .
578	Returns a new call with the specified fragment .
579	Returns the absolute URL of the given request .
580	Returns the web socket URL for the given request .
581	Creates a function that executes a connection runnable .
582	Create a function that invokes ConnectionCallable .
583	Creates a server for the given router .
584	Returns the JSON representation of the given object .
585	Creates an object from a JSON node .
586	Parses the given string .
587	Parses an input stream .
588	Computes the relative path to targetPath .
589	Returns the canonical form of the given URL .
590	Returns a tuple that can be used for displayable constraints .
591	Returns a tuple containing the displayable constraint .
592	Maximum timeout for the given stage .
593	Checks if two classes are assignable .
594	Parses the given cron expression
595	Get the next cron interval for a given date
596	Creates a new WS client .
597	Creates a new GuiceApplicationBuilder .
598	This method is used to show a problem
599	Saves a session in the session .
600	Saves a message to flash .
601	Qualifies a binding with the specified instance .
602	Specifies a binding that satisfies the specified annotation .
603	Returns a binding to the given implementation .
604	Returns this binding to the given provider .
605	Returns a binding to the given supplier .
606	Returns the binding to the given key .
607	Returns the underlying binding to the given class .
608	Returns the available languages .
609	Returns the preferred language for the given application .
610	Creates an instance from a map of evolutions .
611	Creates a reader for the default population .
612	Removes all the evidence from the database .
613	Adds a configuration loader to the application .
614	Adds a loader to the application .
615	Loads the application with the given modules .
616	Adds the given modules to the Guice application .
617	Loads the given modules .
618	Loads bindings from the application .
619	Creates a new GuiceApplicationBuilder .
620	Encode a cookie into a string .
621	Gets the entity manager .
622	Get the current stack of entity managers .
623	Pushes an entity manager to the stack .
624	Pass a flow to a flow .
625	Applies a flow to a flow .
626	Creates a flow for actor reference .
627	Converts the given arguments into an unmodifiable list .
628	Fills a form with the given value .
629	Returns the global errors .
630	Get the errors as JSON .
631	Returns the value for the given key .
632	Fill this form with the given value .
633	Parse the given text into an object of type T .
634	Parse the given field .
635	Prints the given object .
636	Print field descriptor .
637	Prints the given t .
638	Registers a converter for the given type .
639	Register a SimpleFormatter for the given class .
640	Register a formatatter for the given type .
641	Encodes the given cookie into a string .
642	Retrieves a list of nodes matching the specified path .
643	Converts a Java List to a sequence .
644	Creates a sequence from an array of objects .
645	Create a varargs array from an array .
646	Creates a Mapped WebSocket Acceptor accepting JSON messages .
647	Creates a WebSocket accepting or Flow .
648	If the given object is a public private or private .
649	Get the promotion promotion cost for a class .
650	Compute the total cost of a class and a given executable arguments .
651	Calculates the cost of an object transformation between two classes .
652	Gets the message at the specified key .
653	Gets the message at the specified key .
654	Creates a database from the database .
655	Creates a parallel Sorter .
656	Perform a quick sort .
657	Merge sort .
658	Invoke a private method .
659	Cast a numeric type .
660	Loads an argument .
661	Emit a field .
662	Push a zero or primitive type to the stack .
663	Unbox or zero .
664	Process an array type .
665	Compacts a null value to the stack .
666	Resolves all the bridge methods .
667	Gets all methods in the superclass matching the specified methods .
668	Filter constructors from class .
669	Sets the superclass .
670	Get field by names
671	Add method signature .
672	Compute the cardinality .
673	Sets the naming policy .
674	Finds all methods in a method array .
675	Resolve a base path .
676	Reads a string from a file .
677	Sets the host .
678	Creates a new request with the given method and destination .
679	Start a connection to the given destination .
680	Start a GET request
681	Create a POST request to a destination
682	Start a PUT request
683	Start a PATCH request
684	Start a DELETE request .
685	Start a HEAD request
686	Start a TRACE request
687	Start a OPTIONS OPTIONS request
688	Sets the path .
689	Set the given cookies .
690	Adds a query parameter to the request .
691	Add query map .
692	Set the query string .
693	Get the query string .
694	Get the host URL .
695	Sets the basic authentication header .
696	Sets the host header .
697	Builds the request .
698	Send and receive the response .
699	Remove a range of the first handler .
700	Returns the length of the exception table .
701	Collect all action interceptors .
702	Collect action filters .
703	Collect all action results .
704	Collect all actions .
705	Sets a simple property .
706	Gets the index property .
707	Extract the name of this property .
708	Get the writer .
709	Set an object reference .
710	Get object reference by name .
711	Lookup object reference .
712	Returns the table descriptor for the given table reference .
713	Find table descriptor by column reference
714	Returns the table alias for the given table reference .
715	Register a table reference .
716	Lookup table reference .
717	Register a hint .
718	Serializes the given value to the given JSON context .
719	Inject attributes .
720	Inject parameters into target request .
721	Inject uploaded files .
722	Convert property name to column name .
723	Convert column name to property name .
724	Convert column name to column name .
725	Store value .
726	Prepare the value for the given object .
727	Gets all wrappers .
728	Resolves the wrapper for the given class .
729	Creates a wrapper for the supplied wrapper class .
730	Converts a path to a system separators .
731	Gets the path .
732	Splits a filename .
733	Return relative path .
734	Registers the specified madvoc component .
735	Add an action to the webapp .
736	Start the web application .
737	Register default defaults .
738	Register the madvo components .
739	Exclude jar files .
740	Includes the included jar files .
741	Adds entries to class scan .
742	Exclude classes from class scanner .
743	Scans a jar file .
744	Scan classpath .
745	Returns the signature of a class .
746	Scan for classes .
747	Start scan .
748	Create a new transaction .
749	Returns the scope of the specified type .
750	Get or create a new scope .
751	Register a given scope for the given scope .
752	Decode char array .
753	Prepare a CSRF token .
754	Ensure that the given set of tokens is valid .
755	Checks whether a given token is contained in the session .
756	Creates a BeanCopy from an object .
757	Creates a copy of this bean .
758	Visits a property .
759	Initializes the table reference .
760	Resolve the scope .
761	Register a new Petite bean .
762	Registers a bean .
763	Removes a bean by type .
764	Resolve bean names for the given type .
765	Registers an injection point for the bean definition .
766	Registers a property injection point .
767	Register a SetInjectionPoint for the given bean name and property .
768	Registers the Jetite method injection point .
769	Register init methods .
770	Register all destroy methods .
771	Registers a produite provider .
772	Registers a provider .
773	Iterate over all beans of the given type .
774	Define parameters .
775	Invoke action .
776	Resolves java version .
777	Push an integer onto the stack .
778	Check that the argument index is valid .
779	Get advice field name .
780	Create advice method name .
781	load special method arguments .
782	Load static method arguments .
783	Load all the virtual method arguments .
784	load a method argument .
785	Store a method argument .
786	Prepare the return value .
787	Create a key for method signatures .
788	Generates a new array .
789	Store the given component into an array .
790	Get the encoding for the content type .
791	Returns true if the given flags are empty .
792	Resolve the Authorization header from the request .
793	Adds a header to the response .
794	Prepares the given file with the given MIME type .
795	Set the content - disposition header .
796	Get all cookies with the given name .
797	Read request body from request .
798	Read request body from stream .
799	Stores the context path in the context .
800	Stores the current context path in the servlet context .
801	Checks if is a GET parameter .
802	If the parameter array is null return null .
803	Copies all parameters from the servlet request to attributes .
804	Invoke the given fragment .
805	Renders body fragment .
806	Renders the given body fragment to a string .
807	Invoke all init methods .
808	Call destroy method .
809	Create a new bean instance .
810	Inject bean parameters .
811	Rewrite the given action path .
812	Add a header .
813	Put a value into the map .
814	Put a base property .
815	Put profile property .
816	Get profile property .
817	Resolve macro values for the given value .
818	Extracts all profiles from the profile .
819	Reads the next word from the stream .
820	Hashes a password .
821	Returns true if the given plaintext matches the given plaintext .
822	Copies all boundary bytes from the stream to the given output stream .
823	Copy max bytes from the stream to the output stream .
824	Parses an action .
825	Resolve action config .
826	Detect and register method alias .
827	Read action interceptors .
828	Read action filters .
829	Read package action path .
830	Read method action path .
831	Parse method alias .
832	Create an action runtime .
833	Set the last modified date of the request .
834	Apply an advice to the target class .
835	Inject target into proxy .
836	Visits an annotation .
837	Resolves the real name for the given json name .
838	Resolves real name .
839	Looks up the type data for the given class .
840	Looks up the type data for the given type .
841	Find the type data for the given type .
842	Resolve JSON name for given type .
843	Resolves the real name of the given type .
844	Get file content .
845	Copy the bootstrap methods .
846	Sets the major version and class name .
847	Puts the constant pool into the given byte vector .
848	Puts the bootstrap methods .
849	Adds a constant field ref .
850	Adds a constant reference to a constant .
851	Adds a constant reference to the constant pool .
852	Adds a constant reference .
853	Adds an integer constant .
854	Adds an integer or float constant .
855	Adds a constant pool entry .
856	Adds a constant or double .
857	Adds a constant name and type to the constant pool .
858	Adds a constant name and type .
859	Adds a string to the constant pool .
860	Adds a string constant .
861	Adds a constant method handle to the constant pool .
862	Adds a constant method handle .
863	Adds a constant dynamic reference .
864	Adds a constant invoke dynamic method .
865	Adds a dynamic reference to the constant pool .
866	Adds a dynamic reference to the constant pool .
867	Adds a constant .
868	Adds a UTF8 reference .
869	Adds a bootstrap method .
870	Adds a merged type .
871	Returns the hash value for the given name .
872	Removes all elements from the cache .
873	Returns all values for the given name .
874	Returns an iterator over the entries in this iteration .
875	Returns a list of all entries in this map .
876	Adds the capacity to the buffer .
877	Appends a sequence of characters to the buffer .
878	Visit an annotation .
879	Visit the end of the chain .
880	Create the first chain delegate chain delegate .
881	Create the first chain chain delegate .
882	Parses the given string .
883	Pushes a field to the current path .
884	Configure the servlet context .
885	Execute the method .
886	Get all the field descriptors .
887	Override this method to customize the bean definition .
888	Convert jtx transaction mode to DB transaction mode .
889	Read property .
890	Copies all entries from the given map to the given map .
891	Appends a buffer to this buffer .
892	Writes the contents of the stream to the given writer .
893	Writes the contents of the stream to the given output stream .
894	Writes the stream to the output stream .
895	Gets a string value .
896	Returns the integer value associated with the specified key .
897	Gets a long value .
898	Gets a double value .
899	Gets a float value .
900	Get a value from the map .
901	Adds a string value to the object .
902	Use a folder to read a folder .
903	Receive messages from folder .
904	Updates the flags of a received mailbox .
905	Close a folder if opened .
906	Looks up a parameter with the given name .
907	Creates an alias for the target string .
908	Perform validation action .
909	Adds a new violation .
910	Sets the mime type .
911	Sets the raw data download file .
912	Sets the target stream .
913	Sets the target class name .
914	Sets the target class .
915	Processes the class input stream .
916	Create the proxy .
917	Define the proxy .
918	Create a new proxy instance .
919	Dumps the class in debug folder .
920	Sets the from address .
921	Sets the recipient address .
922	Add a recipient to the email .
923	Sets the replyTo address .
924	Sets the cc address .
925	Adds a text message .
926	Adds an HTML message with the specified encoding .
927	Adds a header to the request .
928	Returns the value of the specified property .
929	Returns the boolean value of the given name .
930	Returns the integer value for the given name .
931	Get long value .
932	Get the resolved parameters .
933	Serialize a key and value .
934	Looks up the path for a given alias .
935	Resolve an alias .
936	Resolve a result path .
937	Resolve a result path .
938	Gets the last index of a dot .
939	Gets the last index of a dot .
940	Returns the index of the dot after a slash .
941	Strips the last camel word .
942	Resolves the name of the database .
943	Resolve column descriptors .
944	Initializes this instance with the given key and tweak .
945	Multiply two elements .
946	Mix a single entry .
947	Schedule a key schedule
948	Initializes the key message with the specified tweak message .
949	Encrypt a block .
950	Converts a byte array into a long array .
951	Removes any bounding box from a string .
952	Get the path to the method .
953	Reads a zlib file .
954	Copies a file to a file .
955	Ungzip a file .
956	List the zip file .
957	Unzip a file to a destination directory .
958	Adds a file to a ZIP output stream .
959	Adds content to a ZIP output stream .
960	Returns the field descriptor for the given name or null if not found .
961	Returns the PropertyDescriptor associated with the given name and declaration .
962	Sets the request bundle name .
963	Sets the locale in the session .
964	Gets the session locale from the session .
965	Filters parameters for bean name .
966	Set profile profiles .
967	Read a long from the buffer at the given offset .
968	Reads the contents of the input stream into a byte array .
969	Reads a label .
970	Returns the bytecode offset for a type annotation .
971	Read the number of elements .
972	Read verification type info .
973	Read bootstrap methods attribute .
974	Get the ctor descriptors .
975	Returns the Ctor descriptor for the given arguments .
976	Gets the request map .
977	Creates the request map .
978	Converts an array to a long array .
979	Initialize the decora manager .
980	Adds a consumer to the file .
981	Adds the search path .
982	Add a search path .
983	Includes the given patterns .
984	Exclude matching patterns .
985	Adds a path to the list .
986	Finds all the files .
987	Initialize the rules .
988	Returns an iterator over the files .
989	Resolves the bean wiring for the given type .
990	Resolves the bean name .
991	Creates a new PrintWriter .
992	Returns the output stream .
993	Returns the class name of this type .
994	Returns the descriptor for the given constructor .
995	Gets the method descriptor .
996	Returns the method descriptor for the given method .
997	Append descriptor .
998	Returns the size of this object .
999	Gets the number of arguments and return them .
1000	Set the rollback only .
1001	Commit or rollback .
1002	Rolls all the resources .
1003	Request a resource .
1004	Pop the name .
1005	Write a string .
1006	Writes a character .
1007	Write char sequence .
1008	Sets the parsing error log level name .
1009	Initialize region .
1010	Checks whether the value contains the given string .
1011	Registers a pseudo function .
1012	Looks up a pseudo function by name .
1013	Visits this ASM .
1014	Create an annotation for the given description .
1015	Create static init block .
1016	Create proxy constructor .
1017	Process all super methods .
1018	Returns the index of the last entry in the given range .
1019	On the given string .
1020	Replace ASM instructions .
1021	Collect the attributes of the first field .
1022	Registers default values .
1023	Register a new SQL type .
1024	Returns the SqlType for the given class .
1025	Lookup SqlType by class .
1026	Create a socks4 proxy .
1027	Creates a proxy for SOCKS5 .
1028	Creates a proxy for HTTP proxy .
1029	Get the total number of thread transactions .
1030	Get the total number of threads with the given status .
1031	Associates a transaction with the given transaction .
1032	Ensures that a transaction is part of the source transaction .
1033	Looks up the resource manager for the given resource type .
1034	Creates a proxy object .
1035	Append method name .
1036	Updates the given text with the given size .
1037	Returns a pretty string representation of the given object .
1038	Converts string to camel case .
1039	Formats a string into a paragraph .
1040	Converts tabs to spaces .
1041	Escapes the given string .
1042	Unescapes a string .
1043	Get bean by type .
1044	Get bean by name .
1045	Initialize bean definition .
1046	Invoke provider method .
1047	Register a bean .
1048	Sets a bean property .
1049	Get bean property .
1050	Shutdown the context .
1051	Resolve the parameters for a given method .
1052	Render the body .
1053	Returns the value of the property .
1054	Ends the parsing .
1055	Creates an element node .
1056	Adds a tag .
1057	Remove last child node if empty .
1058	Returns the query string .
1059	Gets the class name .
1060	Calculates the number of items to the given count .
1061	Iterate collection .
1062	Iterate over an array .
1063	Replaces all occurrences of a string with a sub string .
1064	Replaces all occurences of a string with the given character .
1065	Replaces all occurrences of the specified substring with the given substrings .
1066	Replaces the first occurrence of the given string with the given string .
1067	Replaces the first occurrence of the specified substring with the given character .
1068	Replace the last occurence of the given string .
1069	Replaces the last occurence of the given character with the given character .
1070	Remove a sub string from a string .
1071	Removes the specified character from the given string .
1072	Checks if all the given strings are empty .
1073	Checks if the given strings are blank .
1074	Convert an object to string array .
1075	Changes the first character of the string .
1076	Turns a string into title .
1077	Replaces the specified character with the specified character .
1078	Returns true if the given string starts with the specified substring .
1079	Returns true if the specified string ends with the specified character .
1080	Count the number of occurrences of a substring in the source string .
1081	Checks if two strings are equal .
1082	Returns the index of the first non - whitespace in the given string .
1083	Removes the leading character from the string .
1084	Strip trailing character from string .
1085	Returns a string with the specified character .
1086	Strips the specified character .
1087	Strips a character from a string .
1088	Cleans all the provided strings .
1089	Remove leading whitespace from string .
1090	Remove whitespace from string .
1091	Returns the index of the first region in the string .
1092	Joins a collection into a string .
1093	Joins an array of objects using the given separator .
1094	Convert source charset to new charset name .
1095	Compares the specified character at the specified index .
1096	Surround the given string with the given prefix and suffix .
1097	Prefix a string .
1098	Appends the given string to the given string .
1099	Cut the string from the beginning of the string .
1100	Cut the substring of the string from the beginning of the string .
1101	Removes the prefix .
1102	Cut the suffix of a string .
1103	Cut the string around the given prefix and suffix .
1104	Inserts a string into a string .
1105	Creates a string representation of the given source string .
1106	Reverses a string .
1107	Returns the longest common prefix between two strings .
1108	Finds the common prefix of the given strings .
1109	Shorten the given string .
1110	Converts a string to upper case .
1111	Removes all quotes from the given string .
1112	Converts a byte array to a hexadecimal string .
1113	Gets the bytes .
1114	Detect quote character .
1115	Visits an object .
1116	Visits an enum .
1117	Visits an annotation .
1118	Register a type .
1119	Register entity .
1120	Get the entity descriptor for the given type .
1121	Creates an entity instance of the specified type .
1122	Sets the target interface .
1123	Inject target field into wrapper
1124	Looks up all the annotated properties of the given type .
1125	Detect database and configure database .
1126	Closes the output stream .
1127	Writes a single byte to the output stream .
1128	Processes the session id from the request .
1129	Gets the name .
1130	Serializes the header to a byte array .
1131	Write the mail source to a file .
1132	Writes the mail to the provided output stream .
1133	Append argument .
1134	Prepend argument type .
1135	Change return type .
1136	Strip the text .
1137	Register a type converter for the given type .
1138	Lookup a type converter for the given type .
1139	Selects a CSS query .
1140	Process a collection of nodes .
1141	Processes the root node .
1142	Selects the first node matching the query .
1143	Walk through all descendants recursively .
1144	Walk through the given root node .
1145	Adds the given node to the result list .
1146	Filter a CSS selector .
1147	Unpack a compressed string .
1148	Tries to fill zz buffer .
1149	Performs a page query .
1150	Remove select .
1151	Removes toFromFrom .
1152	Removes the last order by clause .
1153	Decodes the given HTML string .
1154	Detects the name of the first character in the input string .
1155	Builds the order by clause .
1156	Builds the page s page sql .
1157	Resolve columns and properties .
1158	Find column descriptor by column name .
1159	Find by property name .
1160	Returns the property name for the given column .
1161	Returns the column name for the given property .
1162	Returns the id value of the property .
1163	Sets the id property .
1164	Returns the key value for the given object .
1165	Appends a string to the band .
1166	Sets the index .
1167	Expand the capacity .
1168	Calculates the length of the array .
1169	Creates message containing the source bean definition .
1170	Creates a proxy bean .
1171	Invoke the body of the body .
1172	Initialize the map .
1173	Checks whether a file should be accepted .
1174	Sets the watch file .
1175	Start the watch service .
1176	Called when a directory is changed .
1177	Adds an enumeration to the registry .
1178	Returns the size of the field info .
1179	Puts the field information into the given byte vector .
1180	Creates a target for the given value .
1181	Writes the value of an injection point .
1182	Parse page content .
1183	Parse page content .
1184	Writes the decoded page content .
1185	Write region .
1186	Start the server .
1187	Runs a process .
1188	Gets the store .
1189	Creates an output stream for the response .
1190	Initializes the hint .
1191	Append entity alias .
1192	Append column name .
1193	Adds a new rule .
1194	Apply rules to the given value .
1195	Process include .
1196	Processes the given value .
1197	Gets the pseudo class name .
1198	Adds all elements from a collection to another .
1199	Finds the insertion point for the given object .
1200	Binds an annotation configuration to the given annotation type .
1201	Registers a new action config .
1202	Lookup the action configuration for the given action type .
1203	Register action config for action type .
1204	Sets system mail properties .
1205	Validates the given object .
1206	Find the last table node in the given node .
1207	Fixes all child elements in the dom element .
1208	Registers the session beans .
1209	Gets the session map .
1210	Initialize this class .
1211	Adds a new advice method .
1212	Registers the bundle .
1213	Adds a value to the profile .
1214	Extract profiles and add them to the list .
1215	Helper method for adding a single value to the map .
1216	Convert a typed descriptor to a class name .
1217	Convert a type reference to a type reference .
1218	Convert a typed descriptor to a signature .
1219	Returns the typeref for the given type .
1220	Adds a list of consumers to the consumer .
1221	Creates a collection .
1222	Converts an object to single element collection .
1223	Convert value to collection .
1224	Convert a collection to a collection .
1225	Convert a primitive array to a collection .
1226	Adds a new line number .
1227	Makes the given method visitor visit this label .
1228	Puts a forward reference .
1229	Adds the forward reference to the stack .
1230	Resolves an ASM reference .
1231	Updates the subroutine with the given subroutineId .
1232	Populates the subroutine of this subroutine .
1233	Compare digits .
1234	Fixes the accent .
1235	Puts a byte into the buffer .
1236	Put two byte values into the buffer .
1237	Put a short value into the buffer .
1238	Put a 16 - bit integer into the buffer .
1239	Puts two byte arrays .
1240	Puts an int into the buffer .
1241	Puts two byte - value pairs into the buffer .
1242	Puts a long into the buffer .
1243	Puts a byte array into the buffer .
1244	Enlarges the byte array .
1245	Authenticate user via http session .
1246	Authenticate user via token .
1247	Authenticate user via basic auth .
1248	Finds the default message for the given key .
1249	Get a resource bundle by name .
1250	Gets the element at the given index .
1251	Set the id of the entity .
1252	Saves the given entity to the database .
1253	Updates the given entity .
1254	Updates the property with the specified name .
1255	Updates the property with the specified name .
1256	Finds an entity by its ID .
1257	Finds an entity by its name and value .
1258	Finds one entity by criteria .
1259	Delete an entity by id .
1260	Delete an entity .
1261	Counts the number of entities matching the given type
1262	Adds a property to the entity type .
1263	Decrements the specified property by its name .
1264	Finds related objects for the given source object .
1265	Lists all entities of the given type .
1266	Removes all attributes .
1267	Returns a set of all the attributes of this object .
1268	Set the value associated with the specified key .
1269	Removes an object from the cache .
1270	Get the current stack trace .
1271	Get the stack trace of a Throwable .
1272	Get the stack trace of the given Throwable .
1273	Gets the exception chain .
1274	Returns the stack trace of the given exception .
1275	Convert the stack trace to string .
1276	Builds the message with the given message and cause .
1277	Unwraps the given exception .
1278	Registers the class as a producer .
1279	Adds a new component class .
1280	Get the system class loader .
1281	Gets the resource as stream .
1282	Get the resource as stream .
1283	Returns a stream for the given class .
1284	Gets a stream of a class .
1285	Creates a new route chunk .
1286	Find or create a child child .
1287	Parse the request .
1288	Convert value to collection .
1289	Invoke the setter method .
1290	Sets the array value for the given array property .
1291	Creates a bean property .
1292	Extract the type of the bean property .
1293	Stop authentication cookie .
1294	Initializes the auth token .
1295	Converts a local date to a date .
1296	Converts a LocalDateTime to a Calendar .
1297	Define a proxy .
1298	Adds a check to the list .
1299	Resolve a validation context for a class .
1300	Adds all property checks for the given target class .
1301	Collect the annotation checks .
1302	Collect annotation checks .
1303	Copy default check properties from annotation .
1304	Encode a URI component .
1305	Encodes the given string .
1306	Encodes the given URI scheme .
1307	Encodes the given URI host .
1308	Encodes the given port .
1309	Encodes a URI path .
1310	Encodes the given query string with the given encoding .
1311	Encodes the given URI query parameter with the given encoding .
1312	Encodes the given fragment .
1313	Get the properties of the class .
1314	Get all PropertyDescriptors .
1315	Retrieves all the cookies that have been set .
1316	Unzip this response .
1317	Closes the connection .
1318	Checks whether a given reference scope is accepted .
1319	Prints the routes .
1320	Encrypt the given content .
1321	Decrypt encrypted content .
1322	Convert map to bean .
1323	Generate a list of objects .
1324	Sets the value of a property .
1325	Generate map .
1326	Compares two entity column descriptors .
1327	Set default header .
1328	Sends a request .
1329	Sends a request .
1330	Add default headers to the request .
1331	Read cookies from http response .
1332	Adds the cookies to the http request .
1333	Send an email .
1334	Sets the subject s subject .
1335	Sets the sent date .
1336	Sets the headers from an email message .
1337	Sets the email addresses .
1338	Sets the recipients .
1339	Adds the body data to the message .
1340	Sets the part content .
1341	Create a body part from an email attachment .
1342	Get content type from data header .
1343	Saves a result set .
1344	Closes all the ResultSets .
1345	Closes the query .
1346	Closes the query .
1347	Sets the number of rows that should be fetched .
1348	Sets the maximum number of rows .
1349	Executes the given update .
1350	Execute count query .
1351	Gets the generated columns .
1352	Gets the query string .
1353	Creates a proxy for the given aspect class .
1354	Returns a collection containing the elements of the given iterator .
1355	Creates a stream from the given iterator .
1356	Compares two objects
1357	Sets the default wiring mode .
1358	Print a log message .
1359	Returns the caller class name .
1360	Shorten a class name .
1361	Exclude the given types .
1362	Serializes given object to target .
1363	Serialize an object to a string .
1364	Clones the given serializable object .
1365	Writes an object to a file .
1366	Reads an object from a file .
1367	Serialize an object to a byte array .
1368	Convert a byte array to an object .
1369	Resolve the list of mapped types .
1370	Creates the table names .
1371	Reads the value of the column .
1372	Cache the result set of entities .
1373	Resolve provider definitions .
1374	Convert table name to table name .
1375	Validate connection .
1376	Renders the view .
1377	Locates target .
1378	Returns a writer for this response .
1379	Returns the output stream .
1380	Write content to response .
1381	Sets the content type .
1382	Print string .
1383	Login the current user .
1384	Returns the JSON object as a JSON object .
1385	Performs login via BasicAuth .
1386	Logout user .
1387	Converts a URL to a file .
1388	Create a directory if it does not exist .
1389	Create a directory if it does not exist .
1390	Copies source file to destination .
1391	Copy a directory .
1392	Moves a file to a destination directory .
1393	Copy directory .
1394	Delete a directory .
1395	Reads a UTF - 8 encoded string from a file .
1396	Read chars from a file .
1397	Writes a char array to a file .
1398	Write string to file .
1399	Append a string to a file .
1400	Read a number of bytes from a file .
1401	Writes a byte array to a file .
1402	Append a byte array to a file .
1403	Copies src file to dest .
1404	Delete a file or directory .
1405	Creates a temporary directory .
1406	Checks whether a file is binary .
1407	Checks if srcDir is identical .
1408	Checks if srcFile is identical .
1409	Prints usage information for the given command .
1410	Resolves the method with the given name .
1411	Registers an action .
1412	Register a new path alias .
1413	Moves to the next iteration .
1414	Creates a CharArraySequence from the given char array .
1415	Executes the proxy .
1416	Returns true if the input string matches the upper case .
1417	Returns a CharSequence containing the given range of characters .
1418	Returns an array of URLs for a class .
1419	Sets the bcc address .
1420	Register a new TypeJsonSerializer for the given type .
1421	Looks up a serializer for the given type .
1422	Parses an input stream from an input stream .
1423	Get the value of a parameter .
1424	Returns the values for the given parameter name .
1425	Get file upload .
1426	Get uploaded files .
1427	Initialize this instance .
1428	Parse the given string .
1429	Finds the index of the macro end of a template .
1430	Count the number of escape characters in the given template starting at the given index .
1431	Build the query string .
1432	Parse a query string into a multi map .
1433	Prepare header parameter name .
1434	Extract media type from content type .
1435	Render the given node as HTML .
1436	Returns the inner HTML of the given node .
1437	Configure the parameters from the servlet context .
1438	Resets this object .
1439	Enable lazy parser .
1440	Replies the mapped type for the given path .
1441	Parses the given string into a list of objects .
1442	Parses JSON string .
1443	Resolve the given value .
1444	Skip object .
1445	Parse a string .
1446	Parse string content .
1447	Parse a unicode character .
1448	Parse unquoted string content .
1449	Parse a number .
1450	Parse array content .
1451	Create empty constructor
1452	Create simple wrapper wrapper .
1453	Resolve the raw type name .
1454	Resolve reference from property name .
1455	Resolve references from the given values .
1456	Read all references from an annotation .
1457	Build the default bean references .
1458	Build default reference references .
1459	Removes duplicate names .
1460	Converts a string array of references to BeanReferences .
1461	Converts an annotation into an array of BeanReferences .
1462	Runs the joyy with the given consumer .
1463	Finds a method in a class .
1464	Finds a constructor for the given class .
1465	Resolve all interfaces of a class .
1466	Compare two classes .
1467	Force access to the given object .
1468	Creates a new instance of the given class using the given parameters .
1469	Get all superclasses of a class
1470	Returns the child class of the given instance .
1471	Returns the JAR file corresponding to the given class .
1472	Sleep for the given number of milliseconds .
1473	Sleep the current thread .
1474	Wait until object is available .
1475	Creates a thread factory that uses the specified name and priority .
1476	Get the value from the supplier .
1477	Visits a parameter .
1478	Visits an annotation .
1479	Visits a type annotation .
1480	Visits a parameter annotation .
1481	Visits a field instruction .
1482	Visits a method instruction .
1483	Visits an invoke dynamic instruction .
1484	Visits a jump instruction .
1485	Invoke a multi - sized array instruction .
1486	Visit a try catch block .
1487	Visits a local variable annotation .
1488	Convert the properties to a writer .
1489	Reads the data from the input stream .
1490	Moves to the next element .
1491	Moves cursor to the next element .
1492	Joins two arrays of arrays .
1493	Joins two arrays of arrays .
1494	Resizes the given array to a new array .
1495	Appends the specified element to the end of the array .
1496	Removes the component from the buffer .
1497	Gets the index of the first occurrence of the specified value .
1498	Gets the index of the first object in the array .
1499	Returns the index of the first occurrence of the specified byte array .
1500	Enable XML mode .
1501	Parses the given content .
1502	Parses the lagsto parser .
1503	Compute the maximum stack and local variables .
1504	End the current basic block .
1505	Populate attribute set .
1506	Inject target object .
1507	Registers a pseudo class .
1508	Looks up a pseudo class by name .
1509	Invoke an action .
1510	Returns a list of all bean property names .
1511	Visit all properties from the source map .
1512	Returns true if the property matches the specified rule .
1513	Resolve all methods of the given class .
1514	Reads the filter parameters from the given object .
1515	Sends the bundle file to the response .
1516	Looks up the bundle file for the given bundle ID .
1517	Looks up the gzip bundle file .
1518	Registers a bundle .
1519	Creates the digest for the given source string .
1520	Create a bundle .
1521	Clears all bundle files .
1522	Fixes CSS URLs .
1523	Updates column for entity reference .
1524	Creates the table ref name .
1525	Get a database session .
1526	Convert an object to single element .
1527	Parses the given signature .
1528	Resolve all set injection points .
1529	Checks whether the given property type should be ignored .
1530	Open a connection to the database .
1531	Open a transaction .
1532	Closes the transaction .
1533	Commits the transaction .
1534	Rolls a transaction .
1535	Creates a Properties object from a file .
1536	Creates a Properties object from a String .
1537	Loads properties from a string .
1538	Create a subset of all properties that start with the specified prefix .
1539	Creates a Properties object from the classpath .
1540	Get a property from a map .
1541	Resolve all variables in the given Properties object .
1542	Resolve a property .
1543	Resolve scope .
1544	Get jtx transaction mode .
1545	Registers annotations .
1546	Read transaction annotation values from method .
1547	Returns true if the node matches the selector .
1548	Match element .
1549	Returns true if the node matches the selector .
1550	Unescapes the given value .
1551	Build the packages .
1552	Clones this node .
1553	Removes this node from its parent .
1554	Adds a child node to this node .
1555	Inserts a child node at the specified index .
1556	Inserts a new node before the reference .
1557	Inserts a new node into the reference list .
1558	Inserts a new child node after the reference .
1559	Inserts a new node into the parent .
1560	Removes all child nodes .
1561	Find a child node with the given name .
1562	Returns the child nodes that match the given predicate .
1563	Checks whether this node has the same name .
1564	Initializes the child element Nodes .
1565	Initialize sibling names .
1566	Initialize child nodes .
1567	Change the owner document of the given node .
1568	Returns the previous sibling name .
1569	Get the text content of this node .
1570	Get the HTML representation of this element .
1571	Gets the inner HTML .
1572	Visit all child nodes .
1573	Gets the CSS path .
1574	On decora tag .
1575	Process id attribute .
1576	Define the decora tag .
1577	Adds a proxied aspect .
1578	Adds a root package to the list .
1579	Add root package of action class
1580	Returns the root package for the given action path .
1581	Resolves the validation message .
1582	Remove duplicate names .
1583	Add props file .
1584	Invoke the consumer for each target .
1585	Iterate over all targets of the given scope .
1586	Iterate over all the targets of the given scope .
1587	Extract the values of the target
1588	Create target targets .
1589	Creates an instance of the class method argument .
1590	Invoked when a session is created .
1591	Notifies all registered listeners about a session .
1592	Adds the given object to the list .
1593	Adds the given JsonArray to this object .
1594	Removes a position from the list .
1595	Resolves target .
1596	Handle target not found .
1597	Convert value to string .
1598	Resolve the action filter .
1599	Gets the pseudo function name .
1600	Resolves all properties of the given type .
1601	Creates socket proxy socket .
1602	Returns the number of Attribute objects .
1603	Returns the set of all actions .
1604	Checks if the given character is one of the given chars .
1605	Find the index of the first occurrence of the specified match .
1606	Returns the index of the first occurrence of the specified match .
1607	Add command line arguments .
1608	Sets environment variable .
1609	Starts the process .
1610	Invoke listener .
1611	Copy the values from a frame .
1612	Returns the abstract type for the given type .
1613	Gets the abstract type from the descriptor .
1614	Set the input frame from the api format .
1615	Returns the abstract type for the given index .
1616	Sets the abstract type for the given local index .
1617	Push the given abstract type onto the output stack .
1618	Push the abstract type .
1619	Pop the output stack .
1620	Pops the type from the descriptor .
1621	Adds the abstract type .
1622	Returns the initialized type for the given abstract type .
1623	Puts the abstract type into the given byte vector .
1624	Removes all entries that have expired .
1625	Schedules pruning .
1626	Visits a module .
1627	Visit an ASM . 1
1628	Visit an outer class .
1629	Visits an annotation .
1630	Visit an ASM . 1 . 1
1631	Visit an inner class .
1632	Visits a field .
1633	Get thread session .
1634	Close the current thread .
1635	Creates the execution array .
1636	Invoke the action method .
1637	Read request body .
1638	Calculates the first index of the first page .
1639	Calculates the first item index of the page request .
1640	Returns true if the specified integer matches the specified value .
1641	Converts a char array to a raw byte array .
1642	Returns the index of the first occurrence of the specified match .
1643	Resolve node name .
1644	Resolve the attribute name .
1645	Render an attribute .
1646	Load props from file .
1647	Load props from file .
1648	Load props from input stream .
1649	Load props .
1650	Load props from map .
1651	Load properties from classpath .
1652	Returns the value of the profile .
1653	Sets a property .
1654	Extract properties from a map .
1655	Extract properties .
1656	Extract sub props from target map .
1657	Gets inner map .
1658	Adds an inner map .
1659	Resolve the active profiles .
1660	Get all profiles .
1661	Returns the set of profiles for the specified property key .
1662	Adds a property injection point .
1663	Adds a SetInjectionPoint to the set .
1664	Adds a method injection point .
1665	Add init method points .
1666	Add destroy method points .
1667	Resolve proxy class .
1668	Inject target object into wrapper
1669	Gets the target wrapper type .
1670	Finds the field descriptor for the given field .
1671	Gets the raw type .
1672	Resolves the key type .
1673	Resolves the component type .
1674	Creates a json result .
1675	Create a JsonResult from an exception .
1676	Resolve HTTP method from method name .
1677	Returns true if the given string matches the pattern .
1678	Resolves the given class name .
1679	Resolve resource loading .
1680	Tries to load a class .
1681	Resolves a resource with the given name .
1682	Wait for the current thread .
1683	Detects annotation type .
1684	Build an InjectionPoint .
1685	Visits the declared properties .
1686	Returns an array of URLs for the specified class .
1687	Sets the bean .
1688	Updates the bean .
1689	Loads the property descriptor .
1690	Returns the getter method .
1691	Returns the setter for the property .
1692	Connect to database .
1693	Adds an iterator to the iterator .
1694	Print logo .
1695	Stops the joyserver .
1696	Create socket .
1697	Creates and returns the SSLSocket .
1698	Get the default SSLSocketFactory .
1699	Get socket factory .
1700	Generates a random string of characters .
1701	Creates a random string .
1702	Generates a random number of characters .
1703	Creates a new array instance .
1704	Inject value into target object .
1705	Convert value to target type .
1706	Visit the provider .
1707	Creates default type cache .
1708	Put a new object into the map .
1709	Get all MethodDescriptors .
1710	Resolve the IP address for the given hostname .
1711	Parses an IP address as an int .
1712	Checks to see if the string is valid .
1713	Resolve the hostname of the given IP .
1714	Download the bytes from the given URL .
1715	Downloads a string from a URL .
1716	Downloads a file from a URL .
1717	Injects all targets .
1718	Invokes the outject request .
1719	Connects to the given host and port .
1720	Connects to specified host and port .
1721	Gets the index of the primitive class name .
1722	Loads a class using the given class loader .
1723	Loads a class by component type .
1724	Shuts down all managed resources .
1725	Returns a binary search for the given element .
1726	Creates a binary search for the given array .
1727	Exclude the given strings from the rule .
1728	Includes specified strings .
1729	Includes all properties of the specified class .
1730	Sets the start tag .
1731	Register a component .
1732	Resolve column s SQL type .
1733	Process SQL .
1734	Create a new ResultSetMapper .
1735	Finds the generated key of the given type .
1736	Populate generated keys .
1737	Create bean wrapper bean .
1738	Sets the bean .
1739	Sets the query parameters .
1740	Sets the specified objects .
1741	Inserts a new chunk after the previous chunk .
1742	Lookup entity type .
1743	Find entity by column reference .
1744	Resolve table name .
1745	Resolve the class .
1746	Append missing space .
1747	Returns an enumeration of the file parameter names .
1748	Includes the given page in the given request .
1749	Returns the URL of the request .
1750	Gets the request URI .
1751	Resolve parameter names for action class .
1752	Start the Petite container
1753	Stops the petite container .
1754	Applies a subject to the email .
1755	Filter by message id .
1756	Filter from email address .
1757	Method allow to filter by email address .
1758	Method allow to find a cc recipient .
1759	Filter by bcc address .
1760	Applies a filter to the email filter .
1761	Adds a flag to the filter .
1762	Method allow to filter emails by the given operator .
1763	Method allow to filter emails by the given operator .
1764	Applies a size filter to the email filter .
1765	Apply an AND filter to the email filter .
1766	Apply an OR filter to the email filter .
1767	Method allow to find not equal emails .
1768	Concatenate the given search term .
1769	Encodes a byte array into Base32 .
1770	Convert value to array .
1771	Checks whether the request is eligible for gzip .
1772	Validates target object .
1773	Validates the given target object .
1774	Add a profile to this profile .
1775	Sets the enabled profiles .
1776	Match profiles .
1777	Parses the request body .
1778	Returns the number of milliseconds since 1970 .
1779	Add two Julian dates to this date .
1780	Subtract a new Julian date from another date .
1781	Set the value of an integer .
1782	Initialize parser .
1783	Emit a comment .
1784	Report an error .
1785	Creates a hash of pkkdfdf2 .
1786	Generate a PBKDF2 key .
1787	Converts a hex string into a byte array .
1788	Resolve provider definitions for given type and name .
1789	Sets the name of the attachment .
1790	Sets the content id of the email .
1791	Resolve the MIME type .
1792	Parse a type .
1793	Compute the size of the attribute size .
1794	Writes the module attributes .
1795	Decodes the given source string .
1796	Decode query string .
1797	Start the database .
1798	Check connection provider .
1799	Visits a method .
1800	Read the end of the class .
1801	Create a MethodSignature .
1802	Converts a set of elements into a CSV string .
1803	Converts a line into a String array .
1804	Resolve Ctor injection point .
1805	Creates a class reader for the proxy advice .
1806	Returns a cached class reader for the given advice advice .
1807	Encrypt a string .
1808	Decrypt a string .
1809	Get a logger by name .
1810	Sets the cookie name .
1811	Create an action request .
1812	Creates the bean wrapper bean .
1813	Destroy bean .
1814	Shutdown the bean .
1815	Retrieves all messages from the destination folder .
1816	Entry point for the ClusteredServiceContainer .
1817	Runs the report .
1818	Prints an error message .
1819	Print rate .
1820	Map a file to a mapped byte buffer .
1821	Closes this archive .
1822	Handles the work .
1823	Compute the position of the log .
1824	Inserts a message to the queue .
1825	Append the pad for the current partition .
1826	Closes the control session .
1827	Poll for error response
1828	Sends a stop request to the archive .
1829	Event handler for a new image
1830	Event handler for an unavailable image .
1831	Read status indicator .
1832	Create status indicator reader .
1833	Sets the limit .
1834	Appends the given source buffer to this buffer .
1835	Retrieves the control from the subscription
1836	Creates a new buffer with the specified report file length .
1837	Creates a snapshot of the underlying stream .
1838	Creates a default header .
1839	Write a key - value pair into the buffer .
1840	Adds a label buffer to the message .
1841	Connects to Aeron archive .
1842	Attempt to connect to the buffer .
1843	Adds a close session .
1844	Adds a stream to the channel .
1845	Adds stop recording to the channel .
1846	Creates a replay request .
1847	Adds a stop message to the buffer .
1848	Assembles a list of recordings .
1849	Lists the recordings for the given URI .
1850	List recording .
1851	Creates a new recording request .
1852	Request the recording position for the given recording id .
1853	Gets the stop position for a specific message .
1854	Listing Subscriptions
1855	Returns true if this channel matches the specified udp channel .
1856	Returns the address of the destination .
1857	Returns a human readable description of this UdpChannel .
1858	Adds a destination to the image .
1859	Inserts a new packet .
1860	Find control toggle type .
1861	Put parameter .
1862	Gets the channel tag .
1863	Gets the entity tag .
1864	Add a session id to a channel
1865	Gets the tag value .
1866	Append padding to the header writer .
1867	Updates the publisher limit .
1868	Allocate a new UnsafeBufferPosition .
1869	Returns the label name for the given type id .
1870	Returns the number of frames available for the given offset .
1871	Clears this URI .
1872	Validates the parameters .
1873	Sets the prefix .
1874	Sets the media media .
1875	Sets control mode .
1876	Sets the term length .
1877	Sets the term offset .
1878	Sets the linger .
1879	Opens a datagram channel .
1880	Closes the connection .
1881	Checks whether the buffer is valid .
1882	Receives the given buffer from the receive channel .
1883	Registers a new retry action .
1884	Process timeouts from the pool .
1885	Converts the given status to a human readable string .
1886	Allocate a counter .
1887	Reset the buffer .
1888	Validates the buffer .
1889	Computes the length of the given vectors .
1890	Calculates the size of the producer window window .
1891	Validates the socket buffers .
1892	Validates the given page size .
1893	Validate session id range .
1894	Validate the configuration .
1895	Set the error code .
1896	Resets this leader .
1897	Encodes the given array of cluster members .
1898	Add publication publications to the channel .
1899	Close all cluster members .
1900	Checks if the cluster members are active .
1901	Gets the quorum position .
1902	Reset the log position for each cluster .
1903	Checks whether or not the specified position has been reached .
1904	Checks if the given members are on the full term
1905	Checks if the cluster members have the highest priority vote .
1906	Determine the member .
1907	Validates that the members are different
1908	Returns true if two clusters have the same endpoint .
1909	Checks if the given candidate is among the cluster members .
1910	Checks if the given candidate is a quorum candidate .
1911	Checks to see if a member has a duplicate endpoints .
1912	Returns the index of the member with the given id .
1913	Removes a member from old members array .
1914	Gets the high member id .
1915	Map an existing CNC file .
1916	Check if driver is active .
1917	Returns true if the driver is active .
1918	Checks if the driver is active .
1919	Requests that the driver terminates the given directory .
1920	Returns the number of bytes in the buffer at the specified offset .
1921	Write the length of the frame to the given buffer .
1922	Writes a frame type .
1923	Writes the flags to the given buffer .
1924	Writes the given term offset to the given buffer .
1925	Write the term id into the buffer .
1926	Returns the counter id of the given recording id .
1927	Returns the counter id for the given session id .
1928	Get recording id .
1929	Checks if the given counter is active .
1930	Adds an application specific feedback message .
1931	Reloads the contents of the file .
1932	Returns the last term .
1933	Create a recovery plan for the given archive archive .
1934	Create a recovery plan from a list of snapshots .
1935	Appends a term to the cluster .
1936	Appends a snapshot to the cluster .
1937	Commits the log position .
1938	Write a tombstone entry .
1939	Closes the subscription .
1940	Inserts a vector into the buffer .
1941	Unblock the given log buffer .
1942	Gets the channel .
1943	Adds a channel to the image .
1944	Validates the given length .
1945	Validates the given page size .
1946	Sets the count of active term count .
1947	Computes the position of the active term .
1948	Compute the log length .
1949	Stores the default frame header .
1950	Applies default header to the metadata buffer .
1951	Tries to trigger a new log entry .
1952	Initialise the tail with the given term id .
1953	Calculates the offset of the raw tail .
1954	Get the long tail of the metadata buffer .
1955	Compares raw tail .
1956	Encodes the given token buffer into the given buffer .
1957	Allocate a counter .
1958	Returns the counter id of the given counters .
1959	Returns true if the given counter has a replay flag .
1960	Get snapshot recording id .
1961	Converts a set of flags to a character array .
1962	Sets the channel channel .
1963	Offers a buffer to the cluster .
1964	Wrap the given buffer .
1965	Commit the frame length field .
1966	Abort the frame .
1967	Main method to start the media driver .
1968	Closes all resources .
1969	Computes the position of the frame .
1970	Allocate a counter for the given service id .
1971	Returns the counter id of the given service id .
1972	Creates a snapshot of the underlying stream .
1973	Allocate an AtomicCounter .
1974	Closes this buffer .
1975	Dispatch recordingDescriptor to consumer .
1976	Adds a new slab .
1977	Set a byte at the given index .
1978	Adds a statistics object .
1979	Calculates the row ranges .
1980	Convert array type to array type .
1981	Convert a StructType into a group type .
1982	Annotate the given message .
1983	End the previous bit packed run .
1984	Read protocol .
1985	Reads the footers from a file .
1986	Reads a list of footer from a file .
1987	Reads the footer from the given file .
1988	Read next row group .
1989	Reads the next row group from the current block .
1990	Reads a dictionary .
1991	Adds a new writer to the memory manager .
1992	Removes a writer .
1993	Updates the total allocation size .
1994	Register a call back callback .
1995	Start the stream .
1996	Start a new block .
1997	Start a new column .
1998	Write a dictionary page .
1999	Write a data page .
2000	Writes a single column .
2001	End a block .
2002	Copies the contents of the input stream to the given position .
2003	Finalize the footer .
2004	Merge all files from a list of files .
2005	Merge the parquet files .
2006	Writes the metadata file .
2007	Merge all file meta data .
2008	Read the value .
2009	Returns true if the given schema is null .
2010	Returns the first occurrence of the given objects .
2011	Makes the given string representation of the given type .
2012	Extracts the thrift meta data from the extra meta data .
2013	Creates a ThriftMetaData object from ThriftClass .
2014	Returns the extra meta data .
2015	Writes a null value .
2016	Writes a new page .
2017	Initialize data from a stream .
2018	Allocate values buffer .
2019	Checks an enum index .
2020	Calculate bit widths for a delta block buffer .
2021	Throws an exception if the given exception is an instance of the given type .
2022	Get statistics based on the type name
2023	Returns a new builder for reading the given primitive type .
2024	Merge statistics .
2025	Gets the non null value .
2026	Create a new TaskAttemptContext .
2027	Invoke the given method .
2028	Writes the members to a StringBuilder .
2029	Merge the fields of this group type .
2030	Initializes the counter from a reporter .
2031	Get the underlying filter .
2032	Gets all footers of the given collection of files .
2033	Generates a list of split splits .
2034	Write message .
2035	Validates the parquet mapping .
2036	Serialize a message descriptor .
2037	Create a new DirectCodecFactory
2038	Append missing required fields .
2039	Checks the set .
2040	Read file meta data .
2041	Closes the record writer .
2042	Set the schema for the job write .
2043	Adds a primitive type .
2044	Asserts that the given column is valid
2045	Check the given value .
2046	Creates a schema mapping from an arrow schema .
2047	Creates a schema mapping from a parquet schema .
2048	Creates a schema mapping for the arrow schema and parquet schema .
2049	Write a HeaderV2 header .
2050	Skip records until max definition is found .
2051	Write an object to the conf .
2052	Removes the entry from the cache .
2053	Puts a new value into the cache .
2054	Returns the current value associated with the specified key .
2055	Write value .
2056	Write value without conversion .
2057	Set the glob pattern .
2058	Output content to the file .
2059	Open a stream for the given filename .
2060	Creates an unbound record filter that matches the given predicate .
2061	Convert a StructType to a MessageType
2062	Creates a wrapper for a list type .
2063	Creates a group type that represents a list of elements .
2064	Gets the merged key - value metadata .
2065	Creates a parquet split from the given input split .
2066	Get fields by name .
2067	Resolve schema access .
2068	Gets the input files .
2069	Validate parquet files .
2070	Get input files from a partition directory
2071	Returns a page filter that filters the specified start position .
2072	Creates a list consumer .
2073	Initialize the partition information .
2074	Merge all the data in the given tuple .
2075	Calculates the sum of the given tuple
2076	Read a struct .
2077	Read a map entry .
2078	Write an integer into the input stream .
2079	Reads a 32 - bit integer from the given buffer at the given offset .
2080	Set the Avro schema for the job .
2081	Creates a stream if it doesn t exist .
2082	Create a new pipeline stage bean .
2083	Create a new stage bean .
2084	Create a list of interceptors .
2085	Create an interceptor .
2086	Parse the given schema string into an Avro Schema object .
2087	Convert milliseconds to days .
2088	Get the Avro schema from a record .
2089	Updates the configuration .
2090	Returns the length of the stream .
2091	Copies blobstore resources to the pipeline .
2092	Resets this statement .
2093	Reports the health of a thread .
2094	Register a thread with the given name .
2095	Stores a controlhub configuration into a file .
2096	Login a webCredential .
2097	Determines the version of the given library .
2098	Upgrade the library if needed .
2099	Upgrade the project .
2100	Upgrade services if needed .
2101	Upgrade the given stage .
2102	Get the fields to null .
2103	Returns true if the given name is a system class .
2104	Appends the specified element to the delegate .
2105	Inserts the given element and returns it if it is evicted .
2106	Returns the value of the given key or null if no value is present .
2107	Add the list of reported errors if needed .
2108	Get descriptor for message type .
2109	Get all file descriptors from a set of file descriptors .
2110	Populate the default values map .
2111	Returns a descriptor for a specific message type .
2112	Convert protobuf protobuf protobuf to SdcFieldMap .
2113	Convert sdc field to protobuf message .
2114	Creates protobuf message .
2115	Converts a list of configs to a Jersey config bean .
2116	Check connection .
2117	Convert the given type to Field type .
2118	Create a Field from a RowResult
2119	Intercept all records .
2120	Returns the text .
2121	Adds missing configurations to a stage .
2122	Parses the response .
2123	Add the response headers to the record .
2124	Writes the response header to the record .
2125	Write response header to record header .
2126	Saves metadata file .
2127	Configure the client .
2128	Parses the response headers .
2129	Increments the source offset .
2130	Parses the results of a single page .
2131	Adds the response headers to the response .
2132	Resolve the request headers .
2133	Process response .
2134	Returns true if the given property is defined .
2135	Converts a DataParserException to a DataParserException .
2136	Converts a DataGeneratorException to a DataGeneratorException .
2137	Gets the credentials .
2138	Get PreviewInfo for a pipeline
2139	Copy characters to buffer .
2140	Remove duplicate duplicates .
2141	Empty batch .
2142	Find the next main line in the given chunk .
2143	Resolves a live file chunk .
2144	Closes the connection .
2145	Escape a string .
2146	Get flow control settings
2147	Returns the channel provider .
2148	Puts a batch into the data channel .
2149	Compile expression .
2150	Digest the original expression .
2151	Adds a dictionary from an input stream .
2152	Adds the dictionary to the reader .
2153	Stops all aggregators .
2154	Rolls a new data window .
2155	Serialize object to string .
2156	Deserialize a string into an object .
2157	Deserialize an object from a file .
2158	Write the record .
2159	Resolves an EL expression .
2160	Generate inner field from the original hash map .
2161	Gets the table name .
2162	Gets the database name .
2163	Gets internal field .
2164	Returns the location of the given metadata record .
2165	Get custom location boolean .
2166	Get Avro schema from Avro schema .
2167	Gets the data format from the given metadata record .
2168	Creates a schema metadata field builder .
2169	Validate partition information .
2170	Generates the partition path from the given partitions .
2171	Serialize the given schema to HDFS .
2172	Set parameters .
2173	Get configuration .
2174	Parses a time string into a date .
2175	Format template .
2176	Start a batch .
2177	Checks if the record contains the required fields .
2178	Removes autogated field names .
2179	Send onRecordErrorException to handler
2180	Parses the given jar name and returns the corresponding dependency .
2181	Parse a URL .
2182	Get instance of CouchbaseConnector .
2183	Closes this client .
2184	Validate config .
2185	Extracts a label from a string .
2186	Verifies that the given config definition exists .
2187	Reads the contents of the secret from the specified path .
2188	Determine the operation from a record .
2189	Helper method to write document .
2190	Build subdoc fragment .
2191	Returns the SQL string for the alter table .
2192	Configure SASL authentication .
2193	Takes the next batch of messages and returns it .
2194	Commits the given offset to the control channel .
2195	Sends an error to the control channel .
2196	Injects the given stage into the given object .
2197	Get definitions .
2198	Gets the publisher definition .
2199	Converts column name to upper case .
2200	Formats the given value .
2201	Get information about a pipeline
2202	Creates a draft fragment .
2203	Get pipeline information
2204	Imports a pipeline fragment .
2205	Get directory path .
2206	Get the operation code from record .
2207	Get field path .
2208	Get an enriched event from the queue .
2209	Returns the current runner .
2210	Gets the runner for the given idle time .
2211	Returns the runner .
2212	Destroys the pipeline .
2213	Validates that the container is not destroyed .
2214	Checks if a stream exists .
2215	Get the last shard id .
2216	Process the queue .
2217	Handle SQL exception .
2218	Get the column hash for a record
2219	Compare two files .
2220	Retrieves the PID from the given process .
2221	Validate and extract fields to hash map .
2222	Returns a UserGroupInformation for the given user .
2223	Rolls the current stats .
2224	Creates a snapshot of the active stats .
2225	Ensures that the directory exists .
2226	Writes all records in the given batch .
2227	Writes a batch of records to a batch .
2228	Writes an item to the database .
2229	Triggers no more data event .
2230	Detects a new partition .
2231	Update record for record .
2232	Process a single data item .
2233	Returns true if two stages have the same version
2234	Main entry point .
2235	Configure auth and build client .
2236	Resolve the request headers .
2237	Get the HttpMethod .
2238	Fill null types .
2239	Returns the null value of the field from the record .
2240	Load schema from registry .
2241	Registers a schema .
2242	Load schema from registry .
2243	Gets the schema id from the schema .
2244	Load schema from registry .
2245	Writes the schema id .
2246	Detects the schema id from a byte array .
2247	Get default values from schema
2248	Parses the given message payload and returns the result .
2249	Log the information about the report .
2250	Gets the bad records .
2251	Initializes the generator .
2252	Gets the outgoing edge vertices for the given vertex .
2253	Gets the direct edge vertices for the given vertex .
2254	Serialize offset map .
2255	Deserialize offset map .
2256	Queues a report to the server .
2257	Gets a report .
2258	Checks if the check point is pointing to the HDFS path .
2259	Saves the offsets to the main file .
2260	Deletes the given blob .
2261	Handle error handling .
2262	Handles a blob upload .
2263	Returns the live file reader .
2264	Releases the reader .
2265	Sets the DPM base URL .
2266	Add default header .
2267	Parse a date from a string .
2268	Escapes the given string .
2269	Gets the client .
2270	Initialize a connection
2271	Get the meta table metadata
2272	Create bulk informer
2273	Creates an event builder .
2274	Build a schema from the given fields .
2275	Returns the SQL code corresponding to the given Oracle code .
2276	Adds jars to the job configuration .
2277	Add jars to the job configuration .
2278	Check field order by name .
2279	Checks if condition expression matches given field name
2280	Gets the offset of a file offset .
2281	Starts the premain method .
2282	Get the parallelism of Kafka partitions .
2283	Runs a BigQuery query .
2284	Convert a list of fields to a map .
2285	Get the description of a table
2286	Validates that the table accepts inserts .
2287	Get the column type for a given field
2288	Checks whether the given field is nullable .
2289	Get the schema of a table
2290	Get the properties of a table
2291	Returns the class for the given type name .
2292	Initialize AerospikeClient
2293	Get topic name
2294	Updates the configuration and upgrade the data format .
2295	Returns an InputStream for reading this file .
2296	Returns an OutputStream for writing .
2297	Checks whether the file exists .
2298	Parse the permissions string into an FsPermission .
2299	Validates that all the services are available .
2300	Creates a SimpleAggregator .
2301	Gets the aggregator unit .
2302	Creates and returns the aggregator data .
2303	Create a groupBy aggregator .
2304	Start the data provider .
2305	Stops the aggregator .
2306	Rolls all aggregators to the given time window .
2307	Acquires a login manager .
2308	Release the login manager .
2309	Convert glob to regex .
2310	Lists all the objects in the Amazon S3 bucket .
2311	Stop this pipeline .
2312	Generate empty batches for idle runners .
2313	Creates a failure snapshot .
2314	Converts a record to a BoundStatement
2315	Set configuration .
2316	Generate lookup key .
2317	Handle partitions turned off .
2318	Reads a line .
2319	Rolls a new usage timer .
2320	Enable DPM
2321	Disable DPM authentication .
2322	Normalize DPM base URL .
2323	Retrieves a user token
2324	Logs user auth token
2325	Updates the app auth token file .
2326	Update dpm properties .
2327	Create a schema for the field .
2328	Generates a simple schema for the field .
2329	Returns the decimal scale or - 1 if not found .
2330	Returns the default value for the given schema .
2331	Initialize metrics if needed .
2332	Compares two files .
2333	Get the index of a specific group .
2334	Gets the names of the group .
2335	Returns true if the given string is an escaped character .
2336	Returns true if the given string is an escaped character .
2337	Checks if a character is inside a class .
2338	Count the number of open brackets in the given string starting at the given position .
2339	Extract group information from a named pattern .
2340	Replaces all occurences of the given pattern with the given replacement string .
2341	Handle GET request
2342	Refresh the schema for the given schema and table .
2343	Returns true if entry is expired .
2344	Gets the offset .
2345	Fast forward forward .
2346	Create empty stage for detached stage .
2347	Converts string to number .
2348	Parses a part .
2349	Parses the values from a byte buffer .
2350	Looks up the primary keys of the table .
2351	Creates custom field mappings .
2352	Returns the SQL type name for the given field type .
2353	Returns the table name .
2354	Sets the primary keys .
2355	Handle SQL exception .
2356	Process a batch of stages .
2357	Prepare a batch context .
2358	Finish processing the given batch context .
2359	Flattens the entire record .
2360	Create a DetachedStageRuntime .
2361	Execute the action .
2362	Gets the columns to use for the given operation .
2363	Get the condition for a given partition column
2364	Validate the given offset .
2365	Get the list of bundle definitions for the given list of generators .
2366	Get non - empty args array
2367	Gets the operation .
2368	Converts bytes to display format .
2369	Scans a live file .
2370	Get the number of pending files to be processed .
2371	Checks if a given name is whitelisted .
2372	Checks the set of versions against the expected versions .
2373	The main entry point for testing .
2374	Propagate runtime configuration .
2375	Validate the report description .
2376	Creates a new JdbcRecordWriter .
2377	Create a new record writer .
2378	Convenience method to upgrade the configuration .
2379	Extract named groups .
2380	Commit the given offset .
2381	Creates an embedded SDC .
2382	Sets the fields in the record .
2383	Get a list of all pipelines that have changed .
2384	Returns a new remote data collector .
2385	Creates a gauge .
2386	Gets the columns to use for the given operation .
2387	Generate header attributes for a file .
2388	Validate a record .
2389	Delete old parquet file .
2390	Get an input stream for the given record .
2391	Get a DatumReader for the given input stream .
2392	Write parquet file .
2393	Validates the input field .
2394	Validates the input field .
2395	Checks that the input field decoder is decrypted .
2396	Checks that the input field decrypted is decrypted .
2397	Prepare field encrypt .
2398	Applies the given pattern to this matcher .
2399	Appends the replacement string to the given string buffer .
2400	Returns a map of all named groups .
2401	Replaces all the properties with the given replacement string .
2402	Ensures that the avro schema exists .
2403	Get the value of a global variable .
2404	Create the start event record .
2405	Create a stop event record .
2406	Fix offset .
2407	Extract value from field .
2408	Execute a query to add a partition partition to the table .
2409	Executes the setTblin table setter .
2410	Retrieve the description of a database .
2411	Executes the given query .
2412	Executes a query .
2413	Executes the pipeline .
2414	Iterates through all pipes .
2415	Returns the offset commit trigger for this pipeline .
2416	Returns true if the pipeline error is stopped .
2417	Accepts a consumer .
2418	Gets the insert id for a record .
2419	Gets value from field .
2420	Sets a fragment in record .
2421	Sets the document in the given record .
2422	Sets a single value in a record .
2423	Handles an S3 file data format .
2424	Returns true if the given gtid exists for the given transaction
2425	Sets the current thread s context supplier .
2426	Sets the stage creator .
2427	Closes the user .
2428	Sets the exceptions list .
2429	Replace variables in SDC .
2430	Ensures that the class loader is accessible .
2431	Creates a new instance of EmrBatch .
2432	Get the path for the target record .
2433	Rename the temporary file .
2434	Checks whether the record should be rolled .
2435	Matches given string against URI template variables .
2436	Returns the offsets of the underlying file .
2437	Returns the remaining wait time .
2438	Retrieves offsets for the file context .
2439	Creates and initializes the stage library .
2440	Create a StageLibraryDelegate .
2441	Creates a new instance of StageLibraryDelegate .
2442	Get the value of the metric .
2443	Find the end of the header .
2444	Gets the body size .
2445	Saves byte buffer to temp file .
2446	Create an SSLSocketSocketFactory based on the keystore path .
2447	Gets the mime type for a file .
2448	Dispatch a session .
2449	Stop the server .
2450	Add route routes .
2451	Sends the response to the given output stream .
2452	Sends the body to the given OutputStream .
2453	Factory method to create a new Response .
2454	Determines whether or not the content type should be used .
2455	Adds a new cookie to the queue .
2456	Unload all queued cookies from the response .
2457	Decode the base64 encoded cookie .
2458	Encode cookie .
2459	Sets the table name .
2460	Gets the principal name .
2461	Create a spring session repository filter .
2462	Resolves principal name from session .
2463	Get session by id .
2464	Extract the JNDI name from the model node .
2465	Get the canonical parameter names for a view method
2466	Register a Synchronization
2467	Notify the list of registered Synchronization objects before the last .
2468	Get the current transaction
2469	Processes the bean factory .
2470	Returns true if the specified persistence unit name matches the cache region name .
2471	Get server config dependencies .
2472	Decrement the next read lock count .
2473	Increments the read lock count .
2474	Adds a service .
2475	Calculates the next restoration calculation .
2476	Add the search dependency .
2477	Make the bdas visible from the root deployment module .
2478	Create JSE archive meta data .
2479	Sets the config name and file .
2480	Gets the security metadata .
2481	Gets the servlet url patterns .
2482	Gets the servlets mapping .
2483	Resolve all EJB views .
2484	Returns a list of available connectors .
2485	Parse core environment element .
2486	Parses the processId environment element .
2487	Get the path address of the operation .
2488	Set the path address on the operation .
2489	Returns the value of the attribute .
2490	Returns true if the operation has defined defaults .
2491	Creates a composite operation .
2492	Creates an add operation .
2493	Creates an add operation .
2494	Creates a read - attribute operation .
2495	Creates a write - attribute operation .
2496	Creates an undefine attribute operation .
2497	Returns the value of the current context .
2498	Add a factory for the given scheme .
2499	Remove a factory for a given scheme .
2500	Loads all providers .
2501	Modify the deployment .
2502	Configure the servlets .
2503	Set the context root for the deployment .
2504	Gets the transport class name .
2505	Set the run as identity .
2506	Pop the run as identity .
2507	Process management .
2508	Injects the given property with the given name and value .
2509	Checks whether the argument type matches the given class and property .
2510	Finds a method .
2511	Finds a field by its name and type .
2512	Initialize the options .
2513	Extract information from the request .
2514	Run a standalone report .
2515	Collect report .
2516	Adds a ResourceAdapterDeployment to the deployment .
2517	Unregisters a ResourceAdapterDeployment .
2518	Registers the transformers .
2519	Writes the parameters to the output stream .
2520	Read an exception from the given stream .
2521	Gets the lock owner .
2522	Release lock .
2523	Add a log message
2524	Add CDI to the deployment
2525	Replies the component view .
2526	Invoke the given endpoint .
2527	Returns the component view method for the given view method .
2528	Checks whether the given method matches the target method .
2529	Create a resource description resource .
2530	Get the security meta data for an endpoint .
2531	Get the domain between two security domains .
2532	Ensures that the given security domain has the same domains .
2533	Sets the IDL name .
2534	Get the full name of this entry .
2535	Creates a JNDIName from the given JNDI name .
2536	Process deployment .
2537	Handles a request .
2538	Returns true if the current transaction is in a transaction .
2539	Returns the transaction synchronization registry .
2540	Returns the connection factory .
2541	Gets the last component of a name .
2542	Returns true if the name is empty .
2543	Creates an exception for the name not found in the context .
2544	Creates a naming exception with the specified message and cause .
2545	Create a naming exception .
2546	Creates a new CannotBeceedException .
2547	Returns a naming enumeration for the given collection .
2548	Binds the specified name to the specified value .
2549	Get the activeMQ component control .
2550	Parse the connection attributes .
2551	Create a component instance .
2552	Get the Spring Virtual Virtual File
2553	Resolve runtime name .
2554	Creates a listener builder for the listener .
2555	Get the primitive analysis for the given class .
2556	Shutdown this executor .
2557	Get a list of url patterns .
2558	Get servlets meta data .
2559	Get servlet mappings .
2560	Gets the security constraints from a JBoss web metadata .
2561	Get the login config meta data .
2562	Gets the context params .
2563	Get web resource collections meta data .
2564	Get servlet init params .
2565	New security constraint .
2566	New web resource collection meta data .
2567	New servlet meta data .
2568	New servlet mapping meta data .
2569	New auth constraint .
2570	Construct a new UserDataConstraint object .
2571	New param value meta data .
2572	New param value meta data .
2573	Registers session bean interceptors .
2574	Process injection targets .
2575	Stop the container .
2576	Gets the JNDI name .
2577	Resolve an attribute .
2578	Gets the pattern type .
2579	Checks whether the resource adapter is pooled .
2580	Checks whether the resource adapter is targets external .
2581	Get the activeMQ server name .
2582	Get default persistence unit name .
2583	Start the activity .
2584	Stop the activity .
2585	Called when the server is suspended .
2586	Resume this request .
2587	Called when the invocation completes .
2588	Invoked when a transaction is created .
2589	Initialize the controller .
2590	Stop the unbound resource .
2591	Get the capability service name for the given capability .
2592	Creates the resource roots .
2593	Returns all class loaders of the deployment unit .
2594	Checks if class file is needed .
2595	Determines whether or not the given persistence unit is allowed .
2596	Returns true if default data source is allowed .
2597	Determines if the mixed synchronization type should be skipped .
2598	Returns an instance of the ORB .
2599	Initializes the ORB for an application .
2600	init method handles
2601	Sets the active naming store .
2602	Validate default values .
2603	Check the type of the given method .
2604	looks for defaultValue annotation
2605	Validate base type method .
2606	Get the deferred entity managers .
2607	Converts a transaction status to its string representation .
2608	Register the cache dependencies for the given type and properties .
2609	Extract database dialect tables .
2610	Determine the JDBC dialect .
2611	Identifies dialect .
2612	Checks database creation .
2613	Converts the given date string into a scheduled date .
2614	Sets the node name .
2615	Marks the deployment as parent .
2616	Read parameters from the input stream .
2617	Writes the given object to the output stream .
2618	Writes an exception to the given output stream .
2619	Perform the lookup .
2620	Start the SFSB .
2621	Ends SFSB .
2622	Get the current invocation stack .
2623	Push the given entity manager to the current transaction .
2624	Pops the current SFSB call stack .
2625	Gets the current call .
2626	Add the module dependencies .
2627	Process managed bean classes .
2628	Process phase listeners .
2629	Returns the type IDL name for the given class .
2630	Inserts a primitive or primitive .
2631	Converts a Java name to an IDL identifier .
2632	Returns true if the given string is a reserved IDL keyword .
2633	Gets the signature for a class .
2634	Gets the method signature .
2635	Returns the name of the primitive type .
2636	Get BatchPermission by name .
2637	Get or create a transaction scoped entity manager .
2638	Associates the specified value with the specified key .
2639	Converts a security role string to a model node .
2640	Returns the most recent entity version of the given timer .
2641	Get the timers for a timed object .
2642	Returns the directory for the specified timed object id .
2643	Add a new listener to the target scope .
2644	Remove a listener .
2645	Fire an event .
2646	Closes the consumer .
2647	Adds a private credential to the subject .
2648	Loads and returns the object instance .
2649	Add transaction management interceptor for view .
2650	Subtract from string builder .
2651	Creates and returns the transport configuration .
2652	Add the EAR resource adapter if it s not already present .
2653	Get root deployment unit .
2654	Returns the service name .
2655	Creates a view configuration object .
2656	Create an InjectionSource
2657	Returns all the interceptors for the given method .
2658	Add an interceptor to the proxy .
2659	Add an interceptor to the view .
2660	Get all client interceptors for a given method .
2661	Add a client interceptor .
2662	Adds an interceptor to the client .
2663	Put private data .
2664	Thrown when an unexpected element is encountered .
2665	Returns the list of EJbEndpoints associated with the deployment .
2666	Gets the POJO endpoint from the deployment .
2667	Gets the endpoint name .
2668	Gets the endpoint class name .
2669	Get the servlet with the given name .
2670	Gets the required attachment .
2671	Gets an optional attachment from the deployment unit .
2672	Gets the JBoss web metadata from the deployment unit .
2673	Gets the port component metadata .
2674	Returns the WebBean endpoint for the given class name .
2675	Returns the context root of the deployment .
2676	Loads a class by name .
2677	Gets the resource URL .
2678	Returns a collection of resources with the given name .
2679	List the resources at the given path .
2680	Closes the current container .
2681	Get the EntityManager by pu name .
2682	Register after completion .
2683	Process a WAR deployment .
2684	Update server config .
2685	Returns true if all public fields are public .
2686	Create an instance of the HTTP endpoint .
2687	Creates a new deployment model for the given deployment unit .
2688	Returns true if the deployment is a JAXRS deployment .
2689	Set the next timeout .
2690	Sets the timer state .
2691	Merge the deployment data .
2692	Process the JBoss deployment .
2693	Add a dependency to the component .
2694	Gets all container interceptors .
2695	Checks whether a given method is level or not .
2696	Checks that two elements are required .
2697	Returns the class for the given name .
2698	Returns the component type at the given index .
2699	Creates and returns a ResourceDefinitionDefinition .
2700	Returns the key managers resource definition .
2701	Returns the resource definition for the trust manager .
2702	Parse a qualified name .
2703	Convert a string into a vector of components .
2704	Parse a component .
2705	This method is called when the object is being deleted .
2706	Convert a CORBA servant to a reference
2707	Authenticate with the given username and password .
2708	Checks if class is type match .
2709	Lookup a binding by name .
2710	Unbinds the given JNDI name .
2711	Instantiates the bean .
2712	Configure the bean .
2713	Dispatches the given bean into the bean .
2714	Returns the current selector .
2715	Convert a bean name to a bean name .
2716	Returns the service name for the given class .
2717	Replies the specified class by its name .
2718	Processes the composite index annotations .
2719	Parse persistence steps .
2720	Validates the given descriptor .
2721	Create the deployment descriptor .
2722	Create the web app descriptor .
2723	Returns the auth method of the deployment .
2724	Process deployment .
2725	Handles a stateless session bean .
2726	Compiles the stub class .
2727	Gets the anonymous object id .
2728	Get the list of persistence providers .
2729	Clear all cached deployment specific providers .
2730	Add a persistence provider to the deployment list .
2731	Finds the parent class loader .
2732	Add JBoss deployment module dependencies .
2733	Add all persistence units to the deployment .
2734	Set annotation indexes .
2735	Get the adapter adaptor
2736	Sets the provider adaptor for this deployment unit .
2737	Looks up a provider for the specified persistence unit .
2738	Gets annotated classes .
2739	Build the metadata for the webservice deployment .
2740	Builds the enterprise bean metadata .
2741	Refresh the participant in the operation context .
2742	Get the analysis for the given class .
2743	Lookup a class by its class .
2744	Create a work in progress map .
2745	Get the IDL module name .
2746	Converts an integer into a hex string .
2747	Converts a long to a hexadecimal string .
2748	Checks whether a method is accessor .
2749	Checks whether a method is mutable .
2750	returns true if the method has non - app exceptions
2751	Read attribute read name .
2752	Returns the name of the attribute write method .
2753	Fixes all overridden operations .
2754	Fix case names .
2755	Escapes an identifier .
2756	Parse an environment element .
2757	Parses the default context propagation element .
2758	Process all the attributes of the reader .
2759	Loads a list of PersistenceProvider by name .
2760	Creates an add operation handler .
2761	Initialize the module dependencies .
2762	Write attribute .
2763	Retrieves the MethodIntf from the invocation context .
2764	Creates and returns a session ID .
2765	Infers the name of the destination .
2766	Register a set of endpoint handlers .
2767	Returns the set of job names associated with the given job name .
2768	Initialize the configuration .
2769	Returns the URI of the request .
2770	Creates a resolver from the given URL .
2771	Lookup object by name .
2772	Binds an object .
2773	Calls the unbind .
2774	Returns an enumeration for the specified name .
2775	Call the destroy method .
2776	Destroys a given name .
2777	Binds a new context .
2778	Creates a new context with the given name .
2779	Lookup a link .
2780	Adds a property to the environment .
2781	Removes a property from the environment .
2782	Add transformations to the resource model .
2783	Parse credential .
2784	Remove a security domain .
2785	Looks up JNDI for the given context .
2786	Create a ModularReference from a type and factory class .
2787	Create a modular reference .
2788	Create a ModularReference from a type address .
2789	Get the localIDL type .
2790	Waits for a service .
2791	Compute the password .
2792	Initializes the security vault .
2793	Initialize the vault session .
2794	Displays the display of an attribute .
2795	Demonstrates how to print the vault configuration .
2796	Returns a string representation of the configuration .
2797	Checks that the given value is not null .
2798	Get the deployment service service name from an Activation resource .
2799	insert a value into a Any object
2800	Checks whether the given JNDI permission implies the given permission .
2801	Returns the action string as a string .
2802	Gets the log file name .
2803	Send a state change notification .
2804	Returns the state to bind to the supplied object .
2805	Get the value for the given type .
2806	Gets the context service name .
2807	Returns all interceptors .
2808	Adds a method interceptor .
2809	Adds a service to this component .
2810	Returns all component interceptors associated with given method .
2811	Get the list of interceptors associated with a timeout .
2812	Add an interceptor for a timeout .
2813	Add an AroundConstructInterceptor to the list of AroundConstructors .
2814	Add a postConstructor to the list of post constructors .
2815	Add a preDestroy interceptor .
2816	Add a pre - pass interceptor .
2817	Add a pre - activate interceptor .
2818	Sets the ComponentCreateServiceFactory .
2819	Remove JNDI aliases .
2820	Add the remote transport provider to the builder .
2821	Get the context service name of a component .
2822	Get the context service name of the module .
2823	Returns the bind info for an environment entry .
2824	Returns the bind info for the given JNDI name .
2825	Retrieves a cache from the cache .
2826	Get value members .
2827	Get value members for type code .
2828	Creates the subsystem root .
2829	Parses a configuration element .
2830	Start the naming service .
2831	Add the Weld integration .
2832	Returns the job - operator service name .
2833	Adds a component to the deployment .
2834	Adds a message destination .
2835	Get view descriptions for a view type .
2836	Returns all components of a given component .
2837	Get view descriptions for the given component .
2838	Resolve message destination .
2839	Adds the transformers .
2840	Adds a set of attribute definitions to be rejected .
2841	Rename attribute .
2842	Pop identity from cache .
2843	Loads the IDs of the module .
2844	Checks if the version is missing .
2845	Computes the slot for the JSF version .
2846	Get the constant type code .
2847	Add a typeCode to the registry .
2848	Make sure that the package exists in the package .
2849	Add all interfaces to the container
2850	Add the baseValuetype to the list of abstract baseValuids .
2851	Add a class .
2852	Add an interface .
2853	Add a value .
2854	Create an exception definition .
2855	Gets class level injection type .
2856	Checks if jts is enabled .
2857	Initialize the service .
2858	Close the store .
2859	Checks whether the given method type is allowed .
2860	Throws an exception if the method is wrong .
2861	Returns a set of all component classes contained in the deployment unit .
2862	Get waiting on transaction completion .
2863	Get extra parameters .
2864	Extract parameters from the model .
2865	Convert a Type to a Class .
2866	Converts the given value to the given class .
2867	Get the type names of values .
2868	Checks whether the given type names are equal .
2869	Returns the next binding .
2870	Gets the next batch of bindings .
2871	Map a binding .
2872	Observes health check .
2873	Close health check .
2874	Returns the reference to the CORBABean .
2875	Converts an EJBLOB locator to an object .
2876	Returns the value of the node as an Enum .
2877	Skips the given amount of bytes .
2878	Checks that two elements are present .
2879	Adds a component description .
2880	Add class loaders .
2881	Unbinds the specified name .
2882	Lookup the given name .
2883	Returns the names of the given name .
2884	Lists the bindings of the specified name .
2885	Adds a context handle factory .
2886	Save setup context handle .
2887	Creates an IO subsystem .
2888	Creates the welcome content handler .
2889	Retrieves a bean from the pool .
2890	Calculate the operation analysis map .
2891	Collects the metrics for a resource .
2892	Create the deployment unit .
2893	Performs the deployment .
2894	Publish the web app .
2895	Stops the web app .
2896	Start the WldContainer .
2897	Registers an endpoint config .
2898	Method to set the retry timeout .
2899	Post timer processing .
2900	Get the declared methods of a class .
2901	Get the declared fields of a class .
2902	Get a constructor from a class
2903	Gets a method .
2904	Adds an extension to the migration module .
2905	Checks whether the parameter is allowed to be allowed .
2906	Migrates generic transport class .
2907	Cancel this task .
2908	Run the task if not cancelled .
2909	Change the type of this property .
2910	Returns true if the predicate can be executed .
2911	Estimates the number of indexes of the given class .
2912	Find all classes in the directory .
2913	Get the classess of the given interface .
2914	Get generic multivalue type .
2915	Evaluate this record .
2916	Determines the type of the field .
2917	Updates record .
2918	Find record by ID .
2919	Get the minimal set of nodes for a local node .
2920	Removes all equalities from the WHERE clause .
2921	Add order by projection .
2922	Extract sub - queries .
2923	Returns true if the given ID is from the cluster .
2924	Handle class with index .
2925	Checks if the given class is a diamond - hierarchy .
2926	Determine the order direction of the query .
2927	Returns true if the key condition requires multiple index lookup .
2928	Finds the best index for the given set of indexes .
2929	Build the index search descriptor for fulltext block .
2930	Computes the union factor of the given list of indexes .
2931	Creates a new ODocumentFieldHandling strategy .
2932	Check if the user has allowed permission .
2933	Checks if the user has defined rule .
2934	Compact the server status .
2935	Initialize the system database .
2936	Load local databases .
2937	Remove a server from the cluster .
2938	Obtain a new lock manager .
2939	Assign the lock manager to the cluster .
2940	Commits the current micro - transaction .
2941	Rolls back the current micro - transaction .
2942	Updates the identity of the transaction .
2943	Update record cache after rollback .
2944	Prepare file for deletion .
2945	Attempts to atomic move the source file to the given target . If the source does not fallback to the target file .
2946	Gets the disjoint patterns .
2947	Execute local node only .
2948	Append characters .
2949	Returns true if the connection is connected .
2950	Merge two byte buffers .
2951	Split a short into two buffers .
2952	Execute the command .
2953	Put single value .
2954	Removes the key from the map .
2955	Run the query .
2956	Run the first element of the query .
2957	Creates the file .
2958	Checks that the region is valid .
2959	Replaces the content of the file .
2960	Execute a command .
2961	End the request .
2962	Add a host .
2963	Begin a new request .
2964	Get database database .
2965	Get a connection
2966	Kills the given connection .
2967	Cancels a connection .
2968	Disconnects a client .
2969	Push the DistribConfig to the client
2970	Swaps the entry at the given index .
2971	Closes all locks .
2972	Synchronize the database .
2973	Update metadata type .
2974	Returns the last record in the range .
2975	Reads the next character .
2976	Execute the SQL command .
2977	On asynchronous replication error .
2978	Register a new storage algorithm .
2979	Get the number of open files .
2980	Returns true if the clause allows indexed expression .
2981	Moves the specified position .
2982	Fill the buffer .
2983	Executes all steps in the script .
2984	Execute a full statement
2985	Evaluate this record .
2986	Execute the command .
2987	Loads the configuration from the given configuration .
2988	Parse the query request .
2989	Execute the request .
2990	Updates the schedule starting at a given start node .
2991	Adds an index definition .
2992	Splits an aggregate split into an aggregate .
2993	Translate result object to object .
2994	Gets the collate .
2995	Gets the string value .
2996	Advances the given probe value .
2997	Execute the command .
2998	Build an ODocument from a file .
2999	Check the passed password .
3000	Create hash from input string .
3001	Checks if the given algorithm is supported .
3002	Create an index .
3003	Returns the vertices of the graph .
3004	Returns the edges of the graph .
3005	Gets the partition key .
3006	Gets the distributed timeout .
3007	Returns the features that can be used to build the features .
3008	Checks whether changes container is filled up to current page .
3009	Parse the timeout string .
3010	Parses the next lock .
3011	Creates a cluster .
3012	Frees a cluster
3013	Start the cache .
3014	Shutdown the application .
3015	Returns a singleton instance of the given entity .
3016	Grant a role .
3017	Revoke a role .
3018	Determines whether this record result is a delete operation .
3019	Bind parameters .
3020	Resets the table .
3021	Returns the index of a given item .
3022	Spread a random number .
3023	Create an index .
3024	Drops all indexes associated with this property .
3025	Gets the index .
3026	Returns the linked class .
3027	Serializes this ODocument .
3028	Remove a listener .
3029	Register a database .
3030	Timeout a request message .
3031	Creates a copy of this database .
3032	Try to merge the given object into this one .
3033	Replace the object with the given object .
3034	Transform result .
3035	Execute the command .
3036	Closes all pools .
3037	Invoked when a storage is unregistered .
3038	Returns a set of function names .
3039	Returns the set of collate names .
3040	Returns a set of command names .
3041	Reads the field size and type from the stream .
3042	Write response status code .
3043	Write the response headers .
3044	Write records .
3045	Write record .
3046	Send a response message .
3047	Send stream .
3048	Open a database .
3049	Closes this database .
3050	Listen for changes .
3051	Completes the current component operation .
3052	Push the given counters into the snapshot .
3053	Push a WritCacheCounters onto the snapshot .
3054	Push StorageCounters onto the snapshot .
3055	Push the WAL counters onto the snapshot .
3056	Push a snapshot of the given component .
3057	Stop the write cache flush timer .
3058	Stop fuzzy check checkpoint timer .
3059	Stop full checkpoint timer .
3060	Stops the commit timer .
3061	Stop the WAL record timer .
3062	Stop the WAL flush timer .
3063	Parses the given SQL statement .
3064	Initialize receive message thread .
3065	Initialize server disconnect
3066	Remove the record from the graph .
3067	Sets the property .
3068	Remove a property from this vertex .
3069	Checks if a class exists in the database .
3070	Creates a new OIndexCursorWrapper .
3071	Define a new vertex attribute .
3072	Define the given edge attribute .
3073	Returns a list of all entries of the specified class .
3074	Get new record entries by cluster id .
3075	Add an index entry .
3076	Merge two sets .
3077	Update record .
3078	Checks if the index can be executed .
3079	Prepare keys .
3080	Writes a page to the underlying stream .
3081	Reads a page .
3082	Truncates the segment .
3083	Opens the file .
3084	Check if replication is active .
3085	Gets the strategy .
3086	Is execution mode .
3087	Returns true if the cluster writes to the cluster .
3088	Get server cluster map .
3089	Get a set of server names .
3090	Checks if a given server is contained in all clusters .
3091	Checks if the given server is contained in the cluster .
3092	Replies the master servers .
3093	Gets all the configured servers .
3094	Get all the clusters on a specific node .
3095	Get all the clusters owned by this node .
3096	Gets the cluster owner .
3097	Get the owner of the cluster .
3098	Get the list of registered servers .
3099	Gets the set of registered servers .
3100	Returns the set of data centers .
3101	Gets the write quorum .
3102	Is sharded?
3103	Get a list of server names .
3104	Returns the data center of a server .
3105	Get the global read quorum .
3106	Get write quorum .
3107	Get the cluster configuration .
3108	Gets the data center .
3109	Clear the initialization stack .
3110	Gets the index .
3111	Drops an index .
3112	Creates a new vertex with the specified id .
3113	Add an edge to the graph .
3114	Get a single vertex from the database .
3115	Get the vertices of the specified class .
3116	Get the edges of the specified class .
3117	Get an edge by id
3118	Reuse this graph .
3119	Shutdown the context .
3120	Get the vertex base type .
3121	Get the type of vertex type .
3122	Create a new vertex type .
3123	Drop a vertex type .
3124	Gets the edge type .
3125	Create an edge type .
3126	Get an element by id
3127	Drops the key index of an element .
3128	Create key index .
3129	Remove an exception listener .
3130	Notifies all registered listeners of the given exception .
3131	Stop monitoring .
3132	Register the MBean with the given name and storageId .
3133	Unregister a MBean
3134	Fetch the write cache counters .
3135	Fetch system counters .
3136	Fetch all threads of a component .
3137	Compress the response string .
3138	Get the value of the property .
3139	Detaches an object from this object .
3140	Returns the version of the given object .
3141	Execute a command .
3142	Sets the dirty state of the given object .
3143	Unset the dirty state of the given object .
3144	Gets the index types .
3145	Replies the names of the index engines .
3146	Get the list of nodes that are missing .
3147	Get the list of all the conflict responses grouped by one .
3148	Calculates the best response group for each response .
3149	Compute the quorum response .
3150	Gets the received responses .
3151	Gets the execution plan .
3152	Returns true if the operator allows indexed function execution .
3153	Returns the library for the database function .
3154	Release database engine .
3155	Get the next page position .
3156	Computes the size of this RidBag .
3157	Gets the value at the given index .
3158	Checks if the given index can be used by an ordered filter .
3159	Returns the index of the first non - unicode character .
3160	Jump over whitespace .
3161	Jump to the next jump character .
3162	Sets the fetch plan .
3163	Add a record to the queue .
3164	Cancel a record .
3165	Enqueue a repair cluster .
3166	Get the dependencies of a pattern .
3167	Creates a pojo with the specified class name .
3168	Register entity classes .
3169	Register entity classes .
3170	Set the class handler .
3171	Acquires a DB instance .
3172	Get number of available connections .
3173	Acquires a database from the pool .
3174	Execute synchronization of the database .
3175	Looks up an iterator for the given class .
3176	Check the cache memory configuration .
3177	Creates a Vertex object from a JSON object .
3178	Create an edge from a JSON object .
3179	Creates a GraphSON object from an element .
3180	Creates an object node from a set of properties .
3181	Execute import .
3182	Returns the current status of the job .
3183	Get the active data center map .
3184	Extracts the algorithm name from a cipher transform .
3185	Creates an OSymmetric key from a config .
3186	Creates an object from a file .
3187	Creates an object from an input stream .
3188	Encrypt the given bytes .
3189	Saves this key to an OutputStream .
3190	Saves an output stream to a keystore .
3191	Set this command context .
3192	Adds an object to the unique result .
3193	Get the field value as object .
3194	Authenticate user .
3195	Get the value of this map entry .
3196	Gets the record .
3197	Read current record .
3198	Gets a transaction graph .
3199	Get a no - tx graph .
3200	Set the pool to use .
3201	Get the property by name .
3202	Stops a transaction .
3203	Parse a statement .
3204	Get next token .
3205	Returns the token at the given index .
3206	Generate ParseException .
3207	Get the vertices of the graph .
3208	Removes this object from the graph .
3209	Add an edge to the graph .
3210	Add an edge to the graph .
3211	Get the connection class name .
3212	Get the connection .
3213	Process broken records .
3214	Replies the methods .
3215	Executes a task on a local node .
3216	Get the number of nodes with the given status
3217	Backup backup .
3218	Wait for next retry .
3219	Gets the argument .
3220	Check if the request has multiple names .
3221	Connects to a remote server .
3222	Lists all the databases .
3223	Get server info .
3224	Check if the remote storage exists .
3225	Delete a database .
3226	Free a database .
3227	Release a database .
3228	Get the cluster status .
3229	Execute the query .
3230	Gets the current graph .
3231	Parse retry .
3232	Save record .
3233	Deletes the record .
3234	Gets authentication header .
3235	Authenticate user .
3236	Check if user is authorized
3237	Runs the server .
3238	Updates the start and column number of tokens .
3239	Set a bucket pointer .
3240	Gets the bucket pointer .
3241	End an atomic operation .
3242	Acquires exclusive lock on an operation .
3243	Changes the maximum amount of memory in memory cache .
3244	Listen to the host .
3245	Read the parameters .
3246	Shutdown Logger .
3247	Add item .
3248	Removes the entry from the cache .
3249	Acquires an entry in the cache .
3250	Returns the value associated with the specified key .
3251	Clear the reader .
3252	Closes the entry .
3253	Empty read buffers .
3254	Adds a task to the state buffer .
3255	Adds an entry to the read buffer .
3256	Puts an entry into the read buffer .
3257	Returns the closest power of two given value .
3258	Process a push request .
3259	Convert a value to the enum .
3260	Convert all enumeration types to Enums .
3261	Get object serializer .
3262	Initialize handlers .
3263	Get engine by name
3264	Execute the operation
3265	Executes the query .
3266	Create a reader entry .
3267	Authenticate OAuth token .
3268	Create metadata .
3269	Attempts to acquire a read lock .
3270	Get the vertex with the specified direction
3271	Returns the id of the vertex .
3272	Convenience method for setting a property
3273	Remove a property from the context .
3274	Delete the contents of this file .
3275	Delete the contents of this file .
3276	End the batch .
3277	Creates a new vertex .
3278	Parses the query string .
3279	Reads the positions from an embedded collection .
3280	Execute the query .
3281	Fix the given field value .
3282	Fill record .
3283	Set the version of the record .
3284	Gets the record type .
3285	Initialize database instance .
3286	Prints the stack trace of the exception .
3287	Execute an index query query .
3288	Convert a link to a record .
3289	Register a command .
3290	Creates a server user configuration object from a user document .
3291	Analyzes a filter condition .
3292	Create indexed property .
3293	Attaches the object to this object .
3294	Get index class .
3295	This method is used to advance the next value to the next value .
3296	Truncate the database .
3297	Add a base class to this class .
3298	Add polymorphic cluster ids to the index .
3299	Serialize a link to a stream .
3300	Releases a pointer to the pool .
3301	This method is called when a direct pointer is unreleased .
3302	Clear the pointer map .
3303	Read an int from a byte array .
3304	On open .
3305	Installs the cluster owned by the given class .
3306	Dump the status of the server .
3307	Returns the index of the first occurrence of the specified object in the array .
3308	Returns the index of the first occurrence of the specified object .
3309	Returns the set of clusters associated with the target query .
3310	Handle a result .
3311	Get the temporary rid counter .
3312	Report the tip .
3313	Parse the fetch plan .
3314	Parses the SQL command
3315	Tries to optimize the sort .
3316	Returns the status of the batch .
3317	Execute the command .
3318	Handle a JVM error .
3319	Puts an index value .
3320	Rolls back a micro - transaction .
3321	Execute a command .
3322	Registers a cluster .
3323	Set the property .
3324	Execute the class .
3325	Execute the SYNC DATABASE command .
3326	Delete record .
3327	Calls the hooks of a specific record .
3328	Delete the record with the specified ID .
3329	Counts the number of views with the given name .
3330	Count class .
3331	Activate this document .
3332	Register encryption algorithm .
3333	Returns the relative position for the given position .
3334	Parses the next word .
3335	Parses the next word .
3336	Parses the next chars .
3337	Parses an optional keyword .
3338	Check if the passed character is valid .
3339	Execute the command .
3340	Clears the configuration files .
3341	Gets the offset in bytes .
3342	Extracts the token .
3343	Acquires an access token .
3344	Copy the current access token .
3345	Returns true if there is no more characters .
3346	Read a line from a byte array .
3347	Read a line .
3348	Skips given number of bytes .
3349	Skips given number of bytes .
3350	Ensures that the offset is within the array .
3351	Performs a merge sort .
3352	Swaps the specified number of elements .
3353	Performs a quick sort .
3354	MurmurHash 3 .
3355	Hash a long .
3356	Writes the given byte buffer to the file .
3357	Truncates the file .
3358	Positions the underlying stream .
3359	This method should only be called when a consumer has failed .
3360	Waits until all the current tasks are completed .
3361	Finds all matches .
3362	Determines the set of compaction targets .
3363	Removes all snapshots from the snapshot queue .
3364	Returns the hash code for a field .
3365	Checks if two ordinal values are equal .
3366	Removes references that are referenced outside of the closure .
3367	Handle an announcement complete .
3368	Called when a cycle completes .
3369	Read header tags .
3370	Extracts the primary key of the given object .
3371	Clears all entries in this buffer .
3372	Reads all the ordinal values from the stream .
3373	Returns the number of bits used by this sketch .
3374	Returns the value for the field .
3375	Copies all of the bytes from src to another byte array .
3376	Copies data from srcPos to destination position .
3377	Compare two byte arrays .
3378	Copies the contents of the source byte array starting at the given position .
3379	Copies data from srcPos to destPos .
3380	Reads data from an input stream .
3381	Writes to the given OutputStream starting at the given position .
3382	Ensures that the segment does not exist .
3383	Returns the position of the given field name .
3384	Calculates the number of unique buckets and total number of unique buckets .
3385	Returns true if the given dataset has any collections .
3386	Generate the files for the given directory .
3387	Generate the files for each hive schema .
3388	Returns true if the key matches the specified ordinal value .
3389	Returns the record key for the specified ordinal value .
3390	Create a field path for a primary key .
3391	Create a field path for a hash index .
3392	Create a field path for a prefix index .
3393	Adds an object to the cache .
3394	Initializes the total word length .
3395	Returns true if the map contains the given key .
3396	Gets the change percentage of the previous cardinality .
3397	Adds a field to the objectFilter .
3398	Returns a list of schemas ordered by their names .
3399	Initialize the next version of the next major version .
3400	Gets the value at the given index .
3401	Find records that match the given field and value .
3402	Find records that match the given type and value .
3403	Sets the element paths .
3404	Sets the element path paths .
3405	Calculates the index .
3406	Restore the state from the last state .
3407	Runs the cycle .
3408	Adds a key to be excluded from the table .
3409	Removes all state engines referenced by this object .
3410	Writes the Hadoob header to the DataOutputStream .
3411	Calculates the heap metrics .
3412	Write the data to the specified ByteBuffer .
3413	Write fixed length int .
3414	Write a fixed length long .
3415	Adds an ordinal to the pool .
3416	Sorts the table .
3417	Creates a hash value for the given key .
3418	Hashes the given key with the given field type .
3419	Resize storage .
3420	Find a free ordinal .
3421	Prepare the cache .
3422	Compares the given key with the given key .
3423	Grows the key array .
3424	Rehash the contents of a key .
3425	Creates an empty key array .
3426	Returns true if this object matches the given index .
3427	Finds an object matching the specified key .
3428	Creates a new ReadStateHelper .
3429	Calculates the size of the hash table .
3430	Runs the compaction cycle .
3431	Writes a snapshot to the stream .
3432	Writes the delta .
3433	Adds the given schema names to the given set of schema names .
3434	Normalize field path .
3435	Rebuilds the hash index .
3436	Finds the objects that match the given query .
3437	Trigger an async refresh with a random delay .
3438	Triggers an async refresh .
3439	Add a new type diff .
3440	Calculates the differences of the type diff .
3441	Writes a long to an OutputStream .
3442	Writes a vInt .
3443	Writes a vInt to the given byte array at the given position .
3444	Reads a vInt from the stream .
3445	Reads a long from the stream .
3446	Add view .
3447	Refresh loading views .
3448	Updates the UI for the mode .
3449	Performs the pull event .
3450	Perform the over scroll by the specified amount .
3451	Adds a given attribute .
3452	Adds the given facts .
3453	Creates a new rule builder .
3454	Creates a new rule builder .
3455	Returns a builder for this rule .
3456	Returns a builder for this rule .
3457	Creates a new RuleBuilder .
3458	Creates a new RuleBuilder .
3459	Adds an action to this builder .
3460	Creates a new instance of the rule .
3461	Returns the first annotated field of the given class .
3462	Returns the first annotated method of the given class .
3463	Gets annotation .
3464	Registers an auditable rule .
3465	Updates the status of a rule .
3466	Gets the map of all audit records .
3467	Sets the result book type .
3468	Adds an action to the first rule .
3469	Adds an action to the first rule .
3470	Resets the default value .
3471	Adds a rule to the rulebook .
3472	Returns all the rules declared on this package .
3473	Reads empty line if present .
3474	Convert a list of Service objects to an array of Service objects .
3475	Get the ports from the build configuration .
3476	Extract the ports from config
3477	Parses the given port mapping .
3478	Add a port if not null .
3479	Shifts a service port .
3480	Add missing port parts .
3481	Append an image stream to the target file .
3482	Checks whether the given service port matches the specified ports .
3483	Returns the port for the given service name or null if not found .
3484	Get service host and port .
3485	Puts a string value into the map if not already present .
3486	Merges the given map into the given map .
3487	Merge two maps .
3488	Put all values from to map if not null .
3489	Waits until the pod is ready .
3490	Validates the Kubernetes id
3491	To item list .
3492	Gets the resource version .
3493	Checks whether the given pod is ready .
3494	Returns the current context .
3495	Checks if a route has the given name .
3496	Checks if the given paths exist in the given project .
3497	Reads and returns the fragment .
3498	Converts the given map into an EnvVarList .
3499	Merge two resources .
3500	Merge maps and remove empty strings .
3501	Returns true if the pod spec is local to the container
3502	Reads configuration from file .
3503	Adds the port if it is valid .
3504	Returns a JSON string representation of the Docker configuration
3505	Returns the configuration for the given plugin ID .
3506	Returns the secret configuration for the given id .
3507	Downloads a file to a target file .
3508	Compare two versions .
3509	Blend processor config with profile .
3510	Lookup profile by name .
3511	Reads profiles from classpath .
3512	Read all profiles from classpath .
3513	Find profile yaml file .
3514	Get the list of profile paths
3515	Loads a list of profiles from an YAML file .
3516	Returns image pull policy from resource config .
3517	Checks if is openShift mode .
3518	Gets the replica count .
3519	Returns the first child element with the given name .
3520	Installs a template .
3521	Remove tag by name .
3522	Apply a new namespace .
3523	Apply a project .
3524	Apply a project request .
3525	Gets namespace .
3526	On apply error .
3527	Create Kubernetes list .
3528	Enrich configuration .
3529	Get environment variables .
3530	Get the number of seconds in seconds .
3531	Calculates the duration from a string .
3532	Scans the files matching the given patterns .
3533	Disables OpenShift features .
3534	Checks whether the given list of IngressRule has a backend
3535	Parse the given mapping file .
3536	Build generator context .
3537	Extract generator config .
3538	Creates an Enricherher context .
3539	Extract processor config .
3540	Returns the default icon for the project .
3541	Copy the app config files to the app config directory .
3542	Get a Properties object from the given URL .
3543	Gets the Spring boot boot version from the Maven project .
3544	Creates a list of service objects .
3545	Enrich enriches .
3546	Gets the raw configuration .
3547	Recursively build a flattened map .
3548	Extract processor config .
3549	Gets the singleton template .
3550	Gets the build reference date .
3551	Gets the value for a key .
3552	Gets the configuration map .
3553	Prepares processors for processors .
3554	Add from from builder to builder .
3555	Determine the name based on the operating system mode
3556	Returns the name of the image .
3557	Returns the registry name .
3558	Returns true if running online .
3559	Returns the external service URL .
3560	Returns the boolean value of the global property .
3561	Creates the jest client .
3562	Create internal node .
3563	Scan plugins .
3564	Deserializes a JSON string representation of the states of the provided JSON string .
3565	Retrieves the address balance balance of a given payment method .
3566	Create a PayPalPaymentResource from a JSON string
3567	HTTP GET request .
3568	Sends a post request .
3569	Creates a new VenmoConfiguration from a JSON object .
3570	Collect device data .
3571	Collect device data .
3572	Collect pay device data .
3573	Get the PayPal client metadata id
3574	Checks if a signature is valid .
3575	Get a property as a string .
3576	Parses the response body and returns a list of PaymentMethodNotces .
3577	Returns the browser checkout configuration .
3578	Gets the browser billing agreement config .
3579	Perform an HTTP GET request .
3580	Submits a post request to the server .
3581	Perform a POST request .
3582	Start payment .
3583	Accepts a local payment
3584	Add listener .
3585	Remove listener .
3586	Request a billing agreement
3587	Process an activity result .
3588	Parses a PayPal account .
3589	Adds the sentences to the dictionary .
3590	Removes the given KoreanPos from the dictionary .
3591	Convert Korean tokens to Java string list .
3592	Extract phrases from a sentence .
3593	Detokenize a list of tokens .
3594	Fetches a ByteBuffer from a channel .
3595	Joins a list of NAL units into a byte buffer .
3596	Converts a list of NAL units to a byte buffer .
3597	get profile for int
3598	Performs a fixed precision based on the fixed precision .
3599	Read the next marker in the stream .
3600	Reads a new buffer and returns it .
3601	Returns the maximum frame number .
3602	Performs a fix on a file .
3603	Copy a file to a file .
3604	Gets the edit duration of the given track .
3605	Converts a frame to a time value .
3606	Converts a time value into a frame .
3607	Calculates how many edit items are edited by the given time .
3608	Calculates the edit time of the given TrakBox and returns the edited time .
3609	Converts a movie frame to a QT frame .
3610	Get the time for a movie .
3611	Converts a timecode to a timecode frame .
3612	Converts a timecode into a string .
3613	Calculate 7 7 7 bits .
3614	Set a value to a list .
3615	Returns true if this color space matches the specified color .
3616	Creates a new Size based on the specified component .
3617	Creates a new MP4Demuxer .
3618	Reads the next byte from the buffer .
3619	Creates a WAV header .
3620	Creates a WAV header from the given headers .
3621	Parses the input stream to a byte array .
3622	Encode a symbol
3623	Read decoded data marker .
3624	Splits the edit box into two lists .
3625	Decodes a data frame .
3626	Sets the byte - endian flag .
3627	Dumps two blocks of two blocks .
3628	Encode a native frame
3629	Encode a long value .
3630	Returns the number of bytes required to encode a long .
3631	Adds a packet to the stream .
3632	Reposition a file .
3633	Returns the bin index of a given m .
3634	Decodes a bin bypassed code .
3635	Find the next position in the buffer .
3636	Get the sample frequency for an int .
3637	Make a plane on the plane .
3638	Initialize a block .
3639	Compute the coefficients of a block
3640	Divides a block of 4 bits .
3641	Concatenate bits .
3642	Rewind the reverse 32 bits .
3643	Rewind a range of longs in reverse order
3644	Seek to specified frame
3645	Get a picture buffer from the video store .
3646	Returns the index of the gain change point ID .
3647	Convert a byte array into an int array .
3648	Convert an int array to a byte array .
3649	Converts a byte buffer to a float buffer .
3650	Parses a float buffer from a float buffer .
3651	Interleave all data in the input buffer and write it into the output buffer .
3652	Deletes all data from the input buffer .
3653	Get video size .
3654	Build the map out map .
3655	Build the swipe map .
3656	Read a batch of UL batches
3657	Reads a 32 - bit integer from a ByteBuffer .
3658	Calculates the median of a vector
3659	Encode a picture .
3660	Encode an IDR frame .
3661	Encode a picture .
3662	Returns the set of supported codecs .
3663	Returns the set of supported codecs .
3664	Adds a reference to the list .
3665	Delete all internal references .
3666	Deletes all references of this reference .
3667	Loads the given JNILibrary .
3668	Unpack a library .
3669	Delete temporary files .
3670	Get the default layout for audio channels .
3671	Gets the audio channel from a layout .
3672	Make a media packet .
3673	Get version info .
3674	Get the default time base .
3675	Make a new Demuxer .
3676	Play a video .
3677	Display the image at the given time .
3678	Creates a new codec descriptor .
3679	Prints an option to a PrintStream .
3680	Register URL protocol factory .
3681	Generates a unique name .
3682	Create a media resampler .
3683	Gets the set of supported video frames .
3684	Gets the supported video pixel format .
3685	Gets the list of supported audio samples .
3686	Gets the supported audio formats .
3687	Gets the supported AudioChannel layouts .
3688	Sets the flag on the video .
3689	Sets a flag on the video .
3690	Returns a decoder for this stream .
3691	Get the Demuxer
3692	Get the list of muxer formats .
3693	Make a filter graph .
3694	Returns the type of the bit stream .
3695	Get a ByteBuffer from the ByteBuffer .
3696	Construct an AudioFrame from the specified AudioFormat .
3697	Resample media picture by resampler
3698	Validates the given image .
3699	Validates the given media picture .
3700	Get the FilterGraph for this video .
3701	Returns the meta data for the video .
3702	Gets the CPU architecture .
3703	Get the CPU architecture from a GU string .
3704	Get the OS family name .
3705	Get the OS family name .
3706	Play the specified sound .
3707	Loads a single library .
3708	Set a specific library .
3709	Loads a candidate library .
3710	Initialize search paths .
3711	Checks if a library is already loaded .
3712	Record the screen screen .
3713	Delete this reference counter
3714	Returns a stream with the specified position .
3715	Returns the muxer for this stream .
3716	Make a script transaction .
3717	Decodes base58 string .
3718	Generates a random seed .
3719	Get information about a transaction .
3720	Gets the list of transactions associated with the specified address .
3721	Retrieves the list of transactions associated with an address .
3722	Retrieves the range of the block header .
3723	Get a block .
3724	Sends a request to the specified transaction .
3725	Set script .
3726	Compiles the given script .
3727	Write primitive array .
3728	Flush the stream .
3729	Writes object to memory .
3730	Read a single class .
3731	Writes an object to the output stream .
3732	Set MMF data .
3733	Get the specificity of a class
3734	Resizes the memory to the mapped file .
3735	Remove a key from the index .
3736	Write a string in ascending order .
3737	Set the output stream .
3738	Creates a new FSTConfiguration object .
3739	Creates an instance of StructConfiguration .
3740	Returns the number of bytes in the given object .
3741	Clear all cached objects .
3742	Gets an FSTObjectInput from an input stream .
3743	Get an FSTObjectInput from the given byte array
3744	Get an object input from a byte array
3745	Gets the FSTObjectOutput .
3746	Register the cross - platform class mapping .
3747	Get the CP name for a class
3748	Write long .
3749	Write an unsigned integer .
3750	Write a big - endian integer .
3751	Write a primitive array
3752	Writes a byte array to the buffer .
3753	Get cached field info .
3754	Called when an object is written .
3755	Called when the object has been written .
3756	Get the FST class info for the given class
3757	Write an array .
3758	Set the string .
3759	Write primitive array .
3760	Closes the current change .
3761	Creates a snapshot of the contents of a byte array .
3762	Registers an object for writing to the stream .
3763	Writes an object to the stream .
3764	Reads an object from a byte array .
3765	Reads a byte array from the buffer .
3766	Reads a four byte integer from the stream .
3767	Back the queue .
3768	Sets the thread pool enabled .
3769	Start embedded cassandra .
3770	Clean data in Cassandra .
3771	Copy the given resource to the given directory .
3772	Print all active threads .
3773	Returns true if the remote port is taken .
3774	Returns an empty subscriber state .
3775	Retrieves all the opx descriptors .
3776	Calculates the output shape
3777	Computes the logical OR of the complex number
3778	Computes logical AND condition
3779	Performs a logical AND operation on each dimension
3780	Perform logical OR operation
3781	Apply a condition to each condition
3782	Get the first index matching condition
3783	Converts this object into a FlatBuffer .
3784	Create FunctionProperties from FlatProperties object .
3785	Converts a collection of properties to a FlatBuffer .
3786	Sets the exception .
3787	Set the exception if the exception is not null .
3788	Merge two coordinates .
3789	Partition a list into a list of chunks .
3790	Convert an onnx type to an nd4j type .
3791	Shutdown the transport .
3792	Get current device architecture
3793	Convert a col2 matrix to an image
3794	Pooling 2D images
3795	Creates a CompressionDescriptor from a byte buffer .
3796	Partitions the given list of aggregates into batches .
3797	Validates that all arrays have the same dimension
3798	Sets the op type .
3799	Compute Linspace for a given number of points .
3800	Convert a collection of matrices to a flattened representation .
3801	Computes the bilinear product of the input tensor
3802	Create a complex ndarray from a double array
3803	Creates a complex ndarray of the given type
3804	Creates a complex ndarray of the given shape
3805	Returns true if the sync should be replicated .
3806	Subtract a complex number .
3807	Compute the arithmetic of a complex number .
3808	Evaluates the complex number .
3809	Negate a complex number .
3810	Returns the absolute value of the complex number .
3811	Raises a complex number .
3812	Gets context .
3813	Binarize a set of features
3814	Sample a dataset
3815	Get memory footer .
3816	Converts an exception to a string .
3817	Converts a full hostname into a simple hostname .
3818	Convert string array to string .
3819	Converts a byte array into a hexadecimal string .
3820	Returns a string array containing all the strings in the given delimited by the given delimiter .
3821	Splits the given string using the given separator .
3822	Splits a string into an array of strings .
3823	Find the next character in the given string builder .
3824	Escapes the given string .
3825	Joins the given strings into a single string .
3826	Returns a camelized version of the given string .
3827	Replaces all tokens in the given template with the given replacements .
3828	Gets the stack trace .
3829	Returns the inverse of the matrix .
3830	Returns the number of elements at the specified n .
3831	Checks if access is on host side .
3832	Checks if the access is on the device .
3833	Create shape information for the given shape
3834	Create shape information for a given shape
3835	Checks whether the given shape is a vector .
3836	Get the order
3837	Get the offset for an array
3838	Convert an array of indices to an array of indices
3839	Get a short from the buffer .
3840	Reallocate the data buffer .
3841	Copy the contents of a byte buffer into a new buffer .
3842	Get a constant buffer for the given float array
3843	Get the Kafka uri .
3844	Compute power of ndarray
3845	Computes the log product of a vector
3846	Max of ndarray
3847	max
3848	Minimize a scalar
3849	Min maximum of two arrays
3850	Stops the ndarray
3851	Computes the expm1 function
3852	Computes the log1p for a given ndarray
3853	Prepare the bounds for the given shape
3854	Adjusts the scheme to fit the given step to upper bounds
3855	Returns next dataset .
3856	Solve a square - square matrix
3857	Build the allocation shape for the given data buffer .
3858	Checks whether a given name exists in the environment .
3859	Custom deserialization .
3860	Scans the tail of the tail of the queue .
3861	Create an ndarray from a pointer
3862	Create an ndarray from a file
3863	Allocate a memory pointer .
3864	Attaches an object to this object .
3865	Checks whether the master is started .
3866	Executes the given op .
3867	Flush the queue .
3868	Returns the InputStream for the resource .
3869	Get device for given thread id
3870	Attaches a thread to the device .
3871	Get the next device .
3872	Returns the name of the operating system .
3873	Calculates the ARCH type .
3874	Publish an ndarray
3875	Starts the instrumentation application .
3876	Creates a new data buffer .
3877	Intercept the operation
3878	Multiply two complex numbers .
3879	Process message .
3880	Avg pooling 3d operation
3881	Depth - 1D convoder
3882	Reset the configuration .
3883	Returns the name of the given op .
3884	Allocate and return a new array .
3885	Gets the shape of this variable .
3886	Execute the function
3887	Create ndarray
3888	Returns the expi of the given complex number .
3889	Center the given shape
3890	Truncate a given dimension
3891	Returns a new complex ndarray with the specified shape
3892	Finds the number of elements in the array .
3893	Publish an ndarray
3894	Processes a single message .
3895	Gamma function .
3896	Calculates the square root of a BigDecimal .
3897	Calculates the root of a BigDecimal .
3898	Calculates the root of a power of a number .
3899	Computes the exp of a BigDecimal .
3900	Calculate the exponential value .
3901	Computes power of two numbers .
3902	Raises a number to a power of n .
3903	Compute the cosine of a BigDecimal .
3904	Compute the tan of a BigDecimal .
3905	Compute the cosine of a complex number .
3906	Calculates the S3 of a BigDecimal .
3907	Calculates the tanh value of a BigDecimal .
3908	Calculate the sum of a BigDecimal .
3909	Calculates the cosh .
3910	Calculates Gamma .
3911	Calculates the broad curve for a broad curve
3912	Scales a BigDecimal by a scalar .
3913	Scales a BigDecimal with precision .
3914	Convert an error to a precision .
3915	Put a function for the given id
3916	Get the input arguments for a given function
3917	Update an array for the given variable name
3918	Put a shape for the given variable name .
3919	Associate an array with the given SDVariable
3920	Gets property for given function instance .
3921	Add a property for the given function
3922	Add the outgoing arguments for the given function .
3923	Add arguments for a given function .
3924	Returns true if the given function has multiple arguments .
3925	Execute a set of vertices
3926	Create a new SDVariable with the specified shape
3927	Computes each element where each element must match the input
3928	Zeros the input SDVariable with the given input
3929	Remove an argument from the function .
3930	Set the gradient for a SDVariable
3931	Average pooling 3d operation .
3932	Get a gru function
3933	Execute a list of DifferentialFunction
3934	Create a While Statement
3935	Execute the given function
3936	Execute the given function .
3937	Execute the backward and end
3938	Add a variable to the place holder .
3939	Allocates memory from memory .
3940	Returns the length for the given data type .
3941	Returns the DType identifying the given allocation mode .
3942	Get the data buffer type
3943	Get the op number by name
3944	Destroy all workspaces for current thread .
3945	Print allocation statistics for current thread
3946	Performs a lower triangular matrix .
3947	Receive an array
3948	Execute the accumulation
3949	Performs threshold decode
3950	Gets the node name .
3951	Invoke a scalar operation
3952	Assert that no workspaces are currently active .
3953	Calculates the negative log likelihood of the given labels
3954	Requests that the given time has been received .
3955	Attempt to request to the toe .
3956	Releases the ToE state
3957	Returns the current access state
3958	Build the environment .
3959	Sends the message to the clipboard .
3960	Initialize the current data set
3961	Initialize host collectors .
3962	Get device pointer .
3963	Synchronize the given data buffer .
3964	Applies an updater to the network
3965	Wait for the given allocation point .
3966	Creates an ndarray index .
3967	Gets the properties for this function .
3968	Returns true if the arguments have place holder inputs .
3969	Execute a diff operation
3970	Format an ndarray
3971	Imports a graph .
3972	Convert an object to a blob
3973	Load the complex ndarray .
3974	Saves the given array to the database .
3975	Copy real to the given array
3976	Copy the real imaginary matrix to an array
3977	Sets the epsilon of this complex number .
3978	Assigns this complex vector to another .
3979	Get the rows of a matrix
3980	Put a row at the given row
3981	Add a column to the matrix
3982	Multiply two arrays
3983	Add two ndarray
3984	Subtract the result of this matrix .
3985	Add two complex arrays
3986	Assigns a number to this node .
3987	Creates a complex vector
3988	Computes the eigenvalues of a matrix
3989	Computes generalized eigenvalues of A and B
3990	Returns the index of the largest element of a complex array .
3991	Copies two complex arrays .
3992	Computes a scalar vector .
3993	Generate SkipGram
3994	Counts the number of non zero - zero counts
3995	Do a reduction .
3996	Gets no - arg constructor .
3997	Gets a method handle for the given class and arguments .
3998	Invoke a method handle .
3999	Gets the annotation of the given type .
4000	Returns the declared annotation of the specified class .
4001	Checks if the declared annotation is present on the class
4002	Creates a proxy for the given interface .
4003	Load entity .
4004	Save entity .
4005	Creates a new MemcacheService
4006	Gets the metadata for the given kind .
4007	Queries a key - only query .
4008	Performs a hybrid query .
4009	Performs normal query .
4010	Queries a projection query .
4011	Queries a key query .
4012	Partitions an iterator into a single iterator .
4013	Loads the results from the given iterator .
4014	Builds a log message with the given path and message .
4015	Creates a key for the given pojo .
4016	Compare two keys .
4017	Creates a key from raw data .
4018	Convert a typed key to a key .
4019	Gets the kind .
4020	Returns true if the given type is missing .
4021	Checks if a super type is a super type .
4022	Returns the direct super types of the given type .
4023	Capture the given type .
4024	Returns the translator for the given type key .
4025	Returns the populator for the given class and path .
4026	Gets the index instruction .
4027	Checks whether the given method is of interest .
4028	Gets the declared properties .
4029	Gets the key metadata .
4030	Get a value from the session .
4031	Execute the round .
4032	Fetches pending entities and returns the result .
4033	Adds the indexed discriminators .
4034	Register a class translator .
4035	Returns the component type for the given collection type .
4036	Get map key type .
4037	Creates a forward path from the given path .
4038	Returns the final path .
4039	Returns the path string .
4040	Returns the depth of this path .
4041	Puts a collection of updates to the cache .
4042	Empty the cache .
4043	Cache the given buckets .
4044	Get all values from the cache .
4045	Gets the keys of the given buckets .
4046	Recursively find key fields .
4047	Sets the entity key .
4048	Sets the id of a pojo .
4049	Returns the raw value for the parent meta data .
4050	Register a class translator .
4051	Returns true if two types are identical .
4052	Transform the given owner .
4053	Get the annotation for the given type
4054	Adds all values from another session to this session .
4055	Loads an object from the pool .
4056	Executes the round .
4057	Translates a raw result .
4058	Fetches the given keys from the Cloud Datastore .
4059	Load entity .
4060	Creates a raw key .
4061	Gets the raw key .
4062	Gets the id value .
4063	Parses a key safe string .
4064	Create a transactional transactionless objectless .
4065	Create a transactional object with the specified work .
4066	Performs a transactional work .
4067	Checks whether the given value matches the given conditions .
4068	returns Objectify
4069	Returns a AsyncDatastore that can be used for caching .
4070	Get the metadata for the given object .
4071	Allocates a range of keys .
4072	Opens a new Objectify .
4073	Close the stack .
4074	Computes the index of the given list .
4075	Creates a reference .
4076	Returns the object stored in this object or throws an exception if not found .
4077	Add a new value to the context .
4078	Determines if this future is done .
4079	Generates the IF conditions .
4080	Executes the job .
4081	Gets a container by type .
4082	Get a stat for a given kind .
4083	Unwraps a Throwable and throws unchecked exceptions .
4084	Returns a translator for the given type .
4085	Gets the root entity .
4086	Create a translator .
4087	Loads the property .
4088	Get property from container path .
4089	Set the value on the pojo .
4090	Save property .
4091	Gets the value of the property .
4092	Write all extensions .
4093	Write the category .
4094	Write content categories .
4095	Process a snippet .
4096	Returns the bids for the given response .
4097	Returns the bid by id .
4098	Updates the bidbids of the provided response .
4099	Removes bidbidBids from the response list .
4100	Returns an iterable containing the imps matching the specified filter .
4101	Reads all extensions from the given object .
4102	Determines whether the current token is empty or not .
4103	Registers an OpenRtClientFactory .
4104	Register a new writer for the given class .
4105	Process the Snippet request .
4106	Applies the Snippet to the Snippet .
4107	Updates all objects by updater .
4108	Returns a list of messages that match the given predicate .
4109	Returns the current name of the current JsonParser .
4110	Reads an object .
4111	Reads an array .
4112	Returns the next token from the parser .
4113	Writes a field to the JSON generator .
4114	Writes a list of strings .
4115	Writes a list of integers .
4116	Writes a list of longs .
4117	Writes a list of enums to the JSON stream .
4118	Resolve a base URL .
4119	Fixes pure query targets .
4120	Gets the host segments .
4121	Get the host name of the URL .
4122	Gets the page from url .
4123	Load a list of strings from storm configuration .
4124	Extract configuration element from configuration
4125	Returns the protocol for the given URL .
4126	Generates the WARC info from a map of fields .
4127	Extract the refresh URL .
4128	Get the metadata for an outlink
4129	Removes metadata from the given Metadata object .
4130	Add a scheduled URL to the scheduler .
4131	Clean field name .
4132	Get the charset name from a byte array .
4133	Get charset from content .
4134	Get charset from content type .
4135	Snips the beginning of the content .
4136	Set a value .
4137	Gets the first value of the specified key .
4138	Get a list of cookies from a cookie string
4139	Checks whether the given cookie domain name matches the host name .
4140	Returns the cache key for the given url .
4141	Get robot rules set from url .
4142	Extract meta tags from a document .
4143	Called when a tuple arrives .
4144	Checks whether the given URL matches any criteria .
4145	Removes all rules from the source URL string .
4146	Read rules from a file .
4147	Process the URL query string .
4148	Loads the navigation filters from storm configuration .
4149	Adds a record format .
4150	Returns the number of milliseconds that should be less than the minDelay .
4151	Checks whether maxDelay is triggered by maxDelay
4152	Get parse filters from storm conf file
4153	Append a node to the document .
4154	Append a whitespace character .
4155	Add a processing instruction .
4156	Append a comment .
4157	Append a CDATA section .
4158	Write DTD .
4159	Add prefix mapping .
4160	Retrieves the value of the given tuple .
4161	Removes max length text .
4162	Checks if a custom interval exists in the metadata .
4163	Get URL filters from storm conf file .
4164	Set the number of items in the scroll bar .
4165	Determine the size and state based on the given measureSpec .
4166	Set the drawable used to draw an empty item .
4167	Set the angle of the wheel .
4168	Updates the currently selected position .
4169	Invalidate the wheel item drawable .
4170	Calculates the raw position of the given adapter position .
4171	Updates the current angle .
4172	Get the contrast color of the entry .
4173	Clamp the value to the specified value .
4174	Writes the coverage data to the JSON file .
4175	Get the data as a byte buffer .
4176	Set string .
4177	Make a 1D String array .
4178	Make an ArrayChar from a string .
4179	Creates an ArrayChar from the given values array .
4180	Creates an ArrayChar from a String array
4181	Returns the time interval offset for the given record .
4182	Show this IndependentWindow .
4183	Show the window if it is not already in the window .
4184	Compute the size of a CF grid .
4185	Read Grib1 file .
4186	Creates a new unit name .
4187	Creates a new unit name .
4188	Makes a plural form .
4189	Returns true if the given date is included in this list .
4190	Creates and returns a new range that intersects this date range .
4191	Extends this range to the specified date range .
4192	Extend the start of the specified date .
4193	Sets the start date .
4194	Sets the end date .
4195	Sets the duration .
4196	Recalculates the duration .
4197	Adds an action to the map .
4198	Prints the error message .
4199	Gets the directory name .
4200	Get the parameters as String .
4201	Decode the given raw data .
4202	Compute the bounds of the supplied LatLonRect .
4203	Synchronize the UI .
4204	Computes the number of chunks that should be limited to the specified dimension .
4205	Register a Watcher in the catalog .
4206	Process events .
4207	Sets the reference date .
4208	Open a feature dataset .
4209	wrap a FeatureDataset
4210	Checks whether the given feature type is ok .
4211	Get a FeatureType from a NetcdfFile .
4212	Write catalog .
4213	Converts a catalog to HTML .
4214	Gets the user CSS .
4215	Get user header .
4216	Make a dynamic catalog from a file path .
4217	Add the global services to the catalog .
4218	Initializes the global credentials provider .
4219	Get the content of a URL as a string .
4220	Performs a PUT request .
4221	Gets the front page .
4222	Make a catalog .
4223	Extracts a geometry from a group of points .
4224	Gets a single dataset or by typeName .
4225	Compares two vertices .
4226	Creates a new unit ID .
4227	Parses an attribute string .
4228	Reads the top part of the file .
4229	Convert two shorts into an int .
4230	Convert a byte array to an int .
4231	Returns a date with the given number of milliseconds .
4232	Make sure that the given name is valid .
4233	Returns true if the name is a netcdf3 object name .
4234	Opens the writing file .
4235	Read record data .
4236	Read record data subset .
4237	Fill non record variables .
4238	Construct a time struct from a given time index .
4239	Make a time struct from a given calendar .
4240	Returns true if the given string contains a time template .
4241	Adds a function to the server .
4242	Get a boolean function by name .
4243	Get a function by its name .
4244	Loads a new server side function .
4245	Returns the level name of the given grid record .
4246	Returns the description of the specified record .
4247	Returns the level unit for a given record .
4248	Returns the projection type of the given grid definition .
4249	Returns true if the specified record is a vertical coordinate .
4250	returns true if the record is a Layer
4251	Create a coordinate transform from a variable definition .
4252	Make a dummy transformation variable for a coordinate matrix .
4253	Make a projection based on the coverage matrix .
4254	Entry point for testing
4255	Saves the contents of the preferences .
4256	Returns a copy of this Chronology with the specified time zone .
4257	Writes a count .
4258	Write an atomic array to the stream .
4259	Write the given bytes to the output stream .
4260	Output a number of bytes .
4261	Finish initialization .
4262	Construct a CalendarDateRange from a DateRange .
4263	Creates an instance of Gds2 .
4264	Parse the given text and return the number of rows .
4265	Parse the given text using DASparse .
4266	Swaps grid header .
4267	Reads a data point .
4268	Tries to read a grid .
4269	Write a constraint .
4270	Write the headers and attributes to the file output
4271	Writes all the operations to the file .
4272	Read all files from a directory .
4273	Scans a file for logs .
4274	Gets the grid packing type .
4275	Find grid record by param .
4276	Performs rkK on the specified word .
4277	Unpack data .
4278	This method is used to get rid of QR decomposition
4279	Unpack Grib1 data .
4280	Unpack Grib2 data .
4281	Prints the grid list .
4282	Reads next byte .
4283	Obtains a calendar date from the given calendar .
4284	Create a CalendarDate from a java . util . Date
4285	Returns a CalendarDate with the given milliseconds .
4286	Creates a new calendar date with the specified number of milliseconds .
4287	Parse the units string into a CalendarDate object
4288	Get the difference between two dates .
4289	Create an AtomVarAtom .
4290	Setup the download parameters .
4291	Escapes a string .
4292	Creates a list of slices from a list of ranges .
4293	Unwrap a file .
4294	Returns true if the specified dimensionset contains variable length
4295	Compute the effective shape .
4296	Add a date to a date
4297	Multiply this unit by another .
4298	Divides this unit by using the given unit .
4299	Divides this unit into another unit .
4300	Resolves this unit to another .
4301	Converts this unit into a derived unit .
4302	Convert a float array into a derived unit .
4303	Converts a derived unit into a double .
4304	Returns the canonical string representation of this unit .
4305	Reads the data from the variable index .
4306	Reads the data from a collection of coordinates .
4307	Flattens a list of stations from a list of stations .
4308	Finds a service by its name .
4309	Gets the gate size for the given data type .
4310	Returns the index of the first start of the specified data type .
4311	Returns the number of gates for the specified data type .
4312	Serializes a Netcdf dataset to an OutputStream .
4313	Determine the preferred layout size .
4314	Verifies that the given dataset matches the given path .
4315	Generate the catalog resolver catalog .
4316	Returns a CalendarDateUnit with the specified name and udunit string .
4317	Returns a new CalendarDateUnit with the specified calendar .
4318	Constructs a CalendarDateUnit using the specified CalendarPeriod .
4319	Returns the offset from a reference date .
4320	Makes a calendar date .
4321	Replies the quantity dimension .
4322	Checks to see if a UUID is a valid UUID .
4323	Read the stn names of the stanza file .
4324	Read data for a variable .
4325	Read an array of int data .
4326	Read data from a variable .
4327	Returns the elevation of the given angle .
4328	Calculates the step given the range_b .
4329	Calculates the angle between two short points .
4330	GetData Method .
4331	calculate the yyyy correlation function
4332	Create a vertical transform for this dataset .
4333	Sets the debug flags .
4334	Set the index write index mode .
4335	Reads a data file .
4336	Checks if a record is missing .
4337	Get the LatLon rectangle .
4338	Finalize the structure .
4339	Write tabs to a StringBuffer .
4340	Pad a string to a given width .
4341	Pad an integer to a string .
4342	Pad long .
4343	Formats a byte size .
4344	Print a double .
4345	Print 2D value .
4346	Create a string representation of the shape
4347	Finish the slice .
4348	Returns a string representation of this constraint .
4349	Compose two slices .
4350	Maps an index to a single point .
4351	Dumps the contents of a byte buffer to a byte buffer .
4352	Dumps the contents of a byte buffer to a byte buffer .
4353	Returns the type of the element with the given name .
4354	Returns the ellipsoid of the given epsgId
4355	Decode vlen data .
4356	Decode vlen data .
4357	Extracts a list of URLs from a URL .
4358	Returns the text content of the URL .
4359	Filters the tags from an input stream .
4360	Reads the data of a variable v2 variable .
4361	Add all the given attributes .
4362	Remove the specified attribute .
4363	Remove the specified attribute ignoring case .
4364	Get the number of runs in time units .
4365	Add an action source listener .
4366	Convert a string to a Date
4367	Gets the standard date from the given text .
4368	Returns the origin of the Time Scale .
4369	Returns the date as a Date object .
4370	Make a date from the given value .
4371	Returns the value of the given date .
4372	Converts a double value into a standard date string .
4373	Get the grid spacing in meters .
4374	Add the coordinates to the netdf file .
4375	Create a coordinate axis .
4376	Computes the projection of the given type .
4377	Add GDS parameters to a variable .
4378	Create a coordinate system variable .
4379	Creates a LatL coordinate system .
4380	Creates a stroid from a point .
4381	Make the mercator .
4382	Makes the MSGgeostationary .
4383	Set the x y and y coordinate of the point
4384	Read a dataset .
4385	Read a dataset scan .
4386	Reads the metadata from a URL .
4387	Gets the level type 1 . 1 level 1 .
4388	Checks if the file is a valid file .
4389	Writes a number of bytes to the stream .
4390	Set the name of this widget .
4391	Get the coordinate name of the coordinate type
4392	Gets the coordinate name for a given dimension
4393	Build the response .
4394	Build DAPException .
4395	Recurse down the levels of level variables .
4396	Creates a Z coordinate axis based on a list of values .
4397	Creates new variables .
4398	Create a CoordinateAxis from a reference variable .
4399	Bitwise modify the value of a float
4400	Writes the GIB file to the output file .
4401	Wrap a NetcdfFile .
4402	Opens a Netcdf file .
4403	Clear all the coordinate systems .
4404	Finds the coordinate axis with the specified type .
4405	Find the coordinate axis with full name
4406	Finds a coordinate system by its name .
4407	Find a coordinate transform by its name .
4408	Return true if enhance mode is enhanced .
4409	Set the values of a variable
4410	Set the values of a variable
4411	Creates an array with the given data type .
4412	Returns the index of this dataset .
4413	Returns an existing MFileOS7 object or null if it does not exist .
4414	Get features that intersect the bounding box
4415	Discretize the darray
4416	Adds information about the ThreddsMetadata object .
4417	Adds an invdocumentation to the list .
4418	Removes invDocument by type
4419	Returns the number of bytes that start at a given start .
4420	Checks if a given netdf file is a mine file .
4421	Add a Dataset to the MFile .
4422	Splits a string into a list of convention names .
4423	Build attribute attribute .
4424	Builds the coordinate system from a NetcDF dataset .
4425	Finds the coordinate axes for each variable in the network .
4426	Finds the coordinate system referenced by the network .
4427	Make all the coordinate systems .
4428	Makes sure that the coordinate system is minimal .
4429	Checks if a coordinate is on a coordinate axis .
4430	Add a coordinate variable .
4431	set a new dataset
4432	Set the dataset filter .
4433	Marks the given dataset as visited by the given filter
4434	delete invdataset
4435	Initialize the TDS server .
4436	Counts the given value for the given name .
4437	Add name and symbol .
4438	Compares two column values for the given column
4439	Compares two boolean values .
4440	Gets the group scope .
4441	Process all reserved attributes .
4442	Checks whether the given time range is valid .
4443	Returns true if there are more elements in the slice .
4444	Register a class with the specified name .
4445	Register a DSP .
4446	Returns true if the specified class is registered .
4447	Unregisters the specified DSP class .
4448	Creates a new Grib2T table .
4449	Get the estimated time interval size in hours
4450	returns the offset of the forecast time interval
4451	Get the Vert unit type .
4452	Finalize the DAP .
4453	Sorts the DAP nodes .
4454	Gets the data file for a given partition .
4455	Find a variable attribute with the specified attribute .
4456	Find a variable with the specified attribute name .
4457	Returns the name of the variable with the given attribute value .
4458	Find a variable with the specified attribute name .
4459	Finds a nested structure .
4460	Determines whether the dataset contains a record structure .
4461	Gets the value of a global attribute .
4462	Get the FeatureType from a dataset
4463	Gets the variable name from a dataset .
4464	Returns the value of a coordinate .
4465	Calculates the connect point of a polygon .
4466	Returns the coordinates of the coordinate axis .
4467	Specify a section of a section .
4468	Returns the index of the closest point to the given target .
4469	Gets the short name .
4470	Add an action to the menu .
4471	Returns a match for a given path .
4472	Entry point for testing
4473	Returns the index of the first occurrence of the specified data .
4474	Adds a source to the cache .
4475	Report the cache contents .
4476	Stop the background loading .
4477	stop background loading
4478	Create a GET request to get a GET method
4479	Make an instance of an HTTP method .
4480	Returns a random float .
4481	Returns next random count .
4482	Reads data for a given variable .
4483	Get a file system provider .
4484	Reads the stations table .
4485	Gets the index of a grpc element .
4486	Remove a data variable .
4487	Calculates the cloud hgt2 value for the cloud hgt2 view
4488	This method is called when the data is read .
4489	Set the number of colors .
4490	Calculates the transform of the rectangle .
4491	Create an auth scope from a given URI .
4492	Completes the current position .
4493	Returns true if the given factor is a reciprocal of this one .
4494	Get the catalog for a directory
4495	Returns the index of the first occurrence of the given char .
4496	Reads the metadata from a URL .
4497	Reads metadata content .
4498	Adds the content to the catalog element .
4499	Validate catalog metadata content .
4500	Read catalog gen config element .
4501	Read dataset source .
4502	Read DatasetNamer element .
4503	Read dataset filter element .
4504	Read result service element .
4505	Creates the XML element that represents a catalog generation config .
4506	Creates a Jdom2 element for a DatasetSource .
4507	Create a DatasetNamer .
4508	Creates the XML element that represents a DatasetFilter .
4509	Create the result service element .
4510	returns true if the given flag exists
4511	Construct the menu .
4512	Add all children to the given menu .
4513	Adds the parameters to the table .
4514	Make a parameter from the gem file .
4515	Get parameter by name .
4516	Reads the contents of the stream .
4517	Reads a byte array from the stream .
4518	Replaces all file template ids in the filespec with the same name .
4519	Sets the information about this station .
4520	Accepts the current edit value .
4521	Show the format of the given JFormattedTextField .
4522	Get the bitmap from the file .
4523	Set the netcdf file .
4524	Sets the debug flags .
4525	Parses a name .
4526	returns true if the DStruct is a group
4527	Get the string length of a variable
4528	Get a shared dimension
4529	Construct a list of dimensions from a DAP array .
4530	Returns true if the specified type is unsigned .
4531	This method retrieves data DRS from the server .
4532	get an ImageIcon
4533	Get an image by full name
4534	Creates a cursor with the specified image name .
4535	Read data filled with fillValue
4536	Read data fill .
4537	Read data fill .
4538	Creates an array of primitive types .
4539	Converts a byte array to a char array .
4540	Converts a char array to a byte array .
4541	Converts a byte array into a char array .
4542	Reads a section .
4543	Creates an array structure from a parsed section spec .
4544	Get scalar string .
4545	Gets a scalar structure from a member .
4546	Get an Array object .
4547	Compute the structure members of a DAP variable .
4548	Add dimensions to NetcdfFile
4549	Creates a crawlable dataset .
4550	Normalize the given path .
4551	Add an explicit dataset to the cache .
4552	Add a directory scan .
4553	Finalize the dataset .
4554	Creates a list of datasets based on the aggregated data .
4555	Get a dataset based on the aggregation mode .
4556	Make a dataset .
4557	Put a dataset control
4558	Add a point
4559	Get the BBB upper position .
4560	Get the BBB lower case lower case
4561	Validate this configuration .
4562	Checks whether a dataset matches the target dataset .
4563	Adds all the points contained in the feature dataset .
4564	Parse a constraint .
4565	Evaluates all clauses .
4566	Prints the constraint .
4567	Makes sure that the given ncdf file has changed .
4568	Set shared dimensions .
4569	Checks if there is no unknown dimensions .
4570	Finds a group by its name .
4571	Reads the Xlink content .
4572	Returns the standard URI of the catalog .
4573	Set the projection .
4574	Add a component to the ISpringLayout .
4575	Invalidate the layout .
4576	Remove a layout component from the map .
4577	Returns the minimum layout size of the container .
4578	Layout the target container .
4579	Checks if a coordinate system is a radial coordinate system .
4580	Get the maximum radius of the radial axis
4581	Opens an HTTP connection .
4582	Convert an earth coordinate to sat coordinates .
4583	This function converts the coordinates to Earth coordinate .
4584	Calculates the GOES from the given degrees and theta coordinates .
4585	Convert the scan geometry to the sweep angle axis .
4586	Convert angle axis to scan coordinates .
4587	Sets the current runtime coordinates .
4588	Writes a PointObset to a file .
4589	Rewrite all points in a file .
4590	Returns an ArraySequence for the given member name .
4591	Gets the full name .
4592	Gets the unique identifier .
4593	Get the InvAccess by type
4594	Find a dataset by its name .
4595	Returns the parent catalog .
4596	Get the metadata of the catalog .
4597	find service by name
4598	Get all variables for a given vocabulary
4599	Find all the catalog references in a list of TVDatas
4600	Escapes the given path .
4601	Generate the standard deviation of the given array .
4602	Extend interpolation function .
4603	Compute the rho of a point .
4604	Get detail info info .
4605	Returns a structure for the given parameters .
4606	Create a blank variable .
4607	Create a parameter for the given parameters .
4608	Add global attributes .
4609	Get the size of a stn variable .
4610	get 1D Array
4611	Compute the goto_state_state_state_rule_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_variable_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_state_name
4612	Error message .
4613	Reduce the top level of the stack .
4614	Read DMR .
4615	Read a document .
4616	Reads data from the input stream .
4617	Reads the header .
4618	Converts an ISO - 8601 string into a Date object
4619	Read a table from a URL .
4620	Transfer a group to another group .
4621	Get the stn file for a given location .
4622	Opens the station file .
4623	Gets the index of the starting index .
4624	Gets the index of the node .
4625	Creates a list of all runtime collections .
4626	Sets the tab value .
4627	Get the DataType for the given format
4628	Calculates the ECF coordinates of a given point
4629	Clean the unit string .
4630	Clean the name .
4631	Checks whether unit is unitless .
4632	Creates a note object .
4633	Returns the variable id of the given note .
4634	Parses the DAS query .
4635	Find a DodsV object by its name .
4636	Find a DodsV .
4637	Find by index .
4638	Returns the parent group .
4639	Returns the dimension at the specified index .
4640	Finds the dimension index with the given name .
4641	Returns the value of the units attribute .
4642	Returns the shape as section .
4643	Create a new slice of this variable .
4644	Sets the enum type .
4645	Reads a range of ranges .
4646	Read a scalar string .
4647	Reads the contents of the file .
4648	Reads the contents of a section .
4649	Writes a CDL definition to a CDL file .
4650	Returns a string representation of this variable .
4651	Sets the data type .
4652	Sets the dimensions of this shape .
4653	Reset the shape
4654	Set the dimensions of this variable .
4655	Resets the dimensions of this variable .
4656	Sets the given dimension at the given index .
4657	Set cached data .
4658	Returns a list of all dimensions contained in this dimension .
4659	Set the bounding box .
4660	Finalize the grid .
4661	Returns all datasets in the database .
4662	Returns true if the path ends with the dp context .
4663	Opens a CDM file .
4664	Build DMR file .
4665	Recursive method to build the sequence type variables .
4666	Build dap dimension definitions .
4667	Finds a matching enum type .
4668	Convert a list of dimensions to a core dimension .
4669	Scans a Buf file .
4670	Processes a BufR message as a dataset .
4671	Perform a file upload .
4672	Get the transform .
4673	Returns true if the map area should be rotated .
4674	Get the area of the map
4675	Converts a world coordinate to screen coordinates .
4676	Pan to pan pan
4677	Zoom .
4678	Recalculate the navigation from the bounding box .
4679	Add a listener
4680	Remove a listener
4681	Send an event to all registered listeners .
4682	Send an event to all registered listeners .
4683	Print a command to a file
4684	Print a command to a Netcdf file .
4685	Prints the data of a variable .
4686	Print a variable data section
4687	Prints the structure data .
4688	Prints an Array to a PrintWriter .
4689	Prints an array .
4690	Writes the given netdf file to the given writer .
4691	Read a double attribute .
4692	Adds a parameter to the coordinate matrix .
4693	Main entry point .
4694	Reads an object from the base type .
4695	Checks to see if a record is positive .
4696	Compare two derived units .
4697	Creates a label for the given quantity ID .
4698	Set the bit offset .
4699	Convert a number of bits to an unsigned integer .
4700	Convert a bit to an SInt .
4701	Opens a connection .
4702	Get DAS connection
4703	Gets DDS .
4704	Get the complete CE from a given CE node .
4705	Convert a projection to a LatLon point .
4706	Extracts the catalog catalog catalog from the xml file
4707	Convert a DateRange to a DateRange
4708	Checks to see if the RA is valid .
4709	Handles the spaceship information .
4710	Handle sensor information .
4711	Reads the root element .
4712	Removes all character data from a string .
4713	Unescapes a string .
4714	Escapes a URL query .
4715	Unescapes a URL query .
4716	Decode backslash .
4717	Encode a string .
4718	Add Layer Global Attributes .
4719	Swaps the short at the specified offset .
4720	Swaps an int at the specified offset .
4721	Swaps a double value at the specified offset .
4722	Swaps a float .
4723	Swaps double .
4724	Converts a short into a byte array .
4725	Convert an int to a byte array .
4726	Converts a long to a byte array .
4727	Create a new vertical transform .
4728	Writes an XML document to the document .
4729	Computes the cosine of a vector .
4730	Start XML file
4731	Writes the features to the file .
4732	Add levels .
4733	Add the vertical dimension to the NetcdfFile
4734	Adds a new level to the network .
4735	Finds the coordinate transformation for a grid level .
4736	Returns the index of the specified record .
4737	Cancels the timer .
4738	Gets the file associated with the given location .
4739	Returns the existing file or null if not found .
4740	Print the cache files .
4741	Delete files from disk cache .
4742	Calculates the bearing of two points .
4743	Calculates the bearing of two points .
4744	Demonstrates how to find the bearing .
4745	Finds a point on the Earth .
4746	Finds a point in a LatLon point .
4747	Finds a point in the map .
4748	Start the background thread
4749	Load picture .
4750	Loads the image .
4751	Stop the source picture .
4752	Call this method to stop the image
4753	Gets the image size .
4754	Set the source image
4755	Returns the standard URI of the catalog .
4756	Make a data descriptor .
4757	Transfer all data descriptors from one list to another .
4758	Count the number of bits in this DataDescriptor .
4759	Compare two DataDescriptors .
4760	Loads the header data .
4761	Loads the data .
4762	Get data field by name .
4763	Retrieves a set of doubles by name .
4764	Retrieves a string field by its name .
4765	Replies the boolean array of the specified field .
4766	Returns the name of the field .
4767	Get the names of all the fields .
4768	Dump data from DBase file .
4769	Get the attributes .
4770	Sets the specified attribute .
4771	Remove an attribute .
4772	Returns the group .
4773	Returns the DapNode s parent .
4774	Get the escaped short name .
4775	Returns the path of the current node .
4776	Returns the path of the group .
4777	Returns the fully qualified name of the DAP node .
4778	Returns true if parent is a top level .
4779	Build DAP data .
4780	Add a collection of beans to the key .
4781	get a List from a Map
4782	Get object by name .
4783	Read data from a file .
4784	Prints the data structure .
4785	Print a compound instance .
4786	Writes the element to a String .
4787	Write the element to a file .
4788	Write element to output stream .
4789	Writes the given element to the given writer .
4790	Creates a WcML element .
4791	Make a coordinate transform from an attribute container .
4792	Get the attribute value as an int array .
4793	Create a unit .
4794	Creates a unit .
4795	Create unit db .
4796	Create unit db .
4797	Get the SI instance .
4798	Finds the first coordinate element in the target space .
4799	Returns the index of the closest point to the target coordinate .
4800	Subtracts the values of the coverage axis .
4801	Opens a Dataset
4802	Open a feature dataset
4803	Annotate a Dataset
4804	Read Grib1 data from file .
4805	Assembles the given EnumSet .
4806	Normalizes a string .
4807	Normalize units .
4808	Build DAP dataset .
4809	Call this method to finish the processing .
4810	Gets the element with the specified key .
4811	Associates the specified key with the specified key .
4812	Gets the current date .
4813	Prints the XML attributes of a DAP node .
4814	Print an XML attribute .
4815	Returns true if the specified attribute is a special attribute .
4816	Prints the dimensions of a given variable .
4817	Returns true if the given raf file is a valid file .
4818	Set the area directory attributes .
4819	Sets the navigation block attributes .
4820	Returns the type of the cal name .
4821	Sets the attributes of the Calibrator .
4822	Finds the coordinates of the coordinate system that can be found in the dataset .
4823	Returns the coordinate name of a Dataset .
4824	Finds the coordinate of a Dataset .
4825	Finds a coordinate on a dataset based on a given type and a predicate .
4826	Finds the dimension of a dataset .
4827	Returns the best coordinate system for the given dataset .
4828	Finds the coverage coordinate axis based on the given axis type
4829	Get a variable by name
4830	Old deserialize .
4831	Reads a marker .
4832	Writes a marker to the stream .
4833	Handle a fatal error .
4834	Creates a dataset with the given base and base .
4835	Simple demo .
4836	Convert a member to a java array .
4837	Gets the parameter list .
4838	Set the list of stations .
4839	Sets the selected station .
4840	Redraw the region
4841	Custom deserialization .
4842	Custom serialization method .
4843	Merge this unit into this one .
4844	Add a unit .
4845	Adds a symbol to this unit .
4846	Returns the unit with the given identifier .
4847	Add a unit by name .
4848	Add a unit by symbol
4849	Add unique unit .
4850	Adds all the feel to the menu .
4851	Find a record by drs position
4852	Reads a structure from the dataset .
4853	Serialize this dataset into a DataOutputStream
4854	Get the values of the parameter as array of float values .
4855	Construct a copy of this projection .
4856	Opens a new feature dataset .
4857	Opens a feature dataset .
4858	Opens a dataset .
4859	Adds an InvDataset to NetcDataset
4860	Removes all properties from the given list .
4861	Adds a new partition .
4862	Create a GribCollection from the given index .
4863	Creates a new instance of RegExpandVariant for a match pattern .
4864	Creates a new instance of RegExpand based on a match pattern .
4865	Write query capability to file .
4866	Reads the data structure .
4867	Loads a picture from a given URL .
4868	Set the source image
4869	Zoom the image to the specified size .
4870	Paint the component .
4871	getTF - time - I - O
4872	This function converts a TTS coordinate array into a string .
4873	method to get the time ids from the id
4874	method to get the i - th day of the year
4875	Returns the LV coordinate of a vertex .
4876	Reverses the values in the specified array .
4877	Gets the grid packing type .
4878	Get data type
4879	Read data from an input stream .
4880	Externalizes an output stream to an output stream .
4881	Returns the tag with the given code .
4882	Get next image .
4883	Returns the size of the specified type .
4884	Computes the sum of all elements in the given array .
4885	Set the grid .
4886	Set the scale factor .
4887	Clear the grid .
4888	Marks the specified object as a point in the grid .
4889	Finds the intersection of the specified rectangle .
4890	Finds the intersection point of a point .
4891	Finds the closest point in the grid .
4892	Returns the squared distance between the specified point and the specified point .
4893	Get the base unit .
4894	Returns the service type from the fragment string .
4895	Returns the service type for the given url
4896	Determine the type of a given path .
4897	Checks if the given location is a list of d pods .
4898	Checks if the given location is dap4 .
4899	Send a variable to the stream .
4900	Get the fully qualified name of a class .
4901	Get the fully qualified name of a class .
4902	Locates a file .
4903	Locates a relative path .
4904	Extract data from buffer .
4905	Get the path of a DAP variable .
4906	Returns null if the path is null or empty .
4907	Joins a string array into a single string .
4908	Checks if a path contains a drive letter .
4909	Extracts the list of protocols from a breakpoint .
4910	Converts an index into a list of slices .
4911	Converts an offset to a list of slices .
4912	Returns true if slices are contiguous .
4913	Checks if a list of slices is single point .
4914	Convert a list of slices to an index .
4915	Read data from an input stream .
4916	Sets the information about this station .
4917	Sets the short names of the coordinates .
4918	Read feature collection config from catalog .
4919	Adds a declaration to the Dataset .
4920	Updates the given list of groups .
4921	Returns the specified variable with the specified name .
4922	Determine the Axis type of a dataset .
4923	Returns the type of the given time range indicator .
4924	Returns a subset of the coverage coordinates that overlap the specified feature .
4925	Gets the range iterator .
4926	Sets the properties .
4927	Retrieves the session id .
4928	Sets the maximum number of redirects .
4929	Sets whether the session should be used .
4930	Closes all methods .
4931	Sets the authentication and proxy .
4932	Track a new session .
4933	Set the global credentials provider
4934	Validate the URL
4935	Create an index for the given shape
4936	Compute the number of stride for a shape
4937	Create a new index .
4938	Reduce an index .
4939	Returns a new index with the specified dimension .
4940	Creates a new index of this index .
4941	Creates a new index with the specified dimensions .
4942	Get an index iterator for an array .
4943	Get the current current value .
4944	Sets the specified array .
4945	Set a new dimension .
4946	Sets the dimension of this index .
4947	Get the time interval name .
4948	Make a calendar date range .
4949	Generates a list of date - time dates .
4950	Create a list of parameters from a given DMPPPart .
4951	Get the list of stations corresponding to the RPM file .
4952	Make a new station from the header values .
4953	Returns the names of the currently registered stations .
4954	Returns a list of dates .
4955	Returns the index of the station with the given ID .
4956	Gets the file type .
4957	Increments the specified number of characters .
4958	Sets the indent level .
4959	Read or create an index from a single file .
4960	Add a directory scan .
4961	Checks if a scan is needed .
4962	Check if there are more datasets that are most recently scanned .
4963	Sets the debug flags .
4964	Adds a new variable to the model .
4965	Writes the variables to the file .
4966	Validates an XML object .
4967	Returns a string representation of this constraint .
4968	Sets the original variable .
4969	Call this method to get the value of this variable .
4970	Do the actual read .
4971	Returns true if any of the variables needed for this structure are needed .
4972	Convert an array structure to a new structure .
4973	Convert the members of this StructureMembers to a StructureMembers
4974	Find the variable with the given orgName
4975	Checks whether a variable has data .
4976	Enhances all variables in this dataset .
4977	Returns true if the resource control is authorized
4978	Makes an empty sequence .
4979	Creates an array sequence for the given parameters .
4980	Create a sequence of parameters from the given parameters .
4981	Add vertical coordinate attribute .
4982	Method to read the catalog asynchronously .
4983	Reads an invCatalog from a catalog .
4984	Reads an invCatalog from a string .
4985	Serializes an InvCatalog to an OutputStream .
4986	Get metadata converter by key .
4987	Returns a unitless identifier .
4988	Multiply this unit by one .
4989	Divides this unit by another unit .
4990	Converts an input array into a derived unit array .
4991	Checks whether the given unit is compatible .
4992	Write a feature
4993	Write a point .
4994	Writes a line to a string .
4995	Writes a polygon to a string .
4996	Get the value of a named attribute .
4997	Get the subsnodes of a node
4998	Parse response node .
4999	Pass all reserved attributes to the DAP node .
5000	Gets the subset string .
5001	Creates a new ArrayStructureMapper for the given structure .
5002	Sets a member array .
5003	Factory method to create a structure from a structure
5004	Returns the type of geometry type .
5005	Make a station feature from the data structure .
5006	Compiles a CE AST .
5007	Compile a filter .
5008	Define a dimension definition .
5009	Create an ArrayView .
5010	Returns true if the specified rectangle is contained inside this rectangle .
5011	Extend the point with the given point .
5012	Extend the bounds of the given LatLonRect .
5013	Calculates the intersection of the LatLon rectangle .
5014	Adds two arrays to the array .
5015	Checks whether the arrays are conformable .
5016	Checks whether the shapeA is conformable .
5017	Converts an array to an array .
5018	Copy the contents of an array to the result .
5019	Copies all boolean values from one array to another .
5020	Copies the contents of an array to the result .
5021	Get min max .
5022	Set double .
5023	Make a catalog builder from the catalog .
5024	Returns a ProjectionAdapter for a given Projection
5025	Unescapes a DAP identifier .
5026	URL - decodes a string .
5027	Unescapes a URL .
5028	Escapes a string .
5029	Unescapes a string .
5030	Tokenizes an escaped name .
5031	Returns the first index of the specified character .
5032	Converts backslash to DAP .
5033	Read an atomic scalar variable .
5034	Returns the path of the cursor .
5035	Returns the UIDDef of the specified class
5036	Returns the java class for the given component .
5037	Compile the dataset .
5038	Compile DAP structure array .
5039	Compile a DAP structure .
5040	Compiles a DAPSequence .
5041	Compiles a DAPSequence .
5042	Read a 64 - bit long from the stream .
5043	Get field by name
5044	Returns the value of the field .
5045	Sets the value of the field .
5046	Adds a field to the cursor .
5047	Add a checkbox field .
5048	Add a date field .
5049	Adds a double field .
5050	Add int field .
5051	Adds a password field .
5052	Add a text field .
5053	Add a TextCombo field .
5054	Add a TextArea field .
5055	Adds a heading to the layout .
5056	Add a new layout component .
5057	Add an empty row .
5058	Finds the active frame .
5059	Gets the cell spacing .
5060	Gets the factors .
5061	Multiply two factors .
5062	Raises a power of factors to a power of 2 .
5063	Checks if this dimension is a composite of another dimension .
5064	Returns true if all factors are not dimensionless .
5065	Creates a new Grib1Parse instance .
5066	Creates a Grib1Parse instance for the given param element .
5067	Adds a parameter table lookup file lookup table lookup .
5068	Adds a parameter table .
5069	Computes the upper case of the given exponent .
5070	Converts an input array into a derived unit .
5071	Initialize the unit table .
5072	Creates a vertical coordinate variable .
5073	Returns the name of the file .
5074	Reads a short from the byte array at the given offset .
5075	Read an int from the byte array .
5076	Reads a float from the byte array .
5077	Reads a double from the byte array .
5078	Perform aa access to the unit .
5079	Add symbol .
5080	Creates a converter for the given units .
5081	Set the structure data .
5082	Set the point feature data .
5083	Draw all shapes in the given graphics context .
5084	Get the list of shapes
5085	Read all data from the input stream .
5086	Read a number of bytes from the stream .
5087	Reads more bytes .
5088	Reads a number of bytes from the stream .
5089	Skips the next number of bytes .
5090	Add the vertical dimension to the network .
5091	Returns the index of the coordinate of the given record .
5092	Determine if a file is a valid file .
5093	Reads and parses the RADDF file .
5094	Reads data of a variable .
5095	Read single row data .
5096	Create a dataset from a dataset .
5097	Creates the given variable .
5098	Fire the map area event
5099	Set the map area .
5100	Set the map area .
5101	Set the map center of the map location .
5102	Set the projection
5103	Add the actions to the menu
5104	Redraw the redraw timer .
5105	Calculates the new screen size .
5106	Set the selected node .
5107	Retrieves a double value at the specified offset .
5108	Get the double value from the datatype .
5109	Gets an object .
5110	method to getter name
5111	Reads a scaled integer .
5112	Find a parameter by name ignoring case .
5113	returns true if there are more elements
5114	Swap byte order .
5115	Get the number of time steps per file .
5116	Returns the full path of the data file .
5117	Gets the file names .
5118	Gets the path to DDF file .
5119	Returns the full path for the given filename .
5120	Adds a chsub .
5121	Converts a reference date to a TimeCoordint .
5122	Reads a WMO file .
5123	Get the uncompressed data .
5124	code a code point
5125	Parses a circle
5126	Read the nids from the nids file .
5127	Parses a CDM file .
5128	Parses a code and stores it in the code .
5129	code a unlinked vector
5130	Convert a short array into an array of levels .
5131	Gets the dual interpolation levels .
5132	Adds a new variable to the network .
5133	Adds a parameter to the network .
5134	Reads a BZip2 file into a byte array .
5135	Get an unsigned integer from a byte array .
5136	Convert a number into an unsigned integer .
5137	Converts a byte array into an object .
5138	Performs DMR query .
5139	Creates a new DAP request .
5140	Send an error response .
5141	Append anchor point .
5142	Stretch the last element .
5143	Get the bounds of the stretch .
5144	Returns the bounds of the last element of the list .
5145	Format a date only .
5146	Replace data variables .
5147	Checks the memory array size .
5148	Read 2 int .
5149	Read a unsigned integer .
5150	Reads a 32 - bit int from a file .
5151	Reads a two - byte unsigned integer .
5152	Reads a 32 - bit unsigned integer .
5153	Read a float 4 bytes from a file .
5154	Calculate a 4 - byte floating point number .
5155	Reads a 64 - bit integer from the given file .
5156	Count the number of bits in a bitmap .
5157	Construct a copy of this projection .
5158	Returns a string representation of this region .
5159	Escapes the given string .
5160	Unescapes a string .
5161	Splits a path .
5162	Creates an invocations for the FMR file .
5163	Returns the special character for the given path .
5164	Returns the projected components .
5165	Get the reference time .
5166	Creates a new ArrayStructureBatch .
5167	Runs a Lucene Index .
5168	Reads a record .
5169	Checks if a given netfile is a minefile .
5170	Make the UNM projection for the given dataset .
5171	Acquire the area reader .
5172	Returns true if this date is before the given date .
5173	Checks if the given date is before the given date .
5174	Returns true if this date is after the given date .
5175	Set the value at the given index .
5176	Adds a coordinate system to this variable .
5177	Sets the units attribute .
5178	Returns the value of the units attribute .
5179	Initialize the content .
5180	Reads a catalog .
5181	Process a list of datasets .
5182	Reads the catalogs from a directory .
5183	Returns true if the given lon is between the given lon and begin .
5184	Converts a latitude to a string .
5185	Returns a string representation of the given longitude .
5186	Compares a quantity by name .
5187	Returns the selected dataset node .
5188	Set the selected dataset
5189	Make a tree path for the given node .
5190	Open all catalog nodes .
5191	Set the catalog .
5192	Sets the catalog .
5193	Gets the alias for a given variable .
5194	Write a vInt .
5195	Write a set of characters .
5196	Read chars from the stream .
5197	Sets the debug flags
5198	Adds a member .
5199	Hide a member .
5200	Gets the name of the member names .
5201	Find member by name .
5202	Reads a Grib1 bitmap .
5203	Restore the state of the current table .
5204	Returns the rows in the table .
5205	Returns the index of the model column .
5206	Returns the Array object for the given member .
5207	Retrieve a scalar value from a member .
5208	Returns the double array of the given member .
5209	Retrieve a scalar float .
5210	Gets the java array float .
5211	Gets a scalar byte .
5212	Gets the byte representation of the member .
5213	Gets a scalar integer .
5214	Get java array .
5215	Retrieve a scalar short .
5216	Get a short array from a member .
5217	Gets a scalar value from a member .
5218	Get a long array from a member .
5219	Gets a scalar character .
5220	Returns the character array as char array .
5221	write a dataset
5222	Checks if a dataset is usable
5223	Creates a copy of this dataset .
5224	Copy metadata from one dataset to another .
5225	Get the Thredds metadata .
5226	Adds a record to the product .
5227	Prints the missing values .
5228	Prints the number of missing records .
5229	Find a record for a given time and level .
5230	Dump the contents of this grid .
5231	Generates a human readable name for this grid .
5232	Subtract the coverage coordinates of the coverage axis .
5233	Compare two byte arrays
5234	Parse a DMR document into a DMR dataset .
5235	Process the attributes of the DAP dataset .
5236	Add a list of coordinates to the partition .
5237	Sets gaussian coordinates .
5238	Parse a variable selector .
5239	Returns a string representation of a section specification .
5240	Checks to see if a box is inside a cell .
5241	Closes the method .
5242	Executes the HTTP method .
5243	Identifies whether or not the given encoding is a single station .
5244	Match axis type and dimension
5245	Set stream .
5246	Reads the next character .
5247	Start the background thread
5248	Parses a string into a URI .
5249	Excludes the given URI .
5250	Returns null if the given string is null .
5251	Joins the given prefix and suffix .
5252	Checks whether the given dataset has been modified .
5253	Copy information from another GribCollection .
5254	Returns a sorted list of all the m files .
5255	Set the index file .
5256	Gets the index file path .
5257	Closes the index file .
5258	Returns the number of consecutive counters in this composite .
5259	Adds a global attribute .
5260	Adds a global attribute .
5261	Deletes a global attribute .
5262	Rename a global attribute .
5263	Adds an attribute to the variable .
5264	Adds an attribute to a variable .
5265	Deletes a variable .
5266	Rename a variable .
5267	Set the sub type of the file .
5268	Write the headers to the file
5269	Writes the members of the geometry .
5270	Writes the station obs dataset .
5271	Returns a string representation of the station collection .
5272	Write a DSR .
5273	Send DRS data to the stream .
5274	Write an error response .
5275	Closes the stream .
5276	Flush the data .
5277	Construct a copy of this projection .
5278	Returns true if the queue contains the given size .
5279	Get the element at i .
5280	Shifts the range of the range .
5281	Read data .
5282	Reads data .
5283	Returns a subset of this primitive vector .
5284	Get a list of catalog extensions
5285	Delete the old database file .
5286	Sets the values of GDS .
5287	Get a DataChunkIterator without filtering .
5288	Make an array of doubles .
5289	Get the dataset boundaries
5290	Check the requested variables .
5291	Returns the structure of the DatasetSource .
5292	Get the real path of a resource .
5293	Adds the vertices to the netdf file .
5294	Reads a PIB file .
5295	Finishes the execution .
5296	Transfer inherited metadata from parent to parent .
5297	Copy metadata from another dataset .
5298	Copy all inherited metadata from source to target .
5299	Sets the contributors .
5300	Adds a dataset at the specified index .
5301	Remove a dataset from the catalog
5302	Replace a dataset .
5303	Adds a service .
5304	Remove a service .
5305	Sets the services local .
5306	Remove the local metadata .
5307	Get user property .
5308	Validate this configuration .
5309	Returns the list of descriptor descriptors .
5310	Constructs the server path from the HttpServletRequest .
5311	Method to get capabilities .
5312	Get a feature .
5313	Check the parameters for error handling .
5314	Handle the http request
5315	Get the capabilities for the given URL .
5316	Returns the length of the object .
5317	Returns the last modified date of the S3 object .
5318	Adds all variables from a DAP Dataset .
5319	Retrieve a file .
5320	Sends a string to the response .
5321	Set the content length .
5322	Get request URI from request .
5323	Gets the request path .
5324	Returns the query string for the given request .
5325	Get parameter by name
5326	Saves the preferences .
5327	Writes a directory to a directory .
5328	Set the bit offset for a given data descriptor .
5329	Make a new BitCounter from a subKey .
5330	Count the number of bits starting at the given start
5331	Append a line to the TextHistoryPane .
5332	Make a document containing the stations collection of stations .
5333	Gets the capabilities document .
5334	Get record at specified location
5335	Returns the coordinate at the given index .
5336	Adds the specified item to the list .
5337	Handle an exception .
5338	Get the slice at the specified position .
5339	Step 1 .
5340	Gets the nce gen process .
5341	Checks whether the given endpoint is a CdmRF endpoint .
5342	Set the value type
5343	Factory method to create a GDS from a grid .
5344	Copy bytes from input stream to output stream .
5345	Reads the contents of the stream into a string .
5346	Read the contents of the stream into a byte array .
5347	Writes the contents to an OutputStream .
5348	Copy a file into an OutputStream .
5349	Copies a file to an output stream .
5350	Copies all files from one directory to another .
5351	Reads the contents of a file into a byte array .
5352	Reads a file from a file .
5353	Write the contents to a file .
5354	Write string to file .
5355	Write input stream to file .
5356	Handle parsing exception .
5357	Handle the exception handler .
5358	Sends a bad URL to the server .
5359	Get the DOD catalog
5360	Prints the catalog
5361	Print the status of the request
5362	Prints the error page .
5363	Get reference date .
5364	Read variable data .
5365	Create a DatasetReader from a String
5366	Opens an ncdf collection .
5367	Removes all letters from a string .
5368	clean up a byte array
5369	Removes letters from a string .
5370	Filter 7 bits .
5371	Make sure the given name is valid .
5372	Matches two strings .
5373	Pads the given string to the desired length .
5374	Pad the string with the desired length .
5375	Removes all occurrences of a string .
5376	Remove a character from a string .
5377	Removes the specified character from the end of the string .
5378	Collapses all whitespace characters in a string .
5379	Replaces all occurrences of a string with a character .
5380	Replaces all occurrences of a string with a replace character .
5381	Replaces all occurrences of the given pattern with the given value .
5382	Substitute the given string with the given substring .
5383	Substitute all occurrences of match .
5384	remove all characters from StringBuilder
5385	Unplaces the specified character in string builder with the specified character .
5386	Replaces all occurences of the given string in the given string builder .
5387	Replaces all occurrences of the given substring with the given substring .
5388	Removes all bad characters from a string .
5389	Process a collection update event .
5390	Check state .
5391	Updates the state of the collection .
5392	Show all unique templates .
5393	Get the list of datasets .
5394	Release the dataset .
5395	Creates a deep copy of the given structure .
5396	Copies an array structure to an ArrayStructureB .
5397	Copies the contents of a Structure object into an ArrayStructureB
5398	Creates a new ArrayStructureBulk .
5399	Creates a new array structure for the given structure .
5400	Returns the estimated time interval size in hours
5401	Creates a new coordinate axis based on the specified range .
5402	Creates a TableAnalyzer .
5403	Gets the first feature type .
5404	Analyze the data structure and add it to the table
5405	Synchronizes the reader to disk .
5406	Gets the latitude values of the specified type .
5407	Swaps the long at the specified offset .
5408	Swaps a float .
5409	Swaps a single character in a byte array at the specified offset .
5410	Check if there are any coordinate axes in the dataset .
5411	Adds a parameter to the coordinate system .
5412	Find the common parent group .
5413	Returns true if this group is a parent group .
5414	Sets the parent group .
5415	Adds a dimension to this group .
5416	Adds a dimension to this group .
5417	Adds a group to this group .
5418	Adds an enumeration to this group .
5419	Adds a variable to this group .
5420	Removes the specified dimension .
5421	Creates a new Group based on the given path .
5422	Convert DDS alias fields to alias fields .
5423	Prints the DAS object to a PrintWriter .
5424	Retrieves a variable by its name .
5425	Writes a grid to a dataset .
5426	Replace missing values in the grid .
5427	Replace missing values .
5428	Get the x - start of the x - start coordinate .
5429	Writes a grid to a grid .
5430	Method to write an exception
5431	Get the number of libraries .
5432	Create the top index file for the feature collection .
5433	Gets the type of the collection .
5434	Updates the grib collection .
5435	Update leaf collection .
5436	Opens a GribCollection from a file .
5437	Opens a GribCollection .
5438	Opens a GribCollection from a data file .
5439	Checks whether the URL matches the given pattern .
5440	Adds a key pair to the RC server .
5441	Returns the value for the key and url .
5442	Sets the well known resources for this resource .
5443	Loads the CDM file at the given absolute path .
5444	Inserts a triple into the trie .
5445	Get the datasets .
5446	Find a dataset by its name .
5447	Set the feature set to use .
5448	Get the shapes for the given graphics context .
5449	Make the list of map shapes .
5450	Compare this object with another ID .
5451	Start a progress monitor task .
5452	Determines whether a given collection index file needs to be updated .
5453	Normalize the given list of coordinates .
5454	Sets the object at the given index .
5455	Gets the structure data at the given index .
5456	Copy Structures .
5457	Get scalar object .
5458	Convert a scalar value to a double .
5459	Convert a scalar integer to a scalar integer .
5460	Get a float from a record .
5461	Get a scalar byte from a record .
5462	Get a short from a record .
5463	Get char from record .
5464	Get the value of a scalar .
5465	Get an array structure for this structure .
5466	Get ArraySequence .
5467	Get an array object from the sequence member .
5468	Returns the minimum of the given value .
5469	Evaluate expression .
5470	Returns a string representation of this constraint .
5471	Returns true if the specified DAP node is a reference .
5472	Evaluate whether or not a DAP query .
5473	Count the number of expansion in DAP .
5474	Compute enums .
5475	Compute groups .
5476	Compiles a DAP constraint .
5477	Checks whether the given file is a GRIB .
5478	Make the action to clear debug flags
5479	Get the byte order for the given parameter number .
5480	Set the byte order to use .
5481	Find a key by its name .
5482	Find file header by name .
5483	Get the header of a file .
5484	Prints the parts of the message .
5485	Gets the data pointer .
5486	Reads the data from a DM file .
5487	Reads a string from a word .
5488	UNK_UNK .
5489	Returns a string representation of a bit .
5490	Write a NetcdfFile to a WritableByteChannel .
5491	Parse base type .
5492	Parse a grid element .
5493	Parse aliases .
5494	Decodes a list of key descriptors .
5495	Replicates a list of data descriptors .
5496	Returns the dataset name .
5497	Gets the CFFe signature type .
5498	Returns true if the two float values are nearly equal .
5499	Returns true if the given node is references .
5500	Parses the given string .
5501	Probe a probe object .
5502	Checks if the given variable is ailed variable .
5503	Determine the best coordinate for the given time .
5504	Convert a LatLonRect to a projection rectangle .
5505	Show time series .
5506	Make a map from a list of attributes .
5507	Returns the value as array .
5508	Returns the numeric value at the given index .
5509	Writes the CDL definition .
5510	Sets the string value .
5511	Sets the attribute values .
5512	Sets the values of the given array .
5513	Starts the scan .
5514	Generate the invDataset catalog .
5515	Adds a new message to the queue .
5516	Set the Thredds Dataset
5517	Downloads the TredD file .
5518	Close the Thredds Dataset
5519	Open the Netcdf file
5520	Applies the GUI to the GUI .
5521	Creates a frame that displays the tool .
5522	Convert a list of coordinates to a string .
5523	Determine if two Axis axis is less than rank .
5524	Finds the axis with the given type .
5525	Get the ProjectionCTionCT
5526	Returns true if the x axis is a geo - axis .
5527	Checks if the coordinate axis is regular .
5528	Checks if subset is subset .
5529	Checks if any of the coordinates in the list are contained in the list of coordinates
5530	Checks if there is one axis with the given name .
5531	Returns true if the domain contains any of the requested dimensions
5532	Checks if there is any axis of the given list of axes .
5533	Checks if the coordinate array contains the given axis type
5534	Clones this DAG .
5535	Returns the currently selected bean .
5536	Get the list of beans currently selected .
5537	Get the selected cells .
5538	Set the selected bean
5539	Restore the state of the table column .
5540	Creates an unknown unit .
5541	Close the stream .
5542	Returns true if the given variable is an extra .
5543	Checks if a coordinate is a coordinate .
5544	Finds a coordinate variable for a given coordinate .
5545	Adds data variables to a list .
5546	Add parent join .
5547	Build a station feature from the data structure .
5548	Create a node map .
5549	return a SimpleUnit
5550	Returns a SimpleUnit with the given name .
5551	Constructs a unit from its name .
5552	Checks whether the unit string is compatible with the given units .
5553	Returns true if the DateUnit is compatible with the DateReference .
5554	Returns true if the given string represents a time unit .
5555	Calculates the conversion factor of the input unit .
5556	Converts the given value to the given unit .
5557	Returns true if the unit is unknown .
5558	Gets the scaled unit .
5559	Create a new RelOpClause
5560	Creates a new BoolFunction clause
5561	Creates a new B - Clause clause .
5562	Creates a buffered image from an Array
5563	Crawl a catalog .
5564	scan a dataset
5565	Iterates through all direct catalogs and processes them .
5566	Gets the file or cache file .
5567	Returns the existing file or cache if it exists .
5568	Sets the debugLeaks flag .
5569	Gets all the files in the directory .
5570	Closes this file .
5571	Seek to the specified position .
5572	Flush the buffer .
5573	Reads a single byte .
5574	Reads a number of bytes from the input stream .
5575	Read an int from the stream .
5576	Read a number of bytes from the stream .
5577	Read a number of bytes from the input stream .
5578	Reads a number of bytes from the stream .
5579	Reads a number of doubles from the stream .
5580	Reads a string from the stream .
5581	Reads a string from the stream .
5582	Write boolean array .
5583	Write a short array
5584	Writes a char array .
5585	Writes an array of ints to the stream .
5586	Write a long array
5587	Write a float array
5588	Write double array .
5589	Writes a string to the output stream .
5590	Writes a portion of a byte array .
5591	Search for the next record in the file .
5592	Append query .
5593	Creates a new collection .
5594	Finds the index .
5595	Checks if the index is a leaf .
5596	Constructs a list of children .
5597	Scans the directory for children .
5598	Read m files from index reader .
5599	Gets the list of grids .
5600	Acquires a file cache .
5601	remove a cache file
5602	Evict a file from the cache .
5603	Releases a file .
5604	Calculate a 4 - byte integer from 4 bytes .
5605	Update element in shadow cache .
5606	Clear the cache .
5607	Make the vertical transform .
5608	Is the global lon .
5609	Checks if the vertical axis is positive .
5610	Finds the XY index of a given coordinate in the grid .
5611	Finds the XY index of a bounding coordinate in the bounding box
5612	Finds the XY - index of a point in the map
5613	Finds the XY - index of the bounding box in the map
5614	Get the position of the item in the table
5615	Get the item for the given pixel
5616	Iterate over all the mFileCollection objects .
5617	Downloads the log files .
5618	Returns the name of the sub center .
5619	Converts a unit string into a Field object .
5620	Creates a new instance of CalendarPeriod .
5621	Creates a calendar period based on the udunit string .
5622	Calculates the difference between two dates .
5623	Returns the conversion factor for the specified field .
5624	Get the value of this field in milliseconds .
5625	Gets the offset between two dates .
5626	Initialize the gem reader .
5627	Initialize the tables
5628	Add a date root to the tree .
5629	Finds longest path match .
5630	Finds the data root for the given request path .
5631	Convert data root to data root .
5632	Get the date range for the given calendar .
5633	Reindex a list of coordinates
5634	Creates a new NetcdfFileWriter .
5635	Add a group to a parent .
5636	Add an enum type to the group
5637	Delete an attribute from a group .
5638	Rename a group attribute .
5639	Create a new record structure
5640	Abort the file .
5641	Writes the bean properties .
5642	Extracts all the fields from a Dataset .
5643	Divides this unit into another unit .
5644	Converts this unit into a derived unit .
5645	Gets the value of this conversion unit .
5646	Convert a nested variable to an array
5647	Convert a top level variable to an array
5648	Convert DRS data to Array
5649	Close all databases .
5650	Opens a new database .
5651	Convert an integer value to a joda period .
5652	Ensures the size of the string array .
5653	Returns the value at the specified index .
5654	Make a catalog for a directory .
5655	Create a proxy resolver catalog .
5656	Returns the coordinate type of the coordinate system
5657	Creates a new Grib2 from a given byte array .
5658	Calculates the time at the given index .
5659	Applies a scale factor to the image .
5660	Parses a local concept from a file .
5661	Adds a local concept .
5662	Clean line .
5663	Store a new concept .
5664	Writes the grib1 file to the Grib1 file .
5665	Write lookup table file .
5666	Show local concepts .
5667	The main entry point for this method .
5668	Get dataset type by name .
5669	Expand the access point dataset .
5670	Perform full expansion .
5671	name of the dataset
5672	names of a dataset
5673	Method used to generate a dataset tree
5674	Loads the image from the image URL .
5675	Stop the specified url .
5676	This method is called when the source is changed
5677	Notify listeners that a source has been loaded .
5678	Create a scaled picture thread .
5679	Gets the scaled size .
5680	Get the string representation of the scaled size .
5681	Gets the merged parts .
5682	Create the header of the SMTP file .
5683	Gets the CK tag .
5684	Checks if a part is valid .
5685	Set the root directory .
5686	Creates the root directory .
5687	Gets the cache file .
5688	Delete cache files before cutoff
5689	Remove all files from disk cache
5690	Returns true if the table is a Buf .
5691	Factory method to create a new coordinate axis .
5692	Make a copy of this coordinate .
5693	Returns true if the record is numeric .
5694	Get information about the axis .
5695	Gets the calendar from the attribute .
5696	Sets the list .
5697	Get the currently selected row .
5698	Increment the number of selected items .
5699	Returns the index of the column index of the column .
5700	Sets the selected index .
5701	Performs a quick sort .
5702	Swaps two strings .
5703	Returns an existing MFileOS object or null if the file does not exist .
5704	Rotate a longitude by a given rotation .
5705	Create a XMLStore from a file .
5706	Creates an XMLStore from an input stream .
5707	Create an XMLStore from a resource .
5708	Creates a standard filename for the given application .
5709	Saves the preferences .
5710	Save the preferences .
5711	Write an atomic variable .
5712	Write DAP structure .
5713	Write a DAP structure to a SerialWriter .
5714	Write a DAPSequence .
5715	Write a record to the serial writer .
5716	Determines whether the file is a valid Buf file .
5717	get the wmo ID
5718	Reads a row number from the record stream .
5719	Get the data at the given index .
5720	Extract data from a Grib file .
5721	Reads the data from a GFD file .
5722	Reads a single object from the disk .
5723	Create a file from a location .
5724	Compute the size of a grid file .
5725	Create a new netdf file .
5726	Set the list of stations .
5727	Sets the currently selected station .
5728	Chooses a station with the specified point .
5729	Picks the closest point to the given point
5730	Returns the selected station .
5731	Returns the name of the given type .
5732	Retrieves a list of all the stations in a particular bounding box
5733	Returns the station with the given name .
5734	Returns a DataIterator for this station .
5735	Returns a data iterator for the stations .
5736	Reads data from an iterator .
5737	Computes the dot product of this vector .
5738	Returns the normalized norm of this vector .
5739	Normalizes this matrix .
5740	Sets the services .
5741	Returns the parameter with the given id .
5742	Returns the parameter with the given id .
5743	Adds a new name to the set .
5744	Add symbol .
5745	Returns the first prefix that matches the given string .
5746	Returns true if the source is ok .
5747	Get the parameter with the given name .
5748	Calculates the CRC of the raw data .
5749	Checks to see if the next byte is a big integer .
5750	Returns the field index of the specified field .
5751	Get time range name .
5752	Get the current time coordinate .
5753	Set the next polygon .
5754	Set previous polygon .
5755	Finds a property by its name .
5756	Set the current selected projection
5757	Subtract the time offset from the given time .
5758	Registers the IOProvider with the given class name .
5759	Register an IOProvider .
5760	Register a new IOS provider .
5761	Checks if the given class is registered in the iosp .
5762	Return true if IOS service is registered .
5763	Returns true if the file can open .
5764	Opens a Netcdf file .
5765	Creates a new netcdf file with the given byte array .
5766	Opens a file in memory .
5767	Opens the contents of the given URI .
5768	Find the global attribute with the given name .
5769	Produces an ncML file to a NetcML file .
5770	Writes CDL to an OutputStream .
5771	Writes CDL .
5772	Write CDL .
5773	Adds an attribute to a parent group .
5774	Adds an attribute to a parent group .
5775	Adds a group to this group .
5776	Adds a dimension to the parent group .
5777	Removes the specified dimension from the group .
5778	Adds a variable to this group .
5779	Adds a variable to this group .
5780	Adds a string variable to this group .
5781	Removes a variable from the group .
5782	Send an IospMessage to the root group .
5783	Sends the record structure to the cluster .
5784	Finalizes this group .
5785	Reads a single section .
5786	Read a variable .
5787	Read a list of arrays .
5788	Read an array of bytes .
5789	Make the full name of a CDM node .
5790	Returns the full name of the group .
5791	Returns true if the given MFileFilter should be included .
5792	Returns true if the MFileFilter should be excluded .
5793	Returns true if the MFileFilter evaluates to true or false otherwise .
5794	Append a value to the vector .
5795	Dispatch check value .
5796	Force the value of the given type .
5797	Checks whether the given string is a Byte value .
5798	Check if a short is a short .
5799	Check if a string is an integer .
5800	Returns true if the given string is a valid UInt .
5801	Check if a string is a float .
5802	Check if a string is a double .
5803	Gets the data type .
5804	Returns true if the given dataset is visible .
5805	Checks whether the given string is a valid boolean string .
5806	Checks if the given string is a valid alphanumeric string .
5807	Returns true if the specified alphanumeric string is valid .
5808	returns true if the given path is a file path .
5809	Converts a Unicode code point to a percent hex string .
5810	Returns the value of a parameter .
5811	Compares two GridDefRecords .
5812	Processes the input stream .
5813	Reads the next message .
5814	Remove double quotes from string .
5815	Marks the given stack .
5816	Writes the ncML file to the dataset .
5817	Gets the value of a key from thredds config .
5818	Writes the CDL to the output .
5819	Creates and returns a new station helper object .
5820	Validates the result service .
5821	Get the current azimuth value .
5822	Get the elevation of this message .
5823	Returns the latitude values of this ASB .
5824	Returns the longitudes of the points in this ASB .
5825	Returns the list of all the altitudes of the ASB .
5826	Returns the array of azimuths for this entry .
5827	Returns the set of elevations .
5828	Returns a copy of this structure with the specified names .
5829	Selects a single named variable .
5830	Adds a member variable .
5831	Sets the member variables .
5832	Sets the parent group of this variable .
5833	Calculates the total number of elements in this group .
5834	Reads a structure from an array .
5835	Reads a Vector structure .
5836	Get a new StructureDataIterator .
5837	Get the data category for the given category
5838	Gets the class name .
5839	Add a parameter .
5840	Gets the header .
5841	Convert a laton coordinate to a projection matrix .
5842	Gets the version number .
5843	Checks if the Z axis is positive or not .
5844	Delete next file .
5845	Set the color scale parameters
5846	Renders plan view .
5847	Returns true if this group is a child of another group .
5848	Get MessageType by name
5849	Installs all columns in the given table .
5850	Set the API key to use .
5851	Creates a label with the given string value .
5852	Creates a label with the given strings .
5853	Creates a label with the given text .
5854	Connects to the specified connection .
5855	Returns a list of IPs separated by cloud .
5856	Open a connection to the database .
5857	Removes the given logger .
5858	Compiles all source codes .
5859	Compiles a class .
5860	Adds a source code .
5861	Reads the graphic control extension .
5862	Get the next frame from the header .
5863	Returns the selectable string property .
5864	Initialize the list events .
5865	Returns the person with the given id .
5866	Add a message to the list of validators .
5867	Sets the person id .
5868	Creates and loads a view model .
5869	Creates a view model for the given view type .
5870	Loads the countries from the ISO - 8601 resource .
5871	Loads the list of known subdivisions .
5872	Add a simple string property field .
5873	Adds an immutable string property .
5874	Step 2 .
5875	Step 2 .
5876	Clears the given map .
5877	Create index events .
5878	Access a member .
5879	Loads a ViewTuple .
5880	Creates the path for the FXPath .
5881	Query for style row
5882	Get the pixel value from a byte array
5883	Get the pixel values from a byte array .
5884	Validate the image type
5885	Create the coverage data png image .
5886	Set the bitmap of a bitmap
5887	Executes a raw query .
5888	Wrap the given query with the given query arguments .
5889	Executes the query and returns the result .
5890	Query using user query
5891	Converts cursor to TResult
5892	Get the feature row for a geometry index
5893	Register a table
5894	Retrieves the tile row for the given x y and zoom level
5895	Get the coverage data for a tile
5896	Get the Coverage data for the tile Dao
5897	Get the Coverage data for a tile
5898	Get the coverage data tile results
5899	Get the coverage data tile results
5900	Get the results in the tile matrix
5901	Get the results from the tile matrix
5902	Get the tile matrix for coverage data
5903	Get the value of the tile at the specified location
5904	Set the icon for the icon row
5905	Get the icon for the geometry type
5906	Returns the bindings db .
5907	Creates a Bitmap from a byte array .
5908	Converts a bitmap to a byte array .
5909	Create a new table
5910	Delete the geometry table
5911	Get the table metadata
5912	Get the id of the GeoPackage
5913	Create TableMetadata object from cursor
5914	Creates the extension .
5915	Get the feature row
5916	Perform a raw query .
5917	Query for features within the bounding box
5918	Query for a user defined envelope
5919	Counts the number of times the given envelope .
5920	Query for users
5921	Builds the where index
5922	Query for features within the bounding box
5923	Get the number of features in the bounding box
5924	Query for features within a geometry envelope .
5925	Query for features within the specified bounds
5926	Counts the number of query results
5927	Sets the bitmap data .
5928	Sets the bitmap data .
5929	Sets the bitmap compression configuration .
5930	Get the total number of tiles in the map
5931	Adjust the bounding box
5932	Sets the tile grid bounds .
5933	Adjust the tile grid width and height
5934	Adjust the tile bounding box width and height
5935	Get the tile bounding box for the zoom level
5936	Get the tile grid .
5937	Query for a tile for the column and row
5938	Query by the zoom level
5939	Get the closest zoom level
5940	Get the approximate zoom level for the tile .
5941	Query for tile grid .
5942	Delete the tile .
5943	Count the number of tiles matching the given zoom level
5944	Checks whether the tile matrix contains Google tiles .
5945	Get the pixel value of the image .
5946	Get the pixel values of the image .
5947	Validate the directory
5948	Create the coverage data file .
5949	Set the pixel value of the coverage data .
5950	Get or create a GeoPackage by name
5951	Get current row .
5952	Move cursor to next invalid cursor
5953	Query by base id
5954	Delete by base id
5955	Get a rectangle from the bounding box section
5956	Get the rounded float rectangle .
5957	Checks if any missing databases exists .
5958	Create and close the GeoPackage database
5959	Check if the database is valid
5960	Validate database and close database .
5961	Validate database and close database .
5962	Validate database .
5963	Validate database header
5964	Checks if the database header is valid .
5965	Add internal databases .
5966	Add external databases
5967	Import a GeoPackage from an input stream .
5968	Get the GeoPackage metadata for the database
5969	Get the GeoPackage metadata
5970	Create a new geometry .
5971	Populate geometry metadata .
5972	Delete a geometry
5973	Creates or updates the metadata .
5974	Update a geometry .
5975	Count the number of rows matching the bounding box
5976	Create a geometry metadata from a cursor
5977	Update rows with content
5978	Draw a tile .
5979	Get the simple attributes for the given ids
5980	Checks whether the cursor is ok .
5981	Get UserMapping DAO
5982	Get simple attributes DAO
5983	Retrieves the mappings for a base id .
5984	Get the mappings for a related id
5985	Returns true if the base id and related id exists
5986	Returns the number of rows in the cursor .
5987	Register a custom cursor wrapper
5988	Read a table from a table
5989	Get the tile for the request bounding box
5990	Draw a tile from the tile results
5991	Reproject a tile to the requested bounding box
5992	Get the tile results
5993	Calculates the overlap between the two points .
5994	Set the density of the feature
5995	Sets the line paint .
5996	Set the polygon paint
5997	Draw the tile .
5998	Draw a tile at x y and zoom level
5999	Draw the tile index for the tile
6000	Query the number of features in the tile map
6001	Query the number of features in the bounding box
6002	Query for features in the tile location
6003	Query the bounding box for the bounding box
6004	Draw a tile query
6005	Simplify a list of points .
6006	Get the paint for the feature style .
6007	Get the paint for the feature style .
6008	Get the paint for the feature style .
6009	Determine the fill paint for the feature style
6010	Get the paint for the feature style
6011	Get the style paint for the feature
6012	Get the paint for the style
6013	Get the paint for a feature
6014	Puts a bitmap for an icon row .
6015	Create a bitmap from an icon row
6016	Creates a quote wrapper for the given content values .
6017	Creates a bitmap .
6018	Recycle the bitmap .
6019	Get the bitmap for a layer .
6020	Get the canvas for the layer .
6021	Creates and returns the bitmap for the layer .
6022	Get the style mapping DAO
6023	Get the style DAO
6024	Get the icon DAO
6025	Get the feature styles for the feature table
6026	Get the style for the feature table
6027	Get the feature table style for the feature table
6028	Get the icons for the feature table
6029	Get the icon for the feature table
6030	Get the style for a feature row
6031	Get the feature styles for a feature table
6032	Get the style for the feature row
6033	Get the icons for the feature row
6034	Get the styles for a feature id
6035	Get the icons for a feature id
6036	Sets the feature table style for the feature table
6037	Sets the table style for the feature table
6038	Sets the icon for the feature table
6039	Set the feature styles for a feature
6040	Sets the style for the feature table
6041	Set the style for a feature
6042	Set the style for a feature table
6043	Set the style of a feature
6044	Set the style for the feature
6045	Set the style for the feature table
6046	Sets the icons for the feature row
6047	Sets the icons for the feature table .
6048	Set the icon for the feature row
6049	Sets the default icon for the feature row
6050	Sets the default icon for the feature table .
6051	Retrieves or inserts a style .
6052	Gets or creates or inserts an icon .
6053	Insert a style mapping row
6054	Delete the feature table style mapping
6055	Delete the feature table icon mapping
6056	Delete the table mappings for the feature table contents
6057	Delete the feature table mapping
6058	Delete the style mapping
6059	Get all table style ids
6060	Get all table icon ids
6061	Get all style ids for the feature table
6062	Get all icon ids
6063	Gets the image bytes .
6064	Flush the stream .
6065	Get the pixel value
6066	Reads the pixels from the image .
6067	Draw the feature
6068	Draw a line path
6069	Draw the polygon path
6070	Add a line string to a path .
6071	Add a polygon
6072	Get the feature cache for the table .
6073	Remove a feature row from the table .
6074	Clear all cached features .
6075	Get the styles for the table feature feature .
6076	Gets the icon icons .
6077	Get the RTree Index Table DAO
6078	Set the width of the column
6079	Set the height of the table
6080	Get the dimensions of this bitmap .
6081	Calculates the density of the tile s density .
6082	Read blob value .
6083	Read a Table Custom Table
6084	Gets the color or default .
6085	Validate the color
6086	Creates a color from hex .
6087	Get the GeoPackageManager
6088	set the progress
6089	Index a list of feature indexes .
6090	Index a feature row .
6091	Deletes the index .
6092	Delete the index for a feature row .
6093	Delete a feature index .
6094	Delete the feature index
6095	Returns true if the index is already indexed .
6096	Gets the index types that are indexed .
6097	Query for feature index results
6098	Get the number of features in the feature table
6099	Get the bounding box of the feature table
6100	Query for feature indexing
6101	Determine the type of the feature index .
6102	Gets the internal file .
6103	Gets the internal file path .
6104	Gets the geometry type .
6105	Set the geometry type .
6106	Returns true if the url contains the bounding box
6107	Replaces the url with x y and y coordinates .
6108	Returns true if the url contains XYZ
6109	Replace the bounding box in the url
6110	Replace the bounding box in the url .
6111	Get the geometry field
6112	Index a feature row
6113	Update the last indexed time
6114	Delete index .
6115	Delete a geometry index .
6116	Returns true if the geometry column is indexed .
6117	Query for geometry metadata
6118	Query for a bounding box
6119	Count the number of features within the bounding box
6120	Query for geometry metadata
6121	Count the number of geometries in the database
6122	Query for features within the bounding box
6123	Count the number of features in the bounding box
6124	Get the feature bounding box of the feature projection
6125	Get the geometry metadata .
6126	Get a feature row from a cursor
6127	Get the feature row for the geometry metadata
6128	Get the tile DAO for the feature table
6129	Get the feature DAO for the tile table
6130	Get the bounding box
6131	Query by base id and related id
6132	Get the unique base IDs .
6133	Get the unique ids of the user mapping table
6134	Delete by base id
6135	Delete by related id
6136	Delete by id and related id
6137	Builds the where id and related id
6138	Create a new GeoPackage metadata
6139	Delete the table
6140	Rename the metadata .
6141	Rename a table
6142	Get all the GeoPackage metadata
6143	Get the metadata for the database
6144	Get the GeoPackage metadata
6145	Get the metadata for the GeoPackage
6146	Checks if is external path
6147	Get the external path
6148	Get metadata by name
6149	Get metadata by name
6150	Get metadata by name
6151	Create a GeoPackage metadata object
6152	Called when the view is created .
6153	Adds a ParallaxView to the view list .
6154	On createView .
6155	Creates a custom view .
6156	Appends an event to the log .
6157	Find the logback config file from system properties .
6158	Gets a resource from the class loader .
6159	Automatically loads configuration file
6160	Status on a resource search .
6161	Convert socket address to string .
6162	Creates a new executor service .
6163	Start all converters .
6164	Subtract event .
6165	Add a substitution property .
6166	Returns the value for the given key .
6167	Compiles the given node .
6168	Evaluates the Eopt and returns the Eopt node .
6169	Parses the next token .
6170	Escapes the string buffer .
6171	Generates a regex for a fixed date .
6172	Process an event .
6173	End evaluator .
6174	Initializes the context .
6175	Create a dynamical context selector .
6176	Set up the logger properties .
6177	Returns the absolute path of the external storage directory .
6178	Get database directory path .
6179	Returns absolute path for the given filename .
6180	Evaluates the logging event .
6181	Returns the discriminator value of the logging event .
6182	Updates the mask if necessary .
6183	Returns the chain decision for the given event .
6184	Create the key managers .
6185	Create the trust managers .
6186	Create a KeyStoreFactory from system properties .
6187	Returns the location of the system property .
6188	Creates a URL for the given resource location .
6189	Checks whether the given converter handles any thrown exceptions .
6190	Stop the logback .
6191	Prints out the status of the given context .
6192	Prints a warning if the given context has an error .
6193	Print a warning message .
6194	Handle the first throwable .
6195	Gets the entry from the live map .
6196	Indicate that the given key has ended .
6197	Creates a FormatInfo object from the given string .
6198	Renames a file .
6199	Returns true if the source file is on the same disk .
6200	Gets the environment variable .
6201	Gets the system property .
6202	Sets the mDC property map .
6203	Outputs the mDC for all keys in the mDC properties map .
6204	Extract the stack trace from the given class name .
6205	Checks if the current class is in the framework space list
6206	Adds a new status to the list .
6207	Adds a new status listener .
6208	Lookup the implicit actions for the given element .
6209	Get the list of applicable actions .
6210	Sets the class loader .
6211	Get a property from system properties .
6212	Gets a boolean property .
6213	Decomitalizes the given name .
6214	Get the MethodDescriptors of the given class .
6215	Returns an array of all PropertyDescriptors for the given class .
6216	Initializes the appender .
6217	Add a OnConsoleStatusListener to the status manager .
6218	Ends the current property .
6219	Returns the discriminator value of the logging event .
6220	Checks whether the logging event is discardable .
6221	Start the shutdown hook .
6222	End the shutdown hook .
6223	Get enabled protocols .
6224	Get enabled cipher suites .
6225	Returns an array containing the included strings excluding the excluded strings .
6226	Convert string to scope .
6227	Set properties from a specific context .
6228	Adds a new appender .
6229	Detaches the appender from the appender .
6230	Removes the appender with the given name .
6231	Called when the parent logger has changed .
6232	Call the appenders .
6233	Detaches the appender from the application .
6234	Creates a child logger .
6235	Calls the top level filter .
6236	Logs a logging event .
6237	Opens a socket .
6238	Creates the missing parent directories .
6239	Converts the log level to an integer .
6240	Converts an integer to a level .
6241	Returns the number of URLs in the specified resource .
6242	Returns the URL of the given resource .
6243	Returns the class loader for the given object .
6244	Get the class loader for the given class
6245	Returns the class loader of the given class .
6246	Starts the appender .
6247	Returns the tag for the given event .
6248	Process a substitution property .
6249	Returns the index of the first character in the name starting at index
6250	Evaluates the given logging event .
6251	Get client thread thread name .
6252	Checks if two files are on the same location .
6253	Start the session .
6254	Appends an event to the sender .
6255	Sends a buffer to the buffer .
6256	Adds a MDC value to the MDC value .
6257	Creates a converter for the given keyword node .
6258	Creates a composite converter .
6259	Determine the compression mode .
6260	Configure the URL .
6261	Configure the context .
6262	Configure the input stream .
6263	Builds the interpreter .
6264	Do the actual configuration .
6265	Runs the program .
6266	Gets the property .
6267	Sets the name of the context .
6268	Returns true if the context has status listener .
6269	Get the timestamp of the last reset message .
6270	Start parsing .
6271	Returns the effective converter map .
6272	Gets the file header .
6273	Gets the file footer .
6274	Start the appender .
6275	End the stack .
6276	Creates a copy of the clients .
6277	Adds a client to the list .
6278	Removes a client from the list .
6279	Get a copy of the current thread s context map .
6280	Gets the value of the method .
6281	Gets the chain decision .
6282	Checks if the operating system is an Android OS .
6283	Initialize LoggerContext .
6284	Get the files in a folder that match the given stem regular expression .
6285	Retrieves all recent status messages that have elapsed time .
6286	Convert a string representation of the syslog facility string .
6287	Gets the logback database file .
6288	Clears expired logs .
6289	Is last check expired .
6290	Append a logging event .
6291	Subclasses should override this method .
6292	Binds the given event to the SQL statement .
6293	Converts an object to a string .
6294	Compute the mask for an event .
6295	Merge the properties of an event .
6296	Insert exception .
6297	Returns the length of the prefix match .
6298	Returns the lowest level of the status .
6299	Sets a property .
6300	Returns true if the given class is instantiable .
6301	Returns the child value for the given parent map .
6302	Process the include .
6303	Opens the given URL .
6304	Removes the head and tail tag from the stream .
6305	Returns true if the server is started .
6306	Checks if the request is transient .
6307	Sets the default hosts .
6308	Initializes the local index .
6309	Synchronously synchronize the data source .
6310	Synchronizes the mirror if necessary .
6311	Wait for a specific task .
6312	List all the indexes offline .
6313	Converts an input stream to a char array .
6314	Reads the stream to a byte array .
6315	Consumes the connection and closes the connection .
6316	Checks if the given list of hosts is up .
6317	Set the type of Places .
6318	Start the query .
6319	Puts an entry into the cache .
6320	Gets the value associated with the specified key .
6321	Waits for all the threads to complete .
6322	Compare two versions
6323	Reports an exception .
6324	Copy files from src to target .
6325	Initializes the simulation properties file .
6326	Gets the value of the static field .
6327	Gets a method by its name .
6328	Formats a long value .
6329	Formats a double .
6330	Formats a long .
6331	Read JSON syntax character .
6332	Returns the hex value of a character .
6333	Write a JSON string .
6334	Write a long integer .
6335	Write a double .
6336	Read JSON string .
6337	Read JSON numeric numeric numeric chars .
6338	Read a JSON integer .
6339	Read a double .
6340	Read JSON string .
6341	Executes the request .
6342	Invoke the request .
6343	Enqueues the given method call .
6344	Get the resource for the given path .
6345	Update the decoration
6346	Refreshes the repository view .
6347	Returns the resource history view .
6348	Opens an editor with the given name .
6349	Reports an authentication failure .
6350	Prompts for authentication .
6351	This method initializes the default page .
6352	Start the thread
6353	Sets the keepal alive .
6354	Sets whether or not this node should be omitted .
6355	Sets the owner .
6356	Adds a condition factor .
6357	Create a condition term from stream tokenizer .
6358	Returns true if the condition term matches the given condition .
6359	Get the DSL file content for a given rule .
6360	Loads the DSL config file .
6361	Parses the given input stream .
6362	Get the menu .
6363	Adds a response to the document .
6364	Adds a href .
6365	Inserts a href in the tree .
6366	Remove a href .
6367	Adds a prop stat entry .
6368	Gets the href .
6369	Gets the status .
6370	Get the Java stack frame for the given value .
6371	Checks if two classes are subclassed .
6372	Checks whether a collection contains a given proposal .
6373	Clones a node .
6374	Reset stream .
6375	Create the actions for the breakpoint .
6376	Adds a connection to this source .
6377	Returns the value of the property .
6378	Remove a connection from this connection .
6379	Sets the location of the feature .
6380	Set the value of a property .
6381	Sets the size of the dialog .
6382	Dump a list of constraints .
6383	Adds a lock entry .
6384	Adds a child vertex to this vertex .
6385	Remove a child vertex .
6386	Initialize the preference store .
6387	Stops the plugin .
6388	Get the string value from the resource bundle .
6389	Get ResourceBundle .
6390	Get the form colors .
6391	Sets the date and time pattern .
6392	Sets date time using given pattern .
6393	Create an error status
6394	Sends an error with the specified message and exception .
6395	Adds a field editor .
6396	Sets the grid layout .
6397	Apply font .
6398	Returns the maximum number of columns .
6399	Initialize the fields .
6400	Fires a property change event .
6401	Sets the active editor .
6402	Adds the zoom bar to the tool bar .
6403	Determine the dialect to use .
6404	Create a context .
6405	Save the edited file .
6406	Create table listeners .
6407	Creates the table .
6408	Adds a value to the specified URL .
6409	Put a value into the table .
6410	Creates a new node with the given token .
6411	Add a child node to this node .
6412	Set the file .
6413	Add a condition .
6414	Adds a state token to the resource URI .
6415	Returns true if the condition matches the given condition .
6416	Gets the property .
6417	Gets the status .
6418	Sets the property .
6419	Returns the last line of the given text .
6420	Gets last non dash line .
6421	Binds the given identifier to the given identifier .
6422	Binds the given identifier to the given identifier .
6423	Returns the message with the given id .
6424	Creates the main process .
6425	Create the sample JUnit .
6426	Gets runtime id .
6427	Add a ReteVertex to the graph .
6428	Visits the given node .
6429	Generate dot identifier .
6430	Adds a remove property .
6431	Adds a set property .
6432	Returns a locator for the given resource URL and label .
6433	Get PresentationReconciler
6434	Returns true if the given object is the same as the given status .
6435	Returns true if the given term matches the given condition .
6436	Create condition factor .
6437	Create the pages .
6438	Performs a DELETE request .
6439	Performs a POST request .
6440	Get the status of a job .
6441	Execute pull operation .
6442	Handle pull results .
6443	Sets the value at the given index .
6444	Adds an ActiveLock entry .
6445	Filters the completion proposals by prefix .
6446	Reads prefix .
6447	Calculates the rows of a vertex .
6448	Paint the window .
6449	Get the edit part for the given model element .
6450	Returns the image descriptor for the given plugin path .
6451	Declare an image file .
6452	Adds a vertex at the specified depth .
6453	Replies the index of the specified vertex .
6454	Get the width of the table .
6455	Dumps the list of vertices to stdout .
6456	Optimize all elements .
6457	Loads the RETE graph from the given text .
6458	Initialize the graphical viewer .
6459	Draws a new graph to the viewer .
6460	Returns the breakpoint for the given source .
6461	Sets the href .
6462	Checks whether the device can talk to the server .
6463	Copy the properties from the given location to the given destination .
6464	Examine response .
6465	Extracts the URL statistics from a multi status file .
6466	Gets the content of the request .
6467	Returns an enumeration of all active locks .
6468	Returns the property with the given name .
6469	Perform a HEAD request .
6470	Attempts to acquire a lock .
6471	Move to destination .
6472	Perform checkin .
6473	Refreshes the lock .
6474	Remove a set of properties .
6475	Removes a property .
6476	Sets the content of the given input stream .
6477	Sets the properties .
6478	Set the property .
6479	Release lock .
6480	Update the version .
6481	Perform version control .
6482	Perform a DELETE request .
6483	Examines the status code .
6484	Returns true if the specified property exists .
6485	Write the request body .
6486	Converts a byte array to a hexadecimal string
6487	Converts an array of ints to a hex string
6488	Sets whether all properties are all properties .
6489	Sets whether this node is a property name .
6490	Sets the property .
6491	Strips the last word .
6492	Updates the rules .
6493	Writes content to the stream .
6494	Step over the current thread .
6495	Mark parser errors as markers .
6496	Skip all whitespace characters .
6497	Adds a resource to the web server .
6498	Commit file changes .
6499	Gets the age .
6500	Get the content length .
6501	Retrieves the maximum number of forward forwards .
6502	Gets the overwrite flag .
6503	Gets the value of the Passthroughty .
6504	Gets the timeout .
6505	Sets a context property .
6506	Set the timeout .
6507	Open a DDL file .
6508	Parse the file .
6509	Gets object metadata .
6510	Strip object metadata .
6511	Adds tokens to a node .
6512	Get the children of the given condition
6513	Get the children of the given object
6514	Adds a child node to the list .
6515	Prints the tree
6516	Recursively print a node .
6517	Prints the number of tabs .
6518	Reads a JsonValue from the given text .
6519	Get the image descriptor by id .
6520	Invoke the request .
6521	Sets the value of the specified field .
6522	Create the sample sample launcher .
6523	Create rule file .
6524	Create rule flow .
6525	Create the java source file .
6526	Returns all IUsableUUs .
6527	Creates an image to the given stream .
6528	Gets the field name .
6529	Returns the evaluator for the alpha node .
6530	Gets the value of the alpha node .
6531	Adds the properties from a resource to the properties file .
6532	Perform baseline control .
6533	Binds a member .
6534	Gets the locator for a member .
6535	Optimize all vertices .
6536	Initialize the control resources .
6537	Validate the page .
6538	Generates an entity tag .
6539	Returns the equivalent of this vertex .
6540	Validate OTP
6541	Checks to see if the user belongs to a user
6542	get username from file
6543	Adds a yuby key to a file
6544	Verifies an OATH OTP
6545	Clear the password .
6546	Extract the public id from an OTP string .
6547	Checks that the given string is valid .
6548	Creates an Evaluation object
6549	Create an Evaluation object
6550	Clears the cache .
6551	Determines if the Java version is supported .
6552	Returns the package name of the given object .
6553	Gets the package name .
6554	Returns a unique descriptor for the given object .
6555	Returns the type of the argument .
6556	Checks if two classes are more specific .
6557	Finds the best method for the given parameters .
6558	Get the value of the property of the target object .
6559	Returns all property descriptors of target class .
6560	Get a PropertyDescriptor from the targetClass
6561	Returns the read method of the specified class .
6562	Reads a single character .
6563	Parses a project .
6564	select all
6565	Convert value to long .
6566	Convert value to double .
6567	Convert value to BigInteger .
6568	Convert value to BigDecimal .
6569	Returns the string value of the given object .
6570	Returns the numeric type of the given value .
6571	Convert the given value to the given type .
6572	Convert value to integer .
6573	Gets the numeric type .
6574	Gets the numeric type of two objects .
6575	Creates a Number from the given type .
6576	Pop the current evaluation .
6577	Generates the getter method .
6578	Generates the OGNL setter method .
6579	Flattens the tree .
6580	Initializes the result .
6581	Escape character .
6582	Sets the root context .
6583	Gets the value of the expression .
6584	Assigns the given value to the given object .
6585	Sets the value of the given tree .
6586	Return true if expression is a constant .
6587	Returns the default watch service id .
6588	Waits for the running server to finish .
6589	Reads the file as a string .
6590	Reloads this class loader .
6591	Gets an archiver by name .
6592	Checks all the resources in the archive .
6593	Reads the contents of a file into a string .
6594	Creates the project .
6595	Add system property .
6596	Add system property .
6597	Opens the dialog .
6598	Change the selected directory .
6599	Refresh the button state .
6600	Creates a new FileObserver that listens to the given path .
6601	Returns the selected directory .
6602	Creates a new folder .
6603	Validates the given file .
6604	Start a job .
6605	Start a list .
6606	Ends the list .
6607	Handle motion .
6608	Gets the crop rectangle .
6609	Compute the tile layout .
6610	Registers an event listener .
6611	Add a span watcher to the text .
6612	This method initializes spinner .
6613	Get the drop down view at a specific position
6614	Converts the given text to HTML format .
6615	Calculates the spans within a paragraph .
6616	Creates a unique file in the target folder .
6617	Determines the original file of the given Uri .
6618	Converts a namespace into a namespace .
6619	Gets the local name .
6620	Set an attribute .
6621	Set an attribute .
6622	Gets the font name .
6623	Gets the font name from a file .
6624	Adds a new buffer to the list of buffers .
6625	Writes a portion of a byte array .
6626	Writes a single byte to the current buffer .
6627	Reads the contents of an input stream .
6628	Writes the buffer to the output stream .
6629	Returns a new byte array containing all the remaining data .
6630	Set the font size .
6631	Converts the given path to Unix separators .
6632	Recompute focus .
6633	Make sure the painter is visible .
6634	Center the image based on the highlight view .
6635	Resets the document locator .
6636	Validates the given value .
6637	Add an element type .
6638	Sets the specified attribute for the specified element type .
6639	Sets the parent .
6640	Get the ElementType by name .
6641	Returns the integer value of the given entity .
6642	Removes all paragraphs from a text .
6643	Applies the given value to the given editor
6644	Checks if the given string is a valid domain .
6645	Executes the given operation .
6646	Performs a redo operation .
6647	Replaces all occurrences of a string with a match .
6648	Returns the thread status object for the given thread .
6649	Sets the bitmap options .
6650	Returns true if the given thread can be decoded .
6651	Decodes a file descriptor .
6652	Returns a list of all the fonts defined in the context
6653	Gets the asset fonts .
6654	Get a map of all system font names .
6655	Setup the elements .
6656	Returns a reader for the given source .
6657	Get the input stream for the user .
6658	Append a new element .
6659	Expand entities .
6660	Looks up an entity .
6661	Restart the saved element .
6662	Pops the stack .
6663	Pop the saved element .
6664	Returns the prefix of the given name .
6665	Returns true if the given prefix is foreign .
6666	Remove double quotes from a string .
6667	Splits a string into an array of strings .
6668	Resolves an element .
6669	Converts a string into a fully qualified name .
6670	SaveInstanceState .
6671	Unregisters the resources .
6672	Event handler method
6673	This method is called when an event is received from the main thread .
6674	Calculates the base matrix .
6675	Calculates max zoom .
6676	Returns true if the specified editor exists in the specified editor .
6677	Finds all the spans that have been removed .
6678	Encode query string .
6679	URL - decodes a URL .
6680	Picks a directory from a directory .
6681	Rotate bitmap .
6682	Set the output .
6683	Writes a single character .
6684	Writes a string to the output stream .
6685	Check whether the given attribute is a boolean attribute .
6686	Write a UTF - 8 encoded string .
6687	Write namespace declarations .
6688	Write name .
6689	Creates a stream if it doesn t exist .
6690	Method to wait for stream creation .
6691	Complete the snapshot with missing snapshots .
6692	Wait for the next job to finish .
6693	Method to get records .
6694	Perform an Amazon S3 action using the specified number of retries .
6695	Try to create an Amazon Sard action using the provided supplier .
6696	Checks that the given bucket is accessible .
6697	Load store from the snapshot store .
6698	Trigger a wildcard expansion .
6699	Replaces all occurrences of oldPattern with newPattern .
6700	Delete any chars from a string .
6701	Adds a report to the report .
6702	Update the configuration with the given key .
6703	Gets the config properties .
6704	Create an input stream for auto detection .
6705	Convert pre processors to post processors .
6706	Compiles a JavaScript script .
6707	Reloads the cache with a new value .
6708	Reload the model with a new value .
6709	Gets the servlet request .
6710	Creates a transformer for the base name suffix .
6711	Process an error message .
6712	Sends a redirect to the specified location .
6713	Process a resource .
6714	Create a handler for expanded resources .
6715	Opens an InputStream .
6716	Creates the WroConfiguration .
6717	Register change listeners .
6718	Processes a request .
6719	Sets the WroConfiguration .
6720	Identify duplicate group names .
6721	Merge imported model .
6722	Locates an InputStream .
6723	Applies all post processors to the cache .
6724	Decorate processor .
6725	Process a resource .
6726	Split the given string into options .
6727	Loads properties from an input stream .
6728	Parse the properties file .
6729	Creates a custom WroManagerFactory .
6730	Persists the resource names of the group names .
6731	Checks if the given group is a target group .
6732	Extend plugin classpath .
6733	Get the resource file as stream .
6734	Initialize WroManagerFactory .
6735	Sets the model transformers .
6736	Compiles the template .
6737	Merges the given list of resources into a single string .
6738	Run and merge the resources
6739	Runs the preProcessor .
6740	Apply pre processors to resource content .
6741	Decorate Resource PreProcessor .
6742	Persists the fallback storage .
6743	Returns all fields of the given object .
6744	Rewrite css uri to image uri .
6745	Compute new image location .
6746	Add a model transformer .
6747	Handle processed bundle .
6748	Initialize the aggregated folder path .
6749	Extract variables from a variable body .
6750	Parse CSS .
6751	Replaces all variables in css .
6752	Converts a resource post processor to a pre - processor .
6753	Checks whether the resource is eligible .
6754	Apply gzip response .
6755	Create a PathPatternProcessor that matches the supplied processor .
6756	Create a path pattern processor that matches the supplied processor .
6757	Create a resource change handler .
6758	Marks a given resource .
6759	Applies each CSS import to the given resource .
6760	Filters the collection .
6761	Returns whether the request should be minimized or not .
6762	Find imported resources .
6763	Compute the absolute URL for the given resource .
6764	Converts a list of strings to a string .
6765	Gets alias list .
6766	Creates the context .
6767	Evaluates the specified reader .
6768	Evaluates a JavaScript script .
6769	Process the processing .
6770	Checks if the request is a handler request .
6771	Creates the request handler path .
6772	Rename an input stream .
6773	Compute the destination folder for the given resource type .
6774	Process a group .
6775	Checks whether a resource has changed .
6776	Locates a resource in the given uri .
6777	Creates a generic object pool .
6778	Finds the input stream for a jar file .
6779	Open a JAR file .
6780	Extract the path from a URI .
6781	Returns true if the request should be minimized .
6782	Add URI locators .
6783	Decorate a custom WroModelFactory .
6784	Adds a string containing the given string .
6785	Runs the script .
6786	Log the summary of the log .
6787	Processes a resource .
6788	Get a read write lock for the given key .
6789	Create a process .
6790	Parses a comma separated list of properties .
6791	Get the TaskInfo .
6792	Gets the compilation command .
6793	Parse a header .
6794	Add no caching headers to the map .
6795	Gets the path info from the given location .
6796	Gets servlet path from location .
6797	Checks whether the given path matches the given path .
6798	Loads a regexp with the specified key .
6799	Safely copy a reader to a writer .
6800	Creates a temporary file with the given extension .
6801	Clean image url .
6802	Sets an attribute on the servlet context .
6803	Generates the data URI for the given input stream .
6804	Generate the data URI .
6805	Sets the WroConfiguration .
6806	Unset the context
6807	Detect changes .
6808	Called when an exception occurs .
6809	Check if the resource has changed .
6810	Updates the hash for the given group .
6811	Checks if any resources of the given resource type are of the given type .
6812	Creates a process .
6813	Encodes the given serializable object into a string .
6814	Process the group .
6815	Parse a group element .
6816	Create a group from an element .
6817	Parses a resource .
6818	Get the resources for a given group name .
6819	Logs this timer to the given logger .
6820	Stop timer .
6821	Get a timer with the given parameters .
6822	Gets a timer .
6823	Prints the saturation statistics .
6824	Wake up worker thread
6825	Updates processed counters .
6826	This method is called when the snapshot is finished .
6827	Checks if the counter is smaller than the given value .
6828	Ignore the decision .
6829	Instantiates the ontology .
6830	Ensures that the stage has been loaded .
6831	Restore saturation .
6832	Returns true if the consistency check is consistent .
6833	Restores the class taxonomy information from the schema .
6834	Restore the instance taxonomy .
6835	Gets evidence for the ontology .
6836	Initialize the task .
6837	Invalidate the reasoner stage .
6838	Get the to add to add to .
6839	Gets the toRemove to remove from the taxonomy .
6840	Creates an UnsupportedOperationException .
6841	Removes the element at the given position .
6842	Removes the entry at the specified position .
6843	Returns the position of the moved element .
6844	Returns true if the element is present in the array .
6845	Adds the element at the end of the array .
6846	Throw an exception if there is no occurrence .
6847	Adds a timer to the statistics .
6848	Adds the time application to the simulation .
6849	Puts a key into the array .
6850	Removes an entry from the array .
6851	Increases the size of the map .
6852	Shrinks the map by a new capacity .
6853	Saves the configuration to disk .
6854	Prints the declarations of a class .
6855	Returns all direct instances of the given entity node .
6856	Removes all elements from this set .
6857	Combine the given set of hashes into one .
6858	Combine a list of ints .
6859	Copy the contents of the given input stream to the given output stream .
6860	Gets the InCompletionMonitor .
6861	Process a taxonomy .
6862	Submits an input to the queue .
6863	Append the given ELObject to the given Appendable .
6864	Marks the query as computed .
6865	Adds a direct type node .
6866	Checks that the given list of properties matches the given start position .
6867	Returns a subset of the given set that matches the given condition .
6868	Returns a set consisting of the elements of the given input .
6869	Inserts the specified element at the specified index .
6870	Removes an object from the data set .
6871	Add a counter to the statistics .
6872	Log memory usage .
6873	Sets the reasoner options .
6874	Shut down the reasoner .
6875	Prints the header .
6876	Print values to the logger .
6877	Returns a string of the specified character .
6878	Add a RuleCounter to this rule .
6879	Write a resource .
6880	Get action input parameter by name .
6881	Get the property descriptor for the given property path .
6882	Get the required parameters .
6883	Is single value type boolean .
6884	Add a rel .
6885	Set the media type .
6886	Adds the hreflang parameter .
6887	Adds a revision to the link .
6888	Add a link param .
6889	Expand the given arguments .
6890	Gets the rels .
6891	Gets the revs of the link .
6892	Returns true if all the required parameters are satisfied .
6893	Get the value as String .
6894	Checks if the given property is hidden .
6895	Checks whether the property contains the given property .
6896	Returns true if the input annotation contains explicit or implicit property .
6897	Returns true if the request is required .
6898	Gets default value .
6899	Returns the name of the parameter .
6900	Gets the exposed property .
6901	Determine the vocab for the given bean .
6902	Gets the query string .
6903	Appends the form .
6904	Write an input button .
6905	Append select or select .
6906	Applies the given AffordanceBuilder to this builder .
6907	Get the partial URI template components .
6908	Get all optional variables from the given action descriptor .
6909	Get first UberNode by name .
6910	Get first node by relationship
6911	Returns an iterator over all the data nodes .
6912	Construct a MutableHashMap from an Equator .
6913	Creates a map from an iterable of entries .
6914	Creates an empty PersistentTreeMap .
6915	Returns a sorted set of entries .
6916	Returns the key in this map .
6917	Construct an Xform from a List .
6918	Perform a fold operation .
6919	Drop this Xform that satisfies the provided predicate .
6920	Perform a fold operation with a reduction function .
6921	Creates a tuple from the given map entry .
6922	Computes the result .
6923	Register a set of classes .
6924	Gets the node at the specified index .
6925	Appends the specified value to the tail of the tail .
6926	Concatenate a list of items .
6927	Creates a mutable set containing the given items .
6928	Creates a MutableList containing the given items .
6929	Creates an imSet containing the given items .
6930	Creates an imList from the given items .
6931	Creates an Unmodifiable Iterable for the given items .
6932	Creates a StringBuilder for the specified length .
6933	Returns a string representation of the array .
6934	Construct a lazyRef from a producer function .
6935	Executes and returns the value .
6936	Inserts an item at the specified position .
6937	Creates a copy of the given array .
6938	Suspend the current state of the current thread .
6939	Called before the async operation is started .
6940	Builds a list of components from the deployment file .
6941	Validates a directory .
6942	Creates an inheritance link between two classes .
6943	Copies all methods from source class to destination .
6944	Copies methods from given methods array to destination class .
6945	Create log tree .
6946	Remove the SBB entity from the container
6947	Checks if the given parameter is enabled .
6948	Get the set of resources referenced by component .
6949	Installs a service .
6950	Uninstalls a service .
6951	Checks if a resource link is referenced by the resource adapter .
6952	Returns a set of usage parameters for the given SbbID .
6953	Reset all usage parameters
6954	Get a collection of profiles from the profile table .
6955	Get the profile table activity
6956	Gets the profile by index .
6957	Displays the result .
6958	Extracts the contents of an array .
6959	Call this method to fire event .
6960	Binds a name .
6961	Unbinds a name .
6962	Looks up the node with the given name .
6963	Get the name bindings for this node .
6964	Finds the next SBB entity in the activity context .
6965	Returns true if the given TraceLevel is higher than the given one .
6966	Extracts a jar file .
6967	Copies input stream to output stream .
6968	Associates the specified object with the specified key .
6969	Attach the given SbEntityId to this node .
6970	Detaches the given SBB entity from this node .
6971	Returns true if this entity is attached to the entity .
6972	Replies the set of SBB entities attached to this node .
6973	Attach a timer to this node .
6974	Detaches a timer .
6975	Returns true if there is no timers attached to this node .
6976	Replies the names of the timers .
6977	Add a name bound to the namespace .
6978	Remove a namespace .
6979	Returns true if no names bound .
6980	Replies the set of names bound to this node .
6981	Set the cmp attribute .
6982	Replies the attribute with the given name .
6983	Get a deep copy of this node .
6984	Initialize MBean NotificationInfo .
6985	Send usage notification
6986	Download a file from a remote URL
6987	Update the deployed components .
6988	Installs a DeployableUnit
6989	Uninstalls a DeployableUnit .
6990	Stop the deployment .
6991	Show the status of the deployment .
6992	Checks whether a record is logged .
6993	Returns a logger for the given log record .
6994	Returns a set of components that are referring to the given component .
6995	Retrieves all the SbbEntities associated with this node .
6996	Get permissions based on current policy .
6997	Gets the code sources .
6998	Checks if a profile exists in the table .
6999	Remove the profile .
7000	Update the configuration properties .
7001	Call this method to start the entity .
7002	Invoked when the resource is stopping .
7003	Activate this entity .
7004	Deactivates this entity .
7005	Schedules all activities end
7006	remove this entity
7007	Gets the resource adaptor interface .
7008	Call this method when the object is active
7009	Return the activity handle for the given activity .
7010	Called when an activity has ended .
7011	This method is called when a resource is updated .
7012	Verifies that the config properties are valid .
7013	Marks this resource adaptor object as stopping .
7014	Marks this resource object as inactive .
7015	Unconfigured resources .
7016	Sets the resource adaptor context .
7017	set the fault tolerant resource adaptor context
7018	Build profile attribute map .
7019	Resume the scheduled future .
7020	Replies the activity context handles .
7021	Unregisters this object .
7022	Get the MBean MBean .
7023	Decorate the abstract class .
7024	Fire an event
7025	Fire an event
7026	Get the getProfileM method
7027	Gets the service usage parameter set .
7028	Get abstract methods from class
7029	Gets all interface methods from an interface .
7030	Creates the object pool for the given profile table .
7031	Remove the object pool for the profile table
7032	Returns true if the given alarm is owner of the given alarm .
7033	Raises the given notification source .
7034	Get usage parameter set by name .
7035	Replies the event type descriptor .
7036	Checks whether the deployment is accepted .
7037	Initialize the container .
7038	Start the deployment
7039	Stop the deployment .
7040	Show the status of the deployment .
7041	Executes after commit commit actions .
7042	Executes after commit priority .
7043	Executes the after rollback actions .
7044	Executes before commit actions .
7045	Executes before commit priority actions .
7046	Returns the names of all registered tracers .
7047	Creates a tracer .
7048	Remove replicated data .
7049	Register editors .
7050	Process the usage parameters .
7051	Returns the object pool for the given service ID .
7052	Create the object pool for the given service .
7053	Called when the application ends .
7054	Start an activity handle .
7055	End an activity .
7056	Checks the preconditions for the given event type .
7057	This method is used to fire an event .
7058	Generates the concrete class for the interface .
7059	Make getter method .
7060	Converts a string value to an object .
7061	Sets the ID of the profile .
7062	Extracts the message .
7063	Returns true if the object contains the given object .
7064	Returns true if this collection contains all of its elements .
7065	Remove all elements from this collection
7066	Returns true if this level is higher than the specified level .
7067	Resolve the next level .
7068	Removes all classes from the class pool .
7069	Add a profile call to the profile
7070	Returns the profile object associated with the specified profile name .
7071	This method is used to pass a profile object to the pool .
7072	Sets the value of the componentID property .
7073	Generates the concrete class for the activity context interface .
7074	Generate the concrete methods .
7075	Set the data attribute with the given key .
7076	Add a name binding to the cache .
7077	Removes all names from the cache .
7078	Remove a name binding from the cache .
7079	Attach a timer to the cache .
7080	Remove all the timers from the session .
7081	Attaches the given SBB entity to the activity context .
7082	Detaches the given SBB entity from the activity context .
7083	Returns a sorted set of SBB attachment IDs .
7084	End the activity .
7085	Adds a component to this deployment .
7086	Get the collection of external dependencies .
7087	Returns true if the components have been satisfied .
7088	Returns true if the deployment has already been registered .
7089	Get the list of installActions .
7090	Gets the list of all UUID actions associated with this deployment .
7091	Checks whether a component has referring DU
7092	Close a profile
7093	Get object name .
7094	Changes the state of the profile .
7095	Before setCmp field is set .
7096	Invoked after the profile has been set .
7097	Before getCmpField is called .
7098	Method called after the profile has been set .
7099	Invoked before the management method is invoked .
7100	Invoked after the management method is invoked .
7101	Recursively delete a directory .
7102	Creates the default constructor .
7103	Create the default usage parameter setter .
7104	Creates the getter and setter method .
7105	Create the fire event methods .
7106	Create the getSbbActivityInterface interface .
7107	Adds the given expression to this query expression .
7108	Binds the object to the wrapper factory .
7109	Binding the given name to the target object .
7110	Decorate the abstract s abstract class .
7111	Invoke the method with the given name and arguments .
7112	Get the real field name .
7113	Sets the value of the specified field .
7114	Get the value of the field with the given return type .
7115	Set profile context .
7116	Initialize the profile entity
7117	Unset profile context
7118	Returns the profile local object .
7119	Fire add or update event .
7120	Gets the profile comparator wrapper .
7121	Creates a new class with the given name and interfaces .
7122	Creates an inheritance link between two class names .
7123	Adds an annotation to the class .
7124	Add member values to an annotation .
7125	Returns the ActivityContextInterface associated with the given activity .
7126	Gets the class pool .
7127	Set the deployment unit .
7128	Undeclares the class loader .
7129	This method is called when the application is started .
7130	Checks if the given class matches the given interface .
7131	Get all abstract methods of a class
7132	Resolves the entity for the resource .
7133	Validates a tracer name .
7134	Retrieves a collection of profiles from the profile table .
7135	Checks that the given SleeComponent is missing .
7136	Creates a temporary directory for a UUID
7137	Get the entity manager .
7138	Start the container .
7139	Switch the class loader with the specified profile object
7140	Makes a proxy call to a proxy .
7141	Validates the current transaction .
7142	Converts the last time to a TTL .
7143	Checks if profile class is visible .
7144	Determine the profile object that is valid for the given profile entity .
7145	Returns a list of logger names matching the regular expression
7146	Reset logger level
7147	Clear loggers by name .
7148	Add a logger
7149	Add a socket handler
7150	Remove a handler from the logger
7151	Convert tracer name to log4j logger name .
7152	Sets the level of the tracer to the parent logger .
7153	Assigns the log4j level to the given log4j level .
7154	Reset cache flags .
7155	Send a trace notification
7156	Validates that the given tracer name is valid .
7157	Serialize vendor data .
7158	Reads the serialized object from the stream .
7159	Adds a domain class loader .
7160	Returns a list of all the URLs of this classloader .
7161	Finds a class by name .
7162	Try to locate a resource locally .
7163	Overrides the default implementation to find resources .
7164	Create and register the profile mbean .
7165	Resume a transaction .
7166	Returns the set of SbbIDs associated with the component repository .
7167	Gets the set of resource adaptor entities .
7168	Initialize the Slee .
7169	Shutdown the Slee .
7170	Validates a state transition .
7171	Generate named usage parameter setter .
7172	Adds a field to the update .
7173	Build the Polygon .
7174	Adds an argument to the insert query .
7175	Run the given transaction .
7176	Creates a RegionRequest object from a string .
7177	Get the bounding box .
7178	Resolves the bounds of the image .
7179	Gets the onType attribute of the annotation .
7180	Sets the viewing hints .
7181	Adds a viewing hint to the resource .
7182	Set the rendered contentings .
7183	Adds a resource to the resource .
7184	Merge ImageApiProfile objects .
7185	Merge two images .
7186	Create a RotationRequest object from a string
7187	Create a SizeRequest from a string .
7188	Initialize the adb connection .
7189	Get the dump of the device
7190	Execute pop box on device
7191	Executes the pop box on the machine .
7192	Executes the cleanup command .
7193	Pulls a dump of the current device and returns the result .
7194	Gets the crash log .
7195	Removes tabs from text editor .
7196	Appends the given number of spaces to the text editor .
7197	Tokenize the text .
7198	Mark the given text as HTML .
7199	Escapes special characters within a tag .
7200	Adds an exception to the list .
7201	Closes this statement .
7202	Finds the fully qualified class name for a given type .
7203	Write to the file .
7204	Write a bit vector
7205	Append a bit string to a bit vector .
7206	Reads from an input stream .
7207	Gets the JSON object from a path .
7208	Gets a list of objects from a path .
7209	Sets the kov report .
7210	Add a screen capture from a path .
7211	Set system info .
7212	Creates a selector that selects a property .
7213	Creates a Selector that selects a property with the given alias .
7214	Extract validation annotation data .
7215	Extract all annotation for the given property on the given class .
7216	Finds the annotations of the given property on the given class .
7217	Gets the property descriptor for the given type .
7218	Do lookup .
7219	Creates an object from a map .
7220	Creates an object from a map .
7221	Creates an object from a value map .
7222	Converts an object to a map .
7223	Convert an object to a Map
7224	Gets the values for the given annotation .
7225	Creates a validator based on the list of validators .
7226	Updates the list of validators .
7227	Looks up a validator in the registry .
7228	Apply validation meta data properties to a validator .
7229	If the property is blank remove it from the map .
7230	Sets the time .
7231	Returns the number of entries in the cache .
7232	Returns the hash value of the given object .
7233	Creates default options .
7234	Opens a database .
7235	Put all values in the given map into the database .
7236	Removes all keys from the database .
7237	Performs an iterator on the database .
7238	Loads all the data from the database .
7239	Closes the database .
7240	Reduce the array of doubles .
7241	Reduce the array by R .
7242	Compute the variance .
7243	Returns the mean value of the given values .
7244	Invoke a method from an object .
7245	Reduce a float array .
7246	Convert a timestamp to a string
7247	Returns true if object matches criteria
7248	Creates a NOTIN clause
7249	Creates a criteria from a list of objects .
7250	Creates a Criteria from a JSON string .
7251	Adds an array of integers .
7252	Returns the highest element of the array .
7253	Returns the first element of a list
7254	Returns the last element of a list
7255	Returns the last element of a list
7256	Gets the least of the given list .
7257	Get the first element of a list
7258	Get the first element of the array
7259	Processes array of maps .
7260	Handles a collection of maps .
7261	Creates an object from a map .
7262	Gets the value associated with the given key .
7263	Creates a tool tip string from a resource bundle .
7264	Generates a label value .
7265	Adds a hex string to the character sequence .
7266	Process read queue .
7267	Processes the write queue .
7268	Start processing .
7269	Support the subscript operator for String
7270	Computes the slc character at the specified index .
7271	Checks whether a given string is in the specified string array .
7272	Add a character to a string
7273	Add objects to string .
7274	Compacts a string .
7275	Split a string into an array of strings .
7276	Split a string by space .
7277	Split the given string into an array of strings .
7278	Convert char array to string array .
7279	Converts a string to camel case .
7280	Checks if is inside a string .
7281	Returns the lower case of the string .
7282	Returns a string representation of a number .
7283	Returns the main sort .
7284	Sorts a list of fields based on the provided fields .
7285	Returns a comparator for this field .
7286	Returns a list of child comparators .
7287	Checks whether the given value is in the given map .
7288	Compare two ints
7289	Compare two int arrays .
7290	Returns the sum of the values in the given array .
7291	Round up to the nearest power of 2 .
7292	Sorts a list based on a list of fields .
7293	Sorts the given list according to the given fields .
7294	Set field value from map .
7295	Converts an object into a list .
7296	Create the SQL statement to load all version data on the table .
7297	Deep copy method .
7298	Checks if value has string field with given name .
7299	returns true if the class has a string field
7300	returns true if the class has a field
7301	Gets the first property of a class .
7302	Gets the sortable field .
7303	Compares this CacheEntry to another .
7304	Compares two cache entries .
7305	Sort list .
7306	Sorts the given list according to the given sortBy .
7307	Sorts the entries in the given map .
7308	Sorts all entries in the given map .
7309	Sorts the keys in the given map .
7310	Sorts the given array using the given sortBy method .
7311	Returns a comparator that returns a comparator that can be used for sorting .
7312	Returns a comparator that returns the comparator used by this object .
7313	Gets the value for the given key .
7314	Get the value for the specified key .
7315	Returns the order .
7316	Evicts the contents of the cache if necessary .
7317	Dynamically init the given value if it is not already initialized .
7318	Allocate a buffer of size bytes .
7319	Determines if the processing loop should exit .
7320	Reads the next input writer from the stream .
7321	Determines if the writer is empty .
7322	Start the monitor .
7323	Start the background thread .
7324	Gets the object associated with the given key .
7325	The main method for the query .
7326	Do a filter .
7327	Sets the time .
7328	Synchronizes the output stream to disk .
7329	Close output stream .
7330	Writes the next buffer to the file .
7331	Writes the given buffer to disk .
7332	Initialize output stream .
7333	Puts all the given values into the store .
7334	Converts the given key into a byte array .
7335	Reads the validator meta data for the given class and returns the list of validator meta data .
7336	Extract validator meta data from a string .
7337	Reads validator meta data for given class and property .
7338	Extract validator meta data .
7339	Extract validator meta data from annotations .
7340	Converts annotation data into ValidatorMetaData .
7341	Splits a string into an array of strings .
7342	Splits the given string by whitespace .
7343	Split a string by delimiters .
7344	Remove all characters from the given string .
7345	Splits a string into an array of strings separated by one character .
7346	Parse a double from a string .
7347	Parse an int from a buffer .
7348	Parse a long .
7349	Gets a property by path .
7350	Get all fields from an object .
7351	Gets the type of a property .
7352	Injects a property value into an object .
7353	Sets the value of a property .
7354	Gets a collection property .
7355	Get a property from an object .
7356	Gets the int value of a property .
7357	Initialize this message .
7358	Creates a message with the given key and arguments .
7359	Creates a message .
7360	Convert key to array
7361	Gets the subject .
7362	Parses the given text .
7363	Sends a request .
7364	Delete a database .
7365	Create a database .
7366	Returns a list of UUIDs .
7367	List resources .
7368	Triggers a replication request .
7369	Queries a single value .
7370	Sets the direction in descending order .
7371	Synchronize all the design documents .
7372	Get a design document from database .
7373	Gets all the design docs from disk .
7374	Retrieves a design document by ID .
7375	Saves the replicator document .
7376	Returns the replicator document .
7377	Find all replicator documents .
7378	Delete a replicator document .
7379	Retrieves an object from the database .
7380	Find documents by json query
7381	Checks if the document exists .
7382	Bulk delete docs .
7383	Performs a PUT request .
7384	Perform a PUT request .
7385	Perform a POST request .
7386	Perform a DELETE request .
7387	Validates response .
7388	Sets the entity as a string .
7389	Adds an attachment .
7390	Returns all the changes in the feed .
7391	Reads next row .
7392	Convert the given amount to a string .
7393	Shutdown the application .
7394	Creates an Observable from an array of bytes .
7395	Add tags to a metric
7396	Checks and creates a temp table and creates it if necessary .
7397	Gets namespace id .
7398	Checks whether the request is a query .
7399	Send authentication request .
7400	Returns the verb for the given request method .
7401	Generate subject access review .
7402	Handles request result .
7403	Handles a client request failure .
7404	Initializes the configuration .
7405	Find scheduled jobs .
7406	Converts a point map into a list of buckets .
7407	End the exchange .
7408	Retrieves all data from a bucket .
7409	Creates a new buckets starting at the specified step .
7410	send message to producer
7411	Send one - way message
7412	send message to topic
7413	Scans through the query parameters and returns the result .
7414	Set a value for a given property .
7415	Adds a file to the zip path .
7416	Replaces the zip file with the given text .
7417	Builds the zip file .
7418	Generates metrics .
7419	Fetch content resource .
7420	Fetch content for order item .
7421	Upload an export transformation to a zip file .
7422	Generates the files from the given iterator .
7423	Creates a directory in the given parent directory .
7424	Ends the object .
7425	Register a model adaptor
7426	Register attribute renderer .
7427	Prepares template to create template .
7428	Adds a new sip .
7429	Set a property .
7430	Add child object .
7431	Creates a Supplier from a directory .
7432	Copies the contents of the given input stream to the given output stream .
7433	Parse the given file .
7434	Parse an XML document from a reader .
7435	Returns the elements in the specified parent .
7436	Returns the children of the given element .
7437	Gets the first child element within a parent element .
7438	Get Stream of named elements .
7439	Validates an XML stream against an XML schema .
7440	Entry point for testing .
7441	Adds content to the builder .
7442	Adds a content builder to the content builder .
7443	Process a zip file entry .
7444	Encode ascii characters .
7445	Sets the signature .
7446	Removes all whitespace from the given data array .
7447	Sign the request .
7448	Sets the upload data .
7449	Complete the multipart upload .
7450	Invoked when a notification is received .
7451	Updates the state of a notification .
7452	Returns true if the timer has expired .
7453	Gets a notification .
7454	Gets the addressees for a notification
7455	Gets the Addressese .
7456	Gets the events for a notification
7457	Gets an event .
7458	Returns the URL for a single notification request .
7459	Returns the JpaEntry with the given id .
7460	Gets an SSP token .
7461	Returns the number of entries in this notification category .
7462	Add new categories .
7463	Fetches an SSP notification .
7464	Create a notification response .
7465	Map the response to a notification response .
7466	Map a notification entry .
7467	Attaches the actions to the notification entry .
7468	Normalize a link .
7469	Gets the notification category based on the portlet request .
7470	Gets the notification source .
7471	Invokes the read notification .
7472	Read notification response from file .
7473	Retrieves the institute ID from the request .
7474	Extracts the user id from the given class .
7475	Hide notification .
7476	Get the attributes map .
7477	Normalize a GeoTuple .
7478	Returns true if the boxA is contained inside the boxA .
7479	Finds the closest point in the envelope .
7480	Computes the sign of a point .
7481	Sets the camera s shape .
7482	Sets the position of the Tuler .
7483	Converts a polygon into an output rectangle .
7484	Converts a polyrilateral polyrilateral into the output image .
7485	Computes the bounding box of a quadrilateral .
7486	Computes the bounding box of a polygon .
7487	Calculates the center of a quadrilateral .
7488	Computes the average point of the polygon
7489	Computes the convex hull of a polygon
7490	Removes every triangle from a polygon .
7491	Returns the average error of the polygon
7492	Computes the area of two polygons
7493	Returns true if the quadrilateral contains the specified point .
7494	Returns true if the polygon contains a triangle .
7495	Calculate intersection point .
7496	Returns the intersection point of two lines .
7497	Calculates the intersection of two points .
7498	Returns the intersection of a line segment .
7499	Calculates the area of two polygons .
7500	Returns true if the specified point is inside the image .
7501	Returns the area of the intersection between two points .
7502	Returns the value at the given index .
7503	Convert a matrix to a quaternion .
7504	Computes the rotation matrix for a matrix .
7505	Sets the rotation matrix for a given angle .
7506	Sets the y - axis rotation .
7507	Sets the rotation matrix .
7508	Sets z rotation matrix .
7509	Converts an Euler to a matrix .
7510	Performs a rotation around an axis .
7511	Sets the angle of the curve .
7512	Computes the pose of a motion .
7513	Sets the transformation matrix .
7514	Interpolates the points in the plane .
7515	Solve a point vector .
7516	Solves a point on the plane .
7517	Returns the length of the side of the polygon .
7518	Returns true if the point is inside the image .
7519	Convert a Conic Generalized Generalized Generalized Generalized Generalized Generalized Generalization .
7520	Convert a Conic Generalized Generalized Generalization to a 3x3 matrix .
7521	Convert a point to a Paric general feature vector .
7522	Convert a Paric Generalized Generalized Generalized Generalized Generalization to a Conic Generalized Generalization .
7523	Divides p by v .
7524	Converts a GeoTuple into a matrix .
7525	Converts a GeoTuple to a GeoTuple .
7526	Sets the parameter vector .
7527	Compute distance between two angles
7528	Returns true if two planes are intersecting .
7529	Returns true if the point is contained in the plane .
7530	Returns true if the line intersects a point and a point .
7531	Interpolates the points between two segments .
7532	Extracts the quaternion from q
7533	Computes a polygon based on the input points .
7534	Sets the camera to no motion
7535	Creates a homogeneous matrix .
7536	Creates the homogeneous matrix .
7537	Sets the axis x y - z axis .
7538	Returns true if the two segments are identical .
7539	Convert a LatLong to a unit vector .
7540	Computes the circle between two points .
7541	Returns the squared distance between two points .
7542	Calculates the point that points to the point of a line parameter .
7543	Calculates the point to point on the line .
7544	Finds the closest point in the plane .
7545	Calculates the point of a point in the line .
7546	Calculates the point for a point .
7547	Transforms a point .
7548	Transforms an array of points .
7549	Returns true if the quadr is equal to the specified tolerance .
7550	Compute the acute angle of a line .
7551	Convert a point into a line parameter .
7552	Convert a point into a line p .
7553	Convert a line segmented segment into a single line parameter .
7554	Convert a LineGeneralGeneral into a LineGeneralized2D
7555	Convert a point into a line generic .
7556	Convert a point to a line parametric
7557	Convert a point p to a line p .
7558	Convert a line segmented vector into a single line segment .
7559	Convert a linestring into a line parametric
7560	Convert a plane to a plane .
7561	Convert plane tangent to plane .
7562	Convert a plane to a 3D plane .
7563	Converts a point into 3D coordinates .
7564	Convert a plane to world coordinates .
7565	Checks if the matrix is identical .
7566	Creates a deep copy of this matrix .
7567	Returns the squared Euclidean norm of the matrix
7568	Computes the t value of a point on a line .
7569	Returns true if all the elements are counted .
7570	Checks to see if the parabola is equivalent .
7571	Sets the center of this point .
7572	Calculates the acute angle between two lines .
7573	Checks to see if a point is saturated .
7574	Generates a random list of points with the mean and w .
7575	Converts a point h to eigen coordinate .
7576	Computes the product of two points .
7577	Returns true if the two points are identical .
7578	Sets the point of the rectangle .
7579	Convert an ellipse into the quadratic quadratic
7580	Calculates the point of a point .
7581	Compute the angle of a point .
7582	Computes the tangent of a tipse .
7583	Selects the tangent which should be tangent .
7584	Returns the corner at the given index .
7585	Computes the distance between two lines .
7586	Computes the distance between two points .
7587	Computes the distance between a point and a point .
7588	Computes the top point of a plane .
7589	Returns the distance between a point and a point .
7590	Returns the Euclidean distance between two segments .
7591	Returns the squared Euclidean distance of two lines .
7592	Computes the Euclidean distance between the quadrilateral and p .
7593	Returns the squared distance between the quadrilateral and p .
7594	Computes the Euclidean distance of a polygon .
7595	Computes the Euclidean distance of a polygon
7596	Computes the distance of the plane .
7597	Computes the Euclidean distance .
7598	Compute the 2 - dimensional distance of a point .
7599	Add a transform to the path .
7600	Calculates the point that points to a point .
7601	Finds the closest point in the ellipse
7602	Computes the polynomial polynomial curve .
7603	Creates a random vector .
7604	Computes the homography between two vectors .
7605	Checks if two vectors are identical .
7606	Normalize vector .
7607	Creates a matrix from a vector .
7608	Convert a matrix to a real vector .
7609	Returns the distance between the two points .
7610	Sets the ellipse .
7611	Normalize this quaternion .
7612	Computes the inner triangle of two points .
7613	Computes the quadrilateral .
7614	Computes the simple polygon
7615	Sets the mean point of a list of points .
7616	Order the points in a list .
7617	Computes the mean of a point
7618	Checks if a polygon is convex .
7619	Multiply this vector .
7620	Returns the maximum absolute value of this object .
7621	Replies the distance between the two points .
7622	Returns the squared Euclidean distance between two points .
7623	Generates a random point from a plane .
7624	Generates a random point from a set of points .
7625	Random point 3D points
7626	Computes the mean of a list of points .
7627	Returns the mean of the points
7628	Invalidates all credentials from the cache .
7629	Discards all JWT contexts matching the given predicate .
7630	Combine a collection of Collections into a Set .
7631	Get feature features from the server directory .
7632	Gets the config dropins features .
7633	Gets the server XML features .
7634	Parse include file .
7635	Parse feature manager node .
7636	Downloads jsons from the given productId and version
7637	Get the set of Liberty features from a set of files .
7638	Checks if the given list of features should be installed .
7639	Checks whether the given collection contains all of the given elements .
7640	Gets the next product version .
7641	Extracts the symbolic name from a jar file .
7642	Gets the install kernel jar file .
7643	Compares two files .
7644	Extract the version string from the file name .
7645	Compare two versions .
7646	Gets product info .
7647	Checks to see if the given artifact is a Spring Boot Uber Boot Uber Boot Uber - class .
7648	Get an instance of an Arquillian property .
7649	Checks if a file is working .
7650	Rotate back to center .
7651	Checks whether two objects are equal .
7652	Loads an int from a string .
7653	Throws an exception .
7654	Verifies that the TURLE is valid .
7655	Returns a new puzzle with the specified target index .
7656	Gets the distance to the goal .
7657	Prints a formatted message .
7658	Prints a formatted message .
7659	Make a fancy decision decision .
7660	Print a variable .
7661	Multiply a number of bits
7662	Multiply two values
7663	Returns the number of poisson probability
7664	Returns the number of distinct elements in the given array .
7665	Entry point for testing
7666	Capitalizes the first character of a word .
7667	Returns the first character of a word .
7668	Fix path .
7669	Convert a CriteriaJoinJoin into a String
7670	Generate the token sentence .
7671	Extract auth token from request .
7672	Extract the auth token from a cookie list .
7673	Registers the Guice boundingor .
7674	Gets all the permissions for a role entry .
7675	Add a projection to the list
7676	Convert JobInfo to JobDetail
7677	Convert a trigger to a trigger
7678	Set count interval values in the builder
7679	Sets start and end time .
7680	Send mail to queue
7681	Writes the buffered content to the output stream .
7682	Initialize scheduler .
7683	Returns all the fields of the class .
7684	Gets the field map .
7685	Converts an Exception to a Response .
7686	Configure encryptor .
7687	Generate the attributes hash .
7688	Generate the token string .
7689	Sends a message to a MimeItem .
7690	Generates a strong password for a given user .
7691	Change password .
7692	Gets user by account name .
7693	Hashes a password .
7694	Verifies that the given string is a valid account name .
7695	Verifies the password strength against the old password .
7696	Provide the search model .
7697	Commit the transaction .
7698	Rolls back the transaction .
7699	Start the transaction .
7700	Configure field by name
7701	Checks whether the given method is authorized .
7702	Parses the given object as a Date .
7703	Constructs the response .
7704	Create an equals expression
7705	Create a NOT equal expression
7706	Create a less than expression
7707	Create a less than or equal expression
7708	Create a greater than expression
7709	Create a Restriction
7710	Create an ILike restriction
7711	Create a IN expression
7712	Creates a namespace manager for a namespace .
7713	Creates a new resource representation of this resource .
7714	Adds a rel to this resource .
7715	Returns a copy of this resource representation with the given value .
7716	Create a new resource representation .
7717	Checks whether the given byte array can be decoded .
7718	Encodes a string .
7719	Compares two Reader objects .
7720	Moves src to dst .
7721	Tries to touch all files .
7722	Gets the base name of a file .
7723	Add padding to the counter .
7724	Gets the qualified name of a class .
7725	Returns all super types of a class .
7726	Verifies that the given hash matches the given password .
7727	Reads a string from the system .
7728	Appends a byte to the buffer .
7729	Appends a portion of a byte array to this buffer .
7730	Creates a copy of the given array .
7731	Returns a new instance of this fraction .
7732	Subtracts the result of this fraction .
7733	Returns a new fraction of this fraction .
7734	Returns a new fraction of this fraction by the given value .
7735	Returns the maximum value of the given set of longs .
7736	Returns the smallest of the given long values .
7737	Throws IllegalArgumentException if condition is true .
7738	Fetches the data for the given latitude and altitude
7739	Fetches content for a given latitude and latitude .
7740	Fetches content for a given latitude and latitude
7741	Returns a list of hourly points for the given hours .
7742	Finds the closest matching forecast for the given date .
7743	Fetches the data for the given forecast query .
7744	Creates a simple long term forecast for the current day .
7745	Creates a long term forecast for the given series of series .
7746	Creates a new Location object from a list of coordinates .
7747	Fetches the list of available content .
7748	Creates the lower case symbol name for the given point .
7749	Finds the Beauft level for the given point .
7750	Creates a URI from a string .
7751	Returns true if the given date is a Sun .
7752	Returns the point forecast for the given date time .
7753	Finds the best forecast for a given date .
7754	Fetch data for the given latitude and latitude
7755	Fetch data for a given latitude and latitude
7756	Update database .
7757	Invoke a string method .
7758	Acquires an object from a DataSource .
7759	Gets a referenced object .
7760	Gets a wrapped object .
7761	Gets the configuration .
7762	Checks if the configuration is enabled .
7763	Creates an iterator for the class .
7764	Returns the decoder .
7765	Returns all the services registered with the given interface .
7766	Get a module of the given interface type .
7767	Acquires an InputStream from a DataSource .
7768	Returns the size of the data source .
7769	Gets a wrapped data reference .
7770	Returns the component s index .
7771	Returns the prefix of this name .
7772	Returns true if the compiler is colored .
7773	Execute a regular expression .
7774	Conducts a looping loop .
7775	Calculate a subset of the given subexpression .
7776	collapse a subexpression
7777	Compares two binary subexpression .
7778	Clones all the arcs of a new state .
7779	Optimistic t .
7780	Recursively mark the subtree of a subtree .
7781	Create a new NFA node .
7782	Parses the given stopper .
7783	Perform a delete operation .
7784	Called when a non - word is found .
7785	Clone a single word .
7786	Returns the next reference number .
7787	Read a bracket .
7788	Scan plain text .
7789	Creates a new lacon .
7790	Process one character .
7791	Processes a UnicodeSet .
7792	Gets the color for the given codepoint .
7793	Returns a pseudo color .
7794	Compute a subrange of a color .
7795	Updates all colors in the given NFA .
7796	Set the color chain of an arc .
7797	Uncolor a given Arc .
7798	Dumps the colors in the history .
7799	Start lexstart .
7800	Perform prefixes .
7801	Perform the lexnest step .
7802	Gets the color associated with the codepoint .
7803	Initialize state set .
7804	Returns the last seen state .
7805	Returns a UnicodeSet representing the specified character .
7806	Returns a UnicodeSet for the given class name .
7807	Compares two arcs .
7808	Returns a string representation of this operation .
7809	Creates a new state .
7810	Moves all arcs from old to new state .
7811	Move all the ins from old to new state .
7812	Copies all ins from old state to new state .
7813	Copies all outputs from old to new state .
7814	Drops a state from a state .
7815	Remove a state from a state .
7816	Adds a new arc to this state .
7817	Duplicate a state .
7818	Get the pseudo colors
7819	Dumps the current state of the network .
7820	Prints a state .
7821	Dumps the arcs of a state .
7822	Recursively dump a Arc .
7823	Print a arc .
7824	Optimize the regex .
7825	Determines the number of points in the chain .
7826	Combines Arc and Arc .
7827	Removes all states from the state .
7828	Mark a state as reachable .
7829	Recursive function to find a mark that can be reachable .
7830	Fixes all non - empty states of the state machine .
7831	Un - empty state .
7832	Get rule parameters .
7833	Gets all rule interpreter plugins .
7834	Gets report plugins .
7835	Gets the rule selection .
7836	Parse the command line arguments .
7837	Returns the error message for the CliExecutionException .
7838	Gather the standard command line options .
7839	Gather all the tasks from a task factory .
7840	Gather the task names from the given factory .
7841	Interprets the command line .
7842	Get the command line .
7843	Executes a task .
7844	Read properties .
7845	Prints the usage message .
7846	Returns the home directory for the JQASSistaint .
7847	Creates the plugin class loader .
7848	Gets the ids of all the ids contained within a map .
7849	Get the set of ids of all cells in the map
7850	Returns the URI of the target method .
7851	Add a route .
7852	Returns the number of routes .
7853	Add a route to the router .
7854	Add a route to the router .
7855	Add a route to the router .
7856	Returns true if the path matches any of the request paths .
7857	Checks whether the given property is equal to the given value .
7858	Returns the store file name .
7859	Compares two folders .
7860	Compares two entries .
7861	Compares two bookmarks .
7862	Set the last modified time of servlet class .
7863	Returns a list of the names of the tag handlers .
7864	Finds a class by name .
7865	Extract the Authorization header from the request .
7866	Get instance of ProtectedFunctionMapper .
7867	Map a function to a method .
7868	Get the map for the function mapping .
7869	Resolves a method .
7870	Set the values .
7871	Resolve a variable .
7872	Parse a tag file .
7873	Parse a jar file .
7874	Parses a tag file .
7875	Parse a jar file .
7876	Creates a compiler .
7877	Gets the resource as stream .
7878	Calculates the last modified timestamp of all channels .
7879	Searches for the class loaders .
7880	Returns true if this classloader is the same as this classloader .
7881	Start loading .
7882	Read stream header .
7883	Paginates a list of data sets .
7884	Creates a new MetaKey from a string .
7885	Fill the requirements .
7886	Get TagFileInfo for a tag file .
7887	Parses the implicit TLD .
7888	Returns the checksum for the given file name and algorithm .
7889	Returns the size of the given stream .
7890	Validate channel name .
7891	Seek to the given block number .
7892	Locates the block at the given position .
7893	Gets the Maven artifacts .
7894	Updates the state of the option s state based on the current state of the argument .
7895	Calculate the number of bytes that can be either 1 or 1 byte
7896	Calculate long rates for a given position
7897	Calculate the normal match prices for a normal match .
7898	Throws an exception for an expected byte .
7899	Throws an exception if the position is invalid .
7900	Scans all the tlds .
7901	Scans the input stream for the TLD file .
7902	Add a JspServletWrapper .
7903	Get the parent class loader .
7904	Set a new bytecode .
7905	Returns the bytecode birth time of the specified name .
7906	Saves the bytecode to a file .
7907	Checks the compiled JS files .
7908	Initialize the classpath .
7909	Start a new thread
7910	Stops the thread
7911	Runs the compiler .
7912	Find channel by name .
7913	Finds a channel by its identifier .
7914	Update the map of deploy keys .
7915	List the deployments of a channel .
7916	Copy the contents of the given input stream to the given output stream .
7917	Parse jsp file .
7918	Extracts the attributes from a SAX reader .
7919	Parse quoted string .
7920	Add a include directive .
7921	Parse attribute and body .
7922	Add an attribute .
7923	Add a child node .
7924	Find attributes .
7925	Returns the children of this node .
7926	Returns all children with the given name .
7927	Converts this classifier to base coordinates .
7928	Finds the alias for a given variable .
7929	Set thread .
7930	Unset thread .
7931	Find and return the wrapped stream .
7932	Write an optional field .
7933	Writes the given string to the given StringWriter .
7934	Adds a new element to the parent element .
7935	Adds the first element to the parent element .
7936	Writes the next character .
7937	Set the writer .
7938	Allocates the buffer .
7939	Maps the EL function to a template .
7940	Returns the current state of the given state .
7941	Registers a provider for the given key .
7942	Streams a stream of data from this file .
7943	Monitor a job .
7944	Check if the channel is authenticated .
7945	Finish writing .
7946	Make a Gson .
7947	Encode the LZMA2 field .
7948	Returns an unmodifiable union of the provided meta data .
7949	Get the exception from the request .
7950	Checks if a given coordinate is a checkSum extension .
7951	Completes the stream .
7952	Get the exception .
7953	Evaluates EL expression .
7954	Returns the prefix for the OSGi service .
7955	Returns true if the given path is an XML file .
7956	Parses the given tag file and returns the tag info .
7957	Load the class file .
7958	Removes all proto types that belong to the given class file .
7959	Runs the Jsp csp csvc .
7960	Set the URI root .
7961	Scan all files from the base directory .
7962	Try to locate the uri root .
7963	Initialize the system class loader .
7964	Moves the current position in the chain .
7965	Returns true if the specified string matches this pattern .
7966	Returns true if the specified string matches the specified string .
7967	Skips characters until the specified limit is found .
7968	Skips characters until the escape character is found .
7969	Skips the end of a tag until the end of an ETag .
7970	Parse a token .
7971	Pop the current file .
7972	Make unclassified coordinates .
7973	Filter the list of factories from the given predicate .
7974	Gets the id of all the missing aspects .
7975	Sets the schema resource prefix .
7976	Sets the DTD resource prefix .
7977	Encode a prefix .
7978	Convert a node into a tree .
7979	Merge errors from binding result .
7980	Initializes the binder .
7981	Scans the set of channel AspectInfos and returns a map with all the channels .
7982	Unqualifies the given path .
7983	Invoke a custom tag plugin
7984	Get a byte array from the byte array .
7985	Gets an int array containing the specified size .
7986	Returns an instance of the given results .
7987	Get resource as stream .
7988	Validate the tag library .
7989	Push stream .
7990	Determine the encoding of a file .
7991	Scans an XML declaration .
7992	Report a fatal error .
7993	Get the real path of a file .
7994	Get a resource URL .
7995	Get resource as stream .
7996	Get the paths of the resource path .
7997	Log a message and exception
7998	Add a filter .
7999	Compute the number of bytes needed to encode the given dictionary .
8000	Get memory usage .
8001	Sets the preset dictionary .
8002	Moves the window to readSize .
8003	Fills the specified range of bytes from the input stream .
8004	Process pending bytes .
8005	Returns the number of bytes that match the specified distance .
8006	Returns the number of bytes that match the specified number of characters .
8007	Checks whether the given matches the given set of matches .
8008	Moves the readPos to the specified position .
8009	Recycle the response .
8010	Flush buffer .
8011	Clear the buffer .
8012	Flush the stream .
8013	Closes the stream .
8014	Writes a string to the underlying stream .
8015	Allocate character buffer .
8016	This method throws a javac exception .
8017	Returns the key for the given meta key .
8018	Compile the class .
8019	Compiles the class .
8020	Remove generated files .
8021	Initialize the java compiler .
8022	Returns true if the given path contains the system jar .
8023	Quote a character .
8024	Generate the declarations .
8025	Compile the tag handler pool list .
8026	Generate the XML log for the given node .
8027	Generate common postamble .
8028	Generate the postamble .
8029	Generates the page .
8030	Generate tag handler attributes .
8031	Reads properties from the given stream .
8032	Export a channel .
8033	Validate XMLView .
8034	Gets the tag handler .
8035	Parses the given expression .
8036	Selects a property group based on previous properties .
8037	Checks if a given URI is a JSP page .
8038	Print comment .
8039	Prints a string .
8040	Print a string .
8041	Print a string .
8042	Gets the expression in XML .
8043	Check that a scope is valid .
8044	Escapes the given string .
8045	Validate expressions .
8046	Returns the class name of the tag handler .
8047	Generates a Java package name from the given path .
8048	Splits a path .
8049	Makes sure the identifier is valid .
8050	Makes a character .
8051	Returns true if the given string is a valid Java keyword .
8052	Adds a property to the properties map .
8053	Get modifier string .
8054	Returns a sorted set of metadata .
8055	Runs the user write model .
8056	Gets basename .
8057	Put a value into the cache .
8058	Loads a value from the cache .
8059	Build metrics collection .
8060	Resolves a number .
8061	Write object to output stream .
8062	Get the TTL for the given location .
8063	Create prepared statements .
8064	Track delayed metrics .
8065	Track delayed aggregated metrics .
8066	get unversioned double from stream
8067	Write an unsigned double .
8068	Returns an unmodifiable view of all the properties of this application .
8069	Creates the container .
8070	Schedule eligible slots .
8071	Clear the state of the given slot .
8072	Registers listener for event events .
8073	Register a listener for event events .
8074	Removes the specified event .
8075	Emit event .
8076	Returns the list of listeners associated with the specified event .
8077	Get remote name .
8078	Append rollup event .
8079	Returns the timestamp from the file name .
8080	Start serving requests .
8081	Determines the Rollup type based on the given source type and granularity .
8082	Create IOContainer from configuration .
8083	Puts a timestamp into the given table .
8084	Compute the maximum number of outputs .
8085	Formats a header into a string .
8086	Formats the given outputs into an array of strings .
8087	Register metrics .
8088	Sets the pool name .
8089	Adds the given metric index to the given metric index .
8090	Gets the complete set of metrics .
8091	Extract tokens from locator .
8092	Executes the given rollup and returns the result set asynchronously .
8093	Get granularity granularity from a given interval .
8094	Returns the granularity of the given number of points less than the given number of points .
8095	Set server time .
8096	Gets the unique host names .
8097	Get the maximum number of connections per host .
8098	Get metric column families .
8099	Insert a collection of metrics .
8100	Insert metrics .
8101	Calculates the set of LOCators for this task .
8102	Fetch metric names from elasticsearch query
8103	Computes the regex for the given query string .
8104	Start the StorageManager .
8105	Stops the upload .
8106	Returns true if the specified locator is currently currently currently active .
8107	Returns true if the specified locator is currently currently active .
8108	Returns true if the given locator is currently currently active .
8109	Returns true if the given slot is currently running for the given slot .
8110	Set the delayed locator for a slot
8111	Returns a map of all ranges of the supplied granularity .
8112	Returns range of ranges for the given interval .
8113	Insert metrics .
8114	Insert metrics .
8115	Returns true if the given metric is delayed .
8116	Returns the bound statement for the given metric if it is delayed .
8117	Gets metadata values .
8118	Returns the serializer for the given type .
8119	Returns true if the given request is valid .
8120	Checks whether the given request is valid .
8121	Perform index discovery .
8122	Validates that the aggregated metrics are present .
8123	Perform download .
8124	Returns a new instance of Extractor .
8125	Checks if the OS matches the operating system .
8126	Starts the RabbitMQ process .
8127	Stops the RabbitMQ process .
8128	Returns a new instance of the default signing parameters .
8129	Adds the ICE servers .
8130	Adds the ICE servers .
8131	Method to transmit a message
8132	Send a message to all peers
8133	Gets the value of theweitRevenue property .
8134	Gets the value of the userDefinedField property .
8135	Gets the value of the userDefinedAny property .
8136	Sets the value of the apiSupplier property .
8137	Gets the value of the multimediaAnnot property .
8138	Gets the status value of the status property .
8139	Gets the statusCode value for the status indicator .
8140	Gets the statusHP property .
8141	Gets the importmodus value .
8142	Gets the adressdruck property .
8143	Gets the value of the Waehrung property .
8144	Gets the value of the bodenab property .
8145	Sets the value of the region property .
8146	Sets the value of the area property .
8147	Sets the value of the address property .
8148	Sets the value of the description property .
8149	Sets the value of the loan collectionPeriod property .
8150	Sets the value of the FurnishedAdType property .
8151	Sets the value of the phone1 property .
8152	Sets the value of the phone2 property .
8153	Sets the value of the contactName property .
8154	Sets the value of the phoneInfo property .
8155	Sets the value of the mainEmail property .
8156	Sets the value of the ccEmail property .
8157	Sets the value of the externalId property .
8158	Sets the value of the agentId property .
8159	Sets the value of the epartPass property .
8160	Sets the value of the jagschema property .
8161	Sets the value of the gebseude pass .
8162	Sets the value of the unit property .
8163	Checks if the given string is numeric .
8164	Sets the value of gebiete property .
8165	Sets the gruppe property .
8166	Sets the value of the agent property .
8167	Gets the value of the property .
8168	Sets the standkStatus property .
8169	Gets the value of the userDefend property .
8170	Sets the value of the zeiteininheit property .
8171	Gets the value of the zimmer property .
8172	Gets the value of the haaus property .
8173	Gets the value of the bueroPacket property .
8174	Gets the value of the swallowgewerer property .
8175	Gets the value of the landUndForStrictcha property .
8176	Gets the value of the Sonstige property .
8177	Gets the value of the zinshaus .
8178	Gets the value of the terrain property .
8179	Sets the value of the units property .
8180	Sets the value of the WBDungStrategy property .
8181	Gets the ISO 2 country code .
8182	Gets the country ISO 23 code .
8183	Gets the ISO 3 country code .
8184	Gets the country ISO3 from an ISO 2166 code .
8185	Returns the country name for the given country .
8186	Translate a country name .
8187	Gets the value of the acbieter property .
8188	Sets the value of the category property .
8189	Gets the value of the pdf property .
8190	Sets the value of the automaton art property .
8191	Sets the value of the realestateitems property .
8192	Sets the value of pmittt .
8193	Downgrade document version to previous version
8194	Upgrade the document version .
8195	Gets the value of the content property .
8196	Get field names .
8197	Sets the value of the blick property .
8198	Sets the value of the pauskel property .
8199	Sets the value of monatsmiete property .
8200	Gets the parkplitType property .
8201	Sets the value of the lastEnum property .
8202	Sets the value of the zustand property .
8203	Gets the value of the feldung .
8204	Handle validation event .
8205	Dumps the contents of the buffer to a writer .
8206	Returns the value at the given position .
8207	Prints the record .
8208	Set a value for a given position .
8209	Sets the value of the ctype property .
8210	Sets the value of the havent property .
8211	Gets the value of the energiePass property .
8212	Sets the value of the keller property .
8213	Sets the value of the grust type property .
8214	Sets the value of the GeschlAttribute .
8215	Sets the value of the HallEntries property .
8216	Gets the wieserHierminMin .
8217	Gets the value of the teilummer property .
8218	Upgrade the document version .
8219	Gets the value of the Bevorzt property .
8220	Gets the value of the wunsch property .
8221	Sets the value of the art field .
8222	Sets the modus value .
8223	Gets the value of the emailSonstige property .
8224	Gets the value of the telstige property .
8225	Sets the value of the handel property .
8226	Downgrade document version to previous version .
8227	Sets the value of the apiFund1 property .
8228	Sets the value of the apifund2 property .
8229	Sets the value of the apifund33 property .
8230	Gets the value of the row property .
8231	Sets the value of the distanz field .
8232	Gets the value of the achang property .
8233	Gets the value of the objektType property .
8234	Gets the value of the objekt .
8235	Gets the HausKategorie property .
8236	Gets the value of the Ausstattiefets property .
8237	Gets the value of the vermarktungs property .
8238	Gets the value of the intressent property .
8239	Sets the value of theWert property .
8240	Sets the value of the cardinality property .
8241	Sets the value of theBudget property .
8242	Sets the value of the bootstraende property .
8243	Sets the value of the BURI property .
8244	Sets the value of the camping property .
8245	Sets the value of the property .
8246	Sets the value of the einfamilies property .
8247	Sets the value of the einzelSegment property .
8248	Sets the value of the einzel Filename property .
8249	Sets the value of the garagen property .
8250	Sets the value of the garden property .
8251	Sets the value of the property .
8252	Sets the value of the gewerbe property .
8253	Sets the value of the hotel property .
8254	Sets the value of the industry property .
8255	Sets the value of theKeineBundle property .
8256	Sets the value of the kleingewerbe property .
8257	Sets the value of the lager property .
8258	Sets the value of the mehr family .
8259	Sets the value of the optpflz property .
8260	Sets the value of the parkhaus property .
8261	Sets the value of the producible property .
8262	Sets the value of the reihenhaus property .
8263	Sets the value of the stllpla property .
8264	Sets the value of the villa property .
8265	Sets the value of the wald property .
8266	Sets the value of the acbieter property .
8267	Gets the value of the wordungings property .
8268	Gets the value of the grundstueck property .
8269	Gets the value of the einzelHoldel property .
8270	Gets the value of the HallenLager property .
8271	Gets the value of the parkenen property .
8272	Gets the value of the freizeitmentGets property .
8273	Gets the value of the objektPart property .
8274	Gets the value of the stellitart property .
8275	Sets the maximum durations value .
8276	Gets the value of the feature property .
8277	Sets the value of the zimmer type property .
8278	Upgrade the document version .
8279	Sets the value of the keine angle property .
8280	Sets the value of the erdwaitme property .
8281	Sets the value of the solarheets property .
8282	Sets the value of the pelleSegment property .
8283	Sets the value of the gas property .
8284	Sets the value of the oel property .
8285	Sets the value of the fernwerme property .
8286	Sets the value of the stromlement property .
8287	Sets the value of the kohle property .
8288	Creates a random string .
8289	Generates a random string of letters .
8290	Creates a random numeric string .
8291	Gets the wennntCategory property .
8292	Sets the value of the BENTZER property .
8293	Sets the value of the object property .
8294	Gets the value of the feed property .
8295	Sets the value of the mob property .
8296	Gets the value of the serviceleists property .
8297	Sets the value of the subAdministrativeArea property .
8298	Sets the value of the city property .
8299	Sets the value of the locality property .
8300	Downgrades the document to previous version .
8301	Upgrade the document version .
8302	Sets the value of the landscapeTyping property .
8303	Gets the value of the field property .
8304	Upgrade the document version .
8305	Gets the value of the adType property .
8306	Sets the value of the playground property .
8307	Sets the value of the Placement property .
8308	Gets the value of the DatenVerkabelings property .
8309	Gets the value of the kliminBundle property .
8310	Gets the value of the image property .
8311	Sets the value of the priceType property .
8312	Sets the value of the newDevelopmentAvailability property .
8313	Sets the value of the directions property .
8314	Sets the value of the co2 rating property .
8315	Sets the value of the energyRating property .
8316	Sets the value of the viewingDetails property .
8317	Sets the value of the propertyStatus property .
8318	Sets the value of the pictures property .
8319	Sets the value of the BEAubar attribute .
8320	Upgrade the document .
8321	Sets the value of the parkenType property .
8322	Sets the value of alter attribute .
8323	Sets the value of the freizeitment property .
8324	Sets the value of the telefonart .
8325	Sets the value of the EmailPart property .
8326	Sets the value ofForeignSalesSales property .
8327	Sets the value of the exportRentalRental property .
8328	Create a user defined simple field .
8329	Gets the value of the FehlerList property .
8330	Sets the value of the erbptung property .
8331	Gets the value of the stpSonstige property .
8332	Gets the value of the valuelist property .
8333	Sets the minDauer value .
8334	Sets the value of the zins property .
8335	Gets the value of the photo property .
8336	Sets the value of the metadata property .
8337	Sets the value of the projects property .
8338	Sets the value of the property .
8339	Downgrades the old version to the previous version .
8340	Upgrade the version from the previous version .
8341	Gets the value of theimmielie property .
8342	Gets the value of the objekt property .
8343	Gets the value of the FehlerListElements property .
8344	Gets the value of the status property .
8345	Sets the value of the SonstigeTyping property .
8346	Sets the value of the distanzz property .
8347	Gets the value of the distanzen property .
8348	Gets the value of the distanzenAsset property .
8349	Checks whether the given exception is compatible with the declared exceptions .
8350	Set bindings .
8351	Binds a namespace URI .
8352	Remove binding .
8353	Returns true if the given string contains an opening tag .
8354	Consumes the start of a comment token .
8355	Returns the first line of the comment .
8356	Returns the index of the first occurrence of the given token .
8357	Initialize logging .
8358	Start a prefix mapping .
8359	Adds an iterator to the composite iterator .
8360	Adds an option .
8361	Adds a string option .
8362	Adds an integer option .
8363	Adds a long option .
8364	Adds a double option .
8365	Adds a boolean option .
8366	Parses the command line arguments .
8367	Create a new instance of a class
8368	Invoked after access .
8369	Sets the target object .
8370	Prepare the target method .
8371	Finds the best matching method for the target class .
8372	Converts an integer into an unsigned string .
8373	Serialize an object into a byte array .
8374	Deserializes an object .
8375	Get a child element by tag name .
8376	Returns the value of the child element with the given tag name .
8377	Get all child elements of the given element .
8378	Returns true if the node matches the desired name .
8379	Returns true if the node name matches the desired names .
8380	Set size of string .
8381	Register a handle with a release listener .
8382	Adds an entry to the registry .
8383	Stops the monitoring thread .
8384	Calculate the mobile city for a mobile number
8385	Process a prefix mapping event .
8386	Add a prefix mapping .
8387	Adds a callback to the future .
8388	Parses the jar file .
8389	Returns the text color of a specific item .
8390	Sets the values of the preference .
8391	Calculates the selected color based on a scroll position .
8392	Set text size .
8393	Returns the x position of the item .
8394	Gets the intro text .
8395	Gets the name of the keyword keywords .
8396	Returns the arguments for the keyword .
8397	Returns the documentation for the given keyword .
8398	Main entry point for the remote server .
8399	Stop the remote server .
8400	Starts the remote server .
8401	Reads properties from a file .
8402	Converts the given file into a JSON object .
8403	Converts an input stream to a JSON string .
8404	Converts properties to JSON string .
8405	Converts a map of properties to a JSON string .
8406	Converts the given values into a JSON object .
8407	Converts a set of properties to an object map .
8408	Converts properties to JSON .
8409	Calculates the radius of a shadow .
8410	Creates a new OpenCspFetcher .
8411	Searches for an intermediate certificate .
8412	Executes the mojo .
8413	Read markdown files from input directory .
8414	Substitute variables in a template string .
8415	Gets the title from the raw text .
8416	Adds the title to the HTML file .
8417	Replaces all variables in the provided content with the given variables .
8418	Updates relative paths in HTML .
8419	Copies files from one directory to another .
8420	Checks whether the given path is part of the host .
8421	Wrap the content of a slider .
8422	Frees up the view .
8423	Frees the view down .
8424	Calculates the percentage of the view .
8425	Shows the view overlapping with the specified width .
8426	Creates an intent to launch the activity .
8427	Launch the Activity .
8428	Get list of todo items
8429	Get Fact sheets .
8430	Download file from response
8431	Build http client .
8432	Create an access control entity .
8433	Update data model .
8434	Create a full export
8435	Get a list of export files
8436	Specifies the host to connect to the API .
8437	Sets the API client credentials .
8438	Process a multipart upload request
8439	Get a list of Bookmarks
8440	Adds the permissions for a graph .
8441	Write the permissions for a graph .
8442	Sets the rules set for this Dataset .
8443	Closes the client .
8444	Executes a SELECT statement .
8445	Creates a Dataset graph .
8446	Limit the number of threads per process
8447	Resize a geometry to the specified size .
8448	Performs a rotate operation on the specified degrees .
8449	Set the gravity .
8450	Remove profiles from the cluster
8451	Updates the text with the specified style .
8452	Adds a source file to the image .
8453	Add an image to the job
8454	Process the command line arguments .
8455	Prints usage information about the specified target object .
8456	Extracts the TimeUnit from a string .
8457	Parse the target object .
8458	Executes a slide on the given URL .
8459	Executes the given file .
8460	Extracts all actions from a file .
8461	Sort a list of Rectangles by size .
8462	Renders template text .
8463	Get the xml file for a slide
8464	Checks whether the given mouse event is contained within the specified range .
8465	Finds the vertical overlap of a slide .
8466	Executes the operation .
8467	Executes the operation .
8468	Retrieves a file with the given name .
8469	Get or create a temporary directory .
8470	Returns a new LogValueMap with the given key and value .
8471	Log a message with a TRACE level .
8472	Log a message at TRACE level .
8473	Log a message at debug level .
8474	Log a message at debug level .
8475	Log a message at INFO level .
8476	Log a message with INFO level .
8477	Logs an info event .
8478	Log a message with WARN .
8479	Log a message with WARN level .
8480	Log a message with ERROR .
8481	Log an event with an ERROR level .
8482	Add a join point to the context .
8483	Starts the steno wrapper .
8484	Writes the given list of key - value pairs .
8485	Serialize the throwable object .
8486	Returns the log value .
8487	Replies the caller data .
8488	Encode the given value .
8489	Create a database .
8490	Remove mappings for the given position .
8491	Parse save attribute to string .
8492	Save data to object in context .
8493	Refresh sheet row from context
8494	Parse save attribute string .
8495	Get save attribute list from row
8496	get save attribute from list
8497	Sets the save object in hidden columns .
8498	Sets the save attributes for the given sheet .
8499	Set save attributes for a row .
8500	Prepare the data context for a POI cell .
8501	Format a number .
8502	Put shift attributes .
8503	Set the Workbook
8504	Replies the wrapper for the workbook .
8505	Replies the formula evaluator .
8506	Recalculates the maximum number of columns .
8507	Loads a web sheet .
8508	Loads a web sheet .
8509	Load work sheet by tab name .
8510	Exports the output file
8511	Do the save button .
8512	Process submit .
8513	Populate the component .
8514	Returns the current sheet configuration .
8515	Custom deserialization method .
8516	Gets the locale from the component s locale tag .
8517	Gets the picture .
8518	Replies the cell helper .
8519	Get pic helper .
8520	Returns the validation handler .
8521	Getter for chart helper .
8522	Converts a list of Ptggs into a list of Ptg groups .
8523	Converts a Ptg array into a new one .
8524	Converts a Ptg array to a watch list .
8525	Converts a Ptg to a single Ptg
8526	Extract a list of rows from current row mapping list
8527	Assembles the rows from the current row mapping .
8528	Fix a reference to a reference row
8529	Build a dynamic row for reftgBase
8530	Build the dynamic row for a specific area .
8531	Get the BG color for a solid color .
8532	Get the X color from a Spacer .
8533	Find the automatic fill color fill color .
8534	Get X color from scheme color
8535	Converts RGBA to XColor
8536	Get the X color for the specified index .
8537	Converts an XSS color to clr .
8538	Converts an XSSF color to a tuple of TSSC coordinates .
8539	Gets the bg color from a POI cell .
8540	Finds component name from class .
8541	Populate input attributes .
8542	Returns the attribute type of the given object .
8543	Sets a property on an object .
8544	Get the value of an object property .
8545	Set the control attributes for a POI cell .
8546	Find validation attributes for a given cell .
8547	Sets the charts for the parent cell .
8548	Sets the top sheet style .
8549	Set picture style .
8550	Initialize the charts map .
8551	Retrieves the Pie title from chart data .
8552	Sets the style for a chart .
8553	Creates a PieChart with the given data .
8554	Set the bar style .
8555	Initializes the charts map .
8556	Gets the chart id from parent .
8557	Initialize the map of anchors for the workbook .
8558	Generate a single XSSF file .
8559	Evaluates the expression .
8560	Get the full full name from a row
8561	Rebuild the upper level formula .
8562	Setup upper level formula .
8563	Builds the cell formula for a shift formula .
8564	Gather rows mapping by full name .
8565	Change index number in shift map .
8566	Change the final name of the upper level .
8567	Update index number in hidden column .
8568	Sets the full name in the hidden column .
8569	Gets the original row number in the hidden column .
8570	Set the original row number in hidden column
8571	Extract rows mapping from a shift map .
8572	Finds the rows mapping from a shift map .
8573	Finds an item in a collection .
8574	Builds the current configuration range .
8575	Checks if a row is static .
8576	Checks if a row is a static row reference .
8577	Replace expression with cell value .
8578	Index merged region .
8579	Get the list of skipped regions .
8580	Add the skip cell to the skip cell .
8581	Builds the comment comments from the SheetAliasList .
8582	Builds the comment comment from a list of tie command aliases .
8583	Builds the sheet configuration .
8584	Returns the sheet configuration for the given sheet .
8585	Build tie command from sheet configuration .
8586	Checks to see if the last cell is a blank cell .
8587	Builds a sheet .
8588	Check last row .
8589	Builds the command list based on the comment s comments .
8590	Set the parent for a child command .
8591	Checks if the command list contains any command type .
8592	Match the command in the sheet list .
8593	Copy template for tie - commands .
8594	Build command line .
8595	Process a method line .
8596	Processes a command line .
8597	Move comment to map .
8598	Creates a config command .
8599	Build attribute map .
8600	Gets the sheet configuration based on the configuration .
8601	Set the footer of a sheet configuration .
8602	Sets the body of the body .
8603	Set the header of a sheet configuration .
8604	Delete a row .
8605	Remove ranges from a shift map .
8606	Find full name list from full row .
8607	Gets the single command from the command map .
8608	Inserts empty collection in context .
8609	Delete object in context
8610	Prepares the variable data in the context .
8611	Index command range .
8612	Returns true if the given row should be added to the current row .
8613	Applies each template to each sheet .
8614	Evaluate normal cells .
8615	Evaluates the user formula .
8616	Checks if string is a user formula .
8617	Creates a comment for a given cell .
8618	Evaluate a script .
8619	Removes all rows in the given sheet starting at the given index .
8620	Remove a single row from a sheet .
8621	Removes the cached cell for the given row .
8622	Removes the rows in the body from the body .
8623	Load picture data from current page .
8624	Loads a chart from the current page .
8625	Assembles a new value .
8626	Get the cell value as string .
8627	Get the string value of the POI cell without the format
8628	Get the string value of the poi cell with the given type
8629	get cell string value with number type
8630	Set cell value .
8631	Set string value .
8632	Sets the value of a cell as boolean .
8633	Sets the value of a date .
8634	Sets the numeric value of a cell .
8635	Copy rows from source sheet to dest sheet .
8636	Copy a single row from source sheet to destination sheet .
8637	Copy a cell from source sheet to destination sheet .
8638	Copy a cell set value to a new cell .
8639	Copies cell style from source cell to destination sheet .
8640	Clones a comment from another cell .
8641	Create comment anchor .
8642	Creates or inserts a comment in a cell .
8643	Match comment settings
8644	Gets the VML drawing from a cell .
8645	Get the CT shape shape for a cell
8646	Gets the cell style from source cell .
8647	Set the poi cell .
8648	Extracts the row index from component attributes .
8649	Gets the init rows from the configuration .
8650	Get the faces row from the body row
8651	get FacesCell from body row
8652	Get the POI cell from a sheet
8653	Gets the Skey from a POI cell .
8654	Get or create a tie cell in the map .
8655	Get the current data context name .
8656	Evaluates expression
8657	Evaluates the JExpression .
8658	Custom serialization .
8659	Remove a row from a serialized row .
8660	Merge the given Map into this one .
8661	Recover all serial rows .
8662	Get the type of a chart
8663	Create a basic stroke from a string .
8664	Initialize chart data from an XSSF chart
8665	Sets up the chart data .
8666	Initialize the xss anchors map .
8667	Initializes the map of anchors for a sheet .
8668	Gets the chart id from a ctf2 cell .
8669	Get chart id from child node map .
8670	Iterate over multiple objects .
8671	Save the data in the data context .
8672	Calls the formula evaluator .
8673	Gets the POI cell with the specified tab name from the tab .
8674	Returns the FacesCell with the specified row and column index .
8675	Restore data context .
8676	Gets the last collected collection object .
8677	Determine if the full name can be restored .
8678	Start restore data context .
8679	Shift row ref .
8680	Set the first row reference .
8681	Sets the last row plus a reference to the last row .
8682	Build cells for a single row .
8683	Build single cell .
8684	Custom deserialization method .
8685	Builds the category list .
8686	Build the series list .
8687	Build chart series in list
8688	Get a list of DPTs from a list of dpts
8689	Returns the DPTt with the specified index .
8690	Set the command index map .
8691	Extract picture map from workbook .
8692	Fill all the images in the workbook .
8693	Index a picture in the map .
8694	Generate a style for a picture .
8695	Generate the style for a chart id .
8696	Get anchor size .
8697	Gets the pattern .
8698	Gets the current chart .
8699	Recover the cell from a sheet .
8700	Gets the row style .
8701	Get the cell style for the given poi cell .
8702	Get cell font color
8703	Get cell font decoration .
8704	Get the cell style
8705	Returns the column style for the given poi cell .
8706	Gets the cell alignment from the given cell style
8707	Get the vertical alignment from cell style
8708	Calculates the total height of all rows .
8709	Set the cell style .
8710	Gets the input type from cell type
8711	Gets the paths of a resource .
8712	Gets the resource as stream .
8713	Remove prefix .
8714	Evaluate input type
8715	Finds the bean with the given name .
8716	Joins the given arrays using the provided separator .
8717	Rounds the given value to the given number of places .
8718	Returns the tab type of the tab .
8719	Gets the tab style .
8720	Returns the default date pattern .
8721	Replies the decimal separator by default locale .
8722	Replies the thousand separator by default locale .
8723	Set the tie command list .
8724	Builds a list of command lists based on the configuration .
8725	Build the watch list for a given cell .
8726	Adds a row to the watch list .
8727	Checks if the given string is a command string .
8728	Parses the cell attributes of a comment .
8729	Get attribute key in map by cell name .
8730	Parses the comment for a new comment .
8731	Determine the position of the pair of brace bracket .
8732	Parses the command - line attribute string .
8733	Parses input attributes .
8734	Parse validation attributes .
8735	Splits an attribute .
8736	Parse special attributes .
8737	Process calendar attributes .
8738	Process special select item attributes .
8739	Gather special attributes .
8740	Parses the comment string and adds it to the map .
8741	Find the index of the first non - cell name in the input string .
8742	Removes all characters from the input string .
8743	Returns the column name for the Excel column
8744	Converts a string to an integer .
8745	Gets the cell with the given ID .
8746	Convert height units to pixels .
8747	Checks whether a given string is a date .
8748	Parses a date from an entry .
8749	Check if a string is numeric
8750	Returns true if the given character should be continue .
8751	Sets a property on an object
8752	Compare two cells .
8753	Checks if a config range is inside a configuration range .
8754	Clears all hidden columns in the given sheet .
8755	Delete hidden columns in row
8756	Deletes a cell from a row .
8757	Process event .
8758	Refresh the status .
8759	Validate that the given row is valid .
8760	Validate the given poi .
8761	Check the error message from the context .
8762	Validate all rules for single cell .
8763	Validate the given value .
8764	Validates the given UIComponent .
8765	Validate current page .
8766	Validate the current row in current page .
8767	Validate a single row .
8768	Refreshes the cached cells in current page .
8769	Refreshes the cached cells in the row .
8770	Set the submit mode in view map .
8771	Validate current working sheet .
8772	Clear the contents of this cell .
8773	Loads the header rows .
8774	Load header row without configuration tab .
8775	Fill the header cells with the max columns .
8776	Returns the style of the header column .
8777	Gets the width style .
8778	Loads the header row with the configuration tab .
8779	Get column width .
8780	Clear workbook .
8781	Initialize the tabs .
8782	Loads the data .
8783	Refreshes the data .
8784	Refresh data for a row .
8785	Refreshes data for cell .
8786	Finds the tab index with the given name .
8787	Loads a work sheet .
8788	Prepares the work sheet for the given tab name .
8789	Set the first data table .
8790	Save the current state of the view map
8791	Set the row info .
8792	Load body rows .
8793	Assemble the body row .
8794	Refresh a CachedCell .
8795	Process a refresh cell .
8796	Create dynamic columns .
8797	Add a repeat row to the tab .
8798	Refresh body rows in the body .
8799	Sets the unaved state of the request .
8800	Returns the status of the view .
8801	Finds the common constructor for the given type .
8802	Write input stream to output stream .
8803	Writes a long .
8804	Write a string .
8805	Sets the converted stats tag .
8806	Adds a bitmap to the result .
8807	Add a file descriptor .
8808	Remove a parameter by its name .
8809	Add a header to the request .
8810	Clear the result .
8811	Call play .
8812	Call stop service .
8813	Bind to the stream .
8814	Unbinds the service .
8815	Drops listener .
8816	Store the remote image to disk .
8817	Transfer stream to string .
8818	Converts an InputStream to a UTF - 8 encoded String .
8819	Sends the content to the output stream .
8820	Returns the number of available bytes .
8821	Closes the underlying stream .
8822	Reads an element from the stream .
8823	Resets the stream .
8824	Sends the start part boundary .
8825	Send the disposition header .
8826	Send the content type header .
8827	Send transfer encoding header .
8828	Send the end of the header .
8829	Sends the end of the stream .
8830	Send a part array to the output stream .
8831	Calculates the length of the given parts .
8832	Checks if the given URI is a redirect URI .
8833	Sends a 304 response to the browser .
8834	Sets the date header .
8835	Sets the date and cache headers .
8836	Sets the content type header for the given file .
8837	Close the channel .
8838	Sends the disposition header to the given stream .
8839	Send data to the stream .
8840	Installs the cache .
8841	Gets the working directory .
8842	Retrieves a cache entry .
8843	Creates an input stream for the entry .
8844	Resets the bitmap .
8845	Gets the websocket context .
8846	Validate keystore .
8847	Replaces the current scale type .
8848	Stop listening to WiFi providers .
8849	Returns a PendingIntent with the specified request builder .
8850	Disconnects the given connection .
8851	Bind the service to the Goro service .
8852	Unbind the service .
8853	Notify listeners that the view has changed .
8854	Called when a channel is open .
8855	On accept data .
8856	This method is called when the context is reset .
8857	Waits for the loader to complete .
8858	Sets the text or hide the text .
8859	Hide soft input from textView
8860	Show soft input .
8861	Toggle soft input from textView
8862	Returns the width of the pixels in pixels .
8863	Called when an exception occurs .
8864	Clears the cache for the specified url .
8865	Populate image .
8866	Cancel image loading
8867	Create an image consumer
8868	Sets the image result .
8869	Sets the loading image
8870	Start a new image loader task .
8871	Adds a bitmap to the memory cache .
8872	Releases a buffer .
8873	Add the request properties to the URL connection .
8874	Add a parameter to the request .
8875	Try to connect to the core .
8876	Returns the MD5 hash of the given text .
8877	Returns the String identifying the given value
8878	Returns the String identifying the given CUblas_result
8879	Throws a CudaException with the given result code .
8880	Throw a CudaException with the result of the CUBLAS
8881	Adds a lexeme .
8882	Adds the end of the given id .
8883	Get the estimated estimate for this word form .
8884	Print the description of this object .
8885	Verify and set the kamols attribute .
8886	Convert an attribute values to KAML markup .
8887	Validate and set the value of the feature .
8888	Removes all symbols from a tag .
8889	Gets the metrics .
8890	Returns the query string .
8891	Creates a list of metric data .
8892	Parses JSON string .
8893	Returns the connection configuration .
8894	Perform the data point
8895	Creates a generic code list .
8896	Creates a generic code list document .
8897	Creates a new GC4ColumnSetDocument .
8898	Creates a generic code list .
8899	Creates a generic code list document .
8900	Creates a new GC10 column set .
8901	Get the ID of the passed object .
8902	Get the value of the passed column .
8903	Get the column with the passed ID
8904	Get all key IDs in the passed column set
8905	Get the Key with the passed ID
8906	Check if the passed column is a key column
8907	Create a column .
8908	Create a Key object .
8909	Set the number of lines to skip .
8910	Add a column .
8911	Creates a generic code list .
8912	Create a new GC4 code list document .
8913	Create a new GC4 column set .
8914	Creates a new GC10 code list .
8915	Creates a GC10 code list .
8916	Create a GC10 column set .
8917	Creates a generic code list .
8918	Create a generic CodeListValidator .
8919	Create a validator for GC4 .
8920	Creates a new GC10 code list .
8921	Creates a new GC10 code list .
8922	Create a validator for GC10 columns .
8923	Send appFeedback to server
8924	Set the context .
8925	Get the current log level .
8926	Get capture of current thread
8927	Sets the maximum number of bytes that should be logged in .
8928	Appends metadata to a JSON object .
8929	Appends the stack metadata to the JSON object .
8930	Creates a JSONObject with the given information .
8931	Log the current location
8932	Sets user identity .
8933	Reads the contents of the file into a byte array .
8934	Request location updates .
8935	Size of the specified region .
8936	Size of the given region .
8937	Dumps the contents of a region to a local region .
8938	Reads a snapshot record .
8939	Dumps the contents of the stream to a PrintWriter .
8940	Returns the time - stamps for the specified index .
8941	Convert a file to chart
8942	Get a pool for a given JMX server .
8943	Get the pool for the given jmx .
8944	Checks if a region is already existing .
8945	Get a member by name
8946	List the host names .
8947	Look up a network host .
8948	Checks if data is an error and send it to the resultSender .
8949	Execute the given function .
8950	Flatten a collection of objects .
8951	Queries a region function .
8952	Creates a cache listener for after put .
8953	Creates a new cache listener for after deletion .
8954	Handle exception .
8955	Gets the onRegionFilter property .
8956	Execute the export file .
8957	List the host names .
8958	Execute a region on a region
8959	Get the name of the application .
8960	Construct security .
8961	Get a region by name .
8962	Get a region from client cache .
8963	Constructs a comparison between two checksum maps .
8964	Checks to see if the next index should be inserted .
8965	Closes the underlying stream .
8966	Dumps the stats files from a directory .
8967	Entry point for testing
8968	Attempt to reconnect the JMX .
8969	Stop the members on a host
8970	Shutdown a member .
8971	Shut down the JMX system .
8972	Shut down a redundancy zone .
8973	Store a pagination map .
8974	Reads all the results of a page .
8975	Imports a region .
8976	Checks that the remote locators and locators are equal .
8977	Executes the checkSum map .
8978	Build the check sum map .
8979	Return value of given column .
8980	Returns true if the given TypeMirror represents a type .
8981	Serialize an object to a byte array .
8982	Deserialize the given byte array .
8983	Creates an instance of the given class .
8984	Check for table id .
8985	Checks if the given column element is a serializable field .
8986	Checks whether the given element is a super type .
8987	Returns the schema of the table .
8988	Writes java . util .
8989	Emits getId .
8990	Returns the query as observable .
8991	Checks that the given column name matches the column name .
8992	Returns the value of the given string or the given default if it is null .
8993	Capitalizes the given string .
8994	Returns true if the given TypeMirror represents the given TypeMirror .
8995	Return a new Builder for descending order
8996	Reads the temperature from the device .
8997	Returns the type of the given type .
8998	Prints a message
8999	Prints an ERROR message
9000	Gets the list of icon fonts .
9001	Gets all the icons .
9002	Creates the SldEditorLayout .
9003	Gets the background decoration .
9004	Calculate the power of a double .
9005	Set the column values .
9006	Calculate power of a BigDecimal .
9007	Calculates the root root of a given index .
9008	Expand a BigDecimal .
9009	Computes the ln number of the given BigDecimal .
9010	Performs a new Newton Newton .
9011	Computes the magnitude of a BigDecimal .
9012	Calculates the arctrotate of a BigDecimal .
9013	Calculates the square square of a BigDecimal .
9014	Prints the pi part of the pi string .
9015	Format the given time as a string .
9016	Set limits .
9017	Put a new float .
9018	Prints the matrix to stdout .
9019	Add a complex number to this complex .
9020	Subtract a complex number .
9021	Multiply two complex numbers .
9022	Divide two complex numbers .
9023	Set the matrix .
9024	Get a row of this matrix .
9025	Get a column from this matrix .
9026	Set the values of this matrix .
9027	Transpose this matrix .
9028	Add another matrix to this matrix .
9029	Subtract this matrix from another matrix .
9030	Multiply this matrix by a value .
9031	Multiply this matrix by another matrix .
9032	Prints a matrix to the standard output stream .
9033	Set the image resource .
9034	Calculate coefficients .
9035	Compute the next position .
9036	Resets this Sld .
9037	Converts a style descriptor into an XML representation .
9038	Create a style descriptor from the given rawSld object .
9039	Validates the given layer descriptor .
9040	Validate the given rawSld .
9041	Compute the area of a given point
9042	Set the values of this matrix .
9043	Set the values of this matrix .
9044	Returns the inverse of this matrix .
9045	Compute the determinant .
9046	Returns the square of the matrix .
9047	Solve x = b
9048	Prints the matrix decomposition of the matrix .
9049	Performs forward elimination .
9050	Computes the forward substitution vector .
9051	Computes the back - substitution of this matrix .
9052	Performs a Gaussian decomposition .
9053	Converts a square matrix into a square matrix .
9054	Compute the nextonnetein .
9055	Do iteration procedure .
9056	Compute the next position .
9057	Check the current position .
9058	Compute the next position .
9059	Check if two points are equal
9060	Add addend to sum .
9061	Multiply two integers .
9062	Raises a power of a complex number .
9063	Do iteration procedure .
9064	Get the sld manager .
9065	To char array .
9066	Decompose the sign .
9067	Prints this object to the given PrintStream .
9068	Validates that the biased exponent value is greater than 0 .
9069	Validates that the float exponent value is unbiased .
9070	Throws an exception if the specified exponent is negative .
9071	Validate double exponent .
9072	Create a new SldGwt service .
9073	Returns the next random value .
9074	Get the next random value .
9075	Compute the next random ratio .
9076	Returns true if the prime is positive false otherwise .
9077	Returns the set of random factors for a given pn .
9078	Do iteration procedure .
9079	Compute the next position .
9080	Check the current position .
9081	Set the JavaFX application .
9082	Sets the next configuration file .
9083	Sets the default configuration .
9084	Initialize the FXML loader .
9085	Sets the latlng .
9086	Extract the host port pair from the service instance .
9087	Gets the applicable attribute definition .
9088	Evaluate and return whether the given attribute is applicable .
9089	Sanitize the given string .
9090	Sets the address .
9091	Add a map of components to the request .
9092	Query the names of the services .
9093	Query the instances by name .
9094	Get all collaborators
9095	Get the meta data for decimal .
9096	Change password for logged in user
9097	Get all users .
9098	Get gravatar for email address
9099	Get gravatar for a user
9100	Populate from Elasticsearch json object .
9101	Returns the Elasticsearch field type .
9102	Create a flow step .
9103	Update a flow step .
9104	Get flow step by id
9105	Get a flow step by step .
9106	Get all steps by flow
9107	Delete a flow step .
9108	Force a flow step .
9109	Populate the form fields .
9110	Close the connection
9111	Handle incoming message .
9112	Indicates that the connection is closed .
9113	Get the quote messages from the return value
9114	Get a list of personal inventory items .
9115	Create a new TableRecordRecord .
9116	Delete a form container .
9117	Get the form flow history
9118	Get the form and field history .
9119	Get the most recent form and field history .
9120	Locks the form container .
9121	Unlock a form container .
9122	Unlocks a form container .
9123	Map the container to the form container .
9124	Convert a string to a list of roles
9125	Create a form definition .
9126	Update a form definition .
9127	Get a form definition by id .
9128	Get a form definition by name .
9129	Returns a list of all form by logged in user .
9130	Delete a form definition .
9131	Get storage key from form definition .
9132	Initializes the XMemcachedClient .
9133	Shut down the cache .
9134	Converts to a long .
9135	Convert a PDF document to a PDF file .
9136	Get the field values for the formId param .
9137	Create a flow step rule .
9138	Create a flow step rule .
9139	Create a flow step rule .
9140	Update a flow step rule .
9141	Update flowStepRule
9142	Update flow step rule .
9143	Move flow step entry rule .
9144	Move the flow step entry rule down .
9145	Delete a flow step rule .
9146	Delete flow step rule
9147	Delete a flow step rule
9148	Initializes the authentication session .
9149	Get all user queries .
9150	Get a list of all roles .
9151	Get the service ticket as an upper - case hex string .
9152	Create a text field masked by the user
9153	Create a text barcode field .
9154	Create a field spinner .
9155	Create a field slider .
9156	Create a field table .
9157	Update a text field mask
9158	Updates the text barcode .
9159	Update the decimal spinner spinner .
9160	Update the decimal slider parameter .
9161	Update field table .
9162	Get a field by name .
9163	Get the form fields by form name and criteria .
9164	Get fields by form typeId and id .
9165	Delete a field .
9166	Force delete field .
9167	Get table meta data .
9168	Update field value .
9169	Gets or creates an existing index .
9170	Create a flow .
9171	Update a flow .
9172	Get flow by id
9173	Get a flow by name
9174	Delete a flow .
9175	Force a flow .
9176	Update global field value .
9177	Get global field values
9178	Get the form definition id and title .
9179	Decrypt data packet .
9180	Close and clean up the connection .
9181	Initialize a new request .
9182	Get message message message .
9183	Create admin user
9184	Gets an access token .
9185	Gets user profile info .
9186	Executes the POST body and returns the response body .
9187	Execute the form .
9188	Gets the response handler .
9189	Returns true if the connection is valid
9190	Get the closeable HTTP client .
9191	Determine the path to the user trust store .
9192	Closes the connection .
9193	Get the flow items for a given view
9194	Send a form to a flow
9195	On close .
9196	Handles a message request .
9197	Send a message to the client .
9198	Send a message to the remote endpoint .
9199	Closes the user session .
9200	Executes a native SQL query .
9201	Request a license
9202	Apply license
9203	Creates a plain text field .
9204	Creates a paragraph text .
9205	Creates a field in a paragraph text .
9206	Creates a multi choice select field .
9207	Creates a date - time field .
9208	Updates a field in a route .
9209	Updates the paragraph text for a specific route .
9210	Updates a field date and time .
9211	Updates the field decimal .
9212	Update field value .
9213	Creates a new field value .
9214	Get configuration by key
9215	Get a list of all configurations .
9216	Create an attachment .
9217	Get an attachment by id .
9218	Delete an attachment .
9219	Force delete attachment .
9220	Parses a jar file .
9221	Sets the class loader .
9222	Throws an exception if the rule is not a valid XML schema .
9223	Throws an exception if the schema is not a valid schema .
9224	Check that the simple type is present .
9225	Gets the schema node .
9226	Check that the form tag is present .
9227	Throw exception if the rule is not present .
9228	Converts the given value to the corresponding type .
9229	Create a CliInterface
9230	Create a Cli using the given options .
9231	Parses the given arguments .
9232	Parses the given arguments using the instance .
9233	Creates a url builder for the given path .
9234	Remove a footer view .
9235	Get the value of a point
9236	Calculates the gradient noise function .
9237	Calculates the 4D integer value for the given data point .
9238	Returns the noise value for the given data point .
9239	Computes the cubic interpolation of a cubic curve .
9240	Computes the SCurve of a curve
9241	Sets the new bounds .
9242	Process the CloudTrailEvent .
9243	Process event .
9244	Returns the account id of the given event .
9245	Apply rule entity to rule entity .
9246	Get the event serializer based on the input stream .
9247	Creates a file in the root folder .
9248	Creates a directory .
9249	Restores the system properties .
9250	Creates the delegate implementation .
9251	Adds an object to the collection .
9252	Sets a property .
9253	Returns the array property as array .
9254	Get the next state for the given action name .
9255	Process garbage queue .
9256	Returns the object of the specified type .
9257	Gets the parameterized type .
9258	Gets the type variable .
9259	Prints the stack trace to the given stream .
9260	Prints the stack trace to the given writer .
9261	Replace the remote stub .
9262	Run the task .
9263	Set the task .
9264	Returns true if the given task is accepted .
9265	Called when a task is rejected .
9266	Returns true if the task started .
9267	Called when a task completes .
9268	Stops the task .
9269	Get the job from the queue .
9270	Add a job to the queue .
9271	Converts a BlockingMode to BlockingMode .
9272	This method is used to read the lock .
9273	Setup the readers .
9274	Adds a reader to the catalog .
9275	Copies all mime types to a new catalog .
9276	Creates a new catalog .
9277	Loads the system catalog files .
9278	Parses a URL .
9279	Parses the list of local catalog files .
9280	Parse catalog file .
9281	Handle unknown entry .
9282	Parses all catalog entries .
9283	Resolve entity name .
9284	Resolve the catalog .
9285	Resolves a system identifier .
9286	Resolves a local URI .
9287	Resolves the catalog for the specified entity type .
9288	Converts a system identifier into an absolute URL .
9289	Normalize URI .
9290	Returns the encoded byte for the given byte .
9291	Add entry to list .
9292	Creates a SoftValueRef .
9293	Fires all registered listeners of the given type .
9294	Adds an exception to the stack .
9295	Creates the delegate list .
9296	Compares this timer to another task .
9297	Returns the address .
9298	Gets the object at the given index .
9299	Sets the object at the given index .
9300	Removes garbage collected objects from the queue .
9301	Adds a new entry type .
9302	Gets the entry type .
9303	Returns the number of entries of the specified type .
9304	Returns the argument with the given index .
9305	Set the thread class loader
9306	Swaps the queue .
9307	remove node at index
9308	Cleans up the timeout extension .
9309	Loads the specified class .
9310	Preload all protocol protocols .
9311	Creates a URL stream handler .
9312	Initialize the handler packages .
9313	Returns the value of the field .
9314	Creates a set implementation .
9315	Makes a synchronized long counter .
9316	Make a new long counter .
9317	Returns true if the current element is in the extension namespace .
9318	Adds result to the stream .
9319	Binding a name to a target object .
9320	Get object instance .
9321	Subtract string from string buffer .
9322	Splits a string into an array of strings .
9323	Joins each byte array into a single byte array .
9324	Appends the given object to the given buffer .
9325	Gets the value of the result .
9326	Creates the entry map .
9327	Gets the value associated with the specified key .
9328	Returns the value associated with the specified key .
9329	Removes the specified key from the cache .
9330	Destroys the timer .
9331	Returns a list of all keys that are currently active .
9332	Sets the resolution .
9333	Returns the entry with the specified key .
9334	Get children by tag name .
9335	Get the unique child for a given element .
9336	Get an optional child element with the specified tag name .
9337	Get the content of the element
9338	Returns the unique content of the specified element .
9339	Get the content of an optional child element .
9340	Sets the maximum size of the queue .
9341	Sets the blocking mode .
9342	Set the blocking mode .
9343	Executes the task .
9344	Resolve a system resource .
9345	Resolve the public catalog for the given public ID .
9346	Resolve an external system .
9347	Resolve an external public url .
9348	Perform a query
9349	Append vector .
9350	Resolves all local coordinate system by given system ID .
9351	Resolves a system reverse URI .
9352	Resolve all the regions of a system
9353	Resolve all local system entries
9354	Resolve all subordinate catalogs .
9355	Read catalog from file .
9356	Reads a catalog from an input stream .
9357	Connects to the underlying stream .
9358	Returns an OutputStream for writing .
9359	Compare next node .
9360	Delete from b .
9361	Returns the value associated with this header .
9362	Creates a new snapshot entry .
9363	are right .
9364	Creates a logger .
9365	Print a list of objects
9366	Returns the short name of the class .
9367	Returns the string representation of this class .
9368	Returns a list of properties .
9369	Get the property group by name .
9370	Get a constructor for the given class and value types
9371	Creates a copy of the object .
9372	Delegates object to expected type .
9373	Initializes the system properties .
9374	Update the jndi cache .
9375	Returns the set of keys included in this map .
9376	Returns a set containing all the entries in this set .
9377	Removes a property listener .
9378	Fires a property added event
9379	Fires a property removed event .
9380	Fire a property change event .
9381	Fire the property change event .
9382	Creates a fully qualified property name .
9383	Loads properties from the specified reader .
9384	Loads properties from the given class name .
9385	Get a property group by index and index
9386	Returns whether the entity is resolved .
9387	Resolves the given system ID .
9388	Resolves the system ID as a URL .
9389	Resolves a classpath resource .
9390	Sets the value of this node .
9391	Normalize a public id string .
9392	Encodes the given public id .
9393	Decodes an URID .
9394	Replaces all occurrences of oldStr with newStr
9395	Start the timer .
9396	Stops the number of runs .
9397	Makes a synchronized StopWatch .
9398	Compares this hash to another object .
9399	Generates a hashcode for the given byte array .
9400	Generates a hash code for the given array of objects .
9401	Creates the list .
9402	Sets the value of the field .
9403	Reads the next token .
9404	Initialize SimpleDateFormat .
9405	Adds a new vertex to the graph .
9406	Sets the root vertex .
9407	Removes a vertex from the graph .
9408	Depth first search .
9409	Perform a DFS spanning tree spanning tree .
9410	Finds a vertex with the given data .
9411	Finds the cycles in the graph .
9412	Normalizes the given string .
9413	Parse the given XML string into an Element .
9414	Parse the given stream and return the root element .
9415	Parse the given input source and return the root element .
9416	Create an Element from the current document .
9417	Resolve a qualified name .
9418	Copy attributes from srcElement to dest element .
9419	Check if a node has children .
9420	Get all child elements of the given node .
9421	Get the text content of the given node .
9422	Returns all child elements of the given node with the given name .
9423	Get the parent element of the given node .
9424	Add a resource to the resource holder
9425	Reads a catalog from an input stream .
9426	Read catalog from file .
9427	Get host address .
9428	Resolves the contents of a file .
9429	Sets a system property .
9430	Prints the information about the class .
9431	Produces a string representation of the given class .
9432	Strips the package name .
9433	Gets the package name .
9434	Force the primitive load .
9435	Get the primitive wrapper for the given type .
9436	Gets all interfaces of a class .
9437	Get all unique interfaces of a class
9438	Returns true if the given class is a primitive wrapper wrapper .
9439	Instantiates a new instance of the expected class .
9440	Gets the getter method .
9441	Gets the setter method .
9442	Convert parameter name to java class .
9443	Get a system property .
9444	Returns the filenames for the given property name .
9445	Consume a weak reference .
9446	Returns an iterator over the weak objects .
9447	Creates a UrlList based on the given protocol .
9448	Returns a set of all the entries in this map .
9449	Adds a bound property listener .
9450	Removes a bound property listener .
9451	Returns true if the given string is null or empty .
9452	Finds the property editor for the given type name .
9453	Registers a new editor for the given type and type .
9454	Converts the given string value to the given type .
9455	Get the context class loader
9456	Returns the application deadlock exception .
9457	Schedule a timeout .
9458	Do work .
9459	Creates a new context with the given name .
9460	Lookup object by name .
9461	Checks that the given object is an instance of the given class .
9462	Append class information .
9463	Get a transition by name
9464	Reads properties from properties file .
9465	Get the verbosity .
9466	Returns true if relative catalog is available .
9467	Get catalog files from properties file .
9468	Get catalog files .
9469	Gets the preferred preferred preference .
9470	Determines whether static catalog is used .
9471	Resolve entity .
9472	Resolves a href .
9473	Make an absolute URI .
9474	Resolves a class from an object stream .
9475	Invoke the setter method .
9476	Gets the local name of the given element .
9477	Returns the namespace URI of the given node .
9478	Returns the namespace URI of the given element .
9479	Converts an enumeration into a List .
9480	Returns an InputStream for the given filename .
9481	Loads properties from a file .
9482	Reads properties .
9483	Adds an edge .
9484	Adds an outgoing edge to this vertex .
9485	Adds an incoming edge to the vertex .
9486	Checks whether an edge has the given edge .
9487	Removes an edge from this graph .
9488	Finds the edge of the given vertex .
9489	Finds the outgoing edge .
9490	Returns the cost of this vertex s cost .
9491	Recursively jar files .
9492	Returns true if the iterator has more elements .
9493	Fires an event .
9494	Installs the JVM type provider .
9495	Recursively delete a folder .
9496	Dispatch action to FX thread
9497	Gets the action stream of the given type .
9498	Creates the file path for the given view type .
9499	Get a stream of records from a list of records .
9500	Retrieves a stream of values from the given collection .
9501	Returns a stream that contains a collection of the given values .
9502	Returns a stream of the given values .
9503	Determine if the allowed robots are allowed .
9504	Checks whether the given instruction is generated .
9505	Main entry point for the analyzer .
9506	Entry point for testing purposes .
9507	Get the sum of degree of this word .
9508	Returns the superclass arguments for the given arguments .
9509	Initializes this resource loader .
9510	Checks if data source is available .
9511	Returns an iterable of the specified type .
9512	Creates an array of objects of the given type .
9513	Returns a list of objects of the given type .
9514	Returns a collection of the given type .
9515	Creates a List containing all objects of the given class .
9516	Create a left value from the left type .
9517	Gets right type .
9518	Throws an exception if the given type is not null .
9519	Validates that the given type is valid .
9520	Static factory method for a Try .
9521	Registers a JdbcTemplate with the specified dataBase and username and password .
9522	Executes the given SQL statement .
9523	Query for rows in database .
9524	Converts this object into a boolean array .
9525	Applies an example to the query
9526	On upgrade .
9527	Backup table .
9528	Restores this table .
9529	Set empty text .
9530	Dumps the contents of the database to a CSV file .
9531	Unescapes the given string .
9532	Get a list of values from a csv row .
9533	Convert a comma - separated String into a Map
9534	Convert map to CSV string .
9535	Joins a list of strings into a single string .
9536	Join a list of strings .
9537	Reads database model from index file .
9538	Write the table to the index .
9539	Checks the id field of the entity .
9540	get base DAO model
9541	Gets the bind type .
9542	Imports a database from csv .
9543	Backup all tables .
9544	Restores all tables from a CSV file .
9545	Writes the index to the database .
9546	Creates a query .
9547	Creates a typed query .
9548	Renders the query .
9549	Delete by id
9550	Saves the given object in the database .
9551	Updates the specified object .
9552	Add a WHERE clause to the query .
9553	Add a sub - query that matches the given predicate .
9554	Returns the next active stack .
9555	Get empty context stack .
9556	Adds a plan to the plan .
9557	Select a plan .
9558	Selects a plan from the plan .
9559	Sets the plan for the given result .
9560	Returns the result at the given index .
9561	Gets the parents .
9562	Gets the children .
9563	Grows a byte array by the given increment .
9564	Creates a logger with the given name and message .
9565	Advances the body .
9566	Set the goals .
9567	Pause for user input .
9568	Initialize the thread pool size .
9569	Initializes the thread selector threads .
9570	Start thread selection threads .
9571	Shutdown the thread selection threads .
9572	Registers an extension .
9573	Resets the catalog .
9574	Loads an agent .
9575	Processes a goal .
9576	Creates all the agents in the given class catalog .
9577	Loads a class by name .
9578	Loads an extension from a class name .
9579	Compare two objects .
9580	Get usage string .
9581	Parse the command line arguments .
9582	Parse the command line argument
9583	Evaluates a query .
9584	Returns the object at the given index .
9585	Finds an object by its name .
9586	Adds an object to the list .
9587	Returns the object with the specified index .
9588	Adds an object to the queue .
9589	Removes the first element from the list .
9590	Gets the type of the given object .
9591	Returns true if the given belief matches the given query
9592	Main method for testing
9593	Converts a string to a byte array .
9594	Post a goal to the stack .
9595	Send a message to the agent
9596	Send a message to the agent
9597	Gets the goals .
9598	Creates a belief set .
9599	Adds a triple to the beliefbase .
9600	Evaluates a query .
9601	Suspend the agent
9602	Returns the belief field with the given name .
9603	Register a random Neighbours .
9604	Build random name .
9605	Main loop .
9606	Checks whether the execution stack is valid .
9607	Remove all finished agents
9608	Creates the goal for the given agent .
9609	Handles the shutdown message .
9610	Sets the agent idle .
9611	Moves the specified pin from one or more pins .
9612	Initialize the program .
9613	Wait until all pools are idle .
9614	Terminates all the agents .
9615	Returns true if all pools are idle .
9616	Returns the pool id for the given agent id .
9617	Picks the expression .
9618	Sets the expression .
9619	Create a JPA join expression
9620	Recursively find join .
9621	Finds the join for the given property .
9622	Returns true if the end is reached .
9623	Get upload stream .
9624	Handle a request .
9625	Checks if a parameter has the given name and value .
9626	Get parameter by name .
9627	Parse the content type parameters .
9628	Configure the transaction manager .
9629	Get target file .
9630	Writes the given artifact to the target file .
9631	Extracts the instance field from a managed class .
9632	Get the declared constructor for the given implementation class .
9633	Builds a string representation of the given descriptor .
9634	Returns the first method of the given method .
9635	Returns the type of a field .
9636	Get a dependency value for the given type .
9637	Persists the temporary file .
9638	Set the default link .
9639	Sets the default link template .
9640	Adds links to the response .
9641	Adds the header links to the map .
9642	Adds links to the body .
9643	Parse a link object .
9644	Get or create a new map if not already present .
9645	Adds capabilities to the request .
9646	Checks if a method is allowed .
9647	Registers processor .
9648	Register an instance factory .
9649	Register an instance processor .
9650	Register a class processor .
9651	Get an instance of the given interface class .
9652	Adds an argument to the list .
9653	Create a list of target files .
9654	Convert this object to an XML string .
9655	Initialize the generator .
9656	Checks if a file has a reference to a template .
9657	Create a template model from a reader .
9658	Create a template model from a file .
9659	Sets the request path .
9660	Get an observable from the given start index .
9661	Create an instance scope .
9662	Set a field on an object .
9663	Adds a capture appender to the given logger .
9664	Removes the specified appender .
9665	Clears the appender .
9666	Reads the content of the request .
9667	Parses the model file .
9668	Resolve all proxies .
9669	Get all files in a directory .
9670	Parse a directory .
9671	Check if the model is fully resolved .
9672	Returns all EObjects contained in a resource set .
9673	Set the model directories .
9674	Set the file extensions .
9675	Sets the model resources .
9676	Advances to the next record .
9677	Sets the parameter array to the given values .
9678	Set a Boolean parameter .
9679	Executes the given INSERT UPDATE statement .
9680	Converts a string into an object .
9681	Merge velocity template .
9682	Gets the directory .
9683	Get template directory .
9684	Writes an object to the response .
9685	Start the web UI .
9686	Configure the web window .
9687	Prints the view to the given view .
9688	Writes the given InputStream to the given OutputStream .
9689	Invokes the given method .
9690	Attaches the request .
9691	Detaches this request .
9692	Gets the cookies object .
9693	Dumps information about this request .
9694	Gets the invocation meters .
9695	Set the event stream configuration .
9696	Set the remote host .
9697	Get an event stream parameter .
9698	Remove prefix .
9699	Finds the common directory between two directories .
9700	Convert an absolute path to a relative path .
9701	Convert relative path to absolute path .
9702	Get directory depth .
9703	Dumps the error on the request .
9704	Send JSON object .
9705	Adds a param template to the model .
9706	Add parameter templates .
9707	Initialize the parameter templates .
9708	Find references to template .
9709	Sets whether the save button is enabled .
9710	Prompts the user to delete .
9711	On delete .
9712	Create a local instance .
9713	Returns a sorted array of files .
9714	Get the summary of the results .
9715	Get the summary row as a String
9716	Get sub summary for a given path
9717	Creates a new service instance .
9718	Returns the setup class .
9719	Replies the model directories .
9720	Gets the resource resources .
9721	Sets the collection of candidates .
9722	Loads the XML document from the given input stream .
9723	Invoked when an error occurs .
9724	Checks if the given formal parameters are objects .
9725	Reads JSON data from the given HTTP request .
9726	Reads JSON object from input stream .
9727	Extract the parameter value of the fit cell .
9728	Gets the value of the hints property .
9729	Checks if the request is an XHR request .
9730	Checks if the request is an Android request .
9731	Handle the incoming message .
9732	Returns all properties of the given type that are annotated with the given annotation type .
9733	Returns the annotation of the given type on the given property .
9734	Helper method to log message .
9735	Lookup a user .
9736	Determines whether the user has a parser for a specific host .
9737	Gets the managed class .
9738	Gets the managed method .
9739	This method should be called after the error has occurred .
9740	Adds a message to the cell .
9741	ResultSet object as a boolean .
9742	Returns true if the argument is a wrapper for the given class .
9743	Serialize the response .
9744	Get cookie value by name .
9745	Add a cookie .
9746	Removes a cookie by name .
9747	Get an iterator over the cookies .
9748	Returns the target file list producer .
9749	Add a field .
9750	Compiles java class .
9751	Checks whether the image matches the given token .
9752	Returns the value of the file .
9753	Ensures that the given URI is trailing .
9754	Login with the given username and password .
9755	Gets the http servlet request .
9756	Invokes the method .
9757	Execute a mutable method .
9758	Execute an immutable transaction .
9759	Get all files matching the filter .
9760	Gets the last file .
9761	Gets the concrete config type .
9762	Checks whether the given path starts with the given path .
9763	Returns the artifact factories for the given model type .
9764	Gets the managed session .
9765	Serialize the response to the output stream .
9766	Reads meta data .
9767	Handle a request .
9768	Close the statement .
9769	Close all registered event streams .
9770	Handle allowed methods
9771	Called when the blob upload is complete .
9772	Demonstrates how to delete the data .
9773	Extract column parameters .
9774	Returns the names of the command line arguments .
9775	Schedule a periodic task .
9776	Schedules a timeout task .
9777	Loads the views from the configuration .
9778	Returns the next file .
9779	Configure the application .
9780	Prints the welcome banner .
9781	Print stopped banner .
9782	Create a chameleon object
9783	Register shutdown hook
9784	Triggers the trigger .
9785	Trigger a trigger event .
9786	Insert a new FitRow and replace it with the result
9787	Gets the results .
9788	setter for score - sets
9789	getter for variants - gets
9790	setter for variants - sets
9791	getter for questionType - gets
9792	setter for questionType - sets
9793	getter for token - gets
9794	getter for depLabel - gets
9795	setter for depLabel - sets
9796	getter for semanticType - gets
9797	setter for semanticType - sets
9798	getter for sections - gets
9799	setter for sections - sets
9800	indexed getter for sections - gets an indexed value -
9801	indexed setter for sections - sets an indexed value -
9802	getter for uris - gets
9803	setter for uris - sets
9804	getter for types - gets
9805	setter for types - sets
9806	getter for targetType - gets
9807	setter for targetType - sets
9808	getter for rank - gets
9809	setter for rank - sets
9810	getter for queryString - gets
9811	setter for queryString - sets
9812	getter for candidateAnswers - gets
9813	setter for candidateAnswers - sets
9814	indexed getter for candidateAnswer - gets an indexed value -
9815	indexed setter for candidateAnswers - sets an indexed value -
9816	getter for query - gets
9817	setter for query - sets
9818	getter for hitList - gets
9819	setter for hitList - sets
9820	indexed getter for hitList - gets an indexed value -
9821	indexed setter for hitList - sets an indexed value -
9822	getter for abstractQuery - gets
9823	setter for abstractQuery - sets
9824	getter for searchId - gets
9825	setter for searchId - sets
9826	setter for docId - sets
9827	getter for offsetInSection - gets
9828	setter for offsetInSection - sets
9829	getter for offsetInSection - gets
9830	setter for offsetInSection - sets
9831	getter for beginSection - gets
9832	setter for beginSection - sets
9833	getter for endSection - gets
9834	setter for endSection - sets
9835	getter for aspects - gets
9836	setter for aspect - sets
9837	getter for triples - gets
9838	setter for triple - sets
9839	getter for sourceRelation - gets
9840	setter for sourceRelation - sets
9841	getter for subject - gets
9842	setter for subject - sets
9843	getter for predicate - gets
9844	setter for predicate - sets
9845	getter for isObjUri - gets
9846	setter for isObjUri - sets
9847	getter for operator - gets
9848	setter for operator - sets
9849	getter for operatorArgs - gets
9850	setter for operatorArgs - sets
9851	getter for concept - gets
9852	getter for score - gets
9853	getter for text - gets
9854	setter for text - sets
9855	getter for id - gets
9856	setter for id - sets
9857	getter for name - gets
9858	getter for abbreviation - gets
9859	setter for abbreviation - sets
9860	setter for concept - sets
9861	getter for variants - gets
9862	setter for variants - sets
9863	getter for namedEntityTypes - gets
9864	setter for namedEntityTypes - sets
9865	getter for conceptType - gets
9866	setter for conceptType - sets
9867	getter for occurrences - gets
9868	setter for occurrences - sets
9869	getter for concepts - gets
9870	setter for concepts - sets
9871	getter for originalText - gets
9872	setter for originalText - sets
9873	getter for arguments - gets
9874	setter for arguments - sets
9875	getter for label - gets
9876	setter for label - sets
9877	Returns the index of the next clear bit .
9878	Set the bit at the given index .
9879	Frees the given buffer .
9880	Returns a new cache value instance .
9881	Rehash a set of values .
9882	method to generate HELM2
9883	Checks if there are brackets in the annotation section .
9884	Adds the group details to the result .
9885	Convert to HELM2
9886	Adds an element to the group
9887	Main entry point for the HELM file .
9888	check if the given polymerId is valid
9889	Check the given polymer id in the connection section
9890	Checks that the connection details contains the connection information .
9891	Checks whether the group ID is valid
9892	Check if a string is repeated .
9893	method to check if a peptide has a peptide id
9894	Returns the JSON representation of the notation object
9895	method to get a single PolymerNotation object
9896	Get the current GroupingNotation
9897	Convert the HELM2 to HELM2
9898	method to generate HELM2 to HELM2
9899	Convert connection to HELM2
9900	Convert groupings to HELM2
9901	Convert annotation to HELM2
9902	method to get all polymer and group ids
9903	method to get a PolymerNotation object
9904	method to set PolymerElements
9905	method to convert the HELM2
9906	Sets the annotation .
9907	Set count .
9908	method to handle the MonomerNotation
9909	method to get the matching MonomerNotationGroupElement
9910	returns the first entity of the entity
9911	Gets the interval .
9912	method to read the HELM2 standard HELM2
9913	method to set the MonomerNotationUnit
9914	Determines the implication of the given string .
9915	Get the statistics for this worker .
9916	Creates an adi graph from a collection of edges .
9917	Create an ADi graph from a collection of nodes .
9918	Initialize the incoming paths .
9919	Returns a sorted list of nodes .
9920	Subscribes a function to listen to a pattern .
9921	Get the number of subscribers .
9922	Unsubscribe a callback pattern .
9923	Call this method .
9924	Send a return_sync operation .
9925	Polls request .
9926	Shutdown the system .
9927	If the given throwable is non - local handling .
9928	Unlock the run state .
9929	Creates a worker .
9930	Try to add a worker .
9931	Registers a worker .
9932	Unregister a worker .
9933	Attempt to signal a work queue .
9934	Run a worker .
9935	Wait for a work queue .
9936	Returns the number of times the current task has been incremented .
9937	Returns the common submitter queue .
9938	Called when external help complete .
9939	Submits a ForkJoinTask .
9940	Make a ForkJoinPool based on the common properties .
9941	Waits for this task to complete .
9942	Build a string .
9943	Get the thread pool statistics .
9944	Creates an AList with the given elements .
9945	Reverses the list .
9946	Iterates over all elements of the given iterable and returns true if the predicate evaluates to true .
9947	Applies the supplied function to the left value of the supplied iterable .
9948	Applies the supplied function to each element of the list .
9949	Pushes a task to the queue .
9950	Construct an option from nullable .
9951	Creates a new long hash map from keys and values .
9952	Creates an empty list map .
9953	Creates a list map from keys and values .
9954	Create a list map from keys and values .
9955	Returns a set of the keys contained in this map .
9956	Normalize resource name .
9957	Marshals a bound type .
9958	Returns a copy of this CharSequence .
9959	Returns a binary search for the given element .
9960	Returns a binary search for the given list of elements .
9961	Send email
9962	Sends a message to the client .
9963	Bind a route binding .
9964	Bind the given handler .
9965	Checks whether the subject has the specified role name .
9966	Returns the int value of a long .
9967	Remove duplicate string from array .
9968	Get the like% of the given value
9969	Runs the task .
9970	Login a user .
9971	Retrieves a LoginUser from the given request
9972	Gets the login user from the request .
9973	Checks if the given password matches the given salt .
9974	Saves a member in cookie cookie
9975	Generate the login key
9976	Retrieves a user from a cookie .
9977	Forward to the request .
9978	Append file separator .
9979	Gets a parameter from the request .
9980	Log a debug message .
9981	Get the caller information for a given level .
9982	Converts a char array to a simple byte array .
9983	Converts a char sequence to a simple byte array .
9984	Converts a byte array to a simple char array .
9985	Converts a char sequence to a byte array .
9986	Returns the locale data for the given code .
9987	Creates a promise that will be called when the job has finished .
9988	Crops an image .
9989	Schedules an invocation .
9990	Invoke a direct invocation .
9991	Returns the rest operations .
9992	Renders an error message .
9993	Renders a forbidden message .
9994	Process template template .
9995	Parses the current action .
9996	Renders data tables .
9997	Render empty data tables .
9998	Sets the items of the combo box .
9999	Send this request to the given web context .
10000	Returns all the providers of the given injector .
10001	Get the current method name .
10002	Compacts memory .
10003	Propagate a MetricsCollection to the global metrics collection .
10004	Encode a string .
10005	Get charset .
10006	Copy the contents of the input stream to the output stream .
10007	Copies the given input stream to the given output stream .
10008	Copies the contents of the given input stream to the given output stream .
10009	Copy the contents of the given Reader to the given Writer .
10010	Copy characters from the given reader to the given writer .
10011	Copy reader to output stream .
10012	Copies the given reader to the given output stream .
10013	Compares two input streams .
10014	Compares two Reader objects .
10015	Executes the given stages .
10016	Get the SQL for a group name .
10017	Unmarshal the given string into an object .
10018	Unzips a zip file .
10019	This method initializes a PermissionDialog
10020	Reset the dialog .
10021	Register a core value type .
10022	Returns true if the value matches the given regular expression .
10023	Checks if a string is mobile .
10024	Checks if the given string is a phone number .
10025	Checks if the given value is a birth day .
10026	Checks whether the given string is a valid URL .
10027	Checks whether the given string is a date - time .
10028	Process the http request .
10029	Encode a string to base64 .
10030	Decodes a base64 string .
10031	Converts a hex string to a byte array .
10032	Reads properties from an input stream .
10033	Reads the content of the stream and closes it .
10034	Reads the content of the file .
10035	Write data to a file .
10036	Copy a directory to target .
10037	Serializes the given XML document to a String .
10038	Get a Document from a file .
10039	Constructs a Document from the given XML string .
10040	Constructs a DOM document from an input stream .
10041	Validates an XML signature .
10042	Sign a DOM Document .
10043	Checks whether the given class is cache safe .
10044	Returns true if the given class represents a primitive array .
10045	Returns true if the given class represents a primitive wrapper array .
10046	Resolves a primitive wrapper for the given class .
10047	Returns true if the left - hand side type is assignable type .
10048	Returns true if the given value is assignable .
10049	Returns all interfaces of the given instance .
10050	Returns all interfaces of the given instance .
10051	Write properties to temp file .
10052	Returns a map containing all the variables in the given URI .
10053	Add a permission .
10054	Creates a DruidPlugin .
10055	Binds the extension class to the extension point .
10056	Returns the context of the given type .
10057	Returns the primitive for the given type .
10058	Convert the given object to the given type .
10059	Converts an object into an object type .
10060	Adds a query parameter to the request .
10061	Create a cookie by name .
10062	Adds a parameter to the session .
10063	Initialize the data source .
10064	Sets the shared variable .
10065	Set parameter .
10066	Sets the parameter to be equal to the given value .
10067	Shows a specific permission dialog .
10068	Checks whether the given values are granted .
10069	Checks whether any of the given values are allowed .
10070	Find by query .
10071	Finds the first record matching the query
10072	Checks if a model is a new model .
10073	Checks whether a method declares an exception .
10074	Process the queue .
10075	Associates the specified value with the specified key .
10076	Returns true if the given string matches the pattern .
10077	Reads the command line arguments .
10078	Gets protobuf entity .
10079	Checks if is protobuf entity .
10080	Gets all the protobuf attributes of the given class .
10081	Replies the getter for the given field .
10082	Gets the pojo setter .
10083	Gets the object mapper .
10084	Gets the JsonFactory .
10085	Convert object to json string .
10086	Sets the border borders .
10087	Retrieves a user record from the database .
10088	Copy the JMX attribute values from the target object .
10089	Copies the jmx attribute values to target object .
10090	Get a property by key .
10091	Sets a property .
10092	Adds the app to the window .
10093	Saves an access token .
10094	Gets the access token .
10095	Get the default ClassLoader
10096	Returns the URL of the resource with the given name .
10097	Returns an InputStream for the named resource .
10098	Returns a stream for the given class .
10099	Initialize the given URI .
10100	Initialize the scheme .
10101	Initialize the path .
10102	Sets the scheme .
10103	Sets the userinfo string .
10104	Set the host .
10105	Sets the port .
10106	Append the path .
10107	Set the query string .
10108	Sets the fragment of the URI .
10109	Get the URI string .
10110	Create a PreparedStatement based on an iterator .
10111	Initialize the application .
10112	Get the suffix from the file .
10113	Set the suffix .
10114	Get the clipboard contents .
10115	Set clipboard contents .
10116	Open file input stream .
10117	Loads all the services in the given class .
10118	Sets the service parameters to the operation .
10119	Gets the service parameters .
10120	Find parameterized service by id .
10121	Finds a service by its class .
10122	Parses the query string and returns the result .
10123	Returns an iterator over the elements in this buffer .
10124	Gets the encoding from xml string .
10125	Get the parent logger .
10126	Creates a proxy for a connection .
10127	Reads the authorization code from the user .
10128	Visit a package declaration .
10129	Visit a class declaration .
10130	Visit a ExecutableDeclaration .
10131	Get option by key
10132	Returns a filter that matches the given modifiers .
10133	Returns a filter that matches the given declaration .
10134	Returns a new filter that matches the given filter .
10135	Returns a new filter that matches the given filter .
10136	Returns the map as a map .
10137	Makes a private constructor .
10138	Prepare an object query .
10139	Replaces all slash characters with hyphen .
10140	Convert a byte array to a hex string .
10141	Gets the indexes of a parameter .
10142	Parse a SQL statement .
10143	Convert collection of non protobuf objects to protobuf .
10144	Sets the field value .
10145	Sets the field value .
10146	Is this file?
10147	Creates a new ResultSet instance .
10148	Map a list of expected state labels to a map of expected states .
10149	Extract the state from a list of expectations
10150	Returns the generic supertype of the given type .
10151	Polls the next request .
10152	Poll the list of polled objects .
10153	Gets the field with the specified name .
10154	Returns all declared methods of the given class .
10155	Gets the declared method .
10156	Returns all declared methods of the given class .
10157	Returns an array of all constructors that are annotated with the specified annotation class .
10158	Dumps a single byte .
10159	Returns the index of the first occurrence of the specified substring ignoring case .
10160	Removes all chars from a string .
10161	Cleans up the state .
10162	Initialize the audit object .
10163	Initialize the message queue .
10164	Initialize the password validator class .
10165	Initialize the password authenticator .
10166	Resolves the locale code for the given locale .
10167	Returns the LocaleInfo for the given code .
10168	Creates a statement for the given statement .
10169	Removes all elements from this Vector .
10170	Pushes an element onto the stack .
10171	Pop the last element from the stack .
10172	Make an input stream for this scan .
10173	Parse command line arguments .
10174	Returns true if the tokens match the pattern .
10175	Move the current position by the specified amount .
10176	Returns true if this rectangle encloses this rectangle .
10177	Returns true if the specified point is inside the specified rectangle .
10178	Computes and returns the intersection of this rectangle .
10179	Computes the union of this rectangle .
10180	Returns a new rectangle with the x - axis of this rectangle .
10181	Replaces the y - axis with the same coordinates .
10182	Returns the index of the specified column .
10183	Gets the number of elements of a row .
10184	Get the cell bounds relative to the specified location .
10185	Calculate the columns .
10186	Calculate the rows .
10187	Unwraps a throwable .
10188	The main entry point .
10189	Called when the code is updated .
10190	Copies the code buffer to a new byte buffer .
10191	Renders the given instructions .
10192	Initializes the application context .
10193	Creates a copy of this QueryParameter with the excluded parameters .
10194	Adds a child node to this node .
10195	Clears all children .
10196	Returns the next solution .
10197	Adds instructions to the WAM .
10198	Adds instructions to the parent .
10199	Property change listener .
10200	Register work panel .
10201	Updates the component flags .
10202	Creates a new BigDecimal type .
10203	Evaluates the given term .
10204	Optimize a list of WAM instructions .
10205	Compares two collections .
10206	Processes the request .
10207	Render the start tag .
10208	Renders a button .
10209	Resets this instance .
10210	Initializes the model .
10211	Gets the value associated with the specified key .
10212	Returns the index of the first occurrence of the specified key
10213	Sets the value at the given index .
10214	Removes the value associated with the specified key .
10215	Removes the value at the given index .
10216	Returns true if the specified property exists .
10217	Sets the value of the given property .
10218	Get the value of the property .
10219	Checks whether the given primitive type is assignable from the given primitive type .
10220	Initialize the getters .
10221	Returns decision tree for given state
10222	Initialize the decision values for this node .
10223	Unifies the given query and statement terms .
10224	Unify two literals .
10225	Unify a left variable .
10226	Compiles a query .
10227	Returns the number of arguments in a clause .
10228	Allocate temporary query registers .
10229	Gather the position and occurrence information for the given clause .
10230	Display a compiled predicate .
10231	Displays a compiled query .
10232	Puts a 32 - bit integer into a byte buffer .
10233	Converts a buffer to a string .
10234	Gets the label value .
10235	Sets the value of the attribute .
10236	Reads a single term .
10237	Checks if class exists .
10238	Checks if class is a subtype of a class .
10239	Checks whether the given class is a subtype of a class .
10240	Returns true if parentClass is a subtype of parentClass .
10241	Returns the class with the given name .
10242	Creates a new instance of the given class .
10243	Creates a new instance of the given constructor .
10244	Calls a method using reflection .
10245	Call a method .
10246	Calls a static method .
10247	Get a constructor
10248	Finds the set of setters for a given property
10249	Gets the transactional queue .
10250	Get transactional queue .
10251	Gets the type from an object .
10252	Resets the initial state .
10253	Returns the current state of the goal .
10254	Creates a new instance type .
10255	Add a supported time zone .
10256	Add an alternate dimension .
10257	Adds a new dimension table .
10258	Returns the set of free variables that match the given query term .
10259	Returns the set of free non anonymous variables found in the given query .
10260	Compares two search nodes .
10261	Write object to file .
10262	Reads a stream and returns it as a String .
10263	Creates a new search node .
10264	Generate the trace indent .
10265	Allocate argument registers .
10266	Returns true if the last body term is the last argument .
10267	Gets the highest attribute classification for a given property .
10268	Returns true if all examples have the same classification .
10269	Determines the best decision property to use for the given output properties .
10270	Creates a new Functor .
10271	Create a new variable with the given name .
10272	Calls the action forward with error handling .
10273	Returns the items at the specified index .
10274	Sets the drawable .
10275	Performs paint on the specified coordinates .
10276	Creates a buffered image .
10277	Creates a graphics2D object .
10278	Create a BufferedImage from the given pixel values
10279	Creates a SISurface for the given pixel values .
10280	Sets the queue search algorithm .
10281	Performs a search .
10282	Performs a search using the given startStates .
10283	Runs the parser .
10284	Gets the clause .
10285	Returns the list of terms .
10286	Read a function .
10287	List functions .
10288	Gets the argument list .
10289	Reads a variable .
10290	Parse an integer literal .
10291	Parses a Float literal .
10292	Parses a string literal .
10293	Peek and consume a directive .
10294	Interns a single operator .
10295	Initializes the built - insets .
10296	Returns the next token of the token .
10297	peek and consume the next token of the token .
10298	Binds this session to the current thread .
10299	Rolls back all enlists .
10300	Copies the iterator into targetCollection .
10301	Reserve call point .
10302	Converts the given date and time to ticks .
10303	Converts a number of ticks to a year .
10304	Returns the number of ticks with the specified number of hours
10305	Returns the number of ticks with the specified number of minutes .
10306	Returns the number of seconds with the specified seconds .
10307	Returns the ticks with the given year and the given year
10308	Returns the ticks with the specified month
10309	Returns the number of ticks with a given date
10310	Returns the millis from the given year .
10311	Returns the month of the given year .
10312	Reads a number of bytes from the source stream .
10313	Updates the entry with the specified entry .
10314	Returns the entry for the given key .
10315	Cuckulate an entry .
10316	Rehashes the table .
10317	Performs the action on the work panel .
10318	Set the next available item .
10319	Set the previous availability flag .
10320	Sets whether the task is finished .
10321	Returns an instance of the NativeMachine implementation .
10322	Returns an iterator over the set of variables .
10323	Computes the expected I value for the given probabilities .
10324	Calculates the probability distribution for a distribution .
10325	Set the number of ticks .
10326	Calls the action .
10327	Constructs a URL from a string .
10328	Get request info .
10329	Get all the headers of this page .
10330	Get the information about all cookies in the page .
10331	Get information about the request parameters .
10332	Returns information about the request scope .
10333	Returns information about the page scope .
10334	Get the current session scope .
10335	Get application scope information .
10336	Get the user principal .
10337	Writes the debug tag .
10338	Convert a property to HTML table .
10339	Performs a linear search .
10340	Set the current workflow state .
10341	Runs the search .
10342	Compares two search nodes .
10343	Updates the registered WAM internal registers .
10344	Notify all registered listeners of the given change .
10345	Removes all symbols from the given clause .
10346	Returns true if the context is in top level functor .
10347	Returns an array containing all the elements in the specified array .
10348	Sets the arguments of the operator .
10349	Gets the fixity .
10350	Determines if this is an associative .
10351	Compares two OpSymbol
10352	Invoked when a property has changed .
10353	Register workflow controller .
10354	Returns an enum attribute factory for the given class .
10355	Create a component factory .
10356	Returns the cell for the given variable .
10357	Returns true if this variable is bound .
10358	Set column attribute .
10359	Set the row attribute .
10360	Get the column attribute for a column
10361	Get the row attribute for a specific row .
10362	Internal insert method .
10363	Creates a new instance type .
10364	Creates a new type .
10365	Returns true if the given CharSequence matches the given value .
10366	Creates the initial context .
10367	Updates the registry s registers .
10368	Returns the variable name .
10369	Finds the best path for the current solution .
10370	Join two paths .
10371	Adds a block to the block map .
10372	Get properties from a resource .
10373	Set the rate .
10374	Reads a number of bytes from the source stream .
10375	Skips the specified number of bytes .
10376	Gather the expressions of a disjunction .
10377	Read an int from a byte array .
10378	Writes an int to the given byte array starting at the given offset .
10379	Write a 24 bit integer to the given byte array at the given offset .
10380	Reads a 24 bit integer from the buffer at the given offset .
10381	Read a short from a byte array .
10382	Writes a short to the given byte array at the given offset .
10383	Returns a new TreeSearchState for the given operator .
10384	Returns an iterator over all the operators in the tree .
10385	Gets the id of the attribute .
10386	Gets the label .
10387	Sets the value of the attribute .
10388	Splits a string into an array of strings .
10389	Convert an array of strings to a list
10390	Returns the camel case name of the given name .
10391	Convert the case string to upper case .
10392	get current configuration
10393	List the handlers .
10394	Resolve call point .
10395	Adds a code point to the function .
10396	Returns true if this attribute is a sub category .
10397	Returns the id of the category .
10398	Returns the value at the specified level .
10399	Gets the last value .
10400	custom serialization .
10401	Custom deserialization method .
10402	Compute the horizontal height of a given search node .
10403	Performs a modulo c .
10404	Add an error message .
10405	Handle the action error .
10406	Writes a string to the output stream .
10407	Classify the decision tree .
10408	Compares two objects .
10409	Returns an iterator over the elements of this node .
10410	Returns the integer value of the given integer value .
10411	Returns the log2 of the given integer value .
10412	Returns the log base10 value of the given integer value .
10413	Returns the integer value of the specified integer value .
10414	Returns the integer value of the specified long value .
10415	Returns the integer value of the given long value .
10416	Gets the integer count of the specified integer value .
10417	Gets the integer count of the given long value .
10418	Get the number of characters that represent the given integer value .
10419	Set the head of the fragment .
10420	Emmit the instruction list .
10421	Sets the current workflow .
10422	Evaluates the given element .
10423	Get property by key .
10424	Get a list of properties .
10425	Get key order .
10426	Creates the array properties .
10427	Sets the throttle rate .
10428	Evaluates the first number .
10429	Finds properties from the classpath .
10430	Retrieves the properties using the system property file .
10431	Get the properties using the classpath .
10432	Get properties using CWD
10433	Removes the functor from the parent .
10434	Gets the term .
10435	Sets the substitution .
10436	Creates a priority queue .
10437	Cleans up resources .
10438	Appends an event to the socket .
10439	Starts a connector .
10440	Initializes the printers .
10441	Commits the global write lock .
10442	Rollback the transaction .
10443	Request a write operation .
10444	Adds a cached write operation .
10445	Acquires a global write lock .
10446	Release the global write lock .
10447	Enlist the transactional resource .
10448	Tries to enter the given rule set node .
10449	Inserts the specified element into the queue waiting if necessary .
10450	Retrieves an element from the queue waiting up to the specified time .
10451	Puts the specified element into the queue .
10452	Inserts an element into the buffer .
10453	Returns the next object in the stream .
10454	Get the property as a boolean .
10455	Get the property as an Integer .
10456	Get a property as a Long .
10457	Create a mixin scope .
10458	Sets the visitor to visit this node .
10459	Backtrack a check node .
10460	Retrieve the code from the call .
10461	Execute the given query and extract bindings .
10462	Decodes a variable from the stack .
10463	Captures all the fields of the object .
10464	Restores all values from the given object .
10465	Get attribute .
10466	Adds an attribute to a class .
10467	Get all the fields of a class
10468	Executes the command .
10469	Inserts an object into the list .
10470	Polls the next element .
10471	Creates a new search node .
10472	Creates a priority queue .
10473	Creates a new TermWalker .
10474	Creates a new termWalker for a given unary predicate .
10475	Creates a new TermWalker .
10476	Creates a termWalker .
10477	Creates a new termWalker .
10478	Loads properties from an input stream .
10479	Reads properties from a file .
10480	Loads properties from a URL .
10481	Loads properties from pathname .
10482	Compute the grid size .
10483	Initialize the font metrics
10484	Adds a property change listener .
10485	Adds a property change listener .
10486	Remove a property change listener .
10487	Fire a property change event .
10488	Creates a new type .
10489	Performs a fade operation .
10490	Shows horizontal bar .
10491	Shows the left bar .
10492	Shows right bar .
10493	Sanitize the radio controls in the form .
10494	Wait until the specified time is satisfied .
10495	Wait until the given time expires .
10496	Executes the commands .
10497	Append classpath .
10498	Creates a new instance type .
10499	Prints the introduction of the application .
10500	Initialize the command line reader .
10501	Evaluates the given statement .
10502	Evaluates the query
10503	Gets the multi type data .
10504	Get multi type data
10505	Get the multi type data for a character
10506	Get multi type data for a short
10507	Get the multi type data for an integer .
10508	Get multi type data for long
10509	Get multi type data for float
10510	Creates a multi type data .
10511	Create a MultiTypeData object from a string
10512	Gets the multi type data .
10513	Convert a multi - type data to a single object .
10514	Put an attribute into the page context .
10515	Clear elements up to the specified key .
10516	Expands the given key .
10517	Internal insert method .
10518	Compares two search nodes .
10519	Parses a set of operators .
10520	Returns the operators that match the supplied fixity .
10521	Checks that the given candidate is one of the supplied fixities .
10522	Make a new search node .
10523	Right pad the string with the specified size .
10524	Gets the errors .
10525	Gets the options in the process .
10526	Gets the usage string .
10527	Adds all trailing pairs to the Properties object .
10528	Adds options to the given Properties object .
10529	Add an option .
10530	Takes a list of free args as a Properties object
10531	Checks that the argument matches the expected format .
10532	Compares the given iterator to the expected iterator .
10533	List the options for the stemmer .
10534	Returns the options to use for the search .
10535	Set the stemmer .
10536	Replies the actual stemmer .
10537	Returns the stem of the specified word .
10538	Runs the stemmer .
10539	Creates a new instance of float range type .
10540	Reset the state of this method .
10541	Trace an environment frame
10542	Trace the choice frame
10543	Call internal function .
10544	Compute the next stack frame .
10545	Calculates whether or not the IP address is off .
10546	trail .
10547	Uninds the path trie .
10548	Sets the trail .
10549	Unify two byte arrays .
10550	Unify a constant .
10551	Print a slot .
10552	Generate random start state .
10553	Checks whether the given state is solvable .
10554	Creates a new child state for the given operator .
10555	Returns an iterator that can be used to determine the valid operators .
10556	Pretty prints this board .
10557	Swaps the tile at the specified location .
10558	Swaps the tiles at the specified location .
10559	Convert a board string to a char list
10560	Creates a new state from a character list .
10561	Converts a log record into a log4j message .
10562	Convert a log4j level to an output stream .
10563	Adds an element to the queue .
10564	Adds an element to the queue .
10565	Increments the size of a record .
10566	Decrements the size of a record .
10567	Signals the signal that the size is equal to the low water threshold .
10568	Returns an enumeration of the names of the specified name .
10569	Lists the bindings for the specified name .
10570	Adds a property to the environment .
10571	Removes a property from this environment .
10572	Run GC until running .
10573	Minimal literal
10574	Resolve mixin .
10575	Push a variable reference .
10576	Sets the maximum height of a row .
10577	Update the maximum width of a column
10578	Calls the action on the page form .
10579	Compute the heuristic search node .
10580	Executes the action forward .
10581	Substitute built in clause .
10582	Initialise symbol table .
10583	Perform a top level check .
10584	Returns a string representation of this list .
10585	Evaluates whether two numbers are equal .
10586	Signal that the application is running .
10587	Signal that the server is terminating .
10588	Notify that the server is running .
10589	Inserts the specified element into the list .
10590	Returns the next log2 of n .
10591	Updates the minimum node .
10592	Compares two nodes .
10593	Inserts two nodes .
10594	Restart the cache .
10595	Returns the set of all elements matching the given method .
10596	Returns the bag of objects that match the given method
10597	Find all the solution in the given method .
10598	Returns the next element in the sequence .
10599	Restore the values from an object .
10600	Gets the value of the property .
10601	Adds a multi type data .
10602	Put a value into the context .
10603	capture properties
10604	Removes the element from the list .
10605	Convert modifiers to string .
10606	Converts a string into an integer .
10607	Parse a string into a Date object .
10608	Checks if a given string is a date .
10609	Checks if the given string is a time .
10610	Checks if a given string is a date time .
10611	Get a TokenSource for the given string .
10612	Get a TokenSource for a file .
10613	Returns a token source for the given input stream .
10614	Determine whether the given instruction is constant .
10615	Returns true if the given instruction is a void variable .
10616	Checks if the given instruction is non - argument .
10617	Returns the children of this clause .
10618	Returns the argument at the given index .
10619	Returns the children of this node .
10620	Returns a string representation of the arguments .
10621	Retrieve the summary .
10622	Retrieves records from the database .
10623	Executes the query .
10624	Emmit the given code to the mnemonic .
10625	Sets the basic types .
10626	Parse input stream .
10627	Prints a variable binding .
10628	Expands the result set to map .
10629	Runs the stream .
10630	Reads the stream .
10631	Returns the current time .
10632	Calculates the current time .
10633	Update the metadata for a playlist .
10634	Update the playlist information
10635	Render final output .
10636	Handles a resource request .
10637	Handles an event request .
10638	Fires a start music request .
10639	Initialize the packet .
10640	Start the connection .
10641	Shuts down the connection .
10642	Resets the parser .
10643	Process all Packet packets .
10644	Process a packet .
10645	Sets the option .
10646	Creates a new Chat object with the specified JID .
10647	Internalize this object .
10648	Resets the content .
10649	Sets the specified property to the content .
10650	Adds a filter to the packet .
10651	Process file upload .
10652	Resets all stored properties .
10653	Initializes the stream writer .
10654	Send a packet to the server .
10655	Get the next packet .
10656	Open stream .
10657	Returns all available informations .
10658	Returns true if the descriptor contains the specified descriptor .
10659	Add a callback to the event cycle .
10660	Shuts down the executor .
10661	Compares two files .
10662	Clean the ByteBuffer .
10663	Validate entry .
10664	Mask null .
10665	Compare two objects .
10666	Returns the entry associated with the specified key .
10667	Resizes the table to a new capacity .
10668	Inserts the given map into this map .
10669	Removes the value associated with the specified key .
10670	Removes the entry for the given key .
10671	Removes an object from the map .
10672	Adds an entry to the hash table .
10673	Creates delegate map .
10674	Encode binary attribute .
10675	Converts a byte array into a hexadecimal string .
10676	Encode data to base64 .
10677	Encodes a byte array into a base64 string .
10678	Iterate over the collection .
10679	set the current track selector
10680	Set the progress controller .
10681	Set the playback player controller .
10682	Set the controller to change the volume .
10683	Broadcast the list of available playlists .
10684	Handle command resources .
10685	Handle a volume change .
10686	Handle jump progress .
10687	Handle select track .
10688	Get thread cache by name .
10689	Get request cache .
10690	Gets the alt field .
10691	Gets the filtered map .
10692	Returns the shard path for the given id .
10693	Adapts a SessionAdaptable to a SessionAdaptable .
10694	Invoke a method on the target object .
10695	Deletes the content of the given content .
10696	Updates an entity .
10697	Sets the ping interval .
10698	Schedules the ping server task .
10699	Add all the given options .
10700	Returns true if the option has the specified option
10701	Parse the command line arguments .
10702	Prints usage information for the given application .
10703	Parse the command line arguments .
10704	Initializes the connection .
10705	Send a handshake message .
10706	Returns the compression handler if supported .
10707	Request stream compression
10708	Start stream compression .
10709	Notify listeners that a connection has closed .
10710	Notifies all registered listeners that a connection has been successful .
10711	Registers a new SASLMechanism .
10712	Gets the registered SASLMechanism .
10713	get output plugin behavior
10714	Logs an INFO message and exception .
10715	Logs an error with the given message and exception .
10716	Log a message with the given message and exception .
10717	Create a start event .
10718	Creates a start event .
10719	Notify all listeners of the given string .
10720	Returns true if the given resource is present in this provider .
10721	Returns true if all resources contained within the given source .
10722	Checks if a given list of resources is available .
10723	Provide all resources with the given IDs .
10724	Get cached data .
10725	Returns the cache key for the given key .
10726	Mark the given key as deleted .
10727	Put a cached value into the cache .
10728	Get the CF locations .
10729	Includes the given file .
10730	Includes the given jar file .
10731	Add a SASLMechMech .
10732	Add a list of SASLMechs to the configuration .
10733	Creates the debug information .
10734	Initialize the system post processor .
10735	Register standard events .
10736	Registers an event listener .
10737	Registers an event ID .
10738	Perform the write operation .
10739	Unregisters an event ID .
10740	Checks whether an event can run .
10741	Creates a new DseSession .
10742	Create a player error .
10743	Start playing the player .
10744	Stop playing music .
10745	Executes a command .
10746	Create a playlist request .
10747	Creates a playlist answer from a playlist .
10748	Appends post fix .
10749	Adds a query parameter to the URL .
10750	Adds a query parameter to the URL .
10751	Adds a query parameter to the URL .
10752	Adds a query parameter .
10753	Get playlist from event model .
10754	Invoked when the action button is pressed .
10755	Checks whether the nakornaton is finished .
10756	Checks if a URL exists .
10757	Called when a browser button is clicked .
10758	Create an ImageIcon based on the given path and description .
10759	The main entry point
10760	Returns a new IntArray with the specified values .
10761	Exports this object to a hash map .
10762	Get the value at the given index .
10763	Get the value for the given key
10764	Returns the integer value as an integer .
10765	Returns the value as a double .
10766	Returns the value as a string .
10767	Create a command resource .
10768	Verifies that the given string is a valid command
10769	Verifies whether the command contains capabilities .
10770	Verifies whether a command is valid .
10771	Executes a batch of statements .
10772	Returns all subclasses of the given class .
10773	Get all subclasses of a class
10774	Searches the class hierarchy for the given class and location .
10775	Searches the directory for the given class .
10776	Searches the jar file for the given class .
10777	Converts this resource into a list of resources .
10778	Returns the number of elements in this map .
10779	Processes a packet .
10780	Gets volume .
10781	Error response message .
10782	Creates an error response .
10783	Checks whether an event is target .
10784	Sets whether or not the login period is enabled .
10785	Decorate a Set .
10786	Sets the name of the user .
10787	Update the state of this service .
10788	Get a collection of all groups belonging to this roster .
10789	Append RSM element .
10790	Parses RSM query element .
10791	Filters a list of objects based on the given RSM response .
10792	Creates a leave event .
10793	Reload the roster .
10794	Creates a new roster entry .
10795	Returns all entries in the roster group .
10796	Get the presence information for a user .
10797	Set offline presence .
10798	Fire roster changed event .
10799	Set the digest .
10800	Create a new resource .
10801	Creates a player request .
10802	Get the time passed in event model
10803	Register a listener for updates .
10804	Initialize the properties file .
10805	Reload the properties .
10806	Parse StreamError element .
10807	Parse the mechanism xml file .
10808	Parses the compression methods .
10809	Parses a packet extension .
10810	Decode string .
10811	Verifies whether the player is valid .
10812	Extract the playback state from a resource model .
10813	Returns the secret key for a given subdomain .
10814	Check if multiple domain is allowed
10815	Puts an entry into the cache .
10816	Gets the key set .
10817	Returns a collection of all the values contained in this object .
10818	Purge a reference .
10819	Returns the entry for the given key .
10820	Compute the hash code for the given key and value .
10821	Creates a new reference entry .
10822	Checks whether or not the event is present .
10823	Sets whether the element is present .
10824	Updates the presence resource .
10825	Delivers a message .
10826	Generate script .
10827	Initializes the output directory .
10828	Loads properties from a file .
10829	Writes a file to a file .
10830	Get progress from event model .
10831	Decorates a Synchronized Collection .
10832	Finds a set of service resolver .
10833	Get the configuration .
10834	Gets the thread pool .
10835	Create stop music .
10836	Checks whether the given eventModel is valid .
10837	Returns a DSE cluster with the given parameters .
10838	Adds a connection listener .
10839	Add a packet listener .
10840	Add a packet send listener .
10841	Fire send listeners .
10842	Adds a new packet interceptor .
10843	Notify all interceptors of the packet .
10844	Converts a string to an object .
10845	Called when a connection is lost .
10846	Returns the current thread id .
10847	Validate node .
10848	Gets the key for the given value .
10849	Gets the value at the specified index .
10850	Look up a valid node .
10851	Look up node by data and index .
10852	Compares two objects .
10853	Returns the least node at the given index .
10854	Returns the most specific node at the specified index .
10855	Returns the next node greater than the given index .
10856	Returns the most valid node at the given index .
10857	Return the lowest node at the given index .
10858	Copies color to node .
10859	Returns true if the node is red .
10860	Returns true if the node at the given index is black .
10861	Gets grand parent .
10862	Returns the parent node at the given index .
10863	Returns the right child of the given node at the given index .
10864	Returns the left child of the given node at the given index .
10865	Rotates the node at the specified index .
10866	Rotates the node at the specified index .
10867	Inserts a leaf node at the specified index .
10868	Performs red black delete .
10869	Checks that the given object is not null .
10870	Inserts a new value into the map .
10871	Returns true if the specified key exists in the current thread .
10872	Checks whether the given value is present in the current thread .
10873	Gets the value associated with the specified key .
10874	Removes the value associated with the specified key .
10875	Removes all entries from the cache .
10876	Returns the set of keys contained in this map .
10877	Returns a collection of all the values of this BidiTreeMap .
10878	Returns a set of all entries contained in this BidiTreeMap .
10879	Copies all entries from this map to another node .
10880	Delete expired entries .
10881	Removes the cache .
10882	Initialize the services .
10883	Gets a player request for a playlist .
10884	Initialize the roster store .
10885	Open the roster store .
10886	Scan a range of IPv4 addresses .
10887	Create a subnet address from the given subnet .
10888	Exports the data into a HashMap .
10889	Import a TrackInfo from a hash map .
10890	Adds all applications .
10891	Executes the application .
10892	Prints the list .
10893	Prints the usage .
10894	Entry point for testing
10895	Create a mute event .
10896	Create a mute event .
10897	Get the schema by schema name .
10898	Write lines to a file .
10899	Returns true if the job is in a jar file .
10900	Adds an option .
10901	Gets the thrift schema field .
10902	Get field by name
10903	Get the package name of a jar entry .
10904	Map content to values .
10905	Create an event listener .
10906	Sets the state of this iteration .
10907	Iterate over the supplied Collection .
10908	Perform iteration on an iterator .
10909	Get the track info from an event model .
10910	Exports this object into a HashMap .
10911	Imports a Progress object .
10912	Creates an image with the specified lines .
10913	Get an image from a URL .
10914	Sends a request to the given URL .
10915	Reverses the keys in the source map .
10916	Performs the multiplication .
10917	Start the job .
10918	Return this object to pool
10919	Creates a stopped event .
10920	Get the current track .
10921	Creates a new playlist with the specified track information .
10922	Randomly shuffle the queue .
10923	Verifies that the given capabilities are valid .
10924	Exports the contents of the queue .
10925	Escapes the given string .
10926	Invoke the SASL authentication process .
10927	Serialize this object to JSON .
10928	Runs the queue .
10929	Handles an event .
10930	Join all queues .
10931	Set the given property on this map .
10932	remove a property
10933	Adds a principal .
10934	Removes a principal .
10935	Called when the root window is closing .
10936	Called when the user has encountered a user
10937	Event handler .
10938	Returns true if the resource model is permanent .
10939	Sets the name of the roster .
10940	Returns true if the map contains the specified key .
10941	Returns true if this map contains the specified value .
10942	Adds an entry to the map .
10943	Removes all entries from this HashMap .
10944	Returns the hash value for the given key .
10945	Compares two keys .
10946	Checks whether two values are equal .
10947	Ensures the capacity of the map .
10948	Calculates the new capacity based on the proposed capacity .
10949	Creates an iterator over the entries in this map .
10950	Loads an object from the stream .
10951	Register the module
10952	Initialize AddOn .
10953	Notifies all connection listeners that a connection failed .
10954	Notify all connection listeners of the connection .
