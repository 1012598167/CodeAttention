0	NewSTM creates a new STM client
1	first returns the first item in the set .
2	cmps returns a copy of the set .
3	NewSTMRepeatable creates a new STM repeatable stream .
4	NewSTMSerializable creates a new STM .
5	NewSTMReadCommitted is a wrapper for NewStMReadCommitted .
6	NewCertPool creates a new cert pool
7	NewCert creates a new TLS certificate
8	Pause pauses the peer .
9	Resume resumes the peer .
10	pick returns a channel that will be sent to the peer .
11	post is used to post a snapshot
12	newTxnResp creates a new txnResp from a TxnRequest .
13	applyCompare returns true if the read view matches the given key value .
14	OpCompact creates a CompactOpact operation .
15	NewPriorityQueue creates a new PriorityQueue
16	Enqueue adds an item to the priority queue .
17	NewLeaderStats creates a new LeaderStats
18	Succ calculates the percentage of the FollowerStats
19	Fail marks the follower as failed .
20	delete removes the given watcher from the list .
21	startStreamWriter starts a new stream writer .
22	checkStreamSupport checks if a stream is supported
23	maybeUpdate returns true if n is updated .
24	IsPaused returns true if the progress is paused
25	needSnapshotAbort returns true if the snapshot should be aborted .
26	add adds an inflight to the buffer .
27	growBuf grows the buffer size .
28	freeTo frees the size of the buffer
29	SaveDBFrom persists the snapshot to disk .
30	DBFilePath gets the file path for a snapshot .
31	Set sets the value of a string
32	NewUniqueStringsValue creates a new UniqueStringsValue
33	UniqueStringsFromFlag returns a slice of unique strings for a given flagName .
34	UniqueStringsMapFromFlag returns a map of unique strings map from a flag set
35	Percentiles converts a slice of numeric values to a slice of percentiles .
36	VerifyBootstrap checks if the configuration is valid
37	VerifyJoinExisting checks if an existing initial cluster is joined
38	hasLocalMember checks if we have a local member
39	advertiseMatchesCluster is used to advertise a matcher
40	ReqTimeout returns the timeout for the server
41	getStatus returns the status of the raft .
42	GetDefaultHost returns the default host if not found
43	getIfaceAddr returns the netlink message for the given interface id .
44	getIfaceLink returns the link for the interface index .
45	printf command function
46	Bash - completion command
47	rPrint prints a node
48	NewLeaseRenewerCommand returns a cobra command for lease renewer
49	Read reads and returns a raftpb . Snapshot .
50	GetCipherSuite returns the cipherSuite given a string
51	post sends a POST request to the pipeline .
52	send adds a message to the raft .
53	sendHeartbeat sends a heartbeat to the raft log .
54	bcastAppend sends the progress to the raft .
55	bcastHeartbeat sends a heartbeat to the raft cluster .
56	tickElection ticks the election time .
57	tickHeartbeat ticks the heartbeat of the raft
58	stepCandidate moves the leader to the leader .
59	restore attempts to restore the snapshot from the raft .
60	advertential returns true if the raft has been promotable .
61	checkQuorumActive returns true if the raft is active .
62	increaseUncommittedSize increases the number of uncommitted entries .
63	reduceUncommittedSize reduces the number of uncommitted entries .
64	newPeriodic creates a new Periodic .
65	Pause pauses the periodic .
66	Resume resets the Periodic .
67	Lock acquires a lock
68	NewLocker returns a new sync . Locker .
69	NewFIFOScheduler returns a new fifo .
70	Schedule implements the fifo interface .
71	Stop stops the fifo .
72	NewServer returns a new instance of Server .
73	StartServe starts the gRPC server
74	Stop stops the gRPC server
75	Transport implements rpb . Transport .
76	RegisterInterruptHandler registers a new InterruptHandler
77	HandleInterrupts handles SIGINT signals .
78	OpGet returns an OpGet with given key .
79	OpDelete is used to create a Delete operation .
80	OpPut creates an op put operation .
81	OpTxn returns a copy of Txn .
82	WithFromKey returns a OpOption that sets the value of the op .
83	withTop returns a list of OpOptions with the given order .
84	Exist checks if a directory exists .
85	searchIndex returns the index of names .
86	isValidSeq checks if the given names are valid .
87	NewListener returns a new net . Listener
88	cafiles returns the list of CA files .
89	ServerConfig returns the server s configuration .
90	ClientConfig returns the client configuration for the given info .
91	newTLSKeepaliveListener returns a new net . Listener
92	applyV2Request is a mock
93	NewRoleCommand returns a cobra command for roles
94	Role add command
95	Role get command
96	Role grant command
97	Role revoke permission command
98	NewCluster creates a new cluster
99	NewClusterByConfig creates a new cluster by config
100	HTTPMembers returns a slice of members of the cluster
101	waitLeader waits for the given membership to become leader .
102	waitNoLeader waits until the node is leader .
103	isMembersEqual returns whether membs are equal to membs .
104	listenGRPC starts listening for gRPC connections .
105	NewClientV3 creates a new client v3 client
106	Clone returns a copy of this member
107	Close closes the member
108	Stop stops a member
109	checkLeaderTransition checks if the leader is in a leader .
110	Restart restarts a member
111	Terminate terminates a member
112	Metric returns the metric name .
113	InjectPartition adds the given member to the other member .
114	RecoverPartition is used to recover a member from other member .
115	NewClusterV3 creates a new ClusterV3 .
116	ParseWithDefaults is used to parse jwt options
117	Parse parses jwt options
118	Key returns the JWT Key
119	Fill Header
120	add adds a new watcher to w .
121	Watch returns a new WatchID for the given id .
122	newFileEncoder returns a new encoder for the file .
123	purgeFile is used to purge a file
124	Set satisfies the String interface .
125	NewStringsValue returns a new instance of StringsValue .
126	StringsFromFlag returns the slice of strings corresponding to the given flagSet .
127	Cluster returns cluster name .
128	NewPageWriter creates a new PageWriter .
129	watch creates a new watcher for the given key and index .
130	notify adds the given event to the history .
131	clone returns a copy of the watch .
132	isHidden returns true if the given keyPath is hidden
133	createEtcdLogFile creates etcd log file
134	runEtcd runs the etcd command .
135	stopEtcd stops etcd
136	handleSIGIT_ETCD_DATA_ANDSTOP is used to handle etcd etcd .
137	LimitListener wraps net . Listener . LimitListener .
138	allowMethod returns true if m is allowed .
139	NewWatchServer returns a new pb . WatchServer .
140	FiltersFromRequest returns a mvcc . FilterFunc that filters the request .
141	newPipelineHandler returns a new http . Handler
142	checkClusterCompatibilityFromHeader checks if the header is compatible with the local server - side header .
143	KeyExists returns true if the given key exists .
144	KeyMissing returns true if the given key is missing
145	ValidateSecureEndpoints validates all secure endpoints
146	putNewKV stores a new KV in the given key - value pair .
147	newUniqueEphemeralKey creates a new ephemeralKV .
148	NewUpdateDirCommand handles a new update - dir command .
149	Updated the command function
150	handleBackup creates the backup snapshot dir
151	saveDB saves the database to dest .
152	NewWatchCommand returns a new cobra command for watching
153	NewV3 returns a new v3 manager .
154	Save saves a snapshot
155	Status returns the status of a snapshot .
156	Restore is used to restore a snapshot
157	NewAuthStore creates a new instance of AuthStore .
158	NewTokenProvider returns a new TokenProvider
159	MendPeer implements transport . Peer .
160	removePeer removes the peer from the pipeline .
161	ActivePeers returns the number of active peers .
162	resolveTCPAddrDefault is used to resolve the default address
163	resolveTCPAddrs takes a slice of urls and returns a slice of hosts .
164	Returns true if the two URLs are equal
165	URLStringsEqual compares two urls .
166	NewLeaseCommand returns a cobra command for lease subcommands
167	NewLeaseGrantCommand returns a cobra command for lease grants
168	leaseGrantCommandFunc is used to issue a lease grant command
169	NewLeaseRevokeCommand returns a cobra command for revoke
170	leaseRevokeCommandFunc is used to revoke a revoke command
171	NewLeaseTimeToLiveCommand returns a cobra command for lease
172	lease time to live
173	NewLeaseListCommand returns a cobra command for lease list command
174	leaseListCommandFunc displays a list of Leases
175	NewLeaseKeepAliveCommand returns a cobra command for lease keep - alive
176	lease keep - alive command
177	NewAlarmCommand returns a cobra command for alarms
178	armDisarmCommandFunc is called when a command exits .
179	armListCommandFunc handles alarm list command .
180	Flags returns the flags for the Etcd .
181	EmbedConfig returns the embedg configuration for the etcd etcd server
182	PProfHandlers returns a map of HTTP handlers
183	NewBackendQuota creates a new backend quota
184	NewClusterProxy returns a new instance of ClusterServer
185	NewHandler returns a new http . Handler .
186	TimeToLiveHTTP is part of the lease . TimeToLiveHTTP interface .
187	newWatcherBatch returns a new watcherBatch with the given events .
188	add adds a new watcher to the list .
189	contains returns true if the given key contains the given key .
190	delete removes the given watcher from the map . Returns true if the watcher was deleted .
191	choose selects a set of watchers with the given curRev .
192	watcherSetByKey returns a set of watchers that match the given key .
193	Compare returns - 1 if the interval is less than or equal to c .
194	successor returns the successor of the interval node .
195	updateMax updates the maximum node in the interval node .
196	visit returns true if the interval is visited .
197	Delete removes an interval from the IntervalTree . Returns true if the interval was deleted .
198	Insert inserts an interval into the tree .
199	rotateLeft rotates the interval tree .
200	replaceParent replaces the parent of the interval tree .
201	MaxHeight returns the maximum height of the interval tree .
202	Visit is part of the IntervalTree interface .
203	find returns the nearest interval node .
204	Find returns the IntervalValue for the given interval
205	Intersects returns true if the interval tree intersects .
206	Contains returns true if the interval is contained within the interval tree .
207	Stab returns an array of IntervalValues .
208	Union returns a union of the interval tree
209	NewExactReadCloser returns an instantiated ReadCloser .
210	NewElection creates a new election .
211	ResumeElection is used to resume an election .
212	Proclaim is part of the Lease interface .
213	Resign the election to the current leader .
214	Leader returns the current leader
215	Observe implements the Event interface .
216	check panics if r is not available
217	NewExecWatchCommand returns a new exec - watch command
218	execWatchCommandFunc runs execWatchCommandFunc .
219	NewListener creates a new net . Listener .
220	NewRoundTripper creates a new RoundTripper .
221	createPostRequest creates a new http . Request
222	checkPostResponse checks if the response body is valid
223	serverVersion returns the semver version from the HTTP header .
224	checkVersionCompatibility checks if a server is compatible with localServer .
225	setPeerURLsHeader sets the peer URLs header
226	addRemoteFromRequest adds a remote to the request
227	NewKeysAPIWithPrefix returns a KeysAPI with the given prefix .
228	TTLDuration returns the TTL of the node .
229	SetPflagsFromEnv sets the flags for the given prefix .
230	FlagToEnv converts a flag to a string
231	extracts a string from a string .
232	passConfChange returns true if the entry is a config change
233	Bash - completion command
234	listEntriesType lists all entries in the raftpb . EntryType .
235	newLog creates a new LogLog with the given storage .
236	newLogWithSize returns a raftLog with the given storage .
237	findConflict finds the conflict at the given index .
238	nextEnts returns the next entry in the log .
239	allEntries returns all entries in the log .
240	slice implements LogLogger interface .
241	NewSession creates a new session
242	Close the session
243	WithTTL sets the session TTL
244	WithLease sets the lease ID .
245	addRequest adds a new request to the queue
246	recvAck returns the number of acks that have been received .
247	advance returns all pending reads from the pending map .
248	lastPendingRequestCtx returns the lastPendingRequestCtx if any .
249	Start starts the etcd server
250	start starts the snapshot - count
251	Process processes a message from the raft cluster
252	ReportSnapshot implements raft . Observer .
253	MoveLeader is part of the EtcdServer interface .
254	TransferLeadership is part of the EtcdServer interface .
255	configure implements raft . Interface .
256	sync sends a SYNC request .
257	publish publishes the local member to the cluster
258	applyEntryNormal adds an entry to the raft .
259	applyConfChange applies the given ConfChange to the cluster .
260	monitorVersions updates etcd versions .
261	goAttach runs f on the server .
262	NewRoundrobinBalanced returns a picker that wraps the given balancer .
263	Pick selects the balancer and returns the balancer .
264	NewTLSListener returns a new net . Listener .
265	acceptLoop is the main loop for accepting connections
266	SetEndpoints sets the endpoints for the group .
267	Target returns the target for endpoint .
268	Target returns the target string .
269	Build builds a new resolver .
270	Handle implements v2 . Handler
271	NewElectionCommand returns a new cobra command for election
272	nodeToMember converts a NodeExporter to a member .
273	NewTmpBackend creates a new backend .
274	newRevision creates a new revision .
275	Run starts the revision .
276	Pause pauses the revision .
277	Resume resets the revision .
278	voteRespMsgType converts a message type to a message type .
279	DescribeMessage returns the description of a message .
280	DescribeEntry returns the description of an Entry .
281	DescribeEntries returns the description of a slice of entries .
282	SetLogger sets gpclog . Logger .
283	GetLogger returns the current logger .
284	maybeFirstIndex returns the first index of the snapshot .
285	maybeLastIndex returns the last index .
286	maybeTerm returns the term for the given index .
287	Searches an array of entries .
288	SaveSnap persists the given snapshot to disk .
289	New returns a new Client .
290	NewCtxClient returns a new Client instance .
291	NewFromURL creates a new client from a given URL
292	Close closes the client
293	Endpoints returns a copy of the current list of endpoints .
294	SetEndpoints sets the list of endpoints .
295	Sync updates all members of the cluster
296	dialSetupOpts returns a set of gRPC dial options for the client .
297	Dial connects to the client with the given ep .
298	dialWithBalancer is a wrapper around gRPC . DialWithBalancer .
299	dial is used to dial a new dialer
300	WithRequireLeader returns a context with the request leader set
301	roundRobinQuorumBackoff is used to round robin .
302	isHaltErr returns true if the given error is a fatal error .
303	NewLease creates a new lease
304	IsCreate returns true if the event is create
305	Err is part of the WatchResponse interface .
306	IsProgressNotify returns true if the response is a progress notification
307	RequestProgress implements watcher .
308	nextResume returns the next resuming .
309	dispatchEvent is called when a new event is received
310	broadcastResponse sends a response to the stream .
311	unicastResponse returns true if r is a unicast response .
312	joinSubstreams joins all subc streams .
313	toPB converts WatchRequest to pb . WatchRequest .
314	toPB converts progressRequest to pb . WatchRequest .
315	Contains implements the unsafeSet interface .
316	ContainsAll returns true if the set contains all the passed values .
317	Equals returns true if two sets are equal .
318	Values returns the set s values .
319	Copy returns a copy of the set .
320	Sub returns a copy of the set with the same values removed .
321	v2MembersURL returns a url for v2 members
322	NewMigrateCommand returns a cobra command for Migrate
323	publishEntries publishes entries to the raft node .
324	openWAL opens the WAL for the raft node .
325	replayWAL reads the WAL from the raft node .
326	stop the raft node
327	NewWatchCommand returns a new cobra command for watch command
328	InitialState is part of the Storage interface .
329	SetHardState implements Storage . SetHardState .
330	Entries implements Storage .
331	Term implements Storage . Term .
332	LastIndex implements Storage . LastIndex .
333	FirstIndex implements the Storage interface .
334	Snapshot implements the Storage interface .
335	ApplySnapshot is part of the Storage interface .
336	Compact implements storage . Interface .
337	unachable marks the given url as unreachable .
338	NewEndpointCommand returns a cobra command for endpoints
339	epHealthCommandFunc runs epHealthCommandFunc .
340	NewElectCommand returns a cobra command for election
341	NewDefragCommand returns a new instance of the defrag command
342	RegisterBuilder registers a new balancer
343	Build builds a new balancer .
344	recordTransition is used to record a transition .
345	doSerialize fetches auth information from etcd .
346	send sends a response to the client .
347	post adds a watcher to the watch .
348	OriginAllowed returns true if origin is allowed .
349	IsHostWhitelisted checks if the given host is whitelisted
350	Valids returns a sorted list of valids .
351	NewSelectiveStringsValue creates a SelectiveStringsValue from an array of strings .
352	NewKV creates a new KV implementation
353	NewURLsValue returns a new URLValue .
354	URLsFromFlag returns a slice of URLs from a flag set
355	servePeers runs the etcd server .
356	NewStore creates a new store .
357	appendMarkTombstone appends the markstone mark .
358	IsDirWriteable checks if dir is writable
359	TouchDirAll creates a directory from a directory
360	CreateDirAll creates all the contents of dir .
361	ZeroToEnd seeks to the end of the file .
362	Open is part of the Pipeline interface .
363	NewRaftLoggerFromZapCore returns a raft logger from a zapcore .
364	NewConfig returns a new client configuration .
365	RegisterElectionHandler registers the http handlers for service election to mux . The handlers forward requests to the grpc endpoint over conn .
366	UpdateCapability updates the capabilities of a version .
367	NewLockCommand returns a cobra command for the lock command
368	tick ticks the raft node .
369	advanceTicks is used to advance the node .
370	NewAuthCommand returns a cobra command for auth
371	authEnableCommandFunc is used to print an auth enable command
372	authDisableCommandFunc is used to disable a command
373	RetryKVClient returns a KV client for the given Client
374	RetryLeaseClient returns a new LeaseClient .
375	RetryClusterClient returns a new ClusterClient
376	RetryMaintenanceClient returns a MaintenanceClient for the given ClientConn .
377	RetryAuthClient returns a new AuthClient .
378	NewSetDirCommand returns a new set - dir command .
379	Enter will attempt to enter the barrier
380	Leave is used to leave the barrier
381	HandleBasic is the handler for mux .
382	WriteError writes an error to the client .
383	MemberByName returns a copy of the member with the given name .
384	PeerURLs returns a sorted list of peer URLs .
385	ValidateConfigurationChange validates the configuration change
386	AddMember adds a new member to the cluster
387	RemoveMember removes a member from the cluster
388	ValidateClusterAndAssignIDs returns an error if the Raft cluster is not in the local cluster .
389	Keep increments the item at the given revision .
390	closeRequireLeader is used to close the keep - alive leader
391	resetRecv is used to reset the keep - alive state .
392	Recv keep alive
393	deadlineLoop is a long running routine that waits for a deadline .
394	Send keep alive requests
395	NewKV creates a new lease .
396	removes a lease from the lease
397	LeaseValue compares the given key and value .
398	ValueBytes returns the value of the comparison value .
399	WithRange returns a copy of the given range
400	WithPrefix returns cmp with prefix .
401	mustInt64 is like int64 but panics if val is not a int64 .
402	mustInt64orLeaseID is a helper function to convert val to int64 .
403	Next returns the next update .
404	getJournalWriteSyncer returns a write syncer .
405	newKV creates a new KV node
406	newDir creates a new directory .
407	Read implements the Node interface .
408	Write writes the value to the node .
409	List implements Node .
410	GetChild returns a child with the given name .
411	Add adds a child to the node .
412	Remove deletes a node .
413	Compare returns true if the value is equal to prevValue .
414	Clone returns a copy of this node .
415	isConnectedToQuorumSince returns true if the given time is connected to a given time .
416	isConnectedSince returns true if the given time is a connected since .
417	numConnectedSince returns the number of connected members since the given time .
418	longestConnected returns true if the tracer has been connected .
419	isTornEntry returns true if the data contains a punctuation .
420	StartMockServersOnNetwork starts a MockServers on a network
421	StartAt starts the server
422	StopAt stops the server
423	Stop stops all servers .
424	NewCheckCommand returns a cobra command for etcd cluster
425	NewCheckPerfCommand returns a cobra command for cobra
426	NewCheckDatascaleCommand returns a cobra command for check
427	NewGetCommand returns a cobra command for get commands
428	NewGetCommand returns a new get command .
429	PickPeerURL picks peer url
430	HandleMetricsHealth is the handler for ServeMux .
431	NewRemoveCommand creates a new cli . Command .
432	rm command function
433	checkIntervals returns a map of Intervals .
434	ReportEventReceived reports how many events are received .
435	RegisterKVHandler registers the http handlers for service KV to mux . The handlers forward requests to the grpc endpoint over conn .
436	RegisterWatchHandler registers the http handlers for service WatchHandler to mux . The handlers forward requests to the grpc endpoint over conn .
437	RegisterLeaseHandler registers the http handlers for service Lease to mux . The handlers forward requests to the grpc endpoint over conn .
438	RegisterClusterHandler registers the http handlers for service Cluster to mux . The handlers forward requests to the grpc endpoint over conn .
439	RegisterMaintenanceHandler registers the http handlers for service Maintenance to mux . The handlers forward requests to the grpc endpoint over conn .
440	RegisterAuthHandler registers the http handlers for service Auth to mux . The handlers forward requests to the grpc endpoint over conn .
441	startEtcd starts an etcd
442	identifyDataDirOrDie checks if a directory exists and if it does not exist .
443	openLast opens and returns a locked file .
444	getLeader sets the leader .
445	lostNotify returns a channel that will be closed when the leader is lost .
446	newGRPCProxyCommand returns a cobra command for grpc proxy
447	NewMemberCommand returns a cobra command for member subcommand
448	NewMemberAddCommand returns a new cobra command for member add command
449	NewMemberRemoveCommand returns a cobra command for member remove command
450	NewMemberUpdateCommand returns a cobra command for member update
451	NewMemberListCommand returns a new cobra command for member list command
452	memberAddCommandFunc adds a member to a member
453	memberRemoveCommandFunc handles a member remove command .
454	memberUpdateCommandFunc is part of the MemberUpdate interface
455	memberListCommandFunc is a mock
456	Open opens a wal file and returns the WAL .
457	OpenForRead opens a WAL for reading .
458	Verify checks that a snapshot is valid .
459	Close closes the WAL .
460	notify is called when an event is received .
461	Remove removes the watcher .
462	mkPathDepth returns the path depth for the given node path .
463	mkV2Node creates a NodeExtern and returns it .
464	prevKeyFromPuts returns the prevKeyValue for the response
465	NewWeightedReport returns a new Report instance
466	NewURLsMapFromStringMap creates a map from a map of strings .
467	String returns a string representation of the URLs map .
468	URLs returns a sorted list of urls .
469	parse converts a string into a map .
470	NewClientHandler creates a new etcd server handler .
471	writeKeyEvent writes an event to etcdserver
472	writeKeyError writes a key error to the client .
473	getUint64 gets uint64 from form
474	getBool get boolean from form
475	waitDeletes is used to wait for deletes
476	AddOutputPaths adds the output paths to the zap .
477	NewConfig returns a new Config with default values .
478	PeerURLsMapAndToken returns a urlmap from the given string
479	GetDNSClusterNames returns the DNS cluster names
480	checkBindURLs checks if a slice of urls is valid
481	GetCluster returns a list of nodes in the cluster
482	GetClient returns a list of SRV clients
483	GetSRVService returns the SRV service name
484	ReadDir reads a directory from the given directory .
485	compact compacts a revision .
486	Defragments the given ep .
487	NewUserCommand returns a cobra command for user subcommands
488	userAddCommandFunc is used to add a user add command
489	userGetCommandFunc is used to get a command
490	userChangePasswordCommandFunc is called when user change password .
491	addEvent adds an event to the history .
492	scan returns the event matching the given key .
493	clone returns a copy of the EventHistory .
494	openSnapshotBackend opens a snapshot backend .
495	openBackend opens a backend from the given config .
496	recoverSnapshotBackend is used to recover the raft backend .
497	NewUpdateCommand handles a new update command .
498	Update command function
499	backAndBack returns the request statistics and the last item .
500	Insert adds a RequestStats to the queue .
501	Rate implements the StatsQueue interface .
502	Clear resets the statsQueue .
503	UniqueStrings returns a slice of strings with n random values .
504	RandomStrings returns a slice of random strings .
505	IsKeyNotFound returns true if the error is a KeyNotFound error .
506	IsRoleNotFound returns true if the error is a role not found error
507	IsUserNotFound returns true if the error is a user not found error
508	JoinCluster joins a cluster
509	GetCluster returns a cluster
510	newProxyFunc is used to create a new proxy .
511	isSafeRetry returns true if err is a safe retry policy .
512	withRetryPolicy is used to set the retry policy
513	withAuthRetry is used to configure a retry option
514	withMax sets the maximum number of retries .
515	withBackoff returns an option that sets the backoff function .
516	RecvAppendReq adds a request to the server .
517	SendAppendReq adds a request to the server .
518	merge merges two buffers .
519	deleteRevKey deletes the given key .
520	isMemberBootstrapped checks if a member is bootstrapped
521	GetClusterFromRemotePeers returns a Raft cluster from the remote peers .
522	Get cluster from remote peers
523	getRemotePeerURLs returns a list of remote peer URLs .
524	getVersions returns the version information for the given Raft cluster .
525	determineClusterVersion returns the semver version of the node .
526	getVersion returns the current version of the member .
527	NewTimeoutDetector creates a new TimeoutDetector .
528	Reset resets the timer .
529	Observe implements the MonitorDetector interface .
530	NewPeerHandler returns a new http . Handler
531	put adds the key index to the store .
532	tombstone adds a tombstone to the store .
533	get returns a modified revision for the given key index .
534	Since returns the revision since the given revision .
535	keep adds an item to the list if it exists .
536	findGeneration returns the generation with the given rev .
537	cancelWatcher cancels the watcher .
538	syncWatchersLoop is called when a watcher is received .
539	syncVictimsLoop is a long running routine to sync the victims from the store .
540	moveVictims moves all victims from the store .
541	kvsToEvents takes a list of keys and converts them to mvs . EventValue .
542	notify sends a notification to the watcher .
543	isOpFuncCalled returns true if the given opfunc is a func function .
544	UnsafePut marks a bucket as unsafe put .
545	UnsafeSeqPut is part of the batch . Put interface .
546	UnsafeRange implements Backend .
547	UnsafeDelete removes a bucket from the database .
548	UnsafeForEach is a helper function for UnsafeForEach .
549	Commit marks the transaction as committed .
550	CommitAndStop commits the transaction and commits the transaction .
551	Renew renews the lease with the given id .
552	Attach adds a lease to the LeaseID .
553	revokeExpiredLeases revokes the LeaseRate .
554	checkpointScheduledLeases checks if the LeaseCheckpoints are scheduled .
555	expireExists returns the lease if it exists .
556	findExpiredLeases returns a slice of Leases that are expired .
557	refresh updates the expiry time .
558	keep sets the lease s expiry time .
559	Keys returns the keys of the lease set .
560	Remaining returns the duration of the lease .
561	NewCompactionCommand returns a cobra command for compaction
562	compactionCommandFunc executes the compaction command .
563	NewPutCommand returns cobra command for put command
564	putCommandFunc is used to put a command
565	NewHandler returns a new http . Handler .
566	NewReadonlyHandler returns a new http . Handler
567	NewSetCommand returns a new set command
568	setCommandFunc sets command function .
569	waitOnLastRev waits for the given revision to be updated
570	GetDefaultInterfaces returns the default host .
571	NewSnapshotCommand returns a cobra command for etcd snapshots
572	NewMoveLeaderCommand returns a cobra command for moving leadership
573	transferLeadershipCommandFunc is used to transfer a leader command to a leader .
574	OpenDir opens a directory at the given path .
575	NewRemoveDirCommand returns a new rmdir command .
576	rdirCommandFunc is the handler for rmir command
577	NewDelCommand returns a cobra command for delete commands
578	delCommandFunc deletes the given command .
579	NewExpectWithEnv creates a new expectation process .
580	NewExpectWithEnv creates a new ExpectProcess .
581	ExpectFunc waits for the given function to be executed .
582	Expect expects a string
583	Count returns the number of expected processes .
584	Signal sends a signal to the process
585	keyFunc returns a string representation of a RangeRequest .
586	Add adds a RangeRequest to the cache .
587	Get retrieves a RangeRequest from the cache .
588	Invalidate marks the endkey as invalid .
589	Compact sets the current revision .
590	NewUniqueURLsWithExceptions creates a new UniqueURLs with the given exceptions .
591	UniqueURLsFromFlag returns a slice of unique URLs corresponding to the given flagset .
592	UniqueURLsMapFromFlag returns a map of unique urlsFlagName
593	Hold unlocks the barrier
594	Release releases the barrier
595	Wait blocks until the barrier has completed .
596	NewLockRacerCommand returns a cobra command for LockRacer
597	EmissionsTimeout returns the election timeout .
598	DialEtcdGRPCServer returns a gRPC client connection to the etcd server
599	CreateEtcdClientConfig creates etcd client configuration
600	CreateEtcdClient creates a new etcd client
601	CheckCompact checks if the given revision is compacted
602	Defrag implements the Etcd interface .
603	RevHash returns the revision hash of the member .
604	Rev implements the Etcd interface .
605	Compact implements the Member interface .
606	IsLeader returns true if this Member is a leader
607	WriteHealthKey writes health key to etcd
608	SaveSnapshot saves a snapshot
609	RestoreSnapshot restores the snapshot
610	NewWatcher creates a new watcher
611	NewRawNode creates a new RawNode .
612	Campaign campaigns the node .
613	Propose implements the Node interface .
614	ProposeConfChange implements the Node interface for RawNode .
615	ApplyConfChange applies the given ConfChange to the node .
616	Step is part of the RawNode interface .
617	Ready returns the ready state of the node .
618	WithProgress adds the progress to the node .
619	ReportUnreachable reports the unreachable element .
620	ReportSnapshot implements the Observer interface .
621	TransferLeader implements the Node interface for RawNode .
622	ReadIndex implements the interface for RawNode .
623	printcURL is used to print a CURL command
624	StartNode starts a new node
625	RestartNode restarts a node .
626	Tick implements the tickc interface .
627	MustSync returns true ifst is a sync .
628	NewGRPC17Health creates a new GRPC17Health .
629	NeedUpdate returns true if we need to update the health
630	dflSignal sends a signal to a syscall .
631	New creates a new store
632	Index returns the current index .
633	Get returns an event or an error .
634	Create implements the Store interface .
635	Set creates a new event for a given node path
636	getCompareFailCause returns the string representation of the compare operation .
637	Delete is used to delete a node
638	walk walks the tree rooted at the given path .
639	internalGet is used to lookup a node .
640	DeleteExpiredKeys deletes all expired keys .
641	checkDir checks if a directory is a directory
642	Save implements the Store interface .
643	Recovery recovers the state from the store .
644	Next returns the next id .
645	NewMakeMirrorCommand returns a cobra command for Makes
646	NewZapCoreLoggerBuilder creates a new zapcore . Logger .
647	NewSyncer creates a new syncer .
648	DropPort drops a port
649	SetLatency changes the latency between ms and rv .
650	RemoveLatency removes latency from the kernel .
651	NewTxnCommand returns a cobra command for txn command
652	txnCommandFunc runs the given command with the given arguments .
653	New returns a new Compactor .
654	printResponseKey prints the response key to stdout
655	RegisterLockHandler registers the http handlers for service Lock to mux . The handlers forward requests to the grpc endpoint over conn .
656	gpcHandlerFunc is a wrapper around http . HandlerFunc
657	addCORSHeader adds a CORS header to the response
658	fallback takes a set of ops and returns a list of ops .
659	IDFromString converts a string to an ID .
660	release releases the lock
661	EncodedSize returns the size of the value .
662	Decode deserializes a ValueStruct from b .
663	NewMergeIterator returns a new MergeIterator .
664	initHeap initializes the heap .
665	Valid returns true if the iterator is valid .
666	Key returns the key of the iterator .
667	Value returns the current value of the iterator .
668	Next returns the next item in the slice .
669	Seek moves the iterator to the next key .
670	Close closes the iterator .
671	Encode encodes a valuePointer .
672	Decode decodes the header .
673	encodeEntry encodes an Entry .
674	SetEntry is part of the WriteBatch interface .
675	Set is part of the WriteBatch interface .
676	SetWithTTL sets the entry with the given key .
677	Delete implements the WriteBatch interface .
678	commit commits the batch to the database .
679	Flush implements the WriteBatch interface .
680	Error implements the WriteBatch interface .
681	getMemTables returns a slice of MemTables .
682	writeRequests writes the given requests to the database .
683	ensureRoomForWrite ensures that there are room for write .
684	writeLevel0Table writes the level0 table .
685	handleFlushTask handles a flush task .
686	flushMemtable flushes the memtable to disk .
687	calculateSize calculates the size of the database .
688	Size returns the size of the database .
689	Next returns the next available value .
690	Release releases the sequence .
691	KeySplits returns a list of KeySplits sorted by prefix .
692	Flatten flushes the database .
693	Mmap maps a file to a mmmap .
694	Madvise modifies b .
695	setDiscardTs is used to set the number of ticks .
696	hasConflict returns true if the current observer has a conflict .
697	Set stores an entry in the database .
698	SetWithMeta is part of the Transaction interface .
699	Delete deletes the entry with the given key .
700	Get returns the item for the given key .
701	CommitWith commits the given callback to the commit callback .
702	View performs a view of the database .
703	Update adds a function to the database .
704	Seek implements io . Seeker . Seeker .
705	SeekToLast moves the iterator to the next element .
706	parseKV takes a header and updates it .
707	NewIterator returns a new iterator .
708	seekFrom moves the iterator to the given key and returns the result .
709	seekForPrev moves the iterator to the next key .
710	Value returns the current value .
711	Seek positions the iterator by key .
712	NewConcatIterator creates a new ConcatIterator .
713	Valid returns true if the iterator is valid .
714	Next advances the iterator .
715	Close closes the iterator .
716	OpenExistingFile opens an existing file with the given filename and flags .
717	Copy returns a copy of b .
718	KeyWithTs converts a key to a byte slice .
719	ParseTs returns the uint64 value of key .
720	ParseKey takes a key and converts it to a byte slice .
721	SameKey returns true if src is equal to dst .
722	FixedDuration returns the fixed duration .
723	NewCloser creates a new Closer .
724	NewThrottle returns a new Throttle .
725	Do implements the Throttle interface .
726	Done implements the Throttle interface .
727	Finish closes the Throttle .
728	SetDiscardTs is used to set the number of dns .
729	openReadOnly is used to open a file
730	iterate implements Logger .
731	sortedFids returns a sorted list of fids .
732	write writes a valueLog to disk .
733	populateDiscardStats populates the discardStats .
734	Backup writes the database to w .
735	ToList converts a key to a list .
736	produceRanges writes the range to the stream .
737	produceKVs populates the fields of the given KVList .
738	Ovenstration orchestrates the stream .
739	NewStream creates a new stream
740	NewStreamAt returns a new instance of the StreamAt interface .
741	DecrRef decrements the ref count .
742	ParseFileID returns the ID of the given file .
743	PrintHistogram prints histogram
744	newSizeHistogram creates a new sizeHistogram .
745	buildHistogram builds the histogram for the given key prefix .
746	printHistogram prints histogram values
747	Init initializes the watermark .
748	Begin marks an index and marks the index .
749	BeginMany marks the given indices as long as the last index .
750	Done marks the mark as done .
751	DoneMany marks a set of indices as done .
752	SetDoneUntil sets the watermark value .
753	WaitForMark waits for a mark .
754	Encode encodes b into b .
755	Decode decodes the header .
756	NewTableBuilder creates a new table builder .
757	keyDiff returns the difference of two keys .
758	Add adds a new value to the builder .
759	blockIndex returns the block index of the block .
760	Finish finalizes the block
761	Errorf logs to Errorf .
762	Infof logs to Logger .
763	DecrRef decrements the reference count .
764	NewSkiplist returns a new skiplist .
765	Put adds a value to the skiplist .
766	Get returns the value for key .
767	Key returns the key of the iterator .
768	Value returns the value of the iterator .
769	Next advances the iterator .
770	Prev advances the iterator .
771	Seek moves the cursor to the current position .
772	SeekForPrev moves the cursor to the next position .
773	NewUniIterator returns a new UIIterator .
774	Next implements the iterator .
775	Seek moves the iterator to the given key .
776	asChanges converts a Manifest to a slice of ManifestChange .
777	Rewrite the manifest file .
778	validate checks level levels .
779	acquireDirectoryLock acquires a directory lock
780	release releases the lock
781	AssertTruef asserts to Fatalf .
782	Wrapf wraps an error with debug mode .
783	initTables initializes the tables .
784	deleteTables is used to delete tables .
785	tryAddLevel0Table tries to add the level0 table .
786	getTableForKey returns the table for the given key .
787	get returns the value for the given key .
788	overlapping tables .
789	String returns the string representation of an Item
790	KeyCopy returns a copy of the item .
791	ValueSize returns the size of the item .
792	NewKeyIterator creates a new iterator for the given key and prefix .
793	Valid returns whether the iterator is valid .
794	ValidForPrefix implements Iterator .
795	Close closes the iterator .
796	parseItem parses an item and returns true if it was successful .
797	Seek moves the iterator to the next key .
798	GetMergeOperator returns a MergeOperator .
799	Get returns the current merge operation .
800	compareAndAdd returns true if cd is equal to c .
801	newArena creates a new Arena .
802	putNode writes a node to the arena .
803	getNode returns the node corresponding to the given offset .
804	getKey returns the key corresponding to the given offset .
805	getVal returns the value for the given offset
806	getNodeOffset returns the offset of the given node .
807	init initializes the badger .
808	revertToManifest reverts a manifest to a manifest .
809	dropTree is used to drop a tree
810	dropPrefix drops the given prefix .
811	isLevel0Compactable returns true if the controller implements the Level0Compactable interface .
812	doCompact runs the compaction .
813	get returns the value for the given key .
814	seekTotal returns the total number of accounts in the badger .
815	findFirstInvalidTxn finds the first txn in the badts table .
816	Create creates a new snapshot
817	List returns all snapshots .
818	Open is part of the MemSnapshotStore interface .
819	Write implements the io . Writer interface .
820	NewFileSnapshotStoreWithLogger returns a new instance of FileSnapshotStore
821	NewFileSnapshotStore returns a new instance of FileSnapshotStore .
822	snapshotName returns the name of a snapshot .
823	Create creates a new snapshot
824	List returns all snapshots .
825	getSnapshots returns a list of snapshot metadata
826	readMeta reads the metadata for a snapshot
827	Open is part of the FileSnapshotStore interface .
828	ReapSnapshots reaps all snapshots
829	Write implements the Writer interface .
830	Close closes the snapshot
831	Cancel the snapshot
832	finalize finalizes the snapshot sink
833	writeMeta writes the snapshot to disk
834	NewNetworkTransportWithConfig returns a new instance of NetworkTransport
835	setupStreamContext sets the stream context
836	getStreamContext returns the current context .
837	SetHeartbeatHandler sets the heartbeat handler .
838	CloseStreams closes all streaming streams
839	Close the underlying transport
840	getPooledConn returns a connection pool for the target address
841	getConnFromAddressProvider attempts to get a connection from the address provider
842	getConn is used to create a netlink connection
843	ConnConn adds a connection to the pool
844	listen is used to listen for connections
845	handleConn handles a single connection
846	handleCommand handles a command
847	decodeResponse decodes the response from the connection .
848	sendRPC sends an RPC command to netConn .
849	newNetPipeline creates a new netPipeline
850	decodeResponses is used to decode responses
851	AppendEntries is part of the pipeline interface .
852	Close closes the pipeline
853	NewObserver creates a new observer for the given observer .
854	RegisterObserver adds or updates an observer .
855	DeregisterObserver removes the observer from the Raft .
856	Observe adds an observer to the Raft .
857	NewInmemStore returns a new in - memory store .
858	FirstIndex returns the first index
859	LastIndex returns the last high index .
860	GetLog returns the log for the given index .
861	StoreLog stores a log entry
862	StoreLogs stores the logs in the store .
863	DeleteRange removes a range from the store .
864	Set stores a value in the store .
865	Get returns the value for the given key .
866	SetUint64 sets the value for a given key .
867	GetUint64 gets a uint64 from the store
868	NewLogCache creates a new LogCache .
869	Connect adds a connection to the InmemTransport .
870	Disconnect closes the InmemTransport
871	DisconnectAll disconnects all pipelines
872	Respond to the response channel
873	Open is part of the Backup interface .
874	vote is used to update the state of the verifyFuture .
875	notifyAll is called whenever a leader is received .
876	cleanNotify is called when a notification is received .
877	LastContact returns the last contact .
878	setLastContact sets the last contact .
879	replicate replicates the Raft .
880	pipelining replicates the peer .
881	ipendPipeline sends the next entry to the peer .
882	npipelineDecode is called when a peer is received .
883	setupAppendEntries adds new entries to the Raft .
884	setPreviousLog is used to set the previous log entry .
885	setNewLogs adds new logs to Raft .
886	appendStats adds the stats for a given peer
887	handleStaleTerm handles a stale term .
888	AppendEntries implements raft . Transport .
889	RequestVote sends a request to the raft server .
890	InstallSnapshot is part of raft . Interface .
891	EncodePeer encodes a remote peer .
892	DecodePeer decodes the peer from the transport .
893	AppendEntries implements pipeline . AppendEntries .
894	ReadPeersJSON reads peers from a file .
895	ReadConfigJSON reads the configuration from a file .
896	NewTCPTransport creates a new TransportTransport
897	NewTCPTransportWithLogger returns a new instance of the TransportTransport
898	NewTCPTransportWithConfig creates a new TransportTransport with the specified bindAddr and advertiseAddr .
899	Dial implements the StreamLayer interface .
900	Accept implements the StreamLayer interface .
901	Addr returns the address of the layer .
902	restoreSnapshot is used to restore a snapshot
903	BootstrapCluster is part of the Raft . Raft interface .
904	Leader returns the current leader address .
905	Apply implements Raft . Apply .
906	Barrier returns a Future that will block until the Raft has completed .
907	VerifyLeader returns a Future that can be used to report the raft leader .
908	AddVoter is part of the Raft interface .
909	RemoveServer removes a server from Raft .
910	Shutdown returns a Future that will be called when Raft is closed .
911	Snapshot returns a snapshot of the Raft .
912	Restore is used to restore a snapshot
913	String returns a string representation of Raft .
914	LastContact returns the last contact .
915	Logf implements the Logger interface .
916	containsNode returns true if n contains a node
917	LeaderPlus returns a slice of raft nodes in the cluster .
918	WaitTilUptoDate waits for all nodes to be updated
919	assertLogEntryEqual returns true if the log entry is equal to e .
920	runFSM is used to restore a snapshot
921	Clone returns a copy of the configuration .
922	Clone returns a copy of the configuration .
923	hasVote returns true if the given server is a vote .
924	checkConfiguration checks if a configuration is valid .
925	nextConfiguration returns the next configuration for the current configuration change .
926	encodePeers is used to encode peers
927	Decode peers
928	encodeConfiguration encodes a configuration .
929	decodeConfiguration decodes a configuration message .
930	Go func
931	getLastIndex returns the last log index .
932	getLastEntry returns the last log entry .
933	checkRPCHeader returns an error if the RPC is not supported .
934	setLeader sets the leader for the Raft .
935	requestConfigChange waits for a given configuration change request and returns the IndexFuture .
936	run runs the Raft .
937	runFollower is used to run a follower
938	liveBootstrap is used to create the raft cluster
939	runCandidate is used to run a Candidate .
940	runLeader is part of the Raft interface .
941	startStopReplication starts a new leader replication .
942	configureChangeChIfStable returns a channel that can be used to change the current commitment state .
943	verifyLeader implements the Raft interface .
944	checkLeaderLease checks if this Raft has a leader lease .
945	restoreUserSnapshot is used to restore a snapshot
946	appendConfigurationEntry adds a new configuration entry to the Raft .
947	dispatchLogs is used to send logs to raft .
948	processLogs processes the logs at the given index .
949	processLog processes the given log into the Raft .
950	processRPC handles RPC requests .
951	processHeartbeat is used to process a heartbeat
952	setLastContact sets the last contact .
953	persistVote is used to persist a vote .
954	setCurrentTerm sets the current term .
955	setState is used to update the state of the Raft state .
956	getCommitIndex returns the commit index .
957	recalculate recalculates the commit index .
958	randomTimeout returns a channel that will be closed when the given duration is 0 .
959	generateUUID generates a UUID
960	decodeMsgPack decodes a byte slice into out .
961	encodeMsgPack is used to encode a messagepack
962	backoff calculates the backoff based on a given round .
963	newApplySource returns a new applySource with the given seed .
964	reset resets the source .
965	DefaultConfig returns a Config with default values .
966	ValidateConfig returns an error if the config is not valid .
967	runSnapshots runs the Raft snapshot .
968	shouldSnapshot returns true if the Raft has a snapshot .
969	takeSnapshot is called when a snapshot is created .
970	compactLogs compacts logs from the Raft log index .
971	WebpackCheck checks if the current template is valid .
972	New creates a genny Generator .
973	UnixSocket creates a Listener for unix sockets
974	Get returns an ErrorHandler by status .
975	PanicHandler returns a middleware that panics on panics .
976	partialFeeder returns the full digest of a given name .
977	New returns a new Engine instance
978	WriteTo writes Message to w .
979	Send sends a message to the SMTPSender .
980	NewSMTPSender returns a new SMTP mail sender .
981	Param returns the param for the given key
982	Set sets the value for the given key .
983	Value returns the value associated with the given key .
984	Redirect redirects the given url with the given status
985	File returns a binding file
986	MarshalJSON - encodes DefaultContext to JSON data .
987	New returns a genny group
988	New returns a new instance of Environ .
989	DeprecrationsCheck checks for deprecations
990	List is not implemented
991	Render implements the renderer interface .
992	Save saves the session
993	GetOnce gets value from session
994	Set value to session
995	Clear removes all values from Session
996	getSession returns the current session
997	New creates a genny generator .
998	New creates a new Generator .
999	New returns a new genny Generator .
1000	NewMessage returns a new instance of Message
1001	Reset resets the message .
1002	SetHeader sets the header field .
1003	SetHeaders sets the headers for the message .
1004	SetAddressHeader sets the address header field .
1005	FormatAddress formats an address .
1006	SetDateHeader sets the date header field .
1007	FormatDate formats a date
1008	SetBody is part of the Message interface .
1009	SetPartEncoding sets the part s encoding .
1010	SetHeader returns a FileSetting that sets the header .
1011	SetCopyFunc sets the copy function used for copying files .
1012	AttachReader adds a reader to the message .
1013	Attach adds a filename to the message .
1014	EmbedReader adds a new reader to the message .
1015	Embed adds a file to the message .
1016	ValidateTemplates validates all templates .
1017	PlushValidator returns an error if the file is not empty .
1018	Validate validates the options .
1019	LoadPlugins loads plugins
1020	WriteHeader implements the http . ResponseWriter interface .
1021	Write implements the http . ResponseWriter interface .
1022	Flush implements the http . ResponseWriter interface .
1023	CloseNotify is part of the ResponseWriter interface .
1024	Run runs the application .
1025	onlyRelevantFiles is a helper function that takes a function f and returns a function that can be used to filter files .
1026	GoTemplateEngine renders the given input as a template engine .
1027	GET adds a handler for GET requests
1028	Redirect sends a redirect to the application .
1029	ANY registers a handler for PUT requests
1030	buildRouteName returns the name of the route .
1031	New creates a genny group
1032	NewDialer returns a new Dialer .
1033	Dial connects to the dialer .
1034	DialAndSend sends a message to the server .
1035	Set sets a value to flash
1036	Add adds a value to flash
1037	persist persists flash to flash .
1038	newFlash creates a new flash from session
1039	Get gets a cookie by name
1040	Set sets a cookie value .
1041	SetWithExpirationTime sets a cookie with an expiration time .
1042	Delete deletes a cookie .
1043	NewMessage returns a new instance of Message
1044	NewFromData creates a new Message from the render .
1045	New creates a new Message instance
1046	CloseNotify closes the event source .
1047	NewEventSource creates a new EventSource
1048	NewSimpleWithContext returns a new Simple instance .
1049	Register adds a handler to the Simple .
1050	Start starts the background worker
1051	Stop stops the background worker .
1052	Perform performs a job
1053	PerformAt is part of the Simple interface .
1054	PerformIn is part of the Simple interface .
1055	String returns the JSON representation of the RouteInfo .
1056	Alias adds an alias to the router .
1057	Name returns the route info
1058	BuildPathHelper returns a RouteHelperFunc for this route .
1059	New creates a generator for the given options .
1060	New returns a genny generator .
1061	RegisterCustomDecoder registers a custom type decoder .
1062	Replace adds a middleware to the middleware stack .
1063	Routes returns a list of registered routes .
1064	WrapBuffaloHandler returns a new http . Handler that wraps the given http . Handler .
1065	PackageJSONCheck checks if a package is valid
1066	match returns the importpath for the given importpath
1067	Send sends a message and returns a SendError
1068	Last returns true if the identifier is in the last element
1069	Stop stops the app .
1070	DepEnsure is part of the Runner interface .
1071	String returns a string representation of the BuildInfo .
1072	New creates a new Generator .
1073	AddBody adds a new body to the message .
1074	AddBodies adds a body to the message .
1075	AddAttachment adds an attachment to the message .
1076	AddEmbedded adds a file to the message .
1077	SetHeader sets a new header field .
1078	New returns a genny group .
1079	New creates a new Generator .
1080	New creates a genny Generator .
1081	Cleanup removes all files .
1082	MDTemplateEngine renders a HTML template to HTML .
1083	Update is used to update a configmap
1084	FilterChanges returns a set of changes that match a pull request .
1085	getLabelsFromREMatches converts a list of labels into a list of labels .
1086	getLabelsFromGenericMatches returns a list of labels matching the provided matches .
1087	Start starts the agent .
1088	Subscribe adds a subscription to the agent .
1089	Config returns the agent configuration .
1090	Set updates the current configuration .
1091	IsMember checks if user is a member
1092	ListIssueComments lists issue comments
1093	ListPullRequestComments lists pull request comments
1094	ListReviews is part of Interface .
1095	ListIssueEvents is a mock
1096	CreateComment adds a comment to the fake client
1097	CreateReview creates a new review
1098	CreateCommentReaction adds a comment to the fake client
1099	CreateIssueReaction adds a fake issue reaction to the fake client
1100	DeleteComment deletes a issue comment
1101	DeleteStaleComments deletes stale comments .
1102	GetPullRequest returns github pull request
1103	GetPullRequestChanges returns a list of pull request changes
1104	GetRef is part of Interface .
1105	DeleteRef deletes a reference
1106	GetSingleCommit returns github commit
1107	CreateStatus updates the status of a github client
1108	ListStatuses is part of Interface .
1109	GetCombinedStatus is a mock
1110	GetRepoLabels returns a list of repositories .
1111	GetIssueLabels returns github . IssueLabels object .
1112	AddLabel adds a label to the fake client
1113	RemoveLabel removes a label
1114	FindIssues returns github . Issue
1115	AssignIssue adds an issue to the fake client .
1116	GetFile is part of Interface .
1117	ListTeams is part of Interface .
1118	ListTeamMembers is part of Interface .
1119	IsCollaborator returns true if user is a collaborator
1120	ListCollaborators is part of Interface .
1121	ClearMilestone clears the milestone .
1122	SetMilestone sets the milestone number .
1123	ListMilestones is a mock
1124	ListPRCommits is part of Interface .
1125	GetRepoProjects returns a list of repositories .
1126	GetOrgProjects returns a list of github projects
1127	GetProjectColumns returns a list of github projects
1128	CreateProjectCard creates a project card .
1129	DeleteProjectCard deletes a project card .
1130	MoveProjectCard moves a project card .
1131	CreateDatabaseClient creates a new InfluxDB client
1132	Push adds a new measurement to the database .
1133	NewProwJobWithAnnotation creates a new ProwJob with the given annotations .
1134	NewProwJob creates a new ProwJob
1135	NewPresubmit creates a new ProwJob
1136	PresubmitSpec returns a ProwJobSpec with the given refs .
1137	PostsubmitSpec returns a ProwJobSpec for the given postsubmit job .
1138	PeriodicSpec converts a PeriodicJobSpec to a ProwJobSpec .
1139	BatchSpec converts a job spec to a PatchJobSpec .
1140	PartitionActive returns a set of pending jobs that are currently active .
1141	ProwJobFields returns a logrus . Field for a prow job .
1142	ClusterToCtx returns the cluster name
1143	AddCommand adds a command to PluginHelp .
1144	Get takes name of the prowJob and returns the corresponding prowJob object and an error if there is any .
1145	Watch returns a watch . Interface that watches the requested prowJobs .
1146	Delete takes name of the prowJob and deletes it . Returns an error if one occurs .
1147	Patch applies the patch and returns the patched ProwJob .
1148	MergeMethod returns a PullRequestMergeType for the given org .
1149	Query returns the query string .
1150	ForRepo returns true if the given org matches the given org .
1151	OrgExceptionsAndRepos returns a map of orgs that match the given org .
1152	QueryMap returns a new QueryMap .
1153	ForRepo returns a copy of the query map for the given org .
1154	Validate checks that all required context policies are valid .
1155	GetTideContextPolicy returns the helm context policy for the given branch .
1156	IsOptional returns true if the context is optional
1157	MissingRequiredContexts returns a slice of RequiredContexts that are missing in the policy .
1158	ValidateWebhook validates webhook
1159	HelpProvider returns a plugin help .
1160	HandleEvent handles a pull request event .
1161	HandleAll is the handler for all repositories
1162	NewDryRunProwJobClient creates a new DryRunProwJobClient .
1163	Create a new ProwJob
1164	Update updates a ProwJob .
1165	UpdateStatus updates a ProwJob .
1166	Delete deletes a row
1167	DeleteCollection deletes a collection
1168	Get returns a ProwJob by name .
1169	List all Prow jobs .
1170	Watch is part of the DryRunProwJobClient interface .
1171	Patch creates a ProwJob .
1172	hasSynced returns true if the controller has synced .
1173	Run runs the controller .
1174	runWorker runs the workqueue .
1175	fromKey extracts a key from a key .
1176	enqueueKey adds a key to the queue
1177	finalState returns true if there is a pending state .
1178	description returns the description of the condition .
1179	rrowJobStatus returns the pipeline job s status .
1180	queueMeta returns the metadata for a pipeline job
1181	sourceURL returns the source URL for the prow job
1182	makePipelineGitResource converts prowJob to a pipeline resource .
1183	makePipelineRun creates a pipeline run for the given pipeline
1184	matchingConfigs returns all configs matching the given label .
1185	SuggestCodeChange converts a Problem to a description string .
1186	ServeExternalPluginHelp implements the http . Handler interface .
1187	protect is part of the Protector interface .
1188	UpdateOrg updates an org in the registry
1189	UpdateRepo updates a repository
1190	UpdateBranch updates the branch with the given branch .
1191	LoadConfig loads a config from a string
1192	Run starts the cluster
1193	Start loads all secrets .
1194	reloadSecret reloads a secret
1195	GetSecret is used to get a secret
1196	setSecret is used to set a secret value
1197	GetTokenGenerator returns a function that can be used to generate tokens
1198	New creates a new History .
1199	Record adds a new record to the history .
1200	ServeHTTP implements the http . Handler interface .
1201	Flush writes the history to the pool .
1202	AllRecords implements History interface
1203	MakeCommand returns a cobra command for GCS
1204	CheckFlags checks if the comment counter is valid
1205	ReceiveComment returns a slice of points for the given comment
1206	NewController creates a new Controller .
1207	Run starts the controller .
1208	runWorker runs the next item .
1209	New creates a new local git git client
1210	MakeFakeRepo creates a new Git repository for the given repository .
1211	AddCommit adds a commit to the current repository
1212	CheckoutNewBranch adds new branch to the current branch .
1213	Checkout is part of the LocalGit interface .
1214	RevParse implements git . RevParse
1215	CleanAll cleans all regions
1216	optionsForRepo returns a plugin . Lgtm for the given org .
1217	getChangedFiles returns a list of edits for a given repository .
1218	loadReviewers returns a set of reviewer names .
1219	NewController creates a new Controller .
1220	SaveLastSync saves last sync
1221	Sync is part of the Controller interface .
1222	AddFlags adds flags to the event counter
1223	CheckFlags checks if event counter is set
1224	ReceiveIssueEvent returns a slice of points for an issue event .
1225	Upload performs a batch of uploads .
1226	FileUploadWithMetadata returns a UploadFunc that wraps the given file .
1227	DataUploadWithMetadata returns a UploadFunc that writes data to the given reader .
1228	HasLabel returns true if the given label is a label .
1229	ImageTooBig returns true if the given url is a valid image .
1230	LevelFromPermissions returns the RepoPermissionLevel for permissions .
1231	PermissionsFromLevel converts a RepoPermissionLevel to a RepoPermissionLevel
1232	newProwJobs returns a Strategy
1233	GetApplicable returns a list of Blockers that belong to given organization .
1234	serve starts the HTTP server
1235	NewCountPlugin returns a cobra command for count events
1236	ReceiveComment implements the Plugin interface for FakeCommentPluginWrapper .
1237	updateMetrics updates metrics for diskRoot
1238	LogStatus logs the current resource
1239	SyncConfig updates the cluster configuration with the given string .
1240	Metric implements the Metric interface .
1241	FormatURL formats a DogURL
1242	runAndSkipJobs is part of github . PullRequest interface .
1243	validateContextOverlap checks to see if there is an overlap
1244	RunRequested is part of the PullRequest interface .
1245	skipRequested sends skippedJobs to pullRequest .
1246	Match returns true if the label matches the label
1247	Match returns true if the event matches the given label
1248	AddFlags adds flags to GitHubOptions .
1249	AddFlagsWithoutDefaultGitHubTokenPath adds flags to the specified FlagSet
1250	Validate validates GitHubOptions
1251	GithubClientWithLogFields returns a github client with the given fields .
1252	GithubClient returns a GitHubClient using GitHubOptions .
1253	GitClient returns a GitHubClient using GitHubOptions .
1254	toMap converts a GroupList into a map .
1255	findChanges takes a baseList and returns a slice of coverage changes .
1256	CreateDatabase creates a new database
1257	ShouldReport returns true if we should report a report .
1258	Report sends a report to GitHub .
1259	MarkComplete marks the set as complete .
1260	NewJobAgent creates a new instance of JobAgent
1261	Start starts the job agent .
1262	Jobs returns a copy of all jobs .
1263	ProwJobs returns a copy of prow jobs .
1264	GetProwJob retrieves a job by its ID .
1265	GetJobLog returns the logs for the given job id .
1266	unionStrings returns a slice of strings that are not in parent .
1267	Apply returns a copy of this Policy with all required fields .
1268	GetOrg retrieves an organization by name
1269	GetRepo returns a repository by name .
1270	GetBranch gets a branch by name .
1271	GetPolicy returns a new policy for the given branch .
1272	UpdateIssueEvents updates issue events for given issueID .
1273	enqueueKey is used to enqueue a key
1274	rwJobStatus returns a ProwJobStatus for the build .
1275	buildEnv builds the environment variables for the given build
1276	defaultArguments adds default arguments to the template instantiation spec .
1277	defaultEnv adds the default environment variables to the container .
1278	injectSource injects a source into b .
1279	injectedSteps returns a list of steps that are injected into a container
1280	determineTimeout returns the default timeout if any .
1281	makeBuild takes a ProwJob and returns a build object that can be used to build a build .
1282	newLabels creates a new sql . Label from a repository .
1283	newAssignees returns a slice of Assignees .
1284	NewIssueComment returns a new sql . Comment object .
1285	messageFilter returns a putil . Filter that matches the current update .
1286	IsSuccess returns true if jb is a success
1287	IsFailure returns true if this build is a failure
1288	IsAborted returns true if this build is aborted
1289	ProwJobID returns the root job ID
1290	BuildID returns the build ID for the build
1291	CrumbRequest - get crumb request
1292	Measure is used to measure a metric .
1293	GetSkipMetrics - get skip metrics
1294	Get sends a GET request .
1295	request performs an HTTP request .
1296	doRequest sends a request .
1297	getJobName returns the name of the job
1298	getBuildPath returns the path to the build job
1299	GetJobInfo returns the job info for the given spec
1300	JobParameterized returns true if JobInfo has a Parameter definition
1301	EnsureBuildableJob creates a buildable job
1302	LaunchBuild launches a new build
1303	Build builds a new Prow job
1304	BuildFromSpec launches a new build from a spec
1305	GetEnqueuedBuilds lists all queued builds from the queue
1306	Abort stops a job .
1307	PresubmitToJobSpec converts a job spec to a downwardapi . JobSpec
1308	PostsubmitToJobSpec returns the job spec for the given postsubmit job spec
1309	PeriodicToJobSpec converts a periodic job spec to a downwardapi . JobSpec
1310	GetBuildID retrieves a build ID from a string
1311	listGcsObjects lists all GCS objects .
1312	FindBaseProfile - Find base profile
1313	sortBuilds returns a sorted slice of build numbers .
1314	GetAll returns all region names
1315	NewEventClient returns a new EventClient
1316	PruneComments removes all issue comments from the bot .
1317	FormatResponse returns a string representation of this bot .
1318	FormatSimpleResponse returns a string representation of a bot
1319	FormatICResponse returns a string representation of issue comment .
1320	FormatResponseRaw takes a body and returns a formatted string .
1321	Validate validates the Options
1322	Encode encodes options to JSON .
1323	RegisterIssueHandler registers an issue handler .
1324	RegisterIssueCommentHandler registers an issue comment handler .
1325	RegisterPullRequestHandler registers a pull request handler .
1326	RegisterStatusEventHandler registers a status event handler
1327	RegisterPushEventHandler registers a push event handler .
1328	RegisterReviewEventHandler registers a review event handler .
1329	RegisterReviewCommentEventHandler registers a review comment event handler .
1330	RegisterGenericCommentHandler registers a GenericCommentHandler .
1331	NewAgent returns a new instance of Agent
1332	InitializeCommentPruner initializes the comment pruner
1333	CommentPruner returns the current comment pruner .
1334	Load a yaml file
1335	Config returns the current configuration .
1336	Set sets the config agent .
1337	Start the config agent
1338	GenericCommentHandlers returns a map of GenericCommentHandlers for the given repository .
1339	IssueHandlers returns a map of issue handlers for the given repository .
1340	IssueCommentHandlers returns a map of issue comment handlers for the given repository .
1341	PullRequestHandlers returns a map of pull request handlers for the given repository .
1342	ReviewEventHandlers returns a map of all registered plugins .
1343	ReviewCommentEventHandlers returns a map of all registered plugins .
1344	StatusEventHandlers returns a map of status events .
1345	PushEventHandlers returns a map of push event handlers for the given repository .
1346	EventsForPlugin returns all events for a given plugin name .
1347	insertLink adds a new link to the started .
1348	HelpProvider returns plugin help .
1349	getPatch gets the patch for the given repository .
1350	release note
1351	ValidatePayload validates payload
1352	PayloadSignature calculates the signature of the payload .
1353	updateString updates the string value .
1354	updateBool updates the boolean value .
1355	configureOrgMeta is used to configure an org metadata
1356	configureTeamRepos configures the repositories for the given team .
1357	ShouldReport returns true if we should report false otherwise .
1358	Run uploads the given options to the GCS
1359	Format returns a formatted logrus formatter .
1360	FindLabels returns all labels matching the given regex .
1361	AddFlags adds flags to the Options .
1362	NewAgent creates a new Agent instance
1363	HandleLogin handles an authentication request .
1364	HandleLogout handles an authentication request .
1365	serverError logs an error
1366	FromItem implements ResourceConfigObject .
1367	GetItems returns all items in the collection
1368	SetItems sets the items in the collection
1369	UnmarshalText implements the json . Unmarshaler interface for RepoPermissionLevel .
1370	IsAssignee returns true if this issue is an assignee
1371	IsAuthor returns true if the given user is authorized
1372	HasLabel returns true if the given label is a label
1373	Branch returns the branch name .
1374	truncate truncates a string with a single element .
1375	reportStatus reports the status of the GitHub API .
1376	parseIssueComments parses a list of issue comments and returns a list of issue comments .
1377	createComment creates a comment for a report
1378	Config returns the lens configuration .
1379	Callback returns a string representing a callback
1380	FormatRecord formats a record
1381	Namespace sets the namespace
1382	NewFakeClient returns a new Client instance
1383	NewClientInCluster creates a new client in the cluster
1384	NewClientFromFile loads a new cluster from a file
1385	NewClient returns a new Client instance
1386	ReplaceConfigMap replaces a ConfigMap
1387	GetDiskUsage returns the percent usage of a disk
1388	GetATime returns the atime for the given path
1389	RegisterLens registers a new lens .
1390	GetLens returns a lens by name .
1391	LastNLines is the same as LastNLines .
1392	NewClient creates a new slack client
1393	WriteMessage writes a message to the client .
1394	MarkAndSweep marks a NATGateway .
1395	ListAll returns all NATGateways for the given region .
1396	NewClient returns a new Client .
1397	Acquire acquires a single resource .
1398	AcquireWait is the same as Acquire but returns a resource .
1399	AcquireByState acquires a set of resources and returns them .
1400	ReleaseAll releases all resources
1401	ReleaseOne releases a resource
1402	UpdateAll updates all resources
1403	SyncAll syncs all resources .
1404	UpdateOne updates a single resource
1405	Metric returns a metric by type
1406	HasResource returns true if the client has a resource
1407	DialContext is a wrapper around DialerWithRetry .
1408	NewDashboardAgent creates a new dashboard agent .
1409	QueryPullRequests returns pull requests for a query
1410	GetHeadContexts retrieves all the current context of a dashboard
1411	ConstructSearchQuery returns a query string for a query
1412	NewBundledStates returns a new BundledStates instance
1413	ReceiveEvent adds a new event to the BundledStates object .
1414	agers returns a map of all states in the BundledStates .
1415	Percentile computes the percentile for a given time .
1416	NewMetrics creates a new metrics collector
1417	NewDiskCache creates a new disk cache
1418	NewMemCache creates a new memory cache .
1419	NewFromCache creates a new requestCoalescer .
1420	ProwV1 retrieves the ProwV1Client
1421	Prow retrieves the ProwV1Client
1422	NewOwners creates a new owner from a repo .
1423	GetApprovers returns a map of admins in the owner
1424	GetAllPotentialApprovers returns a slice of all the potential apps .
1425	GetReverseMap returns a map of owner owners to owners .
1426	tempUnapprovedFiles returns all unapproved files that are unapproved .
1427	KeepCoveringApprovers ensures that there are no peers in the repo .
1428	GetSuggestedApprovers returns a set of ApprovedApprovers that can be found in the list of apps .
1429	GetOwnersSet returns the owner set of the owner
1430	GetShuffledApprovers returns a slice of all users in the owner
1431	String returns a string representation of an Approval
1432	IntersectSetsCase returns the intersection of two sets .
1433	NewApprovers returns a copy of the Approved object
1434	AddLGTMer adds a new license to the LGTM annotation .
1435	RemoveApprover removes an approver
1436	AddAssignees adds an assignees to the approval list .
1437	GetCurrentApproversSetCased returns the current Approvers set
1438	GetFilesApprovers returns a map of appforcer names .
1439	NoIssueApprovers returns a map of approval to no issue .
1440	UnapprovedFiles returns a list of all Approved objects .
1441	GetFiles returns a list of Approved files that are authorized .
1442	IsApproved returns true if all Approvers are approved
1443	ListApprovals returns a list of Approvals .
1444	ListNoIssueApprovals returns a list of Approval in the approval list
1445	GenerateTemplate executes a template and returns the result .
1446	writeTemplate writes outputPath to outputPath .
1447	Labels returns a sorted list of labels .
1448	LabelsForTarget returns a list of labels that match the given LabelTarget .
1449	LoadConfig loads a configuration from a path
1450	loadLabels loads labels for given repositories .
1451	kill kills a repository .
1452	create creates a new repo
1453	classifyLabels takes a set of labels and returns a map of required labels .
1454	linkify returns a string representing a link
1455	NewCache creates a new cache
1456	KeyToPath returns the path to the given key .
1457	ensureDir ensures dir exists .
1458	Put adds content to the cache
1459	Get reads a key from the cache
1460	Delete removes a key from the cache
1461	NewGCSArtifact creates a new GCSArtifact
1462	Size returns the size of the artifact
1463	ReadAll reads all artifacts from the artifact
1464	ReadTail implements the io . Reader interface
1465	gzipped returns whether the artifact is gzipped
1466	optionsForRepo returns a plugin welcome for given org
1467	List lists all ProwJobs in the indexer .
1468	ProwJobs returns an object that can list and get ProwJobs .
1469	List lists all ProwJobs in the indexer for a given namespace .
1470	RunAgainstAllBranch returns true if all branches are equal
1471	Intersects reports whether this Brancher contains the intersection of the other Branches .
1472	ShouldRun returns true if the change matches the changelist .
1473	RunAgainstChanges returns true if a RegexpChangeMatcher matches the given changes
1474	CouldRun implements Postsubmit .
1475	ShouldRun implements Postsubmit .
1476	CouldRun returns true if the ref can be run .
1477	ShouldRun checks whether a change is running .
1478	GetPresubmit returns a presubmit by name
1479	SetPresubmits sets the Presubmits field of the job config .
1480	SetPostsubmits sets the postsubmits for the given job config
1481	AllPresubmits returns all presubmits matching the given repositories .
1482	AllPostsubmits returns all Postsubmits matching the given repositories .
1483	AllPeriodics implements JobConfig .
1484	ClearCompiledRegexes clears the RegexpChangeMatcher .
1485	Empty returns true if the config is empty
1486	NewClient returns a new Github Client .
1487	ExpandAlias expands a repository alias .
1488	ExpandAliases expands a set of logins .
1489	ParseFullConfig parses a YAML into a FullConfig .
1490	ParseSimpleConfig parses a SimpleConfig from a byte slice .
1491	decodeOwnersMdConfig decodes the configuration from a file .
1492	findOwnersForFile returns the owner map for the given path
1493	FindApproverOwnersForFile returns the owner for the repository
1494	FindReviewersOwnersForFile returns the name of the reviewers for a given file .
1495	FindLabelsForFile returns all labels for a given path
1496	IsNoParentOwners returns true if the repo is a no - op
1497	Ratio returns the ratio of the coverage .
1498	FromPayload deserializes into PeriodicProwJobEvent
1499	ToMessage converts PeriodicProwJobEvent to pubsub message
1500	UnmarshalText implements the encoding . TextUnmarshaler interface .
1501	compileApplicableBlockades compiles a list of Blockades from an org .
1502	calculateBlocks returns a summary of blocks that have been blocked .
1503	MergeMultipleProfiles merges two profiles .
1504	AddFlags adds flags to the specified FlagSet .
1505	processNextItem processes the next item
1506	handleErr handles an error from the queue .
1507	AggregateFilter returns a filter that aggregates the given filters .
1508	FilterPresubmits returns a slice of presubmits that match the given filter .
1509	MakeCommand returns the cobra command for the command
1510	Push adds an issue event to the heap .
1511	Pop implements heap . Interface .
1512	NewFakeOpenPluginWrapper creates a new FakeOpenPluginWrapper .
1513	ReceiveIssue implements the interface for FakeOpenPluginWrapper .
1514	Validate returns an error if any of the options are not valid .
1515	Complete completes the command line arguments
1516	Set sets the value of an orgRepoFormat
1517	ensure ensures the given binary is valid
1518	output runs the command and returns its output .
1519	projects returns a list of projects .
1520	selectProject is a helper function to select a project
1521	createCluster creates a new cluster
1522	createContext is used to create a GKE cluster
1523	contextConfig loads the kubectl config .
1524	selectContext returns a string representation of the current context
1525	applyCreate runs the create command
1526	determineSkippedPresubmits returns a slice of presubmits that should be skipped .
1527	Dispatch sends a message to InfluxDB .
1528	CreateIssue creates a new issue .
1529	CreateStatus creates a new repository with the given ref .
1530	ForEachPR is part of github . Interface .
1531	GetCollaborators returns a list of collaborators for a given organization .
1532	GetCombinedStatus returns the combined status for the given ref .
1533	GetIssues returns all issues for given repository .
1534	GetRepoLabels returns a list of labels for given repository .
1535	GetUser returns a github user
1536	checkConfigValidity checks if the configuration is valid
1537	createSystemdLogfile creates a log file for the given service .
1538	Create full systemd logfile
1539	createSystemdLogfiles creates the logs for systemd .
1540	prepareLogfiles prepares the logfiles for the node
1541	writeSuccessMarkerFile writes the marker file .
1542	MakeCommand returns a cobra command for junit
1543	warnDeprecated logs a warning
1544	Describe returns the description of the request
1545	TriggerFor returns the trigger for the given org .
1546	EnabledReposForPlugin returns repositories for given plugin
1547	EnabledReposForExternalPlugin returns the list of repositories for the given plugin
1548	SetDefaults sets defaults
1549	validatePlugins returns an error if any of the plugins are invalid .
1550	ShouldReport returns true if the given Prow job should report the desired state .
1551	Run runs the given refs .
1552	PathForRefs returns the path for the given refs .
1553	gitCtxForRefs returns a gitCtx for the given refs .
1554	commandsForBaseRef returns a list of commands for the given ref .
1555	gitTimestampEnvs returns the set of environment variables that should be passed to git_AUTHOR_DATE
1556	gitRevParse parses git rev - format .
1557	commandsForPullRefs returns a list of commands that need to pull the refs .
1558	ProduceCovList produces a copy of the CoverageList .
1559	popRandom pops random string from set
1560	resolve resolves the kubernetes options
1561	ProwJobClientset implements the PowJobClientset interface
1562	ProwJobClient returns a ProwJobClient
1563	InfrastructureClusterClient returns a kubernetes client
1564	BuildClusterClients returns the buildClusterClients for the given namespace
1565	Age returns the age of the active state .
1566	ReceiveEvent waits for an event and returns a State indicating whether the event was received .
1567	ReceiveEvent returns the active state of an active event .
1568	Active returns true if all states are active .
1569	Age returns the minimum number of states .
1570	ReceiveEvent waits for the given event to be received and returns the state .
1571	ProwJobs returns a ProwJobInformer .
1572	ItemToResourcesConfig converts Item to ResourceConfig
1573	Copy returns a copy of this TypeToResources
1574	MakeCommand returns a cobra command for the subcommand
1575	incrementNumPendingJobs increments number of pending jobs .
1576	setPreviousReportState replaces the previous report state of the repository .
1577	SyncMetrics is used to periodically update the state of all the jobs .
1578	DumpProfile dumps a profile .
1579	blocksEqual compares two profiles .
1580	NewProwJobInformer constructs a new informer for ProwJob type . Always prefer using an informer factory to get a shared informer instead of getting an independent one . This reduces memory footprint and number of connections to the server .
1581	NewFilteredProwJobInformer constructs a new informer for ProwJob type . Always prefer using an informer factory to get a shared informer instead of getting an independent one . This reduces memory footprint and number of connections to the server .
1582	New returns a new instance of spyglass
1583	Lenses returns a list of lens that match cache .
1584	JobPath returns the job path for the given src .
1585	RunPath returns the path for the given source
1586	ExtraLinks returns the extra links for the specified src .
1587	needDemux returns a list of plugins that need to be demuxed .
1588	determine external plugins
1589	dispatch sends a POST request to the server .
1590	AddFlags adds flags to the plugin
1591	CheckFlags checks if the plugin is valid
1592	ReceiveIssueEvent receives an issue event .
1593	Load loads a config from a job config
1594	loadConfig loads the config from the given job config
1595	YamlToConfig unmarshals the given path into a JobConfig struct
1596	ReadFileMaybeGZIP returns the GZIP from the given path .
1597	finalizeJobConfig is used to finalize the job configuration
1598	validateComponentConfig returns an error if the config is not valid .
1599	ConfigPath returns the default configuration path
1600	ValidateController validates the Controller .
1601	defaultJobBase is used to set default jobBase .
1602	SetPresubmitRegexes sets the presubmit regexes for the given js .
1603	setBrancherRegexes computes a brancher from a brancher .
1604	SetPostsubmitRegexes sets postsubmit regexes for Postsubmit .
1605	Body returns the body for the given artifacts .
1606	NewBoskosHandler returns a new ServeMux .
1607	ErrorToStatus converts an error to a status code .
1608	DumpProfile dumps a profile .
1609	LoadProfile loads a profile from disk .
1610	NewClient returns a new Git client
1611	SetCredentials sets the credentials for a user
1612	Checkout commits a commit to the repository .
1613	CheckoutNewBranch adds a new branch to the repository .
1614	Merge is part of the repository .
1615	CheckoutPullRequest checks to see if the repo has been pulled .
1616	Config runs the git config command .
1617	retryCmd is a wrapper around exec . Command .
1618	LabelsAndAnnotationsForSpec returns a map of labels and annotations for the spec
1619	ProwJobToPod converts a PodSpec to coreapi . Pod
1620	CloneLogPath returns the path to the volumeMount
1621	cloneEnv returns a copy of the given config .
1622	sshVolume creates a new volume with the given secret .
1623	InjectEntrypoint injects an entrypoint
1624	PlaceEntrypoint creates an entrypoint
1625	kubeEnv takes an environment map and returns a list of environment variables .
1626	Client returns a client for the Kubernetes API
1627	handle handles an event
1628	SendHook sends a hook to GitHub
1629	janitorClean cleans up a janitor
1630	janitor is a helper function to release a janitor
1631	Run starts the pull server
1632	specToStarted converts a job spec to a gcs . Started
1633	Run runs the command
1634	hasPRChanged returns true if github pull request is changed .
1635	UpdateIssues adds new issues to the database .
1636	handleReviewEvent handles a review event .
1637	findAssociatedIssue returns the index of an associated issue .
1638	optionsForRepo returns an Approve that matches the given repository name .
1639	localOnlyMain is a middleware that can be used to register a github page .
1640	summarize updates the coverage list .
1641	Returns a copy of the CoverageList .
1642	ListDirectories returns a list of all files in the CoverageList .
1643	readRequest reads an admission request
1644	handle is the HTTP handler
1645	writeResponse writes an admission request
1646	Only update status update status
1647	convertSuiteMeta converts a suiteMeta into a suite .
1648	NewHealth returns a new instance of http . Health
1649	ServeReady implements the http . Handler interface .
1650	NewController creates a new controller
1651	newExpectedContext returns a new context with the given context
1652	contextToStrings converts a slice of Context into a list of names .
1653	filterSubpools returns a map of subpools that have been filtered by the controller .
1654	filterSubpool is used to filter a subpool .
1655	poolPRMap converts a map of subpool to pull requests
1656	failuredContexts returns a slice of missing contexts that are missing missing contexts
1657	Summents the presubmits for presubmits .
1658	tryMerge tries to merge a merge branch .
1659	prChanges returns a config . ChangeFilesProvider for a pull request .
1660	prune deletes the changedFilesAgent .
1661	Divide a pool
1662	AggregateProfiles aggregates a set of profiles .
1663	countToBoolean converts a slice of profile to a slice of counts .
1664	NewStorage creates a new storage layer
1665	AddResource adds the given resource to the storage .
1666	DeleteResource deletes a resource
1667	UpdateResource updates the given resource .
1668	GetResource implements Storage . GetResource .
1669	GetResources implements Storage . GetResources .
1670	SyncResources synchronously deletes all resources from the storage .
1671	ParseConfig parses a config file .
1672	problemInFiles returns a map of problems in a repository .
1673	NewPodLogArtifact creates a new PodLogArtifact
1674	CanonicalLink returns the canonical link
1675	ReadAt implements the PodLogArtifact interface .
1676	ReadAll returns the logs for the artifact .
1677	ReadAtMost is part of the Artifact interface .
1678	ReadTail is part of the Artifact interface .
1679	newProblems takes a list of ProblemComment and returns a map of ProblemTags .
1680	problemInFiles returns a map of problems in a repository .
1681	undoPreset is used to undo a preset from a preset
1682	undoPresubmitPresets is used to undo a presubmit .
1683	YamlBytesStripNulls is the same as yamlBytes .
1684	monitorDiskAndEvict is called when a disk is evicted .
1685	difference returns the difference of two repositories .
1686	union returns the union of two repositories .
1687	clearStaleComments is used to delete stale comments .
1688	determineReleaseNoteLabel returns the release note label
1689	getReleaseNote extracts the release note from the body .
1690	NewClient returns a new Client .
1691	Acquire acquires a single resource and releases it .
1692	ReleaseOne releases a single resource
1693	UpdateAll updates all the status of a client .
1694	GetGitHubClient returns github client
1695	GetUsername gets the username of github user
1696	CreateTokenHandler creates a new TokenHandler
1697	CreateTokenHandlers creates tokens handlers
1698	String returns the string representation of the jobIndentifier .
1699	TerminateOlderPresubmitJobs terminates the presubmit job .
1700	PushMetrics sends metrics to the metrics pusher
1701	RateLimiter returns a RateLimiter with the given controller name .
1702	checkExistingStatus checks the status of a pull request
1703	checkExistingLabels checks if a repository exists in the repository .
1704	handle is the main entry point for deletion .
1705	MarkdownSHAList is a helper function for MarkdownSHAList .
1706	PathForSpec returns the path for the given repo spec
1707	AliasForSpec returns the alias for the given job spec
1708	RootForSpec returns the root path for the given job spec
1709	NewSingleDefaultRepoPathBuilder returns a repository path builder .
1710	NewExplicitRepoPathBuilder returns a repository path builder .
1711	RegisterSourceOrDie registers a source with the given name .
1712	CreateAndSync synchronously synchronously synchronously synchronously synchronously .
1713	loadCache loads the given user from the current user .
1714	setIntersect is used to set the intersection of a and b .
1715	sync returns true if the issue has been synced .
1716	GetAWSCreds gets the AWS credentials for a resource
1717	scope returns a channel that will be closed when a SIGTERM is received .
1718	newPipelineConfig creates a new pipeline config
1719	KubeClient returns kubernetes client
1720	ProwJobClient returns the client for the Kubernetes API
1721	resolveSymLink is used to resolve a symLink
1722	readJSON - decodes JSON data into an object .
1723	listSubDirs lists all subdirectories for a given prefix .
1724	listAll lists all objects in a bucket .
1725	listBuildIDs returns a list of GCS keys .
1726	FilterProfilePaths returns a list of profiles that match the given paths .
1727	LoadSecrets loads the secrets from the given paths .
1728	LoadSingleSecret loads a single secret from a file
1729	Set sets a bool value .
1730	NewOpener creates a new Openener
1731	IsNotExist returns true if the given error is a NotExist error .
1732	LogClose closes the underlying io . Closer
1733	Writer returns an io . WriteCloser
1734	InitGitHubOAuthConfig initializes GitHubOAuthConfig
1735	DeltaDisplayed returns a string describing the delta .
1736	makeTable converts baseCovList to a table .
1737	ContentForGitHubPost is the same as ContentForGitHubPost .
1738	AddFlags adds flags related to OAuth
1739	CheckFlags returns an error if client is not set .
1740	getGitHubClient returns github client
1741	LimitsCheckAndWait checks if the current rate limits are reached .
1742	FetchIssues fetches all issues from the given channel .
1743	hasID returns true if the given issue events have the given ID .
1744	FetchIssueEvents fetches all issue events from a given channel .
1745	isPRChanged returns true if the pull request was changed .
1746	NewFetcher creates a new Fetcher .
1747	fetchRecentIssues retrieves all issues from the database .
1748	fetchRecentEventsAndComments fetches the issue - events and comments from the database .
1749	Fetch fetches data from the Fetcher .
1750	Issues returns a list of issues for a flaky job .
1751	Title returns the flaky job name .
1752	Labels returns a list of labels
1753	ReadHTTP is part of the http . Request interface .
1754	String returns the string representation of the line .
1755	NewJobSpec returns an initialized JobSpec
1756	ResolveSpecFromEnv returns JobSpec from env
1757	EnvForSpec returns a map of environment variables for a job spec
1758	EnvForType returns the environment variables for the given job type .
1759	getRevisionFromRef gets revision from refs
1760	GetRevisionFromSpec returns the revision from the given JobSpec
1761	helpProvider returns plugin help .
1762	load loads the repo from the given reader .
1763	loadPaths loads the Paths from r .
1764	Match returns true if the path matches the given path .
1765	CreateDatabase creates a new InfluxDB database .
1766	mergeTags merges the default tags with extraTags .
1767	tagsToWhere converts a map into a WHERE clause .
1768	Push adds a new point to the database .
1769	ifact returns a lens artifact for the given job ID .
1770	serve serves prometheus metrics .
1771	gankGatherer is a long running goroutine that collects metrics
1772	makeRequest creates a new branch protection request .
1773	makeReviews makes a github pull request review
1774	Header is a helper function that returns the full content of the lens
1775	Callbackback is part of the lens . Artifact interface .
1776	logLinesAll reads log lines from artifact .
1777	executeTemplate executes template .
1778	DeepCopyObject returns a copy of this resource object .
1779	FromItem converts a ResourceObject to a ResourceObject .
1780	SetItems sets the items in the collection
1781	DeepCopyObject returns a copy of this resource collection .
1782	useContext runs the kubectl command
1783	currentContext executes the current - context command
1784	command is a wrapper around exec . Cmd .
1785	describeCluster is used to describe a cluster
1786	Set appends a string slice to the slice .
1787	parseXML parses the XML body into gcsDir .
1788	Render render
1789	Render renders a record
1790	Render renders a prefix
1791	Printf implements the fmt . Printf interface .
1792	NewClient returns a new instance of Gerrit Client
1793	SetReview is part of the Gerrit interface .
1794	GetBranchRevision returns the revision for a given branch
1795	queryAllChanges returns a list of changes for the given project .
1796	NewTypeFilterWrapperPlugin creates a TypeFilterWrapperPlugin .
1797	AddFlags adds flags related to TypeFilterWrapperPlugin
1798	CheckFlags returns an error if the plugin is not valid .
1799	AddFlags adds flags related to Kubernetes client to the specified FlagSet .
1800	Validate checks validation of KubernetesClientOptions
1801	Client returns a ClientInterface for the given type
1802	newCRDClient creates a RESTClient
1803	createRESTConfig creates a rest . Config object from kubeconfig
1804	registerResource is used to register a resource
1805	newDummyClient returns a dummy client .
1806	Update updates a dummy object
1807	TrustedPullRequest checks to see if there is a pull request .
1808	buildAll is responsible for generating all pending jobs .
1809	Run runs the command
1810	AddConfig implements Storage .
1811	DeleteConfig removes a config from storage .
1812	UpdateConfig updates storage .
1813	GetConfig implements Storage . GetConfig .
1814	GetConfigs implements Storage . GetConfigs .
1815	SyncConfigs synchronously synchronizes the given configs .
1816	addKnownTypes adds known types to the scheme .
1817	NewController returns a new instance of Controller .
1818	Run runs the controller
1819	addBlockingPresubmits takes a set of presubmits and returns a map of presubmits .
1820	removeBlockingPresubmits returns a map of blocked presubmits that were removed from the repository .
1821	migratedBlockingPresubmits returns a map of presubmissions that have been migrated .
1822	Load loads the config from the loader
1823	canExecuteConcurrent returns true if the prow job is running .
1824	getJenkinsJobs returns a list of jenkins jobs .
1825	terminateDupes cancels all pending jobs .
1826	Throttle implements gorp . Throttle
1827	NewClientWithFields returns a new instance of Github Client
1828	NewClient creates a new Graphql client
1829	NewDryRunClient creates a new dry run client .
1830	NewFakeClient returns a new Client instance .
1831	request sends a request and decodes the response .
1832	requestRaw is used to send a raw request to the client
1833	Get user data .
1834	readPaginatedResultsWithValues is the same as ReadPaginatedResults but returns the result .
1835	UpdatePullRequest updates a pull request .
1836	getLabels returns a list of labels .
1837	stateCannotBeChangedOrOriginalError returns a copy of the error if any .
1838	IsMergeable checks if given org is mergeable .
1839	Token returns the current access token .
1840	ListArtifacts returns a list of artifact names .
1841	KeyToJob extracts the job name from src and buildID .
1842	rpToGCS returns the GCS path to the GCS file
1843	FetchArtifacts fetches artifacts from the given src and returns them .
1844	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new DecorationConfig .
1845	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new GCSConfiguration .
1846	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new JenkinsSpec .
1847	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new ProwJob .
1848	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new ProwJobList .
1849	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new ProwJobSpec .
1850	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new ProwJobStatus .
1851	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new Pull .
1852	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new Refs .
1853	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new UtilityImages .
1854	upload a resultstore to the specified target
1855	ApplyDefault returns a new DecorationConfig with default values .
1856	Validate validates the DecorationConfig .
1857	ApplyDefault returns the result of applying the given utility images .
1858	ApplyDefault returns a new GCSConfiguration with default values .
1859	Validate validates the GCS configuration
1860	ClusterAlias returns the alias for the job
1861	NewResource creates a new Resource .
1862	NewResourcesFromConfig returns a list of resource names from the given config
1863	UserDataFromMap converts a UserDataMap into UserData .
1864	Set implements the flag . Value interface .
1865	UnmarshalJSON - decodes JSON data into UserData
1866	Extract unmarshals a UserDataNotFound object .
1867	Set implements UserData interface .
1868	Update updates UserData
1869	ToMap converts UserData to UserDataMap
1870	FromMap sets UserDataMap
1871	ItemToResource converts an Item into a Resource .
1872	Run is the main entry point
1873	addSSHKeys adds ssh - agent keys to ssh - agent
1874	Issances returns a list of issues for a given creator .
1875	loadClusters loads clusters from json
1876	parseTriageData parses JSON into triage data
1877	topClusters returns a slice of clusters with count .
1878	topJobsFailed returns a list of jobs that have been completed .
1879	Title returns the title of the cluster
1880	Labels returns the labels of the cluster .
1881	New creates a new cron client
1882	QueuedJobs returns a list of executed jobs
1883	HasJob checks if a job exists
1884	addJob adds a cron job to the cron agent
1885	removeJob removes a job from the cron agent
1886	UpdateComments updates the comments for an issue .
1887	GatherProwJobMetrics gets a set of metrics for each job
1888	new optionOrDefault returns the default value if it is set .
1889	newGCSJobSource returns a new job source .
1890	Returns a list of artifacts for a given GCS artifact
1891	canonicalLink returns the canonical link .
1892	jobPath returns the path to the job source .
1893	targetURL returns the target URL for the pull request .
1894	newBuildConfig creates a new build config
1895	NewClient returns a new Github API client
1896	retry is used to retry a single attempt
1897	depaginate is part of github . Interface .
1898	NewHelpAgent creates a new HelpAgent .
1899	GeneratePluginHelp generates and returns plugin help .
1900	getPullCommitHash returns the hash of a commit
1901	listJobBuilds lists all jobs for a given job prefixes .
1902	getPRBuildData - get build data for given bucket .
1903	getGCSDirsForPR returns the GCSDirs for the given repository
1904	imageDeleteFromDisk deletes the image file from disk
1905	doNetworksCreate creates a network .
1906	networkLoadByName loads a network by name .
1907	Transaction adds a transaction to the database .
1908	ForLocalInspectionWithPreparedStmts creates a Cluster with prepared stmts .
1909	SetDefaultTimeout sets the default timeout .
1910	Transaction adds a transaction to the cluster .
1911	EnterExclusive creates a new exclusive lock on cluster db .
1912	ExitExclusive releases an exclusive lock on the database .
1913	Close closes the cluster .
1914	TxCommit commits a transaction .
1915	ParseRemote takes a raw string and returns the default remote value
1916	GetContainerServer is part of the ContainerServer interface .
1917	GetImageServer returns an ImageServer for the given name .
1918	initAppArmor initializes the application armor .
1919	appArmorCanStack returns true if the apparmor stack is available .
1920	containerDeviceAdd adds a container to the container
1921	profileDeviceAdd adds a device to the container
1922	ensureImageAliases ensures that the image aliases are created
1923	GetExistingAliases returns an array of all aliases matching the given aliases .
1924	String representation of StatusCode
1925	images get expired
1926	ImageSourceInsert inserts an image into the database .
1927	ImageSourceGet returns the image source for the specified image ID .
1928	ImageExists checks if a given image exists in the database .
1929	ImageGet gets a single image by fingerprint .
1930	ImageGetFromAnyProject returns the image with the given fingerprint .
1931	imageFill fill image
1932	ImageLocate returns the local address of the cluster .
1933	ImageAssociateNode associates a node with the specified fingerprint .
1934	ImageDelete removes an image from the database .
1935	ImageAliasesGet returns a list of all images matching the specified project .
1936	ImageAliasGet gets the metadata for a project .
1937	ImageAliasRename rename image aliases
1938	ImageAliasDelete deletes an existing image .
1939	ImageAliasesMove moves image to the specified destination .
1940	ImageAliasAdd adds an image to the database .
1941	ImageAliasUpdate updates an existing image .
1942	ImageLastAccessUpdate updates the last access update .
1943	ImageLastAccessInit initializes image last access .
1944	ImageUpdate updates an image
1945	ImageInsert inserts a new image into the cluster .
1946	ImageGetPools returns a slice of pool IDs .
1947	ImageGetPoolNamesFromIDs returns a list of pool names from a pool
1948	ImageUploadedAt updates an existing image .
1949	ImagesGetOnCurrentNode returns a map of images on the node .
1950	ImagesGetByNodeID returns a map of images by node ID .
1951	ImageGetNodesWithImage returns a slice of nodes with the given fingerprint .
1952	ImageGetNodesWithoutImage returns a slice of nodes without fingerprint .
1953	Add adds a new task to the group .
1954	Start starts the group .
1955	zfsIsEnabled returns true if zfs is enabled
1956	zfsToolVersionGet returns the zfs tool version .
1957	zfsModuleVersionGet returns the zfs module version .
1958	zfsPoolVolumeCreate creates a zfs pool volume
1959	zfsPoolVolumeExists checks if a volume exists
1960	NetworkIDsNotPending returns a map of network IDs not pending .
1961	NetworkConfigAdd adds a network config to the database .
1962	NetworkNodeJoin is part of the Network interface .
1963	NetworkCreatePending creates a network .
1964	NetworkCreated is defined on the Network interface .
1965	NetworkErrored is part of the Network interface .
1966	NetworkGet retrieves a network by name .
1967	networkNodes returns a list of nodes in the cluster .
1968	NetworkGetInterface gets network interface
1969	NetworkConfigGet returns the network configuration for a node .
1970	NetworkCreate creates a new network .
1971	NetworkUpdate updates a network .
1972	NetworkUpdateDescription updates a description of a network .
1973	NetworkConfigClear clears the network_config .
1974	NetworkDelete removes a network from the database .
1975	NetworkRename renames an existing network .
1976	GetContainers returns all containers
1977	GetContainersFull returns all containers .
1978	GetContainer retrieves a container by name .
1979	CreateContainerFromBackup creates a container
1980	CreateContainer creates a container
1981	CreateContainerFromImage creates a container from an image
1982	UpdateContainer updates a container .
1983	RenameContainer renames a container
1984	ExecContainer executes a container
1985	GetContainerFile returns the contents of a container
1986	CreateContainerFile creates a container file
1987	DeleteContainerFile deletes a container file
1988	GetContainerSnapshotNames returns the names of all images in a container
1989	GetContainerSnapshots returns a list of all snapshots for a container
1990	GetContainerSnapshot returns a snapshot of a container
1991	CreateContainerSnapshot creates a snapshot of a container
1992	MigrateContainerSnapshot is part of the Container interface .
1993	UpdateContainerSnapshot updates a container .
1994	GetContainerState retrieves a container state by name .
1995	UpdateContainerState updates a container state .
1996	GetContainerLogfiles returns all logfiles for a container
1997	GetContainerLogfile retrieves a logfile from a container .
1998	GetContainerMetadata gets container metadata
1999	SetContainerMetadata updates container metadata
2000	GetContainerTemplateFiles returns all the templates for a container
2001	CreateContainerTemplateFile creates a container template
2002	DeleteContainerTemplateFile deletes a container template
2003	ConsoleContainer runs the console container
2004	GetContainerConsoleLog returns a stream of console logs
2005	DeleteContainerConsoleLog deletes the console log .
2006	GetContainerBackups returns all backups for a container
2007	GetContainerBackup returns the backup of a container
2008	CreateContainerBackup creates a new container backup
2009	RenameContainerBackup rename container backup
2010	DeleteContainerBackup deletes a container backup
2011	GetContainerBackupFile returns the backup file for a container
2012	RsyncSend sends data to rsync .
2013	patchGetNames returns a list of patch names .
2014	patchRenameCustomVolumeLVs replaces all volumes with the specified name .
2015	patchLvmNodeSpecificConfigKeys updates the Lvm pool config keys for the given name .
2016	GetHTTPClient returns the HTTP client
2017	send request
2018	RawQuery performs a raw query
2019	RawWebsocket returns the websocket connection for the given path .
2020	RawOperation is part of Interface .
2021	ProfileToAPI converts a profile to an api . Profile .
2022	Profiles returns a list of all the profiles in the database .
2023	ProfileGet gets a profile by name .
2024	ProfilesGet returns a list of profiles .
2025	ProfileConfig returns a map of profiles .
2026	ProfileConfigClear clears the profile_device_config_id .
2027	ProfileConfigAdd adds a config to the database .
2028	ProfileContainersGet returns a map of containers with the specified profile .
2029	ProfileCleanupLeftover deletes all profiles in the database .
2030	ProfilesExpandConfig returns a map of profile configs .
2031	ProfilesExpandDevices converts the list of devices to a slice of devices .
2032	GetServer is part of the ProtocolLXD interface .
2033	UpdateServer updates a server
2034	HasExtension checks if a given extension is present in the LXD
2035	GetServerResources retrieves the server s resources .
2036	UseProject returns a new instance of ProtocolServer
2037	sqliteOpen opens a database at the given path .
2038	Rebalbalance returns a list of Raft nodes in the gateway .
2039	Promote is used to promote a node
2040	Purge removes a node from the database .
2041	List returns a list of raft nodes .
2042	Count returns the number of nodes in the database .
2043	Enabled checks if the node is enabled .
2044	MembershipCheckNodeStateForBootstrapOrJoin checks if the raft node has a bootstrap or not
2045	MembershipCheckClusterStateForBootstrapOrJoin checks if a node exists in the cluster
2046	MembershipCheckClusterStateForAccept returns an error if the given node is not enabled .
2047	MembershipCheckClusterStateForLeave checks if a node is in a member of a node
2048	MembershipCheckNoLeftoverClusterCert checks if a cluster certificate exists .
2049	ConfigLoad loads a node config from the database .
2050	Replace replaces the values in the provided map .
2051	Patch adds a patch to the configuration .
2052	HTTPSAddress returns the HTTPS address for a node .
2053	CertificatesGet returns all certificates in the cluster .
2054	CertificateGet returns information about a certificate .
2055	CertSave saves a certificate .
2056	CertDelete removes a certificate from the database .
2057	CertUpdate updates a certificate .
2058	createDevLxdlListener creates a net . Listener for the given directory .
2059	Servers implements the Instance interface .
2060	Shutdown gracefully shuts down the raft instance .
2061	raftNetworkTransport creates a raft . Transport for a raft node .
2062	raftConfig returns a new raft config with the given latency .
2063	raftMaybeBootstrap is used to bootstrap a raft cluster
2064	CPUResource returns CPU CPU processor .
2065	MemoryResource returns the memory of the kernel .
2066	GetOperationUUIDs returns a list of operation UUIDs
2067	GetOperations retrieves all operational operations
2068	GetOperation returns the operation for the given UUID
2069	GetOperationWebsocket returns the websocket connection for the given UUID .
2070	tryMount attempts to mount a mount point .
2071	lxdUsesPool checks if a pool exists in the database
2072	ProjectURIs returns the UIs for a project .
2073	ProjectList returns all projects matching the filter .
2074	ProjectGet retrieves a project by name .
2075	ProjectExists checks if a project exists .
2076	ProjectCreate creates a new project .
2077	ProjectUsedByRef returns a map of projects used by a given filter .
2078	ProjectRename is used to rename a project .
2079	ProjectDelete deletes a project .
2080	PasswordCheck checks if the password is valid
2081	LoadCert loads a certificate from a directory
2082	WriteCert writes a certificate
2083	NewDaemon creates a new Daemon .
2084	DefaultDaemon returns a new instance of Daemon .
2085	AllowProjectPermission is a functional option that sets the permission for a project
2086	checkTrustedClient checks if the request is authenticated
2087	Authenticate checks if the request is valid
2088	State returns the current state of the daemon .
2089	UnixSocket returns the unix socket
2090	Stop terminates the database .
2091	setupExternalAuthentication configures external authentication .
2092	initializeDbObject initializes the local database object .
2093	WriteJSON marshals the given body to JSON
2094	EtagHash returns the etag hash of data .
2095	EtagCheck checks if the data matches if - match .
2096	HTTPClient returns a new http . Client for the given certificate .
2097	IsRecursionRequest returns true if the request is a recursion request
2098	GetListeners returns a list of net . Listener for the specified process
2099	internalSQLGet is used to get a database
2100	internalSQLPost handles internal SQL POST request .
2101	PublicKey returns public key
2102	PrivateKey returns PEM encoded private key
2103	Fingerprint returns the public key
2104	GenCert generates a new certificate
2105	PrintServerInfo prints information about the container server .
2106	LaunchContainers launches a container
2107	CreateContainers creates containers
2108	GetContainers returns a list of containers for the given container
2109	StartContainers starts containers
2110	setQueryParam is used to set a query parameter .
2111	GetImages returns all images
2112	GetImageFile gets the image file
2113	GetImageSecret returns image secret
2114	GetPrivateImage returns the private image for the given fingerprint .
2115	GetPrivateImageFile retrieves the private file associated with the given fingerprint .
2116	GetImageAliases returns all image aliases
2117	tryCopyImage attempts to copy the image from the source server
2118	CopyImage copies image from source to target server
2119	UpdateImage updates an image
2120	DeleteImage deletes an image
2121	Refresh an image
2122	CreateImageAlias creates an image alias
2123	UpdateImageAlias updates an image alias
2124	RenameImageAlias renames an image alias
2125	DeleteImageAlias deletes an image alias
2126	Open opens the named database .
2127	EnsureSchema is part of the database .
2128	FilesystemDetect returns the string representation of a filesystem .
2129	Schema returns a new Schema .
2130	updateFromV37 fetches the raft node information from vz .
2131	SchemaGetLocal returns the architecture .
2132	NewController creates a new MAAS controller .
2133	CreateContainer creates a container .
2134	DefinedContainer is defined on the Container interface .
2135	UpdateContainer updates the container with the specified name .
2136	RenameContainer renames a container
2137	DeleteContainer deletes a container by name .
2138	Add adds a new update to the schema .
2139	ensureSchemaTableExists checks if a schema table exists .
2140	queryCurrentVersion returns the current version of the current version .
2141	ensureUpdatesAreApplied checks if a given update is applied .
2142	checkSchemaVersionsHaveNoHoles checks if a slice of version is missing
2143	checkAllUpdatesAreApplied returns an error if the given updates are not valid .
2144	formatSQL converts a statement to a string .
2145	GetAllXattr returns all extended attributes .
2146	GetErrno returns errno if err is errno .
2147	Uname creates a Utsname from a syscall .
2148	RegisterStmt registers SQL statement
2149	PrepareStmts is used to prepare a SQL statement .
2150	NewGateway creates a new gateway .
2151	DialFunc returns dqlite . DialFunc
2152	Shutdown shuts down the database gateway .
2153	Sync the database
2154	Reset resets the gateway .
2155	LeaderAddress returns the leader address
2156	waitLeadership waits for the raft node to become leader
2157	currentRaftNodes returns the current Raft nodes .
2158	cachedRaftNodes retrieves the raft node addresses from the database .
2159	dqliteMemoryDial returns a dial function that returns a dqlite . DialFunc .
2160	DqliteLog logs a message at level
2161	MetadataAsMap returns the metadata as a map
2162	MetadataAsOperation returns the metadata operation
2163	MetadataAsStringSlice returns the metadata as a slice of strings
2164	MetadataAsStruct unmarshals a struct into a struct
2165	Load the CSV report
2166	Write writes the CSV report to the file .
2167	AddRecord adds a record to the report .
2168	LoadConfig loads a config file .
2169	SaveConfig saves a config file to disk .
2170	Get returns an io . Reader for the given path .
2171	ConfigPath returns the path to the given paths .
2172	ServerCertPath returns the path to the server certificate .
2173	NewConfig creates a new Config
2174	checkForPreDumpSupport checks if the container is running
2175	preDumpLoop is part of the ContainerSource interface .
2176	newRoot creates a new root command
2177	APIExtensionsCount returns the number of API extensions .
2178	SelectURIs is a convenience function for SelectURIs .
2179	SelectStrings selects a set of values from a query .
2180	scanSingleColumn is used to scan a single column
2181	LazyHandler returns a handler that logs a record .
2182	Callers returns a copy of all registered callers .
2183	name returns the name of the call .
2184	TrimBelow returns a copy of the trace .
2185	TrimAbove removes trace from the trace .
2186	TrimBelowName returns the trace with the given name .
2187	TrimAboveName removes a trace from the trace .
2188	TrimRuntime removes the runtime from the runtime .
2189	GetCaps returns the capabilities for the given path .
2190	SetCaps sets the capabilities for the given path .
2191	Read implements ProgressReader .
2192	Supported returns true if path is supported
2193	GetProject returns the project identified by path .
2194	SetProject sets the project id .
2195	DeleteProject deletes a project .
2196	GetProjectUsage returns the project usage for the specified id .
2197	SetProjectQuota sets the quota for the project
2198	backupLoadByName returns a backup with the given name .
2199	backupCreate creates a backup .
2200	Rename renames a backup
2201	Delete deletes the backup .
2202	backupFixStoragePool updates the storage pool
2203	Count returns the number of rows in the database .
2204	CountAll returns the count of all tables in the database .
2205	InitTLSConfig returns a tls . Config with default values .
2206	copyContainerThinpool creates a copy of the given container .
2207	copyContainerLv copies the container to the target container
2208	copyContainer copies a container into targetPool .
2209	copyVolume copies the volume to the pool .
2210	GetPrivateImage returns private image
2211	GetPrivateImageFile is not supported
2212	GetImageAliasNames returns a list of image aliases
2213	ProtoRecv decodes a proto message from a WebSocket connection .
2214	ProtoSend sends a message to the websocket .
2215	ProtoSendControl sends a message to the websocket connection .
2216	Read implements the io . Reader interface .
2217	doContainersGetFromNode is used to get containers from a node
2218	Retry attempts to retry the database .
2219	IsRetriableError returns true if err is a retriable error .
2220	AppArmorProfile returns the current app armor profile
2221	StoragePoolVolumeCreate creates a new storage pool volume
2222	ContainerStorageReady returns true if the container is ready to be ready to be running .
2223	ContainerCreateFromImage creates a storage volume from a container
2224	ContainerSnapshotRename renames a snapshot volume .
2225	ContainerSnapshotCreateEmpty creates a snapshot volume for the given snapshot container
2226	bfsSubVolumesDelete deletes the volume from btrfs .
2227	isBtrfsSubVolume returns true if the subvolume is a btrfs subvolume .
2228	SelectConfig is used to select a set of parameters
2229	UpdateConfig updates a set of values in the database .
2230	deleteConfig removes the given keys from the database .
2231	FormatSection takes a string and converts it to a string .
2232	GetProjects returns all projects
2233	GetProject retrieves a project by name .
2234	CreateProject creates a new project
2235	UpdateProject updates a project .
2236	RenameProject rename a project
2237	Read implements io . Reader interface .
2238	Write implements io . Writer
2239	NewCanceler returns a new Canceler
2240	Cancelable returns true if the request is canceled .
2241	Cancel cancels the operation
2242	CancelableDownload cancels a request .
2243	clusterGet returns information about a cluster .
2244	clusterGetMemberConfig returns the configuration for a cluster .
2245	clusterPutDisable is used to disable the cluster
2246	tryClusterRebalance attempts to reconnect to the cluster .
2247	internalClusterPostRebalance is used to update a cluster
2248	internalClusterPostPromote is used to promote a node
2249	Filters returns a list of filters for the given entity .
2250	Parse parses the given declaration and returns a mapping .
2251	findStruct returns the type with the given name or nil if not found .
2252	parseStruct parses a struct into a slice of fields .
2253	GetProfileNames returns a list of profiles .
2254	GetProfiles returns a list of profiles
2255	GetProfile retrieves a profile by name .
2256	CreateProfile creates a profile
2257	UpdateProfile updates a profile .
2258	RenameProfile renames a profile
2259	Load loads a map from a given schema .
2260	Dump returns the value of a map
2261	GetRaw returns the value for a given key .
2262	GetString returns a string value from the map
2263	GetBool gets a bool from the map
2264	GetInt64 gets the int64 value from the map .
2265	update updates the map with the given values .
2266	set sets the value for the given key .
2267	DoesSchemaTableExist checks if a schema table exists .
2268	selectSchemaVersions returns a slice of all the versions in the database .
2269	selectTablesSQL is used to select SQL statements from the database .
2270	createSchemaTable creates a new table .
2271	insertSchemaVersion inserts a new version in the database .
2272	NewState returns a new State instance .
2273	containerLXCUnload unloads the containerLXC .
2274	containerLXCInstantiate instantiates a new containerLXCInstantiate instance .
2275	initStorage initializes the storage .
2276	OnNetworkUp implements ContainerLXC . OnNetworkUp .
2277	setupHostVethDevice initializes the host side device
2278	getLxcState returns the container s state
2279	StorageStartSensitive is part of the ContainerLXC interface .
2280	deviceExistsInDevicesFolder checks if a given device exists in the given path .
2281	Create disk device
2282	Set network routes
2283	Path returns the path of the container
2284	MaasInterfaces returns a slice of interfaces for the containerLXC .
2285	getSystemHandler returns the system handler .
2286	findNvidiaMinor returns the name of the kernel .
2287	GetLogger returns a new logger instance .
2288	SetLogger sets the logger
2289	WaitRecord blocks until the given channel is closed .
2290	AddContext adds a logger to the logger .
2291	NewDottedVersion creates a new DottedVersion from a string .
2292	Parse parses a string into a DottedVersion .
2293	String returns a string representation of the DottedVersion .
2294	Compare returns 0 if other is equal to other .
2295	projectCreateDefaultProfile adds the default profile to the database .
2296	projectChange is used to change a profile
2297	projectIsEmpty checks if project is empty
2298	GetCertificateFingerprints returns a list of certificate fingerprints
2299	GetCertificates returns a list of all certificates
2300	GetCertificate returns the certificate for the given fingerprint .
2301	CreateCertificate creates a new certificate
2302	UpdateCertificate updates a certificate .
2303	DeleteCertificate deletes a certificate
2304	containerMetadataTemplatesGet returns a list of template templates
2305	containerMetadataTemplatesPostPut posts a container template
2306	containerMetadataTemplatesDelete deletes a container template .
2307	getContainerTemplatePath returns the path to the container s templates .
2308	Error implements Error interface .
2309	Error returns a string representation of the ErrorList .
2310	add adds a new Error to the list .
2311	UpdateSchema updates the database schema
2312	doProfileUpdateCluster is used to update a profile change
2313	doProfileUpdateContainer updates the container with the given name and node name .
2314	getProfileContainersInfo returns the list of containers for the specified profile .
2315	GetNetworkNames returns a list of network names
2316	GetNetworks returns a list of networks
2317	GetNetwork retrieves a network by name .
2318	GetNetworkLeases returns a list of network leases
2319	GetNetworkState retrieves network state by name .
2320	CreateNetwork creates a new network
2321	UpdateNetwork updates a network .
2322	RenameNetwork renames a network
2323	Open opens a database .
2324	URLEncode encodes a map into a URL query string .
2325	IsUnixSocket returns true if path is a Unix socket
2326	HostPath returns the host path
2327	FileMove moves a file to a new path .
2328	DirCopy copies source to destination directory
2329	StringMapHasStringKey returns true if the given map contains a string map
2330	TextEditor returns the text editor for the given content
2331	WriteTempFile writes a temp file .
2332	RenderTemplate renders template
2333	Every returns a schedule that runs every interval .
2334	StoragePoolMount returns true if the pool is mounted .
2335	Dump dumps the given schema .
2336	dumpTable returns the SQL statement for a given table .
2337	ProjectHasProfiles returns true if a project has profiles .
2338	ProjectNames returns all project names .
2339	ProjectMap returns a map of project IDs .
2340	ProjectHasImages returns true if the specified image exists in the database .
2341	ProjectUpdate updates a project .
2342	GetCluster returns the cluster
2343	UpdateCluster updates a cluster
2344	GetClusterMemberNames returns a list of all cluster members
2345	GetClusterMembers returns cluster members
2346	GetClusterMember returns cluster member
2347	RenameClusterMember renames a member
2348	Disconnect disconnects the listener and closes the listener .
2349	CompareVersions compares two versions .
2350	HasClientCertificate returns true if client certificate has a client certificate
2351	GenerateClientCertificate generates a client certificate
2352	LoadModule loads a module
2353	Parse parses a gogo package .
2354	PprofAddress returns the address of the endpoint .
2355	Update the endpoint
2356	NewMethod returns a new Method instance
2357	Generate generates a new method
2358	fillSliceReferenceField fills the fields of a slice of fields .
2359	StoragePoolID returns the ID of a storage pool .
2360	StoragePoolIDsNotPending returns a map of pool IDs not pending .
2361	StoragePoolNodeJoin adds a new node to the pool .
2362	StoragePoolNodeJoinCeph adds a node to the cluster pool .
2363	StoragePoolConfigAdd adds a new config to the database .
2364	StoragePoolCreatePending creates a new storage pool .
2365	StoragePoolCreated creates a new storage pool .
2366	StoragePoolErrored is part of the interface .
2367	StoragePoolNodeConfigs returns the configuration for a storage pool .
2368	StoragePoolsGetDrivers returns a list of all storage_pools .
2369	StoragePoolGetID gets the ID of a pool .
2370	StoragePoolGet gets the storage pool by name .
2371	storagePoolNodes returns a slice of node names .
2372	StoragePoolConfigGet returns the configuration for a storage pool
2373	StoragePoolCreate creates a new storage pool .
2374	storagePoolConfigAdd adds a new storage pool config to the database .
2375	StoragePoolUpdate updates a pool
2376	StoragePoolConfigClear clears the storage pool config .
2377	StoragePoolDelete deletes a storage pool
2378	StoragePoolVolumesGetNames returns a slice of volume names .
2379	StoragePoolVolumesGet returns the volumes for the specified pool .
2380	StoragePoolNodeVolumesGet returns a list of available storage volumes .
2381	storagePoolVolumesGet returns the list of volumes for the specified pool .
2382	StoragePoolVolumesGetType returns the volume type for the specified pool
2383	StoragePoolVolumeSnapshotsGetType returns a slice of volume snapshots .
2384	StoragePoolNodeVolumesGetType returns the volume type of the pool
2385	StoragePoolVolumeGetType returns the storage pool volume type .
2386	StoragePoolNodeVolumeGetType returns the type of pool node volume
2387	Storage pool volume
2388	StoragePoolVolumeUpdate updates the volume configuration for the specified volume
2389	Delete storage pool volume
2390	StoragePoolVolumeRename renames an existing volume .
2391	storagePoolVolumeReplicateIfCeph is used to overwrite a volume with the given volumeID .
2392	StoragePoolVolumeCreate creates a new storage pool volume .
2393	StoragePoolVolumeGetTypeID returns the volume s volume ID .
2394	StoragePoolNodeVolumeGetTypeID returns the type of a node
2395	StoragePoolVolumeTypeToName returns the name of the volume type .
2396	DevicesAdd adds a new device to the database .
2397	Devices returns the devices for the specified project
2398	Patches returns a list of patches .
2399	PatchesMarkApplied adds a patch to the database .
2400	entityType returns the entity type of the entity .
2401	entityPost generates a post for a given entity
2402	stmtCodeVar generates code var for given entity kind .
2403	destFunc returns a string representation of a struct .
2404	CompareConfigs compares two configs .
2405	CopyConfig returns a copy of the given config map .
2406	NewNotifier returns a new instance of Notifier .
2407	Events runs the given function f for each given endpoint .
2408	eventsConnect creates a new event listener for the given address
2409	StoragePoolInit initializes the storage pool .
2410	getAAProfileContent - get the profile content
2411	AALoadProfile adds a profile to the container .
2412	AADestroy runs the given container .
2413	AParseProfile is part of the Container interface .
2414	getSystemHandler returns the system handler .
2415	NotifyUpgradeCompleted notifies the completed upgrade .
2416	KeepUpdated returns a function that is called when a task is updated .
2417	maybeUpdate checks if a cluster update is enabled
2418	NewServer creates a new server
2419	StartStatusCheck starts the server .
2420	SyncProjects syncs all projects in rbac
2421	AddProject adds a project to the database
2422	DeleteProject deletes a project .
2423	RenameProject renames a project .
2424	IsAdmin checks if user is admin
2425	HasPermission returns true if user has permissions for a given user
2426	rsyncSend is used to send data to the remote server
2427	rsyncSendSetup is used to send a sync command
2428	tlsClientConfig returns a tls . Config that can be used to authenticate clients .
2429	tlsCheckCert checks if the request certificate is valid
2430	internalClusterContainerMovedPost is called when a container is created .
2431	containerPostCreateContainerMountPoint creates container mount point
2432	Contains returns true if k is in the list .
2433	Update takes a list of devices and returns a map and a map of devices .
2434	DeviceNames returns a sorted list of device names .
2435	Infof logs an info message
2436	Debugf logs a formatted message
2437	Warnf logs a formatted message
2438	Errorf logs a formatted error message
2439	Critf logs a formatted message
2440	eventForward forwards an event to a node .
2441	StorageProgressReader is an implementation of the StorageProgressReader interface .
2442	StorageProgressWriter returns an io . WriteCloser for the operation .
2443	GetLSBRelease returns the contents of os . Release
2444	Reset resets GOPACKAGE .
2445	Append appends a snippet to target source code file .
2446	ContainerToArgs converts a container to a container .
2447	ContainerNames returns all containers in the specified project .
2448	ContainerNodeAddress returns the address of a container node .
2449	ContainersListByNodeAddress returns a map of containers by node ID .
2450	ContainerListExpanded returns a list of containers expanded .
2451	ContainersByNodeName returns all containers with the specified project name .
2452	SnapshotIDsAndNames returns a map of ID names for the given container name .
2453	ContainerNodeList lists all containers in the cluster .
2454	ContainerNodeProjectList returns a list of containers in the cluster .
2455	ContainerRemove removes a container .
2456	ContainerProjectAndName returns the project and its name .
2457	ContainerConfigClear clears the container s config .
2458	ContainerConfigGet returns the value for a container .
2459	ContainerConfigRemove removes a container config from the database .
2460	ContainerSetStateful sets the stateful for a container
2461	ContainerProfilesInsert inserts a list of profiles into the database .
2462	ContainerProfiles returns a list of all the profiles in the cluster .
2463	ContainerConfig returns the config for a container
2464	ContainerSetState sets the state of a container .
2465	ContainerUpdate updates a container .
2466	ContainerLastUsedUpdate updates the last use date .
2467	ContainerGetSnapshots returns a list of snapshots for a container
2468	ContainerGetSnapshotsFull returns a list of container containers .
2469	ContainerNextSnapshot returns the next snapshot of a container
2470	ContainerPool returns the name of the container pool .
2471	ContainerGetBackup returns the container s backup parameters .
2472	ContainerGetBackups returns a list of containers in the cluster .
2473	ContainerBackupCreate creates a container backup for a container
2474	ContainerBackupRemove removes a container backup from the database .
2475	ContainerBackupRename changes the name of a container backup .
2476	ContainerBackupsGetExpired returns all backups that have expired .
2477	DefaultOS returns an initialized OS .
2478	Init initializes the OS .
2479	GetWebsocket returns the websocket connection associated with the given secret .
2480	Refresh refreshes the current operation .
2481	CancelTarget cancels the target operation
2482	GetTarget returns the target operation
2483	up starts the endpoint
2484	Down closes all endpoints
2485	serveHTTP runs the HTTP server .
2486	closeListener closes the listener
2487	activateListeners returns a map of net . Listener that can be activated .
2488	CandidServer returns the server configuration for Candid .
2489	RBACServer returns the current RBAC server .
2490	AutoUpdateInterval returns the auto update interval .
2491	MAASController returns the MAAS controller .
2492	OfflineThreshold returns the offline threshold .
2493	ConfigGetString gets string value from cluster
2494	ConfigGetBool gets a bool from the cluster
2495	ConfigGetInt64 gets int64 from cluster
2496	ClusterAddress returns the cluster address
2497	Debug log message
2498	RestServer returns a http . Server that serves HTTP requests .
2499	projectParam returns the query parameter as a string .
2500	queryParam parses the given query parameter as a string .
2501	newDb creates a new database - related command
2502	Description returns the description of the OperationType .
2503	Permission returns the permission for the operation type
2504	OperationsUUIDs returns the IDs of all operations in the transaction .
2505	OperationNodes returns the operation names for the specified project .
2506	OperationByUUID returns an operation by UUID .
2507	OperationAdd adds a new operation to the database .
2508	OperationRemove removes the operation from the database .
2509	scopes returns all operations in a cluster .
2510	expireLogsTask is called when a log file expires
2511	absPath returns the absolute path of the file .
2512	Keys returns the keys of the schema .
2513	Defaults returns a map of default values .
2514	mustGetKey returns the Key if it exists .
2515	assertKeyType asserts the given key type and code .
2516	validate validates the given value .
2517	GetStoragePoolVolumes returns the list of volumes for a pool
2518	GetStoragePoolVolume returns a storage pool volume
2519	CreateStoragePoolVolume creates a new pool
2520	CreateStoragePoolVolumeSnapshot creates a volume snapshot
2521	GetStoragePoolVolumeSnapshots returns a list of snapshots for a pool
2522	GetStoragePoolVolumeSnapshot returns a volume snapshot for a pool
2523	UpdateStoragePoolVolumeSnapshot updates storage pool volume snapshot
2524	MigrateStoragePoolVolume is part of the StoragePoolVolume interface .
2525	MoveStoragePoolVolume moves a volume to a volume
2526	UpdateStoragePoolVolume updates storage pool
2527	DeleteStoragePoolVolume deletes a storage pool volume
2528	RenameStoragePoolVolume renames a volume
2529	doStoragePoolCreateInternal creates a new storage pool .
2530	containerGetParentAndSnapshotName returns the name of the parent snapshot name .
2531	containerLoadFromAllProjects loads all the containers in a project .
2532	containerLoadNodeAll is used to load all nodes .
2533	containerLoadNodeProjectAll is used to load all the nodes in a given project .
2534	heartbeatNode sends a heartbeat node
2535	dotPrefixMatch returns true if the prefix matches the full prefix .
2536	ContainerMount is part of the Storage interface .
2537	ContainerStorageReady returns true if the container is ready to be running .
2538	AskChoice asks for a given question and returns the results .
2539	AskInt asks for a question
2540	AskString asks a question and returns a string .
2541	AskPassword prompts for a given question .
2542	AskPasswordOnce prints the given question as a password .
2543	askQuestion is used to parse a question
2544	readAnswer reads the answer from stdin .
2545	profilePost posts a profile
2546	profileDelete deletes a profile
2547	IsRootDiskDevice returns true if device is a root disk device
2548	GetRootDiskDevice returns the root device
2549	ForwardedResponse returns a response that can be forwarded to a container server .
2550	ForwardedResponseIfTargetIsRemote is used to forward a request to a target node
2551	ForwardedResponseIfContainerIsRemote sends a response to a container and returns the response .
2552	ForwardedOperationResponse returns a response for a given operation
2553	Done is the interface implementation
2554	Update implements the interface method .
2555	Warn implements the interface
2556	UpdateProgress implements the interface method .
2557	UpdateOp updates the progress document
2558	updateFromV6 is used to update the ZFS configuration .
2559	localCreateListener returns a net . Listener for the given path
2560	NewStmt returns a new instance of Stmt .
2561	Generate adds a statement to the statement .
2562	register registers a statement .
2563	httpsLXD returns a ContainerServer that can be used to connect to a container .
2564	IsActive returns true if the container is active .
2565	RaftNodeAddress returns the address of a raft node .
2566	RaftNodeFirst sets the raft node ID .
2567	RaftNodeAdd adds a new address to the raft cluster .
2568	RaftNodeDelete removes a node from the raft index .
2569	RaftNodesReplace is used to replace a raft node .
2570	initCGroup initializes the cgroup
2571	sqliteDirectAccess is the SQLite . DirectAccess interface .
2572	ContainerGet gets a container by name
2573	ContainerID gets the ID of a container .
2574	ContainerExists checks if a container exists in the cluster
2575	ContainsFields returns true if the given fields contains the given fields .
2576	FieldByName finds a field by its name .
2577	FieldColumnName returns the column name for a field .
2578	FilterFieldByName returns the field by name .
2579	ColumnFields returns a slice of field names .
2580	SlicarFields returns a slice of all the fields of this mapping .
2581	RefFields returns all field values .
2582	Column returns the column name of the field .
2583	ZeroValue returns the zero value of the field .
2584	FieldColumns returns a string representation of a field .
2585	FieldArgs returns a string representation of the given fields .
2586	FieldParams returns a string representation of a field .
2587	FieldCriteria returns a string representation of a field .
2588	initDataClusterApply is used to update the cluster
2589	JsonFormatEx returns a format for the record .
2590	formatLogfmtValue converts a value to a logfmt value .
2591	ResolveTarget resolves the target of a cluster member .
2592	Write writes p to the progress writer .
2593	updateNodeVersion updates a node version .
2594	selectNodesVersions returns a list of all the versions in the database .
2595	GetArchitectures returns the architectures associated with the OS architecture .
2596	RuntimeLiblxcVersionAtLeast returns true if the golxc version is at least min and minor .
2597	GetExecPath returns the executable path .
2598	Connect connects to a container
2599	ConnectIfContainerIsRemote connects to a container and returns the connected container server .
2600	ConnectIfVolumeIsRemote connects to a cluster with the given volume name and volume name .
2601	SetupTrust is used to setup a trust node
2602	GetStoragePools returns all storage pools
2603	GetStoragePool retrieves a storage pool
2604	CreateStoragePool creates a storage pool
2605	UpdateStoragePool updates a storage pool
2606	DeleteStoragePool deletes a storage pool
2607	GetStoragePoolResources retrieves a storage pool by name .
2608	initDirs initializes the container dirs .
2609	Config is used to query the config .
2610	UpdateConfig updates an existing database configuration .
2611	Config is used to query the config .
2612	UpdateConfig updates a config .
2613	storagePoolClusterConfigForEtag returns the storage pool - cluster configuration for the given db config .
2614	GetEvents returns a new EventListener
2615	LogfmtFormat returns a format for logging .
2616	StorageVolumeNodeAddresses returns the addresses of a volume .
2617	StorageVolumeNodeGet returns the name of a volume node .
2618	StorageVolumeConfigGet gets the configuration for a volume .
2619	StorageVolumeDescriptionGet returns the description of a volume .
2620	StorageVolumeIsAvailable checks if the given volume is available on the cluster
2621	Update an existing storage_volumes .
2622	StorageVolumeConfigAdd adds a volume config to the database .
2623	StorageVolumeConfigClear clears the volume s config .
2624	storageVolumeIDsGet returns the ids for the specified volume .
2625	StorageVolumeCleanupImages removes all images from the storage pool .
2626	StorageVolumeMoveToLVMThinPoolNameKey deletes the volume s thin pool name .
2627	L writes a formatted string to the Buffer .
2628	code returns the code of the Buffer .
2629	Pretty renders a human - readable string .
2630	NetworkPublicKey returns the public key of endpoint .
2631	NetworkPrivateKey returns the private key for the endpoint
2632	NetworkCert implements Endpoint .
2633	NetworkAddress returns the endpoint s network address .
2634	NetworkUpdateAddress updates endpoint
2635	NetworkUpdateCert updates the endpoints .
2636	networkCreateListener creates a new net . Listener
2637	Accept implements net . Listener . Accept .
2638	Config sets the listener s configuration .
2639	IsOffline returns true if the node is offline
2640	NodeByAddress returns the node info for the given address .
2641	NodePendingByAddress returns the node info for the given address .
2642	NodeByName retrieves a node by name .
2643	NodeName returns the name of the node .
2644	NodeAddress returns the address of a node .
2645	NodeIsOutdated returns true if the node has expired .
2646	NodesCount returns the number of nodes in the database .
2647	NodeRename renames an existing node .
2648	nodes returns a list of nodes in the cluster .
2649	NodeAdd adds a new node to the database .
2650	NodePending updates the status of a node .
2651	NodeUpdate updates a node .
2652	NodeRemove removes a node from the database .
2653	NodeHeartbeat updates the heartbeat of a node .
2654	NodeIsEmpty checks if a node is empty
2655	NodeClear clears all images .
2656	NodeOfflineThreshold returns the time that a node is offline .
2657	NodeUpdateVersion updates a node s version .
2658	Transaction adds a transaction to the database .
2659	rollback rolls back a transaction .
2660	profile .
2661	ProfileGet retrieves a profile by name .
2662	ProfileExists checks if a profile exists .
2663	ProfileConfigRef returns a map of profile config reference
2664	ProfileUsedByRef returns a map of profile used by ref .
2665	ProfileCreate creates a profile .
2666	ProfileRename is used to rename a profile .
2667	ProfileDelete removes a profile from the database .
2668	ServerTLSConfig returns a tls . Config based on the provided CertInfo .
2669	NetworkInterfaceAddress returns the network interface address
2670	IsAddressCovered returns true if the two addresses are covered by the receiver
2671	SelectObjects is a convenience function for SelectObjects .
2672	DeleteObject deletes an object from the database .
2673	loop runs the task .
2674	IsTerminal returns true if the given file descriptor is a terminal .
2675	socketUnixListen creates a net . Listener for unix socket .
2676	socketUnixRemoveStale removes the stale socket from the given path .
2677	UnixSetPermissions sets permissions on the local socket
2678	UnixSetOwnership sets the ownership of the local socket
2679	cephOSDPoolExists returns true if ceph is enabled
2680	cephOSDPoolDestroy destroys the ceph environment
2681	cephRBDVolumeExists checks if a ceph RBD volume exists
2682	cephRBDSnapshotProtect is used to protect a snapshot
2683	cephRBDCloneCreate creates a clone of the cluster
2684	cephRBDSnapshotListClones returns a list of clones for a volume
2685	cephRBDVolumeMarkDeleted is used to mark a deleted volume .
2686	cephRBDVolumeUnmarkDeleted is called when a volume is deleted .
2687	cephRBDVolumeRename renames the Ceph RBD volume name
2688	cephRBDVolumeSnapshotRename renames an existing snapshot
2689	delete a snapshot
2690	cephRBDVolumeCopy copies a cephRBD volume to an existing volume
2691	cephRBDVolumeListSnapshots returns a list of snapshots for a volume
2692	getRBDSize returns beph s beph s size .
2693	getRBDFilesystem returns the block filesystem for the volume .
2694	copyWithoutSnapshotsFull creates a copy of the container with the given size .
2695	copyWithoutSnapshotsSparse creates a copy of an RBD storage volume .
2696	GetConfigCmd returns a cobra command for Pachyderm
2697	SetConfigCmd returns a cobra command for setting config
2698	NewSharder returns a new Sharder .
2699	NewRouter returns a new Router .
2700	renewUserCredentials renews user credentials .
2701	NewLocalClient creates a new local client
2702	AddSpanToAnyExisting adds a span to an existing context
2703	InstallJaegerTracerFromEnv installs Jaeger tracer from environment variables
2704	UnaryClientInterceptor returns a new unary client interceptor for the gRPC client .
2705	StreamClientInterceptor returns a new streaming client interceptor .
2706	UnaryServerInterceptor returns a new unary server interceptor .
2707	StreamServerInterceptor returns a new streaming server interceptor .
2708	CloseAndReportTraces calls CloseAndReportTraces .
2709	newWriter returns a new Writer .
2710	For implements Backend .
2711	Log implements the Logger interface .
2712	Format implements Formatter interface .
2713	NewGRPCLogWriter returns a new GRPCLogWriter
2714	Read reads the configuration from the config file
2715	Write writes the config to disk
2716	Read implements the io . Reader interface .
2717	Write implements the io . Writer interface .
2718	NewReadWriter returns a new ReadWriter .
2719	RunGitHookServer runs the git hook server
2720	newLoggingPipe creates a new pipe .
2721	Read implements the io . Reader interface .
2722	Write implements the io . Writer interface .
2723	Accept returns a connection to the listener .
2724	Close closes the listener
2725	errorf creates a hashTreeError with an error code .
2726	InitWithKube initializes a ServiceEnv
2727	GetEtcdClient returns the etcd client
2728	GetKubeClient returns a kubernetes client
2729	NewHasher creates a new Hasher .
2730	HashJob hashes a job
2731	HashPipeline returns the hash of the given pipeline
2732	Status returns the status of the pipeline
2733	Cancel cancels a job
2734	Conns returns a slice of gRPC client connections
2735	Clients returns a list of clients for a pipeline
2736	NewClient creates a new gRPC Client .
2737	RunFixedArgs is a wrapper for cobra . RunFixedArgs .
2738	RunBoundedArgs is a helper function for RunBoundedArgs .
2739	Run a cobra command
2740	ErrorAndExit prints an error and exits .
2741	ParseCommit parses a git commit
2742	ParseBranch parses a branch .
2743	ParseFile parses a file and returns a pointer to it
2744	Set appends s to s .
2745	SetDocsUsage sets the docs usage for the command
2746	makeCronCommits adds commits to cron spec
2747	Writer implements Client .
2748	Reader implements Client .
2749	Delete deletes a connection
2750	Walk calls the callback for each node in the namespace
2751	Exists checks if a given name exists
2752	GetBlock returns a block with the given hash .
2753	Health is part of the health server .
2754	split takes a path and returns a base dir and base .
2755	ValidatePath checks if the given path is valid .
2756	MatchDatum returns true if data matches the input file
2757	NewCacheServer returns a new instance of CacheServer .
2758	authorizePipelineOp checks if a pipeline operation is authorized
2759	sudo
2760	setPipelineDefaults sets default values for pipeline
2761	incrementGCGeneration increments GC generation .
2762	NewDebugServer returns a debug server .
2763	Health implements the Health interface .
2764	newObjBlockAPIServer returns a new instance of BlockAPIServer .
2765	watchGC watches for changes to etcd
2766	splitKey splits a key into a string
2767	NewWriter returns a new Writer .
2768	Write writes buf to the underlying writer .
2769	PrintRepoHeader prints repository header
2770	PrintRepoInfo prints repo info
2771	PrintDetailedRepoInfo prints detailed repo info
2772	PrintBranch prints a branch to w .
2773	PrintCommitInfo prints commit info to w .
2774	PrintDetailedCommitInfo prints a printable commit info
2775	PrintFileInfo prints to w .
2776	PrintDetailedFileInfo prints pfs . FileInfo
2777	Add adds a string to a string .
2778	RetryNotify is the same as RetryNotify .
2779	Get returns an io . WriteCloser for the given ID .
2780	Delete removes the entry from the cache .
2781	PrintJobInfo prints information about a job .
2782	PrintPipelineInfo prints pipeline info
2783	PrintWorkerStatus prints the status of a worker .
2784	PrintDetailedJobInfo prints detailed job info
2785	PrintDetailedPipelineInfo prints a PrintablePipelineInfo
2786	PrintDatumInfo prints datum info to w .
2787	PrintDetailedDatumInfo prints detailed information about a particular datum .
2788	PrintFile prints pfs . File to w .
2789	ShorthandInput returns a string representation of the shorthand input .
2790	Retrieve retrieves credentials from vault
2791	IsExpired returns true if the credentials provider has expired .
2792	NewBranch creates a new instance of a new branch
2793	NewCommit creates a new instance of pfs . Commit
2794	NewCommitProvenance creates a new CommitProvenance
2795	NewFile creates a new instance of pfs . File
2796	CreateRepo creates a repository
2797	InspectRepo returns information about a repository .
2798	ListRepo returns all repositories .
2799	DeleteRepo deletes a repository
2800	BuildCommit builds a new commit for a repository
2801	StartCommitParent is part of the APIClient interface .
2802	FinishCommit implements Pfs . FinishCommit
2803	InspectCommit is part of the APIClient interface .
2804	BlockCommit implements the BlockCommit interface for BlockCommit
2805	ListCommit lists commits
2806	ListCommitF is part of the APIClient interface .
2807	ListCommitByRepo lists commits by repository
2808	CreateBranch creates a new branch
2809	InspectBranch is part of the APIClient interface .
2810	ListBranch lists all branches in the APIClient
2811	SetBranch creates a new branch
2812	DeleteBranch deletes a branch
2813	DeleteCommit deletes a commit
2814	FlushCommit is part of the APIClient interface .
2815	FlushCommitF flushes all commits to a given function .
2816	FlushCommitAll flushes all commits .
2817	SubscribeCommit creates a CommitInfoIterator for the given repository and branch .
2818	SubscribeCommitF is part of the APIClient interface .
2819	PutObjectAsync implements APIClient . PutObjectWriteCloser .
2820	PutObject is part of the APIClient interface .
2821	PutObjectSplit is part of the APIClient interface .
2822	GetObject - get an object
2823	GetObjectReader implements PFSObjectReader interface
2824	GetObjects - get Objects
2825	TagObject adds tags to the APIClient .
2826	ListObject - lists all objects
2827	InspectObject is part of the APIClient interface .
2828	GetTag is part of the APIClient interface .
2829	GetTagReader returns a reader for a tag
2830	ListTag - lists all tags .
2831	Compact is part of the Object interface .
2832	NewPutFileClient returns a new PutFileClient .
2833	PutFileOverwrite writes data to a file .
2834	Close closes the underlying file .
2835	CopyFile copies a file
2836	GetFile implements API .
2837	GetFileReader returns a reader for the given commit ID .
2838	GetFileReadSeeker returns an io . ReadSeeker
2839	InspectFile is part of the APIClient interface .
2840	ListFile lists all files in the repository
2841	ListFileHistory lists all files in a given commit .
2842	ListFileF is part of the PFS interface .
2843	Walk walks the file at the given commitID .
2844	DeleteFile deletes a file
2845	Write implements io . Writer
2846	Close implements the PutObjectWriteCloser interface .
2847	PrettyPrintVersionNoAdditional returns a string representation of pb . Version .
2848	recursiveBlockQuoteExamples is a helper function that can be used to quote examples .
2849	errMissingField responds to a missing field .
2850	Validate fields
2851	putConfig stores the given config to the storage .
2852	getConfig retrieves a config from storage .
2853	Serve runs the gRPC server .
2854	NewPuller returns a new instance of Puller
2855	PullTree is used to pull a file tree
2856	Push adds a repo to a repository
2857	Push an object
2858	PushFile adds a file to a file
2859	Dump dumps the command to stdout
2860	Profile is part of the APIClient interface .
2861	Binary writes the binary representation of the binary
2862	RegisterCacheStats registers prometheus metrics to prometheus metrics
2863	wait waits for n times out .
2864	RunWorkload runs the given job with the given rand .
2865	createRepo creates a new repository
2866	advanceCommit adds a commit to the delegate .
2867	RandString returns a random string
2868	NewReader returns a new instance of io . Reader
2869	iterDir iterates over a single directory .
2870	FSSize returns the size of the hash tree .
2871	Diff implements the function in the interface DBHashTree .
2872	Serialize writes the hash tree to a writer .
2873	Deserialize deserializes the hash tree from the passed io . Reader .
2874	Copy returns a deep copy of the DBHashTree .
2875	Destroy closes the hash tree .
2876	PutFileOverwrite stores a file at the given path .
2877	PutDirHeaderFooter implements the BlockTree interface for DirNodeTree .
2878	PutFileHeaderFooter implements the HashTree interface .
2879	deleteDir deletes a directory at the given path .
2880	NewReader returns a new Reader reading from r .
2881	Read returns a MergeNode from the underlying Reader .
2882	NewWriter returns a new Writer .
2883	Write implements the Writer interface .
2884	Copy copies data from r into r .
2885	Index returns the contents of the index .
2886	GetRangeFromIndex returns the range of the given prefix .
2887	NewFilter returns a Filter that matches numTrees .
2888	PathToTree converts numTrees to numTrees .
2889	Merge merges the data from r into r .
2890	Hash implements the sql . HashTree interface .
2891	IsGlob returns true if the pattern matches a glob pattern .
2892	GlobLiteralPrefix returns the prefix of the given pattern .
2893	GetHashTreeObject - get a HashTree object
2894	GetHashTreeTag returns the HashTree for the given tag .
2895	PutHashTree serializes the hash tree using the provided tags .
2896	NewChildCursor creates a new child cursor .
2897	Next moves the cursor to the next item .
2898	NewOrdered returns a new instance of Ordered .
2899	MkdirAll implements the Ordered interface .
2900	PutDir implements the Ordered interface .
2901	Serialize writes the ordered to the given io . Writer .
2902	NewUnordered creates a new Unordered .
2903	Ordered returns a sorted ordered list of paths .
2904	revokeUserCredentials is used to revoke an auth token
2905	NewAPIServer returns a new APIServer .
2906	String returns a string representation of a version .
2907	getPipelineInfo gets the pipeline info
2908	removeStr removes a string from a slice .
2909	PublicCertToPEM converts a tls . Certificate to PEM
2910	GenerateSelfSignedCert is used to generate a self - signed certificate
2911	ActivateCmd returns a cobra command to activate Pachyderm
2912	DeactivateCmd returns a cobra command for Deactivate
2913	LoginCmd returns a cobra command for a Pachyderm command
2914	LogoutCmd returns a cobra command to logout credentials .
2915	WhoamiCmd returns the cobra command for whoami command
2916	CheckCmd returns cobra command for cobra command
2917	GetCmd implements the get command
2918	SetScopeCmd returns the set scope command
2919	ListAdminsCmd returns the list - admins command
2920	ModifyAdminsCmd returns a cobra command for ModifyAdmins .
2921	GetAuthTokenCmd returns a cobra command for get auth token command
2922	UseAuthTokenCmd returns the cobra command for use - token command
2923	Cmds returns the cobra command for commands
2924	ParseScope parses a scope string .
2925	IsErrNotActivated returns true if err is a not activated error
2926	IsErrPartiallyActivated returns true if err is a partial activation error
2927	IsErrNotSignedIn returns true if the error is ErrNotSignedIn .
2928	IsErrBadToken returns true if err is a BadToken error
2929	IsErrNotAuthorized returns true if the given error is ErrNotAuthorized .
2930	IsErrInvalidPrincipal returns true if the given error is a valid principal .
2931	IsErrTooShortTTL returns true if err is a short TTL .
2932	NewDatumFactory returns a DatumFactory .
2933	NewCollection creates a new Collection .
2934	Path returns the prefix of the collection .
2935	getIndexPath returns the index path for a given key .
2936	getMultiIndexPaths returns a list of index paths for a given key .
2937	Upsert adds a new value to the collection .
2938	get performs a get request
2939	List is part of the Collection interface .
2940	Watch returns a new watcher for the collection
2941	WatchByIndex returns a watcher for a given index .
2942	WatchOne returns a watcher for a given key
2943	WatchOneF is part of the Collection interface .
2944	Get returns a ReadCloser from the cache
2945	Keys returns a sorted list of keys in the cache .
2946	Clear removes all entries from the cache .
2947	NewHTTPServer returns a new httprouter
2948	NewDeployServer returns a new deploy server
2949	Export exports assets to the specified writer .
2950	Import loads an asset from a reader
2951	DatumTagPrefix returns the Datum tag prefix .
2952	NewPFSInput creates a new PFS Input .
2953	NewPFSInputOpts creates a new PFS Input .
2954	NewJobInput returns a new JobInput instance
2955	NewPipelineInput creates a new PipelineInput
2956	CreateJob creates a new job
2957	ListJob lists all jobs
2958	ListJobF is part of the APIClient interface .
2959	FlushJob flushes all commits to the given commits .
2960	FlushJobAll flushes all jobs to the API
2961	DeleteJob deletes a job
2962	StopJob stops a job .
2963	RestartDatum restarts a job .
2964	ListDatum is part of the APIClient interface .
2965	ListDatumF is part of the API interface .
2966	InspectDatum returns information about a given job .
2967	Next returns true if there are more logs .
2968	InspectPipeline returns information about a pipeline
2969	ListPipeline lists all pipeline information
2970	DeletePipeline deletes pipeline
2971	StartPipeline starts a pipeline
2972	StopPipeline stops a pipeline
2973	RerunPipeline removes pipeline
2974	CreatePipelineService creates a pipeline
2975	GetDatumTotalTime returns the total duration
2976	Mount is used to mount a node
2977	NewBufPool returns a new instance of BufPool
2978	StorageRootFromEnv returns the storage root backend .
2979	BlockPathFromEnv returns the path to the block .
2980	NewGoogleClient returns a new Google Client .
2981	NewGoogleClientFromSecret creates a new client from a secret bucket .
2982	NewGoogleClientFromEnv creates a new Google Client from an environment variable
2983	NewMicrosoftClientFromSecret creates a new Microsoft client from a container
2984	NewMicrosoftClientFromEnv creates a new MicrosoftClient from a container .
2985	NewMinioClientFromSecret creates a minio client from a secret
2986	NewMinioClientFromEnv creates a Client from the minio environment variable .
2987	NewAmazonClientFromSecret creates a new AWS Amazon Cloud Storage Client instance .
2988	NewAmazonClientFromEnv creates a new Amazon Client from Amazon region environment variables .
2989	NewClientFromURLAndSecret creates a new Client from an object store and secret .
2990	ParseURL parses a URL and returns ObjectStoreURL .
2991	NewClientFromEnv creates a new StorageBackend .
2992	NewExponentialBackOffConfig returns a new instance of ExponentialBackOff .
2993	Close closes the BackoffReadCloser .
2994	Close closes the BackoffWriteCloser
2995	IsRetryable returns true if the given error is a retryable error
2996	RunStdin runs the command with the given stdin
2997	RunIODirPath runs the specified directory .
2998	NewAuthServer creates a new auth server
2999	expired cluster admin
3000	getOneTimePassword returns an OTP token and expiration time
3001	hashToken returns the SHA256 hash of a token .
3002	getAuthToken extracts the auth token from the context
3003	Can be used to canonicalize subjects .
3004	Matches asserts that the given string matches the given pattern .
3005	OneOfMatches is a helper function that panics if an error occurs .
3006	Equal tests if two values are equal .
3007	NotEqual tests if two values are equal .
3008	oneOfEquals returns true if the given slice is equal to the given slice .
3009	NoneEquals tests if two objects are equal .
3010	NoError panics if err is not nil
3011	NoErrorWithinT is like NoError but does not wait for a function to finish .
3012	NoErrorWithinTRetry is a no - op function for a given function .
3013	YesError panics if err is not nil
3014	NotNil asserts that a value is not nil .
3015	Nil tests if a value is not nil .
3016	False asserts that the given value is false .
3017	NewSTM creates a new STM .
3018	NewDryrunSTM is like NewDryrunSTM .
3019	newSTMRepeatable creates a new STM repeatable .
3020	newSTMSerializable creates a StmSerializable object .
3021	newSTMReadCommitted is a mock
3022	commit commits the transaction .
3023	Pipelines returns a collection of pipelines .
3024	Jobs returns a collection of Jobs .
3025	NewTicker returns a new ticker .
3026	nodeToMap converts an etcd node to a map
3027	ServiceAccount creates a new ServiceAccount .
3028	ClusterRole creates a new ClusterRole
3029	RoleBinding creates an instance of RoleBinding
3030	GetSecretEnvVars returns a list of env vars
3031	PachdService returns a v1 . Service . Service .
3032	GithookService returns a githook service .
3033	EcdDeployment creates a deployment for etcd
3034	EtcdStorageClass returns the type of storage class .
3035	EcdVolume creates a new etcd volume .
3036	EcdNodePortService creates a new etcd service .
3037	EcdHeadlessService creates a new etcd service .
3038	EcdStatefulSet sets etcd statefulSet
3039	DashDeployment returns a Deployment for a DashDeployment
3040	DashService creates a v1 . Service .
3041	WriteSecret writes a secret
3042	GoogleSecret takes a bucket and returns a map of secret fields .
3043	WriteDashboardAssets encodes an array of dashboards
3044	WriteLocalAssets writes the given assets to an encoder .
3045	Write custom assets
3046	WriteAmazonAssets writes AmazonAssets to an object
3047	WriteGoogleAssets writes an asset to an encoder .
3048	WriteMicrosoftAssets writes a Microsoft secret
3049	Images returns a list of image names .
3050	AddRegistry adds a registry to the registry
3051	withCanonicalRandomizationFactor returns a copy of the vector .
3052	Reset resets the counter
3053	incrementCurrentInterval increments the current interval .
3054	NewBlockAPIServer returns a new BlockAPIServer .
3055	LocalStorage returns a new Storage instance .
3056	deleteJob deletes a job .
3057	writeXML writes a XML response with status code .
3058	clean1_7HashtreePath cleans the hashtree path
3059	NewFromAddress creates a new APIClient .
3060	getUserMachineAddrAndOpts returns the PachADDRESS option for the given config .
3061	NewInCluster creates a new APIClient
3062	Close closes the APIClient .
3063	DeleteAll deletes all auth credentials
3064	SetMaxConcurrentStreams is thread - safe .
3065	WithCtx returns a copy of ctx
3066	NewDLock returns a new DELock instance
3067	DatumID calculates the SHA256 hash of input data .
3068	Run user error handling code
3069	HashDatum returns the Datum of pipelineSalt .
3070	HashDatum15 returns the SHA256 hash of the pipeline
3071	Status implements APIServer .
3072	Cancel cancel request
3073	mergeStats merges two ProcessStats objects .
3074	mergeChunk merges data into a single chunk
3075	IsCommitNotFoundErr returns true if err is a commit not found error
3076	IsCommitDeletedErr returns true if err is a commit deleted error
3077	IsCommitFinishedErr returns true if err is a commitFinished error .
3078	IsRepoNotFoundErr returns true if the error is a repository not found error .
3079	IsBranchNotFoundErr returns true if err is a branch not found error
3080	IsFileNotFoundErr returns true if err is a file not found error
3081	Version returns the version of the APIClient .
3082	validateRepoName returns an error if the repo name is invalid .
3083	newDriver creates a new driver
3084	inspectCommit is part of the API interface .
3085	scratchCommitPrefix returns the prefix of the given commit .
3086	crratchFilePrefix returns the prefix of pfs .
3087	getTreeForFile returns the hash tree for a file
3088	usedantOnInput returns true if there is a provenance
3089	nodeToFileInfo converts a CommitInfo to a pfs . FileInfo .
3090	fileHistory calls f for each file in a single file .
3091	upsertPutFileRecords updates the record records for the given file .
3092	ReadRow reads a pgdump file .
3093	NewReporter creates a new Reporter
3094	ReportUserAction reports user action
3095	FinishReportAndFlushUserAction returns a function that reports an error to the report and reports the error to the report .
3096	Read implements the Reader interface .
3097	ActivateCmd returns cobra command for activation
3098	GetStateCmd returns the cobra command for a Pachyderm cluster
3099	Cmds returns a cobra command for cobra
3100	NewConfiguration returns a new Configuration struct
3101	Repos creates a Collection with the given etcd prefix .
3102	PutFileRecords creates a Collection for etcd .
3103	Commits returns a collection of commits .
3104	Branches returns a collection of branch names .
3105	OpenCommits opens and returns a Collection .
3106	NewDAG creates a new DAG
3107	NewNode adds a new node to the DAG .
3108	Sorted implements DAG .
3109	Leaves
3110	Ancestors returns the ancestors of a given ID .
3111	Descendants returns a slice of the descendants of the given id .
3112	Ghosts returns the children of the DAG .
3113	NewPortForwarder creates a new PortForwarder
3114	Run starts the port forwarder
3115	RunForDaemon runs the daemon
3116	RunForSAMLACS runs the port forwarder
3117	RunForDashUI runs the DashForwarder .
3118	RunForDashWebSocket runs the dash web socket .
3119	RunForPFS runs the port forwarder
3120	RunForS3Gateway runs the port forwarder
3121	Lock locks the port forwarder
3122	Close implements the PortForwarder interface .
3123	Unmarshal implements the json . Unmarshaler interface .
3124	UnmarshalPrev implements the json . Unmarshaler interface for Event .
3125	MakeWatcher creates a new watcher
3126	CheckType returns an error if the template is not valid .
3127	NewPool creates a new pool
3128	Do adds a function to the pool .
3129	Close closes the pool
3130	buildImage builds the docker image
3131	pushImage is used to push a docker image
3132	newMinioClient returns a minio client .
3133	newMinioClientV2 creates a minio client .
3134	newMinioWriter returns a minio writer .
3135	Close closes the writer
3136	PumpRepo returns a copy of Pipeline
3137	PipelineRcName returns the name of the pipeline
3138	GetRequestsResourceListFromPipeline gets resource list from pipelineInfo
3139	GetLimitsResourceListFromPipeline gets resource list
3140	getNumNodes returns the number of nodes in the k8s cluster
3141	GetExpectedNumWorkers returns the number of parallel workers in the kube client
3142	GetExpectedNumHashtrees returns the number of hashtree nodes in the spec
3143	FailPipeline will fail a pipeline
3144	JobInput returns a copy of the input from the PipelineInfo object .
3145	PipelineFromInfo converts PipelineInfo to create pipeline request
3146	NewPipelineManifestReader returns a new PipelineManifestReader .
3147	NextCreatePipelineRequest returns the next create pipeline request
3148	DescribeSyntaxError converts an error to a SyntaxError .
3149	UpdateJobState updates the job state for the given job .
3150	New returns a new UUID
3151	Code returns the HTTPError s status code .
3152	NewHTTPError returns a new instance of HTTPError
3153	NewStorage creates a new storage .
3154	DeleteAll implements Storage . DeleteAll .
3155	Chunk returns a slice of chunks of data .
3156	ChunkReader implements r . ChunkReader .
3157	NewStreamingBytesReader creates a new streamingBytesReader .
3158	WriteToStreamingBytesServer writes a streamingBytesServer to the given io . Reader .
3159	WriteFromStreamingBytesClient sends a streamingBytesClient to the given writer .
3160	NewSidecarAPIServer creates a new sidecar API server .
3161	NewEnterpriseServer creates a new API server
3162	validateActivationCode validates the activation code
3163	Activate activates a new activation
3164	Deactivate deactivates a pachyderm
3165	lookExtensions returns the extension for the given path .
3166	Start the process
3167	CombinedOutput implements Cmd . CombinedOutput .
3168	StdinPipe returns a pipe that will be closed when the command finishes .
3169	StdoutPipe returns a pipe that will be closed when the command exits .
3170	dedupEnvCase is a helper function to dedup env value .
3171	InputName returns the name of the input .
3172	SortInput sorts a slice of inputs .
3173	InputBranches returns a list of branch branches that are in the repo .
3174	ValidateGitCloneURL validates the clone URL
3175	containsEmpty checks if a slice of strings contains empty values .
3176	NewAPIServer returns a new API server
3177	Lag returns a string representation of a timestamp .
3178	TimeDifference returns the difference between two Timestamp objects .
3179	Duration returns a string representation of a duration .
3180	InspectCluster returns information about the cluster
3181	Extract extracts objects from the Admin API .
3182	ExtractAll implements the Extractor interface .
3183	ExtractWriter implements the ExtractWriter interface
3184	ExtractURL extracts a url
3185	ExtractPipeline implements the Admin interface
3186	Restore is part of the Admin interface .
3187	RestoreReader restores a reader from the APIClient .
3188	RestoreFrom is part of the Admin interface .
3189	RestoreURL restores a URL
3190	IgnoreTypes is used to ignore types .
3191	AppendEllipsis appends a ellipsis .
3192	IsType returns true if t is a type .
3193	NameOf returns the name of the given value .
3194	PointerOf returns the Pointer of v .
3195	String returns the string representation of an edit script .
3196	stats returns the statistics for the edit script .
3197	connect adds the path to the destination path .
3198	EquateNaNs compares two NaNs values .
3199	Index returns the path step at index i .
3200	Key returns the index s key .
3201	String returns a string representation of the defaultReporter .
3202	FormatType implements TextNode .
3203	formatMapKey formats a map key
3204	formatString takes a string and converts it to a string .
3205	formatHex formats u as hex string .
3206	formatPointer returns a string representation of v .
3207	Visit returns true if v is visited .
3208	retrieveUnexportedField returns a reflect . Value from a struct field .
3209	insert adds cname to the fieldTree .
3210	matchPrefix returns true if the path matches the prefix of the field tree .
3211	canonicalName returns the canonical name .
3212	FilterPath returns an Option that sets the path filter function .
3213	normalizeOption deserializes src into an Option .
3214	flattenOptions flattens src into dst .
3215	CanFormatDiffSlice returns true if ValueNode is a FormatDiffSlice .
3216	formatASCII takes a string and converts it to an ASCII string .
3217	coalesceAdjacentEdits is used to coalesce an epjacent script .
3218	SortKeys sorts vs and returns a slice of keys .
3219	FormatDiff implements Value .
3220	coalesceAdjacentRecords is used to coalesce adjacent records .
3221	Diff returns the difference of two records .
3222	statelessCompare returns a result that compares the state of the state of the state .
3223	sanitizeValue returns a reflect . Value if t is not nil .
3224	Check implements RecChecker .
3225	makeAddressable creates a reflect . Value from a reflect . Value .
3226	Marshal implements the Encoder interface .
3227	String returns the Field s value .
3228	Set is part of the Span interface .
3229	Inject injects a TextMapPropagator
3230	Extract implements TextMapPropagator
3231	ToLogRecord converts LogData to LogRecord
3232	New returns a new MockTracer .
3233	StartSpan is a mock
3234	RegisterInjector registers injector
3235	RegisterExtractor registers an Extractor
3236	Inject injects an opentracing context
3237	Extract extracts an extractor from a given format
3238	ContextWithSpan adds a span to the context .
3239	Set is part of the Span interface .
3240	Set is part of the Span interface .
3241	Set is part of the Span interface .
3242	SetString is part of the Span interface .
3243	EmitString sets a string value
3244	EitLazyLogger adds a log entry to the MockKeyValue .
3245	RunAPIChecks runs the given APIChecks .
3246	CheckBaggageValues is a functional option for checking baggage values .
3247	CheckExtract is an option to set the HTTP check extension .
3248	CheckInject is an option to set the CheckInject option .
3249	CheckEverything is a functional option that allows you to check if you want to use your own
3250	UseProbe configures the APICheck probe .
3251	WithBaggageItem adds a baggage item to the context
3252	Tags returns a map of tags .
3253	Tag implements Span interface
3254	Logs returns a copy of the logs .
3255	Context returns the opentracing span context .
3256	SetTag sets the tag for the span
3257	SetBaggageItem is part of the SpanContext interface .
3258	BaggageItem returns the BaggageItem associated with the given key .
3259	Finish implements the Span interface
3260	FinishWithOptions implements Span interface
3261	String returns a string representation of the span
3262	LogFields implements LogSpan .
3263	Logs with a timestamp
3264	LogKV implements Logger interface
3265	LogEvent logs an event
3266	LogEventWithPayload logs an event with payload
3267	SetOperationName sets the operation name .
3268	registersDirPath returns the path to the registry .
3269	loadAndMergeConfig loads config from dirPath
3270	ParseReference converts a reference to an ImageReference .
3271	NewReference creates a new ImageReference from a named DockerTagged .
3272	CheckAuth checks v2 authentication
3273	doHTTP sends a HTTP request and returns the response .
3274	detectPropertiesHelper is used to detect properties of a Docker registry
3275	detectProperties detects properties of a docker client
3276	getExtensionsSignatures returns the signatures for the given manifest digest .
3277	NewTransport returns a new http . Transport .
3278	readRegistryConf reads the registry config file .
3279	GetRegistries returns a list of registered registries .
3280	GetInsecureRegistries returns a list of insecure registries .
3281	RegistriesConfPath returns the path to the registry config file
3282	NewOptionalBool creates a new boolean instance
3283	changeState updates the state of the policy context .
3284	Destroy deallocates the policy context .
3285	policyIdentityLogName returns the name of the identity of the image .
3286	ensureRequirementsForImageRef returns the requirements for an image reference
3287	ParseImageName returns an ImageReference from the given image name .
3288	BlobInfoFromOCI1Descriptor converts a descriptor to a BlobInfo .
3289	OCI1FromManifest creates an OCI1 from a manifest
3290	OCI1FromComponents creates a new OCI1 from the provided components .
3291	newReference creates a DockerReference from a reference .
3292	tagOrDigest returns the tag or a tag if it exists .
3293	updateEmbeddedDockerReference updates the embedded Docker reference
3294	isTTY returns true if w is a terminal .
3295	copyUpdatedConfigAndManifest creates a copy of the image and updates it .
3296	createProgressBar creates a progress bar
3297	copyConfig copies a config blob from src to dst .
3298	diffIDComputationGoroutine implements diffIDComputationGoroutine .
3299	computeDiffID computes the digest ID for the given stream and decompressor .
3300	compressGoroutine copies src into dest .
3301	newDockerClient creates a docker client
3302	defaultPolicyPath returns the default policy path for the system context
3303	NewPolicyFromFile creates a new policy from a file
3304	NewPolicyFromBytes creates a Policy from a byte slice
3305	newPolicyRequirementFromJSON creates a PolicyRequirement from JSON
3306	newPRSignedBy creates a new instance of prSignedBy
3307	newPRSignedByKeyPath creates a new PRSignedByKeyPath
3308	NewPRSignedByKeyPath creates a new PolicyRequirement .
3309	newPRSignedByKeyData creates a new PRSignedByKeyData
3310	NewPRSignedByKeyData creates a new PolicyRequirement with the given key data
3311	IsValid returns true if the key type is valid
3312	newPRSignedBaseLayer returns a new instance of prSignedBaseLayer .
3313	newPolicyReferenceMatchFromJSON creates a PolicyReferenceMatch from JSON
3314	newPRMExactReference creates a new prmExactReference .
3315	newPRMExactRepository returns a new instance of PRMExactRepository .
3316	newImageSource creates a new ImageSource from an image reference
3317	getBlobAndLayerID returns a readCloser for the given blob .
3318	computeID returns the ID for the given manifest .
3319	PutManifest stores the manifest in the imageDestination .
3320	PutSignatures stores the signatures in the imageDestination .
3321	newImage creates a new image from the given storageReference .
3322	newImageSource creates a new image source from a temp directory
3323	LoadManifestDescriptor loads a manifest descriptor from an image reference
3324	Close closes the image source
3325	append adds s to the ordered set .
3326	isMultiImage checks if the given image is multi - image .
3327	lockPath acquires a lock on path .
3328	unlockPath unlocks a path
3329	view runs a boltdb transaction on the bolt database .
3330	update runs a bolt update on the bolt database .
3331	uncompressedDigest returns the digest if any .
3332	appendReplacementCandidates returns a list of candidate replacements .
3333	indexExists checks if an index exists .
3334	createSignature creates a signature for the given manifest
3335	ParseReference converts a reference string into an ImageReference
3336	NewReference returns a new image reference
3337	getIndex returns the image s index
3338	LoadManifestDescriptor loads the manifest descriptor from an image reference
3339	blobsPath returns the path to the blob directory .
3340	SignDockerManifest signs the manifest with the given keyIdentity .
3341	VerifyDockerManifestSignature verifies that the manifest is a valid signature .
3342	newOpenshiftClient returns a new OpenhiftClient .
3343	doRequest sends a request and returns the response body .
3344	getImage gets the image by name
3345	convertDockerImageReference takes a ref and converts it to a docker reference
3346	ensureImageIsResolved ensures that the image is resolved in the image source
3347	newImageDestination creates a new ImageDestination .
3348	newUntrustedSignature returns a new untrustedSignature .
3349	MarshalJSON method of untrustedSignature
3350	UnmarshalJSON implements the json . Unmarshaler interface for untrustedSignature .
3351	verifyAndExtractSignature extracts the signature from the signature .
3352	RewriteReference replaces the reference with the given reference .
3353	getV1Registries returns a list of V1TOML configurations .
3354	getConfigPath - get config path
3355	GetRegistries returns a list of registered regististries .
3356	readRegistryConf is used to read a registry configuration file
3357	Manifest returns the manifest
3358	ConfigUpdate updates a tarball reference
3359	parseImageAndDockerReference parses a Docker reference and returns a reference to it .
3360	parseDockerReferences parses s1 and s2 and s2 .
3361	ListNames returns a sorted list of all transports .
3362	NewReference creates a new ImageReference from an image
3363	signaturePath returns the path to the given index .
3364	ValidateImageName returns an error if the image name is not valid .
3365	SplitPathAndImage takes a reference and a reference and returns it .
3366	ValidateOCIPath validates the OCI reference
3367	ValidateScope validates the scope
3368	BlobInfoFromSchema2Descriptor converts a Schema2Descriptor to a BlobInfo .
3369	Schema2FromManifest creates a Schema2 object from a manifest
3370	Schema2FromComponents returns a new Schema2 based on the provided components .
3371	SetAuthentication sets authentication credentials
3372	RemoveAuthentication removes authentication from registry
3373	RemoveAllAuthentication removes all authentication credentials .
3374	readJSONFile reads a JSON file and returns it .
3375	modifyJSON modifies the given docker config file .
3376	findAuthentication returns the credentials for a given registry .
3377	NewDestination returns a new Destination instance
3378	AddRepoTags adds tags to Destination .
3379	writeLegacyLayerMetadata writes the layer metadata for the given layerDescriptors .
3380	sendSymlink sends a symlink to the destination .
3381	sendBytes sends a byte slice to the destination .
3382	sendFile sends a tar file to the destination .
3383	Commit closes the destination .
3384	imageMatchesRepo returns true if the image matches the given reference .
3385	resolveImage resolves the image identified by id .
3386	Transport returns an instance of ImageTransport .
3387	StringWithinTransport returns the string representation of a StorageReference .
3388	PolicyConfigurationNamespaces returns the namespaces for the StorageReference .
3389	GzipDecompressor returns a ReadCloser that decompresses r .
3390	Bzip2Decompressor decodes bzip2 decompressor from r .
3391	XzDecompressor returns a ReadCloser reading from r .
3392	DetectCompression returns a DecompressorFunc that detects decompression from the input .
3393	newImageDestination creates a new ImageDestination from a docker reference
3394	mountBlob is used to mount a blob
3395	bicTransportScope converts a DockerReference to BICTransportScope
3396	newBICLocationReference returns a new instance of BICLocationReference
3397	parseBICLocationReference parses a BICLocationReference .
3398	NewSourceFromStream creates a new Source from an input stream .
3399	readTarComponent reads a tar component
3400	ensureCachedDataIsPresent checks if the data is present in the source
3401	loadTarManifest loads the manifest from the source .
3402	Close closes the source .
3403	newImageDestination returns a new ImageDestination .
3404	imageLoadGoroutine is like ImageLoadGoroutine
3405	NewReference returns a new image reference
3406	createOCIRef creates a tempDirOCIRef
3407	createUntarTempDir creates a temp directory from a temp directory
3408	destroyivelyPrioritizeReplacementCandidatesWithMax returns a slice of BICReplacementCandidates with the given digest .
3409	newImageDestination returns a new instance of ImageDestination
3410	resolveExistingPathToFullyExplicit resolves the given path to absolute paths .
3411	newImageDestination returns a new instance of ImageDestination
3412	isDirEmpty checks if the given path is empty .
3413	removeDirContents removes all the contents of a directory
3414	GetRepositoryTags returns the tags for the given image reference .
3415	DefaultCache returns the default blobinfo cache for the given system .
3416	uncompressedDigestLocked returns the digest if any .
3417	Close closes the imageDestination
3418	PutManifest stores a manifest in the imageDestination
3419	Commit is part of the image . ImageDestination interface .
3420	tarDirectory copies the contents of src into dst .
3421	ParseStoreReference extracts a storage reference from the given reference
3422	Choose digest from manifest list
3423	ChooseManifestInstanceFromManifestList chooses a digest from a manifest list
3424	manifestSchema1FromComponents returns a manifest schema1 from the provided attributes .
3425	manifestDigest returns the manifest digest if present .
3426	deleteImage deletes a docker image .
3427	Schema1FromComponents converts a reference to a Schema1 object .
3428	initialize initializes schema1 .
3429	ToSchema2Config converts schema1 config to schema2 .
3430	Digest returns a digest from a manifest
3431	MatchesDigest returns true if the digest matches the expected digest .
3432	NormalizedMIMEType normalizes MIMEType
3433	FromBlob creates a manifest from a blob
3434	NewReference creates an ImageReference from a path .
3435	layerPath returns the path to the layer .
3436	signaturePath returns the path to the given index .
3437	New returns a pool with the given number of workers .
3438	NewFunc returns a pool that invokes the given function .
3439	ProcessTimed processes a job and waits for it to finish .
3440	SetSize sets the size of the pool .
3441	GetSize returns the size of the pool
3442	TL returns the point of the rectangle .
3443	BR returns the point of the rectangle .
3444	CVBox returns the CvBox2D .
3445	Points returns the points of the box2D .
3446	FOURCC returns a 16 - bit unsigned 64 - bit MAC
3447	Merge merges an image into the destination .
3448	Split splits src into src
3449	AddWeighted adds a weighted value to the matrix .
3450	And multiplies two IplImage with the same mask .
3451	AndWithMask is like And but with mask
3452	AndScalar is equivalent to AndScalar .
3453	AndScalarWithMask is like AndScalar but with a mask and mask .
3454	Or multiplies two IplImage with the given mask .
3455	OrWithMask is like Or but with a mask .
3456	OrScalar is the same as OrScalar but with a mask .
3457	OrScalarWithMask is like OrScalar but with a mask and mask .
3458	AddWithMask adds a mask with the given mask .
3459	AddScalar adds a scalar to the vector .
3460	AddScalarWithMask adds a scalar with mask and mask .
3461	Subtract subtracts from src2 and dst2
3462	SubtractWithMask subtracts from src1 and mask
3463	SubScalar adds a scalar to the vector .
3464	SubScalarWithMask is like SubScalar but with a mask .
3465	SubScalarRev is identical to SubScalarRev . SubScalarRev .
3466	SubScalarWithMaskRev is the same as SubScalar except that it accepts a mask and mask .
3467	AbsDiff computes the absolute difference between two values .
3468	AbsDiffScalar computes the absolute value of src and dst .
3469	MedDevWithMask returns the mean of the given vector .
3470	CreateSeq creates a new seq .
3471	Push adds an element to the sequence .
3472	Pop removes the element from the cache .
3473	PushFront pushes an element into the stack .
3474	PopFront pops the first element from the stack .
3475	GetElemAt returns the value at index i .
3476	RemoveAt removes the value at index from c .
3477	Delay is an Option to set the delay .
3478	BackOffDelay returns the backoff delay .
3479	Error implements the Error interface .
3480	Arguments is defined on the RequestBuilder interface .
3481	BodyString defines the request body as a string .
3482	BodyBytes is defined on the RequestBuilder interface .
3483	Body specifies the request body .
3484	Option adds an option to the request
3485	Header sets a header value .
3486	Send sends a request
3487	Exec executes the given res .
3488	Next returns the next message from the subscription
3489	Cancel the subscription
3490	FileList returns a list of files
3491	Cat returns a reader for the given path
3492	List returns a list of ls links
3493	Pin pins the path to the specified path
3494	Pins returns a map of pins .
3495	Version returns the current version
3496	SwarmPeers returns a list of swarm peers .
3497	SwarmConnect connects to a swarm .
3498	DagPutOptions returns a DagPutSettings struct with optional parameters .
3499	Pin sets the pin option .
3500	Kind specifies the kind of the DagPutOption .
3501	Hash configures a DagPutOption .
3502	AddDir adds a new directory to a file
3503	Publish a node
3504	PublishWithDetails - Publish a given contentHash .
3505	ResolveValue resolves the value of a PlanValue .
3506	GenerateQuery generates a query using the provided bind variables .
3507	EncodeValue encodes a value to a buffer .
3508	Lex scans the next token .
3509	skipStatement skips a statement .
3510	reset resets the tokenizer .
3511	Preview takes a sql string and returns the trimmed text
3512	NewPlanValue returns a plan value .
3513	StringIn checks if a string is in a slice of strings
3514	NewTrackedBuffer returns a new instance of TrackedBuffer .
3515	NewStringArena returns a new instance of StringArena .
3516	NewString returns a new string from b .
3517	SpaceLeft returns the number of spaces left in the array .
3518	ParseStrictDDL parses a sql statement .
3519	ParseNext parses the next statement .
3520	Append appends a SQLNode to the buffer .
3521	ExprFromValue converts a value to an Expr .
3522	Backtick returns the backtick of a string .
3523	NewValue creates a new value from the given type .
3524	String returns a string representation of the value .
3525	EncodeSQL encodes a value .
3526	EncodeSQL encodes InsertValues .
3527	EncodeSQL encodes a tuple list .
3528	WalkStatement walks a SQLNode .
3529	WalkSelect walks a SQLNode .
3530	BindVariablesEqual compares two BindVariables .
3531	New creates a new JWTMiddleware
3532	HandlerWithNext implements JWT .
3533	FromAuthHeader extracts the Authorization header from the request
3534	FromParameter returns a TokenExtractor that extracts token from a URL
3535	FromFirst returns a TokenExtractor that extracts tokens from the request .
3536	getHelloPacket returns a new instance of HelloPacket
3537	NewFloodsubWithProtocols returns a new instance of Floodsub .
3538	NewFloodSub creates a new instance of FloodSub .
3539	NewLRUBlacklist returns an LRU blacklist .
3540	NewRandomSub creates a new PubSub .
3541	NewGossipSub creates a new instance of GossipSub .
3542	NewPubSub creates a new PubSub .
3543	WithValidateThrottle is an Option that sets the number of bytes long as long as long as long as long as long as long as long as long as long as long as long as long as long as long as long as long as long as long as long as long as long as long as long as long .
3544	WithBlacklist is an Option to set the blacklist .
3545	handleRemoveSubscription removes a subscription from the topic .
3546	handleAddSubscription adds a new subscription to the topic .
3547	announce sends a message to all peers .
3548	notifySubs sends a message to all subscribers .
3549	seenMessage returns true if there is a message with given id .
3550	subscribedToMsg returns true if the message is subscribed to a given message
3551	msgID returns the ID of the message .
3552	pushMsg sends a message to the peer
3553	validate is used to validate a message
3554	validateSingleTopic validates a single topic
3555	getValidators returns all validators
3556	Subscribe creates a subscription for a topic
3557	SubscribeByTopicDescriptor creates a subscription for a TopicDescriptor
3558	GetTopics returns all topics
3559	Publish implements Publish method .
3560	ListPeers returns a list of available peers .
3561	WithValidatorTimeout sets the validator timeout
3562	WithValidatorConcurrency is a functional option for ValidatorConcurrency .
3563	RegisterTopicValidator registers a new validator
3564	UnregisterTopicValidator unregisters a topic validator
3565	DefaultMetricPrefix returns the default metric prefix .
3566	MetricWithPrefix returns a metric with the given prefix .
3567	NewClient creates a new Client .
3568	Call executes a RPC call .
3569	CallPeer implements tchannel . Peer .
3570	CallSC implements the SubChannel interface .
3571	ReadResponse reads a response from the TChannel .
3572	Write headers
3573	ResponseWriter returns an http . ResponseWriter
3574	ReadHeaders reads the headers from r .
3575	NewTCPRawRelay creates a new Relay from a slice of strings .
3576	NewClient creates a new client
3577	Advertise advertises all services .
3578	Handle handles an InboundCall .
3579	Start starts the server
3580	Port returns the port of the server
3581	SetStrategy updates the peer s strategy .
3582	Add adds a peer to the list
3583	GetNew returns a new peer from the list
3584	Get returns a peer based on prevSelected map
3585	Remove removes a peer from the list
3586	Copy returns a copy of the PeerList
3587	Len returns the number of peers .
3588	exists checks if a given hostPort exists .
3589	getPeerScore returns the peer s score .
3590	onPeerChange is called when a peer is changed .
3591	updatePeer updates the peer s current score .
3592	getConn returns a connection by index .
3593	GetConnection gets a connection from the peer .
3594	getConnectionRelay returns a connection to the peer .
3595	canRemove returns true if the peer is removed .
3596	addConnection adds a connection to the peer .
3597	removeConnection removes a connection from the peer and returns true if it was removed .
3598	connectionCloseStateChange is called when a connection is closed .
3599	Connect connects to the peer .
3600	BeginCall starts a new OutboundCall .
3601	NumConnections returns the number of inbound connections
3602	NumPendingOutbound returns the number of outbound connections in the peer .
3603	isEphemeralHostPort returns true if host is a valid host port
3604	Get returns the value associated with key .
3605	Set sets a key value pair
3606	ClearAll clears all keys
3607	NewChannel creates a new channel
3608	Serve starts serving the given listener .
3609	ListenAndServe is the same as ListenAndServe .
3610	Register adds a handler to the channel .
3611	PeerInfo returns the local peer info
3612	GetSubChannel returns a SubChannel by name .
3613	serve accepts incoming connections and waits for them to finish .
3614	Ping sends a ping to the channel .
3615	StatsTags returns a map of stats tags .
3616	Connect connects to the channel using the given context .
3617	exchangeUpdated is part of the Channel interface .
3618	updatePeer adds a new peer to the channel .
3619	addConnection adds a connection to the channel .
3620	removeClosedConn removes a connection from the channel .
3621	connectionCloseStateChange is called when a ConnectionClose is closed .
3622	State returns the current state of the channel .
3623	NewReader returns a new Reader instance .
3624	ReadUint16 read uint16
3625	ReadString implements io . Reader
3626	ReadLen16String from the reader
3627	Register adds a channel to the channel .
3628	Run runs the Downstream
3629	Get retrieves a relay timer from the pool . If the pool does not exist it will panic .
3630	Put adds a relay timer to the pool .
3631	Start starts the relay timer .
3632	Release releases the pool .
3633	NewLogger creates a new Logger .
3634	NewTCPFrameRelay creates a new TCP frame relay .
3635	countTags returns a map of knownTags .
3636	Isolated marks the subchannel as being closed .
3637	Isolated returns true if the SubChannel has been closed .
3638	Register registers a handler for the given handler .
3639	GetHandlers returns all registered handlers
3640	StatsTags returns a map of stats for a channel .
3641	registerNewSubChannel creates a new SubChannel and adds it to the map .
3642	get a SubChannel by name
3643	getOrAdd returns a new channel if it already exists .
3644	Discover discovers instances of a given service
3645	Start starts the http server
3646	listen starts the HTTP server
3647	WriteRequest writes a http . Request to http . Response .
3648	ReadRequest reads the request from the TChannel .
3649	NewReadBufferWithSize returns a new ReadBuffer with the given size .
3650	ReadByte implements the Reader interface .
3651	ReadBytes implements the Reader interface .
3652	ReadString from the buffer
3653	ReadUint16 from the buffer
3654	ReadUint32 read a uint32
3655	ReadUint64 read a uint64
3656	ReadUvarint from the buffer
3657	ReadLen8String from the buffer
3658	ReadLen16String from the buffer
3659	FillFrom implements the ReadBuffer interface .
3660	Wrap implements the ReadBuffer interface .
3661	WriteSingleByte implements the WriteBuffer interface .
3662	WriteBytes implements the WriteBuffer interface .
3663	WriteUint16 writes a uint16 to the buffer .
3664	WriteUint32 writes a uint32 to the buffer .
3665	WriteUint64 writes a uint64 to the buffer .
3666	WriteUvarint writes n to the buffer .
3667	WriteString writes a string to the buffer .
3668	WriteLen8String writes s to w .
3669	WriteLen16String writes a string to the buffer .
3670	DeferByte returns a copy of the buffer .
3671	DeferBytes is the implementation of the WriteBuffer interface .
3672	FlushTo flushes the buffer to the buffer .
3673	Reset resets the buffer .
3674	Wrap implements the WriteBuffer interface .
3675	Update adds a uint16 to the buffer .
3676	Update adds a uint32 to the buffer .
3677	Update adds n to the uint64Ref .
3678	Update copies b into b .
3679	UpdateString updates s bytesRef .
3680	ArgReader implements the Reader interface .
3681	finish finalizes the Fragment .
3682	newWritableChunk returns a new writable chunk .
3683	writeAsFits writes data to the chunk .
3684	newFragmentingWriter returns a new fragmentingWriter .
3685	ArgWriter implements the Logger interface .
3686	BeginArgument attempts to begin a new fragment .
3687	Write writes b to the underlying writer .
3688	Flush implements the Writer interface .
3689	Close implements the Writer interface .
3690	handleCallRes is used to handle incoming frames
3691	Arg2Reader returns the Arg2Reader for the response .
3692	handleError handles the error message .
3693	done reading from the request
3694	newFragment creates a new fragment .
3695	flushFragment sends a fragment to the writer .
3696	failed marks the error as failed .
3697	arg1Reader returns an ArgReader .
3698	arg2Reader returns a new ArgReader .
3699	arg3Reader returns an Arg3Reader .
3700	argReader is a wrapper around ArgReader .
3701	recvNextFragment returns a read - only readable fragment from the request .
3702	releasePreviousFragment releases the previous fragment .
3703	failed marks an error as failed .
3704	parseInboundFragment returns a readable fragment .
3705	NewContext returns a new context with the given timeout .
3706	WithHeaders adds headers to the context .
3707	healthCheck performs a health check .
3708	SetTimeout sets the request timeout
3709	AddHeader adds a header to the request
3710	SetHeaders sets the Headers
3711	SetConnectTimeout sets the connection timeout .
3712	SetRetryOptions sets retry options .
3713	SetTimeoutPerAttempt sets the request per attempt
3714	SetParentContext sets the parent context .
3715	Build builds a context builder
3716	overrideHeaders overrides the CallOptions interface .
3717	Read reads bs from bs .
3718	ReadJSON reads data from the reader
3719	NewArgWriter creates a new ArgWriteHelper
3720	Write writes bs to the underlying writer
3721	WriteJSON writes data to writer
3722	Register registers the registrar with the given registrar .
3723	Count returns the number of items in the relayItems .
3724	Get retrieves a relay item from the relay
3725	Add adds an item to the relay list .
3726	Entomb deletes a relay item from the relay items .
3727	NewRelayer creates a new Relayer .
3728	Relay sends a message to the remote peer .
3729	Receive receives a frame from the Relayer .
3730	handleNonCallReq handles a non - call request .
3731	addRelayItem adds a relay item to the relay .
3732	failRelayItem terminates a relay item .
3733	WriteStruct writes a TStruct to a writer .
3734	ReadStruct reads the given TStruct from the given reader .
3735	EnsureEmpty ensures that r is empty .
3736	NewServer creates a new server
3737	Advertise advertises hyperbahn
3738	handleCallReqContinue is called when a request is received .
3739	dispatchInbound handles incoming RPC calls .
3740	CallOptions returns a CallOptions for the InboundCall .
3741	Response returns the response .
3742	SendSystemError sends a system error .
3743	SetApplicationError sets the application error .
3744	Arg2Writer returns a new ArgWriter .
3745	doneSending implements the InboundCallResponse interface .
3746	newState returns a new State instance .
3747	rootType returns the root type .
3748	checkInclude checks if a type is included in the package .
3749	isResultPointer returns true if the parser is a resultPointer .
3750	goType returns the type name .
3751	goTypePrefix returns the prefix for the given type .
3752	NewContext creates a new context
3753	newIncomingContext creates a new IncomingContext
3754	CurrentCall returns the current call or nil if not found
3755	New returns a new rand . Rand with the given seed .
3756	Health implements the MetaHandler interface .
3757	Headers returns the request headers .
3758	ResponseHeaders returns the response headers .
3759	SetResponseHeaders sets response headers on context
3760	Child returns a new context with the provided headers
3761	Wrap returns a new Context with the given context .
3762	WrapWithHeaders wraps a context with the given headers .
3763	WithoutHeaders returns a context with no headers set .
3764	Notify sends an error to errNotifier .
3765	forwardPeerFrame is used to forward a single frame
3766	recvPeerFrame is called when a frame is received .
3767	recvPeerFrameOfType retrieves a frame from the queue .
3768	shutdown shuts down the store .
3769	newMessageExchangeSet returns a new instance of MessageExchangeSet .
3770	addExchange adds a messageExchange to the exchange set .
3771	newExchange creates a new message exchange .
3772	deleteExchange removes an exchange from the message set .
3773	removeExchange removes a message exchange from the set .
3774	expireExchange is called when a message exchange is expired .
3775	forwardPeerFrame forwards the frame to the message exchange .
3776	copyExchanges returns a copy of the messageExchanges map .
3777	stopExchanges stops all exchanges .
3778	NewFrame creates a new Frame with the specified size .
3779	ReadBody reads a single frame from r .
3780	WriteOut writes the frame to w .
3781	CanRetry returns true if the given error is a RetryOn error .
3782	HasRetries returns true if the request has retries
3783	SinceStart returns the duration since the request state
3784	AddSelectedPeer adds the selected peer to the request state
3785	RunWithRetry runs the given RetryFunc .
3786	ChecksumSize returns the checksum size .
3787	New returns a new Checksum .
3788	parseTemplates parses tchan template files .
3789	NewStringSliceFlag returns a slice of string slices flag .
3790	withStateFuncs returns a copy of the template with the given data .
3791	IntrospectOthers returns a map of ChannelInfo and channels .
3792	ReportInfo reports information about the channel .
3793	IntrospectState returns the introspection state for the peer list
3794	IntrospectState returns a map of subchannel runtime state .
3795	IntrospectState returns the PeerRuntimeState for the peer .
3796	IntrospectState returns the current ConnectionRuntimeState .
3797	IntrospectState returns the RelayerRuntimeState for the inbound Relayer .
3798	IntrospectState returns a RelayItemSetState with the given name .
3799	IntrospectState returns a set of ExchangeSetRuntimeState .
3800	NewContext creates a new context with the given timeout .
3801	WriteResponse writes the response to the client .
3802	Wrap wraps an InboundCall into a handler
3803	initFromOpenTracing injects a span into opentracing .
3804	startOutboundSpan starts an Outbound Span .
3805	Converts an IPv4 address to an IPv4 address .
3806	servicePeerToHostPort converts a hyperbahn . ServicePeer to a port .
3807	NewStatsdReporter returns a new StatsdReporter .
3808	UnmarshalText implements the json . Unmarshaler interface for ToS .
3809	Push implements heap . Interface .
3810	Pop implements heap . Interface .
3811	updatePeer updates the peer s status .
3812	removePeer removes a peer from the heap .
3813	pushPeer adds a peerScore to the heap .
3814	addPeer adds a peer to the heap .
3815	NewClient creates a new TChanClient
3816	Add adds a new peer to the list
3817	Get returns a peer by hostPort
3818	WithTimeout sets the timeout used by the client
3819	Methods returns all registered methods .
3820	InheritedMethods returns a list of registered methods .
3821	Arguments returns the fields of the method .
3822	ArgList returns a string representation of the arguments
3823	CallList returns a string representing a call list
3824	RetType returns the type of the method .
3825	WrapResult returns the result as a string .
3826	ReturnWith returns the result of a method .
3827	Declaration returns the declaration of the field .
3828	startIdleSweep starts a new idleSweep .
3829	start starts the idle connection and starts the goroutine .
3830	Stop stops the idle connection .
3831	ResolveWithGoPath takes a filename and returns it as a string .
3832	setExtends sets the extensions for the service .
3833	register adds a handler to the map .
3834	NewClient creates a new Client using the provided hosts .
3835	ListenIP returns the net . IP address of the network interface .
3836	Close closes the listener .
3837	ReadArgsV2 reads arguments from rchannel . ArgReadable .
3838	WriteArgs writes the arguments to the OutboundCall .
3839	Call executes a call .
3840	CallSC implements the SubChannel interface .
3841	CallV2 executes a v2 command .
3842	NewRealRelay creates a new Relay .
3843	NewServer creates a new server
3844	RegisterHealthHandler adds a handler to the server .
3845	Handle handles an InboundCall .
3846	MetricsKey returns the metric key for the given system error code .
3847	NewSystemError creates an instance of SystemError
3848	NewWrappedSystemError wraps the wrapped error and returns a SystemError .
3849	Error implements the error interface for TchannelError .
3850	GetContextError returns ErrTimeoutExceeded error if err is not set
3851	GetSystemErrorCode returns the SystemErrCode for the given error
3852	ping sends a message to the connection .
3853	handlePingRes is used to handle a ping response
3854	handlePingReq sends a ping message to the connection .
3855	SendSystemError sends an error to the pool
3856	connectionError logs an error and closes the connection .
3857	withStateLock unlocks the connection s state lock .
3858	withStateRLock is the same as WithStateRLock .
3859	Read frames from the pool
3860	Write frames to the connection pool
3861	hasPendingCalls returns true if there are pending calls .
3862	checkExchanges checks if the connection has been closed .
3863	closeNetwork closes the connection .
3864	getLastActivityTime returns the last activity time .
3865	Validate validates a service
3866	logFailedRegistrationRetry logs a failed exponential backoff retry
3867	initialAdvertise sends an advertise to hyperbahn .
3868	Service returns the payload of the service
3869	TTL returns the time . Duration of the request .
3870	SetTTL sets the TTL for the given duration .
3871	finishCall returns true if the frame is finished .
3872	Flat returns a flat slice of all platform names .
3873	Map iterates over a slice of strings returning a slice of strings .
3874	MapSlice returns a map of platform names .
3875	GetProtoConfig returns the ProtoConfig given a Config .
3876	MapExprStrings maps an expression to a bz . Expr .
3877	FlattenExpr flattens an Expr .
3878	makePlatformStringsExpr converts platformStringsExpr to platform . Expr .
3879	String returns a string representation of the platform .
3880	Find returns the absolute path of dir .
3881	runGazelle runs the gazelle command .
3882	restoreBuildFilesInRepo restores the files in the given directory .
3883	Similar to FixLoads but does nothing .
3884	fixLoad computes a rule . Load from a file .
3885	newLoadIndex returns the load index of rule .
3886	removeLegacyGoRepository removes the rule repository from the file .
3887	Compare compares two versions .
3888	ParseVersion converts a string to a Version .
3889	EmptyFile returns a new instance of bzl . File
3890	LoadWorkspaceFile loads a workspace file
3891	LoadMacroFile loads a macro file from a file .
3892	EmptyMacroFile loads a macro file from a given path .
3893	LoadData loads the data from a BOSH file .
3894	LoadWorkspaceData loads a workspace from a given path .
3895	LoadMacroData loads a macro data from a file .
3896	ScanAST scans a file and returns a File object .
3897	ScanASTBody scans a file and returns a File object .
3898	MatchBuildFileName returns the path to a build file name .
3899	SyncMacroFile synchronizes a MacroFile object .
3900	MicroName returns the name of the Macro .
3901	Sync synchronizes the File .
3902	Format implements the billy . File interface for File .
3903	Save writes the given file to bz .
3904	HasDefaultVisibility returns true if the file has a default identity .
3905	NewLoad creates a new Load .
3906	Symbols returns a sorted list of symbols .
3907	Has checks if a given sym is present in the map
3908	Add adds a sym to the load .
3909	Remove removes a symbol from the map .
3910	Insert adds a file to the load list .
3911	NewRule creates a new Rule .
3912	SetKind sets the kind of the rule
3913	AttrKeys returns the keys of a rule .
3914	Attr returns bz . Expr for a key .
3915	AttrString returns the value of a key as a string .
3916	AttrStrings returns the list of strings for a key .
3917	DelAttr removes an attribute from the rule .
3918	SetAttr sets a value for a rule .
3919	PrivateAttrKeys returns a list of private keys for this rule
3920	SetPrivateAttr is part of the Rule interface .
3921	Insert adds a Rule to the Rule .
3922	IsEmpty returns true if the rule is empty
3923	CheckInternalVisibility checks if the given visibility is valid
3924	New creates a new Label .
3925	Rel returns the label of a repository .
3926	Equal returns true if two labels are equal .
3927	Contains returns true if this Label contains other .
3928	generateFromPath generates a package from a given path .
3929	shouldCall returns true if the mode is a call .
3930	shouldUpdate returns true if we should update the mode
3931	shouldVisit returns true if the mode should be visited .
3932	SquashRules squashes src to dst .
3933	runClient runs the gazelle server
3934	UpdateRepo updates a repository in the cache .
3935	NewRemoteCache creates a new remote cache .
3936	Remote is part of the Cache interface .
3937	get returns the value for the given key .
3938	ensure ensures that the given key is ready for use .
3939	RelBaseName returns the base name for the given rel .
3940	Clone returns a copy of c .
3941	IsValidBuildFileName returns true if the given name is valid
3942	check checks if a tag line is valid
3943	fileNameInfo returns the FileInfo for the given path .
3944	otherFileInfo returns the file info for the given path .
3945	protoFileInfo converts a proto . FileInfo into a FileInfo .
3946	AddRule adds a rule to the index .
3947	Finish finishes all imported rules .
3948	buildImportIndex is used to build an import index
3949	IsSelfImport returns true if the label is a self import
3950	applyKindMappings applies the given mapKinds to the map .
3951	appendOrMergeKindMapping takes a mapKind and merges it into a map .
3952	RuleName returns the rule name for the given names .
3953	buildPackages returns a slice of packages in the given directory .
3954	selectPackage selects a package from a package map
3955	generateProto creates a rule based on the given package .
3956	generateEmpty returns a set of rules that are not empty .
3957	ImportRepoRules parses a repo file and returns a list of rules .
3958	MergeRules merges a set of rules into a new one .
3959	GenerateRule creates a rule based on the repository
3960	FindExternalRepo finds a repository by name .
3961	ListRepositories returns a list of repositories in the workspace .
3962	migrateLibraryEmbed is used to migrate a library Embed document to a file .
3963	migrateGrpcCompilers is used to migrate gRPC compilers to the given rules .
3964	squashCgoLibrary deletes cgo library .
3965	removeLegacyProto removes the proto from the config file .
3966	removeLegacyGazelle removes the given rule from the config file .
3967	selectPackage selects a package from the given directory
3968	AddBuiltin adds a builtin .
3969	MappedKind is defined on the Resolver interface .
3970	Resolver returns a resolver for the given rule .
3971	sortExprLabels sorts the labels in bz . Expr .
3972	checkRulesGoVersion checks if the repo is a valid version .
3973	preprocessTags preprocess tags
3974	setBuildTags sets build tags
3975	splitValue splits a value into a slice of strings .
3976	copyGoModToTemp copies a temp file into a temporary directory .
3977	findGoTool returns the path to the go tool
3978	isBuildable returns true if the package is buildable .
3979	startServer starts the server
3980	watchDir watches for changes to root .
3981	listDirs returns a list of all files in a given directory .
3982	shouldIgnore returns true if the given path should be ignored .
3983	recordWrite sets the write to the given path .
3984	getAndClearWrittenDirs returns a list of all dirs that have been cleared .
3985	CombineHandlers takes a list of http . HandlerFunc and returns a HandlerFunc .
3986	VerifyContentType checks Content - Type header
3987	VerifyMimeType checks if a mime type is valid
3988	VerifyBasicAuth returns an http . HandlerFunc that checks HTTP Basic Authentication headers .
3989	VerifyJSONRepresenting returns a http . HandlerFunc that verifies the provided object .
3990	VerifyFormKV is a HandlerFunc for VerifyFormKV .
3991	RespondWithProto returns a http . HandlerFunc that responds with an HTTP status code .
3992	RegisterFailHandlerWithT registers a fail handler with a global fail handler
3993	EventuallyWithOffset asserts that an asynchronous assertion is asynchronous .
3994	ConsistentlyWithOffset is like AsyncAssertion but it panics if the offset is missing .
3995	Expect asserts that the assertion fails .
3996	Eventually asserts that the assertion is asynchronous .
3997	Consistently asserts that the interval is in the interval .
3998	TimeoutCloser returns an io . Closer that writes to the given io . Closer .
3999	TimeoutReader returns an io . Reader that reads from r .
4000	TimeoutWriter returns an io . Writer that writes to w .
4001	Nested returns a nested error with the nested errors .
4002	SetMockService sets mock service
4003	FindMachineByIdOrAddress finds a machine by its ID .
4004	Write writes data to the underlying writer
4005	Hijack implements the http . ResponseWriter interface .
4006	ListDeploys returns a list of DeployData
4007	AddAll adds all the routes for the given version .
4008	samlRequestTimeout returns the request_timeout
4009	RegisterHandler registers a handler with the given path and path .
4010	RegisterHandlerVersion registers a handler for the given version .
4011	Check returns a list of checkers .
4012	DiscoverRepositoryPath returns the path to the given directory
4013	OpenRepository opens a repository
4014	RemoteURL returns the remote URL
4015	List lists all Apps in the indexer .
4016	Apps returns an object that can list and get Apps .
4017	List lists all App in the indexer for a given namespace .
4018	StreamJSONResponse writes the response to w .
4019	DropDatabase removes a database from storage .
4020	Collection creates an instance of Collection .
4021	SetLogger sets the logger .
4022	Error implements Target .
4023	Errorf logs a formatted error message .
4024	Fatal logs a fatal error .
4025	Debugf implements Target .
4026	GetStdLogger returns the default logger
4027	Namespace returns the name of the cluster
4028	recreateContainers creates container containers .
4029	checkProvisioner checks if the container is provisioner
4030	checkDocker checks if a docker is running
4031	checkScheduler checks if docker is running
4032	checkRouter returns an error if the default router is not configured .
4033	Available returns true if the unit is available .
4034	Get returns a provisioner by name .
4035	Registry returns all available provisioners .
4036	Error returns the string representation of the error .
4037	validateVersion returns true if the current version is valid
4038	ReadTarget reads the target
4039	WriteTarget writes t to t .
4040	WriteOnTargetList writes a string to a target .
4041	Conn returns a new Storage instance .
4042	Apps is defined on Storage .
4043	PoolsConstraints returns a collection of pools_constraints .
4044	Users is defined on Storage .
4045	SAMLRequests is defined on Storage .
4046	AppLogCollection returns a collection of logs .
4047	CreateAppLogCollection creates an app log collection .
4048	LogsCollections returns all logs .
4049	ArchiveBuildCmds returns the command - line arguments for a build
4050	ArchiveDeployCmds returns a list of DeployCmds
4051	DeployCmds returns a list of command - line commands to deploy .
4052	runWithAgentCmds returns a slice of strings that are attached to the app .
4053	newApps returns a apps
4054	Commit commits the container
4055	processTags takes a slice of tags and returns a slice of tags .
4056	aggregateContainersBy aggregates all containers of a matcher
4057	chooseNodeToAdd returns the chosen node to use for the container .
4058	chooseContainerToRemove selects a container and returns its ID .
4059	Get returns a router by name .
4060	Default returns the default router name .
4061	Store stores an app .
4062	TsuruV1 retrieves the TsuruV1Client
4063	Tsuru retrieves the TsuruClient
4064	NewAppInformer constructs a new informer for App type . Always prefer using an informer factory to get a shared informer instead of getting an independent one . This reduces memory footprint and number of connections to the server .
4065	NewFilteredAppInformer constructs a new informer for App type . Always prefer using an informer factory to get a shared informer instead of getting an independent one . This reduces memory footprint and number of connections to the server .
4066	Watch returns a watch . Interface that watches the requested apps .
4067	Patch applies the patch and returns the patched app .
4068	NewSharedInformerFactory creates a new instance of SharedInformerFactory .
4069	NewFilteredSharedInformerFactory creates a new instance of a SharedInformerFactory .
4070	Proxy is not implemented
4071	UnbindUnit unbinds a unit instance
4072	Create a new plan .
4073	Remove removes a plan .
4074	ensureDefault ensures that a plan is created .
4075	DeleteInstance deletes an instance from the given event .
4076	ToInfo converts a ServiceInstance to a ServiceInstance .
4077	Update updates a service instance
4078	BindApp binds app instance to service instance
4079	BindUnit binds a unit to a service instance .
4080	UnbindApp binds an app instance to the application instance .
4081	Status returns the status of a service instance .
4082	ProxyInstance is defined on the Proxy interface .
4083	Inc increments the quota for an app .
4084	SetLimit sets the limit for an app .
4085	Set sets the quota for use
4086	Get retrieves a quota .
4087	RemoveImage removes an image from the registry
4088	RemoveAppImages removes images from an app .
4089	Create creates a platform
4090	List all platforms .
4091	FindByName retrieves a platform by its name .
4092	Update updates platform image
4093	Remove a platform
4094	Rollback rolls back a platform
4095	GetPoolByName returns a Pool by name
4096	Manager returns the repository manager .
4097	Register registers a new repository manager
4098	start starts the bindSyncer .
4099	Shutdown implements bindSyncer .
4100	GetForProvisioner returns a builder for a provisioner
4101	get returns a builder by name .
4102	Registry returns all registered builders .
4103	RegisterQueueTask registers a queue task
4104	Apps returns a AppInformer .
4105	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new App .
4106	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new AppList .
4107	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new AppSpec .
4108	Write writes data to the underlying writer .
4109	ResetPassword is used to reset a new password
4110	addKnownTypes adds known types to the scheme .
4111	Register is used to register a Shutdownable .
4112	Do is the implementation of io . Writer interface .
4113	ListImagesOrDefault lists images by default
4114	MigrateAppsCRDs migrates all apps with the specified namespaces .
4115	Register registers a new MigrateFunc .
4116	RegisterOptional registers a new MigrateFunc .
4117	Run runs the given args .
4118	Units returns the provisioner s units .
4119	MarshalJSON method of App
4120	AcquireApplicationLockWait acquires an application lock .
4121	ReleaseApplicationLock releases an application lock .
4122	GetByName finds an app by its name .
4123	AddUnits adds n units to the app .
4124	SetUnitStatus sets the status for the application .
4125	UpdateNodeStatus updates node status
4126	available returns true if app is available .
4127	Grant grants a user to an app .
4128	Revoke revokes an app .
4129	GetTeams returns a list of authenticated teams
4130	setEnv sets the env variable
4131	getEnv returns the environment variable for the app .
4132	validateNew returns an error if the app is not valid .
4133	validate plan
4134	InstanceEnvs returns a map of environment variables for an instance .
4135	Run runs the app .
4136	GetUnits returns all units of app .
4137	GetUUID returns the UUID of the app
4138	Envs returns a map of service environment variables .
4139	SetEnvs sets new environment variables
4140	UnsetEnvs unsets the environment variables .
4141	AddCName adds a new cnames to the app .
4142	Log logs to app .
4143	LastLogs returns a list of app logs .
4144	List returns all apps matching the filter .
4145	Swap swaps two apps .
4146	Start starts the app .
4147	GetDbDriver returns a database driver by name .
4148	GetCurrentDbDriver returns the current database driver
4149	NewForConfig creates a new discovery client for the given Config .
4150	GetAppFromUnitID returns the App corresponding to the given unit ID .
4151	NewPipeline creates a new pipeline
4152	Result returns the result of the pipeline
4153	DecodeJsonPayload decodes the body into v .
4154	UrlFor returns the url for the given path .
4155	GetCorsInfo - get CORS information
4156	MiddlewareFunc returns a HandlerFunc that defines middleware .
4157	MiddlewareFunc returns a HandlerFunc that is middleware .
4158	WriteHeader implements the ResponseWriter interface .
4159	MakeRouter creates a new router .
4160	AppFunc returns a HandlerFunc for the router
4161	escaped path
4162	escapePathExp replaces the escaped pathExp with preEscape .
4163	Start the router
4164	ofFirstDefinedRoute returns the first match of first route .
4165	findRouteFromURL is a helper function to find a route from the router
4166	MiddlewareFunc wraps ContentTypeCheckerMiddleware .
4167	CloseNotify is part of the http . ResponseWriter interface .
4168	MiddlewareFunc returns a middleware function that wraps the AccessLogApache middleware .
4169	executeTextTemplate executes text template
4170	RemoteUser implements environs . RemoteUser .
4171	ApacheQueryString returns the raw query string .
4172	StartTime returns the current time .
4173	ApacheRemoteAddr returns the remote address
4174	ResponseTime returns the response time .
4175	MiddlewareFunc returns a HandlerFunc that is middleware .
4176	EncodeJson encodes v into v .
4177	WriteHeader implements the http . ResponseWriter interface .
4178	MakePath returns a new path expression
4179	MiddlewareFunc is middleware function .
4180	WrapMiddlewares wraps a HandlerFunc into a HandlerFunc .
4181	MiddlewareFunc returns a HandlerFunc that wraps the response .
4182	WriteHeader calls gzip . WriteHeader
4183	Hijack implements http . ResponseWriter
4184	Write implements the http . ResponseWriter interface .
4185	MiddlewareFunc is middleware function .
4186	printDebug prints debug level .
4187	AddRoute adds a route to the tree .
4188	printDebug prints the debugging tree .
4189	FindRoutes returns a list of matches matching the given path .
4190	FindRoutesAndPathMatched returns a list of matching paths matching the given path .
4191	FindRoutesForPath returns a list of matches for the given path .
4192	Use adds middlewares to api
4193	MakeHandler returns an http . Handler
4194	MiddlewareFunc adds a middleware to the middleware stack .
4195	MiddlewareFunc returns a HandlerFunc that adds status to the request .
4196	GetStatus returns the status .
4197	MiddlewareFunc returns a HandlerFunc that is middleware .
4198	Flush implements the http . ResponseWriter interface
4199	MiddlewareFunc returns a HandlerFunc that logs a log entry .
4200	Fetch is used to fetch the S3 .
4201	sanityCheck checks if envBinCheck is valid
4202	release releases the listener .
4203	fetchLoop is a long running routine to fetch the master .
4204	ForkLoop runs the master loop .
4205	Init initializes the file
4206	Fetch implements the billy . File interface for File .
4207	Fetch implements the http . Reader interface .
4208	NewConfig returns a new Config with default values .
4209	Validate validates the config
4210	NewClient returns a new instance of sarama client
4211	AsyncClose closes the partition consumer .
4212	Close closes the consumer
4213	MarkOffset marks an offset
4214	NewConsumer creates a new consumer
4215	MarkOffsets adds offsets to the OffsetStash .
4216	ResetOffset resets the offset
4217	Close closes the consumer
4218	hbLoop is a long running routine that runs a heartbeat .
4219	twLoop is a long running routine that runs a new topic .
4220	cmLoop is called when a channel is closed .
4221	fetchOffsets fetches the offsets from the given list of offsets .
4222	MarkOffset marks an offset
4223	ResetOffset resets the offset
4224	Offset returns a copy of the offset .
4225	Actual implements the InstanceGroup interface .
4226	Expected implements InstanceGroup interface .
4227	Delete deletes an instance group
4228	GetReconciler returns reconciler for the given cluster
4229	GetVersion returns a copy of the version
4230	GetVersionJSON - get version json
4231	Actual implements the ResourceGroup interface .
4232	Expected implements the ResourceGroup interface .
4233	CreateCmd returns a cobra command for kubicorn command
4234	NewUbuntuCluster creates a new Ubuntu cluster
4235	ProviderConfig is defined on the ProviderConfig interface .
4236	SetProviderConfig sets the ProviderConfig
4237	MachineProviderConfigs returns a slice of MachineProviderConfigs
4238	SetMachineProviderConfigs is defined on the Cluster interface .
4239	NewCluster creates a new Cluster
4240	DeployControllerCmd returns the deploy controller command
4241	NewRetrier creates a new retrier
4242	RunRetry runs the retry process .
4243	MustGenerateRandomBytes generates random bytes
4244	ExplainCmd returns the explain command for the cluster
4245	TimeOrderedUUID returns the time ordered UUID
4246	GetConfigCmd returns the cobra command for get config command
4247	RunAnnotated is the same as RunAnnotated .
4248	ListCmd returns the list command for list available states
4249	NewUbuntuCluster creates a new Ubuntu cluster
4250	EditCmd returns the edit command
4251	RemoveKey removes a private key from the keyring
4252	RemoveKeyUsingFile removes a key from the keyring
4253	Actual is defined on the Firewall interface .
4254	Expected implements Firewall .
4255	Apply implements Firewall .
4256	Delete deletes a firewall resource
4257	DeleteCmd returns the cobra command for delete
4258	NewStateStore returns a new state store
4259	Commit commits a cluster
4260	ApplyCmd returns the cobra command for Kubernetes
4261	ExpandPath expands the current working directory
4262	CompletionCmd returns cobra . Command for completion
4263	AdoptCmd returns cobra command for Adopt
4264	StrEnvDef returns the value of the given environment variable
4265	IntEnvDef returns the value of the given environment variable or the default value if not found .
4266	BoolEnvDef returns the value of the given environment variable
4267	readFromFS reads the home directory from the given sourcePath .
4268	VersionCmd returns cobra command for Kubicorn command
4269	NewSignalHandler returns a handler that sends signals to os .
4270	Register implements handler .
4271	NewUbuntuCluster creates a new Ubuntu cluster
4272	BeginningOfHour returns the beginning of the hour
4273	BeginningOfDay returns the beginning of a day .
4274	BeginningOfWeek returns the beginning of the week
4275	BeginningOfMonth returns the beginning of a month
4276	BeginningOfQuarter returns the beginning of a quarter
4277	BeginningOfYear returns the beginning of the current time .
4278	EndOfMinute returns the end of the current time .
4279	EndOfHour returns the end of the current time .
4280	EndOfDay returns the end of the current time .
4281	EndOfWeek returns the end of a week .
4282	EndOfMonth returns the end of a month .
4283	EndOfQuarter returns the end of a quarter
4284	EndOfYear returns the end of the current time .
4285	MustParse is like Parse but panics on error .
4286	Between returns true if both start and end are equal .
4287	ParseInLocation parses a time . Time into a time . Time .
4288	MustParse is like Parse but panics on error
4289	MustParseInLocation is like ParseInLocation but panics if not .
4290	Between returns true if the time1 is in seconds
4291	NewChannelMemoryBackend returns a new instance of ChannelMemoryBackend .
4292	Start starts the ChannelMemoryBackend .
4293	Flush implements the Backend interface .
4294	Stop stops the ChannelMemoryBackend .
4295	Formatted returns the formatted value .
4296	Message returns a string representation of the record .
4297	SetBackend sets the logging backend .
4298	MustGetLogger is like GetLogger but panics on error
4299	Reset resets the log backend .
4300	IsEnabledFor returns true if logging is enabled
4301	Criticalf logs a message at level Critical
4302	Warningf logs a warning message .
4303	Noticef logs a notice message
4304	Infof logs with INFO level .
4305	SetFormatter sets the formatter .
4306	MustStringFormatter is like Formatter but panics on error
4307	formatFuncName returns the function name for f .
4308	Log implements Formatter .
4309	LogLevel returns the log level from a string .
4310	AddModuleLevel adds a new backend to the backend .
4311	GetLevel returns the Level for the given module .
4312	SetLevel sets the logging level for the module .
4313	IsEnabledFor returns true if the given module is enabled for the given level .
4314	MultiLogger returns a LeveledBackend that is used to log backends .
4315	Log implements Backend .
4316	GetLevel returns the log level for the given module .
4317	SetLevel implements Logger interface .
4318	IsEnabledFor returns true if the log level is enabled for the given log level .
4319	ConvertColors converts color values to a slice of string .
4320	NewSyslogBackend returns a new instance of syslog backend
4321	NewSyslogBackendPriority returns a new syslog backend .
4322	SetBackend sets the logging backend .
4323	NewCommander returns a new instance of the Commander
4324	Execute is part of the Command interface .
4325	explicit commands
4326	given a command group
4327	helper function to print a description of the command
4328	handleias returns the command s alias .
4329	Execute is part of the DefaultCommander interface .
4330	LoadFromData loads configuration from data .
4331	LoadFromReader loads a ConfigFile from a Reader .
4332	Reload data from in - memory
4333	AppendFiles appends the specified files to the config file .
4334	GetKeyList returns a list of keys for a given section .
4335	SaveConfigData writes configuration data to out .
4336	SaveConfigFile saves a configuration file .
4337	Find adds a selector to the selector .
4338	FindByXPath is the same as FindByXPath .
4339	FindByLink returns a matched set of matched elements .
4340	FindByLabel returns a matched set of matched elements .
4341	FindByName returns a matched set of matched elements .
4342	FindByClass is like FindByClass .
4343	FindByID returns a new Selection object with the matching id .
4344	First inserts the first element in the selector .
4345	FirstByXPath inserts the first element in the selection of matched elements .
4346	FirstByLink inserts the first element in the selection .
4347	FirstByLabel inserts the first element in the set of matched elements .
4348	FirstByName is a subset of the first element in the selection .
4349	All returns a MultiSelection with the matching selector .
4350	AllByXPath returns a MultiSelection that matches XPath .
4351	AllByLink returns a MultiSelection that matches the specified text .
4352	AllByLabel returns a MultiSelection that matches the given label .
4353	AllByName returns a MultiSelection that matches the selector .
4354	AllByClass returns a MultiSelection with all matched classes .
4355	AllByID adds a single selector to the selector .
4356	FindForAppium is like FindForAppium .
4357	Timeout is an Option to set the timeout
4358	ChromeOptions returns an Option that sets a ChromeOptions value .
4359	JoinPage returns a new instance of Page .
4360	Destroy deletes the session .
4361	Reset resets the page .
4362	Navigate navigates the given URL .
4363	GetCookies returns a list of HTTP cookies
4364	SetCookie sets a cookie .
4365	DeleteCookie deletes a cookie by name .
4366	ClearCookies clears all cookies .
4367	URL returns the URL
4368	Size sets the size of the page .
4369	Screenshot writes a screenshot to disk .
4370	Title returns the page title .
4371	HTML returns the page s HTML .
4372	PopupText returns the popup text .
4373	EnterPopupText will enter popup text
4374	ConfirmPopup confirm popup
4375	CancelPopup cancels the popup .
4376	SwitchToParentFrame switch to parent frame .
4377	SwitchToRootFrame switch to original frame .
4378	NextWindow sets the next window
4379	CloseWindow closes the page .
4380	WindowCount returns the number of windows in the page .
4381	LogTypes returns all log types .
4382	MoveMouseBy moves the mouse to the specified position .
4383	DoubleClick performs a double click .
4384	Click sends a click event to Button .
4385	Click clicks all elements in the selection .
4386	DoubleClick calls the callback for each element in the selection .
4387	Fill fills all elements in a text .
4388	Tap calls the callback for each element in the selection .
4389	Touch handles touch events .
4390	FlickFinger is like Flick but does nothing .
4391	ScrollFinger scrolls the current element at the specified position .
4392	NewCapabilities creates a capability from a list of capabilities
4393	JSON jsonified capabilities
4394	HaveTitle checks if the title matches the title
4395	HaveURL checks if the given URL matches the given URL
4396	HavePopupText checks if the text is in a popga matcher
4397	HaveLoggedError returns a gomega matcher that logs a warning message .
4398	Text returns the text of the element .
4399	Active returns true if the selection is active .
4400	Attribute returns the element s value as a string .
4401	CSS returns the element s CSS property .
4402	selected returns true if the element has been selected .
4403	visible returns true if there is a visible element .
4404	Enabled returns true if the selection is enabled .
4405	HaveCount checks if count is greater than the count
4406	HaveAttribute checks if the attribute matches the expected value
4407	EdgeDriver creates a new EdgeDriver .
4408	Selendroid returns a WebDriver instance for Selendroid
4409	SwitchToFrame switches the frame from the current frame .
4410	Count returns the number of elements in the set of matched elements .
4411	EqualsElement returns true if the two elements are equal .
4412	MouseToElement moves the cursor to the first element in the set of matched elements .
4413	loggingMiddleware is logging middleware .
4414	chainHandlers chains all middlewares
4415	HTTPReverseProxy starts the reverse proxy .
4416	CheckInstallation checks that the installation is installed .
4417	CheckVersion checks if a version is valid
4418	GetVersionForBinary returns the version for a given binary
4419	getUser retrieves a user by its ID .
4420	login is used to authenticate a user
4421	loginHandler handles the request and redirects to the user .
4422	logoutHandler redirects the user to the client .
4423	viewHandler renders the view handler .
4424	Run the client
4425	WithRequest sets the request body
4426	WillRespondWith sets the response of the Interaction .
4427	isJSONFormattedObject returns true if the string is a formatted object
4428	ByUsername finds a user by username
4429	ByID finds a user by its ID
4430	UserLogin is used to authenticate a user with a username
4431	newClient returns a new instance of PactClient
4432	NewClient returns a new instance of PactClient
4433	ListServers returns a list of registered servers
4434	UpdateMessagePact adds a message to the lobby
4435	PublishPacts sends a publish request
4436	getPort extracts the port from a raw URL
4437	getAddress extracts the address from a raw URL
4438	sanitise Ruby response
4439	Publish sends a publish request
4440	FindPortInRange finds a port in a given string .
4441	EachLike returns a matcher that matches the specified content .
4442	Term matcher creates a matcher matcher that matches a pattern .
4443	UnmarshalJSON implements json . Unmarshaler for MapMatcher .
4444	objectToString converts an object to a string
4445	match returns a matcher that matches srcType .
4446	AddMessage adds a new message to the pool
4447	AddInteraction adds a new Interaction
4448	Teardown stops the server
4449	Verify checks if a consortium is valid
4450	stateHandlerMiddleware returns a middleware that tracks state handlers .
4451	VerifyMessageProviderRaw accepts a request and returns a ProviderVerifierResponse
4452	VerifyMessageConsumerRaw is used to verify a message consumer
4453	VerifyProvider is a mock
4454	NewService creates a new mock service
4455	Setup sets up the service manager
4456	addServiceMonitor starts the service creation monitor
4457	removeServiceMonitor removes the monitor monitor .
4458	List all processes
4459	Command implements ServiceManager . Command .
4460	call mocks method
4461	DeleteInteractions mocks base method
4462	AddInteraction mocks base method
4463	WritePact mocks base method
4464	ExpectsToReceive sets the message s description
4465	WithMetadata adds the metadata to the message .
4466	AsType sets the message s type as a message .
4467	UserLogin logs a user in a request
4468	Region returns the name of the region in AWS S3 .
4469	New creates a new S3 instance .
4470	Bucket creates a new bucket .
4471	PutWriter returns an io . WriteCloser for the given bucket .
4472	url creates a new URL from an S3 bucket .
4473	SetLogger sets the logger
4474	InstanceKeys is used to get the instance keys
4475	EnvKeys returns the Keys associated with the AWS environment .
4476	Sign adds a signature to the request .
4477	getAWSKeys is used to get AWS keys
4478	homeDir returns the home directory of the current user .
4479	ACL sets the ACL header .
4480	putPart - put a part .
4481	abort aborts a multipart upload .
4482	growPartSize returns true if the partSize is larger than the given partIndex .
4483	CheckDisallowed returns an error if the given prefix is not allowed .
4484	Process parses the spec and calls ParseError
4485	MustProcess is like Process but panics on error
4486	toTypeDescription returns a description of a type .
4487	Usage prints the usage of the given prefix .
4488	Usagef is used to print usage information
4489	Usaget is a helper function that writes a template to out .
4490	Scan implements Value .
4491	Value implements the driver . Valuer interface .
4492	NewTime returns a new Time object .
4493	TimeFromPtr returns a pointer to a time . Time pointer .
4494	ValueOrZero returns the time . Time value or nil if the value is invalid .
4495	MarshalJSON implements json . Marshaler
4496	SetValid sets the time . Time value .
4497	Ptr returns the time . Time value .
4498	NewBool creates a new NullBool .
4499	BoolFromPtr creates a new bool from a pointer .
4500	UnmarshalJSON decodes JSON data into a Bool .
4501	UnmarshalText implements the encoding . TextUnmarshaler interface .
4502	MarshalJSON implements json . Marshaler
4503	SetValid sets the bool value
4504	NewString creates a new NullString
4505	UnmarshalJSON implements json . Unmarshaler interface .
4506	MarshalText implements the encoding . TextMarshaler interface .
4507	UnmarshalText implements the encoding . TextUnmarshaler interface .
4508	SetValid sets the string value .
4509	StringFromPtr creates a new string from a pointer .
4510	MarshalJSON implements json . Marshaler
4511	NewInt creates a new int .
4512	IntFromPtr returns a pointer to an Int from a pointer .
4513	UnmarshalJSON implements json . Unmarshaler for Int .
4514	MarshalText implements the encoding . TextMarshaler interface .
4515	SetValid sets the valid value .
4516	UnmarshalText implements the encoding . TextUnmarshaler interface .
4517	MarshalText implements the encoding . TextMarshaler interface .
4518	SetValid sets the float value .
4519	MarshalJSON implements json . Marshaler
4520	UnmarshalJSON implements json . Unmarshaler for Float .
4521	UnmarshalText implements the encoding . TextUnmarshaler interface .
4522	MarshalJSON implements json . Marshaler
4523	newGossipChannel creates a new gossip channel
4524	GossipUnicast sends a message to the channel .
4525	GossipBroadcast sends a gossip message to the channel .
4526	Send sends a GossipData to the channel .
4527	SendDown sends down to the channel .
4528	gobEncode encodes a slice of items into a byte slice .
4529	newTokenBucket creates a new token bucket .
4530	wait waits for the capacityBucket .
4531	capacityToken returns the current capacity .
4532	PrefixRangeEnd returns the end of the given prefix .
4533	newLocalPeer creates a new random peer .
4534	getConnections returns a copy of the connection set
4535	createConnection creates a new connection
4536	Add a connection to the local peer
4537	startLocalConnection starts a new local connection .
4538	SendProtocolMsg sends a protocol message to the server .
4539	NewStatus returns a new instance of Status .
4540	makePeerStatusSlice returns a slice of PeerStatus
4541	makeUnicastRouteStatusSlice returns a slice of unicast route status .
4542	makeBroadcastRouteStatusSlice returns a slice of broadcastRouteStatus .
4543	makeLocalConnectionStatusSlice returns a slice of LocalConnectionStatus .
4544	makeTrustedSubnetsSlice converts a slice of strings into a slice of strings .
4545	Range implements the etcdStore interface .
4546	Put implements the etcdStore interface .
4547	DeleteRange implements the EtcdStore interface .
4548	Txn is part of the etcdStore interface .
4549	Compact is not implemented
4550	proposeInternalRaftRequest sends a request to etcd
4551	applyCompare applies etcdserverpb . Compare to etcv .
4552	Desccriptions returns all known peers
4553	OnGC adds a callback which will be called when a peer receives a callback .
4554	OnInvalidateShortIDs registers a callback on invalidate short IDs .
4555	chooseShortID chooses a short ID based on the peer s short ID .
4556	fetchWithDefault updates the peer with the given name and updates the peer with the given name .
4557	Fetch returns the peer with the given name .
4558	fetchAndAddRef returns a peer with the given name or nil if not found .
4559	FetchByShortID looks up a peer by shortID .
4560	GarbageCollect garbage collects all pending peers .
4561	newRoutes returns a set of routes
4562	OnChange adds a callback which will be executed when a callback is executed .
4563	Unicast returns the peer name for the given peer name
4564	UnicastAll returns the unicast address for the given peer name
4565	Broadcast returns a slice of all registered peers .
4566	BroadcastAll returns all known peers .
4567	NewPeer creates a new peer
4568	Register implements the peer interface .
4569	ReadFrom is part of the peer . Peer interface .
4570	WriteTo is part of the peer interface .
4571	LocalAddr returns the address of the peer .
4572	OnGossip implements the Peer interface .
4573	OnGossipBroadcast is invoked when a peer receives a message .
4574	OnGossipUnicast is invoked when a peer receives a message .
4575	NewDefaultServer creates a new server
4576	PeerNameFromUserInput returns a PeerName from a user input
4577	bytes returns the byte representation of a PeerName .
4578	NewRouter creates a new router
4579	sendAllGossip sends all gossip messages to all peers .
4580	sendAllGossipDown sends all GossipDown to the router .
4581	broadcastTopologyUpdate sends a gossip message to all peers .
4582	OnGossipUnicast is a callback for OnGossipUnicast .
4583	OnGossipBroadcast implements router . OnGossipBroadcast .
4584	Gossip returns a new GossipData
4585	OnGossip implements Router . OnGossip
4586	Encode encodes the GossipData into a byte slice .
4587	newState returns a new state
4588	Merge returns a copy of the given GossipData .
4589	mergeReceived returns a new GossipData with the given set .
4590	mergeComplete merges the set with the given set and returns the result .
4591	OnGossipBroadcast is called when a gossip message is received .
4592	OnGossip returns a new GossipData for the given update
4593	Generate key pair
4594	formSessionKey is used to create a new session key .
4595	newTCPCryptoState returns a new instance of tcpCryptoState .
4596	Send sends a message to gob
4597	Send sends a message to the writer .
4598	Send sends a message to the encrypted wire .
4599	Receive decodes a buffer into a buffer
4600	Receive blocks until a message is received .
4601	Receive is part of the Conn interface .
4602	newPeer creates a new peer
4603	incr increments the next message .
4604	Gossip returns a copy of the peer s state .
4605	OnGossipUnicast implements peer . OnGossipUnicast interface .
4606	makeRaftPeer creates a raft peer from the given address
4607	String returns a string representation of a peer
4608	forEachConnectedPeer calls f for each connected peer .
4609	parsePeerUID parses the given string as a PeerUID .
4610	Swap implements sort . Interface .
4611	Less implements sort . Interface .
4612	doIntro executes the protocol introspection command .
4613	filterV1Features returns a map of protocol v1 features
4614	newConnectionMaker creates a new connection maker .
4615	connectionAborted marks the given address as aborted .
4616	newGossipSender returns a new instance of gossipSender
4617	Send sends data to the sender .
4618	Broadcast adds a new broadcast to the sender .
4619	Flush implements the SendSender interface .
4620	Sender returns a new gossip sender with the given channel name .
4621	Flush returns true if all senters have been flushed .
4622	findMainPath returns the main path .
4623	Create a new channel
4624	Send a message to a channel
4625	SendJSON marshals clientID to JSON
4626	remapError returns an error if the error is not nil .
4627	NamespacedContext returns a context containing the given namespace .
4628	toToItem converts MemcacheGetResponseItem to an Item .
4629	singleError returns an error if the error is a MultiError .
4630	Get returns the value for a given key .
4631	GetMulti returns a map with the given key .
4632	Delete deletes a key .
4633	DeleteMulti deletes the given key .
4634	Increment increments a value in the context .
4635	IncrementExisting increments an existing value .
4636	set sets the given item with the given policy .
4637	Get returns the value for a given key .
4638	Stats returns statistics about the memcache .
4639	Flush flushes the Memcache .
4640	RunInBackground runs the background function .
4641	List all the modules .
4642	SetNumInstances sets the number of instances for the module .
4643	Get versions of the module
4644	DefaultVersion returns the default version of the module
4645	Start a module
4646	Stop a module
4647	Ancestor sets the ancestor ancestor for the query .
4648	EventualConsistency is used to indicate whether the query has succeeded .
4649	Project adds the field names to the query .
4650	Distinct sets the query to use when creating a new query .
4651	DistinctOn sets distinct on field names .
4652	KeysOnly sets the query keys only .
4653	Limit sets the limit for the query .
4654	Offset sets the offset for the query .
4655	BatchSize updates the batch size .
4656	Start sets the cursor to start .
4657	End ends the query .
4658	Count executes the query and returns the number of results .
4659	Run executes the query .
4660	Next returns the next key .
4661	Cursor returns a copy of the cursor .
4662	String returns a string representation of the cursor .
4663	DecodeCursor decodes a Cursor from a string .
4664	saveEntity saves an entity .
4665	Namespace returns a context that matches the given namespace .
4666	typeof returns the typeof for the given name .
4667	dot returns the dot of the given type .
4668	joinFunc joins two sets .
4669	validPropertyName returns true if the given name is a valid property name .
4670	getStructCodec returns the structCodec for the given reflect . Type .
4671	LoadStruct loads a struct into dst
4672	SaveStruct saves a struct to a struct
4673	ServingURL returns the URL for the given blob key .
4674	Delete serving URL
4675	CurrentOAuth gets OAuth User
4676	OAuthConsumerKey returns OAuth authentication key
4677	String returns User as a string .
4678	LoginURL returns a URL that can be used to login a given URL .
4679	CreateLoginURLFederated creates a login url for the specified identity and identity .
4680	Create a new logout URL
4681	insertContext adds a context to the AST .
4682	NewClient returns a new Client instance .
4683	NewContext returns a new context .
4684	NewRemoteContext creates and returns a new context .
4685	Debugf logs to stdout .
4686	guestbookKey returns a datastore key for the guestbook .
4687	toRetryParameters converts options to TaskQueueRetryParameters .
4688	NewPOSTTask returns a new POST task .
4689	ParseRequestHeaders parses a http . Header into RequestHeaders .
4690	Add a task to the queue
4691	AddMulti adds multiple tasks to the queue
4692	Delete deletes a task with the given name .
4693	DeleteMulti deletes a task queue
4694	Lease is part of the lease .
4695	LeaseByTag is part of the Lease interface .
4696	Purge the task queue
4697	ModifyLease modifies the task queue
4698	QueueStats returns the statistics for the given queue names .
4699	IsTimeoutError returns true if err is a timeout error .
4700	Func creates a new function .
4701	Task returns a task queue for the given arguments .
4702	RequestHeaders extracts the request headers from the context .
4703	WithContext is part of the http . Request interface .
4704	WithAPICallFunc returns a context with the given API call override function .
4705	APICall is part of Interface .
4706	GetModuleHostname returns the hostname of the module .
4707	GetAccessToken returns the current access token .
4708	PublicCertificates returns all public certificates for an app .
4709	ServiceAccount returns the name of the service account .
4710	SignBytes signs the given bytes .
4711	Fetch data from the blobstore .
4712	seek returns the position of the offset .
4713	multiKeyToProto converts an appID to a list of keys .
4714	referenceValueToKey converts a PropertyValueValue to a key .
4715	keyToReferenceValue converts a key to a PropertyValue_ReferenceValue .
4716	Put stores a key in the context .
4717	PutMulti puts a multi value into the datastore .
4718	Delete deletes a key .
4719	DeleteMulti deletes a single key .
4720	deploy is used to deploy a command
4721	Next returns next record
4722	toToAppLogs converts appLogLines to appLogs .
4723	protoRecord converts a RequestLog into a Record .
4724	Run runs the given appengine .
4725	run is the main entry point .
4726	Current returns the current user
4727	IsAdmin returns true if user is admin .
4728	isErrFieldMismatch returns true if err is ErrFieldMismatch .
4729	Stat returns a BlobInfo describing a blob .
4730	Send sends an appengine blob .
4731	UploadURL uploads a blob
4732	Delete deletes a blob from an appengine .
4733	DeleteMulti deletes a blob from the blobstore .
4734	NewReader returns a Reader for the given blobKey .
4735	Handle registers a function for a message .
4736	Send sends a message
4737	Send an invite
4738	SendPresence sends a presence request .
4739	GetPresence returns the presence of the given Jid .
4740	GetPresenceMulti returns a list of presence for a given JID .
4741	newStructFLS returns a FieldLoadSaver .
4742	SaveStruct saves a struct to a struct
4743	Namespaces returns all keys in the context .
4744	Kinds returns all keys in the context .
4745	RunInTransaction runs the given function f with the given function f .
4746	import returns true if the given file path is a import spec
4747	importSpec returns the import spec for the given file .
4748	declImports returns true if the given import path is an import
4749	isPkgDot returns true if the expression is a dot .
4750	isTopName returns true if the expression is a top name .
4751	isName returns true if the expression is a name .
4752	isCall returns true if the expression is a call expression .
4753	containsTo returns true if the given node is a subnode .
4754	isEmptyString returns true if the expression is empty string .
4755	countUses returns the number of tokens in the given scope .
4756	assignTo returns true if the given AST is assigned to the given AST .
4757	newPkgDot creates and returns an expression .
4758	renameTop is used to rename the top of a file .
4759	matchLen returns the length of two strings .
4760	deleteImport deletes an import if it exists .
4761	rewriteImport rewrites an import if necessary .
4762	DefaultTicket returns the default ticket
4763	flushLog sends a flush to the context .
4764	withDeadline returns a copy of the given deadline .
4765	KeepAlive sends a keep - alive socket .
4766	applyTransaction applies a transaction to the message .
4767	Analyze returns an app .
4768	buildContext builds a new build context .
4769	sysemizeMain is used to synthesize the main file .
4770	findInGopath finds the package in dir .
4771	copyTree copies files from srcDir to dstDir .
4772	copyFile copies src into dst .
4773	checkMain checks if the main package is valid .
4774	isMain reports whether the func declaration is a main .
4775	readFile reads a single file .
4776	initField returns a reflect . Value for val .
4777	loadEntity loads an EntityProto from src into dst .
4778	validIndexNameOrDocID returns true if the given string is a document name .
4779	Open opens an index .
4780	Put adds a single element to the index .
4781	Get retrieves documents from the index .
4782	Delete removes a document from the index .
4783	DeleteMulti deletes all documents with the given ids .
4784	Search returns a new Iterator for the given query .
4785	fetchMore fetches more items from the iterators .
4786	Next returns the next item from the iterator or an error if one exists .
4787	Facets returns all facets in this iterator .
4788	DefaultBucketName returns the default bucket name .
4789	valid returns true if the key is valid
4790	Equal returns true if two keys are equal
4791	root returns the root key .
4792	marshal encodes b into b .
4793	String returns a string representation of the Key .
4794	Encode encodes the Key into a base64 encoded string .
4795	DecodeKey decodes a base64 encoded key
4796	NewIncompleteKey creates a new Key with the given parent .
4797	NewKey creates a new Key .
4798	AllocateIDs allocates a set of IDs for a given kind .
4799	IsOverQuota returns true if the given error is an OverQuota .
4800	ClassicContextFromContext extracts the context from a context
4801	Send sends a message
4802	SendToAdmins sends a message to the user .
4803	Failures returns the number of failed failures
4804	decodeFieldNumberAndTyp3 decodes bz . Number and Typ3 .
4805	checkTyp3 checks if the given type is a type .
4806	decodeTyp3 decodes a typ3 from bz .
4807	NewPrefixBytes returns a new instance of PrefixBytes .
4808	getLengthStr returns a string representation of the length
4809	collectImplementers_nolock collects all the implementations of a type
4810	checkConflictsInPrio_nolock checks if there is a conflict in conflict .
4811	constructConcreteType constructs a concrete type .
4812	MarshalBinaryLengthPrefixedWriter implements the encoding . TextMarshaler interface .
4813	MarshalBinaryBare implements encoding . BinaryMarshaler interface .
4814	UnmarshalBinaryLengthPrefixed implements the encoding . BinaryUnmarshaler interface for Codec .
4815	UnmarshalBinaryBare implements the encoding . BinaryUnmarshaler interface for Codec .
4816	MustMarshalJSON implements json . Marshaler
4817	MustUnmarshalJSON is like UnmarshalJSON but panics on error .
4818	MarshalJSONIndent implements json . Marshaler .
4819	newDataReader returns a new internalDataReader .
4820	Read implements the Reader interface .
4821	ListenAndServeTLS is like ListenAndServeTLS but allows you to configure the server .
4822	Produce wraps ProducerFunc
4823	PromoteHandlerFunc returns a handler that will invoke the specified handler function .
4824	Serve adds a handler to the server
4825	Serve accepts incoming connections and handles incoming connections
4826	Fail prints the error message and exits .
4827	WriteUsage writes usage to w .
4828	WriteHelp writes help to w .
4829	MustParse is like Parser but panics on error
4830	Parse parses the contents of dest into dest .
4831	walkFields walks all fields in v and recursively .
4832	Parse parses the provided arguments into the Parser .
4833	setSlice is used to set a slice of strings .
4834	canParse returns true if t is a parseable .
4835	isBoolean returns true if t is aBoolean type
4836	NewFromMap creates a Tree from a map
4837	Insert inserts a new value into the tree and returns the new value .
4838	Delete deletes a node from the Tree .
4839	DeletePrefix removes a prefix from the tree .
4840	deletePrefix deletes the prefix with the given prefix .
4841	Get returns the value for the given string
4842	LongestPrefix returns the longest prefix of s .
4843	Minimum returns the minimum element in the Tree .
4844	WalkPrefix walks the tree calling walkFn for each prefix .
4845	returns true if n is recursive .
4846	ToMap converts Tree to a map .
4847	checkip returns the iptype of the given IP address .
4848	readuint32 reads a uint32
4849	readuint128 reads a uint128 from a uint32 .
4850	load message from mesag
4851	Printrecord prints a record
4852	Main is the entry point for gopher .
4853	SaveToPdfFile saves a PDF file
4854	CubicCurveTo implements the Path interface .
4855	ArcTo implements the Path interface .
4856	String returns a string representation of this Path .
4857	VerticalFlip returns the vertical copy of this path .
4858	NewGlyphCache returns a new GlyphCacheImp
4859	Fetch fetches the glyph cache from the given glyph cache .
4860	renderGlyph renders a glyph .
4861	Copy returns a copy of this Glyph .
4862	Fill returns the width of the glyph .
4863	Main draws a line .
4864	Draw draws the screen .
4865	Paint paints the given span .
4866	SetColor sets the color of the given color .
4867	NewPainter returns a new Painter .
4868	GetStringBounds returns the bounds of a string .
4869	recalc recalculates the current font .
4870	SetFont sets the current font .
4871	ClearRect clears the rectangle .
4872	drawString draws a string .
4873	newGroup creates a new group .
4874	newMask creates a new mask .
4875	embedSvgFont adds a font to the current font
4876	TraceQuad converts a liner to a liner .
4877	GetFontName returns the font name
4878	NewStackGraphicContext returns a new instance of StackGraphicContext
4879	NewFolderFontCache creates a new FolderFontCache .
4880	NewSyncFolderFontCache creates a new SyncFolderFontCache .
4881	Main is the main entry point .
4882	NewPdf creates a new PDF document .
4883	clearRect clears the rectangle .
4884	NewGraphicContext creates a GraphicContext .
4885	Clear clears the screen .
4886	GetStringBounds returns the bounds of a string .
4887	CreateStringPath creates a new line with the specified text .
4888	FillStringAt fills the text at the specified position .
4889	SetStrokeColor sets the font color .
4890	SetFillColor sets the fill color .
4891	SetLineDash sets the line dash offset .
4892	SetLineWidth sets the line width .
4893	Main is the entry point for world
4894	Draw draws a text .
4895	SaveToPngFile saves image to png .
4896	LoadFromPngFile loads a png from a Png file .
4897	Resource returns a string representation of a file .
4898	Output returns a string representation of a PDF document .
4899	Main is the main entry point .
4900	Draw draws the file with the given filename .
4901	Main draws the geometry .
4902	Flush draws the given screen .
4903	Dash draws a dash .
4904	CubicCurve draws a vertical curve .
4905	FillStroke draws a line with the given coordinates .
4906	FillStyle draws a screen style .
4907	PathTransform draws the transform function .
4908	Star draws the Star
4909	Draw draws the given screen .
4910	ConvertPath converts a path to a vectorizer .
4911	Main draws a line cap .
4912	Draw draws two lines .
4913	DrawContour draws a point from a path .
4914	Flatten flattens the given path .
4915	Clear resets the image .
4916	ClearRect clears the rectangle .
4917	DrawImage draws an image .
4918	Main draws a frameimage
4919	Draw draws a png .
4920	Draw draws the screen .
4921	ChecksumString32S returns the checksum of a string .
4922	ChecksumString64S returns the checksum of a string .
4923	NewS32 returns a new instance of XXHash32 .
4924	NewS64 returns a new instance of XXHash64 .
4925	round64 rounds a uint64 value to h .
4926	Checksum32S calculates the checksum of two bytes .
4927	Checksum64S returns the checksum of the input byte slice .
4928	getStage returns the stage of the daemon stage .
4929	New returns a new glg instance
4930	get glg
4931	SetMode sets the mode for logging .
4932	SetPrefix sets the prefix of the logger
4933	GetCurrentMode gets the current mode .
4934	InitWriter initializes the writer
4935	SetWriter sets the logger writer
4936	SetLevelColor sets the log level color .
4937	SetLevelWriter sets the logger s level .
4938	AddStdLevel adds a log level to the standard logger .
4939	EnableColor enables color
4940	EnableLevelColor enables level color .
4941	DisableLevelColor disables the log level color .
4942	RawString returns the raw string .
4943	TagStringToLevel returns the level for a given tag
4944	Println writes a formatted PRINT message .
4945	Fatal panics if err ! = nil
4946	Fatalf logs a formatted string and panics .
4947	isModeEnable checks if the current level is enabled
4948	CaptureMetrics is a wrapper around CaptureMetricsFn
4949	get returns the value for the given key .
4950	Save writes data type to out .
4951	SaveToFile writes data to a file
4952	Load decodes data from in in into cri .
4953	LoadFromFile loads data from a file
4954	Key returns the key corresponding to id .
4955	Value returns the value of id .
4956	Delete removes the entry from the list .
4957	Set validates the version string .
4958	Compare compares two versions .
4959	Slice returns the slice of the version .
4960	BumpMajor increments the version number .
4961	BumpMinor increments the version .
4962	BumpPatch increments the patch .
4963	validateIdentifier returns an error if the id is not a semver identifier .
4964	newStream creates a new Stream .
4965	addSubscriber creates a new subscriber for the event id .
4966	New returns a new Server instance
4967	Close closes the server
4968	CreateStream creates a stream
4969	RemoveStream removes a stream .
4970	StreamExists checks if a stream exists
4971	Publish sends an event to the server .
4972	NewClient returns a new instance of Client
4973	Subscribe adds a handler to the stream
4974	SubscribeChan subscribes to the given stream
4975	SubscribeRaw adds a handler to the event queue
4976	Unsubscribe unsubscribes from the given channel .
4977	NewEventStreamReader returns a new EventStreamReader .
4978	ReadEvent implements io . Reader
4979	HTTPHandler is the HTTP handler
4980	Add adds an event to the log .
4981	Replay replays the event log .
4982	readKey reads a PEM - encoded key from the given path .
4983	writeKey writes the ECDSA private key to disk .
4984	anyKey returns a crypto . Signer for the given filename .
4985	sameDir returns the path to the given directory .
4986	printAccount prints an account
4987	tmpl is a helper function to print template data to w .
4988	printUsage prints usageTemplate to w .
4989	FromRequest extracts the X - Real - Ip header from the request .
4990	Do executes the cdp command .
4991	Do executes the cdp command .
4992	Do implements the removeDOMStorageItemParams interface .
4993	Do implements the SetDOMStorageItem interface .
4994	Do sends a push message .
4995	Do executes the cdp command .
4996	Do executes the inspect worker .
4997	Do executes force update on page load .
4998	Do executes the SkipWaitingParams command .
4999	Do executes the cdp command .
5000	Do executes the cdp stopAllWorkers command .
5001	Do executes the cdp stopWorker .
5002	Do deregister params
5003	Do executes the update registration params
5004	Do executes the cdp command .
5005	Do executes the cdp command .
5006	Error implements the error interface for ExceptionDetails .
5007	Do executes the release animations .
5008	Do implements SeekAnimationsParams .
5009	Do executes the cdp command .
5010	Do executes the playback rate .
5011	Do implements the SetTimingParams interface .
5012	Do implements the PrepareForLeakDetection interface .
5013	DoePurgeJavaScriptMemory implements the cdp interface for cdp .
5014	SetPressureNotificationsSuppressed - Sets pressure notifications .
5015	SimulatePressureNotification params
5016	WithSamplingInterval adds the SamplingInterval to the start sampling params
5017	WithSuppressRandomness adds the suppressRandomness to the start sampling params
5018	Do runs the start sampling parameters .
5019	Do runs the stop sampling parameters .
5020	Do implements the ClearDevice interface .
5021	Set the device orientationOverride params
5022	Do executes the start violation report .
5023	Do executes the stop violation report .
5024	String returns a string representation of Modifier .
5025	WithNodeID adds the nodeID to the get partialAXTree params
5026	WithBackendNodeID adds the backend node ID to the get partialAXTree params
5027	WithObjectID adds the objectID to the get AialAXTree params
5028	WithFetchRelatives adds the FetchAXTree to the get partialAXTree params
5029	Do implements the SetTimeDomainParams interface .
5030	WithClipRect adds the clipRect to the profile snapshot params
5031	Do executes the release snapshot command .
5032	Do implements the ClearObjectStore interface .
5033	Do deletes a database params
5034	Do deletes the object store entries params
5035	WithKeyRange adds the key range to the request data params
5036	Do executes the set sampling interval .
5037	Do executes the cdp command .
5038	WithCallCount adds the CallCount to the StartPreciseCoverage params
5039	WithDetailed adds the detail to the StartPreciseCoverage params
5040	Do implements the Do interface .
5041	Do executes the start type profile .
5042	Do implements the DisablePreciseCoverageParams interface .
5043	Do implements the StopTypeProfileParams interface .
5044	Set the ignore certificateErrors params
5045	Do implements the AddInspectedHeapObjectParams interface .
5046	Do implements CollectGarbageParams .
5047	WithSamplingInterval adds the SamplingInterval to the start sampling params
5048	Do implements the Do interface .
5049	WithReportProgress adds the reportProgress to the stop tracking heap objects params
5050	Do implements the StopTrackingHeapObjects interface .
5051	WithReportProgress adds the reportProgress to the take snapshot params
5052	Do runs the Do action .
5053	WithBrowserContextID adds the BrowserContextID to the grant permission params
5054	Do sends a request to cdp
5055	WithBrowserContextID adds the BrowserContextID to the reset permissions params
5056	Do implements the cdp interface .
5057	Do executes the crash command .
5058	Do executes the crashGpuProcess command .
5059	WithQuery adds the query to the get histograms params
5060	WithTargetID adds the targetID to the get window ID params
5061	Do implements the SetWindowBounds interface .
5062	WithImage adds the image to the set image params
5063	Do sets the dock tile params
5064	Do deletes the delete cache params
5065	Do deletes the entry params
5066	WithPathFilter adds the pathFilter to the params
5067	Do deallocates the search results .
5068	Do executes the cdp command .
5069	Do implements the MarkUndoableState interface .
5070	WithIncludeUserAgentShadowDOM adds the IncludeUserAgentShadowDOM to the perform search params
5071	Do executes the cdp command .
5072	Do implements the cdp . RemoveAttributeParams interface .
5073	Do deletes the node params
5074	Do implements RequestChildNodesParams .
5075	WithNodeID adds the nodeID to the resolve node params
5076	WithBackendNodeID adds the backendNodeID to the backend node params
5077	WithExecutionContextID adds the ExecutionContextID to the resolve node params
5078	Do implements the SetAttributeValueParams interface .
5079	WithName adds the name to the set attributeAsText params
5080	Do executes the command .
5081	Do executes the cdp command .
5082	Do implements the SetInspectedNode interface .
5083	Do implements the SetNodeValueParams interface .
5084	Do implements the SetOuterHTMLParams interface .
5085	Do executes the undo command .
5086	Do executes the forceudo state .
5087	Do the effective property value for node
5088	Do implements cp . Do
5089	Do executes the close parameters .
5090	Do implements the ClearDataForOrigin interface .
5091	Track caches storage for origin .
5092	TrackIndexedDBForOrigin params
5093	Do implements the UnrackCacheStorageForOrigin interface for UntrackCacheStorageForOrigin .
5094	Do implements the UnrackIndexedDBForOrigin interface .
5095	Do hides the hide highlight params
5096	Do highlights the highlight frame .
5097	WithNodeID adds the nodeID to the HighlightNode params
5098	WithBackendNodeID adds the backendNodeID to the HighlightNode params
5099	WithObjectID adds the objectID to the HighlightNode params
5100	WithSelector adds the selector to the highlight node params
5101	Do executes the highlight node .
5102	Do executes the highlight quad .
5103	Do executes the highlight rectamp .
5104	WithHighlightConfig adds the highlight mode to the set inspect mode params
5105	Do executes the inspect mode .
5106	SetShowAdlights params
5107	WithMessage adds the message to the set pausedInDebuggerMessage params
5108	Do implements the SetPausedInDebuggerMessage interface .
5109	Do implements the ShowDebugBorders interface .
5110	Do implements the ShowFPSCounter interface .
5111	SetShowPaintRects implements the SetShowPaintRects interface .
5112	SetShowScrollBottleneckRectsParams is part of the ShowScrollBottleneckRects interface .
5113	SetShowHitTestBorders params
5114	SetShowViewportSizeOnResize params
5115	Do implements the cdp . Cache interface .
5116	Do implements the ClearBrowser interface .
5117	WithErrorReason adds the error reason to the request params
5118	WithRawResponse adds the raw response to the continue request params
5119	WithURL adds the URL to the request params
5120	WithMethod adds the method to the request params
5121	WithPostData adds the post data to the request params
5122	WithHeaders adds the headers to the ContinueInterceptedRequest params
5123	WithAuthChallengeResponse adds the authChallengeResponse to the request params
5124	Do executes the request .
5125	WithURL adds the URL to the delete cookies params
5126	WithDomain adds the domain to the delete cookies params
5127	WithPath adds the path to the delete cookies params
5128	Do deletes all cookies .
5129	WithConnectionType adds the ConnectionType to the emulate network conditions params
5130	Execute network conditions .
5131	Do executes the cdp command .
5132	WithUrls adds the urls to the get cookies params
5133	Do executes the CDP playback command .
5134	Do implements the DisableURLSParams interface .
5135	Do implements the Do interface .
5136	Do implements the Cache interface .
5137	WithURL adds the URL to the set cookie params
5138	WithDomain adds the domain to the set cookie params
5139	WithPath adds the path to the set cookie params
5140	WithSecure adds the secure to the cookie params
5141	WithHTTPOnly adds the HTTPOnly to the set cookie params
5142	WithSameSite adds the cookies to the cookie params
5143	WithExpires adds the expires to the cookie params
5144	Do executes the set cookies command .
5145	Set the data size limits for test .
5146	Do implements the SetExtraHTTPHeaders interface .
5147	Do executes the request interceptor .
5148	Do implements the clearDeviceMetricsOverride interface .
5149	Do executes the delete command .
5150	Do executes the reset page scale factor .
5151	SetFocusEmulationEnabled params
5152	Do implements the CPUThrottlingRate interface .
5153	WithColor adds the color override params to the default background color override params
5154	Do sets the default background color override parameters .
5155	WithScale adds the scale to the set of metrics override params
5156	WithDontSetVisibleSize adds the set visible size to the set metrics override params
5157	WithScreenOrientation adds the screenOrientation to the params
5158	Do implements the Monitor interface .
5159	SetScrollbarsHiddenParams implements the SetScrollbarsHiddenParams interface .
5160	SetDocumentCookieDisabled params
5161	Do sends the touch events for the mouse
5162	Do executes the cdp command .
5163	WithLatitude adds the latitude to the set location override params
5164	WithLongitude adds the Longitude to the set of geolocationOverride params
5165	WithAccuracy adds the accuracy to the set location override params
5166	Do executes the cdp command .
5167	Do sets the page scale factor .
5168	Do implements the SetScriptExecutionDisabled interface .
5169	WithMaxTouchPoints adds the max touch points to the params
5170	SetTouchEmulationEnabled params
5171	WithBudget adds the budget to the set of virtualTimePolicy params
5172	WithMaxVirtualTimeTaskStarvationCount returns a WithVirtualTimeTaskStarvationCount instance
5173	WithWaitForNavigation adds the waitForNavigation to the params
5174	WithAcceptLanguage adds the AcceptLanguage to the request params
5175	WithPlatform adds the platform to the set user agent override params
5176	Do executes the user agent override .
5177	Do executes the cdp command .
5178	Do executes the insert text command .
5179	WithButtons adds theButtons to the button event params
5180	Do executes the mouse action .
5181	Do executes the touch event .
5182	Do executes the touch event .
5183	Do executes the cdp command .
5184	SynthesizePinchGesture params
5185	WithXOverscroll adds the xOverscroll to the SynthesizeScrollure params
5186	WithYOverscroll adds the rotation to the SynthesizeScrollure params
5187	Do implements SynthesizeScrollGestureParams .
5188	Do executes the SynthesizeTapGestureParams command .
5189	Domain returns the domain name .
5190	WithDepth adds the depth to the get event listeners params
5191	Do implements the removeDOMBreakpoint interface .
5192	WithTargetName adds the target name to the remove event listener breakpoint params
5193	Do executes the delete breakpoint .
5194	Do executes the pause breakpoint .
5195	Do executes the delete breakpoint command .
5196	Do executes the DOMBreakpoint command .
5197	Do executes the cdp command .
5198	Set executes the instrumentation breakpoint .
5199	Do is part of the XHR interface .
5200	WithExecutor adds an executor to the context .
5201	Execute is part of the Context interface .
5202	AttributeValue returns the value of an attribute .
5203	xpath returns the xpath of the node .
5204	String returns a string representation of a NodeType .
5205	Do implements the SetSinkToUseParams interface .
5206	Do executes the start tab mirroring .
5207	Do executes the cdp command .
5208	Do executes the cdp command .
5209	Do implements the StopObserving interface .
5210	Do executes the cdp command .
5211	Do implements the cdp . ClearEventsParams interface .
5212	WithObjectID adds the objectID to the call function on params
5213	WithArguments adds the arguments to the CallFunctionOn params
5214	WithExecutionContextID adds the execution contextID to the params
5215	WithObjectGroup adds the objectGroup to the call function group params
5216	Do implements the cdp interface .
5217	WithContextID adds the contextID to the evaluation params
5218	WithOwnProperties adds theOwnProperties to the get properties params
5219	WithGeneratePreview adds the generatePreview to the get properties params
5220	WithExecutionContextID adds the ExecutionContextID to the GlobalLexicalScopeNames params
5221	WithObjectGroup adds the objectGroup to the params
5222	Do executes a release object .
5223	Do executes the release object group .
5224	Do executes the command .
5225	SetCustomObjectFormatterEnabled params
5226	SetMaxCallStackSizeToCapture params
5227	Do executes the cdp command .
5228	Do executes the cdp command .
5229	Do removes the binding params
5230	Do executes the cdp command .
5231	Do implements the ClockSyncMarker interface .
5232	WithBufferUsageReportingInterval adds the bufferUsageReportingInterval to the start params
5233	WithNoDisplayUpdates adds the NoDisplayUpdates to the BeginFrame params
5234	WithScreenshot adds the screenshot to the begin frame params
5235	Do implements the Do interface .
5236	WithClip adds the clip to the capture params
5237	WithFromSurface adds the camera to the capture screenshot params
5238	WithWorldName adds the world name to the create isolation world params
5239	WithGrantUniveralAccess adds the grantUniveralAccess to the create world params
5240	Do the navigation history
5241	WithPromptText adds the prompt text to the params
5242	Do executes the javascript dialog .
5243	WithReferrer adds the Referrer to the Navigate params
5244	WithTransitionType adds the transitionType to the Navigate params
5245	WithFrameID adds the frameID to the Navigate params
5246	Do - NavigateToHistoryEntry params
5247	WithLandscape adds the Landscape to the PrintToPDFPar params
5248	WithDisplayHeaderFooter adds the display header footer to the buffer
5249	WithPrintBackground adds the print background to the params
5250	WithScale adds the scale to the buffer
5251	WithPaperWidth adds the paper width to the buffer
5252	WithPaperHeight adds the paper height to the buffer
5253	WithIgnoreInvalidPageRanges adds the ignore invalid page ranges to the buffer
5254	WithFooterTemplate adds the footerTemplate to the params
5255	WithPreferCSSPageSize adds the preferCSSPageSize to the buffer
5256	WithScriptToEvaluateOnLoad adds the scriptToEvaluateOnLoad to the reload params
5257	Do executes the cdp command .
5258	RemoveScriptToEvaluateOnNewDocument params
5259	Do executes the screencast frameAck .
5260	SetAdBlockingEnabled params
5261	Do executes the cdp command .
5262	Do sets the font families .
5263	SetFont sets the font sizes .
5264	Do implements the SetDocumentContentParams interface .
5265	WithDownloadPath adds the downloadPath to the set download path params
5266	Do executes the cdp action .
5267	SetLifecycleEventsEnabled params
5268	WithFormat adds the format to the startcast params
5269	WithMaxWidth adds the max width to the start screencast params
5270	WithMaxHeight adds the max height to the start screencast params
5271	WithEveryNthFrame adds the EveryNthFrame to the start screencast params
5272	Do executes the start screencast .
5273	Do implements cp . StopLoadingParams .
5274	Do executes the cdp command .
5275	Do executes the stopScreencastParams command .
5276	Do executes the produce compilation cache .
5277	Do implements the AddCompilationCache interface .
5278	Do implements the cdp . Cache interface .
5279	WithGroup adds the group to the generate test report params
5280	Do executes the cdp command .
5281	Do executes the cdp command .
5282	WithBindingName adds the binding name to the ExposeDevToolsProtocol params
5283	Do implements ExposeDevToolsProtocol .
5284	WithBrowserContextID adds the BrowserContextID to the create target params
5285	WithSessionID adds the sessionID to the DetachFromTarget params
5286	Do implements the DetachFromTarget interface .
5287	Do executes the request .
5288	WithSessionID adds the sessionID to the send message to the params
5289	Do executes the send message command .
5290	Do implements the AutoAttachParams interface .
5291	Do sets the discovery targets params
5292	Do implements the SetRemoteLocationsParams interface .
5293	WithPatterns adds the patterns to the Enable params
5294	WithHandleAuthRequests returns a new EnableAuthRequests instance
5295	Do executes the fail request .
5296	WithBody adds the body to the response body params
5297	WithResponsePhrase adds the responsePhrase to the response request params
5298	Do executes the request .
5299	WithURL adds the URL to the continue request params
5300	WithMethod adds the method to the continue request params
5301	WithPostData adds the post data to the request params
5302	WithHeaders adds the headers to the continue request params
5303	Do executes the cdp command .
5304	Do executes the cdp command .
5305	Do executes the ContinueToLocation params .
5306	WithIncludeCommandLineAPI adds the includeCommandLineAPI to the EvaluateOnCallFrame params
5307	Do executes the cdp pause command .
5308	Do executes the pause on asynchronous call .
5309	Do deletes a breakpoint .
5310	Do executes the cdp command .
5311	Do executes the async call stack depth .
5312	Do sets the blackbox patterns params
5313	Do implements the SetBlackboxedRanges interface .
5314	WithURL adds the URL to the set endpoint byURL params
5315	WithURLRegex adds the URLRegex to the breakpoint byURL params
5316	WithScriptHash adds the ScriptHash to the SetBreakpointByURL params
5317	WithColumnNumber adds the breakpoint to the set URL params
5318	WithCondition adds the condition to the set breakpointOnFunctionCall params
5319	Do sets the breakpoints active params
5320	Do implements the pauseOnExceptions interface .
5321	Do executes the set return value .
5322	WithDryRun adds the scriptSource to the params
5323	SetSkipAllPauses - SetSkipAllPauses
5324	Do implements the SetVariableValueParams interface .
5325	WithBreakOnAsyncCall adds the breakOnAsyncCall to the StepInto params
5326	Do executes the step step .
5327	Do executes the stepout command .
5328	Do executes the cdp step .
5329	Listen implements the notify . ListenFundle interface .
5330	ListenClose is part of the Bundle interface .
5331	Connected implements Service .
5332	Disconnected implements the Bundler interface .
5333	OpenedStream is part of the Bundle interface .
5334	ClosedStream is part of the Bundle interface .
5335	WithNoDial is used to configure a context with noDial value
5336	GetNoDial gets the NoDial value from the context
5337	WithDialPeerTimeout returns a context with the dial peer timeout set
5338	Open is part of the Driver interface .
5339	Prevpos is like Prevpos but returns - 1 .
5340	Last returns the last item in the buffer .
5341	DeleteMostRecentBytes deletes the most recent bytes .
5342	NewFloat64RingBuf returns a new instance of Float64RingBuf
5343	TwoContig returns the second and second .
5344	Earliest implements the RingBuf interface .
5345	Values returns a copy of the float64 value .
5346	NewAtomicFixedSizeRingBuf returns an initialized AtomicFixedSizeRingBuf .
5347	Reset resets the ring buffer .
5348	NewPointerRingBuf creates a new instance of PointerRingBuf .
5349	TwoContig returns the first element of b .
5350	NumPage returns the number of pages .
5351	Font returns the font with the given name .
5352	Width returns the width of the font
5353	Encoder returns the text encoding of Font .
5354	Interpret takes a variadic argument value and applies it to the stack .
5355	Open opens a file
5356	NewReader creates a new Reader .
5357	NewReaderEncrypted returns a Reader reading from the given ReaderAt function .
5358	Trailer returns the trailer .
5359	Kind returns the Kind value .
5360	newBuffer returns a new buffer .
5361	Paginate returns pagination info for given page .
5362	CascadeDelete deletes a collection from a collection
5363	card cascadeDeleteWithConfig is a helper function that returns a ChangeInfo object that can be used to update the state of a cascade .
5364	card cascadeSaveWithConfig saves the given document to a given document
5365	MapFromCascadeProperties converts a list of properties to a map .
5366	Connect connects to the server .
5367	convert a string to lower case
5368	Find returns a collection that matches query .
5369	RawInformationQuery sends raw information query .
5370	NewClient returns a new Client .
5371	Close closes the client .
5372	startTLSIfRequired creates a stream feature if it doesn t already exist .
5373	startStream starts a stream .
5374	IsEncrypted returns true if client is encrypted
5375	Recv receives a message and returns a chat message .
5376	Send sends a message to chat .
5377	SendOrg send org to server
5378	SendKeepAlive sends the keep - alive message .
5379	SendHtml sends a text html message .
5380	nextStart returns the next xml . StartElement or an error .
5381	JoinProtectedMUC joins a notification with a given nick name and time .
5382	LeaveMUC is part of the MUC interface .
5383	AttachBuffer adds a file to the message .
5384	Attach attaches a file to the message .
5385	Inline adds a file to the message .
5386	AddHeader adds a new header to the message .
5387	tolist returns a list of message names .
5388	Bytes converts a message to a byte slice .
5389	Send sends a mail message .
5390	GetHeader gets the header from the envelope
5391	GetHeaderValues returns the values of a header field .
5392	SetHeader sets a header value
5393	AddHeader adds a header
5394	DeleteHeader deletes a header
5395	AddressList returns a slice of email addresses .
5396	Clone returns a copy of e .
5397	ReadEnvelope reads an envelope from r .
5398	EnvelopeFromPart creates an Envelope from a part .
5399	parseTextOnlyBody is a helper function to parse a text only body
5400	parseMultiPartBody parses the body of a multipart body .
5401	matchHTMLBodyPart returns true if the part matches the body content type .
5402	ensureCommaDelimitedAddresses ensures that a comma - delimited string is valid .
5403	Date specifies the date .
5404	From sets a new email address
5405	Subject specifies the subject clause .
5406	To adds a new email address to the mail builder .
5407	ToAddrs sets a new slice of email addresses .
5408	CC adds a cc to the email address .
5409	CCAddrs is defined on the EmailBuilder interface .
5410	ReplyTo adds a reply to the email address
5411	Header adds a header to the message .
5412	AddAttachment adds an attachment to a file
5413	AddFileAttachment adds a file attachment to the message .
5414	AddInline adds a new part to the MailBuilder .
5415	Equals compares two MailBuilder objects .
5416	Encode encodes a Part .
5417	encodeHeader encodes b into b .
5418	encodeContent encodes b into b .
5419	selectTransferEncoding returns the transfer encoding of content .
5420	setParamValue sets param value .
5421	NewBase64Cleaner returns a new Base64Cleaner .
5422	Decode to UTF - 8 .
5423	Parse media type .
5424	fixMangledMediaType parses mtype as a string .
5425	detectMultipartMessage returns true if the part is a multipart message .
5426	detectBinaryBody reports whether this part is a binary body .
5427	BreadthMatchFirst removes the first element in the list and returns it .
5428	BreadthMatchAll returns all parts that match a matcher .
5429	DepthMatchFirst returns the first part that matches the matcher .
5430	DepthMatchAll returns all parts that match a matcher .
5431	ToASCII converts a string to an ASCII string .
5432	NewPart creates a new Part
5433	AddChild adds a child to the parent
5434	TextContent returns true if the part is part of the part
5435	setupHeaders initializes the parts .
5436	setupContentHeaders sets the Content Disposition header fields .
5437	convertFromDetectedCharset converts r to an io . Reader .
5438	Clone returns a deep copy of parent .
5439	ReadParts reads a part from r .
5440	parseParts is used to parse a part from a reader
5441	UUID generates a random UUID
5442	NewQPCleaner creates a new QPCleaner
5443	Error implements the Error interface .
5444	addError adds a new error .
5445	addWarning adds a warning message .
5446	Wrap converts a string slice to a byte slice
5447	ConvertToUTF8String converts UTF8 to UTF8 string .
5448	JoinAddress joins multiple addresses .
5449	Printf calls markdown .
5450	EnvelopeToMarkdown converts an Envelope to a markdown .
5451	FormatPart writes a part to w .
5452	newBoundaryReader creates a new boundary reader .
5453	Read implements the io . Reader interface .
5454	Next advances the reader to the next line .
5455	Parse parses a byte slice and returns a pointer to it
5456	Assign assigns a value to a symbol
5457	NewRClient returns a new RClient using the given host and port .
5458	NewRClientWithAuth returns a new instance of RClient
5459	Register registers a custom generator with a custom identifier
5460	Fuzz fuzzes the given interface .
5461	findFakeFunctionFor returns a function that returns a function which returns a function that will be called when a function returns an empty string .
5462	Apply applies the given options to the given options .
5463	ToOption converts options to an Option .
5464	waitThenClose waits until the event channel is closed .
5465	send sends a query event .
5466	NewMovingAverage returns a new moving average
5467	Set sets the value of the variable
5468	calcKeys50 computes the HMAC key and salt .
5469	getKeys returns a slice of keys from b .
5470	checkPassword checks if a password is valid .
5471	parseFileEncryptionRecord extracts the encryption record from a file block header .
5472	parseEncryptionBlock parses the encryption block .
5473	newArchive50 returns a new instance of an archive50 .
5474	Read implements the io . Reader interface .
5475	ReadByte implements io . Reader
5476	newCipherBlockReader returns a new cipherBlockReader .
5477	newAesDecryptReader returns a new cipherBlockReader .
5478	limitByteReader returns a limitedByteReader that reads from r .
5479	Mode returns the os . FileHeader s mode .
5480	nextBlockInFile returns the next block in the file .
5481	next returns the next block .
5482	Read implements the Reader interface .
5483	Read implements io . Reader
5484	Next returns the next file .
5485	NewReader returns a new Reader reading from r .
5486	OpenReader opens a new volume .
5487	getV3Filter returns a v3 filter .
5488	init initializes the decoder .
5489	readBlockHeader reads the block header .
5490	readCodeLengthTable reads a code length table .
5491	expindStates returns a slice of states with the given size .
5492	expandStates returns the set of states that have been expanded .
5493	pushByte inserts a byte into the buffer .
5494	succusByte returns the byte of the given index .
5495	consContext returns the context for the given index .
5496	calcAes30Params calculates the SHA1 hash of the given password .
5497	parseDosTime returns a time . Time from a timestamp .
5498	decodeName decodes BSON name .
5499	readExtTimes reads the extTimes from b .
5500	readBlockHeader reads a block header .
5501	newArchive15 returns a new archive block reader .
5502	readFilter5Data reads the filter5 data from b .
5503	writeByte writes a byte to the window .
5504	copyBytes copies bytes from the window .
5505	read adds p to the window .
5506	queueFilter adds the given filter to the buffer .
5507	Process filters
5508	fill recursively fills the filter blocks .
5509	Read implements the io . Reader interface .
5510	readFull reads the full data from r until EOF .
5511	findSig returns the length of the signature file .
5512	execute executes the given command .
5513	newVM returns a new instance of the given VM .
5514	limitBitReader returns a bitReader for the given bitReader .
5515	readUint32 reads a uint32 .
5516	step3 returns true if the word is a step3 .
5517	Stem converts a word to a stem stopword .
5518	step6 returns true if the word was inserted false otherwise .
5519	step5 steps 5 .
5520	step2a is a helper function that returns a step2a word .
5521	step4 steps 4 .
5522	Stem converts a word to stem stop words .
5523	step1c returns true if the snowball word is higher than 1 .
5524	step3 returns true if the word was added .
5525	isStopWord returns true if the word is stop word
5526	capitalizeYUI is used to capitalize a word .
5527	step2 returns true if the given snowball word is a step .
5528	step3 returns true if the word is a step3 .
5529	step0 returns true if the word was inserted .
5530	VnvSuffix returns the suffix of the word .
5531	step1 returns true if there is a step 1 .
5532	step2a returns true ifphr is a step2a .
5533	removePerfectiveGerundEnding returns true if there is no such snowball .
5534	removeAdjectivalEnding returns true if the word has been removed .
5535	step2b returns true if the word is a step2 b .
5536	step4 step 4 .
5537	step5 returns true if the word is a step5 .
5538	Stem converts a word to a stemStopwWords .
5539	Stem converts a word to a stemStopwWords .
5540	isStopWord returns true if the word is stop word
5541	isStopWord returns true if the word is stop word
5542	New returns a new SnowballWord .
5543	RemoveLastNRunes removes lastNRunes from the word .
5544	resetR1R2 resets r1 r2 to r2
5545	slice returns a slice of runes between start and end .
5546	FitsInR1 returns true if r1 is in r1
5547	FitsInR2 returns true if r2 is in r2
5548	FitsInRV returns true if r is in RS
5549	FirstPrefix returns the first prefix matching the prefixes .
5550	HasSuffixRunes checks if a word has suffix runes .
5551	FirstSuffixIfIn returns the first suffix from startPos .
5552	RemoveFirstSuffixIfIn removes first suffix from start position .
5553	RemoveFirstSuffix removes first suffix .
5554	FirstSuffix returns the first suffix of the word .
5555	preprocess trims the SnowballWord .
5556	step0 returns true if the word is a step0 .
5557	step1b is used to step 1 .
5558	step2b is a step2b function .
5559	capitalizeYs returns the number of capitalizations in the Snowball word .
5560	unapitalizeYs is a no - op .
5561	stemSpecialWord converts a word to a stem word .
5562	isShortWord returns true if the word is short word .
5563	Step 1
5564	Set sets a value for a given key
5565	Get returns the value for the given key
5566	Cleanup removes all goroutines .
5567	getValues returns a set of values
5568	linkGRs links between parentData
5569	unlinkGRs deletes all goroutine IDs .
5570	AppUri creates an app uri
5571	CurlAppWithTimeout is like Curl but with a timeout
5572	CurlApp returns a concatenation of the app .
5573	CurlAppRoot returns the root root of the app .
5574	GetTags takes a string and returns a slice of tags .
5575	GetTagsAsUniqueStrings returns all tags that are uniquified .
5576	isTerminator returns true if r is a terminal .
5577	uniquify removes duplicates from in .
5578	New returns a new gin middleware .
5579	Get retrieves a url from the gin context
5580	GenerateRSAKeyPair generates an RSA private key pair .
5581	Verify implements rsa . PublicKey interface .
5582	Encrypt encrypts data using RSA public key
5583	Sign signs a message using RSA private key
5584	GetPublic returns the public key
5585	Decrypt decrypts rsa private key
5586	UnmarshalRsaPrivateKey decodes a RSA private key .
5587	GenerateKeyPair generates a new private key pair using the specified bits .
5588	GenerateKeyPairWithReader returns a private key pair for the given reader .
5589	GenerateEKeyPair generates a pair of key pair
5590	UnmarshalPublicKey unmarshals a public key from a byte slice .
5591	MarshalPublicKey converts a PubKey to a byte slice .
5592	UnmarshalPrivateKey unmarshals a private key from a byte slice .
5593	MarshalPrivateKey encodes a private key .
5594	KeyEqual compares two keys .
5595	GenerateECDSAKeyPair generates an ECDSA private key pair .
5596	GenerateECDSAKeyPairWithCurve generates an ECDSA private key using the given curve .
5597	ECDSAKeyPairFromKey converts ECDSA private key to ECDSA private key .
5598	UnmarshalECDSAPrivateKey decodes a ECDSAPrivateKey from a byte slice .
5599	UnmarshalECDSAPublicKey decodes ECDSA public key from ECDSA public key
5600	Equals returns true if the keys are equal
5601	Sign signs data using ECDSA private key .
5602	Equals checks equality of two ECDSAPublicKey objects
5603	Verify verifies the signature against the ECDS API
5604	GenerateSecp256k1Key generates a secp256k1 private key
5605	UnmarshalSecp256k1PrivateKey unmarshals a secp256k1 private key
5606	UnmarshalSecp256k1PublicKey decodes a secp256k1 public key .
5607	Equals checks equality of two Secp256kk1PrivateKey
5608	Sign signs the given data with the given data .
5609	Equals returns true if the two keys are equal
5610	Verify implements the Secp256k1PublicKey interface .
5611	Raw returns a copy of the Ed25519PrivateKey .
5612	Sign signs msg with msg .
5613	Equals returns true if both Ed25519PublicKey are equal
5614	Verify implements the Ed25519PublicKey interface .
5615	UnmarshalEd25519PublicKey unmarshals an Ed25519 public key
5616	UnmarshalEd25519PrivateKey unmarshals an ed25519 private key
5617	EditScriptForStrings is a convenience function for EditScriptForStrings .
5618	EditScriptForMatrix returns a EditScript for the given matrix .
5619	WriteMatrix writes matrix to writer .
5620	New creates a new Lockfile
5621	GetOwner returns the owner of the lockfile
5622	TryLock tries to acquire a lock file .
5623	Unlock unlocks the lockfile
5624	NewBase creates a new Base .
5625	SetFallbackLogger sets the default logger .
5626	AddLogger adds a logger to the logger
5627	LogWithTime implements Logger interface .
5628	Log implements Logger .
5629	Warnm mocks base method
5630	NewTemplateWithFuncMap creates a new template with the given functions .
5631	Execute executes a template and returns its output .
5632	NewTemplateMsg returns a new instance of TemplateMsg
5633	NewLogAdapterFor returns a new LogAdapter with the given Attrs .
5634	SetAttr implements LogAdapter .
5635	LogWithTime implements LogAdapter .
5636	Log implements Logger .
5637	Dbgm logs a message at level Debugm .
5638	NewAttrsFromMap creates an Attrs from a map of attributes .
5639	NewAttrsFromAttrs creates an Attrs from an Attrs slice .
5640	MergeAttrs merges attrs .
5641	SetAttr sets attribute value to value .
5642	GetAttr returns the value for a given key .
5643	RemoveAttr removes an attribute from the map .
5644	Attrs returns a copy of the attributes map .
5645	Debugm adds a Debugm to the list of attributes .
5646	Infom adds a message to the default response .
5647	Warningm adds a warning to the list of attributes .
5648	Errm is a convenience function for Errorm .
5649	Errorm creates a new Errorm .
5650	Fatalm calls the default Fatalm function .
5651	Dief is a shortcut for Dief
5652	Diem sends a diem message to the user .
5653	ToLogLevel converts a string to a LogLevel .
5654	CallErr returns an error that can be sent to the given function .
5655	New returns a hook hook hook .
5656	Fire implements the LogDriver interface .
5657	Level sets the logging driver .
5658	ProjectID is an Option to set the project ID .
5659	EntriesService is an Option to set the logging service .
5660	LoggingService is an Option to set the logging service .
5661	ErrorService is an Option to set the error report .
5662	HTTPClient is an Option to set an http . Client .
5663	MonitoredResource is an Option to set the monitoring resource .
5664	ErrorReportingLogName is an Option to set error reporting log name .
5665	Labels is an Option to set the labels on the stack
5666	PartialSuccess is a functional option for PartialSuccess .
5667	GoogleComputeCredentials is a functional option for Google ComputeCredentials .
5668	NewEncoder returns a new Encoder .
5669	NewDecoder creates a new Decoder from r .
5670	NewStreamEncoder returns a new StreamEncoder .
5671	NewStreamDecoder returns a StreamDecoder that reads from r .
5672	Register adds a codec to the registry
5673	Unregister removes a codec from the registry
5674	Lookup looks up a codec by name
5675	Codecs returns a map of codecs .
5676	Type returns the type of the error .
5677	Install a adapter
5678	AdapterOf returns a pointer to the adapter of the given type
5679	AppendDuration appends a duration to b .
5680	fmtInt returns the int value of v .
5681	NewDecoder returns an objconv . Decoder .
5682	NewStreamDecoder returns a StreamDecoder .
5683	Unmarshal unmarshals b into v .
5684	String returns a string representation of the Type .
5685	zeroValueOf returns the zero value of t .
5686	NewValueParser creates a new ValueParser
5687	ParseTag parses a tag .
5688	NewEncoder returns a new Encoder .
5689	NewStreamEncoder returns a StreamEncoder .
5690	NewPrettyEncoder returns a new Encoder .
5691	NewPrettyStreamEncoder returns a StreamEncoder .
5692	Marshal marshals v to a byte slice .
5693	NewEncoder returns a new Encoder .
5694	EncodeArray implements Encoder . EncodeArray .
5695	EncodeMap implements Encoder . EncodeMap .
5696	NewStreamEncoder returns a new StreamEncoder .
5697	Open implements Encoder .
5698	Close implements Encoder .
5699	Encode encodes v to the stream .
5700	newStructType creates a new structType from c .
5701	lookup returns a structType if t exists .
5702	clears the structTypeCache .
5703	CheckUint64Bounds checks if a uint64 is in a uint64 .
5704	CheckInt64Bounds checks if an int64 is in a float64 .
5705	NewDecoder returns a new Decoder
5706	Decode decodes v into v .
5707	DecodeArray decodes an array .
5708	DecodeMap decodes a map .
5709	NewStreamDecoder returns a new StreamDecoder
5710	Len implements StreamDecoder .
5711	Err returns the error if any .
5712	Decode implements StreamDecoder .
5713	Encoder creates a StreamEncoder from an Emitter .
5714	init initializes the environment variables
5715	LevelFromString returns the level from a string .
5716	NewBackend returns a new Backend .
5717	callite returns the file name and line number .
5718	print writes a log entry to the backend .
5719	Logger creates a new Logger .
5720	Trace logs a message at level Debug .
5721	Tracef logs a message at level Debug .
5722	Debug logs a debug level message .
5723	Debugf logs a debug level message .
5724	Info implements Logger interface .
5725	Infof log message
5726	Warn logs a warning level .
5727	Warnf logs a warning message .
5728	Error logs an error message
5729	Errorf logs a message at level Error .
5730	Critical logs a critical message .
5731	Criticalf logs a message at level Critical
5732	Level returns the level of the slog .
5733	SetLevel sets the level of the slog .
5734	Concat concatenates a permission into a new permission
5735	HasPermission checks if a permission is allowed
5736	ConcatPermissioner concatenates a set of permissions .
5737	HasPermission returns true if the permissioners have a permission
5738	Register registers a role
5739	NewPermission creates a new Permission
5740	Get returns a checker for a role
5741	isPtrFromHeap returns true if the heap is a pointer to aPtr .
5742	IsPtr returns true if the given address is a pointer .
5743	FindObject returns the object at the given address .
5744	ForEachObject calls fn for each Object in the page .
5745	ForEachRoot calls fn for each root .
5746	Addr returns the core . Address of x .
5747	Size returns the size of x .
5748	Type returns the type of the object .
5749	ForEachRootPtr calls fn for each root .
5750	edge1 returns true if the two edges of the given type .
5751	setHeapPtr sets the heap size of the heap .
5752	findHeapInfo returns the heapinfo for the given address .
5753	allocHeapInfo allocates heap info from core .
5754	runtimeName returns the runtime name for the dwarf .
5755	Read runtime constants
5756	add adds a function to the table .
5757	sort sorts the table .
5758	find returns the function f in sorted order .
5759	read populates a pcTab from core .
5760	readVarint reads a varint .
5761	useLine takes a command and returns a string .
5762	commandPath returns the path to the command .
5763	readCore reads the core from the cache
5764	typeName returns the type name for x .
5765	fieldName returns the field name for x .
5766	typeFieldName returns the field name for the given type .
5767	FindFunc adds a function to the process .
5768	Core returns an implementation of the Process interface .
5769	Address returns the core . Address of the region .
5770	Int returns the int value of the region .
5771	Uintptr returns the uintptr of the region .
5772	Cast returns a copy of the given type .
5773	Deref returns the current region .
5774	Uint64 returns the uint64 value as uint64 .
5775	Uint32 returns the uint32 value as uint32 .
5776	Int32 returns the int32 value of the region .
5777	Uint16 returns the value of a uint16 .
5778	Uint8 returns the uint8 value as uint8 .
5779	String returns the string representation of the region .
5780	SlicePtr returns a copy of the region .
5781	SliceLen returns the length of the slice .
5782	Field returns the field for the given region .
5783	ReadUint8 reads a uint8 from the core file .
5784	ReadUint16 reads a uint16 from the core file .
5785	ReadUint32 reads a uint32 from the core file .
5786	ReadUint64 reads a uint64 from the core file .
5787	ReadInt8 reads an int8 from the process .
5788	ReadInt16 reads an int16 from the process .
5789	ReadInt32 reads an int32 from the process .
5790	ReadInt64 reads an int64 from the process .
5791	ReadUintptr reads a uint64
5792	ReadPtr reads a byte slice and returns its pointer .
5793	ReadCString reads a string from a byte slice .
5794	Source returns the source of the mapping .
5795	findMapping returns the mapping for the given address .
5796	Max returns the maximum of two addresses .
5797	Min returns the minimum of a and b .
5798	Align returns the Align of x .
5799	initialize initializes the DOM .
5800	calculates the bucket .
5801	eval evaluates a vName and returns it .
5802	compress compresses v with the given vName .
5803	link links w to w .
5804	reverse reverses the dom .
5805	calcSize calculates the size of the process .
5806	objField returns the field name for x .
5807	Readable implements Process . Readable
5808	ReadableN returns true if the given address has been readable .
5809	splitMappingsAt returns the mappings at the given address .
5810	DynamicType returns the type of the given type .
5811	Create creates a btrfs filesystem .
5812	Resolve converts u to net . IPAddr
5813	Equal returns true if two tokens are equal
5814	newDefaultClassifier returns a new tokenClassifier .
5815	Next returns the next token .
5816	NewTokenizer returns a Tokenizer .
5817	Split splits a string into a slice .
5818	Between returns the first occurrence of a given string .
5819	BetweenF returns a function which returns the union of two strings .
5820	Camelize camel - case string
5821	Capitalize capitalizes the string with lowercase .
5822	CharAt returns the char at index
5823	CharAtF is a helper function that returns a function that returns a function that returns a function that returns the given index .
5824	ChompLeft returns s without prefix .
5825	ChompLeftF is a wrapper around ChompLeftF
5826	ChompRight removes s from s .
5827	ChompRightF is a wrapper around ChompRightF
5828	ClassifyF is a helper function that returns classify function .
5829	Clean removes all spaces .
5830	Dasherize converts a string to its normalized form .
5831	EscapeHTML escapes a string .
5832	DecodeHTMLEntities DecodeHTMLEntities DecodeHTMLEntities
5833	EnsurePrefixF is a helper function that returns a function that returns a function that returns a function that returns a function that returns a function that returns a function that returns a function that returns a function that returns a function that returns a function that returns a function that returns a function that returns a function that returns a function that returns a function that will return a string containing the prefix .
5834	EnsureSuffixF is the same as EnsureSuffix .
5835	Humanize returns s as a human - readable string .
5836	Iif returns true if the condition is false otherwise .
5837	IndexOf returns the index of the first occurrence of a given string .
5838	IsLower returns true if s is lower than s .
5839	IsUpper returns true if s is uppercase .
5840	Left returns the left of s .
5841	LeftF returns the left of the string
5842	Letters returns a slice of all letters in s .
5843	Lines converts a string to a slice of strings .
5844	Map iterates over a slice of strings .
5845	Match returns true if s matches pattern .
5846	task tasks the project
5847	Pad pads the string with c .
5848	PadF pads the specified number of characters .
5849	PadLeft pad left
5850	PadLeftF pads the left of the left
5851	PadRightF pad right
5852	Pipe takes a string and returns a string .
5853	QuoteItems quotes a slice of strings .
5854	ReplaceF returns a function that replaces the string with n elements .
5855	ReplacePatternF is the replacement function for ReplacePattern .
5856	Reverse reverses a string .
5857	RightF is the inverse of Right .
5858	Slice returns the slice of string .
5859	SliceF returns a function that returns a slice of strings .
5860	SliceContains returns true if the slice contains the given value .
5861	SliceIndexOf returns the index of a slice or - 1 if not found
5862	Slugify converts a string to a slugify string .
5863	StripPunctuation removes any punctuation .
5864	StripTags removes tags from tags .
5865	Substr returns the string at the given index .
5866	SubstrF returns a function that returns a subset of the specified index .
5867	TemplateWithDelimiters replace template with delimiterers
5868	ToArgv converts a string to a list of arguments .
5869	ToBool converts a string to a boolean value .
5870	ToBoolOr converts a string to a boolean value .
5871	ToIntOr converts a string to an int .
5872	ToFloat32Or returns the given string as a float32 or a default value if not found .
5873	ToFloat64Or returns the given string as a float64 or a defaultValue if s is not a float64 .
5874	UnescapeHTML converts a string to a UnescapeHTML string .
5875	WrapHTML converts a string to a HTML string
5876	WrapHTMLF is a wrapper around WrapHTMLF that wraps HTML tags with HTML tags
5877	ReapChildren reaps the children of the child process .
5878	SdNotify sends a notification to the environment .
5879	NewAuthenticator creates a new Authenticator
5880	Endpoint returns an http . Handler that logs an endpoint .
5881	Unique returns a slice of ObjectIds with unique IDs .
5882	Contains returns true if the list contains the given object id .
5883	Includes returns true if all of the subset contains the subset .
5884	Require is part of the Model interface .
5885	Enqueue enqueues a job with the given delay .
5886	A creates a new Authorizer for the given matcher .
5887	Run runs all enforcers
5888	And returns a new instance of Authorizer
5889	Or adds a handler to an Authorizer
5890	Enqueue enqueues a job .
5891	Callbackback is called when a queue is received
5892	NewWatcher creates a new Watcher .
5893	Add adds a stream to a stream
5894	Action returns a fire action .
5895	Write returns true if the operation has write to the operation .
5896	String returns the string representation of the operation .
5897	Query returns the query parameters .
5898	Respond to the response writer
5899	EnsureApplication ensures that the application exists .
5900	EnsureFirstUser adds a new user to the store
5901	Callback returns a fireback callback .
5902	OpenStream opens and returns a stream .
5903	Close closes the stream .
5904	AddTokenIndexes adds tokens to the database .
5905	GetTokenData returns the token data .
5906	SetTokenData sets the token data
5907	ValidSecret checks if the given secret is valid .
5908	HashSecret generates a secret .
5909	ValidPassword returns true if the given password is a valid password .
5910	HashPassword generates a random password .
5911	MustCreateStore creates a new store
5912	CreateStore creates a new store .
5913	C returns mongo collection
5914	NewAssetServer returns a new instance of AssetServer
5915	DefaultGrantStrategy is the default grant strategy
5916	DefaultTokenData returns default token data
5917	GenerateToken generates a token
5918	ParseToken parses a token claims and returns the token claims .
5919	E creates a new enforcer with the specified name and handler .
5920	MustGet returns the field value for the given name .
5921	MustSet sets the value of a field .
5922	NewGroup returns a new instance of Group
5923	Add adds a controller to the group .
5924	Endpoint returns an http . Handler that handles the request .
5925	Add adds fields to the index .
5926	AddRaw adds a raw index to the index .
5927	Ensure ensures that the indexer exists .
5928	NewCatalog creates a new Catalog .
5929	Add adds a new model to the catalog .
5930	All returns all models .
5931	Visualize outputs the catalog .
5932	NewErrorReporter returns a function that writes to the given writer .
5933	Ensure indexes
5934	E creates an error with the given format
5935	Compose returns a new http . Handler based on the provided chain .
5936	Includes checks if a subset contains a subset .
5937	Intersect returns the intersection of listA .
5938	E creates an Error with the given reason .
5939	RootTracer is a middleware that wraps a RootTracer .
5940	NewTracerFromRequest creates a new tracer from the request context
5941	NewTracer returns a new Tracer .
5942	Push adds a span to the span
5943	Last returns the last trace .
5944	Tag implements Tracer . Tag interface .
5945	Log implements Logger .
5946	Context returns the context s context .
5947	Pop implements the Tracer interface .
5948	Finish implements Tracer .
5949	NewPool creates a new Pool
5950	Add adds a task to the pool
5951	Run starts the goroutine .
5952	NewBodyLimiter returns a new instance of BodyLimiter
5953	LimitBody limits the request body .
5954	C creates a new Callback instance
5955	Only returns a Matcher that matches the provided operations .
5956	BasicAuthorizer is a mock
5957	ModelValidator is a mock
5958	TimestampValidator is a mock
5959	RelationsValidator returns a Callback Callback for the given model .
5960	Inspect implements Seekret .
5961	NewRule creates a new rule
5962	AddUnmatch adds an unmatch to the rule
5963	Run the rule with the given content
5964	NewSecret creates a new Secret .
5965	NewObject creates a new Object .
5966	SetMetadata sets the metadata attribute for the given key .
5967	GetMetadata returns the metadata for the given key .
5968	GetMetadataAll returns a map of metadata values .
5969	SetRule is part of the Exception interface .
5970	SetObject is part of the Exception interface .
5971	SetNline is part of the Exception interface .
5972	SetContent is part of the Exception interface .
5973	Run returns true if the Exception matches the Exception .
5974	AddRule adds a rule to the Seekret .
5975	LoadRulesFromFile loads a rule from a file
5976	LoadRulesFromDir loads rules from dir
5977	DefaultRulesPath returns the default rules path
5978	EnableRule enables a rule
5979	DisableRule disables a rule
5980	EnableRuleByRegexp enables rule by given name
5981	DisableRuleByRegexp disables rule by regexp
5982	LoadObjects loads objects from the Seekret
5983	GroupObjectsByMetadata returns the GroupObjects by metadata .
5984	GroupObjectsByPrimaryKeyHash returns the GroupObjects by primary key hash .
5985	AddException adds an exception to the model .
5986	LoadExceptionsFromFile loads a set of exceptions from a file
5987	printPlainResults prints the result as a string .
5988	printJsonResults prints JSON data to stdout
5989	NewXor64Source returns a new Xor64Source .
5990	xor64 converts x to a uint64 .
5991	next returns the next uint64 value .
5992	Seed sets the seed value for the given seed .
5993	NewFrameSet returns a new FrameSet .
5994	handleMatch processes a set of strings .
5995	Index returns the index at the given frame .
5996	Frame returns the frame at the given index .
5997	HasFrame returns true if the set contains a frame .
5998	FrameRangePadded returns the length of a frame in the frame set .
5999	Normalize returns a copy of s .
6000	FramesToFrameRange converts a slice of frames to a string .
6001	frame range matches
6002	toRange returns a slice of ints with the given step .
6003	NewWorkManager returns a new instance of FileManager .
6004	processSources processes all sources in a directory .
6005	isInputDone returns true if the input is finished .
6006	closeInputs closes all pending inputs .
6007	load the given paths .
6008	loadRecursive recursively loads all files recursively .
6009	preparePaths takes a list of paths and returns a list of fileseq files .
6010	PadFrameRange returns the string representation of a frame range
6011	zfillString is a helper function that takes a string and returns zset .
6012	zfillInt returns z as a string .
6013	NewInclusiveRange creates a new InclusiveRange
6014	String returns a string representation of the InclusiveRange .
6015	End returns the index of the InclusiveRange .
6016	Len returns the length of the InclusiveRange .
6017	Min returns the minimum of the InclusiveRange .
6018	Max returns the maximum value of the InclusiveRange .
6019	Contains implements the InclusiveRange interface .
6020	closestInRange returns the closest value in the range .
6021	Index returns the index of a given value .
6022	String returns a string representation of the InclusiveRanges .
6023	Len returns the length of the InclusiveRanges .
6024	Start returns the start of the inclusiveRanges .
6025	End implements the End interface .
6026	Min returns the minimum of the inclusiveRanges .
6027	Max returns the maximum inclusiveRanges .
6028	numRanges returns the number of blocks in the range
6029	rangeAt returns the InclusiveRange at the given index .
6030	Append adds a new block to the end .
6031	AppendUnique appends a set of blocks to the end .
6032	Contains returns true if the block contains the given value .
6033	Index returns the index of the given value .
6034	FrameRange returns the frame s frame range .
6035	FrameRangePadded returns the frame range padding .
6036	Index returns the path in the sequence set .
6037	SetDirname sets the directory name .
6038	SetPadding sets the padding for the sequence .
6039	SetPaddingStyle sets the padding style .
6040	SetExt sets the extension .
6041	SetFrameRange sets a frame range .
6042	Len returns the length of the FileSequence .
6043	String returns a string representation of this FileSequence .
6044	Copy returns a copy of this FileSequence .
6045	NewClient returns a new instance of Client
6046	UnmarshalXML implements xml . Unmarshaler interface .
6047	UnmarshalXML implements xml . Unmarshaler interface .
6048	Call sends a request to Rollbar
6049	JSONDoc returns a JSON document .
6050	AddLoader adds a loader to the document .
6051	JSONSpec parses a JSON document and returns it .
6052	Embedded unmarshals a raw JSON document into a Document .
6053	Spec returns the spec for the given path .
6054	Analyzed returns a Document with the given version and version .
6055	Expanded expands a document .
6056	ResetDefinitions resets the definitions of the document .
6057	Pristine returns the canonical representation of the document .
6058	OpenDb opens a GeoIP file .
6059	GetOrg returns the org name of an org
6060	GetRegion returns the region code for the given IP address
6061	GetRegionName returns the name of a region .
6062	GetCountry returns the country of the given IP address .
6063	NewRotatingFileHandler creates a new RotatingFileHandler .
6064	Close the file
6065	String implements the Stringer interface for Level .
6066	New creates a new Logger
6067	Close closes the logger
6068	SetLevelByName sets the logging level by name .
6069	Output implements Logger interface
6070	OutputJson implements Logger interface
6071	Print logs a message at level
6072	Println calls Output . Arguments are handled in the manner of fmt . Println .
6073	Debug implements Logger interface
6074	Debugln calls Output to print to the standard logger .
6075	Error implements Logger interface
6076	Errorln implements Logger interface
6077	Info implements Logger interface
6078	Infoln calls Output to print to the standard logger .
6079	Warn implements Logger interface
6080	Warnln implements Logger interface
6081	NewStreamHandler returns a new StreamHandler .
6082	Right returns the right of a string
6083	New returns a new API instance
6084	setupMetadata is used to setup the GSD metadata
6085	recordTypes records all types of the given root .
6086	appendSorted appends params to params .
6087	parse data type
6088	parseParam parses a param and creates a new ActionParam .
6089	newParam creates a new ActionParam
6090	toGoReturnTypeName converts a Go type name into a Go type name .
6091	toGoTypeName converts a Go type name to a Go type name .
6092	typify returns a string representation of o .
6093	isBuiltInType returns true if the given name is a built - in type .
6094	MatchHref returns true if the action matches the prefix
6095	Substitute takes a set of variables and returns a slice of strings .
6096	MarshalJSON implements the json . Marshaler interface for FileUpload .
6097	writeMultipartParams writes multipart params to w .
6098	PerformRequest performs HTTP request
6099	PerformRequestWithContext performs HTTP request with context
6100	Read response body
6101	ScheduleLocator returns a ScheduleLocator instance
6102	TemplateLocator creates a new TemplateLocator
6103	fetchDetails fetches information about the specified SSH configuration .
6104	buildAliases builds the aliases for the SSHConfig
6105	serverArray returns a list of instances for a server
6106	server looks up a server by name .
6107	toPackageName returns the name of the package name .
6108	loadFile loads a single file
6109	This is the main entry point .
6110	Run the command
6111	CreateJSONResponse converts a byte slice to a http . Response .
6112	AccountLocator returns an instance of AccountLocator
6113	AccountGroupLocator returns an AccountGroupLocator instance
6114	AlertLocator returns an instance of AlertLocator .
6115	AlertSpecLocator returns a new AlertSpecLocator .
6116	AuditEntryLocator returns an audit entry locator
6117	BackupLocator returns a new instance of BackupLocator
6118	ChildAccountLocator returns an instance of ChildAccountLocator
6119	CloudLocator returns an instance of CloudLocator
6120	CloudAccountLocator returns an instance of CloudAccountLocator
6121	CookbookLocator returns a new instance of CookbookLocator .
6122	CookbookAttachmentLocator returns an instance of CookbookAttachmentLocator .
6123	CredentialLocator returns a pointer to a CredentialLocator instance
6124	DatacenterLocator creates a new datacenter locator
6125	DeploymentLocator returns a DeploymentLocator instance
6126	HealthCheckLocator returns an instance of HealthCheckLocator
6127	IdentityProviderLocator returns an IdentityProviderLocator
6128	ImageLocator returns an ImageLocator
6129	InputLocator creates a new InputLocator
6130	InstanceLocator creates an InstanceLocator
6131	InstanceTypeLocator returns InstanceTypeLocator
6132	IpAddressLocator returns an ip address locator
6133	IpAddressBindingLocator returns an IpAddressBindingLocator instance
6134	MonitorMetricLocator creates a new monitoring metric locator
6135	MultiCloudImageLocator returns a new instance of MultiCloudImageLocator
6136	MultiCloudImageMatcherLocator returns a new MultiCloudImageMatcherLocator instance
6137	MultiCloudImageSettingLocator returns a new instance of MultiCloudImageSettingLocator
6138	NetworkLocator returns an instance of NetworkLocator .
6139	NetworkGatewayLocator returns a network gateway locator .
6140	NetworkOptionGroupLocator returns an instance of NetworkOptionGroupLocator .
6141	NetworkOptionGroupAttachmentLocator returns an instance of NetworkOptionGroupAttachmentLocator .
6142	OAuth2Locator creates a new Oauth2Locator
6143	PermissionLocator creates a PermissionLocator
6144	PlacementGroupLocator returns a placement group locator
6145	PreferenceLocator returns an instance of PreferenceLocator
6146	ExportLocator creates a new PublicationLocator
6147	ExportLineageLocator creates a new PublicationLineageLocator
6148	RecurringVolumeAttachmentLocator creates a new VolumeAttachmentLocator .
6149	RepositoryLocator returns a repository locator
6150	RepositoryAssetLocator returns an instance of RepositoryAssetLocator
6151	ResourceGroupLocator returns an instance of ResourceGroupLocator
6152	RightScriptLocator creates a new instance of RightScriptLocator
6153	RightScriptAttachmentLocator creates a new instance of RightScriptAttachmentLocator
6154	RouteLocator returns a new instance of RouteLocator
6155	RouteTableLocator returns a new RouteTableLocator .
6156	RunnableBindingLocator returns a new RunnableBindingLocator .
6157	SchedulerLocator returns an instance of SchedulerLocator
6158	SecurityGroupLocator returns a security group locator
6159	SecurityGroupRuleLocator returns a security group rule locator
6160	ServerLocator returns a ServerLocator instance
6161	ServerArrayLocator returns ServerArrayLocator
6162	ServerTemplateLocator returns a ServerTemplateLocator instance
6163	ServerTemplateMultiCloudImageLocator returns an instance of ServerTemplateMultiCloudImageLocator .
6164	SessionLocator creates a new SessionLocator
6165	SshKeyLocator returns an SshKeyLocator instance
6166	SubnetLocator returns a new instance of SubnetLocator
6167	TagLocator creates an instance of TagLocator
6168	TaskLocator returns a TaskLocator instance
6169	UserLocator creates a new UserLocator
6170	UserDataLocator returns a UserDataLocator
6171	VolumeLocator creates a new VolumeLocator
6172	VolumeAttachmentLocator creates a new VolumeAttachmentLocator
6173	VolumeSnapshotLocator returns an instance of VolumeSnapshotLocator
6174	VolumeTypeLocator creates a new VolumeTypeLocator
6175	RegisterCommands adds commands to the registry .
6176	ShowCommandHelp show command help
6177	ShowAPIActions show APIActions
6178	ShowHelp shows help
6179	ParseCommandAndFlags parses a command and returns a CommandTarget
6180	validateFlagValue ensures that the flag value is valid
6181	buildQuery builds an APIParams from an array of values .
6182	buildPayload converts a slice of APIParams into an APIParams .
6183	shortenPattern takes a string and returns the pattern and a boolean indicating whether the pattern was present .
6184	cleanDescription returns the description of the document .
6185	fileExists checks if a given file exists
6186	AnalysisSnapshotLocator returns an instance of AnalysisSnapshotLocator
6187	udgetAlertLocator returns a new BudgetAlertLocator instance
6188	CloudBillLocator returns an instance of CloudBillLocator .
6189	CloudBillMetricLocator creates a new CloudBillMetricLocator .
6190	CurrentUserLocator returns an instance of CurrentUserLocator
6191	InstanceCombinationLocator creates a new InstanceCombinationLocator .
6192	InstanceMetricLocator creates a new instance metric locator
6193	InstanceUsagePeriodLocator returns InstanceUsagePeriodLocator
6194	PatternLocator returns a new instance of PatternLocator
6195	ReservedInstanceLocator returns a pointer to a new ReservedInstanceLocator instance
6196	ResourcesInstancePurchaseLocator creates a new instance purchaseLocator .
6197	ScenarioLocator returns a new instance of ScenarioLocator
6198	ScheduledReportLocator returns a new instance of ScheduledReportLocator
6199	TempInstancePriceLocator creates a new TempInstancePriceLocator
6200	UserSettingLocator returns a UserSettingLocator
6201	readAllAsync is like ReadAll but returns a channel that will be closed when the ReadCloser is closed .
6202	extractArg extracts the args from a string .
6203	write writes data to a file .
6204	AppliedPolicyLocator returns an AppliedPolicyLocator
6205	AppvalLocator returns an ApprovalLocator
6206	InitiLocator returns a new instance of IncidentLocator
6207	PolicyTemplateLocator returns an instance of PolicyTemplateLocator
6208	PublishedTemplateLocator returns an instance of PublishedTemplateLocator
6209	DebugCookbookPathLocator returns a DebugCookbookPathLocator instance
6210	DockerControlLocator returns a DockerControlLocator instance
6211	EnvLocator returns an EnvLocator instance
6212	LoginControlLocator creates a new LoginControlLocator
6213	ProcLocator returns a ProcLocator instance
6214	Rl10Locator creates a new Rl10Locator
6215	TSSLocator returns an instance of TSSLocator
6216	TSSControlLocator returns a new instance of TSSControlLocator
6217	TSSPluginLocator returns an instance of TSSPluginLocator
6218	NewAngularWriter returns a new instance of an angular writer
6219	WriteResource writes a resource to an io . Writer
6220	path returns a string representation of the action .
6221	Guess if a param is mandatory
6222	New returns a new API instance
6223	FromCommandLine creates a new API client from a command line
6224	CanAuthenticate checks if auth is authenticated
6225	Encrypt encrypts text using AES
6226	Decrypt decrypts text using AES
6227	guessType returns the type name for the given refID .
6228	addType adds a type to the objectDataType
6229	extractCmdLineParams extracts the params from an action parameter .
6230	NewMetadataWriter returns a new MetadataWriter .
6231	WriteHeader writes a header to the metadata writer .
6232	WriteMetadata writes the given APIDescriptor to the writer .
6233	location returns the location of the location
6234	New returns a new instance of the API client
6235	fromAPI creates a new API from an API .
6236	BuildRequest builds an HTTP request from the API
6237	setupMetadata creates a new set of genMetadata
6238	NewDisplayer creates a Displayer from an http . Response
6239	ApplySingleExtract applies an extract to a JSON string .
6240	ApplyExtract applies the selector to the Displayer .
6241	ApplyHeaderExtract is part of the Displayer interface .
6242	Output implements Displayer .
6243	NewAPIAnalyzer creates a new APIAnalyzer .
6244	Analyze returns APIDescriptor
6245	AnalyzeAliases analyzes the API .
6246	LocatorFunc returns the locator function for the given attribute name .
6247	ParseRoute takes a list of routes and returns a list of path patterns .
6248	isDeprecated returns true if path is deprecated
6249	isQueryParam returns true if a is a query param
6250	isPathParam reports whether p is a path param .
6251	Fetch audit entries
6252	formatTime formats a time . Time into a string .
6253	printAudits prints audit entries
6254	extractUnique extracts duplicate entries from oldEntries
6255	getHref returns the link of an audit entry
6256	fail prints a fail message .
6257	options returns a string representation of this action .
6258	paramsInitializer returns the initializer for an action
6259	commandLine returns the command line
6260	toVerb converts a text to a string .
6261	escapeBackticks returns the end of d .
6262	AccountPreferenceLocator returns an instance of AccountPreferenceLocator
6263	ApplicationLocator returns an instance of ApplicationLocator .
6264	EndUserLocator returns an EndUserLocator
6265	NotificationRuleLocator returns a new instance of NotificationRuleLocator
6266	UserPreferenceLocator returns UserPreferenceLocator
6267	UserPreferenceInfoLocator returns UserPreferenceInfoLocator
6268	LoadConfig loads config from disk
6269	CreateConfig - Creates a new config file
6270	fromAPI creates a new API from an api .
6271	HostFromLogin returns the host name for the given login string .
6272	AnalyzeParam analyzes a parameter .
6273	AnalyzeAttribute analyzes an attribute .
6274	AnalyzeType analyzes a type and returns it .
6275	CreateType creates an object data type
6276	Ref returns the definition of a doc .
6277	Type returns the type of the reference .
6278	Required returns the list of required fields .
6279	ID returns the ID of the reference
6280	Service returns the endpoint s service name .
6281	Method returns the endpoint s method name .
6282	NewTypeRegistry creates a new TypeRegistry .
6283	GetNamedType returns the TypeDataType of the named object .
6284	CreateNamedType creates an object data type with given name .
6285	CreateInlineType creates an object data type .
6286	FinalizeTypeNames finalizes all registered types .
6287	Merge merges two API descriptors from other .
6288	FinalizeTypeNames finalizes the object data types .
6289	uniqueTypeName returns a unique type name for the given prefix .
6290	MinimumParams returns the set of parameters that are mandatory .
6291	HasOptionalParams returns true if the action has optional params
6292	MakeUniq converts a base string to a uniq string .
6293	NewClientWriter returns a new ClientWriter .
6294	WriteHeader writes the header to w .
6295	WriteResourceHeader writes a resource header
6296	WriteType writes an object data type
6297	WriteResource writes a resource .
6298	WithTrail returns a new EvalCtx with the given field name .
6299	AnalyzeEndpoint analyzes the endpoint
6300	NetworkInterfaceLocator returns NetworkInterfaceLocator
6301	NetworkInterfaceAttachmentLocator returns an instance of NetworkInterfaceAttachmentLocator .
6302	UnmarshalJSON implements the json . Unmarshaler interface .
6303	ExecutionLocator returns an ExecutionLocator .
6304	NotificationLocator returns a new NotificationLocator .
6305	OperationLocator returns OperationLocator
6306	ScheduledActionLocator returns a new instance of ScheduledActionLocator
6307	NewBasicAuthenticator creates a new Authenticator .
6308	NewSSAuthenticator returns a new Authenticator .
6309	newCookieSigner returns a new Authenticator .
6310	Sign adds a cookie to the request .
6311	CanAuthenticate checks if a cookie is authenticated
6312	refresh updates the cookie
6313	Sign adds an authorization header to the request .
6314	Sign adds a signature to the request .
6315	Sign signs an authenticated request .
6316	Sets the host
6317	CanAuthenticate checks to see if the user is authenticated
6318	extractRedirectURL extracts the redirect URL from the response .
6319	buildURL returns the URL for the given host .
6320	GetAction gets action by name
6321	HasLink returns true if the resource has a link
6322	findMatches returns all paths matching the given resource
6323	NewPB returns a new HTTPClient .
6324	newVariableDumpClient returns a new dump client .
6325	newRawClient returns a new raw HTTP client .
6326	DoHidden implements the http . Do method .
6327	Do sends an HTTP request .
6328	doImp is used to dump the request
6329	getClientWithoutTimeout returns an http . Client without timeout .
6330	dumpRequest is used to dump the request body
6331	Write headers
6332	copyHiddenHeaders returns a copy of the map .
6333	validateCommandLine validates command line
6334	APIClient returns the APIClient for the APIClient
6335	RegisterClientCommands adds commands to the registry .
6336	Interactive enables interactive logging .
6337	toPattern converts a verb to a PathPattern .
6338	WithClientIP returns a context with the given IP set
6339	ClientIP extracts the client IP from the context .
6340	NewProducer creates a new producer
6341	StartProducer starts a new producer
6342	Start starts producer
6343	Stop implements Producer .
6344	Publish implements PublishTo interface
6345	PublishTo implements Producer .
6346	NewLocalEngine returns a new instance of LocalEngine .
6347	validate creates a new ConsumerConfig
6348	default sets default values
6349	NewConsumer creates a new consumer
6350	StartConsumer creates a new consumer
6351	Start the consumer
6352	RateLimit returns a channel that will receive messages from the given channel .
6353	Write writes raw response to w .
6354	ReadResponse reads a response from r .
6355	backoff returns the backoff duration for the given attempt .
6356	String returns a string representation of a FrameType
6357	NewConsulEngine returns a new instance of ConsulEngine .
6358	ParseMessageID parses s as a MessageID .
6359	WriteTo implements io . WriterTo interface . It serializes the message ID into the wire format .
6360	NewMessage returns a new instance of Message
6361	Finish finishes the message .
6362	Requeue implements the Message interface .
6363	ReadCommand reads a command from r .
6364	funcMapMaker return funcMapMaker
6365	Funcs is defined on Template .
6366	Execute render template
6367	RegisterPath adds a path to the AssetFileSystem
6368	Asset returns the contents of the named file .
6369	Glob returns all files matching pattern .
6370	NameSpace returns an Interface for this AssetFileSystem .
6371	New creates a new Render
6372	RegisterViewPath registers a view path
6373	SetAssetFS sets assetFS for rendering
6374	Layout creates a new template
6375	Funcs returns a copy of the template
6376	Execute render template
6377	RegisterFuncMap registers a function map
6378	Asset returns the filename of an asset .
6379	NewPlainClient returns a new Client with the specified username and password .
6380	Create creates a new uploader
6381	Open opens a connection to the given URL .
6382	Sign signs the request with the given key .
6383	Sign signs the HTTP request with the given keys .
6384	Readdir is part of the File interface .
6385	Find returns a slice of nodes that match the given PathExpr .
6386	Lex creates a Lexer from a string .
6387	MustParseXML is like ParseXML but panics on error .
6388	ParseXML takes an io . Reader and returns an XML node .
6389	Call calls the wrapped function and returns the result .
6390	Parse parses XPath string and returns XPathExec .
6391	MustParse is like Parse but panics on error
6392	Exec executes the XPath command .
6393	ExecBool is part of the XPath interface .
6394	ExecNum implements the XPath interface .
6395	ExecNode executes the XPath node and returns the node set .
6396	MustExec is like Exec but panics on error
6397	ParseExec is the same as Parse but returns a Result object .
6398	CreateNode creates a new XMLNode
6399	GetChildren returns the children of the XMLEle
6400	GetAttrs returns a slice of Attrs .
6401	ResValue returns the ResValue of the tree .
6402	Parse parses an XML string into a Node .
6403	GetToken returns the token of the XMLNode .
6404	ResValue returns the string representation of an XMLNode .
6405	Exec executes a XPath node .
6406	String returns a string representation of a Num .
6407	Num returns the number of string .
6408	BuildNS returns a slice of NSNodes in the XML format .
6409	GetAttribute returns a xml . Attr for a given node
6410	GetAttributeVal gets the value of an attribute
6411	GetAttrValOrEmpty returns the attribute value or an empty string if it is empty .
6412	FindNodeByPos returns the node with the given pos .
6413	Marshal writes n to w .
6414	MarshalStr marshals a Node to a string .
6415	NewLexer creates a new Lexer .
6416	NewLexerString returns a new Lexer .
6417	Split splits a string into a slice .
6418	Register implements the Register interface .
6419	Get returns ErrDescriptor by code .
6420	GetAll returns all registered descriptors .
6421	From returns a new error from an error
6422	Descriptor converts an error to ErrDescriptor .
6423	GetAttributes gets the Attributes from an error
6424	HTTPStatusCode returns the HTTP status code for the given type .
6425	HTTPStatusCode returns the HTTP status code .
6426	HTTPStatusToType converts a HTTP status to a type .
6427	ToHTTP converts an error to a JSON error
6428	toImpl converts an error to an impl .
6429	MetadataFromIncomingContext extracts metadata from a context .
6430	MetadataFromOutgoingContext returns the metadata associated with the given context .
6431	TokenFromMetadata extracts the token from metadata .
6432	TokenFromIncomingContext extracts the token from the context .
6433	OutgoingContextWithToken is a wrapper around OutgoingContextWithToken .
6434	KeyFromMetadata extracts key from metadata .
6435	KeyFromIncomingContext extracts metadata from the context
6436	OutgoingContextWithKey returns a context with the given metadata .
6437	IDFromMetadata extracts id from metadata .
6438	IDFromIncomingContext extracts metadata from a context
6439	OutgoingContextWithID returns a context with the given metadata .
6440	ServiceInfoFromMetadata returns the service name from the metadata .
6441	ServiceInfoFromIncomingContext extracts metadata about a service from a context
6442	OutgoingContextWithServiceInfo adds a context to the outgoing context
6443	LimitFromMetadata extracts the limit from metadata .
6444	OffsetFromMetadata extracts the offset from metadata .
6445	LimitAndOffsetFromIncomingContext is a wrapper around LimitAndOffsetFromIncomingContext .
6446	OutgoingContextWithLimitAndOffset returns a context with offset and offset .
6447	before returns true if the schedule item is before .
6448	New returns a new Error instance .
6449	WithNamespace returns a logger with the given namespace
6450	Wrap returns a new Namespaced instance
6451	WithField returns a new instance of Namespaced interface .
6452	WithFields returns a new instance of Namespaced interface .
6453	Format converts a format string into a format string .
6454	fix returns a copy of v .
6455	GRPCCode returns the GRPCCode
6456	GRPCCodeToType converts a GRPCCode to a Go type .
6457	GRPCCode returns the GRPC code for the error
6458	FromGRPC converts an error to a grpc Error .
6459	ToGRPC converts an error to a grpc error .
6460	IsEnabled checks if a namespace is enabled
6461	Set sets the namespace
6462	Cause returns the given error if any .
6463	parseCode converts a string to a Code .
6464	UnaryServerInterceptor returns a new UnaryServerInterceptor .
6465	StreamServerInterceptor returns a new streaming server interceptor .
6466	UnaryClientInterceptor returns a new UnaryClientInterceptor .
6467	StreamClientInterceptor returns a new streaming client interceptor .
6468	Interceptor returns a new streaming client interceptor .
6469	Wrap returns a new instance of the logger interface
6470	NewCounter creates a new counter
6471	NewRedisCounter creates a new counter metric .
6472	NewLimiter creates a new Limiter .
6473	WithInsecure returns a copy of the TokenCredentials
6474	WithTokenFunc returns a pointer to a TokenCredentials object wrapping a TokenCredentials structure .
6475	GetRequestMetadata returns the request metadata for a given context
6476	FieldsFromIncomingContext creates a Ttnlog . Fields from a context
6477	String returns the string representation of the type .
6478	UnmarshalText implements TextUnmarshaler interface .
6479	fromString converts a string to a Type .
6480	Start starts the stats loop
6481	NewSimple creates a new Simple
6482	Wrap returns a new Filter instance
6483	WithFilters returns a new Filter instance
6484	WithField returns a new instance of Filter .
6485	WithFields returns a new instance of Filter .
6486	FilterSensitive is used to filter a set of sensitive values
6487	SliceFilter returns a filter that filters elements of a slice .
6488	MapFilter returns a Filter that filters all values in a map .
6489	RestrictFilter returns a Filter that filters the given field name .
6490	LowerCaseFilter returns a Filter that filters all lower cases .
6491	newBatchPoints creates an instance of BatchPoints .
6492	NewSinglePointWriter returns a new instance of SinglePointWriter .
6493	Write writes a single point to the database .
6494	WithScalingInterval sets the scaling interval .
6495	NewBatchingWriter creates a new BatchingWriter .
6496	Write implements io . Writer interface
6497	MustParseLevel is like ParseLevel but panics on error .
6498	New creates a new gRPC stream
6499	SetLogger sets the underlying logger .
6500	CloseRecv closes the buffer .
6501	Stats returns the statistics of the stream .
6502	Run starts the Streambuffer .
6503	ServerOptions returns the gRPC server options for the given log .
6504	ClientOptions returns a slice of gRPC dial options for the given log .
6505	UnaryServerInterceptor returns a new unary server interceptor .
6506	StreamServerInterceptor returns a new streaming server interceptor .
6507	UnaryClientInterceptor returns a new unary client interceptor .
6508	StreamClientInterceptor returns a new streaming client interceptor
6509	default sets defaults
6510	Flush implements the http . Handler interface .
6511	New creates a new Handler for the given io . Writer
6512	HandleLog implements Logger interface
6513	New returns a new instance of TTNRandom interface .
6514	Names returns the name of the UriTemplate .
6515	String returns the value as a string .
6516	RenderPerfdata renders a PerfDatum
6517	Exit is the interface implementation
6518	NewCheckWithOptions returns a new Check with the given options .
6519	AddResult adds a new result to the check .
6520	AddResultf is part of the Check interface .
6521	String returns a string representation of the check .
6522	Exitf logs a formatted error message
6523	Criticalf is part of the Check interface .
6524	Unknownf is part of the Check interface .
6525	NewDefaultStatusPolicy creates a new default status policy .
6526	NewStatusPolicy returns a new instance of StatusPolicy
6527	ParseRange parses a range string .
6528	Check returns true if the range is valid .
6529	CheckInt returns true if the range is a valid integer .
6530	CheckUint64 returns true if the given value is a uint64 .
6531	NewClient creates a new API client
6532	GetKeyMeta returns the meta for a given path
6533	GetKeysInDirMeta returns all keys in a given path
6534	GetKeyContent returns the content for a PGP key
6535	GetJobSummariesForProject returns a list of jobs for a project
6536	GetJobsForProject returns all jobs for a project
6537	GetJob retrieves a job by ID .
6538	CreateJob creates a new job .
6539	CreateOrUpdateJob creates a new job .
6540	DeleteJob deletes a job .
6541	JobSummary returns a summary of the job import result .
6542	GetSystemInfo retrieves system information .
6543	DateTime returns the timestamp .
6544	GetAllProjects returns a list of all projects .
6545	GetProject returns a project by name .
6546	CreateProject creates a new project
6547	DeleteProject deletes a project .
6548	SetProjectConfig sets a project config .
6549	NewClient returns a new PBRestClient .
6550	NewClientByToken creates a new client by token
6551	SetDepth sets the depth of the client
6552	ListDatacenters returns a list of all datacenters .
6553	CreateDatacenter creates a new datacenter .
6554	GetDatacenter gets a single datacenter
6555	UpdateDataCenter updates a new datacenter .
6556	DeleteDatacenter deletes the given datacenter .
6557	WaitTillProvisioned waits until the given path expires
6558	ListFirewallRules returns a list of firewall rules .
6559	GetFirewallRule gets a firewall rule
6560	CreateFirewallRule creates a new firewall rule
6561	UpdateFirewallRule updates a firewall rule
6562	DeleteFirewallRule deletes a firewall rule
6563	ListLoadbalancers lists all loadbalancers
6564	GetLoadbalancer returns a Loadbalancer for the given dcid .
6565	UpdateLoadbalancer updates a loadbalancer .
6566	DeleteLoadbalancer deletes a loadbalancer .
6567	ListBalancedNics returns a list of all the balinics in the given dcid .
6568	Associate a Nic object
6569	GetBalancedNic returns a new Nic object
6570	DeleteBalancedNic deletes the given balid .
6571	ListLans returns a list of Lang .
6572	GetLan returns a lan of the given lanid .
6573	DeleteLan deletes the given lanid .
6574	ListNics returns a list of all NICs .
6575	CreateNic creates a new Nic object
6576	GetNic returns a Nic object for the given nicid .
6577	UpdateNic updates a nic .
6578	DeleteNic deletes the specified nicid .
6579	ListSnapshots returns a list of all snapshots
6580	GetSnapshot returns a single snapshot
6581	DeleteSnapshot deletes a snapshot
6582	UpdateSnapshot updates an existing snapshot .
6583	ListIPBlocks returns a list of IP blocks .
6584	ReserveIPBlock reserves an IP block .
6585	GetIPBlock returns the specified IP block .
6586	UpdateIPBlock updates an existing IP block .
6587	ReleaseIPBlock releases an IP block
6588	ListVolumes returns a list of volumes .
6589	GetVolume fetches a volume by its ID .
6590	UpdateVolume updates a volume
6591	CreateVolume creates a volume
6592	DeleteVolume deletes a volume
6593	CreateSnapshot creates a new snapshot
6594	RestoreSnapshot restores a snapshot
6595	ListServers lists all servers for a given dcid .
6596	GetServer returns a Server with the given dcid .
6597	DeleteServer deletes a server
6598	ListAttachedCdroms returns the list of images for the given dcid .
6599	AttachCdrom attaches a cdrom image to the server .
6600	GetAttachedCdrom returns the image specified by dcid .
6601	DetachCdrom detaches the cdrom path .
6602	ListAttachedVolumes lists volumes for the specified dcid .
6603	AttachVolume attaches a volume to a volume
6604	GetAttachedVolume returns volume details for the specified volume .
6605	DetachVolume detaches a volume .
6606	StartServer starts a new server
6607	ListLocations returns a list of Locations
6608	GetRegionalLocations retrieves all Locations associated with the given regid .
6609	GetLocation returns a new Location object
6610	GetContractResources retrieves information about a contract resource
6611	ListImages returns a list of images
6612	GetImage gets an image by ID
6613	PrintHeaders prints response headers
6614	ListGroups returns a list of groups
6615	GetGroup retrieves a group
6616	CreateGroup creates a group
6617	UpdateGroup updates a group
6618	DeleteGroup deletes a group
6619	Gets all shares .
6620	GetShare gets a share from a group
6621	AddShare adds a share to a group
6622	UpdateShare updates a share
6623	DeleteShare deletes a group share
6624	ListGroupUsers lists all users for a group
6625	AddUserToGroup adds a user to a group
6626	DeleteUserFromGroup deletes a user from a group
6627	ListUsers returns a list of users
6628	GetUser returns information about a user
6629	CreateUser creates a new user
6630	UpdateUser updates a user
6631	DeleteUser deletes a user
6632	ListResources returns a list of resources
6633	GetResourceByType fetches a resource by its ID .
6634	Gets information about a specific resource type
6635	ListRequests returns a list of requests
6636	GetRequest returns a new Request with the given ID .
6637	GetRequestStatus returns request status
6638	Close closes the writer
6639	GetSerializableArgument gets the serializable argument .
6640	BoolVar is a wrapper for EnvironmentFlags . BoolVar
6641	Bool creates an instance of Bool
6642	IntVar is an alias for IntVar .
6643	Int is a convenience wrapper for Int
6644	Int64Var is an alias for Int64Var .
6645	Int64 creates an int64 with the specified name and usage string .
6646	UintVar implements uint . FlagSet .
6647	Uint creates an instance of uint
6648	Uint64Var sets the value of a uint64 variable .
6649	Uint64 creates an instance of uint64
6650	StringVar is a convenience wrapper for StringVar
6651	String defines a string flag .
6652	Float64Var is a wrapper around Float64Var
6653	Float64 creates an instance of float64
6654	DurationVar is an alias for DurationVar .
6655	Duration creates a new time . Duration
6656	Parse the environment
6657	WriteStringToFile writes a string to a file
6658	ReadFileToString reads a file from the given path .
6659	LineReader returns a channel that will receive lines from r .
6660	LineReaderFrom returns a channel from the given path .
6661	FileExists checks if a given file exists
6662	FileExistsInPath returns true if the given file exists in the given directory
6663	GetPathParts returns the parts of the given path .
6664	GetThisPathParts returns the full path parts .
6665	RandomString returns a random string
6666	ParseAddress parses an address string and returns it .
6667	HomeDir returns the home directory
6668	IsTCPPortAvailable returns true if the port is available
6669	RandomTCPPort returns a random TCP port
6670	HashString computes the hash of a string .
6671	Context retrieves an access token from the context
6672	Token returns an oauth2 . Token .
6673	NewDaemon creates a new daemon
6674	Close closes the daemon
6675	NewAccessTokenContext returns a new context with the given access token
6676	AccessTokenFromContext extracts the access token from the context .
6677	RandomAccessToken returns a random access token .
6678	Init initializes the logger
6679	Load loads a dictionary .
6680	Start implements Postgres .
6681	Get is part of the PostgreSQL interface .
6682	List is part of the PostgreSQL interface .
6683	Exists checks if the given access token exists .
6684	Abandon aborts a storage .
6685	SetValue is part of the PostgreSQL interface .
6686	Delete deletes a session from the database .
6687	Setup initializes the database .
6688	TearDown closes the storage .
6689	initJaeger returns an opentracing tracer .
6690	Usage prints the usage
6691	Build creates a DoubleArray from a slice of keywords .
6692	Read reads a DoubleArray from r .
6693	Get returns the node at k .
6694	ExternalNodes returns a list of all external nodes .
6695	GetOther returns a node from the cluster
6696	GoString returns a string representation of the Cluster
6697	Scan implements the Bag interface .
6698	Value implements the driver . Value interface .
6699	Has checks if a key exists in the bag
6700	WriteTo implements io . WriterTo interface . It serializes the index table into the wire format .
6701	ReadIndexTable reads the index table from r .
6702	NewBar creates a new action bar
6703	RegisterAction registers an action
6704	Actions add actions to ActionBar
6705	Render render actionbar
6706	FuncMap render function button
6707	EditMode returns true if the action is EditMode
6708	SwitchMode switch mode
6709	InlineEdit renders the edit action .
6710	Error returns the string representation of the error .
6711	ParseFile returns a list of machines in the given filename .
6712	FindMachine finds a machine by name .
6713	New creates a new trie .
6714	Camel returns the camel case of a given string
6715	Pascal returns the value of s as Pascal .
6716	Snake returns a snake case .
6717	SnakeUpper is like SnakeUpper .
6718	Kebab returns the kebab of the kebab
6719	KebabUpper returns kebab uppercase
6720	isPathSafe checks if a string is a valid whitelist
6721	Start sets the RequestTracer .
6722	ParseAuthHeaders parses and returns AuthCreds .
6723	Tracer sets a new tracer .
6724	HTTPClient is used to set the HTTP client
6725	BasicAuth sets basic auth on the client
6726	BearerAuth is used to set the Authorization header
6727	CookieJar sets the cookie jar
6728	SanitizerEnabled is used to set the sanitizer flag .
6729	OpenFile opens a file at endpoint .
6730	RoundTrip executes a RoundTripFn and returns a response .
6731	SetAuthHeader sets authentication header
6732	FileName returns file name
6733	newBuffersFromFiles creates a slice of buffers from a slice of files .
6734	newFileBuffer returns a new instance of bytesBuffer .
6735	rewind rewind the file .
6736	ConvertResponse converts a Response to a Response
6737	Set converts BoolOption to BoolOption .
6738	WriteAnswer writes a boolean response
6739	String returns a string representation of the BoolOption .
6740	TriggerIncidentKey triggers an incident key
6741	TriggerWithDetails is a helper function to trigger an incidentKey with a context
6742	TriggerIncidentKeyWithDetails triggers an incident key with the specified details .
6743	Merge merges src into dst .
6744	setSource sets the source to the given value
6745	convertString converts a string to a string .
6746	Do performs a function f on the database .
6747	NewFile creates a new io . Writer
6748	internalRun runs the benchmark .
6749	String returns a string representation of the Row .
6750	Tabulate converts a ResultSet into a slice of rows .
6751	AmazonRequest gets the Amazon request
6752	WriteTabularData writes tabular data to w .
6753	Reduce returns a list of buckets in a given interval .
6754	NewSemaphore creates a new Semaphore .
6755	Release releases the semaphore .
6756	Resize resizes the semaphore .
6757	AddOutput adds an output to the benchmark .
6758	RunBenchmarks is part of the benchmark . Benchmarks interface .
6759	parseBool converts a byte slice into a boolean .
6760	checkInteger checks if an integer is an integer
6761	parseInt64 decodes an integer from a slice of bytes .
6762	parseInt32 parses an int32 .
6763	parseBigInt converts a slice of bytes to a big integer .
6764	parseBitString parses a BIT STRING byte slice .
6765	parseObjectIdentifier parses an object identifier .
6766	parseBase128Int is used to parse a base128 integer
6767	parseGeneralizedTime parses the serialized time .
6768	parsePrintableString parses a printable string .
6769	isPrintable returns true if b is a printable
6770	parseSequenceOf returns the sequence of the byte slice .
6771	invalidLength returns true if the offset is invalid
6772	setDefaultValue returns true if param is a default value .
6773	UnmarshalWithParams decodes b into b .
6774	parseFieldParameters converts a string to a fieldParameters .
6775	getUniversalType returns the universal type for the given type .
6776	DecodeString decodes a base32 encoded string .
6777	MailNotifier returns the MailNotifier associated with the database .
6778	SaveMailNotifier saves a new email notifier .
6779	RegisterProvider registers a provider .
6780	InitDb initializes MongoDb
6781	Until runs f until stopCh is closed .
6782	logPanic logs a panic .
6783	User gets a user by username
6784	Users returns all users with the given filter .
6785	SaveUser saves a user to MongoDB .
6786	DeleteUser deletes a user from MongoDB
6787	LoadCACertFile loads a certificate pool
6788	NewAuth returns a new Auth instance
6789	ValidateRequest validates the request
6790	Process implements authHandler .
6791	ValidateCN validates this Auth .
6792	ValidateOU validates the OU against the Auth
6793	KeyLen returns the length of x .
6794	DefaultConfig returns the default configuration for vault client
6795	New creates a new certSigner
6796	New creates a new VaultFactory .
6797	DefaultServiceConfig returns a ServiceConfig with default values .
6798	NewService creates a new service
6799	Delete removes a cluster
6800	IsNoVaultHandlerDefined checks if the given error is a NoVaultHandler .
6801	New returns a new Vault Service .
6802	Create creates a new Pki mountpoint
6803	CreateJob creates a new job .
6804	Run runs the config .
6805	newWatcher creates a new watcher
6806	Start starts the watcher
6807	Stop stops the Watcher .
6808	Active returns true if the watcher is active .
6809	Add adds paths to a file
6810	watch is the main entry point for watching .
6811	Watching returns a list of paths that are watching .
6812	State returns all registered notifications .
6813	Store is part of the http . Request interface .
6814	Get retrieves the error from the request context
6815	Catch returns a middleware that wraps the next handler in the context .
6816	Try is a wrapper around http . Handler
6817	Recover returns a middleware that recovers panics and panics .
6818	The http request
6819	SyncHandler is an http . HandlerFunc that wraps the http . Handler interface .
6820	connect connects to the websocket .
6821	send sends an update .
6822	NumConnections returns the number of active connections .
6823	Push pushes the state to the queue .
6824	gopush pushes the state to the stack .
6825	NewOutForward creates a new OutForward
6826	Run starts the tail file
6827	New creates a new Fluent .
6828	Close closes the connection
6829	IsReconnecting returns true if there is a reconnecting
6830	connect connects to the server .
6831	Notifier returns a new GNotifier .
6832	NullNotification returns an instance of NullNotifier .
6833	New creates a new identity
6834	Issue creates a new identity
6835	Subject is an Option to set the subject
6836	PrivateKey returns an Option that sets the private key
6837	NotBefore sets the NotBefore value .
6838	NotAfter sets the NotAfter value .
6839	IssuingCertificateURL is an Option to set the issuing certificate URL .
6840	OCSPServer is an Option to set the OSCSP server option .
6841	New returns a new instance of TelegramBotAPI
6842	NewWithWebhook returns a new TelegramBotAPI instance .
6843	Close closes Telegram bot API .
6844	GetMe returns information about the current user .
6845	RunBot runs a bot .
6846	RunBotOnWebhook runs bot on webhook
6847	NewOutgoingMessage returns a new OutgoingMessage
6848	NewOutgoingLocation creates a new OutgoingLocation
6849	NewOutgoingVenue creates a new OutgoingVenue
6850	NewOutgoingVideo creates a new instance of OutgoingVideo
6851	NewOutgoingVideoResend creates a new OutgoingVideo
6852	NewOutgoingPhoto creates a new instance of OutgoingPhoto
6853	NewOutgoingPhotoResend creates a new instance of OutgoingPhoto
6854	NewOutgoingSticker creates a new OutgoingSticker
6855	NewOutgoingStickerResend creates a new OutgoingSticker
6856	NewOutgoingVoice creates a new OutgoingVoice
6857	NewOutgoingVoiceResend creates a new OutgoingVoice
6858	NewOutgoingAudio creates a new OutgoingAudio
6859	NewOutgoingAudioResend creates a new OutgoingAudio object .
6860	NewOutgoingDocument creates a new outgoingDocument
6861	NewOutgoingDocumentResend creates a new outgoingDocument
6862	NewOutgoingForward creates a new OutgoingForward
6863	NewOutgoingChatAction creates a new outgoing chat action
6864	NewOutgoingUserProfilePhotosRequest creates a new OutgoingUserProfilePhotosRequest .
6865	NewOutgoingKickChatMember creates a new OutgoingKickChatMember
6866	NewOutgoingUnbanChatMember creates a new OutgoingUnbanChatMember
6867	NewOutgoingCallbackQueryResponse creates a new OutgoingCallbackQueryResponse
6868	NewInlineQueryAnswer creates a new inline query .
6869	Type returns the type of message .
6870	Type returns the type of the update .
6871	MarshalJSON method of recipient
6872	querystring returns the query string
6873	getBaseQueryString returns the base query string
6874	getBaseQueryString returns the base query string
6875	querystring returns the query string
6876	querystring returns the query string
6877	querystring returns the query string
6878	querystring returns the query string .
6879	querystring returns the query string .
6880	NewInlineQueryResultArticle creates a new inline query article .
6881	NewInlineQueryResultPhoto creates a new inline query photo .
6882	NewInlineQueryResultGif creates a new inline query gif .
6883	NewInlineQueryResultMpeg4Gif creates a new inline query .
6884	NewInlineQueryResultVideo creates a new inline query video .
6885	Send a user profile photos request
6886	Send sends a chat action .
6887	Send sends the response to the user .
6888	Send a message to the group member .
6889	Send unban chat member
6890	Send sends the response .
6891	NewAPIClient creates a new APIClient .
6892	BeforeInsert inserts the timestamp
6893	ColumnName returns column name .
6894	New creates a new database
6895	From creates a From from a DB
6896	Where creates a WHERE condition .
6897	OrderBy sets ORDER BY clause .
6898	Limit returns true if the condition is greater than or equal to max .
6899	Offset returns condition .
6900	Join condition . Join condition
6901	Count returns a function that can be used to add a number to the database .
6902	Update updates an update .
6903	Delete deletes the object .
6904	Begin begins a new transaction .
6905	Commit is part of the database .
6906	Quote quotes s with s .
6907	SetLogOutput is used to set the log output writer .
6908	selectToSlice takes a slice of rows and returns a reflect . Value .
6909	selectToValue takes a slice of rows and returns a reflect . Value .
6910	fieldIndexByName finds a field index by its name .
6911	columns returns the SQL statement for the given table name .
6912	tagsFromField returns the set of tags for a field .
6913	hasSkipTag returns true if the field has a skip tag
6914	hasPKTag returns true if the field has a PK tag
6915	isAutoIncrementable returns true if the field is an autoIncrementable .
6916	collectFieldIndexes returns the indexes for the given type .
6917	findPKIndex finds PKIndex for the given typ .
6918	sizeFromTag returns the size of the tag .
6919	columnFromTag returns column name from field tag .
6920	defaultFromTag returns the default value for a tag .
6921	Where adds a WHERE clause to the condition .
6922	And adds AND condition .
6923	Or adds OR condition .
6924	Like adds a LIKE condition to the condition .
6925	Between adds the condition to the condition .
6926	OrderBy sets ORDER BY clause .
6927	Limit adds a LIMIT clause .
6928	Offset adds an offset to the condition .
6929	SetFormat implements logger .
6930	Print implements Logger interface
6931	Print implements Logger interface
6932	Quote converts a SQL dialect to a string .
6933	SQLType returns the type of a PostgresDialect .
6934	New returns a new archive for the given file .
6935	Disconnect disconnects the Host .
6936	nextNetworkAdapterID returns the next network adapter ID .
6937	totalNetworkAdapters returns the total network adapters of the VM .
6938	RemoveAllNetworkAdapters removes all network adapters from the VM .
6939	RemoveNetworkAdapter removes a network adapter
6940	NetworkAdapters returns the network adapters for the VM .
6941	newArchive creates a new archive for the given path
6942	GetFileReader returns a reader for the given file name .
6943	ExtractToWriter extracts a single file from the archive .
6944	ExtractToFile extracts a file from an archive
6945	SharedFoldersParentDir implements the SharedFoldersParentDir interface .
6946	Name returns the name of the snapshot .
6947	Description returns the description of the snapshot .
6948	cleanupSnapshot clears the snapshot .
6949	BusTypeFromID returns a bus type based on its ID .
6950	Read reads the VMX file from disk .
6951	Write writes the VMX file to disk .
6952	NewVirtualMachine creates a new VM .
6953	Vcpus returns the Vcpus of the VM .
6954	VmxPath returns the path to the VM .
6955	MemorySize returns the size of the VM .
6956	ReadOnly returns true if the VM implements the VM interface .
6957	InVMTeam returns true if the VM is in a VM .
6958	PowerState returns the power state of the VM .
6959	ToolsState returns the current VM s tools state .
6960	IsRunning returns true if the VM is running .
6961	GuestOS returns the GUESTOS of the VM .
6962	cleanup a VM .
6963	updateVMX updates an existing virtual machine .
6964	SetMemorySize sets the memory size of the VM .
6965	SetNumberVcpus sets the number of vcpus
6966	SetDisplayName sets the display name of the VM .
6967	SetAnnotation sets the annotation on the VM .
6968	SetVirtualHwVersion sets the version of the VM .
6969	Error implements the error interface for Error .
6970	Errorf is similar to fmt . Errorf .
6971	Error implements the error interface .
6972	string returns a string representation of the stack frame .
6973	newStackFrame creates a stack frame .
6974	captureStack returns a slice of stack frames with the given maxDepth .
6975	parseFuncName returns package path .
6976	Stack prints the given error as a stack
6977	StackWithCaller is like Stack but panics on error
6978	Write implements the ResponseWriter interface .
6979	ResponseStatus returns the response status code
6980	httpResponseStruct converts the given value to a reflect . Value
6981	SetDetectedContentType sets the Content - Type header .
6982	New creates a new ServerError
6983	New creates a new DBError
6984	New creates a new validation error
6985	New creates a new NotFoundError
6986	StrLength validates the string length .
6987	StrLenIn returns the length of a string .
6988	StrIn is part of the Controller interface .
6989	GetEmail validates the email
6990	MostSpecificType returns the string representation of a specific type .
6991	FullTypeHierarchy returns a list of type hierarchy .
6992	SortTypes sorts a slice of types .
6993	Delete removes a value from the store
6994	Set stores a key value pair in redis .
6995	refresh will refresh the store if it exists .
6996	Get returns a redisStore with the specified sid .
6997	Destroy deletes the redis client
6998	UpExpire will expire the redis .
6999	Use adds a handler to the stack .
7000	ServeHTTP implements the http . Handler interface .
7001	Use adds middleware to the router group
7002	Group returns a router group with the given path .
7003	Run runs the server
7004	create creates a new engine .
7005	Redirect sends a request to Redirect
7006	Ok writes data to http request
7007	Fail is part of the http . Context interface .
7008	ResStatus returns the response status code .
7009	Next adds the next handler to the stack .
7010	GetSession returns the current IStore
7011	GetBodyJSON returns request body
7012	SetSession sets a session
7013	FreshSession updates the session with the given key .
7014	DeleteSession deletes a session
7015	Write implements the http . ResponseWriter interface .
7016	WriteHeader implements the http . ResponseWriter interface .
7017	New returns a new Client .
7018	setAllowLargeResults is used to set allow large results .
7019	connect returns a bigquery service .
7020	InsertRow inserts a row into the database .
7021	AsyncQuery sends an async query .
7022	Query executes a query and returns a slice of results .
7023	stdPagedQuery executes a bigquery query .
7024	largeDataPagedQuery is used to query BigQuery .
7025	pagedQuery performs a paged query .
7026	pageOverJob fetches the results of a page .
7027	Count returns the count of a dataset .
7028	work fetches and returns a cached result .
7029	subworker runs the subworker function .
7030	worker runs the worker pool .
7031	supervisor manages the supervisor .
7032	Run starts the pool
7033	Add adds a job to the pool
7034	Wait blocks until the pool is completed .
7035	Results returns a slice of jobs .
7036	WaitForJob waits for the job to finish .
7037	Status returns the status of the pool .
7038	WrapHTTPHandlerFunc wraps http . HandlerFunc into a HandlerFunc .
7039	WebSocketHandlerFunc returns a HandlerFunc wrapping a websocket . HandlerFunc .
7040	StaticFile creates a static file
7041	PreloadFile is used to preload a file
7042	InitHtmlTemplates loads template templates .
7043	InitTextTemplates initializes text templates .
7044	Html creates a template with default values .
7045	Text creates a template with default values .
7046	InitWatcher initializes a new watcher .
7047	CloseWatcher closes the watcher
7048	Find returns the router s values .
7049	Add adds a router to the router .
7050	NewRouters returns a new Routers instance
7051	NewServerMux returns a new ServerMux .
7052	err registers the error handler .
7053	HandleFunc registers a new HandlerFunc .
7054	handleError handles an error .
7055	Redirect sends a response with status code .
7056	InitPProf initializes pprof
7057	StartSession starts a new session
7058	configures a slice of ints from a slice of ints .
7059	replicate_combinations returns a chan which is a repeat_num .
7060	permutations takes a list of strings and returns a channel that can be used to filter the results .
7061	replicate_permutations returns a chan which is a repeat_num .
7062	gformat converts a format string into a string .
7063	Errorm creates a formatted string with a format string .
7064	Fprintm is similar to fmt . Fprint .
7065	Printm is fmt . Printf
7066	Sprintf is fmt . Sprintf
7067	Validate a password strength requirements
7068	MakeRequirements makes a password strength requirements .
7069	sanityCheck returns whether the password strength requirements are valid .
7070	password takes a password and returns a string .
7071	NewPassword returns a new password .
7072	NewPasswords returns a slice of passwords given a password requirements
7073	addNums adds numDigits to a string
7074	start a string with numPunc
7075	Removes deprecated_init from stdin
7076	Param adds a param to the param set
7077	Parse unmarshals ParamSet from json
7078	Unmarshal implements json . Unmarshaler interface .
7079	GetDefaultHTTPClient returns an IHTTPClient
7080	Get device info
7081	DevicePresence returns information about the given device .
7082	NotificationStatus get notification status
7083	DeleteNotification deletes a notification .
7084	NotifyDevice sends a notification to a device .
7085	Assert asserts to the test if the test fails
7086	CreateFile creates a new file
7087	AddError adds an error to FormErrors .
7088	AddFieldError adds a field to the form error list
7089	HasErrors returns true iff the FormErrors contains any errors .
7090	NewError creates a new form error from a string
7091	NewFieldError returns a new FormErrors instance
7092	ChainHandlers returns a chain of handlers .
7093	FinalHandler is a middleware that wraps http . Handler .
7094	Hash returns the MD5 hash of the reader .
7095	IsHash returns true if h is a hash
7096	WithBaseDir sets the base directory
7097	WithFileFindFunc returns an Option that sets the FindFunc function .
7098	WithTemplateFromFiles returns an Option that sets a template name .
7099	WithTemplatesFromFiles returns an Option that sets templates from a map
7100	WithTemplateFromStrings sets the template name
7101	WithTemplatesFromStrings returns an Option that sets a map of strings to the specified map
7102	WithFunction returns an Option that sets the function name .
7103	WithFunctions returns an Option that sets the template functions
7104	WithDelims returns an Option that sets the delimiter .
7105	New creates a new templates
7106	RespondWithStatus sends a response with status code .
7107	RespondTemplate sends a response with the given template name and data .
7108	Respond with custom templates
7109	RenderTemplate renders a template
7110	New creates a new h2quic server
7111	ServeUDP serves UDP connection
7112	Shutdown the server
7113	QuicHeadersHandler adds headers to the request .
7114	GetRequestIPs returns the IPs of the request
7115	DomainRedirectHandler returns a http . Handler that redirects to the specified domain .
7116	New returns a new Servers instance .
7117	Add adds a new server
7118	TCPAddr returns the TCPAddr of the server
7119	UDPAddr returns the UDP address of the server
7120	Close closes all servers
7121	Shutdown stops all servers
7122	Accept implements net . Listener . Accept .
7123	NewStaticFilesHandler returns a http . Handler that serves static files
7124	ServeHTTP implements authentication . Handler
7125	MarshalJSON method of Options
7126	UnmarshalJSON decodes JSON data into Options .
7127	MarshalYAML marshals Options to JSON .
7128	UnmarshalYAML implements the json . Unmarshaler interface for Options .
7129	NewHandler returns a new http . Handler
7130	WithPanicResponse is an Option to set the panic response body
7131	WithPanicResponseHandler sets the http . Handler for panics
7132	New returns a new instance of Handler .
7133	ServeHTTP implements http . Handler
7134	NewContextFunc returns a function that can be used to create a context .
7135	NewMapErrorRegistry returns a new instance of MapErrorRegistry .
7136	AddError adds an error to the registry .
7137	AddMessageError adds a message error to the registry .
7138	MustAddError is like AddError but panics if error occurs .
7139	MustAddMessageError is like AddMessageError but panics if error occurs .
7140	AddHandler adds a handler to the registry .
7141	MustAddHandler adds a handler function to the map error registry .
7142	Handler returns a handler for the given code .
7143	New returns a new instance of Client
7144	Request sends an HTTP request
7145	JSONContext sends a JSON - RPC request
7146	StreamContext is part of the Client interface .
7147	Stream sends a streaming request .
7148	JSONUnmarshal decodes data into v .
7149	ServeTCP implements the Server interface .
7150	ServeTCP implements the Server interface .
7151	Shutdown gracefully shuts down the server .
7152	HandleMethods handles HTTP requests
7153	NewSetHeadersHandler returns a new http . Handler
7154	New creates a new server
7155	HashedPath returns the path for the given path .
7156	New returns a new instance of Service .
7157	HTMLHandler returns a http . Handler for rendering
7158	Status implements Service .
7159	StatusHandler implements Service .
7160	OnHandler implements Service .
7161	OffHandler implements Service .
7162	MarshalJSON method of PostIRCMessageRequest
7163	MarshalJSON method of PostArtifactRequest
7164	MarshalJSON method of PostArtifactResponse
7165	MarshalJSON method of HookChangedMessage
7166	MarshalJSON method of TriggerHookRequest
7167	MarshalJSON method of TriggerHookResponse
7168	UnmarshalJSON implements the json . Unmarshaler interface for TriggerHookResponse .
7169	MarshalJSON method of LaunchInfo
7170	MarshalJSON method of Var
7171	MarshalJSON method of Var1
7172	MarshalJSON method of Var3
7173	MarshalJSON implements the json . Marshaler interface for Time .
7174	UnmarshalJSON implements the json . Unmarshaler interface .
7175	Write implements io . Writer
7176	Seek implements io . Seeker
7177	Read implements io . Reader
7178	MarshalJSON method of LaunchSpecsResponse
7179	MarshalJSON method of RegionLaunchSpec
7180	GenerateCode generates code
7181	Post the API definition
7182	CreateTemporaryCredentials creates a new Credentials with the given credentials .
7183	setURL parses a URL and returns a BaseURL
7184	SignRequest is used to sign a request
7185	APICall performs the API call summary
7186	SignedURL is used to set the signed URL
7187	MarshalJSON method of HawkSignatureAuthenticationResponse
7188	bmw256 converts a byte slice to a byte slice .
7189	NewCubeHash returns a new cube hash .
7190	cavehash256 computes the cubehash256 hash of data .
7191	Sum returns the sha256 sum of data .
7192	pulls out to out
7193	reducedSqueezeRow0 reduces the number of rows to lowercase .
7194	reducedDuplexRow1 reduces the number of bytes in a single row .
7195	NewReaderByteCodeLoader creates a new ReaderByteCodeLoader .
7196	LoadReader loads a byte from an io . Reader
7197	NewV3 returns a UUID based on a UID .
7198	txLiteral moves the state to the current state .
7199	txFetchSymbol fetches the symbol from the current state .
7200	txMarkRaw is used to mark a raw string .
7201	txUnmarkRaw unmarks the raw value .
7202	txPrint is used to print a string to stdout .
7203	txPrintRaw is used to print the output of a transaction .
7204	NewLoopVar creates a new LoopVar .
7205	txMakeArray creates an array of Array .
7206	txFunCallOmni is a helper function that calls Func .
7207	DumpAST adds b to the flag .
7208	DumpByteCode adds b to the flag set .
7209	Optimize optimizes the NaiveOptimizer
7210	NewFuncDepot returns a FuncDepot instance
7211	Get returns the value for the given key
7212	Set sets the value for the given key
7213	NewFileTemplateFetcher creates a new FileTemplateFetcher .
7214	LastModified returns the last time the file was modified .
7215	Reader returns an io . Reader
7216	Bytes returns the contents of the source .
7217	NewState returns a new State instance .
7218	PushFrame creates a new frame .
7219	PopFrame pops a frame from the stack .
7220	CurrentFrame returns the current frame .
7221	Warnf logs a warning message .
7222	AppendOutputString appends an output string to the output string .
7223	Popmark removes the markstack index .
7224	CurrentMark implements Markstack .
7225	LoadByteCode loads a byte from the state .
7226	Reset resets the state .
7227	DeclareVar adds a variable to the stack .
7228	GetLvar returns the value at index i .
7229	SetLvar implements the interface .
7230	NewByteCode returns a new ByteCode
7231	Append appends an OpList to the byte list .
7232	AppendOp appends an operation to the byte code .
7233	String returns a string representation of the bytecode .
7234	NewCachedByteCodeLoader creates a new CachedByteCodeLoader .
7235	Load loads a byte code from the cache
7236	NewFileCache creates a new FileCache
7237	GetCachePath returns the path to the given key .
7238	Get retrieves a cache from the cache
7239	Set adds an entity to the cache
7240	Delete removes the file from the cache
7241	Get returns CacheEntity or error
7242	Set adds a cache entry to the cache .
7243	Delete removes a key from the cache
7244	NewStringLexer creates a Lexer from a string set .
7245	NewReaderLexer creates a new Lexer .
7246	NewV4 returns a new UUID .
7247	Parse is a wrapper around Kolonish
7248	ParseReader is a wrapper around Kolonish
7249	Visit returns a channel that will be closed when the AST is closed .
7250	String returns a string representation of AST .
7251	Run runs the VM .
7252	DefaultParser sets the default syntax for the Xslate .
7253	DefaultLoader loads the xslatex .
7254	DefaultVM sets the default VM .
7255	Get returns the value for the given key .
7256	NewHTTPSource creates a new HTTPSource
7257	NewStringByteCodeLoader creates a new StringByteCodeLoader .
7258	LoadString loads a string from a template
7259	Get returns the value for the given key .
7260	NewOp creates a new Op
7261	MarshalBinary marshals op to binary .
7262	UnmarshalBinary decodes data into opType .
7263	ArgInt returns the argument as int .
7264	ArgString returns the argument as string .
7265	AppendOp appends the specified operation to the buffer .
7266	Compile compiles the given AST into a VM .
7267	NewV5 returns a new UUID with the given UUID .
7268	Sort sorts the LexSymbolList
7269	Less implements sort . Interface .
7270	Swap implements sort . Interface .
7271	Copy returns a copy of this LexSymbolSet .
7272	Set sets an item in the LexSet .
7273	GetSortedList returns the lexicographically sorted list
7274	Top returns the top level of the stack .
7275	Resize resizes the stack
7276	Extend extends the stack .
7277	Grow grows the stack
7278	Get returns the value at index i .
7279	Set implements the Set interface .
7280	Push implements the Stack interface .
7281	Pop returns the top item in the stack
7282	String returns a string representation of the stack
7283	GetHostIPs returns a slice of host IPs
7284	GetPrivateHostIPs returns the list of private IPs
7285	IsPrivate returns true if the given IP is a private key
7286	Environ implements environs . Environ .
7287	getenv returns the value of the named environment variable .
7288	flagAsEnv returns the name as a string .
7289	NewPolicy returns a new instance of Policy
7290	CreateRandom returns a slice of random bytes .
7291	Shuffle shuffles the given slice of bytes .
7292	Generate returns a random string of the policy .
7293	ExecutableFolder returns the executable folder .
7294	Ignore adds an error to the Sentinel list .
7295	Sigs is an Option to set the Sigs .
7296	Logf is an Option to set the logf function .
7297	Errorf is an Option to set the error severity .
7298	New instantiates a new Sentinel instance .
7299	Run runs the Sentinel .
7300	Shutdown implements the Sentinel interface .
7301	ShutdownIgnore returns true if err is not nil
7302	Register registers a Sentinel .
7303	Mux creates a new netmux .
7304	HTTP adds a listener to the sentinel server .
7305	IgnoreError returns true if the given error is an IgnoreError .
7306	IgnoreNetOpError returns true if the given error should be ignored .
7307	convertAndAppendContextFuncs converts a slice of func into a slice of func .
7308	router returns a mux . Router .
7309	buildInfoHandler is the default build - info handler .
7310	Encode encodes json data to json
7311	Json returns a martini Handler that parses data into a martini .
7312	validateAndMap validates the given object and calls validateAndMap on it .
7313	Count returns the number of errors
7314	Header returns a map of headers for origin .
7315	PreflightHeader returns a map of headers for the request .
7316	IsOriginAllowed returns true if the provided origin is allowed
7317	Allow sets the request headers
7318	Rendererer returns a handler that renders the given options .
7319	String returns a string representation of al .
7320	Languages returns a martini . Handler that accept languages .
7321	Prefix is a middleware that will add a prefix to the request
7322	Basic returns a http . HandlerFunc that provides basic authentication .
7323	UpdateUser updates a user
7324	GetById gets a user by id
7325	AddressToAccountId converts a string to an AccountId .
7326	MutateChangeTrust does nothing
7327	MutateChangeTrust modifies the change trust operation
7328	Trust is used to create a new trust builder
7329	RemoveTrust removes a trust asset from the database
7330	MutatePayment modifies the payment amount .
7331	MutatePayment updates the destination of the destination
7332	MutatePayment modifies the native sum of an integer value .
7333	MutatePayment modifies the payload of the path
7334	MutateAccountMerge is the same as MutateAccountMerge .
7335	MustParse is like Parse but panics on error .
7336	Parse converts a string to an integer value .
7337	String converts xdr to a string .
7338	CreateOffer creates a new ManageOffer
7339	CreatePassiveOffer creates a new ManageOffer
7340	UpdateOffer updates an offer .
7341	DeleteOffer deletes an offer .
7342	ManageOffer is defined on the ManageOffer interface .
7343	Mutate mocks the mutator
7344	MutateManageOffer modifies the amount of ODR .
7345	MutateManageOffer is part of the OfferID interface .
7346	MutateManageOffer modifies the value of an offer .
7347	MutateOperation is part of the Operation interface .
7348	String returns the price as a string .
7349	Transaction creates a new TransactionBuilder
7350	Mutate applies Mutator to the builder .
7351	Hash returns the hash of the transaction .
7352	HashHex returns the hash of the transaction builder .
7353	Sign adds signers to TransactionBuilder .
7354	MutateTransaction adds a transaction to allow trustBuilder .
7355	MutateTransaction is part of the ChangeTrustBuilder interface .
7356	MutateTransaction creates a new transaction .
7357	MutateTransaction modifies the transaction builder
7358	MutateTransaction adds an InflationBuilder to the InflationBuilder .
7359	MutateTransaction is part of the ManageDataBuilder interface .
7360	MutateTransaction is part of the ManageOfferBuilder interface .
7361	MutateTransaction creates a new memo .
7362	MutateTransaction creates a new Memo .
7363	MutateTransaction creates a new Memo .
7364	MutateTransaction modifies the MemoText
7365	MutateTransaction is defined on the NetworkBuilder interface .
7366	MutateTransaction adds a transaction to the transaction builder .
7367	MutateTransaction is defined on the OptionsBuilder interface .
7368	MutateTransaction modifies the TransactionBuilder .
7369	MutateTransaction adds a new transaction to the database .
7370	Scan implements the sql . Scanner interface .
7371	InitialState returns the LedgerEntry for the given key .
7372	Changes returns the LedgerEntryChange for the given target .
7373	StateAfter returns the LedgerEntry for the given key .
7374	changes returns the LedgerEntryChange for the given target .
7375	MustDecode decodes a versionByte into a byte slice .
7376	Encode encodes src into base32 .
7377	MustEncode encodes src into a string .
7378	checkValidVersionByte returns an error if the versionByte is not valid .
7379	Checksum returns the checksum of data .
7380	Validate checks the checksum of the checksum
7381	LedgerKey returns the LedgerKey for the given change
7382	checkPlausible checks if a base32 alphabet is in base32 alphabet .
7383	Address returns the ID of the AccountId .
7384	Equals returns true if this AccountId equals another AccountId .
7385	SetAddress sets the given address .
7386	ToXdrObject converts an asset to a xdr asset .
7387	Through adds an asset to the path
7388	PayWith creates a PayWithPath with the given asset .
7389	continuedFraction takes a price and returns a price and an error if it occurs .
7390	Mutate implements the MutableTransactionEnvelopeBuilder interface .
7391	MutateTX implements the Mutator interface .
7392	Bytes returns the bytes of the transaction envelope .
7393	Base64 returns the base64 encoded bytes
7394	MutateTransactionEnvelope modifies the TransactionEnvelope
7395	MutateSetOptions is defined on the Value interface .
7396	MutateSetOptions updates an existing InflationDest .
7397	MutateSetOptions sets the value of xdr . SetOptionsOp .
7398	MutateSetOptions updates the set options for the signer
7399	SetThresholds sets the threshold values for a given range
7400	MutateSetOptions mutates xdr . SetOptionsOp .
7401	MutateSetOptions implements the SetFlag interface for SetFlagOp .
7402	MutateSetOptions implements the SetFlag interface for SetFlagOp .
7403	MutateCreateAccount sets the CreateAccount op for CreateAccountOp .
7404	MutateCreateAccount modifies the minimum amount of created funds .
7405	Random random seed
7406	Master is a helper function to create a KS with the given password .
7407	Parse parses a KBFS - encoded data from the given address .
7408	MustParse is like Parse but panics on error .
7409	MutateAllowTrust modifies the authorize operation
7410	MutateAllowTrust modifies the AllowTrustOp asset
7411	MutateAllowTrust is used to mutate an AllowTrustOp
7412	ToAsset converts the AllowTrustOpAsset to an Asset
7413	SetNative sets the Asset type Asset type .
7414	String returns a string representation of an asset .
7415	Equals tests equality against another asset
7416	MustExtract is like Extract but panics if an error occurs .
7417	Unmarshal deserializes an xdr stream from r .
7418	Marshal writes v to w .
7419	ValidEnum returns true if the crypto key type is valid .
7420	NewPublicKey returns a new instance of PublicKey
7421	MustEd25519 returns the Ed25519 value as uint256 .
7422	NewNodeId creates a new node id
7423	NewAccountId creates an AccountId from a crypto key type
7424	ValidEnum returns true if the asset type is valid .
7425	ArmForSwitch returns the asset type for the asset
7426	NewAsset creates a new asset from an asset type
7427	MustAlphaNum4 returns the asset alpha num4 or panics .
7428	GetAlphaNum4 returns the value of an asset .
7429	MustAlphaNum12 returns the asset alphaNum12 if set .
7430	GetAlphaNum12 returns the asset s alphaNum12 value .
7431	ValidEnum returns true if the threshold indexes are valid .
7432	ValidEnum returns true if the LedgerEntryType is valid .
7433	ValidEnum returns true if the account flags are valid .
7434	NewAccountEntryExt - creates new AccountEntryExt .
7435	ValidEnum returns true if the trust line flags are valid .
7436	NewTrustLineEntryExt - creates new trust line entry extension .
7437	ValidEnum returns true if the offer entry flags are valid .
7438	NewOfferEntryExt - creates new offer entry extension .
7439	NewDataEntryExt - creates new data entry extension .
7440	NewLedgerEntryData creates a new LedgerEntryData
7441	NewLedgerEntryExt - returns new LedgerEntryExt .
7442	ValidEnum returns true if the envelope type is valid .
7443	ValidEnum returns true if the operation type is valid .
7444	ArmForSwitch returns whether or not the trust op asset is valid for the specified asset
7445	NewAllowTrustOpAsset creates a new AllowTrustOpAsset instance
7446	MustAssetCode4 - MustAssetCode4 if AllowTrustOpAsset is not set .
7447	GetAssetCode4 gets the asset code4
7448	MustAssetCode12 returns the asset code12 if it is present .
7449	GetAssetCode12 returns the asset code12
7450	NewOperationBody creates a new operation body .
7451	MustCreateAccountOp returns the operation s CreateAccountOp if set .
7452	GetCreateAccountOp returns the create account operation operation .
7453	MustPaymentOp returns the PaymentOp or panics .
7454	GetPaymentOp returns the payment operation s value .
7455	MustPathPaymentOp returns the PathPaymentOp or panics .
7456	GetPathPaymentOp returns the PathPaymentOp if it exists .
7457	MustManageOfferOp returns the operation s ManageOfferOp or panics .
7458	GetManageOfferOp returns the operation s ManageOfferOp .
7459	MustCreatePassiveOfferOp returns the createPassiveOfferOp or panics if the operation is not set .
7460	GetCreatePassiveOfferOp returns the createPassiveOfferOp if it exists .
7461	MustSetOptionsOp returns the value of SetOptionsOp if set .
7462	GetSetOptionsOp returns the set options operation .
7463	MustChangeTrustOp returns the ChangeTrustOp or panics if an error occurs .
7464	GetChangeTrustOp returns the ChangeTrustOp for the operation .
7465	MustAllowTrustOp returns the AllowTrustOp field if it is set .
7466	GetAllowTrustOp gets the AllowTrustOp if it is present .
7467	MustDestination returns the AccountId or panics .
7468	GetDestination gets the Destination interface .
7469	MustManageDataOp returns the ManageDataOp or panics .
7470	GetManageDataOp returns the ManageDataOp for this operation .
7471	ValidEnum returns true if the MemoType is valid .
7472	ArmForSwitch returns the arm for the given switch .
7473	NewMemo creates a new Memo instance .
7474	MustText returns message as string .
7475	Returns the text .
7476	MustId returns Uint64 or panics .
7477	GetId returns the ID of the Memo .
7478	MustHash returns Hash or panics .
7479	Returns the hash of the Memo .
7480	MustRetHash returns Hash or panics .
7481	NewTransactionExt - creates new transaction extension .
7482	ValidEnum returns true if the CreateAccountResultCode is valid .
7483	ArmForSwitch returns the arm for the specified switch
7484	NewCreateAccountResult returns a new CreateAccountResult instance
7485	ValidEnum returns true if the payment result code is valid .
7486	ArmForSwitch implements PaymentResult .
7487	NewPaymentResult creates a new PaymentResult
7488	ValidEnum returns true if the PathPaymentResultCode is valid .
7489	ArmForSwitch implements PathPaymentResult .
7490	NewPathPaymentResult creates a new PathPaymentResult
7491	MustNoIssuer returns the Asset value or panics if not .
7492	GetNoIssuer returns the NoIssuer value .
7493	ValidEnum returns true if the ManageOfferResultCode is valid .
7494	ValidEnum implements ManageOfferEffect .
7495	ArmForSwitch implements ManageOffer .
7496	NewManageOfferSuccessResultOffer creates a new ManageOfferEffect
7497	ArmForSwitch returns the arm for the specified switch .
7498	NewManageOfferResult creates a new ManageOfferResult instance
7499	ValidEnum returns true if the SetOptionsResultCode is valid .
7500	ArmForSwitch implements Switch interface .
7501	NewSetOptionsResult - create new SetOptionsResult
7502	ValidEnum implements ChangeTrustResultCode .
7503	ArmForSwitch implements ChangeTrustResult .
7504	NewChangeTrustResult converts ChangeTrustResult to ChangeTrustResult
7505	ValidEnum returns true if the allowed trust result code is valid
7506	ArmForSwitch returns whether or not the AllowTrustResult code is valid .
7507	NewAllowTrustResult creates a new AllowTrustResult
7508	ValidEnum returns true if the account merge result code is valid .
7509	ArmForSwitch implements AccountMergeResult .
7510	NewAccountMergeResult creates a new AccountMergeResult instance
7511	MustSourceAccountBalance returns the value of SourceAccountBalance or panics .
7512	GetSourceAccountBalance returns the balance of the account merge
7513	ValidEnum returns true if the InflationResultCode is valid .
7514	ArmForSwitch returns the payload of an inflation result .
7515	NewInflationResult creates a new InflationResult
7516	MustPayouts returns an array of PaymentPayouts or panics .
7517	GetPayouts gets the Payouts value .
7518	ValidEnum returns true if the ManageDataResultCode is valid .
7519	ArmForSwitch returns the arm for the specified switch .
7520	NewManageDataResult creates a new ManageDataResult instance
7521	ValidEnum returns true if the operation result code is valid .
7522	ArmForSwitch returns the arm for switch operation
7523	NewOperationResultTr creates a new OperationResultTr
7524	MustCreateAccountResult is like CreateAccountResult but panics if an error occurs .
7525	GetCreateAccountResult returns CreateAccountResult
7526	MustPaymentResult returns the PaymentResult or panics .
7527	GetPaymentResult returns the payment result .
7528	MustPathPaymentResult returns PathPaymentResult or panics .
7529	GetPathPaymentResult returns the PathPaymentResult
7530	MustManageOfferResult returns ManageOfferResult if set otherwise panics .
7531	GetManageOfferResult returns ManageOfferResult .
7532	MustCreatePassiveOfferResult is like CreatePassiveOfferResult but panics if the operation result is not set .
7533	MustSetOptionsResult is like SetOptionsResult but panics on error .
7534	GetSetOptionsResult returns SetOptionsResult .
7535	MustChangeTrustResult returns ChangeTrustResult or panics .
7536	GetChangeTrustResult returns ChangeTrustResult
7537	MustAllowTrustResult returns the AllowTrustResult result
7538	GetAllowTrustResult returns the AllowTrustResult
7539	MustAccountMergeResult get AccountMergeResult from OperationResult
7540	GetAccountMergeResult gets the AccountMergeResult .
7541	MustInflationResult returns the inflation result
7542	GetInflationResult returns the inflation result .
7543	MustManageDataResult returns ManageDataResult or panics .
7544	GetManageDataResult returns ManageDataResult .
7545	ArmForSwitch is part of the OperationResult interface .
7546	NewOperationResult creates a new OperationResult
7547	MustTr returns the value of OperationResult .
7548	GetTr returns the current operation result .
7549	ValidEnum returns true if the transaction result code is valid .
7550	ArmForSwitch is part of the TransactionResultResult interface .
7551	NewTransactionResultResult returns a new TransactionResultResult
7552	MustResults returns the operation results or panics .
7553	GetResults returns operation results .
7554	NewTransactionResultExt - creates new TransactionResultExt .
7555	NewStellarValueExt - creates a new StellarValueExt instance .
7556	NewLedgerHeaderExt - returns new LedgerHeaderExt .
7557	ValidEnum returns true if the LedgerUpgradeType is valid .
7558	ArmForSwitch returns whether or not the LedgerUpgrade interface for the Ledger Upgrade
7559	NewLedgerUpgrade returns a LedgerUpgradeType value
7560	MustNewLedgerVersion is like NewLedgerVersion but panics if an error occurs .
7561	GetNewLedgerVersion returns the latest LedgerVersion .
7562	MustNewBaseFee is like NewBaseFee but panics if an error occurs .
7563	GetNewBaseFee returns the new Base fee
7564	MustNewMaxTxSetSize is like NewMaxTxSetSize but panics if not .
7565	GetNewMaxTxSetSize gets the MaxTxSetSize of the Ledger Upgrade
7566	ArmForSwitch returns the prefix for the LedgerKey
7567	NewLedgerKey creates a new LedgerKey
7568	ValidEnum returns true if the entry type is valid .
7569	ArmForSwitch returns the name of the entry for the given switch .
7570	NewBucketEntry creates a new bucket entry with the given type and value .
7571	MustLiveEntry returns the LedgerEntry or panics .
7572	GetLiveEntry returns the LedgerEntry for the bucket .
7573	MustDeadEntry returns the LedgerKey or panics .
7574	GetDeadEntry returns the LedgerKey for the bucket entry .
7575	NewTransactionHistoryEntryExt - creates new TransactionHistoryEntryExt .
7576	ArmForSwitch implements the Task interface .
7577	NewTransactionHistoryResultEntryExt - creates new TransactionHistoryResultEntryExt .
7578	NewLedgerHeaderHistoryEntryExt returns a new LedgerHeaderHistoryEntryExt instance
7579	NewScpHistoryEntry creates a new ScpHistoryEntry .
7580	ValidEnum returns true if the LedgerEntryChangeType is valid
7581	ArmForSwitch returns whether or not the LedgerEntryChange interface for the LedgerEntryChange
7582	NewLedgerEntryChange creates a new LedgerEntryChange
7583	MustCreated returns the LedgerEntryChange or panics if not .
7584	GetCreated returns the LedgerEntryChange
7585	MustUpdated returns the LedgerEntryChange or panics if not .
7586	Retrieve LedgerEntryChange
7587	MustRemoved returns the LedgerEntryChange or panics .
7588	GetRemoved returns the LedgerEntryChange for the LedgerEntryChange
7589	MustState returns the LedgerEntryChange or panics .
7590	GetState returns the LedgerEntryChange
7591	NewTransactionMeta - creates new TransactionMeta .
7592	MustOperations returns the operation meta .
7593	GetOperations returns the operations for this transaction .
7594	ValidEnum implements the ErrorCode interface .
7595	ValidEnum returns true if the IpAddrType is valid .
7596	ArmForSwitch returns whether or not a peer address is associated with this address
7597	NewPeerAddressIp creates an instance of PeerAddressIp
7598	MustIpv4 returns the IPv4 address of the peer
7599	GetIpv4 returns the IPv4 address
7600	MustIpv6 returns the value of a PeerAddressIp6 if not set .
7601	GetIpv6 returns the IPv6 address
7602	ValidEnum returns true if the Enum is valid .
7603	ArmForSwitch returns the arm for a message type .
7604	NewStellarMessage creates a new StellarMessage instance
7605	MustError returns the error or panics .
7606	GetError gets the error from StellarMessage
7607	MustHello returns the StellarMessage value or panics if not set .
7608	Returns the Hello message .
7609	MustAuth returns the Auth if set .
7610	GetAuth returns the Auth
7611	MustDontHave returns the value of StellarMessage if not set .
7612	GetDontHave returns the value of StellarMessage
7613	MustPeers will panic if StellarMessage is not set .
7614	Returns all peers
7615	MustTxSetHash returns the Hash value as uint256 .
7616	GetTxSetHash returns the Hash of the message
7617	MustTxSet returns the transaction set or panics if not set .
7618	Retrieve TransactionSet
7619	MustTransaction returns the transaction envelope or panics if not .
7620	GetTransaction returns the transaction envelope
7621	MustQSetHash returns Uint256 as uint256 .
7622	GetQSetHash returns the QSetHash
7623	MustQSet returns the ScpQuorumSet if set otherwise panics .
7624	GetQSet returns the QSet
7625	MustEnvelope returns the envelope value or panics if not set .
7626	Get envelope type
7627	GetScpLedgerSeq is like GetScpLedgerSeq but panics if the message is not set .
7628	GetGetScpLedgerSeq returns the message for the message
7629	ArmForSwitch implements AuthenticatedMessage .
7630	NewAuthenticatedMessage creates a new AuthenticatedMessage instance
7631	ValidEnum returns true if the ScpStatementType is valid .
7632	ArmForSwitch implements Command .
7633	NewScpStatementPledges creates a new ScpStatementPledges
7634	MustPrepare returns the ScpStatementPrepare if required .
7635	GetPrepare gets the Prepare field of the ScpStatementPledges .
7636	MustConfirm returns the ScpStatementConfirm if set .
7637	GetConfirm gets the confirm message .
7638	MustExternalize returns the ScpStatementExternalize if not set .
7639	GetExternalize implements the ScpStatement interface .
7640	MustNominate implements Assertion .
7641	GetNominate gets the Nominate field of the ScpStatement
7642	SafeUnmarshalBase64 decodes data from dest into dest
7643	SafeUnmarshal decodes data into dest .
7644	SendAmount returns the amount of the payment result .
7645	LoadAccount loads an account .
7646	SequenceForAccount returns the sequence number for an account .
7647	SubmitTransaction submits a transaction envelope .
7648	Equals tests equality against another LedgerKey
7649	SetAccount sets the LedgerKey for an account .
7650	SetData stores the value of a LedgerKey .
7651	SetOffer sets an offer for an account .
7652	SetTrustline sets the trustline for an account
7653	Add adds a new value to the database
7654	tryHash tries to find a hash for the given key .
7655	HashIndexFromKey returns the hash index corresponding to the given key .
7656	ReadInt reads an integer from the slice .
7657	Read reads from r .
7658	Get returns the value for the given key .
7659	Iterate returns an Iterator .
7660	Write writes the CHD to the given io . Writer .
7661	RegisterDatasources registers datasources
7662	RegisterFonts registers fonts
7663	New creates a new Map .
7664	NewSized creates a new Map .
7665	Load loads a map from a given stylesheet .
7666	Resize resizes the map .
7667	Free frees the map .
7668	RS returns the SRS of the map
7669	ZoomAll implements the ZoomAll interface .
7670	ZoomTo adds the zoom to the map .
7671	Render renders the Map
7672	RenderImage renders the Map .
7673	RenderToFile renders the Map to a file .
7674	SetBufferSize sets the size of the map .
7675	Search returns a list of search responses
7676	Get returns a connection from the pool or ErrTimeout if the pool is unset .
7677	put a connection to the pool
7678	MonoToStereoF32 converts a buffer to a mono buffer .
7679	BitCrush calculates the crusher step .
7680	NormalizeMax normalizes the audio buffer .
7681	G Gain adds a buffer to the buffer
7682	MonoDownmix is the same as MonoDownmix .
7683	Quantize quantizes the audio buffer into a bit buffer .
7684	PCMScale calculates the PCM scale of the buffer .
7685	StereoPan is like StereoPan but panics if the buffer is not valid .
7686	Leader returns the current leader .
7687	IsLeader returns true if the candidate is leader .
7688	NewResponse returns a new Response object .
7689	GetRequestID extracts the request ID from the context .
7690	Log implements the MonitorableWriter interface .
7691	SendMailSSL sends a message to the given address .
7692	Send a message
7693	WaitForIt waits until the given timeout is reached .
7694	Get is used to unmarshal a config file
7695	initConfig initializes the config file
7696	WritePluginResultsToDatabase writes the results to the database .
7697	NewAuthController returns a new AuthController instance
7698	Authenticate sends a request to authenticated user
7699	NewOAuth2Controller creates a new OAuth2Controller .
7700	Refresh refresh token
7701	Token handles a request and returns a token
7702	Logging logs a logrus logger
7703	SingleFile adds a single file to a single file
7704	Write implements the http . ResponseWriter interface .
7705	Hijack implements http . Hijacker interface .
7706	NewMongo creates a new MongoDB client
7707	Disconnect disconnects the Mongo .
7708	New returns a new Table .
7709	PrintTable print table
7710	PrintHorizontal prints a horizontal map
7711	PrintRow prints a row of fields .
7712	AddRow adds a new row to the table .
7713	Print prints the table .
7714	String returns a string representation of a table .
7715	getHead returns the field name .
7716	rowString returns a string representation of a row .
7717	fieldString returns a string representation of a field .
7718	stringTableDash returns the dash of the table .
7719	Bash - completion dash .
7720	stringMarkdownDash returns the markdown dash .
7721	HashPassword encrypts password with salt and salt .
7722	EncodeOAuth2Code encodes an OAuth2 code .
7723	DecodeOAuth2Code decodes the JWS response body and returns the response .
7724	NewServer creates a new server
7725	Start starts the server
7726	Stop stops the server .
7727	NewLoggingServeMux returns a new LoggingServeMux .
7728	Handler adds a Handler to the request .
7729	Handle registers the handler for the given pattern .
7730	HandleFunc registers the handler function for the given pattern .
7731	Init initializes the database
7732	WaitForConnection waits for elasticsearch to complete .
7733	StoreFileInfo is part of the Database interface .
7734	StorePluginResults stores plugin results
7735	CamelCase converts src to CamelCase .
7736	Getopt returns the value of an environment variable
7737	Getopts returns the input as a string
7738	GetSHA256 returns the SHA256 of the given file .
7739	RunCommand runs the command with the given context .
7740	RemoveDuplicates removes duplicate elements .
7741	Unzip unzips the archive from a tar archive
7742	SliceContainsString returns true if a contains a .
7743	NewSMTP creates a new SMTP client
7744	SendMail sends a mail message .
7745	GetEnvironment returns the value for the specified environment
7746	GetSMTP returns the SMTP configuration .
7747	GetConfig returns a server s configuration .
7748	GetEnvironment returns the environment for the given environment
7749	GetMongo returns the mongo configuration .
7750	TokenHandler returns an http . Handler that handles token requests .
7751	Receive receives a single message from the CCS .
7752	Send sends a message to the client .
7753	allBoshReleaseNames returns a list of BoshRelease names .
7754	AddedProperty is defined on the DeltaJobManifestProperty interface .
7755	RemovedProperty is defined on the JobManifestProperty interface .
7756	AddDeltaJob adds a new delta job to the result .
7757	Concat concatenates two results .
7758	Read returns a ReadCloser reading from the release location
7759	Pull downloads a release
7760	BuildJob creates a job from dest .
7761	LoadBoshRelease loads a BoshRelease from disk .
7762	readBoshRelease reads a BoshRelease from rr .
7763	readBoshRelease reads a BoshRelease from rr .
7764	readBoshJob reads a BoshRelease object .
7765	NewRequest creates a new http . Request
7766	PushCloudConfig push a cloud config to BOSH
7767	Generate creates a packager manifest
7768	CreateNewRecord creates a new record
7769	NewShowCmd returns a new instance which can be used to issue a show JSON - RPC command .
7770	All prints all releases .
7771	GetDefaultTaskImageResource returns the default image resource
7772	AddRawJob adds a job to the pipeline
7773	AddGroup adds a new group
7774	GetResourceByName returns the resource with the given name
7775	AddRawResource adds a raw resource to the pipeline
7776	AddResource adds a resource to ConcoursePipeline
7777	AddGithubResource adds a new Github resource
7778	AddBoshIOResource adds a BoshIOResource
7779	AddBoshDeploymentResource adds a BoshDeployment resource
7780	AddGitResource adds a resource to the pipeline
7781	allJobNames returns a list of all job names .
7782	NewDeploymentManifestFromFile returns a DeploymentManifest from a file
7783	NewDeploymentManifest returns a DeploymentManifest instance
7784	AddRemoteRelease adds a new release to the manifest
7785	AddRemoteStemcell adds a remote stemcell to the manifest
7786	Tag returns the tag for the specified key .
7787	RemoveTag removes a tag from the manifest
7788	LoadPivnetRelease loads a release from the repo
7789	BoshReleaseOrEmpty returns the BoshRelease or empty if it is empty .
7790	readPivnetRelease reads a BoshRelease
7791	decodeYaml decodes the YAML data into v .
7792	NewZipWalker returns a new Walker .
7793	NewDiffCmd returns a new instance which can be used to issue a diff JSON - RPC command .
7794	All implements the Writer interface for DiffCmd .
7795	Job implements the job interface .
7796	New returns a difference between two repositories .
7797	StructName returns the name of the struct .
7798	TypeName returns the type name of the record .
7799	NewTgzWalker returns a new Walker .
7800	NewBackoff returns a new instance of Backoff .
7801	Reset resets the backoff counter .
7802	NewExponential creates a new Backoff with exponential backoff .
7803	NewExponentialFullJitter creates a Backoff with exponential backoff
7804	NewLinear creates a new Backoff with the given duration .
7805	GetLineSize returns the size of the line in the given floor .
7806	GetMaxSize returns the maximum size
7807	compute computes the spin buffer
7808	WithTimeout adds the timeout to the post apps params
7809	WithContext adds the context to the post apps params
7810	WithHTTPClient adds the HTTPClient to the post apps params
7811	WithBody adds the body to the post apps params
7812	WithTimeout adds the timeout to the get apps app params
7813	WithContext adds the context to the get apps app params
7814	WithHTTPClient adds the HTTPClient to the get apps app params
7815	WithApp adds the app to the get apps app params
7816	UnmarshalBinary unmarshals a raw byte slice into a RouteWrapper .
7817	WithTimeout adds the timeout to the get apps params
7818	WithContext adds the context to the get apps params
7819	WithHTTPClient adds the HTTPClient to the get apps params
7820	WithTimeout adds the timeout to the delete apps app params
7821	WithContext adds the context to the delete apps app params
7822	WithHTTPClient adds the HTTPClient to the delete apps app params
7823	WithApp adds the app to the delete apps app params
7824	WithTimeout adds the timeout to the patch apps app routes params
7825	WithContext adds the context to the patch apps app routes params
7826	WithHTTPClient adds the HTTPClient to the patch apps app routes params
7827	WithApp adds the app to the patch apps app routes params
7828	WithBody adds the body to the patch apps app routes params
7829	WithRoute adds the route to the patch apps app routes params
7830	WithTimeout adds the timeout to the post apps app routes params
7831	WithContext adds the context to the post apps app routes params
7832	WithHTTPClient adds the HTTPClient to the post apps app routes params
7833	WithApp adds the app to the post apps app routes params
7834	WithBody adds the body to the post apps app routes params
7835	WithTimeout adds the timeout to the put apps app routes params
7836	WithContext adds the context to the put apps app routes params
7837	WithApp adds the app to the put apps app routes params
7838	WithBody adds the body to the put apps app routes params
7839	WithRoute adds the route to the put apps app routes params
7840	WithTimeout adds the timeout to the get apps app routes params
7841	WithContext adds the context to the get apps app routes params
7842	WithHTTPClient adds the HTTPClient to the get apps app routes params
7843	WithApp adds the app to the get apps app routes params
7844	WithTimeout adds the timeout to the patch apps app params
7845	WithContext adds the context to the patch apps app params
7846	WithHTTPClient adds the HTTPClient to the patch apps app params
7847	WithApp adds the app to the patch apps app params
7848	WithBody adds the body to the patch apps app params
7849	WithTimeout adds the timeout to the put apps app params
7850	WithContext adds the context to the put apps app params
7851	WithApp adds the app to the put apps app params
7852	WithBody adds the body to the put apps app params
7853	UnmarshalJSON deserializes into a Task instance
7854	MarshalJSON returns the JSON encoding of the Task .
7855	Validate validates this task
7856	GetRanges returns a slice of IPv4 CIDR ranges
7857	WithTimeout adds the timeout to the get apps app routes params
7858	WithContext adds the context to the get apps app routes params
7859	WithHTTPClient adds the HTTPClient to the get apps app routes params
7860	WithApp adds the app to the get apps app routes params
7861	WithRoute adds the route to the get apps app routes params
7862	New returns a new Functions instance
7863	SetTransport sets the HTTP transport .
7864	WithTimeout adds the timeout to the delete apps app routes params
7865	WithContext adds the context to the delete apps app routes params
7866	WithHTTPClient adds the HTTPClient to the delete apps app routes params
7867	WithApp adds the app to the delete apps app routes params
7868	WithRoute adds the route to the delete apps app routes params
7869	WithTimeout adds the timeout to the get tasks params
7870	WithContext adds the context to the get tasks params
7871	WithHTTPClient adds the HTTPClient to the get tasks params
7872	NewValueStore returns a new instance of ValueStore .
7873	Close closes the store .
7874	SetBackend sets the OortService
7875	Ring returns the ring ring
7876	GetLocalID returns the local ID
7877	GetListenAddr returns the listen address
7878	Startup initializes the ReplGroupStore
7879	shutdownFinished closes the server .
7880	Stop stops the server .
7881	Exit stops the server .
7882	SelfUpgrade is used to upgrade the binary
7883	SoftwareVersion returns the current software version .
7884	Shutdown implements GroupStore .
7885	Rant get Rant model
7886	Profile returns information about a user .
7887	Search searches for a given term .
7888	Serve returns a Rant model
7889	WeekLYRants returns a list of WEEKLY_PATH
7890	Get user id
7891	Shutdown implements ReplValueStore .
7892	FExists checks if a given file exists
7893	outbound is part of the MessageStream interface .
7894	Parse the message stream
7895	Group creates a new Group with the given parameters .
7896	Groups returns all the groups in the Domain .
7897	GetGroup retrieves a group by name .
7898	Reticence returns the last occurrence of a given string .
7899	CheckPassword checks if a password is valid
7900	CleanUrl - Clean url .
7901	NewParameter creates a new Parameter
7902	MakeParams creates a new set of parameters .
7903	Parse parses the given value into a Params object .
7904	Email returns the email address
7905	Forwarder creates a new forwarder for a domain .
7906	Forwarders returns the forwarders of the Domain .
7907	GetForwarder returns a forwarder for a domain name .
7908	New returns a new CGP instance
7909	EscapeCommaSeparated returns a comma separated comma separated string .
7910	Alias returns an alias for an account .
7911	Email returns the email address
7912	Aliases returns a list of alias .
7913	RealName returns the real name .
7914	Email returns the email address
7915	Account creates an account with given name .
7916	Accounts returns all accounts in the Domain .
7917	Exists checks if the Domain exists .
7918	Aliases returns the aliases for the domain .
7919	Domain creates a new Domain .
7920	Domains returns a list of domains
7921	New returns a new Err instance
7922	Wrap wraps an error and returns a new Err .
7923	mergeIn merges the contents of this error into this error .
7924	wrapErrStr returns the wrapped error if any .
7925	concatArgs concatenates two arguments .
7926	MailingList creates a new email list .
7927	Subscriber creates a new Subscriber .
7928	Subscribers returns a list of subscribers .
7929	MailingLists returns a list of email addresses .
7930	NewByteKeyItem returns a pointer to a new byte key item .
7931	CompareBytes compares two bytes .
7932	CompareInt compares two pointers
7933	Alloc returns a pointer to a pointer to an unsafe . Pointer
7934	Free frees the pointer
7935	Stats returns a string representation of the mm_stats
7936	FreeOSMemory free OS memory
7937	Add adds an item to the Segment .
7938	NewSegment returns a new Segment .
7939	Assemble builds a Skiplist from a set of segments .
7940	CompareNodeTable compares two pointers .
7941	New creates a new node table .
7942	Stats returns a human readable summary of the table .
7943	MemoryInUse returns the memory in use of the node .
7944	Get returns the pointer for the given key .
7945	Update implements the Table interface .
7946	Remove removes the given key from the table .
7947	Close closes the node table .
7948	MemoryInUse estimates the number of nodes in the database .
7949	debugMarkFree marks the node as free .
7950	Seek moves bs to bs .
7951	Next advances the iterator .
7952	Refresh refreshes the iterator .
7953	Close closes the iterator .
7954	NewIterator returns an Iterator .
7955	SeekFirst moves the iterator to the first element in the list .
7956	Next implements heap . Interface .
7957	Seek moves the iterator to the first element in the iterator .
7958	Keys returns the keys of the list .
7959	Remove removes a node from the list .
7960	Add adds a new node to the list .
7961	NewWithConfig returns a new skiplist instance .
7962	FreeNode is used to free a node
7963	MakeBuf returns an initialized ActionBuffer .
7964	Size returns the size of the slice .
7965	NewLevel returns a new level with the given randFn .
7966	Insert injects the Skiplist interface .
7967	Insert2 inserts a new node .
7968	Insert3 inserts a new node into the Skiplist .
7969	Delete removes a node from the map .
7970	DeleteNode is used to delete a node
7971	GetRangeSplitItems returns the set of items in the skiplist .
7972	Bytes returns the contents of the item .
7973	ItemSize returns the size of the item .
7974	KVFromBytes converts a byte slice to a KV value .
7975	CompareKV compares two KV values .
7976	Emit sends an event to the event controller .
7977	UnregisterHandler removes a handler from the event controller .
7978	IsHandlerRegistered returns true if the given handler is registered with the given name .
7979	CompareNitro compares two pointers .
7980	DefaultConfig returns the default configuration .
7981	Delete deletes bs .
7982	GetNode returns a skiplist node .
7983	SetKeyComparator sets the given key compare .
7984	UseMemoryMgmt configures the MemoryMgmt interface .
7985	NewWithConfig creates a new Nitro .
7986	MemoryInUse returns the memory in use
7987	Close closes the node
7988	NewWriter creates a new writer
7989	SnapshotSize returns the size of the snapshot .
7990	Encode encodes the snapshot into w .
7991	Decode decodes the snapshot from r .
7992	Open returns true if the snapshot is open .
7993	CompareSnapshot returns an integer indicating whether this snapshot is equal to or not .
7994	Garbage collect garbage collection
7995	GetSnapshots returns a list of all snapshots
7996	MemoryInUse estimates the memory in use .
7997	CompareBS compares two interfaces .
7998	Acquire acquires the barrier .
7999	Release releases the barrier .
8000	FlushSession flushes the current session .
8001	Apply applies the stats to the report .
8002	AddInt64 adds an int64 to the set .
8003	AddUint64 adds a uint64 to the set .
8004	Merge merges statistics into s .
8005	GetStats returns StatsReport
8006	NewIterator returns a new Iterator .
8007	SeekFirst moves the cursor to the first element .
8008	SeekWithCmp moves the iterator to the current position .
8009	Seek moves iterator to the iterator .
8010	Valid implements Iterator .
8011	Delete deletes the iterator .
8012	Next advances the iterator .
8013	Init initializes the skurekeeper
8014	FromURL returns a copy of the given URL
8015	ToURL converts a folder to a URL
8016	Size returns the size of the header .
8017	WriteTo implements io . WriterTo interface .
8018	Static returns a Handler that serves static files
8019	Read populates the Config .
8020	Del deletes a section from the config .
8021	WriteTo writes the configuration to the given filename .
8022	checkSection checks if a line is valid .
8023	checkLine checks if a line is valid
8024	checkComment checks if a line is a comment
8025	NewResponseWrapper returns a new ResponseWrapper
8026	Hijack implements the http . ResponseWriter interface .
8027	CloseNotify implements the http . ResponseWrapper interface .
8028	DateFormat specifies the date format .
8029	Logger returns an http . HandlerFunc
8030	GetAvailableInventory returns a map of inventory to inventory
8031	Expiration sets the token expiration time .
8032	Claimer is an option that sets the claimer used to claim claims .
8033	Issuer specifies the issuer
8034	User specifies the user name .
8035	Password sets the password
8036	Extractor is an alias for Extractor .
8037	TokenGenerator creates a new token generator
8038	Token extracts the token from the request context
8039	Claims extracts the claims from the request context .
8040	String returns a string representation of the Token .
8041	NewLexer creates a new Lexer .
8042	run runs the Lexer .
8043	emit emits a token .
8044	skipWhitespace skips whitespace
8045	next returns the next rune .
8046	LineNum returns the number of lines in the input .
8047	Offset returns the offset of the current line .
8048	errorf is a helper function that consumes a token .
8049	lexText consumes a text .
8050	lexComment scans a comment .
8051	New creates a TupleType from a namespace .
8052	AddVersion adds a version to the tuple .
8053	Contains returns true if the given field contains the given field .
8054	Offset returns the offset of the field .
8055	Versions returns the versions of the TupleType .
8056	SetPrivateMeta is part of the Task interface .
8057	SetPublicMeta sets meta data for a task
8058	GetRedactedVersion returns the context of the task .
8059	Equal returns true if two tasks are equal .
8060	HTTP returns a http . Handler that adds verb to the request .
8061	PutUint8 stores a uint8 value .
8062	PutInt8 stores an int8 value .
8063	PutUint16 stores a uint16 value .
8064	PutInt16 stores an int16 value .
8065	PutUint32 stores a uint32 value .
8066	PutInt32 stores an int32 value .
8067	PutUint64 stores a uint64 value .
8068	PutInt64 stores an int64 value .
8069	NewPackageList returns a new PackageList .
8070	PutFloat32 stores a float32 value .
8071	Classic returns a classic Martini .
8072	Languages is an Option to set the language tags .
8073	Session is an Option to set the session
8074	Data returns the context value for the request
8075	URL converts a URL into a string .
8076	Size returns the size of the process .
8077	GetRequestIDFromTaskResponse returns request ID from task response
8078	PutString stores a string value .
8079	LoadDirectory loads a directory
8080	LoadFile loads a Package from a filename
8081	LoadPackage loads a package from the parser .
8082	NewDecoder returns a Decoder that decodes data from r .
8083	NewDecoderSize returns a decoder that reads from r .
8084	Panic returns a http . Handler that logs panics on error .
8085	DeployVApp is part of the vcloudclient interface .
8086	UnDeployVApp is part of the VCloudClient interface .
8087	Auth is the interface implementation
8088	QueryTemplate is part of the vCloudClient interface .
8089	NewEncoder returns a new Encoder .
8090	Getter is an Option to set the nonceter .
8091	Setter is an Option to set a nonceter .
8092	Age is an Option to set the number of times .
8093	Nonce returns an http . Handler that handles nonce requests .
8094	NonceValueFromRequest extracts the nonce status from the request context .
8095	StoreNonce stores a nonce .
8096	PutFloat32Array stores a float32 value .
8097	PutFloat64Array stores a float64 array value .
8098	Do implements http . Doer
8099	NewLease creates a new lease
8100	Delete is used to delete an inventory
8101	Post a lease
8102	ReStock is used to re - replace the task manager
8103	Procurement is part of the leasemanager interface .
8104	InitFromHTTPRequest initializes the lease .
8105	Is checks if a tuple is valid
8106	Offset returns the offset for the given field .
8107	WriteTo writes tuple to w .
8108	PutTuple encodes a Tuple .
8109	WriteString writes a string
8110	NotFound is not found
8111	Run runs the agent .
8112	NewWaitGroup creates a WaitGroup .
8113	Add implements the WaitGroup interface .
8114	Wait blocks until the task is completed .
8115	Gzip returns a http . Handler that sets the Accept - Encoding header .
8116	New returns a new InnkeeperClient .
8117	Error writes a JSON - formatted error message .
8118	Rendererer returns a handler that renders the given RenderOptions .
8119	NewClient creates a new PDClient
8120	GetTask is part of the PDClient interface .
8121	WriteImageToHTTP writes image to w .
