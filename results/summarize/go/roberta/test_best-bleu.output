0	NewSTM creates a new StmResponse .
1	first returns the first entry in the set .
2	cmps returns a copy of the set .
3	NewSTMRepeatable creates a new STM transaction .
4	NewSTMSerializable creates a new STM instance .
5	NewSTMReadCommitted creates a read - only read transaction .
6	NewCertPool creates a new CertPool
7	NewCert returns a tls . Certificate
8	Pause pauses the peer .
9	Resume resumes the peer .
10	pick picks a message from the peer
11	post is used to post a snapshot
12	newTxnResp creates a new transactionnResp from a transactionnRequest .
13	applyCompare is used to compare a read view .
14	OpCompact creates a CompactOpactOp with revision .
15	NewPriorityQueue creates a new PriorityQueue .
16	Enqueue adds an item to the priority queue .
17	NewLeaderStats creates a new LeaderStats
18	Succ calculates the frequency of the FollowerStats
19	Fail marks the follower as failed .
20	delete deletes the given watcher from the list .
21	Starts a new streamWriter .
22	checkStreamSupport returns true if the given version is supported
23	maybeUpdate will update the next match if n matches .
24	IsPaused returns true if the progress is paused .
25	needSnapshotAbort returns true if the progress snapshot should be aborted .
26	add adds an inflight to the buffer .
27	growBuf grows an inflight buffer .
28	freeTo frees the buffers to the given size .
29	SaveDBFrom saves a database snapshot to disk .
30	DBFilePath gets the file path for the DB .
31	Set implements the flag . Value interface .
32	NewUniqueStringsValue creates a new UniqueStringsValue
33	UniqueStringsFromFlag returns the unique strings for a given flag set
34	UniqueStringsMapFromFlag returns a map of unique values from a flag set
35	Percentiles takes a slice of numeric values and returns a slice of pcs
36	VerifyBootstrap checks if bootstrap is valid
37	VerifyJoinExisting verifies that the current cluster is joining .
38	hasLocalMember checks if we have a local member
39	advertiseMatchesCluster is used to advertiseMatchesCluster in the cluster
40	ReqTimeout returns the timeout for the client config
41	getStatus returns the current status of raft .
42	GetDefaultHost returns the default host if any .
43	copied from interface
44	getIfaceLink retrieves a link from the interface index .
45	ls command function
46	print a list of nodes
47	Print a node
48	NewLeaseRenewerCommand returns a new cobra command for lease renewer
49	Read reads a raftpb . Snapshot .
50	GetCipherSuite returns the cipherSuite given a string
51	post selects a picker from the peer .
52	send adds a message to the raft .
53	sendHeartbeat sends a heartbeat to the raft log .
54	bcastAppend sends all progress items to the raft .
55	bcastHeartbeat sends a heartbeat request to the raft backend .
56	tickElection is used to tick the election
57	tickHeartbeat ticks the heartbeat of the raft .
58	stepCandidate moves a leader to the raft .
59	restore attempts to restore the snapshot . Returns true if the snapshot was successfully committed .
60	advertable returns true if the raft is promotable .
61	checkQuorumActive checks if the Raft count is active .
62	increaseUncommittedSize increases the number of uncommitted entries for the given slice .
63	reduceUncommittedSize reduces the number of uncommitted entries to the given number of entries .
64	newPeriodic creates a new Periodic
65	Pause pauses the periodic .
66	Resume stops the periodic .
67	Lock acquires a lock on Mutex .
68	NewLocker returns a new lock .
69	NewFIFOScheduler returns a new scheduler .
70	Schedule implements the fifo interface .
71	Stop stops the fifo .
72	NewServer creates a new server .
73	StartServe starts the gRPC server
74	Stop stops the gRPC server
75	Transport sends requests to the given stream .
76	RegisterInterruptHandler registers an InterruptHandler
77	HandleInterrupts handles SIGINT signals .
78	OpGet returns an Op that selects the given key
79	OpDelete creates a Delete operation .
80	OpPut creates a new put operation .
81	OpTxn returns an Op that returns a TTxn .
82	WithFromKey returns a OpOption that configures the key
83	withTop returns a list of OpOptionOptions with the given sort target .
84	Exist returns true if the given directory exists .
85	searchIndex returns the index of names that match the given names .
86	isValidSeq checks if names are valid .
87	NewListener returns a new net . Listener
88	cafiles returns the list of trusted CA files
89	ServerConfig returns the TLS configuration for the server .
90	ClientConfig returns a TLS client config for the info .
91	newTLSKeepaliveListener returns a new net . Listener for net . Listener
92	applyV2Request sends a request to etcd .
93	NewRoleCommand returns a cobra command for role subcommands
94	Role add command
95	roleGetCommandFunc performs a role get command
96	Role grant permission command
97	roleRevokePermissionCommandFunc is used to revoke a permission command
98	NewCluster creates a new cluster
99	NewClusterByConfig creates a new cluster using the given config .
100	HTTPMembers returns a list of HTTPMembers
101	waitLeader waits for the given number of members to become leader .
102	waitNoLeader waits for the leader to signal the leader .
103	isMembersEqual returns whether the given slice is equal to membs .
104	listenGRPC starts listening for grpc connections .
105	NewClientV3 creates a new client for the member .
106	Clone clones a member
107	Close closes the member
108	Stop stops a member
109	checkLeaderTransition checks to see if the leader change is in the leader .
110	Restart restarts a member .
111	Terminate terminates a member
112	Metric returns the given metric name .
113	InjectPartition adds a new member to the other member list .
114	RecoverPartition attempts to recover the other member from other .
115	NewClusterV3 creates a new cluster v3
116	ParseWithDefaults parses the given options into jwtOptions .
117	Parse parses jwt options from optMap
118	Key returns the jwt key
119	Fill the Header
120	add adds a watcher to the list . Returns true if the watcher was added false otherwise .
121	Watch adds a new watcher to the list .
122	newFileEncoder creates a new file encoder for f .
123	purgeFile removes a file from the given directory .
124	Set implements the flag . Value interface .
125	NewStringsValue creates a new StringsValue from a string .
126	StringsFromFlag returns the values of a flag for a given flagName .
127	Cluster converts a comma separated string into a string .
128	NewPageWriter creates a new PageWriter .
129	watch creates a watcher for the given key and index .
130	notify sends the given event to all watched nodes .
131	clone returns a copy of the watch .
132	isHidden returns true if keyPath is hidden
133	createEtcdLogFile creates the etcd log file
134	runEtcd runs the etcd command .
135	stopEtcd stops etcd command
136	handleSIGIT_ETCD_DATA_ANDLETE_DATA_AGENT is used to delete etcd files
137	LimitListener wraps net . Listener . LimitListener .
138	allowMethod returns true if m is allowed .
139	NewWatchServer creates a new watcher
140	FiltersFromRequest creates a mvcc . FilterFunc from a watchCreateRequest .
141	newPipelineHandler creates a new pipeline handler
142	checkClusterCompatibilityFromHeader checks if the header is compatible with the local server - from header .
143	KeyExists returns true if a key exists
144	KeyMissing returns true if the key is missing
145	ValidateSecureEndpoints validates secure endpoints
146	putNewKV stores a new KV or returns an error .
147	newUniqueEphemeralKey creates a new EphemeralKV .
148	NewUpdateDirCommand creates a new cli . Command .
149	Updated the command function
150	handleBackup creates a backup snapshot .
151	saveDB saves the db to destDB .
152	NewWatchCommand returns a new cobra . Command for watch
153	NewV3 creates a new v3 manager .
154	Save snapshot to v3
155	Status returns the status of a snapshot file .
156	Restore restores the data directory
157	NewAuthStore creates a new instance of authStore .
158	NewTokenProvider creates a new TokenProvider
159	MendPeer implements transport . Peer .
160	removePeer removes a peer from the pipeline
161	ActivePeers returns the number of active peers .
162	Resolve the default address
163	resolveTCPAddrs takes a list of urls and resolves them to a list of hostnames
164	Returns true if the URLs are equal .
165	URLStringsEqual returns true if two strings are equal
166	NewLeaseCommand returns a cobra command for lease subcommands
167	NewLeaseGrantCommand returns a new cobra command for lease grants
168	leaseGrantCommandFunc performs a lease grant command .
169	NewLeaseRevokeCommand returns a cobra command for Lease revokes
170	leaseRevokeCommandFunc is used to revoke a lease .
171	NewLeaseTimeToLiveCommand returns a new cobra . Command for testing
172	leaseTimeToLiveCommandFunc calls leaseTimeToLiveCommandFunc for leaseID .
173	NewLeaseListCommand returns a new cobra command for lease list
174	leaseListCommandFunc displays a list of Leases
175	NewLeaseKeepAliveCommand returns a new cobra . Command for lease - alive
176	lease keep - alive
177	NewAlarmCommand returns a new cobra command for alarm
178	alarmDisarmCommandFunc calls alarmDisarmDisarmCommandFunc if not set
179	alarmListCommandFunc displays alarm list command
180	Flags returns the flags for this Etcd .
181	EmbedConfig returns an embed . Config
182	PProfHandlers returns a map of HTTP handlers to metrics
183	NewBackendQuota returns a new quota for the backend
184	NewClusterProxy returns a new ClusterServer .
185	NewHandler returns a new lease handler .
186	TimeToLiveHTTP performs a time to live in a lease .
187	newWatcherBatch creates a watcherBatch for the given set of events .
188	add adds a new watcher to the list
189	contains returns true if the given key contains the given key .
190	delete removes the given watcher from the map .
191	choose selects a new set of watchers and returns the current set of watchers .
192	watcherSetByKey returns a watcherSet for the given key .
193	Compare returns an integer indicating whether c is less than or equal to c .
194	predicate returns the successor of the interval node .
195	updateMax updates the max value of the interval node .
196	visit returns true if the provided node is visited .
197	Delete removes an Interval from the IntervalTree . Returns true if the interval was deleted .
198	Insert inserts an Interval into the IntervalTree .
199	rotate left
200	replaceParent is used to replace the parent of an interval tree
201	MaxHeight returns the maximum height of an IntervalTree
202	Visit is part of the IntervalTree interface .
203	find returns the current interval node or nil if not found
204	Find returns the IntervalValue or nil if not found
205	Intersects returns true if the interval tree intersects .
206	Contains returns whether an IntervalTree contains the given Interval .
207	Stab returns an array of IntervalValues
208	Union performs a union of an interval tree
209	NewExactReadCloser returns an io . ReadCloser that writes to rc and totalBytes .
210	NewElection creates a new election .
211	ResumeElection is used to resume a new election .
212	Proclaim is part of the Lease interface .
213	Resign the election .
214	Leader gets the election status
215	Observe returns a channel for observing changes to the election .
216	check panics if r is not available
217	NewExecWatchCommand returns a new exec - watch command .
218	execWatchCommandFunc is the main entry point for command
219	NewListener returns a listener for the given URL .
220	NewRoundTripper creates a new round tripper .
221	createPostRequest creates a new request with the given parameters .
222	checkPostResponse checks if the response body is valid
223	serverVersion returns the semver version from the header .
224	checkVersionCompatibility compares the local server and localMinCluster against localMinCluster .
225	setPeerURLsHeader sets the peer URLs header
226	addRemoteFromRequest adds remote from the request
227	NewKeysAPIWithPrefix returns a KeysAPI with the given prefix .
228	TTLDuration returns the TTL of the node .
229	SetPflagsFromEnv sets a pflag . FlagFromEnv to the specified FlagSet .
230	FlagToEnv converts a flag to a string
231	extracts the string with pre and suf .
232	passConfChange returns true if the entry has config change
233	printInternalRaftRequest prints InternalRaftRequest to stdout
234	listEntriesType lists the given entries
235	newLog creates a new LogLog .
236	newLogWithSize creates a new raftLog with the given storage .
237	findConflict finds the conflict at the given index .
238	nextEnts returns the list of entries that need to be committed .
239	allEntries returns all entries in the log .
240	slice implements the log . Interface .
241	NewSession creates a new session .
242	Close the session
243	WithTTL sets the TTL of the session
244	WithLease sets the lease ID
245	addRequest adds a request to the queue .
246	recvAck returns the acks of the given message .
247	advance returns all pending reads from the pending map .
248	lastPendingRequestCtx returns the last pending request if any .
249	Start starts the server
250	start is used to start the snapshot count
251	Process sends a message to Raft
252	ReportSnapshot reports a snapshot .
253	MoveLeader is part of the EtcdServer interface .
254	TransferLeadership is part of the EtcdServer interface
255	configure implements raft . ConfChange interface .
256	sync attaches a SYNC to etcd
257	publish publishes the local member to the cluster
258	applyEntryNormal adds an entry to etcd .
259	applyConfChange applies the given ConfChange to the raft cluster
260	monitorVersions creates and updates etcd versions .
261	goAttach is a long running goroutine that runs f on the server .
262	NewRoundrobinBalanced creates a picker from a zap balancer .
263	Pick returns a wrapper around the balancer . Pick method .
264	NewTLSListener returns a new net . Listener
265	acceptLoop is the main loop for accepting connections .
266	SetEndpoints sets a list of endpoints for this group .
267	Target returns the target for the specified endpoint .
268	Target returns a string representation of the target endpoint .
269	Build creates a new resolver for the given target .
270	Handle implements v2 . Handler
271	NewElectionCommand returns a new cobra command for election
272	nodeToMember converts the given NodeExtern to a member .
273	NewTmpBackend creates a new backend
274	newRevision creates a new revision .
275	Run the revision .
276	Pause pauses the revision .
277	Resume resumes the revision .
278	ruleRespMsgType converts a message type to a MessageType .
279	DescribeMessage returns a human readable description of a message .
280	DescribeEntry returns the description of the given entry .
281	DescribeEntries returns a string representation of the given entries .
282	SetLogger sets gpclog . LoggerV2
283	GetLogger returns the current logger .
284	maybeFirstIndex returns the first index of the snapshot if any .
285	maybeLastIndex returns the index of the last entry in the snapshot .
286	maybeTerm returns the term for the given index .
287	Searches the entries array .
288	SaveSnap persists the given snapshot to disk .
289	New returns a new Client .
290	NewCtxClient returns a new Client using the given context .
291	NewFromURL creates a new client from a given URL
292	Close closes the client
293	Endpoints returns the configured endpoints .
294	SetEndpoints sets the endpoints for the group .
295	Sync synchronizes all nodes in the cluster .
296	dialSetupOpts connects to the GRPC server .
297	Dial connects to the Redis server .
298	dialWithBalancer returns a grpc . ClientConn for the specified endpoint .
299	dial is used to dial a new connection
300	WithRequireLeader returns a context with a request leader set
301	roundRobinQuorumBackoff returns a backoffFunc that rounds the number of quorum attempts .
302	isHaltErr returns true if the given error is a fatal error .
303	NewLease creates a new lease
304	IsCreate returns true if the event is create
305	Err returns the status of the response .
306	IsProgressNotify returns true if the response is a progress notification
307	RequestProgress implements watcher .
308	nextResume returns the next resuming stream
309	dispatchEvent is used to send an event to the stream . It returns a boolean indicating whether the watch was successful or not .
310	broadcastResponse sends a response to all received streams .
311	unicastResponse blocks until a response is received .
312	joinSubstreams is used to join the grpc stream
313	toPB converts WatchRequest to pb . WatchRequest .
314	toPB converts progressRequest to WatchRequest . WatchRequest .
315	Contains returns true if the value exists in the unsafeSet .
316	ContainsAll implements the unsafeSet interface .
317	Equals implements the unsafeSet interface .
318	Values returns the set s values .
319	Copy returns a copy of the unsafe set .
320	Sub returns a new Set that contains the provided values .
321	v2MembersURL returns a url for v2 members
322	NewMigrateCommand creates a new migrate command
323	publishEntries publishes the given entries to the raft node .
324	openWAL opens the WAL for the raft node .
325	replayWAL reads the WAL from the member .
326	stop the raft node .
327	NewWatchCommand returns a new cobra command for watching events
328	InitialState is part of the Storage interface .
329	SetHardState implements Storage . SetHardState
330	Entries implements Storage .
331	Term implements Storage . Term
332	LastIndex implements Storage . LastIndex .
333	FirstIndex implements Storage . FirstIndex
334	Snapshot implements the Storage interface .
335	ApplySnapshot modifies the snapshot
336	Compact implements storage . Interface .
337	unachable marks the given URL as unreachable .
338	NewEndpointCommand returns a new cobra command for endpoints
339	epHealthCommandFunc starts an ep health command
340	NewElectCommand returns a new cobra command for election
341	NewDefragCommand returns a new instance of the defrag command
342	RegisterBuilder registers a new balancer
343	Build builds a balancer from a balancer .
344	recordTransition returns the current state of the given state .
345	doSerialize is a helper function used to fetch auth information from etcd .
346	send sends a watcher to the watcher
347	post a watch response .
348	OriginAllowed returns true if origin is allowed by origin .
349	IsHostWhitelisted returns true if given host whitelisted
350	Valids returns a sorted list of valids .
351	NewSelectiveStringsValue creates a new SelectiveStringsValue from valids .
352	NewKV returns a new KV implementation .
353	NewURLsValue returns a new URLsValue instance
354	URLsFromFlag returns a slice of URLs from a flagset
355	servePeers serves the etcd HTTP server
356	NewStore creates a new store .
357	appendMarkTombstone appends the mark to b and returns the resulting slice .
358	IsDirWriteable checks if dir is writable
359	TouchDirAll creates and initializes a directory
360	CreateDirAll creates all contents of dir .
361	ZeroToEnd seeks to the end of the file .
362	Open returns a LockedFile object .
363	NewRaftLoggerFromZapCore creates a raft logger from a zapcore . Core .
364	NewConfig returns a new yaml client configuration .
365	RegisterElectionHandler registers the http handlers for service electionpb . The handlers forward requests to the grpc endpoint over conn .
366	UpdateCapability updates the capabilities for the given version .
367	NewLockCommand returns a cobra command for locking
368	tick ticks the node
369	advanceTicks is used to advance the raft node .
370	NewAuthCommand returns a cobra command for authorization
371	authEnableCommandFunc is the same as authEnableCommand but does not return an error
372	authDisableCommandFunc is used to disable a command
373	RetryKVClient returns a KV client for the given client .
374	RetryLeaseClient returns a new LeaseClient .
375	RetryClusterClient creates a new ClusterClient
376	RetryMaintenanceClient returns a MaintenanceClient for the given client conn .
377	RetryAuthClient returns a client for the given client .
378	NewSetDirCommand constructs a new set dir command .
379	Enter is used to enter the barrier
380	Leave is used to leave the barrier
381	HandleBasic is the handler for servingMux .
382	WriteError writes an error to the response writer .
383	MemberByName returns a member with given name .
384	PeerURLs returns a list of all the peer URLs in the cluster
385	ValidateConfigurationChange returns an error if the configuration change is not valid
386	AddMember adds a member to cluster
387	RemoveMember removes a member from the cluster
388	ValidateClusterAndAssignIDs validates the cluster and assigns the address to the local Raft cluster .
389	Keep returns a map of key - value pairs .
390	closeRequireLeader is used to close the keepalive response
391	resetRecv is used to reset the keepalive client
392	recvKeepAlive is used to receive keep - alive requests
393	deadlineLoop is a long lived goroutine that keeps keepalives and keeps keepalives
394	sendKeepAliveLoop is used to send keep - alive requests
395	NewKV creates a new lease .
396	revoke is used to revoke a lease
397	LeaseValue returns a copy of the given key .
398	ValueBytes returns the bytes of compare_value .
399	WithRange returns a new cmp with the given range end .
400	WithPrefix returns cmp with prefix set .
401	mustInt64 returns an int64 or panics if the given value is not a int64 .
402	mustInt64orLeaseID returns an int64 or int64 if it is not an int64 .
403	Next returns the next update .
404	getJournalWriteSyncer returns a write syncer for the journal .
405	newKV creates a new KV node .
406	newDir creates a new directory .
407	Read returns the node s contents .
408	Write a value to node .
409	List implements Node .
410	GetChild returns a child with the given name .
411	Add adds a child to the node .
412	Remove deletes a node .
413	Compare compares the value against a node . Returns ok if the value is equal to prevValue .
414	Clone returns a deep copy of the node .
415	isConnectedToQuorumSince returns true if the given time is connected to the given time
416	isConnectedSince returns true if the given remote is connected since the given remote time .
417	numConnectedSince returns the number of connected peers since the given time .
418	longestConnected returns the longest TTL of the given transport .
419	isTornEntry returns true if data contains the last valid entry .
420	StartMockServersOnNetwork starts a new MockServers on a given network .
421	StartAt starts the server
422	StopAt stops the server at idx
423	Stop stops all registered servers .
424	NewCheckCommand returns a cobra command for checking properties
425	NewCheckPerfCommand returns a cobra command for checking perf keys
426	NewCheckDatascaleCommand returns a cobra . Command for testing
427	NewGetCommand returns a new cobra . Command for Get
428	NewGetCommand creates a new get command .
429	PickPeerURL picks a random peer URL
430	HandleMetricsHealth implements the Handler interface for ServeMux .
431	NewRemoveCommand creates a new cli . Command .
432	rmCommandFunc deletes a command .
433	checkIntervals takes a list of requests and returns a map of IntervalTree objects .
434	ReportEventReceived reports the received event .
435	RegisterKVHandler registers the http handlers for service KVD to mux . The handlers forward requests to the grpc endpoint over conn .
436	RegisterWatchHandler registers the http handlers for service watch to mux . The handlers forward requests to the grpc endpoint over conn .
437	RegisterLeaseHandler registers the http handlers for service Lease to mux . The handlers forward requests to the grpc endpoint over conn .
438	RegisterClusterHandler registers the http handlers for service Cluster to mux . The handlers forward requests to the grpc endpoint over conn .
439	RegisterMaintenanceHandler registers the http handlers for service Maintenance to mux . The handlers forward requests to the grpc endpoint over conn .
440	RegisterAuthHandler registers the http handlers for service Auth to mux . The handlers forward requests to the grpc endpoint over conn .
441	startEtcd starts an ETCD server .
442	identifyDataDirOrDie checks if the given directory exists and if it is a member of the given directory .
443	openLast opens and returns a locked file .
444	getLeader sets the current leader .
445	lostNotify returns a channel that is closed when leader is lost .
446	newGRPCProxyCommand returns a cobra command for grpc proxy
447	NewMemberCommand returns a cobra command for member subcommands
448	NewMemberAddCommand returns a new cobra command for member add command
449	NewMemberRemoveCommand returns a new cobra command for removing a member
450	NewMemberUpdateCommand returns a cobra command for updating a member
451	NewMemberListCommand returns a new cobra command for member lists
452	memberAddCommandFunc is used to add a member to a member
453	memberRemoveCommandFunc handles a member remove command
454	memberUpdateCommandFunc is part of the interface
455	memberListCommandFunc displays a memberlist command
456	Open opens the WAL .
457	OpenForRead is part of the WAL interface .
458	Verify verifies the given snapshot against the provided snapshot .
459	Close implements the WAL interface .
460	notify returns true if the event was processed false otherwise .
461	Remove removes the watch from the list .
462	mkPathDepth creates a path depth for a given node .
463	Makes a NodeExtern and creates a NodeExtern
464	prevKeyFromPuts returns the previous key value for the response .
465	NewWeightedReport creates a new Report with the given counters .
466	NewURLsMapFromStringMap creates a new URLMap from a map of strings .
467	String returns a string representation of the URLs map .
468	URLs returns a sorted list of urls .
469	parse converts a string into a map .
470	NewClientHandler returns a new http . Handler
471	writeKeyEvent writes the event to the etcd server
472	writeKeyError is a helper function to write a key error to the client .
473	getUint64 gets uint64 from form
474	getBool gets bool from form
475	waitDeletes is used to wait for deleted deletes
476	AddOutputPaths is defined on the Config interface .
477	NewConfig creates a new Config struct .
478	PeerURLsMapAndToken returns a url map from the given string and token
479	GetDNSClusterNames returns a list of DNS names
480	checkBindURLs checks if the given URLs are valid
481	GetCluster is a convenience method for getting a proxy for a given service
482	GetClient returns a list of SRV clients
483	Get SRV service
484	ReadDir reads the directory named by dir .
485	compact compacts the given revision .
486	Defragment dispatches to the given ep .
487	NewUserCommand returns a cobra command for user subcommands
488	userAddCommandFunc is used to add a user add command .
489	userGetCommandFunc is used to get a command
490	Use user pass password
491	addEvent adds a new event to the history .
492	scan returns the event matching the given key .
493	clone returns a copy of the EventHistory .
494	openSnapshotBackend opens a backend from a snapshot .
495	openBackend returns a backend from the given config .
496	recoverSnapshotBackend is used to recover a snapshot from a raft backend .
497	NewUpdateCommand handles a new update command .
498	Update command function
499	backAndBack returns the RequestStats of the queue .
500	Insert adds a RequestStats to the queue .
501	Rate implements the rate of StatsQueue interface
502	Clear clears the queue .
503	UniqueStrings returns a slice of strings with n random values
504	RandomStrings returns a slice of strings with n randomness
505	IsKeyNotFound returns true if the error is a key not found error
506	IsRoleNotFound returns true if the error is a role not found error
507	IsUserNotFound returns true if the error is a user not found error
508	JoinCluster is used to join a cluster
509	GetCluster is a convenience method to create a new cluster
510	newProxyFunc returns a ProxyFunc that is configured to use the provided proxy .
511	isSafeRetry returns true if err is a safe retry policy .
512	withRetryPolicy returns a retry option that sets retry policy
513	withAuthRetry returns a retry option which enables retry
514	withMax sets the maximum number of retries .
515	withBackoff creates a retryOption that applies backoffFunc to the backoff function .
516	RecvAppendReq queues a request to be sent to the server .
517	SendAppendReq sends a request to the server .
518	merge is used to merge two buffers .
519	deleteRevKey deletes the given key .
520	isMemberBootstrapped checks if a member is bootstrapped
521	GetClusterFromRemotePeers gets a RaftCluster from remote peers .
522	Get cluster from remote peers
523	getRemotePeerURLs returns a list of remote peer URLs
524	getVersions returns a map of local and local version of the Raft cluster .
525	determineClusterVersion will decide the most recent version of the leader .
526	getVersion returns the current version of member .
527	NewTimeoutDetector creates a new TimeoutDetector .
528	Reset resets the timer
529	Observe implements the MonitorDetector interface .
530	NewPeerHandler creates a new server handler
531	put adds the key index to the store .
532	tombstone inserts a tombstone into the store .
533	get returns a modified revision for the given key index . ErrRev is returned if no revision was found .
534	Since returns all revisions since the given entry .
535	keep adds the given item to the list if it exists .
536	findGeneration returns the generation at the given revision .
537	cancelWatcher removes the watcher from the list .
538	syncWatchersLoop is a long lived goroutine that periodically checks if the watcher is already closed .
539	syncVictimsLoop is a long running goroutine that periodically watches the store s victims .
540	moveVictims moves all victims from the store and returns the number of tracked victims .
541	kvsToEvents takes a list of events and converts them to events .
542	notify sends a notification to all watchers .
543	isOpFuncCalled returns true if the given opfunc is called .
544	UnsafePut is part of the transaction interface .
545	UnsafeSeqPut is part of the transaction interface .
546	UnsafeRange is part of the transaction interface .
547	UnsafeDelete removes a key from the batch .
548	UnsafeForEach is similar to UnsafeForEach except that it takes a transaction in a given bucket .
549	Commit marks the transaction as committed .
550	CommitAndStop implements the transaction . CommitAndStop interface .
551	Renew is used to renew a lease .
552	Attach adds the given lease to the list .
553	revokeExpiredLeases should only be used for testing .
554	checkpointScheduledLeases is used to check for scheduled checkpoints
555	expireExists returns the Lease if it exists and is set to false otherwise .
556	findExpiredLeases returns a slice of Leases that are expired .
557	refresh refreshes the current TTL
558	writes the lease .
559	Keys returns all the keys in this lease .
560	Remaining returns the duration of the lease .
561	NewCompactionCommand returns a new cobra command for compaction
562	compactionCommandFunc is a wrapper for compaction .
563	NewPutCommand creates a new cobra . Command for putting command
564	putCommandFunc is used to put a command
565	NewHandler returns a new reverse proxy .
566	NewReadonlyHandler returns a new http . Handler with a readonly handler .
567	NewSetCommand creates a new set command .
568	setCommandFunc is a wrapper for setCommand .
569	waitOnLastRev waits for the current revision to be returned
570	GetDefaultInterfaces returns a map of default host names
571	NewSnapshotCommand returns a cobra command for snapshots
572	NewMoveLeaderCommand returns a new cobra command for move - leader command
573	transferLeadershipCommandFunc transfers the leader command to the given args .
574	OpenDir opens the named directory .
575	NewRemoveDirCommand creates a new rmdir command .
576	rmdirCommandFunc is a wrapper for rmir command
577	NewDelCommand returns a new cobra command for delete keys
578	delCommandFunc deletes a command .
579	NewExpectWithEnv returns a new ExpectProcess .
580	NewExpectWithEnv starts a new ExpectProcess with the specified environment .
581	ExpectFunc invokes the given function and waits for an error .
582	Expect implements ExpectFunc .
583	LineCount returns the current line count
584	Signal sends a signal to the process
585	keyFunc returns a key for the RangeRequest .
586	Add adds a new range to the cache .
587	Get implements the RangeRequest interface .
588	Invalidate invalidates the cache
589	Compact sets the current revision .
590	NewUniqueURLsWithExceptions creates and initializes a new UniqueURLs .
591	UniqueURLsFromFlag returns the unique URLs for the given flagset
592	UniqueURLsMapFromFlag returns a map of unique unique URLs from the flagset
593	Hold unlocks the barrier
594	Release releases the barrier
595	Wait blocks until the barrier has completed .
596	NewLockRacerCommand returns a new cobra command for lock races
597	ElectionsTimeout returns the election timeout .
598	DialEtcdGRPCServer creates a connection to the etcd server
599	CreateEtcdClientConfig creates the etcd client config
600	CreateEtcdClient creates a new etcd client
601	CheckCompact performs a compact revision .
602	Defrag resets etcd client
603	RevHash returns the revision number of the member .
604	Rev implements the Etcd interface .
605	Compact performs a compaction .
606	IsLeader checks if this is a leader
607	WriteHealthKey writes the health key
608	SaveSnapshot saves the snapshot to the member .
609	RestoreSnapshot restores the snapshot
610	NewWatcher creates a watcher with prefix
611	NewRawNode creates a new RawNode
612	Campaign progresses the node .
613	Propose implements the Node interface .
614	ProposeConfChange implements the Node interface for RawNode .
615	ApplyConfChange applies the given ConfChange to the given ConfChange .
616	Step is part of the Raft interface .
617	Ready gets the ready state of the node .
618	WithProgress adds the progress to the node .
619	ReportUnreachable observes the unreachable status of the node .
620	ReportSnapshot reports a snapshot .
621	TransferLeader sets the transition leader for this node .
622	ReadIndex reads the given entry from the wire .
623	PrintcURL is used to print a CURL command .
624	StartNode starts a new node based on the given configuration .
625	RestartNode restarts a node .
626	Tick stops the node .
627	MustSync returns true if st is a sync .
628	NewGRPC17Health returns a new GRPC17Health object .
629	NeedUpdate returns true if the health should be updated
630	dflSignal sends a signal .
631	New creates a new Store .
632	Index returns the current index .
633	Get is used to get a single node
634	Create implements the Store interface .
635	Set is used to create a new event
636	getCompareFailCause returns a string representing the compare failure of the node .
637	Delete is used to delete a node
638	walk walks the tree rooted at path .
639	internalGet is used to get a node
640	DeleteExpiredKeys is used to delete expired keys
641	checkDir returns an error if the directory is not a directory .
642	Save implements the Store interface .
643	Recovery is used to recover from the state store
644	Next returns next id .
645	NewMakeMirrorCommand returns a cobra command for make mirror command
646	NewZapCoreLoggerBuilder creates a new zap logger .
647	NewSyncer creates a new syncer .
648	DropPort drops a port
649	SetLatency sets latency
650	Remove latency
651	NewTxnCommand returns a new cobra command for txn subcommands
652	txnCommandFunc runs a txn command
653	New creates a new compactor .
654	Print response key
655	RegisterLockHandler registers the http handlers for service Lock to mux . The handlers forward requests to the grpc endpoint over conn .
656	gRPCHandlerFunc wraps another http . HandlerFunc into a http . HandlerFunc
657	addCORSHeader adds CORS headers to the response
658	fallback removes all pending operations from the transaction .
659	IDFromString returns an ID given a string .
660	release releases the lock held on entry
661	EncodedSize returns the encoded size of the value .
662	Decode decodes the ValueStruct from b .
663	NewMergeIterator creates a new MergeIterator .
664	initHeap initializes the heap .
665	Valid returns whether the iterator is valid .
666	Key returns the current key .
667	Value returns the current value of the iterator .
668	Next moves the iterator to the next key .
669	Seek moves the iterator to the given key .
670	Close closes all underlying iterators .
671	Encode encodes a valuePointer to a byte slice .
672	Decode decodes the header from buf .
673	encodeEntry encodes an entry .
674	SetEntry is part of the batch . WriteBatch interface .
675	Set is part of the WriteBatch interface .
676	SetWithTTL sets the entry with a TTL
677	Delete implements the CommitBatch interface .
678	commit adds the data to the batch .
679	Flush implements the CommitBatch interface .
680	Error returns the error if any .
681	getMemTables returns a slice of all the memory tables .
682	writeRequests writes the given requests to the database .
683	ensureRoomForWrite ensures that there is room for the room .
684	writeLevel0Table writes the level0 table to the given writer .
685	handleFlushTask handles a flush task .
686	flushMemtable flushes the memtable to disk .
687	calculateSize calculates the size of the current directory .
688	Size returns the current LSM file size
689	Next returns the next value in the sequence .
690	Release releases the sequence .
691	KeySplits returns a sorted list of keys .
692	Flatten discards all tables in the database .
693	Mmap is used to write a file descriptor to a file descriptor
694	Madvise sends a signal to b .
695	setDiscardTs is used to set the timestamp of the cluster
696	hasConflict returns true if the given transaction is in the database .
697	Set is part of the Wallet interface .
698	SetWithMeta is part of the Transaction interface .
699	Delete is used to delete an entry
700	Get returns the item for the given key .
701	CommitWith is part of the Transaction interface .
702	View executes a read - only view of a transaction .
703	Update adds a function to the database .
704	Seek seeks to the next key .
705	SeekToLast moves the iterator to the next block .
706	parseKV parses the value of h into the current iterator .
707	NewIterator returns a new iterator over the table .
708	seekFrom implements the iterator interface .
709	seekForPrev moves the iterator to the next key .
710	Value returns the current value .
711	Seek moves the iterator to the given key .
712	NewConcatIterator creates a new ConcatIterator .
713	Valid returns whether the iterator is valid .
714	Next moves the iterator to the next position .
715	Close closes the ConcatIterator .
716	OpenExistingFile opens an existing file .
717	Copy returns a copy of a .
718	KeyWithTs returns the big endian representation of key .
719	ParseTs parses the given key .
720	ParseKey takes a key and converts it to a byte slice .
721	SameKey checks if two keys are equal
722	FixedDuration computes the fixed duration for the given duration .
723	NewCloser returns a new Closer .
724	NewThrottle returns a new Throttle .
725	Do implements the Throttle interface .
726	Done marks the Throttle as done .
727	Finish closes the Throttle .
728	SetDiscardTs sets the number of ticks that should be removed from the database .
729	openReadOnly opens the log file at the specified path .
730	iterate implements the log . Logger interface .
731	sortedFids returns a sorted list of files .
732	write writes the given values to the file .
733	populateDiscardStats populates the valueLog with discard stats .
734	Backup writes a snapshot of database to w .
735	ToList converts iterator to KVList .
736	produceRanges writes the range to the stream .
737	produceKVs populates the current KV list to the database .
738	Ostration orchestrates the stream .
739	NewStream creates a new stream .
740	NewStreamAt creates a new stream .
741	DecrRef decrements the reference count for this table .
742	ParseFileID parses a file ID .
743	PrintHistogram prints histograms for keys
744	newSizeHistogram creates a new sizeHistogram .
745	buildHistogram builds a new sizeHistogram for the provided keyPrefix .
746	Print histogram values
747	Init initializes the watermark .
748	Begin marks the index at the given index .
749	BeginMany marks a set of indices as many as possible .
750	Done marks the state of the watermark as finished .
751	DoneMany marks a set of indices as done
752	SetDoneUntil sets the watermark value
753	WaitForMark waits for the given index to finish .
754	Encode encodes a header .
755	Decode decodes the header .
756	NewTableBuilder creates a new table builder .
757	keyDiff returns the diff of two keys .
758	Add adds a new value to the builder .
759	blockIndex returns the block index of the block .
760	Finish finishes the block .
761	Errorf calls Output to print to the standard logger .
762	Infof logs with options .
763	DecrRef decrements the reference count for this skiplist .
764	NewSkiplist creates a new skiplist .
765	Put adds a value to the skiplist .
766	Get returns the value at key .
767	Key returns the current key .
768	Value returns the current value of the iterator .
769	Next moves the iterator to the next value .
770	Prev moves the iterator to the previous value .
771	Seek moves the iterator to the specified target .
772	SeekForPrev moves the iterator to the next position .
773	NewUniIterator returns a new UniIterator .
774	Next moves the iterator to the next rune .
775	Seek seeks to the given key .
776	asChanges converts the manifest to a slice of pb . ManifestChange .
777	rewrite rewrites the manifest file .
778	validate the level handler .
779	acquireDirectoryLock returns a lockGuard for the specified directory .
780	release releases the lock
781	AssertTruef is a utility function for testing
782	Wrapf wraps an error with debug mode .
783	initTables initializes the tables .
784	deleteTables deletes all tables from the table .
785	tryAddLevel0Table tries to add level0 tables to the level0 table .
786	getTableForKey returns a list of tables for the given key .
787	get returns the value for the given key .
788	overlapping tables .
789	String returns the string representation of an Item
790	KeyCopy returns a copy of the item .
791	ValueSize returns the size of the item .
792	NewKeyIterator is like NewKeyIterator but panics on error .
793	Valid returns whether an iterator is valid .
794	ValidForPrefix implements Iterator . ValidForPrefix .
795	Close closes the iterator .
796	parseItem parses an item .
797	Seek moves the iterator to the next key .
798	GetMergeOperator returns a new MergeOperator .
799	Get retrieves the current value from the database .
800	compareAndAdd returns true if the current level is equal to the provided compactDef .
801	newArena creates and initializes a new Arena .
802	putNode writes a node to the arena .
803	getNode returns the node corresponding to the provided offset .
804	getKey returns the key for an offset
805	getVal returns the value given offset and size .
806	Returns the offset of the given node .
807	init initializes the badger .
808	revertToManifest rewrites the manifest to the specified idmap .
809	dropTree is used to drop a tree
810	dropPrefix drops the given key .
811	isLevel0Compactable returns true if the controller s levels are compactable .
812	doCompact runs the compaction .
813	get returns the value for the given key .
814	seekTotal returns the total of all accounts .
815	findFirstInvalidTxn finds the first transaction in the badger db .
816	Create is used to create a new snapshot
817	List is part of the MemSnapshotStore interface .
818	Open implements the Store interface .
819	Write implements the io . Writer interface
820	NewFileSnapshotStoreWithLogger creates a new FileSnapshotStore with the specified logger
821	NewFileSnapshotStore creates a new file snapshot store
822	snapshotName returns the name for the given term and index .
823	Create creates a new snapshot
824	List returns a list of all snapshots .
825	getSnapshots reads all snapshots from the store .
826	readMeta reads the metadata for a snapshot
827	Open is part of the FileSnapshotStore interface .
828	ReapSnapshots removes snapshots from the store .
829	Write implements the io . Writer interface
830	Close closes the snapshot
831	Cancel the snapshot
832	finalize finalizes the state file .
833	writeMeta writes the snapshot to disk
834	NewNetworkTransportWithConfig creates a new instance of a NetworkTransport
835	setupStreamContext is used to setup the stream context
836	getStreamContext returns the current stream context
837	SetHeartbeatHandler sets the heartbeat handler for this transport .
838	CloseStreams closes all the streams
839	Close the transport
840	getPooledConn returns a connection for the given target address .
841	getConnFromAddressProvider returns a net . Conn for the given address
842	getConn returns a net . Conn for the target .
843	netConn implements net . Conn
844	listen is used to listen for connections
845	handleConn is used to handle an incoming connection
846	handleCommand is used to handle an RPC command
847	decodeResponse decodes response .
848	sendRPC sends an RPC message to the server .
849	newNetPipeline creates a new netPipeline .
850	decodeResponses decodes the response from the pipeline .
851	AppendEntries is part of the pipeline interface .
852	Close closes the pipeline
853	NewObserver creates a new observer for a given channel .
854	RegisterObserver registers a observer
855	DeregisterObserver removes an observer from the Raft index .
856	obtain observations from the Raft
857	NewInmemStore returns a new inmemStore .
858	FirstIndex returns the first index in the store .
859	LastIndex implements the LastIndex interface .
860	GetLog returns the log for the given index .
861	StoreLog is part of the LogStore interface .
862	StoreLogs is part of the LogStore interface .
863	DeleteRange removes all records from the store .
864	Set sets the value for a given key .
865	Get returns the value for the given key .
866	SetUint64 implements the Store interface .
867	GetUint64 gets the uint64 at the given key .
868	NewLogCache creates a new LogCache .
869	Connect adds a peer to the transport
870	Disconnect removes a peer from the InmemTransport
871	DisconnectAll disconnects all peers
872	Respond is a mock
873	Open implements the Opener interface .
874	vote is used to update the state of the node
875	notifyAll is used to notify all leadership for a leader .
876	cleanNotify clears the status of a follower .
877	LastContact returns the most recent contact .
878	setLastContact is used to set the last contact .
879	replicate replicates the given followerReplication .
880	pipeliningReplication is used to replicate a given follower .
881	npendPipeline sends a new entry to the given peer replacing any existing entries with the next index .
882	queueDecode is used to decode an AppendPipeline
883	setupAppendEntries creates a new AppendEntriesRequest .
884	setPreviousLog sets the previous log entry for the request .
885	setNewLogs is used to create a new log entry
886	appendStats is used to append a new log entry
887	handleStaleTerm handles staleTerm events .
888	AppendEntries implements raft . Client .
889	RequestVote implements raft . Raft interface .
890	InstallSnapshot is part of raft . Transport .
891	EncodePeer encodes a peer .
892	DecodePeer decodes peer address from transport .
893	AppendEntries implements raft . AppendEntries .
894	ReadPeersJSON reads peers JSON from a file .
895	ReadConfigJSON reads the configuration from a file .
896	NewTCPTransport creates a new TransportTransport
897	NewTCPTransportWithLogger creates a new TransportTransport
898	NewTCPTransportWithConfig creates a new TCPTransport using the specified bindAddr and advertiseAddr .
899	Dial implements the StreamLayer interface .
900	Accept implements the StreamLayer interface .
901	Addr returns the address of the layer .
902	restoreSnapshot is used to restore a snapshot
903	BootstrapCluster is used to create a new raft cluster .
904	Leader returns the leader address of the Raft Raft
905	Apply is used to return a ApplyFuture that can be used to submit a log message
906	Barrier returns a Future that will block until the provided timeout expires .
907	VerifyLeader returns a Future that can be used to test leadership .
908	AddVoter is part of the Raft interface .
909	RemoveServer implements the Raft interface for Raft .
910	Shutdown is used to shut down the Raft instance .
911	Snapshot returns a snapshot of the Raft .
912	Restore is part of raft . Raft interface .
913	String returns a string representation of this Raft .
914	LastContact returns the last contact .
915	Logf logs with the specified format .
916	containsNode returns true if n contains a node
917	LeaderPlus returns a slice of raft nodes from the cluster
918	WaitTilUptoDate is like WaitTilUptoDate
919	assertLogEntryEqual is used to assert a log entry
920	runFSM is used to run the FSM .
921	Clone returns a deep copy of the configuration .
922	Clone creates a new configuration .
923	hasVote determines if the given server is in the given configuration .
924	checkConfiguration checks if the given configuration is valid .
925	nextConfiguration returns the next configuration for the given change .
926	encodePeers is used to encode peers
927	decodePeers decodes peers from transport .
928	encodeConfiguration encodes a configuration .
929	decodeConfiguration decodes a configuration message .
930	goFunc runs f in a goroutine .
931	getLastIndex returns the last log index
932	getLastEntry returns the last log entry .
933	checkRPCHeader returns an error if the RPC is not supported .
934	setLeader is used to update the leader
935	requestConfigChange returns the IndexFuture for the given request .
936	run runs the Raft .
937	runFollower is used to run the leader
938	liveBootstrap is used to create the bootstrap cluster
939	runCandidate is a mock
940	runLeader is used to monitor the leader state
941	startStopReplication starts the leader replication loop .
942	configurationChangeChIfStable returns a channel that can be used to change the current state of a configuration change .
943	verifyLeader is used to verify a leader .
944	checkLeaderLease checks if the current leader lease has been reached .
945	restoreUserSnapshot is used to restore a snapshot
946	appendConfigurationEntry is used to add a new configuration entry to the raft cluster .
947	dispatchLogs is used to send logs to the raft cluster
948	processLogs is used to process the logs that need to be processed .
949	processLog is used to process the given log .
950	processRPC is used to process RPC commands
951	processHeartbeat is used to process a heartbeat
952	setLastContact sets the last contact .
953	persistVote modifies the last vote term
954	setCurrentTerm stores the current term in the database .
955	setState is used to set the current Raft state .
956	getCommitIndex returns the commit index
957	recalculate recalculates the committed matchIndexes .
958	randomTimeout picks a time . Time from a given duration .
959	generateUUID generates a new UUID
960	decodeMsgPack is used to decode a messagepack
961	encodeMsgPack is used to encode a messagepack
962	backoff calculates the backoff based on the given amount of time .
963	newApplySource returns a new applySource .
964	resetReset resets the source to a random state .
965	DefaultConfig returns the default configuration .
966	ValidateConfig validates configuration .
967	runSnapshots reads snapshots from the Raft
968	shouldSnapshot returns true if the snapshot should be stored .
969	takeSnapshot is used to restart the snapshot process
970	compactLogs is used to compaction logs .
971	Checks if the webpack template is valid
972	New generates and returns a genny . Generator .
973	UnixSocket creates a Listener for Unix socket .
974	Get returns the ErrorHandler at the specified status .
975	PanicHandler returns a middleware that recovers from panics .
976	partialFeeder returns the full path of a partial file .
977	New creates a new engine .
978	WriteTo writes the Message to the given writer .
979	Send sends a message to SMTPSender
980	NewSMTPSender creates a new SMTP mail .
981	Param returns the param for the given key .
982	Set sets the value for the given key .
983	Value returns the value associated with the given key .
984	Redirect redirects the user to a route .
985	File retrieves a binding . File from the request body .
986	MarshalJSON marshals the default context .
987	New creates a new genny group .
988	New creates a new App instance .
989	DeprecrationsCheck checks for deprecations
990	List is not implemented
991	Render implements the renderer interface .
992	Save saves the session .
993	GetOnce gets value from session
994	Set a value to session
995	Clear removes all values from session
996	getSession returns the current Session
997	New generates a genny . Generator .
998	New creates and returns a genny . Generator .
999	New creates a new genny Generator .
1000	NewMessage creates a new message .
1001	Reset clears the contents of the message .
1002	SetHeader sets a header field in the message .
1003	SetHeaders sets the headers of the message .
1004	SetAddressHeader sets an address header field .
1005	FormatAddress formats an address .
1006	SetDateHeader sets the date header field .
1007	FormatDate formats a date
1008	SetBody sets the body of the message .
1009	SetPartEncoding sets part s encoding .
1010	SetHeader returns a FileSetting that sets the header of the file .
1011	SetCopyFunc returns a FileSetting that sets the copy function to the given writer .
1012	AttachReader adds an io . Reader to the message .
1013	Attach adds the file to the message .
1014	EmbedReader adds a new file to the message .
1015	Embed adds a file to the message .
1016	ValidateTemplates validates the specified templates .
1017	PlushValidator ensures that the given file is a valid url .
1018	Validate validates the options .
1019	LoadPlugins loads all plugins from the server
1020	WriteHeader is part of the ResponseWriter interface .
1021	Write is part of the ResponseWriter interface .
1022	Flush implements http . Flusher .
1023	CloseNotify closes the response writer if any .
1024	Run the application
1025	onlyRelevantFiles returns an error if the given function f is not a directory .
1026	GoTemplateEngine renders the input as a template engine .
1027	GET adds a handler for GET requests to the router .
1028	Redirect redirects to a route .
1029	ANY registers a handler for a specific route .
1030	buildRouteName builds a route name for this app .
1031	New creates a new genny group
1032	NewDialer returns a new Dialer .
1033	Dial connects to an SMTP server .
1034	DialAndSend is a convenience method for DialAndSend .
1035	Set sets value to flash
1036	Add adds a key to flash
1037	persist saves flash to flash
1038	newFlash get flash from session
1039	Get gets cookie by name .
1040	Set a cookie with the specified name .
1041	SetWithExpirationTime sets a cookie with the given name and value .
1042	Delete deletes a cookie .
1043	NewMessage returns a new message .
1044	NewFromData creates a new Message from the given render . Data .
1045	New creates a Message from a buffalo context .
1046	CloseNotify closes the event source .
1047	NewEventSource creates a new EventSource
1048	NewSimpleWithContext creates a new Simple instance with the given context .
1049	Register adds a handler to the Simple .
1050	Start starts the background worker
1051	Stop stops the Simple Background Worker .
1052	Perform performs a job
1053	PerformAt wraps Simple method .
1054	PerformIn is part of the Simple interface .
1055	String returns a JSON representation of RouteInfo .
1056	Alias is an alias for RouteInfo .
1057	Name implements RouteInfo .
1058	BuildPathHelper function for RouteInfo
1059	New creates a new genny . Generator .
1060	New returns a new genny . Generator .
1061	RegisterCustomDecoder registers a custom type decoder
1062	Replace adds a middleware to the middleware stack .
1063	Routes returns a list of registered routes .
1064	WrapBuffaloHandler wraps a handler into an http . Handler .
1065	PackageJSONCheck is a mock
1066	match returns the value for the given importpath .
1067	Send sends multiple Messages to a single sender .
1068	Last returns true if the identifier belongs to the last element
1069	Stop stops the app .
1070	DepEnsure inspects the Runner s dep
1071	String implements the fmt . Stringer interface for BuildInfo .
1072	New creates a new generator for the given options .
1073	AddBody adds a new body to the wire .
1074	AddBodies adds a body to the message .
1075	AddAttachment adds an attachment to the message .
1076	AddEmbedded adds a new file to the message .
1077	SetHeader sets a new Headers header field .
1078	New creates a genny group .
1079	New creates and returns a genny . Generator .
1080	New generates and returns a genny . Generator .
1081	Cleanup removes all files .
1082	MDTemplateEngine renders the given template using the given markup .
1083	Update updates a ConfigMapInterface with updates
1084	FilterChanges takes a list of changes and applies them to the pull request .
1085	getLabelsFromREMatches parses a list of labels from a match .
1086	getLabelsFromGenericMatches returns a list of labels from a match .
1087	Start the agent .
1088	Subscribe adds a DeltaChan to the agent .
1089	Config returns the agent configuration .
1090	Set updates the current configuration .
1091	IsMember is a mock
1092	ListIssueComments returns a list issueComments
1093	ListPullRequestComments returns a list pull request comments
1094	ListReviews is part of github . Interface .
1095	ListIssueEvents returns a list issue events .
1096	CreateComment creates a fake client comment .
1097	CreateReview creates a fake review .
1098	CreateCommentReaction creates a fake CommentReactionAdded
1099	CreateIssueReaction creates a fake issue reaction .
1100	DeleteComment deletes a fake issue comment
1101	DeleteStaleComments deletes stale comments
1102	GetPullRequest is a fake implementation of GetPullRequest
1103	GetPullRequestChanges returns a fake pull request changes
1104	GetRef returns a fake test reference
1105	DeleteRef adds a reference to the fake client .
1106	GetSingleCommit is part of github . Interface .
1107	CreateStatus is a mock
1108	ListStatuses is the interface implementation
1109	GetCombinedStatus mocks base method
1110	GetRepoLabels is part of the GithubClient interface .
1111	GetIssueLabels returns a list of issue labels
1112	AddLabel adds a new label to the fake client .
1113	RemoveLabel removes a label from the repository .
1114	FindIssues calls github api . FindIssues
1115	AssignIssue adds an issue to the fake client .
1116	GetFile is a fake implementation of GetFile
1117	ListTeams is part of Interface .
1118	ListTeamMembers is part of the FakeClient interface .
1119	IsCollaborator returns true if the user is a collaborator of the given organization .
1120	ListCollaborators is part of the Interface interface .
1121	ClearMilestone clears the current milestone .
1122	SetMilestone is part of the FakeClient interface .
1123	ListMilestones is part of the FakeClient interface .
1124	ListPRCommits is part of the Interface interface .
1125	GetRepoProjects returns a list of repositories .
1126	GetOrgProjects returns a list of github projects
1127	GetProjectColumns returns a list of project columns
1128	CreateProjectCard creates a project card .
1129	DeleteProjectCard deletes a project card .
1130	MoveProjectCard moves a project card from a project card .
1131	CreateDatabaseClient creates a new InfluxDB client
1132	Push pushes a measurement to the database .
1133	NewProwJobWithAnnotation creates a new ProwJob with the given annotations .
1134	NewProwJob creates a new ProwJob
1135	NewPresubmit returns a ProwJob for the given pull request .
1136	PresubmitSpec returns a ProwJobSpec for the jobBase .
1137	PostsubmitSpec returns a ProwJobSpec for the given postsubmit job .
1138	PeriodicSpec returns a ProwJobSpec for a periodic job .
1139	BatchSpec returns a ProwJobSpec for a job .
1140	PartitionActive returns a channel of pending jobs that are active .
1141	ProwJobFields returns a logrus . Field for a prow job .
1142	ClusterToCtx returns the cluster name
1143	AddCommand registers a new Command .
1144	Get takes name of the prowJob and returns the corresponding prowJob object and an error if there is any .
1145	Watch returns a watch . Interface that watches the requested prowJobs .
1146	Delete takes name of the prowJob and deletes it . Returns an error if one occurs .
1147	Patch applies the patch and returns the patched ProwJob .
1148	MergeMethod returns a PullRequestMergeType for given organization .
1149	Query returns a string representation of the query
1150	ForRepo returns true if the given repository belongs to the given organization .
1151	OrgExceptionsAndRepos returns a map of repo names to repository and repos .
1152	QueryMap returns a new QueryMap .
1153	ForRepo associates the given repository with the given org .
1154	Validate checks that all required context policies are present .
1155	GetTideContextPolicy returns the helm context policy for the given branch .
1156	IsOptional returns true if the given context is optional
1157	MissingRequiredContexts returns a slice of missing required contexts
1158	ValidateWebhook validates a webhook .
1159	HelpProvider returns a plugin help .
1160	HandleEvent handles a pull request event .
1161	HandleAll is the main handler for all PRs
1162	NewDryRunProwJobClient returns a new DryRunProwJobClient .
1163	Create a ProwJob .
1164	Update updates a ProwJob .
1165	UpdateStatus is part of the ProwJobClient interface .
1166	Delete deletes a job .
1167	DeleteCollection deletes a collection .
1168	Get retrieves a ProwJob .
1169	List all Prow jobs .
1170	Watch is not implemented
1171	Patch does nothing
1172	hasSynced returns true if the controller has synced .
1173	Run runs the controller .
1174	runWorker runs the workqueue .
1175	fromKey splits a key into its components .
1176	enqueueKey is used to enqueue a new key
1177	finalState returns true if the ProwJobState is set .
1178	description returns a description of the condition .
1179	rrowJobStatus returns a ProwJobState for the given pipelineRunStatus .
1180	queueMeta returns an ObjectMeta for the given ProwJob
1181	sourceURL returns the sourceURL for the given ProwJob .
1182	makePipelineGitResource constructs a pipeline resource from a given ProwJob .
1183	makePipelineRun makes a pipeline run from pj .
1184	matchingConfigs returns all configs matching the given label .
1185	SuggestCodeChange returns a human - readable description of the given problem
1186	ServeExternalPluginHelp serves external plugin help .
1187	protect is used to protect the branch
1188	UpdateOrg updates the given org .
1189	UpdateRepo updates a repository
1190	UpdateBranch updates a specific branch .
1191	LoadConfig loads config from config file .
1192	Run starts the scheduler
1193	Start the secrets .
1194	reloadSecret reloads secret file .
1195	GetSecret is used to get a secret
1196	setSecret is used to update the secret value
1197	GetTokenGenerator returns a function that returns a token generator for the given secretPath
1198	New creates a new History .
1199	Record adds a record to the history .
1200	ServeHTTP implements the http . Handler interface .
1201	Flush flushes all log records to GCS .
1202	AllRecords returns a copy of the history .
1203	MakeCommand returns a new cobra command for the given build
1204	CheckFlags checks if the current rules are valid
1205	ReceiveComment returns a slice of points for the given comment .
1206	NewController creates a new Controller .
1207	Run starts the controller .
1208	runWorker runs the next item in the Controller .
1209	New creates and returns a new local git repository .
1210	MakeFakeRepo creates a fake git repo from the given repository .
1211	AddCommit adds new files to the local directory
1212	Updates new branch in given repository .
1213	Checkout adds a new branch to the current directory .
1214	RevParse returns the revision of the given repository .
1215	CleanAll removes all resources from the account .
1216	optionsForRepo returns a plugin . Lgtm for the given repository and repository .
1217	getChangedFiles gets the files for a given repository .
1218	loadReviewers returns a set of reviewer objects from the given filenames .
1219	NewController creates a new controller .
1220	SaveLastSync saves the last sync to the controller .
1221	Sync sends any changes to the database
1222	AddFlags adds flags to the event counter
1223	CheckFlags checks if the event counter is valid
1224	ReceiveIssueEvent returns a slice of points for an issue event .
1225	Upload attempts to upload multiple objects to a bucket .
1226	FileUploadWithMetadata returns a UploadFunc that allows access to the specified file .
1227	DataUploadWithMetadata returns a UploadFunc that copies data from the given Reader .
1228	HasLabel returns true if given label is in issueLabels .
1229	ImageTooBig returns true if the given URL is too big .
1230	LevelFromPermissions returns the level of permissions in the repository .
1231	PermissionsFromLevel returns the RepoPermissionLevel for the given RepoPermissionLevel .
1232	newProwJobs returns a PortsJobs
1233	GetApplicable returns a list of peers that belong to given organization .
1234	serve starts the gzip handler
1235	NewCountPlugin returns a new cobra command for count events
1236	ReceiveComment is part of the Plugin interface .
1237	updateMetrics updates the metrics on diskRoot
1238	LogStatus logs the current resources .
1239	SyncConfig synchronizes the given config .
1240	Metric returns a metric for the given type
1241	FormatURL formats the given DogURL as a URL .
1242	runAndSkipJobs invokes the given pull request and runs skipped jobs .
1243	validateContextOverlap checks that all the context has been skipped .
1244	RunRequested is part of the PullRequest interface .
1245	skipRequested sends skippedJobs to pullRequest .
1246	Match returns true if the label matches the label
1247	Match returns true if the event matches the label false otherwise .
1248	AddFlags adds flags to the specified FlagSet
1249	AddFlagsWithoutDefaultGitHubTokenPath adds flags to the specified FlagSet
1250	Validate validates the GitHubOptions .
1251	GithubClientWithLogFields creates a GitHubClient with the specified fields .
1252	Git GitHubClient returns a GitHubClient for the GitHubOptions .
1253	GitClient returns a git client for the GitHubOptions
1254	toMap converts the coverage list to a map .
1255	findChanges returns a slice of changes that need to be applied to the baseList .
1256	CreateDatabase creates a new database
1257	ShouldReport determines if a Prow job should report .
1258	Report reports a job .
1259	MarkComplete marks the set as complete .
1260	NewJobAgent creates a new PodLogClient
1261	Start starts the job agent .
1262	Jobs returns a copy of the set of jobs .
1263	ProwJobs returns a slice of ProwJob objects .
1264	GetProwJob returns the ProwJob for the given job id
1265	GetJobLog returns the logs for a job .
1266	unionStrings returns a new list of strings that are union of given parent .
1267	Apply returns a new Policy that overlaps the policy .
1268	GetOrg retrieves the organization with the given name .
1269	GetRepo returns a repository by name .
1270	GetBranch returns a branch with the given name .
1271	GetPolicy returns a new policy for the given branch .
1272	UpdateIssueEvents updates issue events for given issue .
1273	enqueueKey is used to enqueue a key
1274	rrowJobStatus returns a ProwJobState for the build .
1275	buildEnv builds the environment for the specified build
1276	defaultArguments adds default arguments to the TemplateInstantiationSpec .
1277	defaultEnv adds default environment variables to the container .
1278	injectSource injects a SourceSpec to b .
1279	injectedSteps is used to create a new container and injects a new container .
1280	determineTimeout determines the default timeout based on the decor
1281	makeBuild makes a new build from pj .
1282	newLabels creates a new sql . Label from repository .
1283	newAssignees creates a new sql . Assignees from a repository .
1284	NewIssueComment builds a new sql . Comment from the given issue comment .
1285	messageFilter returns a pjutil . Filter that matches the current version of a change .
1286	IsSuccess returns true if this Build has succeeded
1287	IsFailure returns if this build is a failure
1288	IsAborted returns true if the build is aborted
1289	ProwJobID returns a string that represents the job id
1290	BuildID returns build id
1291	CrumbRequest populates the crumb request .
1292	measure tracks the metrics for a specific method .
1293	get skip metrics
1294	Get returns the data for the specified path .
1295	request performs an HTTP request .
1296	doRequest sends a request and returns the response .
1297	getJobName returns the name of a ProwJobSpec
1298	getBuildPath returns the path to a build .
1299	GetJobInfo returns the job info for the given spec
1300	JobParameterized returns true if the JobInfo has a Parameter definition
1301	EnsureBuildableJob creates a buildable job
1302	LaunchBuild launches a new build
1303	Build creates a new build for the specified build .
1304	BuildFromSpec performs a build from a spec
1305	GetEnqueuedBuilds fetches a set of builds from the queue .
1306	Abort stops a job .
1307	PresubmitToJobSpec converts a job spec to a downwardapi . JobSpec
1308	PostsubmitToJobSpec creates a new job spec from the given postsubmit job spec
1309	PeriodicToJobSpec converts a periodic job spec to downwardapi . JobSpec
1310	GetBuildID returns a build id from a tot URL
1311	listGcsObjects lists all objects in a bucket filtered by prefix .
1312	FindBaseProfile fetches the base profile from GCS
1313	sortBuilds sorts build numbers .
1314	GetAll returns all the EC2 regions
1315	NewEventClient returns a new EventClient
1316	PruneComments removes all issue comments from the repository
1317	FormatResponse formats a bot response .
1318	FormatSimpleResponse formats a simple bot response .
1319	FormatICResponse formats the given issue comment .
1320	FormatResponseRaw takes a bodyURL and returns a formatted string .
1321	Validate validates the options .
1322	Encode encodes options .
1323	RegisterIssueHandler registers a new issue handler .
1324	RegisterIssueCommentHandler registers an issue comment handler .
1325	RegisterPullRequestHandler registers a pull request handler .
1326	RegisterStatusEventHandler registers a status event handler
1327	RegisterPushEventHandler registers a push event handler .
1328	RegisterReviewEventHandler registers a review event handler .
1329	RegisterReviewCommentEventHandler registers a reviewCommentEventHandler for a plugin .
1330	RegisterGenericCommentHandler registers a GenericCommentHandler .
1331	NewAgent creates a new Agent for the given ConfigAgent .
1332	InitializeCommentPruner is used to initialize the comment pruneer
1333	CommentPruner returns the current worker .
1334	Load reads the configuration from the given path .
1335	Config returns the current configuration .
1336	Set sets the configuration .
1337	Start the plugin config .
1338	GenericCommentHandlers returns a map of GenericCommentHandlers for the given repository .
1339	IssueHandlers returns a map of issue handlers for the given repository .
1340	IssueCommentHandlers returns a map of issue comment handlers for the given repository .
1341	PullRequestHandlers returns a map of pull request handlers to the given repository .
1342	ReviewEventHandlers returns a map of review events for the given repository .
1343	ReviewCommentEventHandlers returns a map of all registered plugins .
1344	StatusEventHandlers returns a map of status event handlers for the given repository .
1345	PushEventHandlers returns a map of push events to the given repository .
1346	EventsForPlugin returns the events for the given plugin name .
1347	insertLink adds a new metadata entry to the start .
1348	HelpProvider returns a PluginHelp object that can be used to query the repository .
1349	getPatch returns the local patch for the given repository .
1350	releaseNoteFromParentPR extracts the release - note from the body .
1351	ValidatePayload returns true if sig is a valid payload .
1352	PayloadSignature calculates the SHA1 signature of the payload .
1353	updateString updates the string value .
1354	updateBool updates the boolean value .
1355	configureOrgMeta sets the metadata for the given org metadata .
1356	configureTeamRepos configures the repository with the specified team s permissions .
1357	ShouldReport returns true if the given ProwJob should report false otherwise .
1358	Run uploads options
1359	Format implements logrus . Formatter .
1360	FindLabels returns all labels that match the given regex .
1361	AddFlags adds flags to the specified FlagSet .
1362	NewAgent creates a new agent
1363	HandleLogin handles the authentication request .
1364	HandleLogout handles the logout request .
1365	serverError logs an error
1366	FromItem converts from resource config to resource config
1367	GetItems returns all items from the ResourcesConfigCollection
1368	SetItems sets a list of resources . Items
1369	UnmarshalText implements the encoding . TextUnmarshaler interface for RepoPermissionLevel .
1370	IsAssignee returns true if the given login is an assignee .
1371	IsAuthor returns true if given login is an Author
1372	HasLabel returns true if the Issue has the given label .
1373	Branch returns the branch of a push event .
1374	truncate truncates a string with the given input .
1375	reportStatus reports the status of pj .
1376	parseIssueComments parses issue comments .
1377	createComment generates a comment for a given report
1378	Config returns the lens config .
1379	Callback returns a callback for the lens
1380	FormatRecord formats a record .
1381	Namespace returns a Client with the namespace set .
1382	NewFakeClient creates a new Client that uses the default deckURL .
1383	NewClientInCluster creates a client from a Kubernetes cluster
1384	NewClientFromFile creates a new client from a cluster
1385	NewClient creates a client for the cluster
1386	ReplaceConfigMap deletes a ConfigMap
1387	GetDiskUsage returns the percent utilization of the specified path .
1388	GetAtime returns the atime at the given path .
1389	RegisterLens registers a new lens .
1390	Get a lens by name
1391	LastNLines is the same as LastNLines but returns a slice of strings .
1392	NewClient creates a new slack client
1393	WriteMessage posts a message to the client .
1394	MarkAndSweep atomically mark the given NAT gateway .
1395	ListAll returns all NATGateways
1396	NewClient creates a new API client .
1397	Acquire acquires a resource .
1398	AcquireWait acquires a resource .
1399	AcquireByState acquires a list of resources and returns them .
1400	ReleaseAll releases all resources
1401	ReleaseOne releases a resource .
1402	UpdateAll updates all resources
1403	SyncAll syncs all resources .
1404	UpdateOne updates a single resource
1405	Metric returns a common . Metric
1406	HasResource returns true if the client has a resource
1407	DialContext is a wrapper for DialerWithRetry .
1408	NewDashboardAgent creates a new dashboard agent .
1409	QueryPullRequests returns pull requests for a given query .
1410	GetHeadContexts retrieves all the contexts associated with a user
1411	ConstructSearchQuery builds a search query for a given login
1412	NewBundledStates creates a new BundledStates struct
1413	ReceiveEvent adds a new event to the BundledState
1414	rsages returns a map of all of the BundledStates .
1415	Percentile returns the percentile of a given time .
1416	NewMetrics creates a new metrics object .
1417	NewDiskCache creates a new disk cache
1418	NewMemCache creates a new memory cache
1419	NewFromCache builds a requestCoalescer from a cache .
1420	ProwV1 retrieves the ProwV1Client
1421	Prow retrieves the ProwV1Client
1422	NewOwners creates a new owner for the given repo .
1423	GetApprovers returns all owners as a map of owners
1424	GetAllPotentialApprovers returns a slice of all the possible potential apps .
1425	GetReverseMap returns a map of owners and owner files
1426	tempUnapprovedFiles returns a set of unapproved files .
1427	KeepCoveringApprovers returns a list of newApprovers that can be added to the owner .
1428	GetSuggestedApprovers returns a set of ApprovedApprollers that are recommended to use for the given version
1429	GetOwnersSet returns the owner set of the owner
1430	GetShuffledApprovers returns a list of all users who have been added to the owner
1431	String returns a string representation of an Approval
1432	IntersectSetsCase returns the intersection of two sets .
1433	NewApprovers returns a new Approvers
1434	AddLGTMer is part of the LGTM interface .
1435	RemoveApprover removes an authorization .
1436	AddAssignees adds new ones to the Approvers .
1437	GetCurrentApproversSetCased returns all the Approvers set
1438	GetFilesApprovers returns a map of all files in the Approvers
1439	NoIssueApprovers returns a map of approval to no issue
1440	UnapprovedFiles returns all Approved files
1441	GetFiles returns a list of Approved files belonging to the given baseURL .
1442	IsApproved returns true if all Approvers are Approved
1443	ListApprovals returns a list of all Approbes in the current Approved set
1444	ListNoIssueApprovals returns a list of all Appropes that have noIssueApprovals set .
1445	GenerateTemplate executes a template and returns the result .
1446	writeTemplate writes the outputPath to outputPath .
1447	Labels returns a sorted list of labels from the configuration .
1448	LabelsForTarget returns a list of labels that match the provided LabelTarget .
1449	LoadConfig loads a YAML configuration from the given path .
1450	loadLabels returns the labels for the given repository .
1451	kill kills a repository .
1452	create creates new repository .
1453	classifyLabels takes a set of labels and returns a map of new labels if necessary .
1454	linkify cleans up a single link
1455	NewCache creates a cache
1456	KeyToPath returns the path to the given key
1457	ensureDir ensures the directory exists .
1458	Put adds content to the cache
1459	Get populates the cache with the given key .
1460	Delete removes a key from cache .
1461	NewGCSArtifact creates a new GCSArtifact object
1462	Size returns the size of the artifact
1463	ReadAll reads the artifact from the GCS artifact .
1464	ReadTail implements the io . Reader interface
1465	gzipped returns whether the artifact is gzipped
1466	optionsForRepo returns the plugins welcome for the given repository .
1467	List lists all ProwJobs in the indexer .
1468	ProwJobs returns an object that can list and get ProwJobs .
1469	List lists all ProwJobs in the indexer for a given namespace .
1470	RunAgainstAllBranch returns true if this branch is a no - op .
1471	Intersects checks whether this Brancher intersects other .
1472	ShouldRun determines whether the change list should run .
1473	RunAgainstChanges returns true if the RegexpChangeMatcher matches the regular expression changes
1474	CouldRun returns true if the postsubmit is a run .
1475	ShouldRun determines whether the postsubmit should run .
1476	CouldRun returns true if the ref can be run .
1477	ShouldRun returns true if we should run the given changes .
1478	GetPresubmit gets a presubmit by jobName
1479	SetPresubmits sets the job s resubmits .
1480	SetPostsubmits sets a map of postsubs to jobs
1481	AllPresubmits returns all of the Presubmits from the JobConfig .
1482	AllPostsubmits returns a slice of all postsubmits to the job configuration .
1483	AllPeriodics returns a list of all Periodic instances
1484	ClearCompiledRegexes clears the RegexpChangeMatcher .
1485	Empty returns true if the config is empty
1486	NewClient creates a new git client .
1487	ExpandAlias expands the given alias if any .
1488	ExpandAliases returns a new set of logins that contain the given aliases .
1489	ParseFullConfig parses a YAML into a FullConfig .
1490	ParseSimpleConfig parses a simple yaml bytes into a SimpleConfig struct .
1491	decodeOwnersMdConfig decodes the configuration from a file .
1492	findOwnersForFile returns the owner for the given file path .
1493	FindApproverOwnersForFile returns the owner for the given file
1494	FindReviewersOwnersForFile returns the name of the reviewers owned by the given file .
1495	FindLabelsForFile returns the set of labels for a given file
1496	IsNoParentOwners returns true if path is no parent owners
1497	Ratio returns the ratio of the coverage .
1498	FromPayload loads the PeriodicProwJobEvent from JSON
1499	ToMessage converts PeriodicProwJobEvent to pubsub message
1500	UnmarshalText implements the encoding . TextUnmarshaler interface
1501	compileApplicableBlockades compiles a list of blocked plugins .
1502	calculateBlocks calculates the summary of the pull request changes .
1503	MergeMultipleProfiles merges multiple profiles into one .
1504	AddFlags adds flags related to Options .
1505	processNextItem processes the next item from the queue
1506	handleErr handles an error item
1507	AggregateFilter returns a filter that aggregates the given filters .
1508	FilterPresubmits returns a slice of presubmits that match given filter .
1509	MakeCommand returns the OpenShift cli command
1510	Push adds an issue event to the heap .
1511	Pop implements heap . Interface .
1512	NewFakeOpenPluginWrapper creates a new FakeOpenPluginWrapper
1513	ReceiveIssue is part of the interface implementation
1514	Validate validates the options .
1515	Complete completes the options
1516	Set sets the value of the orgRepoFormat
1517	ensure makes sure the specified binary is available
1518	output runs the command and returns its output .
1519	Returns a list of project names .
1520	selectProject is a helper function to select a single project
1521	createCluster creates a new cluster
1522	createContext is used to create a GKE cluster
1523	contextConfig loads the kubectl config .
1524	selectContext returns a string representing the current context
1525	applyCreate runs kubectl create command
1526	determineSkippedPresubmits determines whether to skip job should be skipped .
1527	Dispatch publishes points to the database .
1528	CreateIssue creates a new issue .
1529	CreateStatus creates the status of a repository .
1530	ForEachPR lists all PRs in the repository .
1531	GetCollaborators gets the collaborators for the given organization .
1532	GetCombinedStatus returns the current merged status of a repository .
1533	GetIssues retrieves all issues for given repository .
1534	GetRepoLabels returns list of labels for given repository .
1535	GetUser gets a user
1536	Verify if config is valid
1537	createSystemdLogfile creates the journalctl logs for the given service .
1538	createFullSystemdLogfile creates the logfile to the given directory .
1539	createSystemdLogfiles creates the logs for the given directory .
1540	prepareLogfiles sets up the logfiles for the node
1541	writeSuccessMarkerFile writes the marker file .
1542	MakeCommand returns a cobra command for junit
1543	warnDeprecated logs a warning message at the specified severity .
1544	Describe returns a human readable description of the request .
1545	TriggerFor returns the trigger for the given organization and repository .
1546	EnabledReposForPlugin returns the repositories for the given plugin
1547	EnabledReposForExternalPlugin returns the repos for the given external plugin
1548	SetDefaults sets defaults for the ConfigUpdater .
1549	validatePlugins returns an error if the plugin configuration is invalid .
1550	ShouldReport returns true if the provided ProwJob should be stopped .
1551	Run runs a record in the specified directory .
1552	PathForRefs returns a path for the given refs .
1553	gitCtxForRefs returns a shallow copy of the refs
1554	commandsForBaseRef returns a list of commands for the specified ref .
1555	gitTimestampEnvs returns the set of env variables that are git_AUTHOR_DATE
1556	gitRevParse parses git - rev - parse and returns the result .
1557	commandsForPullRefs returns a list of commands that need to pull .
1558	ProduceCovList produces a copy of the CoverageList .
1559	popRandom pops random string from set
1560	resolve attempts to resolve the experimental kubernetes options
1561	ProwJobClientset implements the Proc interface for ExperimentalKubernetesOptions .
1562	ProwJobClient returns a ProwJobClient for the given namespace and namespace
1563	InfrastructureClusterClient is part of the EnterpriseClusterOptions interface .
1564	BuildClusterClients returns a map of buildClusterClients for the given namespace .
1565	Age returns the age of the active state
1566	ReceiveEvent returns an InactiveState for the given event and label .
1567	ReceiveEvent waits for an active event and returns a State for it .
1568	Active returns true if all states are active
1569	Age returns the minimum age of the multi state .
1570	ReceiveEvent waits for the event to be received and returns the State .
1571	ProwJobs returns a ProwJobInformer .
1572	ItemToResourcesConfig converts Item to ResourcesConfig .
1573	Copy returns a deep copy of the TypeToResources object
1574	MakeCommand creates a new cobra . Command for this command
1575	incrementNumPendingJobs increments the number of pending jobs for a given job .
1576	setPreviousReportState sets the previous report state for the repository .
1577	SyncMetrics is used to get all the current jobs .
1578	DumpProfile dumps a profile to the writer .
1579	blocksEqual compares two profile blocks .
1580	NewProwJobInformer constructs a new informer for ProwJob type . Always prefer using an informer factory to get a shared informer instead of getting an independent one . This reduces memory footprint and number of connections to the server .
1581	NewFilteredProwJobInformer constructs a new informer for ProwJob type . Always prefer using an informer factory to get a shared informer instead of getting an independent one . This reduces memory footprint and number of connections to the server .
1582	New creates a new spyglass .
1583	Lenses returns a list of lens names from matchCache
1584	JobPath returns the full path of the build .
1585	RunPath returns the path from the source
1586	ExtraLinks fetches the extra links from the specified source .
1587	needDemux returns a list of external plugins that match the source repository
1588	deployExternal dispatches an external plugin to the list of external plugins .
1589	dispatch sends an HTTP request to the server .
1590	AddFlags adds flags to the state
1591	CheckFlags confirms that the plugin is valid .
1592	ReceiveIssueEvent receives an issue event .
1593	Load recursively loads and validates the configuration .
1594	loadConfig loads the config from the given jobConfig .
1595	yamlToConfig unmarshals the given path into the yaml file
1596	ReadFileMaybeGZIP tries to read a GZIP file .
1597	finalizeJobConfig sets default values for the job config
1598	validateComponentConfig returns an error if the configuration is invalid .
1599	ConfigPath returns the default configuration path .
1600	ValidateController validates a Controller .
1601	defaultJobBase sets default values for a JobBase
1602	SetPresubmitRegexes sets the presubmitRegexes field of presubmit .
1603	setBrancherRegexes builds a new Brancher from a brancher .
1604	SetPostsubmitRegexes sets the postsubmit regexes for this postsubmit .
1605	Body returns the body of the requested artifacts .
1606	NewBoskosHandler returns a new boskos handler
1607	ErrorToStatus converts an error to an http status code .
1608	DumpProfile dump profile to destination .
1609	LoadProfile loads a profile from disk .
1610	NewClient creates a new git client .
1611	SetCredentials sets the credentials for the client
1612	Checkout changes the commit to the repository .
1613	CheckoutNewBranch checks and adds a new branch to repository .
1614	Merge attempts to merge the given commit object .
1615	CheckoutPullRequest attempts to pull a repository .
1616	Config runs the git config command .
1617	retryCmd runs the command in the specified directory and returns the result .
1618	LabelsAndAnnotationsForSpec returns a map of labels to job name and extraAnnotations for the spec
1619	ProwJobToPod converts a ProwJob to a coreapi . Pod .
1620	CloneLogPath returns a path to the given volumeMount
1621	cloneEnv returns a copy of the given config .
1622	sshVolume creates a new volume from a secret
1623	InjectEntrypoint adds an entrypoint to a container .
1624	PlaceEntrypoint creates an entrypoint from an image
1625	kubeEnv creates a list of environment variables from a map of environment names .
1626	Client implements the KubernetesOptions interface for KubernetesOptions .
1627	handle handles an event .
1628	SendHook sends a webhook request
1629	janitorClean cleans the specified resource .
1630	janitor is a helper function to release the resource .
1631	Run starts the pull server
1632	specToStarted returns gcs . Start for the given job spec
1633	Run runs the command
1634	hasPRChanged returns true if pull request action has changed .
1635	UpdateIssues updates the issues in the database .
1636	handleReviewEvent handles a review event .
1637	findAssociatedIssue tries to find an associated issue in the given body
1638	optionsForRepo returns the Approve for the given repository .
1639	localOnlyMain is the main entry point for github - login .
1640	summarize generates information about the coverage list .
1641	Subset returns a new CoverageList with the given prefix .
1642	ListDirectories returns a list of all available directories
1643	readRequest reads an admission request from r .
1644	handle responds to the HTTP request .
1645	writeResponse writes a response to the given writer .
1646	Only update status update status
1647	convertSuiteMeta converts the given suiteMeta into a resultstore . SuiteMeta
1648	NewHealth returns a new instance of Health
1649	ServeReady serves the healthz .
1650	NewController creates a new controller .
1651	newExpectedContext returns a context with the expected status information .
1652	contextutes a list of Context names .
1653	filterSubpools returns a map of sub - pools that are filtered by the given keys .
1654	filterSubpool removes the given subpool from the github client .
1655	poolPRMap converts a map of subpool to pull requests
1656	failedushedContexts returns a slice of missing contexts from the given context .
1657	Ascumulate takes a list of presubmits and generates a list of PullRequest objects and a set of PullRequest objects and returns the results .
1658	tryMerge tries to merge into a single branch . If the merge function returns an error it returns true .
1659	prChanges returns a function to get changes from pull request .
1660	prune removes any cached changes .
1661	Divide a pool
1662	AggregateProfiles aggregates profiles into a single slice .
1663	countToBoolean converts the slice to a slice of profiles .
1664	NewStorage creates a new storage layer
1665	AddResource adds a new resource .
1666	DeleteResource deletes a resource
1667	UpdateResource updates a resource .
1668	GetResource implements Storage . GetResource .
1669	GetResources implements Storage . GetResources .
1670	SyncResources syncs the resources in the storage .
1671	ParseConfig reads the configuration from the given path .
1672	coblemsInFiles returns a map of problems in the repository .
1673	NewPodLogArtifact creates a new PodLogArtifact
1674	CanonicalLink returns a canonical link for the PodLogArtifact
1675	ReadAt implements the PodLogArtifact interface .
1676	ReadAll reads all logs from the artifact
1677	ReadAtMost implements the PodLogArtifact interface for PodLogArtifact .
1678	ReadTail is part of the PodLogArtifact interface .
1679	newProblems takes a list of problems and returns a map of Problem objects .
1680	problemicsInFiles returns a map of problems in the repository .
1681	undoPreset is used to undo a preset
1682	undoPresubmitPresets applies the given preset to the config . Presubmit .
1683	yamlBytesStripNulls is like yamlBytesStripNulls
1684	monitorDiskAndEvict is used to monitor the disk and evictUntilPercentBlocksFree interval
1685	difference gets the difference between two repositories .
1686	union returns the union of two repositories .
1687	clearStaleComments clears all stale comments in the repository .
1688	determineReleaseNoteLabel determines the release note label
1689	getReleaseNote extracts the release note from the body .
1690	NewClient creates a new Client .
1691	Acquire acquires a resource .
1692	ReleaseOne is used to release a single resource
1693	UpdateAll updates all metadata for a user .
1694	GetGitHubClient returns a new github client
1695	GetUsername returns the username of the user
1696	CreateTokenHandler creates a TokenHandler
1697	CreateTokenHandlers creates tokens from a list of tokens
1698	String returns the string representation of the indentifier .
1699	TerminateOlderPresubmitJobs terminate the presubmit job
1700	PushMetrics pushes metrics into a metrics pusher
1701	RateLimiter creates a new rate limiter for controller .
1702	checkExistingStatus checks the status for the current pull request
1703	checkExistingLabels checks if repository exists in repository .
1704	handle checks to see if the commits are missing .
1705	MarkdownSHAList creates a markdown SHAAList from a list of commits .
1706	PathForSpec returns the path for a given repo spec
1707	AliasForSpec returns the alias for the given job spec .
1708	RootForSpec returns the root path for the given job spec
1709	NewSingleDefaultRepoPathBuilder returns an empty RepoPathBuilder
1710	NewExplicitRepoPathBuilder creates a new RepoPathBuilder .
1711	RegisterSourceOrDie registers an IssueSource or panics .
1712	CreateAndSync is the same as CreateAndSync but syncs from source .
1713	loadCache loads the cache of the current user .
1714	setIntersect removes elements from a and returns filtered list
1715	sync determines whether the given issue is sync or not .
1716	GetAWSCreds extracts the credentials from an AWS Resource
1717	scope returns a channel that will be closed when SIGTERM is received .
1718	newPipelineConfig creates a new pipeline config
1719	KubeClient returns a new kubernetes api client
1720	ProwJobClient implements KubernetesClientOptions .
1721	resolveSymLink reads the given symLink from the bucket .
1722	readJSON - decodes JSON data into object .
1723	listSubDirs lists all subdirectories in bucket .
1724	List all objects in a bucket .
1725	listBuildIDs recursively lists the GCS keys in the bucket .
1726	FilterProfilePaths returns a list of profiles that match the provided paths .
1727	LoadSecrets loads secret values from paths .
1728	LoadSingleSecret will load a secret file from disk
1729	Set sets the value of a bool .
1730	NewOpener returns a new Openener
1731	IsNotExist returns true if the given error is a NotExist error .
1732	LogClose closes the given io . Closer .
1733	Writer opens a GCS file .
1734	InitGitHubOAuthConfig initializes GitHubOuthConfig
1735	DeltaDisplayed returns a human - readable description of the change .
1736	makeTable takes a new set of CovList and returns a string representing whether it changed .
1737	ContentForGitHubPost generates the output for a GitHub post
1738	AddFlags registers flags for the cli command
1739	CheckFlags validates client flags
1740	getGitHubClient returns github client .
1741	LimitsCheckAndWait checks if rate limits are reached
1742	FetchIssues fetches issues from the given channel .
1743	hasID returns true if the given issue events have the given ID .
1744	FetchIssueEvents fetches issue events from the given channel .
1745	isPRChanged returns true if pull request action is changed .
1746	NewFetcher creates a new Fetcher .
1747	fetchRecentIssues retrieves issues from the database .
1748	fetchRecentEventsAndComments retrieves the issue - events and comments from the database .
1749	Fetch retrieves events from database
1750	Issues returns the list of issues for the given job .
1751	Title returns a human - readable description of the flaky job .
1752	Labels returns a list of label names
1753	ReadHTTP is a wrapper around http . ReadHTTP
1754	String returns a string representation of the lines .
1755	NewJobSpec creates a new JobSpec .
1756	ResolveSpecFromEnv returns JobSpec from environment variable
1757	EnvForSpec returns a map of environment variables for a job spec
1758	EnvForType returns a list of environment variables for a given job type .
1759	getRevisionFromRef returns the revision from the refs
1760	GetRevisionFromSpec gets the revision from a JobSpec
1761	helpProvider returns a pluginHelp implementation for the plugin .
1762	load loads the file from the given reader .
1763	loadPaths loads the paths from the given reader .
1764	Match returns true if the path matches the path .
1765	CreateDatabase creates a new InfluxDB instance .
1766	mergeTags merges default tags into a new one
1767	tagsToWhere returns a WHERE clause for the given tags .
1768	Push creates a new InfluxDB point with the specified tags and fields .
1769	ifact fetches and returns a lens . Artifact for the requested pod log .
1770	serve serves prometheus requests
1771	gankGatherer sends metrics to the logger
1772	makeRequest creates a branch protection request .
1773	makeReviews creates a new GitHubPullRequestReviews object from the given ReviewPolicy .
1774	Header generates a custom header for the lens view
1775	Callback is part of the lens . Artifact interface
1776	logLinesAll reads log lines from artifact .
1777	executeTemplate executes a template and returns the result .
1778	DeepCopyObject returns a copy of this resource object .
1779	FromItem assigns an item to a resource .
1780	SetItems sets the items in the ResourceCollection
1781	DeepCopyObject returns a copy of this ResourceCollection .
1782	useContext uses the specified context .
1783	currentContext executes the current - context command
1784	command is a wrapper around exec . Command .
1785	describeCluster returns the describe description of a container
1786	Set implements the flag . Value interface .
1787	parseXML parses the XML body into gcsDir
1788	Render the gcs folder
1789	Render renders the record .
1790	Render a prefix .
1791	Printf implements the fmt . Printf interface .
1792	NewClient creates a new GCE client .
1793	SetReview is part of the Gerrit interface .
1794	GetBranchRevision returns the revision for a given branch
1795	queryAllChanges returns a list of changes for the given project .
1796	NewTypeFilterWrapperPlugin creates a TypeFilterWrapperPlugin from a given plugin .
1797	AddFlags adds flags to the type filter
1798	CheckFlags returns an error if the plugin is not valid .
1799	AddFlags adds flags related to KubernetesClient for controller manager to the specified FlagSet .
1800	Validate checks validation of KubernetesClientOptions .
1801	Client returns a client for the specified type .
1802	newCRDClient creates a rest client
1803	createRESTConfig creates the rest . Config for kubeconfig .
1804	registerResource registers a resource .
1805	newDummyClient returns a new dummyClient .
1806	Update updates the dummy object
1807	TrustedPullRequest implements the TrustedPullRequest interface .
1808	buildAll builds all the pending jobs .
1809	Run executes the Options command .
1810	AddConfig adds the resource config to storage .
1811	DeleteConfig deletes the named config .
1812	UpdateConfig updates the storage s configuration .
1813	GetConfig implements Storage . GetConfig
1814	GetConfigs is defined on the Storage interface .
1815	SyncConfigs syncs configs from the storage .
1816	addKnownTypes adds known types to scheme .
1817	NewController returns a new Controller .
1818	Run is the main loop of Controller
1819	addedBlockingPresubmits takes a set of presubmits and returns a map of blocked presubmits .
1820	removeBlockingPresubmits returns a map of blocking presubmits to repository .
1821	migratedBlockingPresubmits takes a set of presubmits and returns a map of blocked presubmits .
1822	Load config from environment variables
1823	canExecuteConcurrent returns true if the given ProwJob can be executed by the given ProwJob .
1824	getJenkinsJobs takes a list of ProwJob and returns a list of Jsonnetes
1825	terminateDupes cancels all pending jobs .
1826	Throttle throttles the client
1827	NewClientWithFields returns a client with the given fields .
1828	NewClient creates a new GraphQL client .
1829	NewDryRunClient creates a new DryRunClient .
1830	NewFakeClient returns a new Github client .
1831	request performs a request and unmarshals the response into a status code .
1832	requestRaw is used to handle raw requests
1833	getUserData retrieves information about the bot .
1834	readPaginatedResultsWithValues is the same as ReadPaginatedResults but reads the results from the path .
1835	UpdatePullRequest updates a pull request .
1836	getLabels retrieves a list of labels for the given path .
1837	stateCannotBeChangedOrOriginalError is like stateCannotBeChangedOrOriginalError except that it returns the original error .
1838	IsMergeable implements the PullRequest interface .
1839	Token is part of the oauth2 . TokenSource interface .
1840	ListArtifacts returns a list of artifact names
1841	KeyToJob returns the job name and buildID .
1842	prowToGCS returns the job URL to use for the given job key
1843	FetchArtifacts fetches artifacts from the given source .
1844	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new DecorationConfig .
1845	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new GCSConfiguration .
1846	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new JenkinsSpec .
1847	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new ProwJob .
1848	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new ProwJobList .
1849	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new ProwJobSpec .
1850	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new ProwJobStatus .
1851	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new Pull .
1852	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new Refs .
1853	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new UtilityImages .
1854	upload uploads the specified test .
1855	ApplyDefault returns a new DecorationConfig with default values .
1856	Validate validates the DecorationConfig .
1857	ApplyDefault applies default values to a given utility images .
1858	ApplyDefault returns a new GCSConfiguration with default values .
1859	Validate validates the GCS configuration
1860	ClusterAlias returns the name of the cluster alias for this job
1861	NewResource creates a new resource .
1862	NewResourcesFromConfig creates a new resource from an ConfigEntry
1863	UserDataFromMap creates a UserData from a map
1864	Set implements the flag . Value interface .
1865	UnmarshalJSON - decodes JSON data to UserData .
1866	Extract loads the UserData from the given id .
1867	Set is part of the interface .
1868	Update the UserData with new values
1869	ToMap converts UserDataMap to UserDataMap
1870	FromMap populates UserDataMap
1871	ItemToResource converts an Item into a Resource .
1872	Run executes the Options command .
1873	addSSHKeys adds new ssh - agent keys to the specified paths .
1874	Issor fetches all issues from the TriageFiler .
1875	loadClusters loads the clusters from a JSON file .
1876	parseTriageData parses the triage data from JSON .
1877	topClusters takes a list of clusters and returns a slice of clusters .
1878	topJobsFailed returns a list of jobs in the cluster .
1879	Title returns a human - readable description of the cluster .
1880	Labels returns the labels of the cluster
1881	New creates a new cron job
1882	QueuedJobs returns all the jobs that have been queued
1883	HasJob checks if a job exists
1884	addJob adds a cron job to the cron agent
1885	removeJob removes a job from the cron agent .
1886	UpdateComments updates issue comments .
1887	GatherProwJobMetrics is used to gather the metrics for a set of jobs
1888	Section 12 . 2 . 2 . 5 . 5
1889	newGCSJobSource creates a new job source .
1890	Returns the artifacts for a given GCS artifact .
1891	canonicalLink returns the canonical link to the source .
1892	jobPath returns the path to the GCS job .
1893	targetURL returns the target URL for the pull request .
1894	newBuildConfig creates a new BuildConfig .
1895	NewClient creates a new github client
1896	retry attempts to retry the given action until it succeeds .
1897	depaginate is a shortcut for depaginate
1898	NewHelpAgent creates a new HelpAgent .
1899	GeneratePluginHelp generates and returns plugin help .
1900	getPullCommitHash returns the last commit hash of a given string
1901	listJobBuilds lists all builds for a given job .
1902	getPRBuildData returns a list of buildData for the given job builds .
1903	getGCSDirsForPR returns the path to the GCS configuration for the given repository .
1904	imageDeleteFromDisk deletes the specified image from disk .
1905	doNetworksCreate creates a network
1906	networkLoadByName loads a network from the cluster .
1907	Transaction adds a transaction to the node .
1908	ForLocalInspectionWithPreparedStmts is a helper for ForLocalInspection .
1909	SetDefaultTimeout sets the default timeout for dqlite .
1910	Transaction performs a transaction on the cluster .
1911	EnterExclusive establishes a exclusive lock on the cluster db .
1912	ExitExclusive will exit an exclusive lock on the cluster db .
1913	Close closes the cluster
1914	TxCommit commits the transaction .
1915	ParseRemote parses the config from the config and returns the defaultRemote if any .
1916	GetContainerServer is part of the ContainerServer interface .
1917	GetImageServer returns an lxd . ImageServer by name .
1918	initAppArmor initializes the apparmor configuration from the OS .
1919	appArmorCanStack checks if the stack is supported by apparmor .
1920	containerDeviceAdd adds the device to the container server
1921	profileDeviceAdd adds the device to the container
1922	ensureImageAliases ensures that the image aliases are created
1923	GetExistingAliases returns a list of aliases in the list of aliases
1924	String representation of StatusCode
1925	ImagesGetExpired returns the images that have expired .
1926	ImageSourceInsert inserts an existing image into the database .
1927	ImageSourceGet gets the image source for a given image ID
1928	ImageExists checks if a specified image exists in the cluster
1929	ImageGet gets an image from the cluster .
1930	ImageGetFromAnyProject returns the image with the given fingerprint .
1931	imageFill fills image with values from image_properties
1932	ImageLocate returns the location of the node identified by fingerprint .
1933	ImageAssociateNode associates a node with the specified fingerprint .
1934	ImageDelete deletes an image .
1935	ImageAliasesGet returns a list of all images in the specified project .
1936	ImageAliasGet returns an image alias entry .
1937	ImageAliasRename renames an existing image .
1938	ImageAliasDelete deletes an image by name .
1939	ImageAliasesMove moves image aliases to destination .
1940	ImageAliasAdd adds a new image to a project .
1941	ImageAliasUpdate updates an existing image .
1942	ImageLastAccessUpdate updates the last access update of the specified image .
1943	ImageLastAccessInit initializes the database for last use and fingerprint .
1944	ImageUpdate updates an existing image .
1945	ImageInsert inserts a new image into the cluster
1946	ImageGetPools returns a slice of pool ids
1947	ImageGetPoolNamesFromIDs gets a list of pool names from a list of pools
1948	ImageUploadedAt sets the image s uploaded date .
1949	ImagesGetOnCurrentNode gets the images on the current node
1950	ImagesGetByNodeID returns a map of images by node ID .
1951	ImageGetNodesWithImage returns a slice of nodes with a fingerprint
1952	ImageGetNodesWithoutImage returns a slice of nodes without fingerprint
1953	Add adds a new task to the group .
1954	Start starts the Group .
1955	Returns true if zfs is enabled
1956	zfsToolVersionGet runs zfsToolVersionGet
1957	zfsModuleVersionGet returns the zfs module version
1958	create zofs pool volume
1959	zfsPoolVolumeExists returns true if the volume exists
1960	NetworkIDsNotPending returns a map of network IDs not pending .
1961	NetworkConfigAdd is part of the NetworkConfig interface .
1962	NetworkNodeJoin is part of the cluster . NetworkNodeJoin interface .
1963	NetworkCreatePending creates a new network .
1964	NetworkCreated is part of the NetworkTx interface .
1965	NetworkErrored is part of the Network interface .
1966	NetworkGet gets a network by name .
1967	networkNodes returns a list of nodes in the cluster .
1968	NetworkGetInterface gets the interface with the given devName
1969	NetworkConfigGet gets a network configuration by ID .
1970	NetworkCreate creates a new network .
1971	NetworkUpdate updates an existing network .
1972	NetworkUpdateDescription updates an existing description .
1973	NetworkConfigClear clears the state of a network_config .
1974	NetworkDelete removes a network from the cluster .
1975	NetworkRename renames an existing network .
1976	GetContainers returns a list of all containers
1977	GetContainersFull returns the list of containers full .
1978	GetContainer retrieves a container by name .
1979	CreateContainerFromBackup creates a container from a backup
1980	CreateContainer creates a new container
1981	CreateContainerFromImage creates a container from the given image .
1982	UpdateContainer updates a container .
1983	RenameContainer attempts to rename a container .
1984	ExecContainer executes the specified container
1985	GetContainerFile returns a stream of the contents of a container
1986	CreateContainerFile - Create a container file .
1987	Delete a file
1988	GetContainerSnapshotNames returns a list of the names of a container
1989	Get container snapshots
1990	Get a container snapshot
1991	CreateContainerSnapshot creates a new container snapshot
1992	MigrateContainerSnapshot performs a migration of a container
1993	UpdateContainerSnapshot updates a container .
1994	GetContainerState retrieves a container state
1995	UpdateContainerState updates the state of a container .
1996	GetContainerLogfiles returns a list of container logs
1997	GetContainerLogfile retrieves a logfile from the LXD
1998	GetContainerMetadata retrieves the metadata for a container
1999	SetContainerMetadata sets the metadata for a container
2000	GetContainerTemplateFiles returns a list of all the files for a container
2001	CreateContainerTemplateFile sets the content of a container
2002	DeleteContainerTemplateFile deletes a container template file
2003	ConsoleContainer retrieves information about a container
2004	GetContainerConsoleLog retrieves the console log from the server .
2005	DeleteContainerConsoleLog removes the console log for the given container .
2006	GetContainerBackups returns a list of all backups for a container
2007	GetContainerBackup retrieves a container backup
2008	CreateContainerBackup creates a new container backup
2009	RenameContainerBackup creates a backup of a container
2010	DeleteContainerBackup deletes a container backup
2011	GetContainerBackupFile returns a file for a container
2012	RsyncSend sends a rsync request to the specified server .
2013	patches get names
2014	copied from the daemon
2015	copied from config files
2016	GetHTTPClient returns the HTTP client .
2017	send request
2018	RawQuery performs a raw query
2019	RawWebsocket returns a new websocket connection .
2020	RawOperation is part of the LXD interface
2021	ProfileToAPI creates an api . Profile from a profile
2022	Profiles returns a list of all the profiles in the cluster
2023	ProfileGet gets a profile by name .
2024	ProfilesGet returns a list of profiles for the specified project .
2025	ProfileConfig gets the profile config for a project
2026	ProfileConfigClear clears the profiles_device_device_id .
2027	ProfileConfigAdd adds a config to the database .
2028	ProfileContainersGet returns a map of container names to the specified profile .
2029	ProfileCleanupLeftover removes the profiles from the database .
2030	ProfilesExpandConfig takes a config map and returns a map of profiles
2031	ProfilesExpandDevices returns the devices expanded from the input profiles .
2032	GetServer returns the server
2033	UpdateServer is part of the LXD interface .
2034	HasExtension returns true if the given extension is supported
2035	GetServerResources retrieves the server s resources .
2036	UseProject sets up a new container server
2037	sqliteOpen opens a database at the specified path .
2038	Rebalbalance returns a list of Raft nodes that have been re - aligned to .
2039	Promote is used to promote a node to a node
2040	Purge removes a node from the cluster .
2041	List returns a list of raft nodes .
2042	Count returns the number of nodes in the state .
2043	Enabled returns whether or not the node is enabled .
2044	MembershipCheckNodeStateForBootstrapOrJoin is a part of the raft . Node interface .
2045	MembershipCheckClusterStateForBootstrapOrJoin returns an error if the node is not in the cluster .
2046	MembershipCheckClusterStateForAccept returns an error if the cluster state for the given address is invalid .
2047	MembershipCheckClusterStateForLeave checks if the node is in the cluster .
2048	MembershipCheckNoLeftoverClusterCert checks if the certificate exists in dir .
2049	ConfigLoad loads the config from the database .
2050	Replace replaces a map with values .
2051	Patch applies a patch to the configuration .
2052	HTTPSAddress returns the HTTPS address for a node .
2053	CertificatesGet returns a list of all certificates in the cluster .
2054	CertificateGet returns information about a certificate .
2055	CertSave saves a certificate .
2056	CertDelete removes a certificate from the database .
2057	CertUpdate updates a certificate
2058	createDevLxdlListener creates a listener for the given directory .
2059	Servers implements the Instance interface .
2060	Shutdown gracefully shuts down the instance .
2061	raftNetworkTransport creates a raft . Transport for a raft node .
2062	raftConfig creates a raft . Config with the default values .
2063	raftMaybeBootstrap is used to bootstrap a raft cluster
2064	CPUResource returns the resources . ResourcesCPU for the CPU .
2065	MemoryResource returns information about the memory .
2066	GetOperationUUIDs is part of the LXD interface
2067	GetOperations returns all operations
2068	GetOperation retrieves a single operation
2069	GetOperationWebsocket returns a websocket connection for the given UUID
2070	tryMount tries to mount a file .
2071	ldxdUsesPool checks if the pool name and on disk pool name matches on disk pool name
2072	ProjectURIs returns a list of URIs that match the provided filter .
2073	ProjectList returns all projects matching a filter .
2074	ProjectGet gets a project by name .
2075	ProjectExists checks if a project exists in the cluster
2076	ProjectCreate creates a project .
2077	ProjectUsedByRef gets a list of projects used by a given filter
2078	ProjectRename renames a project
2079	ProjectDelete deletes a project .
2080	PasswordCheck checks if the password is valid
2081	LoadCert tries to load a cert for the given directory .
2082	WriteCert writes certificate and ca to dir .
2083	NewDaemon creates a new daemon .
2084	DefaultDaemon returns a new initialized daemon .
2085	AllowProjectPermission allows a user to access the specified feature .
2086	checkTrustedClient returns an error if the client is not authorized
2087	Authenticate checks if the request is valid
2088	State returns the current daemon state .
2089	UnixSocket returns the unix socket
2090	Stop gracefully shuts down the database .
2091	setupExternalAuthentication configures external authentication .
2092	initializeDbObject initializes lxd . Dump .
2093	WriteJSON encodes and writes a JSON response .
2094	EtagHash returns etag hash of data
2095	EtagCheck checks if the data is an EtagHash
2096	HTTPClient returns an HTTP client for the specified certificate .
2097	IsRecursionRequest returns true if the request is a recursion .
2098	GetListeners returns net . Listener of net . Listener
2099	internalSQLGet retrieves the current database .
2100	internalSQLPost posts the request to the internal SQL query
2101	PublicKey returns PEM - encoded public key
2102	PrivateKey returns PEM - encoded RSA private key
2103	Fingerprint returns the fingerprint of the certificate
2104	GenCert generates a new cert .
2105	PrintServerInfo prints information about the container server .
2106	LaunchContainers launches a container .
2107	CreateContainers creates containers
2108	GetContainers returns a list of all containers in the given container .
2109	StartContainers starts the specified containers .
2110	setQueryParam sets the value of a query parameter .
2111	GetImages returns a list of all images
2112	GetImageFile returns image file
2113	GetImageSecret retrieves an image secret by fingerprint
2114	GetPrivateImage returns the private image for the specified fingerprint .
2115	GetPrivateImageFile retrieves a file from the local filesystem
2116	GetImageAliases returns a list of all image aliases
2117	tryCopyImage performs a copy of the specified images post
2118	CopyImage copies image from source to image server
2119	UpdateImage updates an image .
2120	DeleteImage deletes the image identified by fingerprint .
2121	RefreshImage refreshes an image .
2122	CreateImageAlias creates an image alias
2123	UpdateImageAlias updates an existing image alias .
2124	RenameImageAlias renames an image alias
2125	DeleteImageAlias deletes an image alias
2126	Open opens the named database .
2127	EnsureSchema is part of the Database interface .
2128	FilesystemDetect returns the name of the filesystem for the given path .
2129	Schema creates a new schema .
2130	updateFromV37 fetches the raft nodes from the v3 table .
2131	SchemaGetLocal returns the architecture name
2132	NewController returns a new MAAS Controller .
2133	CreateContainer creates a container
2134	DefinedContainer is defined on the container interface .
2135	UpdateContainer deletes an existing container .
2136	RenameContainer renames a container
2137	DeleteContainer deletes a container
2138	Add adds a new update to the schema .
2139	ensureSchemaTableExists checks if a schema table exists in the database .
2140	queryCurrentVersion returns the current version of the transaction .
2141	ensureUpdatesAreApplied applies updates to the database .
2142	checkSchemaVersionsHaveNoHoles checks for missing versions .
2143	checkAllUpdatesAreApplied returns an error if the updates are not in the database .
2144	formatSQL replaces the SQL statement with newlines .
2145	GetAllXattr returns all extended attributes .
2146	GetErrno returns errno if the error is errno .
2147	Uname creates a Utsname from a Utsname .
2148	RegisterStmt registers SQL statement
2149	PrepareStmts takes a prepared statement and returns a map of SQL statements .
2150	NewGateway creates a new dqlite gateway .
2151	DialFunc returns a dqlite . DialFunc
2152	Shutdown shuts down the database gateway .
2153	Sync flushes the database to disk .
2154	Reset resets the certificate pool
2155	LeaderAddress returns the address of the raft cluster
2156	waitLeadership waits for the raft leader to be elected
2157	currentRaftNodes returns the current Raft nodes .
2158	cachedRaftNodes retrieves the raft nodes from the database .
2159	dqliteMemoryDial returns a dial function for dqlite . Dial .
2160	DqliteLog writes a log message to dqlite .
2161	MetadataAsMap returns the metadata as a map
2162	MetadataAsOperation returns the metadata operation
2163	MetadataAsStringSlice returns the metadata as a slice of strings
2164	MetadataAsStruct unmarshals a struct into a struct
2165	Load the CSV report
2166	Write writes the CSV report to the file .
2167	AddRecord adds a record to the report .
2168	LoadConfig loads a Config from a file .
2169	SaveConfig saves the configuration at the given path .
2170	Get returns an io . Reader for the given path .
2171	ConfigPath returns a path to the configuration directory .
2172	ServerCertPath returns the path to the remote server certificate .
2173	NewConfig creates a new Config .
2174	checkForPreDumpSupport determines whether we should use for pre - dump .
2175	preDumpLoop runs a pre - dump operation on the container .
2176	newRoot creates a new root command
2177	APIExtensionsCount return API extension count
2178	SelectURIs is a convenience wrapper around the gorp . SelectURIs function .
2179	SelectStrings selects a set of values from a transaction
2180	scanSingleColumn is used to scan a single column
2181	LazyHandler returns a handler for the given record .
2182	Callers returns a copy of the registered callers .
2183	name returns the name of the call .
2184	TrimBelow returns a trace with the trace removed .
2185	TrimAbove returns a trace with the trace removed .
2186	TrimBelowName returns a trace with the given name removed .
2187	TrimAboveName returns a trace with the given name removed .
2188	TrimRuntime removes all files from the runtime .
2189	GetCaps retrieves the capabilities of the given path .
2190	SetCaps sets the capabilities on the specified path .
2191	Read implements the io . Reader interface .
2192	Supported checks if the given path is supported
2193	GetProject returns a project identified by path .
2194	SetProject sets the project id at the specified path .
2195	DeleteProject deletes a project .
2196	GetProjectUsage returns the project usage for the given path .
2197	SetProjectQuota sets the quota for the specified path .
2198	backupLoadByName creates a backup from the given backup and name .
2199	backupCreate creates a backup .
2200	Rename renames a backup
2201	Delete deletes the backup .
2202	backupFixStoragePool fixes the storage pool info .
2203	Count returns the number of rows in a given table .
2204	CountAll returns a map of all the rows in the database .
2205	InitTLSConfig returns a tls . Config with default values
2206	copyContainerThinpool copies the container to the target container .
2207	copyContainerLv copies container v to target container
2208	copyContainer copies the container to the target container
2209	copyVolume copies the volume to the pool .
2210	GetPrivateImage is not supported
2211	GetPrivateImageFile is not supported
2212	GetImageAliasNames returns a list of all image aliases
2213	ProtoRecv retrieves a protobuf message from the websocket .
2214	ProtoSend sends a binary message .
2215	ProtoSendControl sends a migration control message .
2216	Read implements the io . Reader interface .
2217	doContainersGetFromNode tries to get containers from a node .
2218	Retry attempts to retry the database interaction .
2219	IsRetriableError returns true if err is a retriable error .
2220	AppArmorProfile returns the app armor profile
2221	StoragePoolVolumeCreate creates a new storage volume on the pool
2222	ContainerStorageReady returns true if the given container is ready to be used .
2223	ContainerCreateFromImage creates a new BTRFS storage volume from a storage pool
2224	ContainerSnapshotRename renames the BTRFS storage volume to newName .
2225	ContainerSnapshotCreateEmpty creates a new snapshot volume for a storage pool
2226	ltfsSubVolumesDelete deletes the volume from btrfs .
2227	isBtrfsSubVolume returns true if the subvolume is a btrfs subvolume .
2228	SelectConfig is a convenience function for SelectConfig .
2229	UpdateConfig updates the values in the database .
2230	deleteConfig removes the given keys from the given list .
2231	FormatSection takes a header and a string and formats it into a single line .
2232	GetProjects returns a list of all projects
2233	GetProject retrieves a project by name .
2234	CreateProject creates a new project .
2235	UpdateProject updates a project .
2236	RenameProject rename a project .
2237	Read implements io . Reader interface .
2238	Write implements io . Writer
2239	NewCanceler returns a new Canceler instance
2240	Cancelable returns true if the Canceler is cancelled .
2241	Cancel the Canceler
2242	CancelableDownload cancels a request .
2243	clusterGet returns information about the cluster .
2244	clusterGetMemberConfig returns the cluster member configuration for the cluster .
2245	clusterPutDisable is used to disable the cluster
2246	tryClusterRebalance attempts to reconnect to the cluster
2247	internalClusterPostRebalance posts a cluster to the Daemon
2248	internalClusterPostPromote is used to promote a cluster to a node
2249	Filters returns the list of objects that match entity .
2250	Parse returns a mapping for the given declaration .
2251	findStruct returns the type with given name or nil if not found .
2252	parseStruct parses a struct into a slice of fields .
2253	GetProfileNames returns a list of the profile names
2254	GetProfiles returns a list of profiles
2255	GetProfile retrieves a profile
2256	CreateProfile creates a profile on the host
2257	UpdateProfile updates a profile .
2258	RenameProfile renames a profile
2259	Load loads schema from schema .
2260	Dump returns a deep copy of the map
2261	GetRaw gets a value from the map .
2262	GetString returns a string if it exists in the map .
2263	GetBool gets a bool from the map .
2264	GetInt64 retrieves an int64 from the map .
2265	update takes a map and updates the values in the map .
2266	set sets the value for the given key .
2267	DoesSchemaTableExist checks if the schema table exists .
2268	selectSchemaVersions selects all the versions of a schema from the database .
2269	selectTablesSQL is a helper function to select a list of tables that match a view .
2270	createSchemaTable creates a new table .
2271	insertSchemaVersion inserts a new version in the database .
2272	NewState creates a new State .
2273	containerLXCUnload unload the containerLXC
2274	containerLXCInstantiate instantiates a new containerLXC instance .
2275	initStorage initializes the LXC .
2276	OnNetworkUp is defined on the Network interface .
2277	setupHostVethDevice sets up veth device
2278	getLxcState returns the state of the container
2279	StorageStartSensitive initializes the containerLXC if necessary .
2280	deviceExistsInDevicesFolder checks if a given device exists in the given path .
2281	createDiskDevice creates the device for the specified device
2282	Set network routes
2283	Path returns the full path of the container
2284	maasInterfaces returns a slice of interfaces for the containerLXC .
2285	getSystemHandler returns a log . Handler for the system
2286	findNvidiaMinor returns the device minor of the kernel .
2287	GetLogger creates a new logger
2288	SetLogger sets the logger
2289	WaitRecord blocks until the channel is closed .
2290	AddContext adds a logger to the context .
2291	NewDottedVersion creates a newottedVersion from a string .
2292	Parse parses a string into a DottedVersion struct
2293	String returns a string representation of the DottedVersion .
2294	Compare returns an integer indicating whether this DottedVersion is equal to or greater than other .
2295	projectCreateDefaultProfile creates the default profile on the given project .
2296	projectChange is used to change a profile .
2297	projectIsEmpty checks if a project is empty
2298	GetCertificateFingerprints returns a list of all certificate fingerprints
2299	GetCertificates returns a list of certificates
2300	GetCertificate retrieves the certificate with the given fingerprint .
2301	CreateCertificate creates a new certificate
2302	UpdateCertificate updates a certificate .
2303	DeleteCertificate deletes a certificate
2304	containerMetadataTemplatesGet returns a list of templates
2305	containerMetadataTemplatesPostPut is used to upload metadata templates to a container
2306	containerMetadataTemplatesDelete deletes the metadata templates from the container .
2307	getContainerTemplatePath returns the path to the container s templates .
2308	Error implements the error interface .
2309	Error implements the error interface for ErrorList .
2310	add adds an error to the list .
2311	UpdateSchema updates the schema of the cluster database .
2312	doProfileUpdateCluster is used to update a profile change
2313	doProfileUpdateContainer updates the container info for a profile .
2314	getProfileContainersInfo retrieves the list of containers for a profile .
2315	Get network names
2316	GetNetworks returns a list of networks
2317	Get a network
2318	GetNetworkLeases returns a list of network leases
2319	GetNetworkState retrieves the state of a network
2320	CreateNetwork creates a new network
2321	UpdateNetwork updates an existing network .
2322	RenameNetwork renames a network
2323	Open opens a database .
2324	URLEncode returns the URL - encoded form of the given path .
2325	IsUnixSocket returns true if path is a Unix socket
2326	HostPath returns the host path of a host file .
2327	FileMove moves a file to a new path .
2328	DirCopy copies a source directory to dest .
2329	StringMapHasStringKey returns true if the given map contains the given keys .
2330	TextEditor returns the contents of a text editor
2331	WriteTempFile creates a temporary file with the given prefix and content .
2332	RenderTemplate renders a template
2333	Every creates a scheduled scheduler
2334	StoragePoolMount is defined on the PoolLvm interface .
2335	Dump dumps the given schema .
2336	dumpTable returns the string representation of a table .
2337	ProjectHasProfiles returns true if a project has profiles
2338	ProjectNames lists all projects in the cluster .
2339	ProjectMap returns a map of project IDs .
2340	ProjectHasImages returns true if the project has the specified images .
2341	ProjectUpdate updates a project .
2342	GetCluster returns the cluster
2343	UpdateCluster updates an existing cluster .
2344	GetClusterMemberNames returns the names of the cluster member names
2345	GetClusterMembers returns the cluster members
2346	GetClusterMember returns the cluster member
2347	RenameClusterMember renames a member
2348	Disconnect disconnects the listener and closes the listener .
2349	CompareVersions compares two versions .
2350	HasClientCertificate returns true if client certificate exists .
2351	GenerateClientCertificate generates a new client certificate .
2352	LoadModule loads the module .
2353	Parse parses the given go file .
2354	PprofAddress returns the address of the listener
2355	Update pprof address
2356	NewMethod creates a new method .
2357	Generate generates a new method
2358	fillSliceReferenceField fills the fields of a slice object .
2359	StoragePoolID gets the ID of a storage pool .
2360	StoragePoolIDsNotPending returns a map of all the pool ids pending .
2361	StoragePoolNodeJoin is used to register a new storage pool node .
2362	StoragePoolNodeJoinCeph is used to update the ceph pool with the given pool ID .
2363	StoragePoolConfigAdd adds a new storage pool config to the database .
2364	StoragePoolCreatePending is used to create a new storage pool
2365	StoragePoolCreated is defined on the storage pool .
2366	StoragePoolErrored returns an error if the pool is not found .
2367	StoragePoolNodeConfigs returns the configuration of a storage pool .
2368	StoragePoolsGetDrivers returns a slice of all storage_pools .
2369	StoragePoolGetID gets the ID of a storage pool .
2370	StoragePoolGet gets the storage pool by name .
2371	storagePoolNodes returns a list of nodes in the cluster .
2372	StoragePoolConfigGet gets the configuration for a storage pool .
2373	StoragePoolCreate creates a new storage pool
2374	storagePoolConfigAdd adds a new storage pool config to the database .
2375	StoragePoolUpdate creates a new storage pool
2376	StoragePoolConfigClear clears the storage pool s config .
2377	StoragePoolDelete deletes a storage pool .
2378	StoragePoolVolumesGetNames returns a slice of volume names for a given pool .
2379	StoragePoolVolumesGet returns a slice of volumes for the specified pool .
2380	StoragePoolNodeVolumesGet returns the storage volumes for a node .
2381	storagePoolVolumesGet returns the list of volumes for the specified pool .
2382	StoragePoolVolumesGetType returns a slice of volumes for the specified pool .
2383	StoragePoolVolumeSnapshotsGetType returns a slice of volume snapshots
2384	StoragePoolNodeVolumesGetType returns the volume type of a node .
2385	StoragePoolVolumeGetType gets the volume type of a pool
2386	StoragePoolNodeVolumeGetType returns the volume type of a node
2387	StoragePoolNodeVolumeGetTypeByProjectByProject returns the volume type of a pool
2388	StoragePoolVolumeUpdate makes a new volume
2389	StoragePoolVolumeDelete deletes a storage pool volume
2390	StoragePoolVolumeRename renames an existing volume to a new volume .
2391	storagePoolVolumeReplicateIfCeph is used to delete a volume from a pool
2392	StoragePoolVolumeCreate creates a new storage pool volume
2393	StoragePoolVolumeGetTypeID returns the volume ID of a pool
2394	StoragePoolNodeVolumeGetTypeID returns the volume type of a node
2395	StoragePoolVolumeTypeToName returns the name of the volume type to use for the given volume type .
2396	DevicesAdd adds the specified devices to the database .
2397	Devices returns a list of devices for the specified project .
2398	Patches returns a list of all patches matching the node .
2399	PatchesMarkApplied applies a patch to the node .
2400	entityType returns the entity type of the entity
2401	entityPost creates a post from an entity
2402	stmtCodeVar generates codeVar for given entity kind .
2403	destFunc returns a concatenation of the specified fields .
2404	CompareConfigs compares two configs .
2405	CopyConfig copies a config map
2406	NewNotifier creates a new Notifier from the state .
2407	Events returns a task listener for events .
2408	eventsConnect returns an event listener for the given address
2409	StoragePoolInit initializes the storage pool .
2410	getAAProfileContent - get the profile content for a container .
2411	AALoadProfile reloads a profile .
2412	AADestroy runs the provided container .
2413	APPARarseProfile runs the APPARSE profile on the container .
2414	getSystemHandler returns a handler for the given system
2415	NotifyUpgradeCompleted is called when a node upgrade is completed .
2416	KeepUpdated returns a function that keeps the given state .
2417	maybeUpdate determines if a cluster update is allowed .
2418	NewServer creates a new server
2419	StartStatusCheck starts the server .
2420	SyncProjects syncs all the projects in rbac
2421	AddProject adds a project
2422	DeleteProject deletes a project .
2423	RenameProject renames a project .
2424	IsAdmin checks if user is admin
2425	HasPermission checks if a user has permissions on a specific repository
2426	rsyncSend sends an rsync request to the specified path .
2427	rsyncSendSetup is a helper function that attempts to sync a P2c device .
2428	tlsClientConfig returns the TLS configuration for the TLS server .
2429	tlsCheckCert checks if the request certificate is valid
2430	internalClusterContainerMovedPost is used to get a container from a container
2431	containerPostCreateContainerMountPoint is used to create container mount point
2432	Contains returns true if k is contained in k
2433	Update takes a list of devices and compares them with new devices and returns a map of new device keys and new device keys .
2434	DeviceNames returns a sorted list of device names .
2435	Infof logs an info message .
2436	Debugf logs with DEBUG level .
2437	Warnf logs a message at Warn level .
2438	Errorf logs an error
2439	Critf logs a message at critical level .
2440	eventForward is used to forward an event
2441	StorageProgressReader is an implementation of io . ReadCloser that provides progress information about the operation .
2442	StorageProgressWriter returns a function that can be used to write progress metrics to the given operation .
2443	GetLSBRelease returns a map of os - release strings
2444	Reset resets the imports .
2445	Append appends a snippet to a file at path .
2446	ContainerToArgs converts a Container to a container .
2447	ContainerNames returns the names of the containers in the specified project .
2448	ContainerNodeAddress returns the address of a node .
2449	ContainersListByNodeAddress returns a map of containers for the specified node .
2450	ContainerListExpanded expands a list of containers and returns a list of containers .
2451	ContainersByNodeName returns a map of containers by the specified project name .
2452	SnapshotIDsAndNames returns a map of container ID and name
2453	ContainerNodeList lists all containers in the cluster .
2454	ContainerNodeProjectList lists all containers in a given project .
2455	ContainerRemove removes a container .
2456	ContainerProjectAndName returns the project and name of the given container and its ID .
2457	ContainerConfigClear clears the container s devices .
2458	ContainerConfigGet gets a single value for a given container ID .
2459	ContainerConfigRemove removes a container config from the database .
2460	ContainerSetStateful sets the stateful for a given container
2461	ContainerProfilesInsert inserts a profile into the database .
2462	ContainerProfiles returns a list of all the profiles in a container .
2463	ContainerConfig returns a map of container config values .
2464	ContainerSetState sets the state of a container .
2465	ContainerUpdate updates a container .
2466	ContainerLastUsedUpdate updates the last use of a container .
2467	ContainerGetSnapshots returns a list of all the containers in a specified project .
2468	ContainerGetSnapshotsFull gets all the containers in a specific project with the specified project and name .
2469	ContainerNextSnapshot gets the next snapshot of a container
2470	ContainerPool gets the pool name for the specified container .
2471	ContainerGetBackup returns the backup args for a given container
2472	ContainerGetBackups returns a list of containers matching the provided project name .
2473	ContainerBackupCreate is used to create a container backup
2474	ContainerBackupRemove removes a container backup from the cluster
2475	ContainerBackupRename sets the name of a container backup
2476	ContainerBackupsGetExpired returns a list of backups that are expired .
2477	DefaultOS creates a new default platform .
2478	Init initializes the OS
2479	GetWebsocket is part of the operation .
2480	Refresh refreshes the contents of the operation .
2481	CancelTarget cancels the target operation
2482	GetTarget returns a copy of the target operation
2483	up starts the endpoint .
2484	Down closes all endpoints
2485	serveHTTP serves the given socket type .
2486	closeListener closes the socket .
2487	ActivatedListeners returns a map of listener types that are activated .
2488	CandidServer returns the candid server
2489	RBACServer returns the configured RBAC server .
2490	AutoUpdateInterval is the auto update interval .
2491	MAASController returns the MAAS controller .
2492	OfflineThreshold returns the offline timeout .
2493	ConfigGetString gets string from cluster
2494	ConfigGetBool gets bool from cluster
2495	ConfigGetInt64 gets int64 from cluster
2496	ClusterAddress returns the address of the cluster
2497	Debug records a debug message .
2498	RestServer returns a http . Server that serves HTTP requests .
2499	projectParam returns the parameter from the request .
2500	queryParam returns the value of the query parameter
2501	newDb creates a new database - related command
2502	Description returns a description of the operation type .
2503	Permission returns the permission for the given operation type .
2504	OperationsUUIDs returns the UUIDs of the operations in the transaction .
2505	OperationNodes returns the list of nodes that belong to the specified project .
2506	OperationByUUID returns a single operation by UUID .
2507	OperationAdd adds a new operation .
2508	OperationRemove removes a single operation .
2509	applications returns all operations in a transaction .
2510	expireLogsTask returns a task to expire logs .
2511	absPath returns the absolute path of a file .
2512	Keys returns a list of all the keys in schema .
2513	Defaults returns a map of default values .
2514	mustGetKey retrieves a key from schema .
2515	assertKeyType panics if key type is not found
2516	validate validates the given value .
2517	GetStoragePoolVolumes returns a list of volume volumes
2518	Get storage pool volume
2519	CreateStoragePoolVolume creates a new volume on the given pool
2520	CreateStoragePoolVolumeSnapshot creates a storage pool volume snapshot
2521	Get storage pool volume snapshots
2522	Get storage pool volume snapshot
2523	Update storage pool volume snapshot
2524	MigrateStoragePoolVolume creates a storage pool volume
2525	MoveStoragePoolVolume moves a volume to a remote pool
2526	UpdateStoragePoolVolume updates the pool volume
2527	DeleteStoragePoolVolume deletes a storage pool volume
2528	RenameStoragePoolVolume renames a volume
2529	doStoragePoolCreateInternal creates a new storage pool .
2530	containerGetParentAndSnapshotName returns the parent and the name of the parent snapshot
2531	containerLoadFromAllProjects loads all containers from a project .
2532	containerLoadNodeAll loads all nodes in the cluster .
2533	containerLoadNodeProjectAll loads all nodes in a given project .
2534	heartbeatNode sends a heartbeat node to the raft cluster
2535	dotPrefixMatch returns true if the given string is a prefix of the full list .
2536	ContainerMount is part of the Storage interface .
2537	ContainerStorageReady returns true if the container is ready to be used .
2538	AskChoice asks a given choice from a list of choices .
2539	AskInt asks a question for an integer with a default value
2540	AskString asks a question for a given question and returns the answer .
2541	AskPassword prompts the user for a given question .
2542	AskPasswordOnce prompts the user for a given password .
2543	askQuestion is used to parse a question from a question
2544	readAnswer reads the answer from stdin .
2545	profilePost posts a profile
2546	profileDelete deletes a profile
2547	IsRootDiskDevice check if device is root disk device
2548	GetRootDiskDevice gets the root device from a map
2549	ForwardedResponse returns a Response for the given container and request .
2550	ForwardedResponseIfTargetIsRemote is used to forward an HTTP request to a target node
2551	ForwardedResponseIfContainerIsRemote is used to forward a container to a specific container
2552	ForwardedOperationResponse returns a Response for the given operation .
2553	Done marks the progress page as done .
2554	Update implements the interface method .
2555	Warn logs a warning message .
2556	UpdateProgress implements the interface method .
2557	UpdateOp implements the UpdateRenderer interface .
2558	updateFromV6 updates the zfs_pools config from the database .
2559	localCreateListener is used to create a listener on a given path
2560	NewStmt returns a new Stmt .
2561	Generate writes the statement to the given buffer .
2562	register registers a statement .
2563	httpsLXD returns a containerServer configured with the given protocol .
2564	IsActive returns true if the container is active .
2565	RaftNodeAddress returns the address of a node .
2566	RaftNodeFirst is used to handle a single raft node .
2567	RaftNodeAdd gets the address of a raft node .
2568	RaftNodeDelete deletes a node from the database .
2569	RaftNodesReplace replaces a set of Raft nodes .
2570	initCGroup initializes the cgroup flags .
2571	sqliteDirectAccess is used to open a SQLite connection .
2572	ContainerGet gets a container by name and project name
2573	ContainerID returns the ID of a container .
2574	ContainerExists returns true if a container exists in the cluster .
2575	ContainsFields returns true if the mapping contains fields .
2576	FieldByName retrieves a single field by its name .
2577	FieldColumnName returns the column name for a field .
2578	FilterFieldByName returns a field by name .
2579	ColumnFields returns all fields of the mapping .
2580	EnvarFields returns all fields that are part of the mapping
2581	RefFields returns all fields of this mapping .
2582	Column returns the column name of the field .
2583	ZeroValue returns the zero value for the field .
2584	FieldColumns returns a comma - separated list of fields .
2585	FieldArgs returns a string representation of the given fields .
2586	FieldParams returns a string representation of the fields .
2587	FieldCriteria returns a comma - separated list of fields .
2588	initDataClusterApply is used to update the cluster
2589	JsonFormatEx is a convenience function for logging a record .
2590	formatLogfmtValue converts value to logfmtValue
2591	ResolveTarget resolves a named target .
2592	Write implements the io . Writer interface
2593	updateNodeVersion updates the schema for a node .
2594	selectNodesVersions returns a list of all the versions of a node .
2595	GetArchitectures retrieves the architectures of the OS architecture
2596	RuntimeLiblxcVersionAtLeast returns true if the golxc version is greater than or equal to the given minor .
2597	GetExecPath returns the executable path .
2598	Connect connects to a container server at the given address
2599	ConnectIfContainerIsRemote connects to a container in the cluster using the provided name and returns the container server .
2600	ConnectIfVolumeIsRemote is a convenience method to connect to a local cluster with the given volume type .
2601	SetupTrust sets up trust on the cluster
2602	GetStoragePools returns the list of Storage pools
2603	Get a storage pool
2604	CreateStoragePool creates a new storage pool
2605	Update a storage pool
2606	Delete a storage pool
2607	Get storage pool resources
2608	initDirs initializes the directories for the operating system .
2609	Config is used to query the config for the node .
2610	UpdateConfig is used to update an existing config .
2611	Config is used to query the config for a transaction
2612	UpdateConfig updates a config .
2613	storagePoolClusterConfigForEtag retrieves the storage pool configuration for the given db config .
2614	GetEvents returns a new EventListener .
2615	LogfmtFormat returns a log . Format for logging .
2616	StorageVolumeNodeAddresses returns a slice of node addresses for a specified storage volume .
2617	StorageVolumeNodeGet gets a node by ID .
2618	StorageVolumeConfigGet gets the configuration for a volume .
2619	StorageVolumeDescriptionGet gets the description of a volume .
2620	StorageVolumeIsAvailable checks if a volume is available on the cluster
2621	StorageVolumeDescriptionUpdate updates a description of a volume .
2622	StorageVolumeConfigAdd adds a new volume config to the database .
2623	StorageVolumeConfigClear clears the volume_config
2624	storageVolumeIDsGet returns the ids of a storage volume .
2625	StorageVolumeCleanupImages removes images for the specified volumes .
2626	StorageVolumeMoveToLVMThinPoolNameKey deletes the volume s LVMThinPoolName .
2627	L is similar to fmt . Sprint .
2628	Code returns the code of the Buffer .
2629	Pretty returns a JSON representation of the given input .
2630	NetworkPublicKey returns the public key of the endpoint .
2631	NetworkPrivateKey returns the private key
2632	NetworkCert is part of the Endpoint interface .
2633	NetworkAddress returns the endpoint s network address .
2634	NetworkUpdateAddress replaces the address of the endpoints .
2635	NetworkUpdateCert is used to update the certInfo
2636	networkCreateListener creates a new net . Listener
2637	Accept implements net . Listener . Accept .
2638	Config sets TLS configuration for the listener .
2639	IsOffline returns true if the node is offline
2640	NodeByAddress gets a node information by address .
2641	NodePendingByAddress gets the node info for a given address .
2642	NodeByName retrieves a node by name .
2643	NodeName returns the name of the node within the transaction .
2644	NodeAddress returns the address of a node .
2645	NodeIsOutdated returns true if the node is older than the latest known version .
2646	NodesCount returns the number of nodes in the cluster .
2647	NodeRename renames an existing node .
2648	nodes returns all the nodes in a transaction .
2649	NodeAdd adds a new node .
2650	NodePending updates the pending status of a node .
2651	NodeUpdate updates a node .
2652	NodeRemove removes a node from the cluster .
2653	NodeHeartbeat updates the heartbeat of a node .
2654	NodeIsEmpty checks if a node is empty
2655	NodeClear clears an image .
2656	NodeOfflineThreshold is used to check if offline is offline
2657	NodeUpdateVersion updates a node s version .
2658	Transaction starts a transaction .
2659	rollback is used to rollback a transaction .
2660	ProfileURIs is used to select a set of URIs for a given profile filter
2661	ProfileGet retrieves a profile by name .
2662	ProfileExists checks if a profile exists in the database
2663	ProfileConfigRef returns a map of profile config ref for a given filter
2664	ProfileUsedByRef is used to query the profile used by a given filter .
2665	ProfileCreate creates a profile .
2666	ProfileRename removes a profile from the cluster .
2667	ProfileDelete deletes a profile from a project .
2668	ServerTLSConfig returns a TLS configuration for the server
2669	NetworkInterfaceAddress returns the network interface address
2670	IsAddressCovered checks if two addresses are covered
2671	SelectObjects using the prepared statement . Any placeholder parameters are replaced with supplied args .
2672	DeleteObject deletes an object from the database .
2673	loop implements the Task interface .
2674	IsTerminal returns true if the given file descriptor is a terminal .
2675	SocketUnixListen binds a unix socket on the given path .
2676	socketUnixRemoveStale removes the unix socket from the given path .
2677	UnixSetPermissions sets permissions on the local socket
2678	UnixSetOwnership sets the ownership on the local socket
2679	cephOSDPoolExists returns true if the ceph device exists
2680	cephOSDPoolDestroy destroys the ceph device
2681	cephRBDVolumeExists returns true if the volume exists
2682	cephRBDSnapshotProtect protects a snapshot
2683	cephRBDCloneCreate creates a clone of an RBD image
2684	cephRBDSnapshotListClones returns a list of clones for the specified volume and volumeType
2685	cephRBDVolumeMarkDeleted marks the deleted volume as deleted .
2686	cephRBDVolumeUnmarkDemarkDeleted verifies that the volume is marked as deleted .
2687	cephRBDVolumeRename renames old volume to new volume name
2688	cephRBDVolumeSnapshotRename renames an existing snapshot
2689	cephRBDSnapshotDelete deletes a snapshot
2690	cephRBDVolumeCopy copies a ceph RBD volume to old volume
2691	cephRBDVolumeListSnapshots returns a list of snapshots for a volume
2692	getRBDSize returns the beph storage volume s size .
2693	getRBDFilesystem returns the base block filesystem .
2694	copyWithoutSnapshotsFull is used to copy an RBD storage volume to another container .
2695	copyWithoutSnapshotsSparse copies from the source container to the sparse storage volume
2696	GetConfigCmd returns a command to get config .
2697	SetConfigCmd returns a cobra command for setting config
2698	NewSharder returns a Sharder .
2699	NewRouter returns a new Router .
2700	renewUserCredentials renews user credentials .
2701	NewLocalClient creates a new local client .
2702	AddSpanToAnyExisting adds a new span to an existing one
2703	InstallJaegerTracerFromEnv installs Jaeger tracing from environment variables
2704	UnaryClientInterceptor returns a new unary client interceptor for OpenTracing .
2705	StreamClientInterceptor returns a new gRPC stream clientInterceptor .
2706	UnaryServerInterceptor returns a new unary server interceptor for OpenTracing .
2707	StreamServerInterceptor returns a new streaming server interceptor
2708	CloseAndReportTraces closes all global traces
2709	newWriter returns a new Writer .
2710	For implements ConstantBackoff .
2711	Log records the request and metrics .
2712	Format implements the Formatter interface .
2713	NewGRPCLogWriter returns a new GRPCLogWriter
2714	Read reads the config from disk .
2715	Write writes the config to disk
2716	Read implements the io . Reader interface .
2717	Write implements the io . Writer interface .
2718	NewReadWriter returns a new ReadWriter .
2719	RunGitHookServer runs the git hook server
2720	newLoggingPipe creates a new pipe pipe .
2721	Read implements the io . Reader interface .
2722	Write implements the io . Writer interface
2723	Accept implements the Listener interface .
2724	Close closes the listener .
2725	errorf creates a new error from an ErrCodeError
2726	InitWithKube initializes a ServiceEnv
2727	GetEtcdClient returns the etcd client
2728	GetKubeClient returns kubernetes client
2729	NewHasher creates a new Hasher .
2730	HashJob hashes a job
2731	HashPipeline returns the modulus of a given pipeline
2732	Status returns the status of the worker
2733	Cancel cancels a job
2734	Conns returns a list of grpc connections
2735	Clients returns a list of clients
2736	NewClient creates a new grpc Client .
2737	RunFixedArgs returns a function that checks the number of args and the number of args .
2738	RunBoundedArgs checks that the required arguments are within the specified range
2739	Run a new cobra command
2740	ErrorAndExit is like ErrorAndExit but exits with exit code .
2741	ParseCommit parses a git commit string into a struct
2742	ParseBranch parses a git - branch .
2743	ParseFile parses a single file .
2744	Set implements the flag . Value interface .
2745	SetDocsUsage sets the docs usage for the command
2746	makeCronCommits creates commits from cron spec
2747	Writer returns a writer for the tracing object
2748	Reader returns a reader for the tracing object
2749	Delete deletes a named span
2750	Walk calls fn for each span in the pipeline
2751	Exists checks if the named span exists
2752	GetBlock creates a new block from the given hash .
2753	Health is part of the health server .
2754	split splits the path p into a base directory and returns it .
2755	ValidatePath returns an error if the given path string is not valid .
2756	MatchDatum returns true if the given source file matches the filter .
2757	NewCacheServer returns a new instance of CacheServer .
2758	authorizePipelineOp checks if a pipeline operation is authorized
2759	sudo
2760	setPipelineDefaults populates the fields of the pipeline
2761	increment GC generation
2762	NewDebugServer creates a new debug server .
2763	Health implements the Health interface .
2764	newObjBlockAPIServer returns a new BlockAPIServer .
2765	watchGC watches for changes to etcd
2766	splitKey splits a key into a string
2767	NewWriter creates a new tabwriter
2768	Write writes buf to the underlying writer .
2769	PrintRepoHeader prints repos header
2770	PrintRepoInfo prints information about a repository .
2771	PrintDetailedRepoInfo prints detailed repo info
2772	PrintBranch writes a branch to w .
2773	PrintCommitInfo prints information about a commit .
2774	PrintDetailedCommitInfo prints a printable commit info
2775	PrintFileInfo prints information about pfs . FileInfo to w .
2776	PrintDetailedFileInfo prints a detailed file info
2777	Add adds a string to a string .
2778	RetryNotify is the same as RetryNotify but allows callers to retry a notification .
2779	Get returns an io . Writer for the given id and filter .
2780	Delete implements the Cache interface .
2781	PrintJobInfo prints information about a job .
2782	PrintPipelineInfo prints information about the pipeline .
2783	PrintWorkerStatus prints the status of a worker .
2784	PrintDetailedJobInfo prints detailed job info
2785	PrintDetailedPipelineInfo PrintablePipelineInfo
2786	PrintDatumInfo prints information about the datum info
2787	PrintDetailedDatumInfo prints detailed information about the provided datum info
2788	PrintFile prints pfsclient . File to w .
2789	ShorthandInput returns a human - readable version of the input .
2790	Retrieve retrieves credentials from vault .
2791	IsExpired implements credentialProvider .
2792	NewBranch creates new pfs . Branch
2793	NewCommit creates a new instance of a new commit
2794	NewCommitProvenance creates a new CommitProvenance
2795	NewFile creates new pfs . File
2796	CreateRepo creates a repository
2797	InspectRepo returns information about a repository .
2798	ListRepo returns a list of repositories
2799	DeleteRepo deletes a repository
2800	BuildCommit builds a new git commit from a repository .
2801	StartCommitParent starts a new commit for the given repository .
2802	FinishCommit is part of the APIClient interface
2803	InspectCommit is part of the APIClient interface
2804	BlockCommit returns information about the given commit .
2805	ListCommit lists commits from a repository .
2806	ListCommitF lists commits from a repository .
2807	ListCommitByRepo returns a list of commits for given repository .
2808	CreateBranch creates a new branch
2809	InspectBranch returns information about a branch .
2810	ListBranch lists all branch information
2811	SetBranch implements APIClient .
2812	DeleteBranch deletes a branch
2813	DeleteCommit deletes a commit from the APIClient
2814	FlushCommit is part of the APIClient interface
2815	FlushCommitF flushes the given commit .
2816	FlushCommitAll flushes the given commits .
2817	SubscribeCommit returns a CommitInfoIterator for the given repository and branch .
2818	SubscribeCommitF starts a subscription for the given CommitState .
2819	PutObjectAsync implements APIClient . PutObjectWriteCloser
2820	PutObject puts an object into the APIClient .
2821	PutObjectSplit is part of the APIClient interface
2822	GetObject implements PFSObjectClient .
2823	GetObjectReader returns an io . ReadCloser for the specified hash .
2824	GetObjects reads objects from an object
2825	TagObject adds an object to the APIClient
2826	ListObject - list objects
2827	InspectObject is part of the APIClient interface
2828	GetTag is part of the APIClient interface
2829	GetTagReader returns a reader for a tag .
2830	ListTag - lists all tags .
2831	Compact compacts the ObjectAPIClient
2832	NewPutFileClient returns a new PutFileClient .
2833	PutFileOverwrite puts a file at a given path to a file .
2834	Close closes the underlying file .
2835	CopyFile copies a file
2836	GetFile is part of the APIClient interface
2837	GetFileReader returns an io . Reader for the specified file .
2838	GetFileReadSeeker returns an io . ReadSeeker for a file .
2839	InspectFile is part of the APIClient interface
2840	ListFile is part of the APIClient interface
2841	ListFileHistory lists all files in the given commit .
2842	ListFileF is part of the APIClient interface
2843	Walk is part of the APIClient interface
2844	DeleteFile deletes a file
2845	Write implements the io . Writer interface
2846	Close closes the PutObjectWriteCloserAsync .
2847	PrettyPrintVersionNoAdditional formats a pb . Version as a human - readable string .
2848	recursiveBlockQuoteExamples is used to recursive block quotes .
2849	errMissingField is used to return a missing field
2850	validateFields returns an error if the given data is not present .
2851	putConfig stores the given config .
2852	getConfig retrieves the config from storage .
2853	Serve starts the gRPC server .
2854	NewPuller returns a new Puller instance
2855	PullTree is part of the Puller interface .
2856	Push deletes a file
2857	PushObj creates an object from the given commit .
2858	PushFile pushes a file to the specified file .
2859	Dump is part of the APIClient interface
2860	Profile is part of the APIClient interface
2861	Binary sends binary data to the client
2862	RegisterCacheStats registers groupcache stats
2863	wait waits for n times out .
2864	RunWorkload runs the workload
2865	createRepo creates a new repository
2866	advanceCommit applies the next commit to the repository .
2867	RandString returns a random string
2868	NewReader returns a new reader for the given number of bytes .
2869	iterDir iterates over the directory at path .
2870	FSSize returns the size of the hash tree .
2871	Diff performs a diff between two hashes .
2872	Serialize writes the hash tree to an io . Writer .
2873	Deserialize takes an io . Reader and deserializes the hash tree .
2874	Copy creates a deep copy of the dbHashTree .
2875	Destroy closes the hashTree .
2876	PutFileOverwrite stores the contents of a file at path .
2877	PutDirHeaderFooter adds a file or directory header to a directory tree .
2878	PutFileHeaderFooter implements the Pusher interface for FileHashTree .
2879	deleteDir deletes a directory
2880	NewReader returns a new Reader reading from r .
2881	Read returns a MergeNode from the underlying Reader .
2882	NewWriter returns a new Writer .
2883	Write writes the merge node .
2884	Copy copies data from r to the specified reader .
2885	Index returns the contents of the underlying writer .
2886	GetRangeFromIndex returns the range from the given prefix .
2887	NewFilter creates a new filter that matches numTrees .
2888	PathToTree converts a path to numTrees .
2889	Merge merges the given set of readers into the input stream .
2890	Hash loads all buckets from the database tree .
2891	IsGlob returns true if the pattern matches the glob pattern .
2892	GlobLiteralPrefix returns the prefix of the given glob pattern .
2893	GetHashTreeObject returns a HashTree object for a given storage root .
2894	GetHashTreeTag returns the HashTree for the specified tag .
2895	PutHashTree creates a hash tree using the provided tags .
2896	NewChildCursor creates a new child cursor for the specified path .
2897	Next moves the cursor to the next key .
2898	NewOrdered creates a new ordered node .
2899	MkdirAll creates a directory named path .
2900	PutDir adds a directory to the ordered directory .
2901	Serialize writes the Ordered to an io . Writer .
2902	NewUnordered creates a new Unordered .
2903	Ordered returns a sorted ordered list of directories .
2904	revokeUserCredentials removes credentials from the client .
2905	NewAPIServer returns a new APIServer .
2906	String returns a string representation of pb . Version .
2907	getPipelineInfo returns information about the pipeline
2908	removeStr removes a string from the list .
2909	PublicCertToPEM converts a tls . Certificate to PEM format
2910	GenerateSelfSignedCert generates the self - signed certificate for the given IP address .
2911	ActivateCmd implements Pachyderm . ActivateCmd
2912	DeactivateCmd returns a cobra command for deactivate
2913	LoginCmd returns a new cobra command for login
2914	LogoutCmd returns a command to logout credentials .
2915	WhoamiCmd returns a cobra command for whoami
2916	CheckCmd is a wrapper for cobra . CheckCmd
2917	GetCmd is a wrapper for GetCmd
2918	SetScopeCmd returns the set scope command
2919	ListAdminsCmd returns a cobra command for list - admins
2920	ModifyAdminsCmd returns a cobra command for ModifyAdmins .
2921	GetAuthTokenCmd returns a command to get an auth token .
2922	UseAuthTokenCmd returns a cobra command for use - auth token command
2923	Cmds returns the set of CLI commands
2924	ParseScope parses a string into a Scope object .
2925	IsErrNotActivated returns a boolean indicating whether the error is caused by an ErrNotActivated type
2926	IsErrPartiallyActivated returns true if the error is a partially activated error
2927	IsErrNotSignedIn returns true if the error is ErrNotSignedIn
2928	IsErrBadToken returns true if the error is a bad token
2929	IsErrNotAuthorized checks if the error is a not - authorized message .
2930	IsErrInvalidPrincipal returns true if the error is invalid principal
2931	IsErrTooShortTTL returns true if err is too short TTL
2932	NewDatumFactory creates a new DatumFactory .
2933	NewCollection creates a new Collection .
2934	Path returns the absolute path of the collection .
2935	getIndexPath returns the index path for a given value .
2936	get multi index paths
2937	Upsert inserts a new value for a given key .
2938	get retrieves a single key from etcd
2939	List implements the List interface .
2940	Watch returns a watcher for reading only the readonlyCollection
2941	WatchByIndex returns a watcher for a given index .
2942	WatchOne returns a watcher for a given key
2943	WatchOneF starts a watcher for the given key .
2944	Get returns an io . ReadCloser for the given key .
2945	Keys returns a sorted list of the keys in the cache .
2946	Clear removes all entries from the cache .
2947	NewHTTPServer returns a new httprouter
2948	NewDeployServer returns a new deploy server
2949	Export exports assets to out .
2950	Import loads assets from reader into given reader .
2951	DatumTagPrefix computes the tag prefix for the given salt
2952	NewPFSInput creates a new PFSInput .
2953	NewPFSInputOpts creates a new PFS Input .
2954	NewJobInput creates a new JobInput .
2955	NewPipelineInput creates a new PipelineInput .
2956	CreateJob creates a new job
2957	ListJob lists all jobs
2958	ListJobF lists all jobs for a given pipeline .
2959	FlushJob flushes all the jobs to the given commits .
2960	FlushJobAll flushes all jobs to the given commits .
2961	DeleteJob deletes a job
2962	StopJob stops a job
2963	RestartDatum is part of the APIClient interface
2964	ListDatum returns a list of changes for a given job
2965	ListDatumF list datum info
2966	InspectDatum returns information about a specific datum .
2967	Next returns true if there are more logs .
2968	InspectPipeline returns information about a pipeline
2969	ListPipeline lists all pipelines
2970	DeletePipeline deletes a pipeline
2971	StartPipeline starts a pipeline
2972	StopPipeline stops a pipeline
2973	RerunPipeline creates a pipeline
2974	CreatePipelineService creates a pipeline
2975	GetDatumTotalTime returns the total duration for the process
2976	Mount is used to mount a file
2977	NewBufPool creates a new BufPool
2978	StorageRootFromEnv returns the storage root .
2979	BlockPathFromEnv returns the path to the block .
2980	NewGoogleClient returns a new Google API client .
2981	NewGoogleClientFromSecret creates a new client from a secret
2982	NewGoogleClientFromEnv creates a new Google Client from the environment .
2983	NewMicrosoftClientFromSecret creates a new Microsoft client from a secret
2984	NewMicrosoftClientFromEnv creates a new Microsoft client from a container .
2985	NewMinioClientFromSecret creates minio client from secret
2986	NewMinioClientFromEnv creates a new Minio Client from the environment .
2987	NewAmazonClientFromSecret creates a new client from a secret bucket .
2988	NewAmazonClientFromEnv creates a new Amazon Client from the environment .
2989	NewClientFromURLAndSecret creates a new client from a URL and secret
2990	ParseURL parses a URL string into ObjectStoreURL
2991	NewClientFromEnv creates a new client from a storage root .
2992	NewExponentialBackOffConfig creates a new ExponentialBackOff with default values .
2993	Close closes the BackoffReadCloser
2994	Close closes the BackoffWriteCloser
2995	IsRetryable returns true if the client is retryable
2996	RunStdin runs the command with the given arguments .
2997	RunIODirPath runs the specified directory in the specified directory .
2998	NewAuthServer creates a new apiServer .
2999	expired cluster admin
3000	getOneTimePassword returns an OTP token and expiration time
3001	hashToken returns a SHA256 hash of the given token .
3002	getAuthToken extracts the auth token from the context .
3003	Can be used to canonicalize subjects .
3004	Matches asserts that the specified pattern matches the expected match .
3005	OneOfMatches compares two values of two matching strings .
3006	Equal tests if two values are equal .
3007	NotEqual implements test .
3008	oneOfEquals returns true if the given slice is equal to the given slice .
3009	NoneEquals fails if two objects are equal .
3010	NoError panics if err is not nil .
3011	NoErrorWithinT is like NoErrorWithinT but does not wait for an error to complete .
3012	NoErrorWithinTRetry is like NoErrorWithinTRetry but does not return an error .
3013	YesError panics if err is not nil .
3014	NotNil asserts that the provided object is not nil .
3015	Nil checks if the object is nil .
3016	False checks if value is false .
3017	NewSTM creates a new STM .
3018	NewDryrunSTM creates a dryrun STM .
3019	newSTMRepeatable creates a new STM repeatable .
3020	newSTMSerializable creates a StmSerializable .
3021	newSTMReadCommitted is used to create a read transaction
3022	commit marks the transaction as committed .
3023	Pipelines returns a collection of pipelines
3024	Jobs returns a Collection for the jobset .
3025	NewTicker returns a new ticker .
3026	nodeToMap converts etcd . Node to out .
3027	ServiceAccount creates a new ServiceAccount .
3028	ClusterRole creates an instance of ClusterRole
3029	RoleBinding creates a RoleBinding from an asset opts .
3030	GetSecretEnvVars returns the environment vars
3031	PachdService creates a service with the specified AssetOpts .
3032	GithookService returns the githook service
3033	etcdDeployment creates a deployment for etcd
3034	EtcdStorageClass returns a storage class for a storage class .
3035	EcdVolume creates a persistent volume from an existing persistent disk
3036	EcdNodePortService creates an etcd service from an etcd service
3037	EcdHeadlessService creates a new etcd service .
3038	EcdStatefulSet sets the etcd statefulset
3039	DashDeployment creates a new Deployment .
3040	DashService creates a Service from an AssetOpts .
3041	WriteSecret writes a secret
3042	GoogleSecret is used to generate a secret key for a given bucket .
3043	WriteDashboardAssets writes the dash - assets to the given io . Writer
3044	WriteLocalAssets writes the given assets to the given encoder .
3045	Write custom assets
3046	WriteAmazonAssets writes a list of AWS assets to an io . Writer
3047	WriteGoogleAssets writes a Google secret
3048	WriteMicrosoftAssets writes a Microsoft secret
3049	Images returns a list of image names in the AssetOpts .
3050	AddRegistry adds a registry to the registry
3051	withCanonicalRandomizationFactor returns a copy of the exponential backoff if one is not set
3052	Reset resets the exponential backoff clock
3053	incrementCurrentInterval increments the current interval .
3054	NewBlockAPIServer returns a new BlockAPIServer .
3055	LocalStorage creates a new storage client and returns it .
3056	deleteJob deletes the given job .
3057	writeXML writes an XML response with status code .
3058	clean1_7HashtreePath cleans the path to the hashtree root
3059	NewFromAddress creates a new APIClient from an address .
3060	getUserMachineAddrAndOpts gets the user machine address and options from the config .
3061	NewInCluster creates a new APIClient .
3062	Close closes the APIClient .
3063	DeleteAll deletes all resources .
3064	SetMaxConcurrentStreams sets maximum number of concurrent streams
3065	WithCtx returns a copy of the given context
3066	NewDLock returns a new DELock implementation
3067	DatumID calculates a SHA256 hash of input .
3068	runUserErrorHandlingCode runs the user error handling code .
3069	HashDatum returns the Datum hash of a pipelineSalt
3070	HashDatum15 calculates the SHA256 hash of the pipeline info
3071	Status is part of the APIServer interface
3072	Cancel a Cancel request
3073	mergeStats merges two processes .
3074	mergeChunk merges chunk data into result
3075	IsCommitNotFoundErr returns true if the error is a commit not found error .
3076	IsCommitDeletedErr returns true if the error is a commit deleted error
3077	IsCommitFinishedErr returns true if the error is a commitFinished error .
3078	IsRepoNotFoundErr returns true if the error is a repository not found error .
3079	IsBranchNotFoundErr returns true if the error is a branch not found error .
3080	IsFileNotFoundErr returns true if the error is a file not found error .
3081	Version returns the version of the APIClient .
3082	validateRepoName returns an error if the given name is invalid .
3083	newDriver creates a new PFS driver .
3084	inspectCommit is part of the Driver interface .
3085	scratchCommitPrefix returns a prefix for a given commit .
3086	scratchFilePrefix returns the prefix of the file in pfs .
3087	getTreeForFile returns a HashTree for the file
3088	usedantOnInput returns true if any of the inputs have been provenance .
3089	nodeToFileInfo converts a node to a pfs . FileInfo
3090	fileHistory calls f for each file in the given file .
3091	upsertPutFileRecords upserts PFS records .
3092	ReadRow reads rows from pgdumpReader .
3093	NewReporter creates a new reporter
3094	ReportUserAction returns a function that reports the completed user action .
3095	FinishReport and flush user action
3096	Read implements the io . Reader interface .
3097	ActivateCmd returns a cobra command for activation
3098	GetStateCmd returns a cobra command for get state
3099	Cmds returns a set of command commands
3100	NewConfiguration returns a new Configuration struct
3101	Repos returns a Collection with the given etcd prefix .
3102	PutFileRecords creates a new collection for etcd
3103	Commits creates a collection of commits
3104	Branches returns a Collection for the given branches .
3105	OpenCommits opens and returns a Collection .
3106	NewDAG creates a new DAG .
3107	NewNode adds a new node to the DAG .
3108	Sorted returns the DAG of the DAG .
3109	Leaf returns a list of leaf IDs .
3110	Ancestors returns a slice of ancestors of the given ID .
3111	Descendants returns a slice of the descendants of the given ID .
3112	Weths returns a list of the children of the DAG .
3113	NewPortForwarder creates a new PortForwarder
3114	Run starts the remote port forwarder
3115	RunForDaemon is part of the PortForwarder interface .
3116	RunForSAMLACS runs the local port
3117	RunForDashUI runs the dash UI .
3118	RunForDashWebSocket runs the dash web socket .
3119	RunForPFS is part of the Pachd interface .
3120	RunForS3Gateway starts an S3 gateway
3121	Lock locks the PortForwarder
3122	Close shuts down the PortForwarder
3123	Unmarshal is defined on the proto . Message interface .
3124	UnmarshalPrev unmarshals a Prev from a proto . Message .
3125	MakeWatcher creates a new watcher
3126	CheckType returns an error if the given template is not valid .
3127	NewPool creates a new pool
3128	Do starts the gRPC connection .
3129	Close closes all connections .
3130	buildImage builds the docker image
3131	pushImage initiates a docker image .
3132	newMinioClient - instantiate minio client .
3133	newMinioClientV2 - instantiate minio client .
3134	newMinioWriter creates a minio writer .
3135	Close closes the writer
3136	PipelineRepo creates a new Repo
3137	PipelineRcName returns the name of the pipeline rc name
3138	GetRequestsResourceListFromPipeline retrieves the ResourceList from the pipelineInfo
3139	GetLimitsResourceListFromPipeline gets resource list from pipeline info
3140	getNumNodes returns the number of parallelism nodes in the cluster
3141	GetExpectedNumWorkers returns the number of concurrent workers in the kubeClient
3142	GetExpectedNumHashtrees returns the number of hashes in the spec
3143	FailPipeline fails the given pipeline
3144	JobInput returns a new JobInput for the given PipelineInfo and CommitInfo .
3145	PipelineReqFromInfo creates a new CreatePipelineRequest from a PipelineInfo
3146	NewPipelineManifestReader returns a new PipelineManifestReader
3147	NextCreatePipelineRequest returns the next CreatePipelineRequest from the manifest reader
3148	DescribeSyntaxError is like DescribeSyntaxError except it extracts the errors from the original error .
3149	UpdateJobState updates the state of a given job .
3150	New returns a new UUID
3151	Code returns the HTTPError s status code .
3152	NewHTTPError creates a new HTTPError .
3153	NewStorage creates a new storage .
3154	DeleteAll removes all entries from the storage .
3155	Chunk removes chunks from slice .
3156	ChunkReader is like Chunk but returns the number of bytes read .
3157	NewStreamingBytesReader creates a new streaming data reader .
3158	WriteToStreamingBytesServer writes the StreamingBytesServer to the given io . Reader .
3159	WriteFromStreamingBytesClient sends a streamingBytesClient to the given writer .
3160	NewSidecarAPIServer creates a new sidecar API server
3161	NewEnterpriseServer creates a new API server .
3162	validateActivationCode validates the activation code
3163	Activate initiates a new activation request .
3164	Deactivate deletes pachm data
3165	lookExtensions returns the extension for the given path .
3166	Start the process .
3167	CombinedOutput returns the combined stdout and stderr of the command .
3168	StdinPipe returns a pipe that will be closed when the command starts .
3169	StdoutPipe returns a pipe that will be closed when the command starts .
3170	dedupEnvCase takes a list of env variables and merges them into duplicates .
3171	InputName returns the name of the input .
3172	SortInput sorts a slice of inputs .
3173	InputBranches returns a slice of all branch branches .
3174	ValidateGitCloneURL validates git clone URL
3175	containsEmpty checks if a slice of strings contains empty values .
3176	NewAPIServer returns a new API server
3177	Angle returns a human - readable string of the given timestamp .
3178	TimeDifference returns the difference between two timestamps .
3179	Duration returns a human - readable string representation of a duration .
3180	InspectCluster returns information about the cluster
3181	Extract extracts objects .
3182	ExtractAll implements the Extractor interface
3183	ExtractWriter implements Extractor .
3184	ExtractURL extracts a URL
3185	ExtractPipeline gets a new pipeline request from the Admin API
3186	Restore is part of the Admin interface .
3187	RestoreReader restores a reader from the APIClient .
3188	RestoreFrom restores the object from the given objects .
3189	RestoreURL restores a URL from a given URL .
3190	IgnoreTypes creates an option that ignores types .
3191	AppendEllipsis appends ellipsis to textList .
3192	IsType checks if t is a function .
3193	NameOf returns the name of the given value .
3194	PinterOf returns the Pointer of v .
3195	String returns the string representation of an EditScript .
3196	stats for EditScript .
3197	connect adds the path to the destination .
3198	EquateNaNs returns a cmp . Option that compares NaNs values .
3199	Index returns the step at index i .
3200	Key returns the key of the slice .
3201	String implements the fmt . Stringer interface for ReporterReporter .
3202	FormatType formats a text node into a text node .
3203	formatMapKey formats a map key
3204	formatString takes a string and returns a copy of it .
3205	formatHex returns a string representation of the hexadecimal digits .
3206	formatPointer returns a string representation of v .
3207	Visit returns true if v is visited .
3208	retrieveUnexportedField returns the exported field for the given struct field .
3209	insert adds cname to the fieldTree .
3210	matchPrefix returns true if the path matches the prefix of the path .
3211	canonicalName returns the canonical name of the type t .
3212	FilterPath returns an Option that sets the filter function .
3213	normalizeOption normalizes the passed options .
3214	flattenOptions recursively flattens src options into dst .
3215	CanFormatDiffSlice returns true if the value is a diff slice .
3216	formatASCII takes a string and converts it to an ASCII string .
3217	coalesceAdjacentEdits coalesces an epjacent script by name .
3218	SortKeys sorts a slice of values .
3219	FormatDiff produces a text representation of the valueNode .
3220	coalesceAdjacentRecords is used to coalesce an adjacent records .
3221	Diff returns the diff of two records .
3222	statelessCompare compares the state of the state for the given step .
3223	sanitizeValue returns a reflect . Value that can be converted to reflect . Value .
3224	Check validates if a path is a transformer
3225	makeAddressable returns an addressable representation of v .
3226	Marshal writes the field to a visitor .
3227	String returns a string representation of the field .
3228	Set is part of the Span interface .
3229	Inject injects a new TextMapPropagator
3230	Extract implements TextMapPropagator . Extractor
3231	ToLogRecord converts this LogData to a LogRecord
3232	New creates a new MockTracer .
3233	StartSpan is a mock
3234	RegisterInjector registers an injector function .
3235	RegisterExtractor registers an extractor for the given format .
3236	Inject injects a new span
3237	Extract implements Extractor .
3238	ContextWithSpan adds a new span to the context .
3239	Set is part of opentracing . Span interface .
3240	Set is part of opentracing . Span interface .
3241	Set is part of opentracing . Span interface .
3242	SetString is part of the Span interface .
3243	EmitString mocks original method
3244	EmitLazyLogger replaces the LazyLogger with the given value .
3245	RunAPIChecks is a convenience function to run APICheckSuite .
3246	CheckBaggageValues returns an APICheckOption that sets whether or not to load baggage values .
3247	CheckExtract specifies whether or not to check extract .
3248	CheckInject is used to check if a request is in - flight
3249	CheckEverything returns an APICheckOption that can be used to check whether the service is running .
3250	UseProbe adds a probe to the APICheckSuite .
3251	WithBaggageItem adds a new baggage item to the context
3252	Tags returns a map of tags
3253	Tag implements Span interface
3254	Logs returns a copy of the current logs .
3255	Context returns the opentracing . SpanContext
3256	SetTag sets a tag on the span
3257	SetBaggageItem is part of the SpanContext interface
3258	BaggageItem returns the BaggageItem for the given key .
3259	Finish records a trace .
3260	FinishWithOptions implements opentracing . FinishWithOptions
3261	String returns a string representation of the MockSpan
3262	LogFields implements the StackSpan interface
3263	logFieldsWithTimestamp adds fields to the MockSpan .
3264	LogKV implements the Stack interface
3265	LogEvent logs an event
3266	LogEventWithPayload implements the StackSpan interface
3267	SetOperationName sets the operation name
3268	registersDirPath returns the path to the registries directory .
3269	loadAndMergeConfig loads the docker config from dirPath
3270	ParseReference parses an image reference string .
3271	NewReference builds a new ImageReference from a named DockerTagged
3272	CheckAuth performs a v2 authentication against the docker registry .
3273	doHTTP executes the HTTP request and returns the response .
3274	detectPropertiesHelper is used to detect the properties of a docker client
3275	detectProperties detects properties .
3276	getExtensionsSignatures returns the list of extensions for the given manifest digest .
3277	NewTransport returns a new HTTP transport .
3278	readRegistryConf reads the registry configuration file .
3279	GetRegistries returns the registry names for the system .
3280	GetInsecureRegistries returns a list of insecure registries .
3281	RegistryConfPath returns the path to the registry config file
3282	NewOptionalBool creates a new boolean instance
3283	changeState changes the state of the current state .
3284	Destroy deallocates the policy context .
3285	policyIdentityLogName returns the name of the policy configuration for the image reference .
3286	validationsForImageRef determines the requirements for an image reference
3287	ParseImageName parses an image name into an ImageReference
3288	BlobInfoFromOCI1Descriptor converts a descriptor to a BlobInfo .
3289	OCI1FromManifest loads an OCI1 from a manifest
3290	OCI1FromComponents creates an OCI1 from a configuration .
3291	newReference creates a dockerReference from a reference .
3292	tagOrDigest returns the tag or a tag if it exists .
3293	updateEmbeddedDockerReference populates an EmbeddedDockerReference with the given Docker reference .
3294	isTTY returns true if w is a terminal .
3295	copyUpdatedConfigAndManifest is the same as CopyConfigAndManifest but returns a byte slice of the modified image .
3296	createProgressBar creates progress bar
3297	copyConfig copies the content of a config blob into the stream .
3298	diffIDComputationGoroutine creates diffIDComputationGoroutine for diffID .
3299	computeDiffID computes the diff ID for a given stream .
3300	compressGoroutine copies from src into dest .
3301	newDockerClient initializes and returns a new docker client .
3302	defaultPolicyPath returns the path to the default policy .
3303	NewPolicyFromFile creates a new policy from a file .
3304	NewPolicyFromBytes constructs a Policy from a byte slice .
3305	newPolicyRequirementFromJSON creates a PolicyRequirement from JSON
3306	newPRSignedBy creates a new prSignedBy
3307	newPRSignedByKeyPath creates a new PRSignedByKeyPath
3308	NewPRSignedByKeyPath creates a new PolicyRequirement
3309	newPRSignedByKeyData creates a new PRSignedByKeyData .
3310	NewPRSignedByKeyData creates a new PolicyRequirement
3311	IsValid checks if the key type is valid
3312	newPRSignedBaseLayer creates a new prSignedBaseLayer .
3313	newPolicyReferenceMatchFromJSON creates a PolicyReferenceMatch from JSON .
3314	newPRMExactReference creates a new prmExactReference from a DockerReference string .
3315	newPRMExactRepository creates a new prmExactRepository from a DockerRepository
3316	newImageSource creates a storageImageSource from a storageReference .
3317	getBlobAndLayerID retrieves an opaque blob from storage .
3318	computeID computes the layer ID for the given manifest .
3319	PutManifest implements storage . ImageDestination .
3320	PutSignatures stores the signatures in the storage image
3321	newImage creates a new image .
3322	newImageSource creates a new image source .
3323	LoadManifestDescriptor loads the manifest descriptor from an image reference
3324	Close closes the image source .
3325	append adds a string to the ordered set .
3326	isMultiImage checks if the given image is multi - multi - image .
3327	lockPath locks a path
3328	unlockPath unlocks a path
3329	view runs a read - only transaction on the bolt database .
3330	update opens or updates a boltdb transaction .
3331	uncompressedDigest finds the uncompressed digest for the provided digest .
3332	appendReplacementCandidates appends a list of candidate replacements .
3333	indexExists returns true if an index exists .
3334	createSignature creates a signature for the given image manifest .
3335	ParseReference parses an image reference string .
3336	NewReference returns a new image reference
3337	getIndex returns an image index
3338	LoadManifestDescriptor loads manifest descriptors from an image reference
3339	blobPath returns the path to the blob referenced by digest .
3340	SignDockerManifest signs the manifest with the specified key .
3341	VerifyDockerManifestSignature verifies that the provided manifest conforms to the expected manifest .
3342	newOpenshiftClient returns a new openhift client .
3343	doRequest sends a request to OpenShift
3344	getImage returns a single openhift image .
3345	convertDockerImageReference takes a reference string and converts it into a docker reference
3346	ensureImageIsResolved is a mock
3347	newImageDestination returns a new ImageDestination .
3348	newUntrustedSignature returns a new untrustedSignature .
3349	MarshalJSON implements custom marshalling for untrustedSignature .
3350	UnmarshalJSON implements Unmarshaler
3351	verifyAndExtractSignature takes a set of signatures and returns the signature and the corresponding signature .
3352	RewriteReference rewrites a reference to a reference
3353	getV1Registries returns a list of registry instances from config
3354	getConfigPath returns the path to the config file
3355	GetRegistries returns a list of registries in the system .
3356	readRegistryConf reads registry configuration file .
3357	Manifest returns the manifest blob
3358	ConfigUpdate updates the annotations in the tarball reference
3359	parseImageAndDockerReference parses the provided image and returns a reference to it .
3360	parseDockerReferences takes two paths and converts them into a reference . Named .
3361	ListNames returns a sorted list of all available transports .
3362	NewReference creates a new image reference from an image string
3363	signaturePath computes the signature path for the given index .
3364	ValidateImageName returns an error if the image name is not valid .
3365	SplitPathAndImage takes a reference and a relative path and returns the absolute path and the relative path components .
3366	ValidateOCIPath returns an error if the given path is a valid OCI reference .
3367	ValidateScope checks if the scope is valid
3368	BlobInfoFromSchema2Descriptor converts a schema2Descriptor to a type . BlobInfo .
3369	Schema2FromManifest loads a schema from a manifest
3370	Schema2FromComponents creates a new schema2 from a schema2 schema .
3371	SetAuthentication sets credentials .
3372	RemoveAuthentication removes authentication from the registry .
3373	RemoveAllAuthentication removes all authentication information from the system .
3374	readJSONFile reads the docker config file from the specified path .
3375	modifyJSON attempts to update the content of the given docker config file .
3376	findAuthentication returns the docker auth credentials for the given path .
3377	NewDestination returns a new Destination instance .
3378	AddRepoTags adds tags to Destination
3379	writeLegacyLayerMetadata writes layer metadata to destination destination .
3380	sendSymlink sends a symlink to the destination directory .
3381	sendBytes writes bytes to the destination file .
3382	sendFile sends a file to the destination .
3383	Commit closes the destination .
3384	imageMatchesRepo returns true if the image matches the reference
3385	resolveImage resolves an image reference .
3386	Transport returns an ImageTransport for this storageReference .
3387	StringWithinTransport returns a string representation of the storage reference
3388	PolicyConfigurationNamespaces returns the namespaces for the storage reference
3389	GzipDecompressor creates a new pgzip decompressor from r .
3390	Bzip2Decompressor wraps bzip2 . Reader
3391	XzDecompressor returns an Xz decompressor from r .
3392	DetectCompression detects decompression from the input io . Reader
3393	newImageDestination creates a new image destination for the docker container .
3394	mountBlob is a helper method to mount a blob from a repository .
3395	bicTransportScope converts a docker reference to a BICTransportScope
3396	newBICLocationReference returns a new instance of a BICLocationReference .
3397	parseBICLocationReference parses a BICLocationReference .
3398	NewSourceFromStream creates a new Source from a stream
3399	readTarComponent reads a tar component from the given path .
3400	ensureCachedDataIsPresent checks if the data is present in the source
3401	loadTarManifest reads the manifest from the source .
3402	Close closes the source .
3403	newImageDestination creates a new image destination for the given reference .
3404	imageLoadGoroutine is the same as ImageLoadGoroutine .
3405	NewReference returns a new image reference
3406	createOCIRef creates a new tempDirOCIRef
3407	createUntarTempDir creates a temp dir from an OCIRef
3408	destroyivelyPrioritizeReplacementCandidatesWithMax sort the list of BICReplacementCandidates with the given maximum number of candidates .
3409	newImageDestination returns a new ImageDestination reference
3410	resolveExistingPathToFullyExplicit returns the absolute path of the given path .
3411	newImageDestination creates a new ImageDestination
3412	isDirEmpty returns true if path is empty .
3413	removeDirContents removes all the contents of the specified path .
3414	GetRepositoryTags fetches the tags of a repository
3415	DefaultCache returns the default blobinfo cache for the system .
3416	uncompressedDigestLocked returns the digest if any .
3417	Close closes image destination
3418	PutManifest uploads the image to the imageDestination .
3419	Commit is part of the OCArchiveImageDestination interface .
3420	tarDirectory copies the contents of src into dst .
3421	ParseStoreReference parses a reference to a storage . Reference .
3422	chooseDigestFromManifestList returns the digest from the manifest list if any .
3423	ChooseManifestInstanceFromManifestList chooses a digest from the manifest list
3424	manifestSchema1FromComponents returns a manifest schema1 from the provided attributes .
3425	manifestDigest returns the manifest digest if available .
3426	deleteImage deletes a docker image .
3427	Schema1FromComponents creates a schema1 from a reference .
3428	initialize initializes schema1 .
3429	ToSchema2Config converts schema1 config to schema2V1History
3430	Digest creates a digest from a manifest .
3431	MatchesDigest checks if the digest matches the expected digest .
3432	NormalizedMIMEType normalizes a MIMEType
3433	FromBlob creates a manifest from a blob .
3434	NewReference creates a new image reference from a path .
3435	layerPath returns the full path of a layer .
3436	signaturePath returns the path to the file at index .
3437	New creates a new pool .
3438	NewFunc returns a pool of processor functions .
3439	ProcessTimed waits for the given payload to be metered and returns the job .
3440	SetSize sets the size of the pool
3441	GetSize get pool size
3442	TL returns the point of the rectangle .
3443	BR returns the point of the Rect .
3444	CVBox returns the CVPBox2D .
3445	Points returns the points in the box .
3446	FOURCC is similar to FOURCC .
3447	Merge merges two plImage into the destination
3448	Split splits two images into one
3449	AddWeighted adds a weighted image to the image .
3450	And performs the intersection between two vectors .
3451	AndWithMask performs the same behavior as And but with a mask and mask
3452	AndScalar performs a scalar between two scalar values .
3453	AndScalarWithMask is like AndScalar but with a mask and mask .
3454	Or creates a new OR between two pairs .
3455	OrWithMask is like Or but with a mask .
3456	OrScalar is a convenience wrapper for OrScalarWithMask .
3457	OrScalarWithMask is similar to OrScalar but with a mask and mask .
3458	AddWithMask allows you to add a mask with a mask and mask
3459	AddScalar adds a scalar to a scalar value .
3460	AddScalarWithMask adds a scalar to a mask .
3461	Subtract subtracts the difference between two vectors .
3462	SubtractWithMask subtracts from src2 and mask
3463	SubScalar subscalar with values from src to dst .
3464	SubScalarWithMask subtracts a scalar value from src to dst .
3465	SubScalarRev is identical to SubScalarRev but with mask revision .
3466	SubScalarWithMaskRev subscribes a scalar value from a given Scalar value .
3467	AbsDiff performs the absolute diff between two objects .
3468	AbsDiffScalar performs the absolute diff between src and dst .
3469	MeanStdDevWithMask returns the mean and scalar of an image .
3470	CreateSeq creates a new sequence
3471	Push adds an element to the sequence .
3472	Pop pops the value at the specified position .
3473	PushFront pushes an element onto the stack .
3474	PopFront pops the front of a sequence .
3475	GetElemAt returns an element at a given index .
3476	RemoveAt removes the value at index from c .
3477	Delay sets the delay
3478	BackOffDelay returns backoff delay based on the backoff strategy
3479	Error implements the error interface for Error .
3480	Arguments adds arguments to the request .
3481	BodyString defines the request body as a string .
3482	BodyBytes defines the body of the request
3483	Body sets the request body .
3484	Option adds an option to the request
3485	Header adds a header to the request .
3486	Send builds a request and returns the response .
3487	Exec execute the request
3488	Next returns the next message from the subscription
3489	Cancel the subscription
3490	FileList returns a list of files on the given path .
3491	Cat sends a cat request to the specified path
3492	List returns a list of links
3493	Pin pins the specified path to the specified directory .
3494	Pins returns all pins .
3495	Version returns the version of the shell
3496	SwarmPeers retrieves information about the current swarm connection .
3497	SwarmConnect connects to a swarm
3498	DagPutOptions returns a DagPutSettings struct from the given parameters .
3499	Set a pin
3500	Kind sets the kind for the DagPut option .
3501	Hash configures a DagPutOption .
3502	AddDir adds a new directory to a file
3503	Publish a node
3504	PublishWithDetails publishes the specified content hash with the specified contentHash
3505	ResolveValue resolves a PlanValue .
3506	GenerateQuery generates a query from the provided map .
3507	EncodeValue encodes a value .
3508	Lex scans the next token .
3509	skipStatement skips a statement .
3510	reset resets the tokenizer .
3511	Preview provides a summary of the SQL statement .
3512	NewPlanValue returns a plan value for the given Expr .
3513	StringIn check if string is in the list of strings
3514	NewTrackedBuffer creates a new TrackedBuffer .
3515	NewStringArena creates a new StringArena .
3516	NewString returns a new string .
3517	SpaceLeft returns the number of left in the StringArena
3518	ParseStrictDDL parses a DDL statement .
3519	ParseNext parses the next statement .
3520	Append appends a SQLNode to the buffer .
3521	ExprFromValue converts a value to an Expr .
3522	Backtick returns the backtick of the input .
3523	NewValue builds a new Value from the given type .
3524	String returns a string representation of the value .
3525	EncodeSQL encodes a value .
3526	EncodeSQL encodes insert values .
3527	EncodeSQL encodes a tuple equality list .
3528	WalkStatement walks the SQLNode .
3529	WalkSelect normalizes SQLNode .
3530	BindVariablesEqual compares two bind variables .
3531	New creates a new JWTMiddleware .
3532	HandlerWithNext is a wrapper for JWT .
3533	FromAuthHeader parses the Authorization header from the request .
3534	FromParameter returns a TokenExtractor that extracts token from the given query string .
3535	FromFirst returns a TokenExtractor that extracts tokens from the request .
3536	getHelloPacket returns the Hello protocol of the message .
3537	NewFloodsubWithProtocols creates a new instance of the PubSub .
3538	NewFloodSub creates a new PubSub .
3539	NewLRUBlacklist returns a blacklist blacklist for the given capacity .
3540	NewRandomSub creates a new PubSub .
3541	NewGossipSub creates a new PubSub .
3542	NewPubSub creates a new PubSub .
3543	WithValidateThrottle is a functional option for WithValidateThrottle .
3544	WithBlacklist sets the blacklist for the PubSub .
3545	handleRemoveSubscription removes the subscription from the topic .
3546	handleAddSubscription adds a new subscription to the subscription .
3547	announce sends an announce message to all peers .
3548	notifySubs notifies all subscribed messages for this topic
3549	seenMessage returns true if the message has been seen by the server .
3550	subscribedToMsg returns true if this message is subscribed to to .
3551	msgID returns a unique identifier for the message .
3552	pushMsg sends a message to peer
3553	validate is used to validate a message
3554	validateSingleTopic checks if the message is throttled
3555	getValidators returns all validators
3556	Subscribe creates a new subscription .
3557	SubscribeByTopicDescriptor creates a new subscription for a topic descriptor .
3558	GetTopics returns all topics .
3559	Publish implements Publish .
3560	ListPeers returns a list of all known peers .
3561	WithValidatorTimeout sets the validator timeout
3562	WithValidatorConcurrency is a functional option for ValidatorConcurrency .
3563	RegisterTopicValidator registers a new Validator
3564	UnregisterTopicValidator unregisters a topic validator .
3565	DefaultMetricPrefix generates a metric prefix for a metric .
3566	MetricWithPrefix generates a metric with the specified prefix and tags .
3567	NewClient creates a new Client .
3568	Call executes an RPC call .
3569	CallPeer implements peer . Peer .
3570	CallSC implements the SubChannel interface .
3571	ReadResponse reads an HTTP response .
3572	Writes the headers to the client .
3573	ResponseWriter returns a new http . ResponseWriter
3574	ReadHeaders reads headers from r .
3575	NewTCPRawRelay creates a new Relay from a list of connections .
3576	NewClient creates a new client
3577	Advertise advertises the services .
3578	Handle is the handler for InboundCall .
3579	Start starts the server
3580	Port returns the host port
3581	SetStrategy sets the peer s strategy .
3582	Add adds a peer to the list and returns a new peer .
3583	GetNew returns a peer from the list of peers
3584	Get returns a peer from the list of peers
3585	Remove removes a peer from the list
3586	Copy returns a copy of the PeerList
3587	Len returns the number of peers in the list .
3588	exists checks if a given hostPort exists .
3589	getPeerScore returns the peer score for a given hostPort
3590	onPeerChange is called when peer is changed .
3591	updatePeer updates the peer s score .
3592	getConn returns the connection at index i .
3593	GetConnection returns a connection for the peer .
3594	getConnectionRelay returns the connection to the peer .
3595	canRemove returns true if the peer has been removed .
3596	addConnection adds a connection to the peer .
3597	removeConnection removes the connection from the peer . Returns true if the connection was removed false otherwise .
3598	connectionCloseStateChange is called when a connection is closed .
3599	Connect connects to the peer .
3600	BeginCall starts a new OutboundCall .
3601	NumConnections returns the number of inbound connections
3602	NumPendingOutbound returns the number of outbound connections
3603	isEphemeralHostPort returns true if hostPort is a valid hostPort
3604	Get retrieves the value associated with the key .
3605	Set sets a key to value .
3606	ClearAll clears all keys
3607	NewChannel creates a new channel .
3608	Serve serves the given listener .
3609	ListenAndServe listens on the given port
3610	Register registers a handler for a given handler .
3611	PeerInfo returns the local peer info for this channel .
3612	GetSubChannel returns a SubChannel by name .
3613	serve runs in a goroutine .
3614	Ping sends a ping to the channel .
3615	StatsTags returns the tags of the channel .
3616	Connect connects to the given channel .
3617	exchangeUpdated is used to update the updated peer
3618	updatePeer adds the given peer to the channel .
3619	addConnection adds a connection to the channel .
3620	removeClosedConn removes a connection from the channel .
3621	connectionCloseStateChange is called when the connection closes .
3622	State returns the channel state of the channel .
3623	NewReader creates a new Reader .
3624	ReadUint16 read uint16
3625	ReadString implements io . Reader
3626	ReadLen16String from the reader
3627	Register registers the behavior for the given channel .
3628	Run runs the behavior
3629	Get retrieves a relay timer from the pool . If the pool is empty the function panics .
3630	Put puts a relayTimer into the pool .
3631	Start starts the relay timer .
3632	Release releases the pool .
3633	NewLogger creates a new Logger
3634	NewTCPFrameRelay creates a new TCP frame relay .
3635	countTags returns a map of knownTags to knownTags .
3636	Isolated causes the SubChannel to unregisters the given SubChannel .
3637	Isolated returns whether or not the subchannel isolated
3638	Register registers a handler for the given handler .
3639	GetHandlers returns a copy of the registered handlers .
3640	StatsTags returns a map of metric names to tags .
3641	registerNewSubChannel creates a new SubChannel and adds it to the map .
3642	get a SubChannel by name
3643	getOrAdd returns a SubChannel or creates a new subchannel if already exists .
3644	Discover queries the hyperbahn for the specified service .
3645	Start starts the HTTP server .
3646	listen starts the server
3647	WriteRequest writes a request to the specified http . Request .
3648	ReadRequest reads an HTTP request and returns an http . Request .
3649	NewReadBufferWithSize returns a new ReadBuffer with the given size .
3650	ReadByte implements the io . Reader interface .
3651	ReadBytes implements the io . Reader interface .
3652	ReadString from the underlying reader
3653	ReadUint16 read uint16
3654	ReadUint32 read uint32
3655	ReadUint64 read uint64
3656	ReadUvarint from the buffer
3657	ReadLen8String from the buffer
3658	ReadLen16String from the buffer
3659	FillFrom implements ReaderFrom .
3660	Wrap implements the ReadBuffer interface .
3661	WriteSingleByte writes a single byte to the buffer .
3662	WriteBytes to the buffer
3663	WriteUint16 writes a uint16 to the buffer .
3664	WriteUint32 writes a uint32 to the buffer .
3665	WriteUint64 writes an uint64 to the buffer .
3666	WriteUvarint writes an uint64 to the buffer .
3667	WriteString writes a string to the buffer .
3668	WriteLen8String to the buffer
3669	WriteLen16String writes a string to the buffer .
3670	DeferByte clears the buffer at the end of the buffer .
3671	DeferBytes returns a BytesRef for n bytes .
3672	FlushTo flushes the buffer to the buffer .
3673	Reset clears the buffer .
3674	Wrap adds b to the buffer .
3675	Update to the uint16 ref .
3676	Update adds n to the uint32Ref .
3677	Update adds n to the uint64Ref .
3678	Update merges b into b .
3679	UpdateString updates string value
3680	ArgReader implements the Reader interface .
3681	finish finishes the checksum of the fragment .
3682	newWritableChunk returns a new chunk .
3683	writeAsFits writes data to the chunk .
3684	newFragmentingWriter returns a new fragmentingWriter .
3685	ArgWriter implements the ArgumentWriter interface .
3686	BeginArgument attempts to begin the given argument . If last is true then the last argument is returned .
3687	Write implements the Writer interface .
3688	Flush implements the Writer interface .
3689	Close implements the Writer interface .
3690	handleCallRes is used to forward a frame
3691	Arg2Reader returns a new ArgReader instance .
3692	handleError is used to handle an error frame
3693	doneReading is called when a request is received
3694	newFragment creates a new fragment .
3695	flushFragment sends a fragment to the underlying writer .
3696	failed failed marks the resWriter as failed .
3697	arg1Reader returns an argReader .
3698	arg2Reader returns a new ArgReader .
3699	arg3Reader returns a new ArgReader .
3700	argReader returns an ArgReader or an error .
3701	recvNextFragment returns a read - only readableFragment for the next frame . If initialFragment is true recvNextFragment is used .
3702	releasePreviousFragment releases previous fragment .
3703	failed marks the resReader as failed .
3704	parseInboundFragment parses an inbound fragment and returns a readable fragment .
3705	NewContext returns a new context with the given timeout .
3706	WithHeaders returns a new context with the given headers .
3707	healthCheck is used to perform a health check .
3708	SetTimeout sets the timeout for the query .
3709	AddHeader adds a header to the request
3710	SetHeaders sets parent headers
3711	SetConnectTimeout sets the timeout for the context .
3712	SetRetryOptions sets retry options .
3713	SetTimeoutPerAttempt sets the timeoutPerAttempt for the request .
3714	SetParentContext sets the parent context .
3715	Build creates a new context
3716	overrideHeaders overrides the request headers .
3717	Read implements reader
3718	ReadJSON reads json data from ArgReadHelper
3719	NewArgWriter returns a new ArgWriteHelper
3720	Write implements io . Writer
3721	WriteJSON - Write helper
3722	Register registers the given request .
3723	Count returns the total number of items
3724	Get returns the relayItem for the given ID .
3725	Add adds a relay item to the pool .
3726	Entomb removes a relay item from the relay lists . It returns a bool indicating if the relay item was found .
3727	NewRelayer creates a new Relayer .
3728	Relay is used to relay a given frame .
3729	Receive implements Relayer . Receive .
3730	handleNonCallReq handles a non - call request .
3731	addRelayItem adds a relay item to the relayer .
3732	failRelayItem terminates the relay items with the given ID .
3733	WriteStruct writes a TStruct to the given writer .
3734	ReadStruct read struct from reader
3735	EnsureEmpty checks if the reader is empty .
3736	NewServer creates a new Thrift server .
3737	Advertise advertises the configured hyperbahn .
3738	handleCallReqContinue returns true if the incoming frame should be forwarded .
3739	dispatchInbound processes an InboundCall .
3740	CallOptions builds a CallOptions from an InboundCallCall .
3741	Response returns the response if any .
3742	SendSystemError sends the provided error as a system error .
3743	SetApplicationError sets the application s error state .
3744	Arg2Writer implements ResponseWriter interface .
3745	doneSending is called when the call is done
3746	newState creates a new state from the Thrift .
3747	rootType returns the root type of the parser .
3748	checkInclude checks if the given type is included in the file .
3749	isResultPointer returns true if the given parser is a result pointer .
3750	goType returns the type name for the given Thrift type .
3751	goTypePrefix builds a Go type from a given prefix .
3752	NewContext creates a new context
3753	newIncomingContext creates a new context with the given timeout .
3754	CurrentCall returns the current call for the given context or nil if not found .
3755	New returns a new random seed .
3756	Health implements the MetaHandler interface .
3757	Headers returns the request headers .
3758	ResponseHeaders returns the response headers .
3759	SetResponseHeaders sets response headers for this context
3760	Child returns a new context with child headers
3761	Wrap returns a new Context with the given headers .
3762	WrapWithHeaders wraps context . ContextWithHeaders
3763	WithoutHeaders returns a context with no headers set
3764	Notify sends an error to the notify channel .
3765	forwardPeerFrame is used to forward a peer frame to the queue .
3766	recvPeerFrame is used to receive a frame from the queue .
3767	recvPeerFrameOfType retrieves a frame from the queue and returns it .
3768	shutdown shuts down the messageExchange .
3769	newMessageExchangeSet creates a new messageExchangeSet .
3770	addExchange adds a new messageExchange to the message set .
3771	newExchange creates a new message exchange .
3772	deleteExchange deletes an existing exchange .
3773	removeExchange removes an existing message exchange .
3774	expireExchange is called when a message exchange has expired .
3775	forwardPeerFrame is used to forward a single frame
3776	copyExchanges returns a copy of the messageExchange set .
3777	stopExchanges stops all exchanges in a messageExchangeSet .
3778	NewFrame creates a new frame
3779	ReadBody reads the body of the frame .
3780	WriteOut writes out the frame
3781	CanRetry returns true if the given error can be retryable .
3782	HasRetries returns true if the request has retries
3783	SinceStart returns the duration since the request state
3784	AddSelectedPeer adds a random peer to the request state
3785	RunWithRetry executes the given RetriableFunc with retry options .
3786	ChecksumSize returns the checksum size in bytes .
3787	New returns a new Checksum instance .
3788	parseTemplates parses the tchan template files .
3789	NewStringSliceFlag returns a flag indicating that a string slice flag has been set .
3790	withStateFuncs returns a copy of the given template with the given Go type .
3791	IntrospectOthers takes a channel options and returns a map of channels to channels .
3792	ReportInfo is part of the ChannelInfo interface .
3793	IntrospectState returns the introspection state for the peer list
3794	IntrospectState returns a map of subchannel runtime state information .
3795	IntrospectState returns the PeerRuntimeState for the specified peer .
3796	IntrospectState returns the current state of the connection .
3797	IntrospectState introspects a RelayerRuntimeState
3798	IntrospectState returns a RelayItemSetState with the given options .
3799	IntrospectState returns an ExchangeSetRuntimeState for this messageExchangeSet .
3800	NewContext creates a new context with the given timeout .
3801	WriteResponse writes the response .
3802	Wrap wraps an InboundCall with a handler .
3803	initFromOpenTracing injects a new span into the opkinracing span .
3804	startOutboundSpan starts an outbound call and returns a new span .
3805	Convert an int to an IPv4 address
3806	servicePeerToHostPort converts a hyperbahn . ServicePeer to a host port .
3807	NewStatsdReporter creates a new StatsdReporter .
3808	UnmarshalText implements the Unmarshaler interface for ToS .
3809	Push implements heap . Interface .
3810	Pop implements heap . Interface .
3811	updatePeer updates the peer s score .
3812	removePeer removes a peer from the heap .
3813	pushPeer adds a peerScore to the heap .
3814	addPeer adds a peer to the heap .
3815	NewClient creates a new TChanClient .
3816	Add adds a new peer to the list
3817	Get returns peer with given hostPort
3818	WithTimeout sets the timeout
3819	Methods returns a sorted list of all registered methods .
3820	InheritedMethods returns a list of methods that are inherited from the service .
3821	Arguments returns the arguments for the method .
3822	ArgList returns a string representation of the arguments
3823	CallList returns a string representation of a call list
3824	RetType returns the type of the method .
3825	WrapResult is a helper for wrapping method with a method name .
3826	ReturnWith returns the value of the method with the given respName .
3827	Declation returns a string representation of a field .
3828	startIdleSweep starts a new idleSweep .
3829	start is used to start the idle connection .
3830	Stop stops the idle connection .
3831	ResolveWithGoPath tries to resolve a Go file from a GOPATH
3832	setExtends sets the extensions for the service .
3833	register adds a handler to the map .
3834	NewClient returns a new Client with the given hosts .
3835	ListenIP creates a net . IP address from a list of interfaces .
3836	Close closes the listener .
3837	ReadArgsV2 reads arguments from ArgReadable .
3838	WriteArgs writes the arguments of the given call .
3839	Call sends a request and returns the response .
3840	CallSC is a wrapper around Call .
3841	CallV2 calls v2 .
3842	NewRealRelay creates a new Relay .
3843	NewServer creates a new server
3844	RegisterHealthHandler registers a new health handler
3845	Handle handles an InboundCall .
3846	MetricsKey returns metric key for given system error code .
3847	NewSystemError returns a new SystemError .
3848	NewWrappedSystemError wraps an error with a wrapped SystemError
3849	Error implements the error interface for SystemError .
3850	GetContextError returns ErrTimeout if not set
3851	GetSystemErrorCode returns the SystemErrCode corresponding to the given error .
3852	ping pings the connection .
3853	handlePingRes is used to handle a ping response
3854	handlePingReq handles a ping request
3855	SendSystemError sends an error to the connection pool
3856	connectionError closes the connection and logs the error .
3857	withStateLock runs f with the mutex locked .
3858	withStateRLock runs f with the mutex locked .
3859	readFrames is used to read a single frame
3860	Write frames to the connection
3861	hasPendingCalls returns true if there are pending calls .
3862	checkExchanges runs the set of connections that are not closed .
3863	closeNetwork closes the underlying network .
3864	getLastActivityTime returns the last activity time .
3865	Validate validates the given service .
3866	logFailedRegistrationRetry logs an error if the retry fails .
3867	initialAdvertise is used to send advertisements to hyperbahn
3868	Service returns the full service message
3869	TTL returns the TTL of the request .
3870	SetTTL sets the TTL for the given duration .
3871	finishesCall returns true if the frame ends with a message .
3872	Flat returns a flat list of all the platforms in alphabetical order .
3873	Map applies a function to each string in the platform .
3874	MapSlice returns a map of platforms .
3875	GetProtoConfig retrieves the ProtoConfig from the given Config .
3876	MapExprStrings maps an expression to a bazel . Expr .
3877	FlattenExpr flattens an Expr .
3878	makePlatformStringsExpr constructs bazel . Expr from platformStringsExpr .
3879	String returns a string representation of the platform .
3880	Find returns the absolute path of the given directory .
3881	runGazelle runs the gazelle command .
3882	restoreBuildFilesInRepo restores the files in the given repository .
3883	FixLoads modifies the rules in the file .
3884	fixLoad modifies a rule . Load from the given file .
3885	newLoadIndex returns the load index of rules .
3886	removeLegacyGoRepository removes the reference to go file .
3887	Compare compares two versions .
3888	ParseVersion parses a version string into a Version object .
3889	EmptyFile creates an empty file .
3890	LoadWorkspaceFile loads a workspace file from disk .
3891	LoadMacroFile loads a file from disk .
3892	EmptyMacroFile returns an empty macro file from the given path .
3893	LoadData loads the data from the specified path .
3894	LoadWorkspaceData loads the workspace data from the given path .
3895	LoadMacroData loads the data from a file .
3896	ScanAST scans the given file against the given package .
3897	ScanASTBody scans an AST file and returns a File object .
3898	MatchBuildFileName returns the path to the file in the given directory .
3899	SyncMacroFile synchronizes the contents of the File
3900	MicroName returns the name of the Macro .
3901	Sync synchronizes the file .
3902	Format returns bz . File as a byte slice .
3903	Save saves the file at the given path .
3904	HasDefaultVisibility returns true if file has default_visibility
3905	NewLoad creates a new Load .
3906	Symbols returns all symbols in the Load .
3907	Has returns true if the given symbol exists .
3908	Add adds a symbol to the load
3909	Remove removes a symbol from the Load .
3910	Insert adds a new file at the given index .
3911	NewRule creates a new Rule .
3912	SetKind sets the kind of the rule
3913	AttrKeys returns a sorted list of the keys of the rule .
3914	Attr returns bazel . Expr for a key .
3915	AttrString returns the value of a key as a string .
3916	AttrStrings returns a slice of strings for a given key .
3917	DelAttr removes an attribute from the rule .
3918	SetAttr sets an attribute for a key .
3919	private attribute keys
3920	SetPrivateAttr sets a private key
3921	Insert adds a Rule to the given File .
3922	IsEmpty returns true if info is empty .
3923	CheckInternalVisibility checks if the given visibility is valid
3924	New creates a new label .
3925	Rel returns the label of a given repository .
3926	Equal returns true if two Label objects are equal ; otherwise false is returned .
3927	Contains returns true if other contains other .
3928	generateFromPath generates the package from the given path .
3929	shouldCall returns true if the current mode should be called .
3930	shouldUpdate returns true if the path needs to be updated .
3931	shouldVisit returns true if the rel should be visited
3932	SquashRules squashes the specified rule to dst .
3933	runClient runs gazelle server
3934	UpdateRepo updates a repository in the cache .
3935	NewRemoteCache creates a new RemoteCache .
3936	Remote is part of the Cache interface .
3937	get gets the value from the cache if it exists .
3938	ensure checks if the key already exists in the cache . If the key already exists it is overwritten .
3939	RelBaseName returns relative base name from rel .
3940	Clone returns a deep copy of c .
3941	IsValidBuildFileName returns true if the provided name is a valid build file name .
3942	check returns whether the tag line is valid .
3943	fileNameInfo returns the fileInfo for the given path .
3944	otherFileInfo reads file info from path .
3945	protoFileInfo generates a fileInfo from a file .
3946	AddRule adds a rule to the index .
3947	Finish collects all imported rules
3948	buildImportIndex is responsible for building the import map .
3949	IsSelfImport returns true if the find result is a self import
3950	applyKindMappings takes a list of maps and merges them into a map .
3951	appendOrMergeKindMapping takes a mapKind and merges it into a map . LoadInfo
3952	RuleName computes the rule name from the given names .
3953	buildPackages creates a list of packages from dir in dir .
3954	selectPackage selects a package from the given directory .
3955	generateProto creates a proto from a proto file
3956	generateEmpty returns a slice of all the rules in the given file .
3957	ImportRepoRules takes a repo file and returns a set of rules that match the repo .
3958	MergeRules takes a set of rules and merges them into a set of rules and merges them into a new one .
3959	GenerateRule creates rule based on repository
3960	FindExternalRepo returns the absolute path of the external repo in the given directory .
3961	ListRepositories returns a map of repository names to repository .
3962	MigrateLibraryEmbed is used to migrate a library Embed document
3963	MigrateGrpcCompilers migrate gRPC library to libv1 library .
3964	squashCgoLibrary alters cgo library rules in cgo_library
3965	removeLegacyProto removes the proto file from the config .
3966	removeLegacyGazelle removes the Gazel rule from the config file .
3967	selectPackage selects a package from the config .
3968	AddBuiltin adds a builtin .
3969	MappedKind adds pkgRel to the map .
3970	Resolver returns a resolver for the given rule .
3971	sortExprLabels sorts the labels in bazel .
3972	checkRulesGoVersion checks if the rules_go file exists .
3973	preprocessTags is used to preprocess tags
3974	setBuildTags sets build tags
3975	splitValue splits a string into a list of values .
3976	copyGoModToTemp copies the go . mod file into a temporary directory .
3977	findGoTool attempts to find the go tool from the environment
3978	isBuildable returns true if the package is buildable .
3979	startServer starts the server .
3980	watchDir watches for changes in a directory .
3981	listDirs recursively lists all directories under the given directory .
3982	shouldIgnore returns true if the path should be ignored .
3983	recordWrite sets the directory to the given path .
3984	Get all recorded directories
3985	CombineHandlers returns an http . HandlerFunc that adds multiple handlers to a single http . HandlerFunc .
3986	VerifyContentType verifies the Content - Type header .
3987	VerifyMimeType verifies a mime type
3988	VerifyBasicAuth verifies that the provided credentials match the provided credentials .
3989	VerifyJSONRepresenting returns an http . HandlerFunc that verifies the given object against the provided object .
3990	VerifyFormKV returns a HandlerFunc that uses the given form key and values .
3991	RespondWithProto wraps an http . HandlerFunc with custom status code .
3992	RegisterFailHandlerWithT registers a fake fail handler with the given TWithHelper
3993	EventuallyWithOffset builds an AsyncAssertion from an offset .
3994	ConsistentlyWithOffset creates a new AsyncAssertion with the given offset .
3995	Expect returns an Assertion representing the given assertion .
3996	Eventually returns an AsyncAssertion if the interval exceeds the provided interval .
3997	Consistently returns an AsyncAssertion if the interval is exceeded .
3998	TimeoutCloser wraps c as an io . Closer with a timeout .
3999	TimeoutReader returns an io . Reader that reads from r .
4000	TimeoutWriter returns an io . Writer that writes to w .
4001	Nested will return a nested error
4002	SetMockService sets mock service
4003	FindMachineByIdOrAddress find machine by id
4004	Write is part of the http . ResponseWriter interface
4005	Hijack the connection
4006	ListDeploys list deploy data
4007	AddAll registers all the routes with the given version and path .
4008	samlRequestTimeout returns the request_timeout
4009	RegisterHandler adds an http . Handler to the given handler .
4010	RegisterHandlerVersion registers a handler for the given version .
4011	Check executes the checker and returns the results .
4012	DiscoverRepositoryPath returns the path to the repository in the given directory .
4013	OpenRepository opens a repository by path .
4014	RemoteURL returns the remote URL of the remote repository .
4015	List lists all App in the indexer .
4016	Apps returns an object that can list and get Apps .
4017	List lists all App in the indexer for a given namespace .
4018	StreamJSONResponse writes the JSON response to w .
4019	DropDatabase drops a database
4020	Collection returns an instance of Collection .
4021	SetLogger sets the default logger .
4022	Error logs an error .
4023	Errorf logs an error .
4024	Fatal exits the target .
4025	Debugf logs to the target .
4026	GetStdLogger returns the default logger .
4027	Namespace returns the name of the cluster
4028	createContainers creates containers .
4029	checkProvisioner checks if provisioner exists .
4030	checkDocker returns an error if the docker configuration is not configured .
4031	checkScheduler returns an error if the scheduler is not configured .
4032	checkRouter returns an error if the default router is not configured .
4033	Available returns whether the unit is available for this unit .
4034	Get returns a provisioner by name .
4035	Registry returns all available provisioners .
4036	Error implements the error interface for Error .
4037	validateVersion returns true if current version is supported
4038	ReadTarget reads the TURU target from the environment
4039	WriteTarget writes t into t .
4040	WriteOnTargetList writes the given target .
4041	Connect returns a new Storage object .
4042	Apps returns all apps .
4043	PoolsConstraints returns all pools_constraints .
4044	Users implements Storage . Users .
4045	SAMLRequests is part of the Storage interface .
4046	AppLogCollection is defined on the Storage interface .
4047	CreateAppLogCollection implements storage . AppLogCollection
4048	LogsCollections returns all logs in the storage .
4049	ArchiveBuildCmds returns a list of commands to build the build .
4050	archive deploys
4051	DeployCmds returns a list of commands to deploy .
4052	runWithAgentCmds returns the list of commands to run a command in the specified app .
4053	newApps returns a apps
4054	Commit commits a container .
4055	processTags process tags
4056	aggregateContainersBy aggregates the containers matching the provided matcher
4057	chooseNodeToAdd chooses a node from a list of nodes
4058	chooseContainerToRemove chooses a container to remove from the cluster .
4059	Get retrieves a router by name .
4060	Default returns the default router name .
4061	Store stores an application
4062	TsuruV1 retrieves the TsuruV1Client
4063	Tsuru retrieves the TsuruV1Client
4064	NewAppInformer constructs a new informer for App type . Always prefer using an informer factory to get a shared informer instead of getting an independent one . This reduces memory footprint and number of connections to the server .
4065	NewFilteredAppInformer constructs a new informer for App type . Always prefer using an informer factory to get a shared informer instead of getting an independent one . This reduces memory footprint and number of connections to the server .
4066	Watch returns a watch . Interface that watches the requested apps .
4067	Patch applies the patch and returns the patched app .
4068	NewSharedInformerFactory constructs a new SharedInformerFactory .
4069	NewFilteredSharedInformerFactory constructs a new informerFactory .
4070	Proxy is not available
4071	UnbindUnit unsets the specified unit
4072	Create a plan .
4073	Remove removes a plan .
4074	ensureDefault checks if the plan is available or not .
4075	DeleteInstance deletes an instance from the given service instance
4076	ToInfo converts this ServiceInstance to a ServiceInstance
4077	Update updates an existing service instance
4078	BindApp binds a service instance to an app
4079	BindUnit implements Service . BindUnit .
4080	UnbindApp unbinds an app instance
4081	Status returns the status of a service instance
4082	ProxyInstance is used to perform a proxy on a given instance
4083	Inc increments the quota for an app .
4084	SetLimit sets the limit for an app .
4085	Set sets quota for use
4086	Get returns a quota
4087	RemoveImage removes an image from the registry
4088	RemoveAppImages removes images from the registry
4089	Create creates a platform
4090	List lists all platforms
4091	FindByName retrieves a platform by name .
4092	Update updates platform image
4093	Remove a platform .
4094	Rollback rolls back a platform .
4095	GetPoolByName returns a pool by name .
4096	Manager returns the repository manager .
4097	Register registers a repository manager .
4098	start starts the bindSyncer .
4099	Shutdown stops the cluster .
4100	GetForProvisioner returns the builder for the specified provisioner .
4101	get returns the builder with the given name .
4102	Registry returns all registered builders .
4103	RegisterQueueTask registers a queue task
4104	Apps returns a AppInformer .
4105	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new App .
4106	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new AppList .
4107	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new AppSpec .
4108	Write implements the io . Writer interface
4109	ResetPassword resets a new password using the reset token .
4110	addKnownTypes adds known types to the scheme .
4111	Register a Shutdownable
4112	Do executes the given context and returns a list of all registered workers .
4113	ListImagesOrDefault lists the images for a platform
4114	MigrateAppsCRDs migrates apps .
4115	Register registers a new MigrateFunc .
4116	RegisterOptional is part of the MigrateFunc interface .
4117	Run is a convenience wrapper for Run . Run .
4118	Units implements App .
4119	MarshalJSON method of App
4120	AcquireApplicationLockWait acquires an app lock .
4121	ReleaseApplicationLock releases an application lock
4122	GetByName returns an app by name .
4123	AddUnits adds n units to the app .
4124	SetUnitStatus sets the status for the application .
4125	UpdateNodeStatus updates node status
4126	available returns true if app is available .
4127	Grant adds a user to an app .
4128	Revoke revokes an app .
4129	GetTeams returns a list of team teams
4130	setEnv sets the env variable
4131	getEnv returns the environment variable for the app .
4132	validateNew returns an error if the app name is not valid .
4133	validate plan .
4134	InstanceEnvs returns a map of environment variables bound to the instance .
4135	Run is part of the App interface .
4136	GetUnits returns a slice of bind units .
4137	GetUUID returns the UUID of the app
4138	Envs returns a map of environment variables .
4139	SetEnvs sets environment variables .
4140	UnsetEnvs unsets the environment variables .
4141	AddCName adds cnames to app .
4142	Log records the given message to the app .
4143	LastLogs returns the last app logs
4144	List returns all apps matching the filter .
4145	Swap swaps two apps .
4146	Start starts an app .
4147	GetDbDriver returns the database driver by name .
4148	GetCurrentDbDriver returns the current database driver
4149	NewForConfig creates a new Clientset for the given config .
4150	GetAppFromUnitID returns the app from the specified unit
4151	NewPipeline creates a new pipeline .
4152	Result returns the final result of the pipeline .
4153	DecodeJsonPayload decodes the JSON payload into v .
4154	UrlFor returns the base url for the given path and query parameters .
4155	GetCorsInfo gets the CORS information from the request .
4156	Middleware function for CorsMiddleware
4157	MiddlewareFunc returns a middleware function for the recorderResponse .
4158	WriteHeader implements the http . ResponseWriter interface .
4159	MakeRouter creates a new router .
4160	AppFunc returns a handler function for the given URL .
4161	escapePath returns the escaped path .
4162	escapePathExp replaces the escaped part of the URL path .
4163	start starts the router .
4164	ofFirstDefinedRoute returns the first route in the list of routes .
4165	findRouteFromURL is used to find a route from a given URL
4166	MiddlewareFunc checks the Content - Type header .
4167	CloseNotify closes the http . ResponseWriter
4168	MiddlewareFunc returns a HandlerFunc middleware
4169	executeTextTemplate renders a text template
4170	RemoteUser implements environs . RemoteUser .
4171	ApacheQueryString returns the raw query string
4172	StartTime implements AccessLogUtil .
4173	ApacheRemoteAddr returns the remote address
4174	ResponseTime returns the response time .
4175	MiddlewareFunc adds IndentMiddleware to the response writer .
4176	EncodeJson encodes v to JSON
4177	WriteHeader implements the http . ResponseWriter interface .
4178	MakePath creates a new route .
4179	MiddlewareFunc middleware function
4180	WrapMiddlewares wraps a HandlerFunc into a HandlerFunc .
4181	MiddlewareFunc returns a HandlerFunc that wraps the Accept - Encoding response .
4182	Implements the WriteHeader interface
4183	Hijack implements http . ResponseWriter
4184	Implements the Write interface
4185	MiddlewareFunc defines middleware for middleware .
4186	printDebug prints debug level of node .
4187	AddRoute adds a route to the tree
4188	printDebug prints debug information about the tree .
4189	FindRoutes returns a list of matches that match the given path .
4190	FindRoutesAndPathMatched returns a list of matches matching a path and a boolean indicating whether a match was found .
4191	FindRoutesForPath returns a list of matches for the given path .
4192	Use adds middlewares to the api
4193	MakeHandler returns a http . Handler for the api
4194	MiddlewareFunc adds a middleware to the middleware stack .
4195	MiddlewareFunc returns a handler function for status middleware .
4196	GetStatus returns the current status .
4197	MiddlewareFunc injects Jsonp middleware into JsonpResponseWriter
4198	Flush implements the http . ResponseWriter interface .
4199	MiddlewareFunc returns a HandlerFunc that adds an AccessLogJsonMiddleware .
4200	Fetch gets an io . Reader from S3 .
4201	sanityCheck checks if envBinCheck is valid
4202	release closes the listener .
4203	fetchLoop is a long running goroutine that will fetch the current cache .
4204	Fork the master loop
4205	Init initializes the file
4206	Fetch attempts to fetch the file at the specified interval .
4207	Fetch gets an io . Reader from the HEAD request .
4208	NewConfig returns a new Config with sane defaults .
4209	Validate validates the config
4210	NewClient creates a new client for the given broker addresses .
4211	AsyncClose is part of the PartitionConsumer interface .
4212	Close closes the consumer .
4213	MarkOffset marks an offset
4214	NewConsumer creates a new consumer
4215	MarkOffsets adds offsets to the provided OffsetStash .
4216	ResetOffset resets the offset
4217	Close closes the consumer
4218	hbLoop is a long running goroutine that runs a heartbeat .
4219	twLoop is a long running goroutine that watches for topics .
4220	cmLoop is the main goroutine running on the consumer
4221	fetchOffsets fetches offsets from the given map
4222	MarkOffset implements the OffsetStash interface .
4223	ResetOffset resets the offset
4224	Offset returns a copy of the current offsets .
4225	Actual implements the InstanceGroup interface .
4226	Expected returns the expected resource for the instance group .
4227	Delete deletes an existing instance group
4228	GetReconciler returns reconciler for the given cluster
4229	GetVersion returns version information .
4230	GetVersionJSON returns the json representation of the version struct
4231	Actual takes a resource group and returns a CloudFormation object that can be used to view immutable attributes .
4232	Expected updates the expected resource group with the expected resource .
4233	CreateCmd returns cobra . Command for kubicorn command
4234	NewUbuntuCluster creates an ubuntu cluster
4235	ProviderConfig is defined on the ClusterManagerConfig interface .
4236	SetProviderConfig sets the provider config
4237	MachineProviderConfigs returns a slice of MachineProviderConfigs
4238	SetMachineProviderConfigs sets the provider configuration for the cluster
4239	NewCluster is used to create a new cluster
4240	DeployControllerCmd returns a cobra command for DeployController
4241	NewRetrier creates a new Retrier .
4242	RunRetry executes retryable signals .
4243	MustGenerateRandomBytes is like GenerateRandomBytes but panics if the given length is invalid .
4244	ExplainCmd returns a command to explain information about a cluster
4245	Generate a time ordered UUID
4246	GetConfigCmd returns a cobra command for get config command
4247	RunAnnotated is the same as RunAnnotated but with the given symbol .
4248	ListCmd returns a cobra command for listing available states
4249	NewUbuntuCluster returns a new ubuntu cluster
4250	EditCmd returns the edit command
4251	RemoveKey removes a key from the keyring
4252	RemoveKeyUsingFile removes a key from the keyring
4253	Actual implements Firewall .
4254	Expected updates the resource with the given resource .
4255	Apply implements Firewall .
4256	Delete deletes a firewall resource .
4257	DeleteCmd returns a cobra command for delete subcommands
4258	NewStateStore returns a new state store
4259	Commit commits the cluster
4260	ApplyCmd returns cobra . Command for Kubernetes
4261	ExpandPath is used to expand the current working directory
4262	CompletionCmd returns cobra . Command for completion
4263	AdoptCmd returns cobra . Command for Adopt
4264	StrEnvDef returns the given environment variable if it exists otherwise it returns the default .
4265	IntEnvDef returns the given environment variable as an int
4266	BoolEnvDef returns the given environment variable as a boolean value .
4267	readFromFS reads the contents of a file from the given path .
4268	VersionCmd implements the cobra . Command interface for Kubicorn
4269	NewSignalHandler creates a new handler for signals
4270	Register implements handler .
4271	NewUbuntuCluster returns a new ubuntu cluster
4272	BeginningOfHour returns the time of the beginning of the now time .
4273	BeginningOfDay returns the time . Time for the current time .
4274	BeginningOfWeek returns a time . Time representing the beginning of a week .
4275	BeginningOfMonth returns the beginning of the current time .
4276	BeginningOfQuarter returns a time . Time representing the beginning of the month
4277	BeginningOfYear returns the beginning of the current time .
4278	EndOfMinute returns the end of the now time .
4279	EndOfHour returns the end of the now hour
4280	EndOfDay returns the end of the current time .
4281	EndOfWeek returns the end of a week .
4282	EndOfMonth returns the end of the current time .
4283	EndOfQuarter returns the end of the current time
4284	EndOfYear returns the end of the current time .
4285	MustParse is like Parse but panics on error .
4286	Returns true if both start and end are equal
4287	ParseInLocation parses a time . Location into a time . Time .
4288	MustParse constructs a time . Time from a slice of strings .
4289	MustParseInLocation parses a time . Location into a time . Time .
4290	Returns true if two times have the same timestamp
4291	NewChannelMemoryBackend creates a new ChannelMemoryBackend .
4292	Start implements the ChannelMemoryBackend interface .
4293	Flush sends a flush event to the channel
4294	Stop stops the memory backend .
4295	Formatted returns the formatted value of the record
4296	Message returns the record s message .
4297	SetBackend sets the backend used by the logger .
4298	MustGetLogger is like GetLogger but panics on error .
4299	Reset resets the log backend .
4300	IsEnabledFor returns true if the logger is enabled for the given log level .
4301	Criticalf logs a message at critical level .
4302	Warningf logs with WARNING level . Arguments are handled in the manner of fmt . Printf .
4303	Noticef records a notice log .
4304	Infof logs with INFO level .
4305	SetFormatter sets the formatter .
4306	MustStringFormatter is like NewStringFormatter but panics on error .
4307	formatFuncName returns the function name for f .
4308	Log implements Logger .
4309	LogLevel returns the log level from a string representation .
4310	AddModuleLevel adds a new LeveledBackend to the backend .
4311	GetLevel returns the level for the given module .
4312	SetLevel sets the level for the given module .
4313	IsEnabledFor returns true if the given module is enabled for the given module .
4314	MultiLogger creates a new set of backend used by multiple backend .
4315	Log implements logging . Backend .
4316	GetLevel returns the log level for the given module .
4317	SetLevel sets the logging level for all backend .
4318	IsEnabledFor returns true if log level is enabled for the given log level .
4319	ConvertColors converts a slice of strings to a slice of strings .
4320	NewSyslogBackend creates a new syslog backend
4321	NewSyslogBackendPriority creates a new syslog backend
4322	SetBackend sets default logging backend .
4323	NewCommander returns a new Command instance .
4324	Execute is part of the Command interface
4325	explicit outputs a human - readable description of the command .
4326	explicitGroup outputs a human - readable description of the command group .
4327	helper function for debugging
4328	handleias returns the alias for the given command .
4329	Execute calls DefaultCommander . Execute
4330	LoadFromData creates a configuration file from a byte slice .
4331	LoadFromReader loads a ConfigFile from a Reader .
4332	ReloadData reloads the configuration file .
4333	AppendFiles appends new files to the config file .
4334	GetKeyList returns the list of keys for a given section .
4335	SaveConfigData writes config data to out .
4336	SaveConfigFile saves a configuration file .
4337	Find returns a Selection object that matches the selector string .
4338	FindByXPath finds a selection by XPath
4339	FindByLink returns a selection that matches the specified link .
4340	FindByLabel finds a selection by the given text .
4341	FindByName finds a selection by name .
4342	FindByClass returns a Selection object that matches the specified text .
4343	FindByID finds a selection by its id .
4344	First inserts the first element at the specified selector .
4345	FirstByXPath creates and returns the first Selection that matches the XPath selector .
4346	FirstByLink inserts the selected element at the specified link .
4347	FirstByLabel inserts the first matched element in the selection .
4348	FirstByName inserts the first matched element in the selection .
4349	All returns a MultiSelection that matches the specified selector .
4350	AllByXPath returns a MultiSelection for the specified XPath
4351	AllByLink returns a MultiSelection that matches the specified link .
4352	AllByLabel returns a MultiSelection that matches the specified label .
4353	AllByName returns a MultiSelection with the specified name .
4354	AllByClass returns a MultiSelection with all the matched classes .
4355	AllByID returns a MultiSelection that matches the specified text .
4356	FindForAppium creates a selection for the given appium class and text .
4357	Timeout returns an Option that sets the timeout for the connection .
4358	ChromeOptions returns an option that sets the given option to the given value .
4359	JoinPage creates a new Page with the given options .
4360	Destroy destroys the Page .
4361	Reset resets the page .
4362	Navigate sets the given URL .
4363	GetCookies gets all the cookies for this Page .
4364	SetCookie sets a cookie .
4365	DeleteCookie deletes a cookie .
4366	ClearCookies removes all cookies from the page .
4367	URL returns the URL of the page .
4368	Size sets the size of the page .
4369	Screenshot screenshot from file .
4370	Title returns the title of the page .
4371	HTML returns the current page s HTML .
4372	PopupText returns the popped popup text .
4373	EnterPopupText will enter popup text
4374	ConfirmPopup confirms the popup .
4375	CancelPopup cancels the popup .
4376	SwitchToParentFrame switch to parent frame .
4377	SwitchToRootFrame switches to the current frame .
4378	NextWindow gets the next available window .
4379	CloseWindow closes the page .
4380	WindowCount returns the number of available windows .
4381	LogTypes returns the list of log types for this page .
4382	MoveMouseBy moves the mouse to the given coordinates .
4383	DoubleClick performs a double click .
4384	Click sends a click event to the page .
4385	Click clicks on all elements in the selection .
4386	DoubleClick loops over all elements in the selection .
4387	Fill fills all elements in the set of matched elements .
4388	Tap touches the selected element .
4389	Touch handles touch events .
4390	FlickFinger flips the selected element at the specified point .
4391	ScrollFinger scrolls the current element at the specified position .
4392	NewCapabilities returns a new capability with the specified features .
4393	JSON jsonified capabilities
4394	HaveTitle checks if the title has the title
4395	HaveURL evaluates the given URL
4396	HavePopupText checks if the text is a popga matcher
4397	HaveLoggedError returns a grpc . Logging error
4398	Text returns the text of each element in the Selection .
4399	Active checks if the current selection is active .
4400	Attribute returns the element s value as a string .
4401	CSS returns the element s CSS property .
4402	selected returns true if the selection has been selected .
4403	Visible returns true if the selection has been visible .
4404	Enabled returns true if the selection is enabled .
4405	HaveCount checks if the number of elements have a count
4406	HaveAttribute checks if the attribute has the expected value
4407	EdgeDriver creates a new WebDriver .
4408	Selendroid returns a new WebDriver for Selendroid .
4409	SwitchToFrame switches the specified frame from the current selection .
4410	Count returns the number of elements in the set of matched elements .
4411	EqualsElement returns true if two Selection objects are equal ; otherwise false is returned .
4412	MouseToElement moves the mouse to one element .
4413	loggingMiddleware is logging middleware .
4414	chainHandlers chains multiple middlewares into one middleware .
4415	HTTPReverseProxy starts a reverse proxy using the specified options .
4416	CheckInstallation checks if the installation is installed .
4417	CheckVersion checks if the specified version is valid
4418	GetVersionForBinary returns the version for a given binary
4419	getUser returns information about a user .
4420	login logs a user .
4421	loginHandler handles the authenticated user .
4422	Log out the user .
4423	viewHandler handles a view request .
4424	Run the client
4425	WithRequest adds a request to an Interaction .
4426	WillRespondWith allows you to specify the response of the Interaction .
4427	isJSONFormattedObject returns true if string is a formatted object
4428	ByUsername returns a user by username .
4429	ByID returns a user by given ID .
4430	UserLogin handles a request to create a user login .
4431	newClient creates a new client
4432	NewClient returns a new instance of the PactClient
4433	ListServers lists all registered servers
4434	UpdateMessagePact adds a message to the lobby
4435	PublishPacts sends a publish request
4436	getPort returns the port of the given URL .
4437	getAddress returns the address of the given URL .
4438	sanitise Ruby response
4439	Publish - publishes a publish request
4440	FindPortInRange tries to find a port in a range
4441	EachLike matcher for given content type and minimum requirements
4442	Term returns a matcher that matches a regexp string .
4443	UnmarshalJSON implements json . Unmarshaler for MapMatcher .
4444	Convert an object to a string
4445	match returns a matcher matching params .
4446	AddMessage adds a new message to the Pact
4447	AddInteraction adds a new interaction
4448	Teardown stops the server .
4449	Verify verifies all the interactions with a mock
4450	stateHandlerMiddleware adds state handlers to the request .
4451	VerifyMessageProviderRaw is the same as VerifyMessageProvider but returns a ProviderVerifierResponse
4452	VerifyMessageConsumerRaw verifies that a message consumer is valid
4453	VerifyProvider is a mock
4454	NewService creates a new mock service
4455	Setup initializes the service manager
4456	addServiceMonitor starts the service monitor .
4457	removeServiceMonitor removes the monitor from the service manager .
4458	List implements ServiceManager . List
4459	Command returns a command from the service manager .
4460	call mock
4461	DeleteInteractions mocks base method
4462	AddInteraction mocks base method
4463	WritePact mocks base method
4464	ExpectsToReceive sets the description of the message .
4465	WithMetadata adds the metadata to the message .
4466	AsType implements Message .
4467	UserLogin logs an auth token
4468	Region returns the region specified by the S3 environment variable .
4469	New creates a new S3 instance .
4470	Bucket creates a bucket .
4471	PutWriter returns an io . WriteCloser for the given bucket .
4472	url builds a URL from a config file .
4473	SetLogger sets the logger
4474	InstanceKeys is used to create a new set of SSH keys
4475	EnvKeys retrieves keys from environment
4476	Sign adds a signature to the request .
4477	getAWSKeys gets the AWS keys from the environment
4478	homeDir returns the user s home directory .
4479	ACL defines a ACL header .
4480	putPart puts a part .
4481	abort the multipart upload .
4482	growPartSize returns true if the partSize is greater than the given partSize .
4483	CheckDisallowed returns an error if the prefix is not allowed .
4484	Process parses the spec and calls ParseError with the given prefix .
4485	MustProcess is like Process but panics on error
4486	toTypeDescription returns a description of a type
4487	Usage prints the usage
4488	Usagef computes and writes the usage information to out .
4489	Usaget generates code for the given template and writes it to out .
4490	Scan implements the sql . Scanner interface .
4491	Value implements the sql . Valuer interface .
4492	NewTime creates a new time . Time .
4493	Convert a time . Time to a time . Time .
4494	ValueOrZero returns time . Time value representation of time .
4495	MarshalJSON implements the json . Marshaler interface .
4496	SetValid sets a time . Time value .
4497	Ptr returns a pointer to time . Time value .
4498	NewBool creates a new NullBool .
4499	BoolFromPtr creates a new Bool from a pointer .
4500	UnmarshalJSON implements the json . Unmarshaler interface for Bool .
4501	UnmarshalText unmarshals a boolean value from text .
4502	MarshalJSON returns the JSON encoding of a bool
4503	SetValid sets the boolean value
4504	NewString creates a new String
4505	UnmarshalJSON implements the json . Unmarshaler interface for String .
4506	MarshalText implements the encoding . TextMarshaler interface .
4507	UnmarshalText implements the encoding . TextUnmarshaler interface
4508	SetValid sets the String field s value .
4509	StringFromPtr creates a new String from a pointer .
4510	MarshalJSON - encodes string to JSON data .
4511	NewInt creates a new Int .
4512	IntFromPtr creates an Int from a pointer .
4513	UnmarshalJSON unmarshals a int from JSON .
4514	MarshalText implements the encoding . TextMarshaler interface .
4515	SetValid changes the int64 value to be valid .
4516	UnmarshalText implements the encoding . TextUnmarshaler interface
4517	MarshalText encodes bool to text .
4518	SetValid sets the float64 value
4519	MarshalJSON implements the json . Marshaler interface .
4520	UnmarshalJSON implements json . Unmarshaler for Float .
4521	UnmarshalText implements the encoding . TextUnmarshaler interface
4522	MarshalJSON marshals Float to JSON .
4523	newGossipChannel creates a new gossip channel
4524	GossipUnicast sends a message to the gossip channel
4525	GossipBroadcast broadcast a gossip message to all peers
4526	Send sends the given GossipData to the channel .
4527	SendDown is part of the Channel interface .
4528	gobEncode encodes a slice of items into a byte slice .
4529	newTokenBucket creates a new tokenBucket .
4530	wait waits for the capacityToken to be unspent .
4531	capacityToken returns the current capacity token .
4532	PrefixRangeEnd returns the end of a given prefix .
4533	newLocalPeer creates a new random peer .
4534	getConnections returns the currently connected connections
4535	createConnection is used to create a new connection
4536	doAddConnection adds a new connection to the local peer .
4537	startLocalConnection starts a new local connection .
4538	SendProtocolMsg sends a protocol message to the server .
4539	NewStatus creates a new Status .
4540	makePeerStatusSlice returns a slice of PeerStatus objects
4541	makeUnicastRouteStatusSlice returns a slice of unicast route status slices
4542	makeBroadcastRouteStatusSlice returns a slice of broadcastRouteStatus for each peer .
4543	makeLocalConnectionStatusSlice returns a slice of local connections .
4544	makeTrustedSubnetsSlice converts list of strings to slice of strings
4545	Range implements the EtcStore interface .
4546	Put implements the EtcdStore interface .
4547	DeleteRange implements the EtcdStore interface .
4548	Txn implements the EtcStore interface .
4549	Compact implements the EtcdStore interface
4550	proposeInternalRaftRequest returns a channel that sends a request to etcd .
4551	applyCompare applies the given KV to etcdserverpb . Compare .
4552	Desccriptions returns the list of peers
4553	OnGC adds a callback function to be called when a peer receives a callback
4554	OnInvalidateShortIDs registers a callback for invalidate short IDs .
4555	chooseShortID picks a short ID from the list of peers and returns the PeerShortID to use .
4556	fetchWithDefault adds a peer to the list of peers if it exists . Otherwise it returns the new peer .
4557	Fetch returns the peer with the given name .
4558	fetchAndAddRef returns a peer with the given name or nil if it doesn t exist .
4559	FetchByShortID returns a peer by shortID .
4560	GarbageCollect garbage collects peers
4561	newRoutes is used to create routes
4562	OnChange adds a callback to the list of registered routes .
4563	Unicast returns the peer name for the given peer name
4564	UnicastAll returns the named peer name and whether it exists .
4565	Broadcast looks up a list of registered routes by name .
4566	BroadcastAll returns a slice of all registered channels .
4567	NewPeer creates a new gossip peer
4568	Register a new gossip filter
4569	ReadFrom reads data from the peer .
4570	WriteTo is part of the peer . Peer interface .
4571	LocalAddr returns the peer s local address
4572	OnGossip implements the Peer interface .
4573	OnGossipBroadcast is invoked when a peer receives a message .
4574	OnGossipUnicast is invoked when a peer receives a message .
4575	NewDefaultServer creates a new default server
4576	PeerNameFromUserInput creates a peer name from a user input
4577	bytes returns the bytes representation of the PeerName .
4578	NewRouter creates a new Router
4579	sendAllGossip is used to send all gossip messages
4580	Send all Gossip down
4581	broadcastTopologyUpdate broadcasts a set of peers to all connected peers .
4582	OnGossipUnicast is a callback for OnGossipUnicast
4583	OnGossipBroadcast is invoked when a peer receives a gossip message .
4584	Gossip returns a new gossip message
4585	OnGossip is invoked when a peer receives a gossip message .
4586	Encode encodes the gossip data into a byte slice .
4587	newState returns a new state
4588	Merge returns a complete complete copy of the given GossipData .
4589	mergeReceived returns a new GossipData with the given set
4590	mergeComplete returns a complete GossipData with the given set
4591	OnGossipBroadcast instantiates a new GossipMessage
4592	OnGossip returns a GossipData for the given update
4593	generateKeyPair generates a new public key pair
4594	formSessionKey generates a new session key from the local public key and localPrivateKey .
4595	newTCPCryptoState returns a new tcpCryptoState .
4596	Send encodes a gob - encoded message .
4597	Send sends a message to the buffer .
4598	Send sends a message .
4599	Receive receives a decoder and decodes a buffer
4600	Receive reads a message from the wire .
4601	Receive is part of the Conn interface .
4602	newPeer creates a new peer .
4603	incr increments the send message and returns the result .
4604	Gossip returns a complete copy of the channel .
4605	OnGossipUnicast is invoked when a peer arrives .
4606	makeRaftPeer creates a Raft peer from an address .
4607	String returns a string representation of the peer
4608	forEachConnectedPeer calls f for each connected peer . If set is set to true the function is called .
4609	parsePeerUID parses a string to PeerUID .
4610	Swap implements sort . Interface for ListOfPeers .
4611	Less returns true if the element at index i is less than j .
4612	doIntro executes the protocol introspection .
4613	filterV1Features returns a map of protocol v1 features from the input map
4614	newConnectionMaker creates a new connection maker .
4615	connectionAborted marks the specified address as aborted .
4616	newGossipSender creates a new gossip sender
4617	Send merges GossipData into the sender .
4618	Broadcast adds a GossipData to the sendSender
4619	Flush returns a bool indicating if the sender has been buffered .
4620	Sender creates a new gossip sender
4621	Flush the gossip sender
4622	findMainPath returns the path to the main function .
4623	Create creates a new channel .
4624	Send a message to the channel .
4625	SendJSON marshals the given value to JSON .
4626	remapError remaps an error from the internal API server .
4627	NamespacedContext returns a new context with the given namespace .
4628	toToItem converts memcacheGetResponse_Item to an Item .
4629	singleError returns the MultiError if the error is a MultiError .
4630	Get retrieves an item from the cache . If the key doesn t exist it returns ErrCacheMiss .
4631	GetMulti returns a map of key - value pairs .
4632	Delete deletes the value associated with key .
4633	DeleteMulti deletes the given key .
4634	Increment increments a value in the context .
4635	IncrementExisting increments the value at the given delta .
4636	set sets the value of a set request .
4637	Get retrieves an Item from the cache .
4638	Stats for memcache .
4639	Flush all memcache .
4640	RunInBackground runs the background .
4641	List returns a list of all the available modules .
4642	SetNumInstances sets the number of instances for the given module .
4643	Versions returns the list of versions for the given module .
4644	Returns the default version for the given module .
4645	Start starts a module .
4646	Stop a module .
4647	Ancestor sets the ancestor for the query .
4648	EventualConsistency determines whether this query should be scheduled on the query .
4649	Project adds one or more fields to the query .
4650	Distinct sets the distinct query to use .
4651	DistinctOn sets distinct on the query .
4652	KeysOnly sets the keys only clause for the query .
4653	Limit sets the limit on the query .
4654	Offset sets the given offset .
4655	BatchSize updates the size of the query .
4656	Start sets the start of the query .
4657	End ends the query with the given cursor .
4658	Count returns the number of results for the given query .
4659	Run executes the given query .
4660	Next gets the next key from the iterator or returns an error .
4661	Cursor returns a cursor for the current query .
4662	String returns the string representation of the cursor .
4663	DecodeCursor decodes a Cursor from a string .
4664	saveEntity saves a property to a struct
4665	Namespace extracts the namespace from the given context .
4666	typeof returns the typeof for the given function name .
4667	dot creates a dot from a pointer .
4668	joinFunc joins out to out .
4669	validPropertyName returns true if the property name is a valid property name .
4670	getStructCodec returns the structCodec for the given type .
4671	LoadStruct loads a struct into dst .
4672	SaveStruct returns a slice of properties of src .
4673	ServingURL returns the url for the specified blob .
4674	DeleteServingURL deletes the serving URL from the image .
4675	CurrentOAuth returns the OAuth user associated with the given scopes .
4676	OAuthConsumerKey returns OAuth consumer key
4677	String implements the Stringer interface for User .
4678	LoginURL returns a URL that can be used to login the given URL .
4679	CreateLoginURLFederated creates the login URL for the given identity and identity .
4680	Create a new logout URL
4681	insertContext adds a context to the file .
4682	NewClient creates a new API client .
4683	NewContext creates a new context
4684	NewRemoteContext creates a new context .
4685	Debugf logs a message at debug level .
4686	guestbookKey returns the key for the guestbook
4687	toRetryParameters converts a TaskQueueRetryOptions to a TaskQueueRetryParameters .
4688	NewPOSTTask creates a new POST task with the given parameters .
4689	ParseRequestHeaders parses a http . Header into RequestHeaders struct
4690	Add a task to the queue
4691	AddMulti adds multiple tasks to a task queue .
4692	Delete deletes a task .
4693	DeleteMulti deletes a task queue
4694	Lease is part of the lease . Controller interface .
4695	LeaseByTag is part of the lease . Controller interface .
4696	Purge removes a task queue
4697	ModifyLease modifies the task queue
4698	QueueStats returns the task queue statistics .
4699	IsTimeoutError returns true if the error is a timeout error .
4700	Func creates a new function .
4701	Task returns a taskqueue task .
4702	RequestHeaders extracts the request headers from the context .
4703	WithContext returns a new context with the given request .
4704	WithAPICallFunc returns a new context with a CallOverrideFunc set .
4705	APICall is part of the internal interface .
4706	Get the hostname for the module .
4707	Get a new access token .
4708	PublicCertificates returns all public certificates for the application .
4709	ServiceAccount returns the name of the service account .
4710	SignBytes signs the given bytes .
4711	fetch reads the blob from the blobstore .
4712	seek returns the position at the given offset .
4713	multiKeyToProto converts an appID to a slice of KeyToProto .
4714	referenceValueToKey converts a PropertyValue_ReferenceValue to a key .
4715	keyToReferenceValue converts a defaultAppID to a PropertyValue_ReferenceValue
4716	Put stores a key in the context .
4717	PutMulti puts a multi value into the datastore
4718	Delete deletes a key .
4719	DeleteMulti deletes the given key .
4720	deploy is used to deploy a command
4721	Next returns the next result in the result .
4722	toAppLogs creates a slice of AppLogs from a slice of AppLogLines .
4723	protoRecord converts a pb . RequestLog to a record .
4724	Run executes a single app .
4725	run the result .
4726	Current returns the current user .
4727	IsAdmin returns true if user is admin
4728	isErrFieldMismatch returns true if err is ErrFieldMismatch .
4729	Stat stats a blob .
4730	Send sends an appengine blob .
4731	UploadURL creates a URL for the blobstore .
4732	Delete deletes a blob by blobKey .
4733	DeleteMulti deletes a blob from the blobstore .
4734	NewReader returns a Reader for the given blobKey .
4735	Handle registers a function to handle a message .
4736	Send sends a message to Slack .
4737	Invite sends an invitation to the host .
4738	Send a presence .
4739	GetPresence returns the presence of the given presence
4740	GetPresenceMulti returns a list of presence information from a Jid
4741	newStructFLS returns a FieldLoadSaver .
4742	SaveStruct is a helper function to save struct fields to struct
4743	Namespaces returns a list of all registered keys
4744	Kinds returns all registered kinds .
4745	RunInTransaction runs the given function f in a transaction . If f returns an error it will be returned .
4746	imports returns true if the given file contains the given path .
4747	importSpec returns the import spec for the given file .
4748	declImports returns true if the given GenDecl is an import path .
4749	isPkgDot returns true if the given package is a dot .
4750	isTopName returns true if the expression is a top - name .
4751	isName returns true if the expression is a name .
4752	isCall returns true if the expression is a call expression .
4753	containsTo returns true if x and y refers to an element
4754	isEmptyString returns true if the expression is an empty string .
4755	countUses returns the number of occurrences of the given operation
4756	assignTo checks if an identifier is assigned to this identifier
4757	newPkgDot returns an expression .
4758	renameTop takes a file name and old and returns true iff and false otherwise .
4759	matchLen returns the length of two strings .
4760	deleteImport deletes an import from file at path .
4761	rewriteImport rewrites an existing import .
4762	DefaultTicket returns the default ticket for the app
4763	flushLog sends a flush log message to the context .
4764	withDeadline returns a copy of parent with a deadline set .
4765	KeepAlive will keep the connection alive .
4766	applyTransaction applies a transaction to the given message .
4767	Analyze builds an app from a list of tags .
4768	buildContext creates a build . Context based on the provided tags .
4769	syneizeMain writes the main file to the given writer .
4770	findInGopath finds the package in dir .
4771	copyTree copies files from srcDir to dstDir .
4772	copyFile copies a file from src to dst .
4773	checkMain checks if the main source is a main package .
4774	isMain returns true if f is a main entry .
4775	readFile reads the file named by filename .
4776	initField initializes the field of val .
4777	loadEntity loads an EntityProto from dst .
4778	validIndexNameOrDocID checks if the given string is a valid document name or document ID .
4779	Open opens an index .
4780	Put puts an element into the index .
4781	Get the documents matching the given id .
4782	Delete removes an index .
4783	DeleteMulti deletes all documents matching the given documents .
4784	Search implements the Index interface .
4785	fetchMore fetches more values from the list .
4786	Next retrieves the next item from the iterator or returns an error if one occurs .
4787	Facets returns the facets for this Iterator .
4788	Returns the default bucket name
4789	valid returns true if the key is valid .
4790	Equal checks if two keys are equal
4791	root returns the root key .
4792	marshal writes a key into b .
4793	String returns a human - readable representation of the key .
4794	Encode returns a base64 encoded string
4795	DecodeKey decodes a key encoded in base64 encoded string
4796	NewIncompleteKey creates a new Key with no parent .
4797	NewKey returns a new Key .
4798	AllocateIDs allocates a set of IDs to the given kind .
4799	IsOverQuota returns true if the passed error is an OverQuota error .
4800	ClassicContextFromContext extracts the context from a context . Context .
4801	Send sends a message .
4802	SendToAdmins sends a message to all administrators .
4803	Failures returns the number of failed packets
4804	decodeFieldNumberAndTyp3 decodes a field number and returns the number of bytes read .
4805	checkTyp3 returns an error if the type is not recognized .
4806	decodeTyp3 decodes a Typ3 from a byte slice .
4807	NewPrefixBytes returns a new PrefixBytes .
4808	getLengthStr returns string representation of the length value
4809	collects implementationers_nolock collects implementations from the type info
4810	checkConflictsInPrio_nolock checks for conflict conflicts .
4811	constructConcreteType constructs a concrete type from a concrete type .
4812	MarshalBinaryLengthPrefixedWriter implements the encoding . BinaryLengthPrefixedWriter interface .
4813	MarshalBinaryBare implements the encoding . BinaryMarshaler interface .
4814	UnmarshalBinaryLengthPrefixed is the same as UnmarshalBinaryLengthPrefixed .
4815	UnmarshalBinaryBare is used to unmarshal a BSON element .
4816	MustMarshalJSON implements the json . Marshaler interface .
4817	MustUnmarshalJSON is like UnmarshalJSON but panics on error .
4818	MarshalJSONIndent marshals an object into JSON
4819	newDataReader returns a new internalDataReader .
4820	Read implements Reader .
4821	ListenAndServeTLS is equivalent to ListenAndServeTLS .
4822	Produce wraps ProducerFunc
4823	PromoteHandlerFunc creates a handler for the specified handler
4824	Serve serves the given listener .
4825	Serve accepts incoming connections on the given listener .
4826	Fail prints an error message and exits .
4827	WriteUsage writes usage information to the writer .
4828	WriteHelp writes help to the given writer .
4829	MustParse parses the given configuration and returns a Parser or an error .
4830	Parse parses the given options and returns an error if any .
4831	walkFields recursively visits all fields of v .
4832	Parse parses the given arguments .
4833	setSlice sets the value to the specified value .
4834	canParse tries to determine if the type can be parseable .
4835	isBoolean returns true if t is a boolean
4836	NewFromMap creates a new tree from a map .
4837	Insert a value into the tree
4838	Delete deletes a value from the tree
4839	DeletePrefix removes a prefix from the tree .
4840	deletePrefix is used to delete a prefix of a node
4841	Get returns the value for the given string
4842	LongestPrefix returns the longest prefix matching the given string .
4843	Minimum returns the minimum element in the tree
4844	WalkPrefix walks the tree rooted at prefix .
4845	recursiveWalk calls fn for each node in n .
4846	ToMap creates a map from a tree .
4847	checkip returns the iptype of the provided IP address .
4848	read uint32
4849	readuint128 reads an unsigned 64 - bit unsigned integer .
4850	load message
4851	Printrecord prints an IP2LocationRecord
4852	Main is the entry point for gopher .
4853	SaveToPdfFile saves a file to a file
4854	CubicCurveTo adds a curve to the path
4855	ArcTo adds an arc to the path .
4856	String returns a string representation of the path
4857	VerticalFlip performs a vertical rotation .
4858	NewGlyphCache creates a new GlyphCacheImp
4859	Fetch fetches the glyphs from the cache and renders it as a glyph cache .
4860	renderGlyph is a wrapper around render . Glyph .
4861	Copy returns a copy of g .
4862	Fill satisfies the Glyph interface .
4863	Main draws the line at the given ext .
4864	Draw draws the specified drawing .
4865	Paint paints a slice of Spans .
4866	SetColor sets the color .
4867	NewPainter returns a new Painter .
4868	GetStringBounds returns the bounds of a string .
4869	recalc recalculates the current screen size .
4870	SetFont sets the current font .
4871	ClearRect clears the specified rectangle .
4872	drawString draws a string .
4873	newGroup creates a new group .
4874	newMask creates a new mask .
4875	embedSvgFont creates a new font with the specified text .
4876	TraceQuad takes a Liner and calculates the curve length using the curve length and flatteningThreshold .
4877	GetFontName returns the font name
4878	NewStackGraphicContext creates a new GraphicContext
4879	NewFolderFontCache creates a new FolderFontCache
4880	NewSyncFolderFontCache creates a new SyncFolderFontCache
4881	Main draws a gopher2 image .
4882	NewPdf creates a new PDF document .
4883	clearRect clears the specified rectangle .
4884	NewGraphicContext creates a GraphicContext
4885	Clear clears the screen
4886	GetStringBounds returns the bounds of the specified string .
4887	CreateStringPath creates a new line at the specified text .
4888	FillStringAt implements the GraphicContext interface .
4889	SetStrokeColor sets the stroke color .
4890	SetFillColor sets the fill color .
4891	SetLineDash sets the line dash .
4892	SetLineWidth sets the line width .
4893	Main is the entry point for world
4894	Draw draws the given text .
4895	SaveToPngFile saves the image to png .
4896	LoadFromPngFile loads a png from a file .
4897	Resource returns the resource for the given folder .
4898	Output returns the output of a file .
4899	Main is the entry point for Tiger .
4900	Draw draws the given image .
4901	Main is the entry point for drawing .
4902	Blob draws the specified screen .
4903	Dash draws the line at the specified height .
4904	CubicCurve draws a horizontal curve at the specified point .
4905	FillStroke fills the stroke with the given coordinates .
4906	Fill style
4907	PathTransform draws the path from the given width and height .
4908	Star draws the star at the given coordinates .
4909	Draw draws the given gc .
4910	ConvertPath converts a path to a pdf . Path .
4911	Main draws a linecap .
4912	Draw draws the specified line and offset .
4913	DrawContour draws a point from the path .
4914	Flatten recursively flattens the given path .
4915	Clear clears the canvas .
4916	ClearRect clears a rectangle
4917	DrawImage draws an image .
4918	Main draws a GUI image .
4919	Draw draws the specified image .
4920	Draw draws the specified image .
4921	ChecksumString32S returns the SHA256 checksum of the string
4922	ChecksumString64S returns the SHA256 checksum of the string
4923	NewS32 returns a new XXHash32 .
4924	NewS64 returns a new XXHash64 .
4925	round64 rounds a 64 - bit value to an uint64 value .
4926	Checksum32S returns the 64 bit hash of the input .
4927	Checksum64S returns the 64 - bit checksum value for the given seed .
4928	getStage returns the stage of the daemon stage .
4929	New returns a new glg instance .
4930	Get initializes glg .
4931	SetMode sets the mode of the logger .
4932	SetPrefix sets the value of the named logger .
4933	GetCurrentMode gets the current mode of the specified level .
4934	InitWriter initializes the logger
4935	SetWriter sets logger writer
4936	SetLevelColor sets the logger level .
4937	SetLevelWriter sets the logger level writer
4938	AddStdLevel adds a log level to the standard logger .
4939	EnableColor enable color
4940	EnableLevelColor enables log level color .
4941	DisableLevelColor disables the log level color .
4942	RawString returns the raw string
4943	TagStringToLevel returns the level for a given tag .
4944	Println is a convenience function for fmt . Println
4945	Fatal logs an error and exits .
4946	Fatalf logs a message and panics on error
4947	isModeEnable returns true if the current mode is enabled
4948	CaptureMetrics wraps http . Handler and captures metrics .
4949	get the value for the key from the entry at pos .
4950	Save writes dataType to out .
4951	SaveToFile saves data to a file
4952	Load decodes dataType from in .
4953	LoadFromFile loads data from a file
4954	Key returns the key for the given id .
4955	Value returns the value of a given id .
4956	Delete a value from the list
4957	Set validates and parses the version string
4958	Compare compares two versions .
4959	Slice returns a slice of the parts of the version .
4960	BumpMajor deletes the major version .
4961	BumpMinor deletes the minor value .
4962	BumpPatch resets the patch to the current version
4963	validateIdentifier returns an error if the id is not a semver identifier .
4964	newStream creates a new Stream .
4965	newSubscriber creates a new subscriber
4966	New creates a new server .
4967	Close stops the server
4968	CreateStream creates a new Stream .
4969	RemoveStream removes a stream .
4970	StreamExists returns true if a stream exists .
4971	Publish sends an event to the server .
4972	NewClient creates a new Client .
4973	Subscribe subscribes to the given stream .
4974	SubscribeChan subscribes to the given stream .
4975	SubscribeRaw adds a callback to the event handler .
4976	Unsubscribe from the given channel .
4977	NewEventStreamReader returns a new EventStreamReader .
4978	ReadEvent returns the next event from the reader
4979	HTTPHandler is an HTTP handler for the event stream
4980	Add adds event to the event log .
4981	Replay replays the event log .
4982	readKey reads a PEM - encoded key from the given path .
4983	writeKey writes the given key .
4984	anyKey returns a crypto . Signer for the given key .
4985	sameDir returns the path to the existing directory
4986	printAccount prints an account
4987	tmpl will print the specified text to the writer .
4988	printUsage prints the usageTemplate to w .
4989	FromRequest extracts the X - Real - Ip header from the request .
4990	Do implements the ClearParams interface .
4991	Do executes the disableParams command .
4992	Do implements the RemoveDOMStorageItem interface for RemoveDOMStorageItemParams .
4993	Do implements the SetDOMStorageItem interface for SetDOMStorageItemParams .
4994	Do executes the request .
4995	Do implements the DispatchSyncEventParams interface for DispatchSyncEventParams .
4996	Do executes the inspectWorker .
4997	Do implements the SetForceUpdateOnPageParams interface .
4998	Do implements the SkipWaitingParams interface .
4999	Do executes the cdp command .
5000	Do executes the stopAllWorkersParams command .
5001	Do implements the StopWorker interface .
5002	Do implements deregister .
5003	Do implements the UpdateRegistrationParams interface .
5004	Do executes the command .
5005	Do executes the specified command .
5006	Error implements the error interface for ExceptionDetails .
5007	Do executes the releaseAnimationsParams command .
5008	Do implements the SeekAnimationsParams interface .
5009	Do executes the cdp command .
5010	Do implements the SetPlaybackRate interface .
5011	Do implements the SetTimingParams interface .
5012	Do implements PrepareForLeakDetectionParams .
5013	DoePurgeJavaScriptMemory implements the DoForciblyPurgeJavaScriptMemory interface .
5014	Do implements SetPressureNotificationsSuppressed .
5015	Do implements simulatePressureNotificationParams .
5016	WithSamplingInterval adds the samplingInterval to the start sampling params
5017	WithSuppressRandomness adds the SuppressRandomness to the start sampling params
5018	Do executes the start sampling params .
5019	Do implements the stop samplingParams interface .
5020	Do implements the ClearDeviceOrientationOverrideParams interface .
5021	Do implements the SetDeviceOrientationOverrideParams interface .
5022	Do executes the start violation report .
5023	Do implements the StopViolationsReport interface for StopViolationsReport .
5024	String returns a human - readable description of the Modifier .
5025	WithNodeID adds the nodeID to the get AialAXTree params
5026	WithBackendNodeID adds the backend nodeID to the get AialAXTree params
5027	WithObjectID adds the objectID to the get AialAXTree params
5028	WithFetchRelatives adds the FetchRelatives to the get partialAXTree params
5029	Do implements the SetTimeDomainParams interface .
5030	WithClipRect adds the clipRect to the profile snapshot params
5031	Do executes the release snapshot parameters .
5032	Do implements the ClearObjectStore interface .
5033	Do executes the deleteDatabaseParams command .
5034	Do implements deleteObjectStoreEntriesParams interface .
5035	WithKeyRange adds the keyRange to the request data params
5036	Do executes the set sampling interval .
5037	Do executes the cdp command .
5038	WithCallCount adds theCallCount to the StartPreciseCoverage params
5039	WithDetailed adds the detailed to the StartPreciseCoverage params
5040	Do implements the DoPreciseCoverage interface .
5041	Do implements the dp . StartTypeProfileParams interface .
5042	Do implements the StopPreciseCoverage interface .
5043	Do implements the StopTypeProfileParams interface for StopTypeProfileParams .
5044	Do implements the SetIgnoreCertificateErrors interface .
5045	Do implements the AddInspectedHeapObjectParams interface .
5046	Do implements CollectGarbageParams .
5047	WithSamplingInterval adds the samplingInterval to the start sampling params
5048	Do implements the Doer interface for StartTrackingHeapObjectsParams .
5049	WithReportProgress adds the reportProgress to the stop tracking heap snapshots params
5050	Do implements the StopTrackingHeapObjects interface for StopTrackingHeapObjectsParams .
5051	WithReportProgress adds the reportProgress to the take heap snapshot params
5052	Do implements the Doer interface for TakeHeapSnapshotParams .
5053	WithBrowserContextID adds the BrowserContextID to the grant permission params
5054	Do executes the cdp command .
5055	WithBrowserContextID adds the BrowserContextID to the reset permission params
5056	Do implements the dp . ResetPermissionParams interface .
5057	Do executes the crashParams command .
5058	Do executes the crashGpuProcessParams command .
5059	WithQuery adds the query to the get histograms params
5060	WithTargetID adds the targetID to the get window ID params
5061	Do implements the SetWindow interface .
5062	WithImage adds the image to the set dock tile params
5063	Do implements the SetDockTile interface for SetDockTileParams .
5064	Do implements the deleteCache interface for DeleteCacheParams .
5065	Do executes the deleteEntryParams command .
5066	WithPathFilter adds the pathFilter to the request entries params
5067	Do implements the DiscardSearchResults interface .
5068	Do executes the focused parameters .
5069	Do implements the MarkUndoableState interface .
5070	WithIncludeUserAgentShadowDOM adds the invite user agent shadowDOM to the request .
5071	Do executes the RedoParams command .
5072	Do implements the removeAttributeParams interface .
5073	Do implements the cdp . RemoveNodeParams interface .
5074	Do implements RequestChildNodesParams .
5075	WithNodeID adds the nodeID to the ResolveNodeParams response
5076	WithBackendNodeID adds the backendNodeID to the ResolveNodeParams response
5077	WithExecutionContextID adds the ExecutionContextID to the ResolveNode params
5078	Do implements the SetAttributeValueParams interface .
5079	WithName adds the name to the set attributesAsText params
5080	Do implements the SetAttributesAsTextParams interface .
5081	Do implements the SetFileInputFilesParams interface .
5082	Do implements the SetInspectedNode interface .
5083	Do implements the SetNodeValueParams interface .
5084	Do implements the SetOuterHTMLParams interface .
5085	Do implements the Dump interface .
5086	Do implements ForcePseudoState .
5087	Do implements the SetEffectivePropertyValueForNodeParams interface .
5088	Do implements StartRuleUsageTrackingParams .
5089	Do executes the close parameters .
5090	Do implements the ClearDataForOrigin interface .
5091	Do implements the TrackCacheStorageForOrigin interface .
5092	Do implements the TrackIndexedDBForOrigin interface .
5093	Do implements the UnrackCacheStorageForOrigin interface for UntrackCacheStorageForOrigin .
5094	Do implements the UnrackIndexedDBForOrigin interface for UntrackIndexedDBForOrigin .
5095	Do implements the HideHighlightParams interface .
5096	Do executes the highlight frame .
5097	WithNodeID adds the nodeID to the HighlightNode params
5098	WithBackendNodeID adds the backendNodeID to the HighlightNodeID params
5099	WithObjectID adds the objectID to the HighlightNode params
5100	WithSelector adds the selector to the HighlightNode params
5101	Do executes the highlight node .
5102	Do executes the highlightQuad command .
5103	Do executes the HighlightRectParams command .
5104	WithHighlightConfig adds the highlightMode to the set inspect mode params
5105	Do executes the set inspect mode .
5106	Do implements the SetShowAdlights interface .
5107	WithMessage adds the message to the SetPausedInDebuggerMessage params
5108	Do implements the SetPausedInDebuggerMessage interface .
5109	Do implements the SetShowDebugBorders interface .
5110	Do implements the SetShowFPSCounter interface .
5111	Do implements the SetShowPaintRects interface .
5112	Do implements the SetShowScrollBottleneckRects interface .
5113	Do implements the SetShowHitTestBorders interface .
5114	Do implements the SetShowViewportSizeOnResize interface .
5115	Do implements the ClearBrowserCache interface .
5116	Do implements the ClearBrowser interface .
5117	WithErrorReason adds the error reason to the request params
5118	WithRawResponse adds the raw response to the request params
5119	WithURL adds the URL to the request params
5120	WithMethod adds the method to the request params
5121	WithPostData adds the postData to the request params
5122	WithHeaders adds the headers to the continue request params
5123	WithAuthChallengeResponse adds the authChallengeResponse to the request params
5124	Do executes the request .
5125	WithURL adds the URL to the delete cookies params
5126	WithDomain adds the domain to the delete cookies params
5127	WithPath adds the path to the delete cookies params
5128	Do executes the deleteCookiesParams command .
5129	WithConnectionType adds the ConnectionType to the emulate network conditions params
5130	Execute network conditions .
5131	Do executes the cdp command .
5132	WithUrls adds the urls to the get cookies params
5133	Do executes the ReplayXHRParams command .
5134	Do implements the Set blockedURLSParams interface .
5135	Do implements the SetBypassServiceWorker interface .
5136	Do implements the SetCache interface for SetCacheDisabledParams .
5137	WithURL adds the URL to the set cookie params
5138	WithDomain adds the domain to the set cookie params
5139	WithPath adds the path to the set cookie params
5140	WithSecure adds the secure to the set params
5141	WithHTTPOnly adds the HTTPOnly to the set cookie params
5142	WithSameSite adds the same site to the cookie params
5143	WithExpires adds the Expires to the set cookie params
5144	Do executes the set cookies command .
5145	Do implements the SetDataSizeLimitsForTestParams interface .
5146	Do implements the SetExtraHTTPHeaders interface for SetExtraHTTPHeadersParams .
5147	Do implements the SetRequestInterception interface .
5148	Do implements ClearDeviceOverrideParams .
5149	Do implements the ClearGeolocationOverrideParams interface .
5150	Do implements ResetPageScaleFactor .
5151	Do implements the SetFocusEmulationEnabledParams interface .
5152	Do implements the SetCPUThrottlingRate interface .
5153	WithColor adds the color to the set default background color override params
5154	Do sets the default background color override parameters .
5155	WithScale adds the scale to the set device metrics override params
5156	WithDontSetVisibleSize adds the setVisibleSize to the set metrics override params
5157	WithScreenOrientation adds the screen metrics override params to the set device metrics override params
5158	Do implements SetDeviceMetricsOverrideParams .
5159	Do implements the SetScrollbarsHiddenParams interface .
5160	Do implements the SetDocumentCookieDisabledParams interface .
5161	Do executes the touch events for the specified mouse .
5162	Do executes the cdp command .
5163	WithLatitude adds the latitude to the set location override params
5164	WithLongitude adds the longitude to the set of geo revocation override params
5165	WithAccuracy adds the Accuracy to the set geolocationOverride params
5166	Do implements SetGeolocationOverrideParams .
5167	Do implements the SetPageScaleFactor interface .
5168	Do implements SetScriptExecutionDisabledParams .
5169	WithMaxTouchPoints adds the maxTouchPoints to the params
5170	Do implements the SetTouchEmulationEnabledParams interface .
5171	WithBudget adds the budget to the set virtual time policy params
5172	WithMaxVirtualTimeTaskStarvationCount adds the max virtualTimeTaskStarvationCount to the set specified params
5173	WithWaitForNavigation adds the waitForNavigation to the set of virtual time policy params
5174	WithAcceptLanguage adds the acceptLanguage to the set user agent override params
5175	WithPlatform adds the platform to the set user agent override params
5176	Do implements the SetUserAgentOverrideParams interface .
5177	Do implements the DispatchKeyEventParams interface .
5178	Do executes the insert text command .
5179	WithButtons adds theButtons to the DispatchMouseEvent params
5180	Do implements the DispatchMouseEventParams interface .
5181	Do implements the DispatchTouchEventParams interface .
5182	Do executes the touch event .
5183	Do implements the SetIgnoreInputEventsParams interface .
5184	Do executes the Synthesize pinch gesture .
5185	WithXOverscroll adds the xOverscroll to the SynthesizeScrollure params
5186	WithYOverscroll adds the YOverscroll to the SynthesizeScrollure params
5187	Do executes the SynthesizeScrollGestureParams command .
5188	Do executes the SynthesizeTapGestureParams command .
5189	Domain returns domain of method type .
5190	WithDepth adds the depth to the get event listeners params
5191	Do executes the removeDOMBreakpointParams command .
5192	WithTargetName adds the targetName to the remove event listener breakpoint params
5193	Do implements the RemoveEventListener interface for RemoveEventListenerBreakpointParams .
5194	Do executes the remove instrumentation breakpoint .
5195	Do implements the removeXHRBreakpoint interface for RemoveXHRBreakpointParams .
5196	Do executes the setDOM breakpoint .
5197	Do executes the set event listener .
5198	Do implements the SetInstrumentationBreakpoint interface .
5199	Do implements the SetXHRSetBreakpoint interface .
5200	WithExecutor returns a context with an executor set
5201	Execute is a wrapper for easyjson . Execute
5202	AttributeValue returns the value of the named attribute .
5203	xpath returns the xpath for the node
5204	String returns a human - readable representation of a NodeType .
5205	Do implements the SetSinkToUseParams interface .
5206	Do executes the StartTabMirroringParams command .
5207	Do executes the StopCastingParams command .
5208	Do implements the DoObservingParams interface .
5209	Do implements the StopObservingParams interface .
5210	Do executes the cdp command .
5211	Do implements the ClearEventsParams interface .
5212	WithObjectID adds the objectID to the call function on params
5213	WithArguments adds the arguments to the CallFunctionOn params
5214	WithExecutionContextID adds the execution context to the call function on params
5215	WithObjectGroup adds the objectGroup to the call function group params
5216	Do implements DiscardConsoleEntriesParams interface .
5217	WithContextID adds the context to the evaluation params
5218	WithOwnProperties adds theOwnProperties to the get properties params
5219	WithGeneratePreview adds the generatePreview to the get properties params
5220	WithExecutionContextID adds the ExecutionContextID to the GlobalLexicalScopeNames params
5221	WithObjectGroup adds the objectGroup to the params
5222	Do executes the release object .
5223	Do executes the release object group .
5224	Do implements RunIfWaitingForDebuggerParams .
5225	Do implements the SetCustomObjectFormatterEnabled interface for SetCustomObjectFormatterEnabledParams .
5226	Do implements the SetMaxCallStackSizeToCaptureParams interface .
5227	Do implements the TerminateExecutionParams interface .
5228	Do executes the add binding function .
5229	Do executes the remove binding function .
5230	Do executes the specified endpoint .
5231	Do implements RecordClockSyncMarker interface .
5232	WithBufferUsageReportingInterval adds the bufferUsageInterval to the start params
5233	WithNoDisplayUpdates adds the NoDisplayUpdates to the BeginFrame params
5234	WithScreenshot adds the screenshot to the begin frame params
5235	Do implements the DoToFront interface .
5236	WithClip adds the clip to the capture snapshot params
5237	WithFromSurface adds the fromSurface to the capture screenshot params
5238	WithWorldName adds the world to the create isolation world params
5239	WithGrantUniveralAccess adds the grantUniveralAccess to the create isolation world params
5240	Do implements the reset navigationHistoryParams interface .
5241	WithPromptText adds the prompt text to the handle JavaScript params
5242	Do implements the HandleJavaScriptDialog interface for HandleJavaScriptDialog .
5243	WithReferrer adds the Referrer to the Navigate params
5244	WithTransitionType adds the transitionType to the Navigate params
5245	WithFrameID adds the frameID to the navigator params
5246	Do implements NavigateToHistoryEntryParams .
5247	WithLandscape adds the terrain to the printToPDFPar params
5248	WithDisplayHeaderFooter adds the display header footer to the printToPDFPar params
5249	WithPrintBackground adds the print background to the print to the params
5250	WithScale adds the scale to the printToPDFPar params
5251	WithPaperWidth adds the paper width to the printToPDFPar params
5252	WithPaperHeight adds the paper height to the printToPDFPar params
5253	WithIgnoreInvalidPageRanges adds the ignore invalid page ranges to the printToPDFPar params
5254	WithFooterTemplate adds the footerTemplate to the printToPDFPar params
5255	WithPreferCSSPageSize adds the prefixed size to the PrintToPDFPar params
5256	WithScriptToEvaluateOnLoad adds the scriptToEvaluateOnLoad to the reload params
5257	Do executes the command .
5258	DoScript implements the removeScriptToEvaluateOnNewDocument interface .
5259	Do implements ScreencastFrameAck .
5260	Do implements the SetAdBlockingEnabledParams interface .
5261	Do implements the SetBypassCSP interface .
5262	Do implements the SetFontFamiliesParams interface .
5263	Do implements the SetFontSizesParams interface .
5264	Do executes the setDocumentContentParams command .
5265	WithDownloadPath adds the downloadPath to the set download path params
5266	Do executes the set download behavior .
5267	Do implements the SetLifecycleEventsEnabledParams interface for SetLifecycleEventsEnabledParams .
5268	WithFormat adds the format to the start screencast params
5269	WithMaxWidth adds the max width to the start screencast params
5270	WithMaxHeight adds the maxHeight to the start screencast params
5271	WithEveryNthFrame adds the every nth frame to the start screencast params
5272	Do executes the startScreencastParams command .
5273	Do executes the stopLoadingParams command .
5274	Do implements the SetWebLifecycleState interface .
5275	Do executes the stopScreencastParams command .
5276	Do implements the SetProduceCompilationCache interface .
5277	Do implements the AddCompilationCache interface for AddCompilationCacheParams .
5278	Do implements the ClearCompilationCache interface for ClearCompilationCacheParams .
5279	WithGroup adds the group to the generate test report params
5280	Do implements the WaitForDebugger interface .
5281	Do executes the cdp command .
5282	WithBindingName adds the bindingName to the ExposeDevToolsProtocol params
5283	Do implements ExposeDevToolsProtocol .
5284	WithBrowserContextID adds the BrowserContextID to the create target params
5285	WithSessionID adds the sessionID to the DetachFromTarget params
5286	Do implements DetachFromTargetParams .
5287	Do implements DisposeBrowserContextParams interface .
5288	WithSessionID adds the sessionID to the send message to target params
5289	Do executes the send message to target params
5290	Do executes the set auto attach parameters .
5291	Do implements the SetDiscoverTargets interface .
5292	Do implements the SetRemoteLocationsParams interface for SetRemoteLocationsParams .
5293	WithPatterns adds the patterns to the enable params
5294	WithHandleAuthRequests adds the handleAuthRequests to the enable params
5295	Do executes the fail request .
5296	WithBody adds the body to the FulfillRequest params
5297	WithResponsePhrase adds the responsePhrase to the FulfillRequest params
5298	Do executes the request .
5299	WithURL adds the URL to the continue request params
5300	WithMethod adds the method to the continue request params
5301	WithPostData adds the postData to the continue request params
5302	WithHeaders adds the headers to the continue request params
5303	Do executes the request .
5304	Do is part of the ContinueWithAuthParams interface .
5305	Do executes the ContinueToLocationParams command .
5306	WithIncludeCommandLineAPI adds the includeCommandLineAPI to the EvaluateOnCallFrame params
5307	Do executes the pause parameters .
5308	Do executes the pause on asynchronous call .
5309	Do executes the remove breakpointParams command .
5310	Do implements the dp . Resume interface .
5311	Do implements the SetAsyncCallStackDepthParams interface .
5312	Do implements the SetBlackboxPatterns interface for SetBlackboxPatternsParams .
5313	Do implements the SetBlackboxedRanges interface .
5314	WithURL adds the URL to the set breakpoint byURL params
5315	WithURLRegex adds the urlRegex to the set breakpointByURL params
5316	WithScriptHash adds the scriptHash to the set breakpoint byURL params
5317	WithColumnNumber adds the breakpointNumber to the set breakpoint byURL params
5318	WithCondition adds the condition to the set breakpointOnFunctionCall params
5319	Do implements the SetBreakpointsActive interface .
5320	Do implements the pauseOnExceptions interface .
5321	Do implements the SetReturnValueParams interface for SetReturnValueParams .
5322	WithDryRun adds the dry run to the set script source params
5323	Do implements the SetSkipAllPauses interface .
5324	Do implements the SetVariableValueParams interface .
5325	WithBreakOnAsyncCall adds the breakOnAsyncCall to the StepIntoParams
5326	Do implements the StepInto interface for StepIntoParams .
5327	Do executes the stepout command .
5328	Do executes the step over the specified context .
5329	Listen implements the notify . ListenFundle interface .
5330	ListenClose calls ListenCloseF for the given multiaddr .
5331	Connected is part of the NotifyBundle interface .
5332	Disconnected implements the NotifyBundle interface .
5333	OpenedStream is part of the Bundler interface .
5334	ClosedStream is part of the Bundle interface .
5335	WithNoDial returns a context with noDial set .
5336	GetNoDial returns the value of a noDial
5337	WithDialPeerTimeout returns a context with the dial peer timeout set
5338	Open opens a connection to the driver .
5339	Prevpos is like Prevpos but returns the position of the next index .
5340	Last returns the last read item in the buffer .
5341	DeleteMostRecentBytes deletes the most recent bytes of the buffer .
5342	NewFloat64RingBuf creates a new Float64RingBuf
5343	TwoContig returns two float64 values .
5344	Earliest returns the value of the next element in the queue .
5345	Values returns a slice of float64 values .
5346	NewAtomicFixedSizeRingBuf creates a new AtomicFixedSizeRingBuf instance
5347	Reset resets the ring buffer .
5348	NewPointerRingBuf creates a new pointer ring buffer
5349	TwoContig implements the PointerRingBuf interface .
5350	NumPage returns the number of pages .
5351	Font returns the font with the given name .
5352	Width returns the width of the font
5353	Encoder returns TextEncoding for Font .
5354	Interpret takes a variadic value and puts it into the stack .
5355	Open opens a file .
5356	NewReader creates a new Reader .
5357	NewReaderEncrypted returns a Reader that reads from the given ReaderAt function .
5358	Trailer returns the current trailer value .
5359	Kind returns the Kind of this Value .
5360	newBuffer returns a new buffer
5361	Paginate returns pagination info for the specified page .
5362	CascadeDelete removes a Cascade from collection
5363	cascadeDeleteWithConfig is a helper function used to cascade a mutation of a given CascadeConfig
5364	cascadeSaveWithConfig save a document to a given document
5365	MapFromCascadeProperties creates a map from a list of properties
5366	Connect connects to the server .
5367	convert a string to lower case
5368	Find returns the collection with the given query .
5369	RawInformationQuery renders a raw information query .
5370	NewClient returns a new Client .
5371	Close closes the client .
5372	startTLSIfRequired is used to start tls if required
5373	startStream starts a new stream .
5374	IsEncrypted returns true if the client is encrypted
5375	Recv receives a stanza from the server .
5376	Send sends message to chat .
5377	SendOrg sends org message to server
5378	SendKeepAlive sends the keep - alive message
5379	SendHtml sends an XML message .
5380	nextStart returns the next xml . StartElement or an error .
5381	JoinProtectedMUC returns the number of protected mUCs
5382	LeaveMUC leave a MUC
5383	AttachBuffer attaches a file to the message .
5384	Attach attaches a file to the message .
5385	Inline attaches a file to the message .
5386	AddHeader adds a new header to the message .
5387	tolist returns the list of cc in the message .
5388	Bytes returns a string representation of the message .
5389	Send mail message
5390	GetHeader retrieves an envelope header from the envelope .
5391	GetHeaderValues returns the values of the header with the given name .
5392	SetHeader sets the header with the given name and value .
5393	AddHeader adds a header value to an envelope
5394	DeleteHeader deletes a header
5395	AddressList parses a comma - separated list of addresses .
5396	Clone returns a copy of the envelope
5397	ReadEnvelope reads an envelope from the given io . Reader .
5398	EnvelopeFromPart parses an envelope from a root part .
5399	parseTextOnlyBody is an internal function to parse a text only body of an envelope
5400	parseMultiPartBody parses the Content - Type header fields from a Content - Type header .
5401	matchHTMLBodyPart returns true if this part matches the body content type .
5402	ensureCommaDelimitedAddresses ensures a comma - delimited string is valid .
5403	Date sets the email date .
5404	From sets name and address
5405	Subject sets the subject clause for the email address .
5406	To adds a new mail address to the mail builder .
5407	ToAddrs sets a new mail address .
5408	CC adds a cc
5409	CCAddrs sets the cc addresses .
5410	ReplyTo sets the ReplyTo address .
5411	Header adds a new mail header .
5412	AddAttachment adds an attachment to a file
5413	AddFileAttachment adds a file attachment to the mail .
5414	AddInline adds a new part to the mail .
5415	Equals returns true if m equals to o .
5416	Encode encodes a Part .
5417	encodeHeader encodes b into b .
5418	encodeContent encodes the part into b .
5419	selectTransferEncoding returns the transfer encoding from the given content .
5420	setParamValue sets a param key and value .
5421	NewBase64Cleaner returns a new Base64Cleaner
5422	Decode to UTF - 8 string
5423	Parse media type .
5424	fixMangledMediaType checks if mtype and sep is a placeholder with a placeholder
5425	detectMultipartMessage returns true if content type is a multipart message .
5426	detectBinaryBody reports whether the part is a binary body .
5427	BreadthMatchFirst removes the first part of a matcher and returns a new Part .
5428	BreadthMatchAll returns a list of elements that match a matcher
5429	DepthMatchFirst performs a depth first search of the part and returns the first part that is the first child of p .
5430	DepthMatchAll returns all the parts that match a matcher
5431	ToASCII takes a string and converts it to an ASCII string .
5432	NewPart creates a new Part .
5433	AddChild adds a child to this Part
5434	TextContent returns true if the part represents a text part .
5435	setupHeaders reads parts from r and adds them to r .
5436	setupContentHeaders parses the Content - Type header fields of a part .
5437	convertFromDetectedCharset takes an io . Reader and converts it to an io . Reader .
5438	Clone returns a deep copy of parent .
5439	ReadParts reads part from r .
5440	parseParts parses the parts from parent .
5441	UUID generates a random uuid
5442	NewQPCleaner returns a new QPCleaner
5443	Error implements the error interface for Error .
5444	addError adds a new error .
5445	addWarning adds a warning message .
5446	Wrap takes a max number of strings and returns a byte slice
5447	ConvertToUTF8String from UTF - 8 to UTF - 8
5448	JoinAddress joins an address to a single address .
5449	Printf is a convenience wrapper for markdown .
5450	EnvelopeToMarkdown writes an envelope to w .
5451	FormatPart writes a part to w .
5452	newBoundaryReader creates a new boundaryReader for the given boundary .
5453	Read implements the io . Reader interface .
5454	Next reads the next boundary .
5455	Parse parses a string into a pointer
5456	Assign assigns a value to a symbol .
5457	NewRClient returns a new RClient using the specified host and port .
5458	NewRClientWithAuth creates a new rClient using the provided host and port .
5459	Register a custom generator
5460	Fuzz fuzzes struct fields
5461	findFakeFunctionFor returns a function that can be used to find a function for a given string .
5462	Apply applies the given options to the given options .
5463	ToOption converts options to options .
5464	waitThenClose waits until the channel is closed .
5465	send sends the event to the channel .
5466	NewMovingAverage creates a new moving average
5467	Set sets the value of the variable
5468	calcKeys50 computes the HMAC key and salt
5469	getKeys retrieves all keys from b .
5470	checkPassword checks if the password matches the given keys .
5471	parseFileEncryptionRecord parses the encrypted encryption record .
5472	parseEncryptionBlock fetches the encryption block from the archive .
5473	newArchive50 returns a new fileBlockReader with the given password .
5474	Read implements the io . Reader interface for cipherBlockReader .
5475	ReadByte reads a single byte .
5476	newCipherBlockReader returns a new cipherBlockReader .
5477	newAesDecryptReader returns a new cipherBlockReader reading from r .
5478	limitByteReader returns a limited byteReader .
5479	Mode returns the file mode bits .
5480	nextBlockInFile reads the next block in the file .
5481	next returns the next block from the reader .
5482	Read implements the io . Reader interface .
5483	Read reads bytes into p .
5484	Next returns the next file .
5485	NewReader returns a new Reader reading from r .
5486	OpenReader opens a new volume .
5487	getV3Filter creates a v3 filter from code .
5488	init initializes the decoder .
5489	readBlockHeader reads the block header .
5490	readCodeLengthTable reads code length table .
5491	expressStates returns a slice of states with the given size .
5492	expandStates returns a slice of the states in the context .
5493	pushByte inserts a byte into the buffer .
5494	succecByte returns the byte at the specified index .
5495	succscContext returns the context for the allocator .
5496	calcAes30Params calculates the SHA1 hash of a given password and salt .
5497	parseDosTime parses the dos time of t .
5498	decodeName decodes BSON name .
5499	readExtTimes reads extTimes from b .
5500	readBlockHeader reads the block header for the archive .
5501	newArchive15 creates a new fileBlockReader with the given password .
5502	readFilter5Data reads the filter 5 data
5503	writeByte writes a byte c to the window .
5504	copyBytes copies bytes from the window .
5505	read reads from the window .
5506	queueFilter adds a new filter to the buffer .
5507	processFilters is used to process filters
5508	fill the decoder .
5509	Read implements the io . Reader interface .
5510	readFull reads full bytes from r .
5511	findSig attempts to read a signature file from r . It returns the number of bytes read .
5512	execute executes the given command .
5513	newVM returns a new VM instance .
5514	limitBitReader returns a bitReader for the specified bitReader .
5515	readUint32 reads a uint32
5516	step3 step 3 .
5517	Stem creates a stem word from a word .
5518	step6 step 6 .
5519	step5 step 5 .
5520	step2a checks if the word is equal to the given word .
5521	step4 step 4 .
5522	Stem converts a word to a stem stop words .
5523	step1c returns true if the snowball word is less than 1 .
5524	step3 steps one word 3 .
5525	isStopWord returns true if the word is a stop word .
5526	capitalizeYUI moves the word to the beginning of the word .
5527	step2 steps 2 .
5528	step3 steps one word 3 .
5529	step0 steps 1 .
5530	VnvSuffix returns the suffix of the word .
5531	step1 returns true if the BlowballWord is equal to the given word .
5532	step2a checks if the word is equal to the given word .
5533	removePerfectiveGerundEnding returns true if the word ends with a superset .
5534	removeAdjectivalEnding returns true if the word has been eliminated .
5535	step2b is similar to step2b .
5536	step4 step 4 .
5537	step5 returns true if the word is less than m .
5538	Stem takes a word and returns the stem stopw words
5539	Stem is similar to Stem but with stemStopwWords .
5540	isStopWord returns true if word is stop word
5541	isStopWord returns true if the word is a stop word
5542	New returns a new SnowballWord .
5543	RemoveLastNRunes removes lastNRunes from the word .
5544	resetR1R2 resets r1 r2 to r2
5545	slice returns a slice of runes between start and stop .
5546	FitsInR1 reports whether the word fits in R1 start .
5547	FitsInR2 returns true if the word fits in R2 start
5548	FitsInRV returns true if r is in r .
5549	FirstPrefix finds the first prefix matching the given prefixes .
5550	HasSuffixRunes checks if a word has suffix runes .
5551	FirstSuffixIfIn is similar to FirstSuffix except that it returns the first suffix and the endPos .
5552	RemoveFirstSuffixIfIn removes the first rune at startPos .
5553	RemoveFirstSuffix removes the first suffix of the word .
5554	FirstSuffix is like FirstSuffix but returns the first rune .
5555	preprocess preprocesses words .
5556	step0 returns true if the word is equal to the given word .
5557	step1b steps 1b word .
5558	step2b is the step2b word .
5559	capitalizeYs calculates the number of capitalizations for a snowball word .
5560	capitalizeYs is used to make sure the word has already beat .
5561	stemredSpecialWord is used to convert a word to a special word
5562	isShortWord returns true if the word is short .
5563	step1a steps 1 .
5564	Set sets the value for the given key .
5565	Get returns the value associated with the given key .
5566	Cleanup removes the goroutine .
5567	getValues returns all registered values
5568	linkGRs links into parentData
5569	unlinkGRs removes all goroutines .
5570	AppUri creates an app uri
5571	CurlAppWithTimeout is like CurlWithTimeout but accepts a timeout
5572	CURLApp concatenates an app .
5573	CurlAppRoot returns the root of the app
5574	GetTags parses a string and returns a slice of tags .
5575	GetTagsAsUniqueStrings is similar to GetTagsAsUniqueStrings but returns a slice of strings .
5576	isTerminator returns true if the given rune is a terminal .
5577	uniquify removes duplicates from in .
5578	New creates a gin middleware .
5579	Get gets the url from the request context .
5580	GenerateRSAKeyPair generates an RSA key pair using the provided bits .
5581	Verify implements rsa . PublicKey interface .
5582	Encrypt encrypts b using RSA public key .
5583	Sign signs a message with RSA private key
5584	GetPublic gets the public key
5585	Decrypt decrypts data using RSA private key .
5586	UnmarshalRsaPrivateKey unmarshals a RSA private key
5587	GenerateKeyPair generates a new private key pair .
5588	GenerateKeyPairWithReader generates a private key pair for the given reader .
5589	GenerateEKeyPair generates a shared key pair
5590	UnmarshalPublicKey unmarshals a public key from data .
5591	MarshalPublicKey encodes a public key .
5592	UnmarshalPrivateKey unmarshals a private key from data .
5593	MarshalPrivateKey marshals a private key .
5594	KeyEqual compares two keys .
5595	GenerateECDSAKeyPair generates an ECDSA key pair using ECDSA encryption .
5596	GenerateECDSAKeyPairWithCurve generates an ECDSA private key using the provided curve .
5597	ECDSAKeyPairFromKey creates an ECDSA private key from the given private key .
5598	UnmarshalECDSAPrivateKey decodes a private key from a ECDS API key
5599	UnmarshalECDSAPublicKey decodes a public key from an ECDSA public key
5600	Equals returns true if both keys are equal
5601	Sign signs data using ECDSA private key
5602	Equals checks if two ECDSAPublicKey objects are equal
5603	Verify verifies the data against the ECDS API key bytes .
5604	GenerateSecp256k1Key generates a secp256k1 private key
5605	UnmarshalSecp256k1PrivateKey unmarshals a secp256k1 private key from the given data .
5606	UnmarshalSecp256k1PublicKey parses a secp256k1 public key from the given data .
5607	Equals returns true if two Secp256k1PrivateKey objects are equal
5608	Sign returns the signature of the given data .
5609	Equals returns true if two Secp256k1PublicKey objects are equal
5610	Verify verifies the data against the passed public key .
5611	Raw returns the raw form of ed25519PrivateKey .
5612	Sign produces an ed25519 signature .
5613	Equals returns true if two Ed25519PublicKey objects are equal ; otherwise false is returned .
5614	Verify satisfies the Ed25519PublicKey interface .
5615	UnmarshalEd25519PublicKey unmarshals an Ed25519 public key from a byte array .
5616	UnmarshalEd25519PrivateKey unmarshals an ed25519 private key
5617	EditScriptForStrings is a convenience function for EditScriptForStrings .
5618	EditScriptForMatrix is a convenience function for EditScriptForMatrix .
5619	WriteMatrix write matrix to writer
5620	New creates a new Lockfile .
5621	GetOwner returns the owner of the file
5622	TryLock tries to acquire a lock file .
5623	Unlock releases the lockfile
5624	NewBase creates a new Base .
5625	SetFallbackLogger sets the logger used by the logger
5626	AddLogger adds a logger to the list
5627	LogWithTime emits a message at the given time at the given time .
5628	Log records a log entry .
5629	Warnm records a warning message .
5630	NewTemplateWithFuncMap creates a new Template with the given funcMap .
5631	Execute implements the Template interface .
5632	NewTemplateMsg returns a new TemplateMsg
5633	NewLogAdapterFor returns a new LogAdapter for the given base .
5634	SetAttr sets an attribute for the given key .
5635	LogWithTime delegates to the log . LogWithTime interface .
5636	Log logs a message at the specified level .
5637	Debugm logs a message at level Debugm .
5638	NewAttrsFromMap creates an Attrs from a map of attributes .
5639	NewAttrsFromAttrs creates a new Attrs from the given Attributes .
5640	MergeAttrs merges two attributes .
5641	SetAttr sets attribute value for a given key .
5642	GetAttr returns the value associated with the given key .
5643	RemoveAttr removes an attribute from the set .
5644	Attrs returns a copy of the attributes map .
5645	Debugm calls Debugm with the default attributes .
5646	Infom adds a message to the default list of attributes .
5647	Warningm writes a warning message .
5648	Errm creates an Errorm message .
5649	Errorm is a convenience wrapper for Errorm
5650	Fatalm is a convenience wrapper for Fatalm
5651	Dief is like Dief but with an exit code .
5652	Diem as a diem message
5653	ToLogLevel converts a string to a LogLevel .
5654	CallErr invokes the given function on the returned error channel .
5655	New returns a new hook hook .
5656	Fire sends a logrus entry to the hook
5657	Levels sets the stack driver s levels .
5658	ProjectID is an Option to set the project ID .
5659	EntriesService sets the log entries service .
5660	LoggingService sets the logging service .
5661	ErrorService is an Option to set the error service .
5662	HTTPClient sets a custom http client for logging .
5663	MonitoredResource is a functional option for NewMonitoredResource .
5664	ErrorReportingLogName sets the logging name for the logger .
5665	Labels is an Option to set the labels on the stack
5666	PartialSuccess is a functional option for testing .
5667	GoogleComputeCredentials is a functional option for Google ComputeCredentials .
5668	NewEncoder returns a new Encoder .
5669	NewDecoder returns a new Decoder .
5670	NewStreamEncoder returns a new StreamEncoder .
5671	NewStreamDecoder returns a new StreamDecoder .
5672	Register registers a custom codec .
5673	Unregister removes a codec from the registry .
5674	Lookup looks up a codec by name .
5675	Codecs returns a map of registered codecs .
5676	Type returns the error s type .
5677	Install registers an adapter .
5678	AdapterOf returns an adapter of the given type .
5679	AppendDuration appends a duration to b .
5680	fmtInt is equivalent to fmt . Int .
5681	NewDecoder returns a new objconv . Decoder .
5682	NewStreamDecoder returns a new objconv . StreamDecoder
5683	Unmarshal parses the byte slice and stores the result in the value pointed to by v .
5684	String returns a string representation of the Type .
5685	zeroValueOf returns the zero value of t .
5686	NewValueParser returns a ValueParser
5687	ParseTag parses a tag .
5688	NewEncoder returns a new objconv . Encoder .
5689	NewStreamEncoder returns a new objconv . StreamEncoder .
5690	NewPrettyEncoder returns a new objconv . Encoder .
5691	NewPrettyStreamEncoder returns a new StreamEncoder .
5692	Marshal marshals v into a byte slice .
5693	NewEncoder returns a new Encoder .
5694	EncodeArray encodes an array value .
5695	EncodeMap is an EncodeMap implementation of Encoder . EncodeMap
5696	NewStreamEncoder returns a new StreamEncoder .
5697	Open implements Encoder .
5698	Close closes the Encoder .
5699	Encode encodes v to the stream .
5700	newStructType creates a new structType from c .
5701	lookup returns the structType for t .
5702	clear removes all registered types from cache .
5703	CheckUint64Bounds checks v to see if v overflows uint64 .
5704	CheckInt64Bounds returns an error if the int64 value is overflowed .
5705	NewDecoder returns a new Decoder
5706	Decode decodes the given value into v .
5707	DecodeArray decodes an array value .
5708	DecodeMap decodes a map .
5709	NewStreamDecoder returns a new StreamDecoder
5710	Len returns the length of the decoder .
5711	Err returns the error if any .
5712	Decode reads the next value from the stream .
5713	Encoder creates a new StreamEncoder from an Emitter .
5714	init initializes the environment variable
5715	LevelFromString returns the level from a string .
5716	NewBackend returns a new Backend .
5717	callerite returns the file name and line number and line number of the call stack trace .
5718	print is a convenience function to print a line to stdout .
5719	Logger creates a new Logger
5720	Trace log .
5721	Tracef logs a trace message .
5722	Debug log message
5723	Debugf records a debug log entry .
5724	Info log .
5725	Infof log .
5726	Warn log message
5727	Warnf logs a warning message .
5728	Error log message
5729	Errorf logs an error message .
5730	Critical prints a critical message .
5731	Criticalf records a critical log entry .
5732	Level returns the level of the slog .
5733	SetLevel sets the slog s level .
5734	Concat concatenates a Permission into a new permission .
5735	HasPermission returns true if the permission has a permission .
5736	ConcatPermissioner concatenates multiple Permissioners .
5737	HasPermission returns true if any of the permissioners has a permissioners
5738	Register a checker
5739	NewPermission creates a new permission
5740	Get returns a Checker for a given role name .
5741	isPtrFromHeap returns true if the provided address is a ptr .
5742	IsPtr returns true if the given address is a pointer .
5743	FindObject returns the object at the given address .
5744	ForEachObject iterates over all pages .
5745	ForEachRoot calls fn for each root
5746	Addr returns the address of x .
5747	Size returns the size of x .
5748	Type returns the type of the given object .
5749	ForEachRootPtr calls fn for each Root in the root .
5750	edge1 returns true if the two edges of the given type intersect .
5751	setHeapPtr allocates a heap address .
5752	findHeapInfo returns the heap info for the given address .
5753	allocHeapInfo allocates a heap info for the given address .
5754	runtimeName returns the runtime name for the given type .
5755	Read runtime constants
5756	add registers a funcTab .
5757	sort sorts a funcTab .
5758	find returns the function for the given address .
5759	read reads a pc tab from core .
5760	readVarint reads a varint
5761	useLine returns a string for use .
5762	commandPath returns the path to the given command .
5763	readCore reads the core from the cache .
5764	typeName returns the type name for x .
5765	fieldName returns the field name for x .
5766	typeFieldName returns the name of the field for the given type .
5767	FindFunc returns a function that locates the specified address .
5768	Core initializes a new process .
5769	Address returns the core . Address of this region .
5770	Int returns the int value of the region .
5771	Uintptr returns the uintptr of the region .
5772	Cast a region to the given type .
5773	Deref returns the current region .
5774	Uint64 returns the region s uint64 .
5775	Uint32 returns the region s uint32 value as a uint32 .
5776	Int32 returns the region s int32 value as an int32 .
5777	Uint16 returns the region s uint16 .
5778	Uint8 returns the region s uint8 as a uint8 .
5779	String returns the string representation of the region .
5780	SlicePtr returns a pointer to the region .
5781	SliceLen returns the length of the region .
5782	Field returns the region for the given name .
5783	ReadUint8 reads a uint8 from the core file .
5784	ReadUint16 reads a uint16 from the core file .
5785	ReadUint32 reads a uint32 from the core file .
5786	ReadUint64 reads a uint64 from the core file .
5787	ReadInt8 reads an int8 from the processor .
5788	ReadInt16 reads an int16 from the process .
5789	ReadInt32 reads an int32 from the process .
5790	ReadInt64 reads an int64 from the process .
5791	ReadUintptr read uint64
5792	ReadPtr reads an address .
5793	ReadCString reads a string from the given address .
5794	Source returns the name of the mapping .
5795	findMapping finds the mapping for a given address .
5796	Max returns the maximum of two addresses .
5797	Min returns the minimum of two addresses .
5798	Align returns a new Address representing x .
5799	initialize initializes the ltDom .
5800	calculate iterates over all the vertices in the tree .
5801	eval evaluates a vName .
5802	compress compresses v with its descendants .
5803	link binds a vName to w .
5804	reverse reverses the order of the dom .
5805	calcSize calculates the size of a process .
5806	objField returns the field name of x .
5807	Readable returns true if address is readable
5808	ReadableN checks if an address is readable .
5809	splitMappingsAt will split the mappings at a given address .
5810	DynamicType returns the type of the given type .
5811	Create creates a new Btrfs files .
5812	Resolve resolves u as a net . IPAddr
5813	Equal checks if two tokens are equal
5814	newDefaultClassifier creates a new tokenClassifier .
5815	Next returns the next token .
5816	NewTokenizer returns a new Tokenizer .
5817	Split splits a string into multiple words .
5818	Between concatenates two strings .
5819	BetweenF constructs a function that accepts two strings .
5820	Camelize camelize string
5821	Capitalize capitalizes the given string .
5822	CharAt returns the char at index
5823	CharAtF creates a wrapper around char at index
5824	ChompLeft returns a copy of s with the given prefix removed .
5825	ChompLeftF is a convenience wrapper for ChompLeft .
5826	ChompRight removes the right of the given string .
5827	ChompRightF is a wrapper for ChompRight .
5828	ClassifyF is like Classify but takes a string .
5829	Clean cleans spaces .
5830	Datherize returns a sanitized string
5831	EscapeHTML escape HTML
5832	DecodeHTMLEntities decodes the given string as HTML .
5833	EnsurePrefixF returns a function that sets the prefix of the string
5834	EnsureSuffixF returns a function that adds a suffix to a string .
5835	Humanize returns a human readable representation of the string .
5836	Iif returns true if the condition is true and false otherwise .
5837	IndexOf returns the index of the string in the string or - 1 if not found .
5838	IsLower returns true if the string is lowercase .
5839	IsUpper returns true if the string is uppercase .
5840	Left is the inverse of Right
5841	LeftF is a functional option for Left .
5842	Letters returns all letters in s .
5843	Lines creates a new line from a string .
5844	Map applies a function to a slice of strings .
5845	Match returns true if the string matches the pattern .
5846	task tasks the project .
5847	Pad adds n to c .
5848	PadF pads the string at the end of the string
5849	PadLeft pad the left of string
5850	PadLeftF - PadLeft function
5851	PadRightF - PadRight function
5852	Pipe takes a string and returns a comma - separated string .
5853	QuoteItems quotes a slice of strings .
5854	ReplaceF returns a function that replaces the old string with n .
5855	ReplacePatternF takes a pattern and replaces it with repl .
5856	Reverse a string
5857	RightF is a functional option for Right .
5858	Slice slice of string
5859	SliceF constructs a SliceF .
5860	SliceContains returns true if the given string is in the slice .
5861	SliceIndexOf returns the index of a slice or - 1 if not found
5862	Slugify replaces all occurrences of the slug .
5863	StripPunctuation removes any punctuation .
5864	StripTags removes tags from a string
5865	Substr returns the string at index n .
5866	SubstrF creates a substring at the specified index .
5867	TemplateWithDelimiters replace delimiters with delimiter
5868	ToArgv converts a string to an argument list .
5869	ToBool converts a string to a boolean value .
5870	ToBoolOr converts a string to a boolean value .
5871	ToIntOr converts a string to an int value .
5872	ToFloat32Or converts a string to a float32 value .
5873	ToFloat64Or converts a string to a float64 value .
5874	UnescapeHTML unescapes a string
5875	WrapHTML wrap an HTML string with tag and tag
5876	WrapHTMLF returns a function that calls WrapHTMLF with specified attributes .
5877	ReapChildren reaps children of pids .
5878	SdNotify sends a notification to the environment .
5879	NewAuthenticator returns a new Authenticator
5880	Endpoint returns an http . Handler that authenticate with the given prefix .
5881	Unique returns a slice of ObjectIds from a bson . ObjectId .
5882	Contains returns true if the list contains the given object id .
5883	Includes returns true if all items contain the given subset .
5884	Require is part of the Model interface .
5885	Enqueue queues a job with the given delay .
5886	A creates an authorizer for a given matcher .
5887	Run returns an Authorizer that runs the provided enforcers .
5888	And adds a new enforcer to the list of enchers
5889	Or returns a list of enforcers that match the provided criteria .
5890	Enqueue adds a new job to the queue .
5891	Callback adds a callback to the queue
5892	NewWatcher creates a new Watcher
5893	Add adds a stream to the Watcher .
5894	Action is part of the Firecher interface .
5895	Write returns true if the operation is write
5896	String returns a human - readable string describing the operation .
5897	Query adds a query to the context .
5898	Respond sends the response to the client .
5899	EnsureApplication ensures that the application exists and if it does not exist .
5900	EnsureFirstUser adds the first user to the store
5901	Callback returns a callback for this strategy .
5902	OpenStream opens a stream .
5903	Close closes the stream .
5904	AddTokenIndexes is used to add token indexes
5905	GetTokenData returns the data for a token
5906	SetTokenData sets the token data
5907	ValidSecret checks if the given secret is valid .
5908	HashSecret generates a secret .
5909	ValidPassword checks if the given password is valid .
5910	HashPassword generates a new password .
5911	MustCreateStore is like CreateStore but panics on error .
5912	CreateStore creates a new store .
5913	C returns the mongo collection for the given model .
5914	NewAssetServer creates a new http . Handler for the asset server .
5915	DefaultGrantStrategy is the default grant strategy
5916	DefaultTokenData returns default token data .
5917	GenerateToken generates a new token
5918	ParseToken parses a token string into a token claims
5919	E returns a new enforcer that operates on the named enforcer .
5920	MustGet returns the field value for the given field name .
5921	MustSet sets the value of a field .
5922	NewGroup creates a new group
5923	Add adds controllers to the group .
5924	Endpoint returns an http . Handler for the specified endpoint .
5925	Add adds the given fields to the given model .
5926	AddRaw adds a new raw index .
5927	Ensure ensures that all indexes are in the same store .
5928	NewCatalog creates a new Catalog .
5929	Add adds a new model to the catalog .
5930	All returns all models in the catalog .
5931	Visualize returns a visualization of the catalog
5932	NewErrorReporter returns a function that writes to the given writer .
5933	EnsureIndexes ensures that all indices in the store are set .
5934	E creates an error from a panic .
5935	Compose creates an http . Handler from a list of middleware chains .
5936	Includes returns true if all items contain a subset .
5937	Intersect returns the intersection of listA .
5938	Create a new error with the given reason and retry
5939	RootTracer is a middleware that adds a tracer to a request
5940	NewTracerFromRequest creates a new Tracer from the request context .
5941	NewTracer returns a new tracer for the given root Span .
5942	Push a new span .
5943	Last returns the last span in the tracer
5944	Tag sets a tag for the given key .
5945	Log implements the Tracer interface .
5946	Context implements opentracing . ContextWithSpan .
5947	Pop implements the Tracer interface .
5948	Finish implements Tracer . Finish
5949	NewPool creates a new pool
5950	Add adds a task to the queue
5951	Run starts the goroutines .
5952	NewBodyLimiter returns a new BodyLimiter .
5953	LimitBody limits the body to the request s BodyLimiter
5954	C creates a new Callback
5955	Only returns a Matcher that only matches given operations .
5956	BasicAuthorizer returns a Callback Callback for HTTP Basic Authentication .
5957	ModelValidator returns a Callback for creating a new model .
5958	TimestampValidator returns a Callback Callback
5959	RelationsValidator creates a Callback for the given models .
5960	Inspect implements Seekret .
5961	NewRule returns a new Rule
5962	AddUnmatch adds an unmatch to the rule
5963	Run the rule .
5964	NewSecret creates a new Secret .
5965	NewObject creates a new object .
5966	SetMetadata sets the value for the specified key .
5967	GetMetadata returns the value associated with the specified key .
5968	GetMetadataAll returns all the metadata associated with the object .
5969	SetRule sets a single rule
5970	SetObject sets an object .
5971	SetNline sets the nline of the Exception .
5972	SetContent sets the given content .
5973	Run returns true if the given secret match the given secret .
5974	AddRule adds a rule to the Seekret .
5975	LoadRulesFromFile loads rules from file
5976	LoadRulesFromDir loads rules from a file .
5977	DefaultRulesPath returns the default rules file path
5978	EnableRule enables a rule .
5979	DisableRule disables a rule .
5980	EnableRuleByRegexp enables rule with given name .
5981	DisableRuleByRegexp disables rule by regexp
5982	LoadObjects from Seekret
5983	GroupObjectsByMetadata returns the objects associated with the given key .
5984	GroupObjectsByPrimaryKeyHash returns a map of object names by primary key hash .
5985	AddException adds an exception to the Seekret object .
5986	LoadExceptionsFromFile loads an exception from a file .
5987	printPlainResults prints the result from the results .
5988	printJsonResults prints the results to stdout
5989	NewXor64Source returns a new Xor64Source instance
5990	xor64 x .
5991	next returns the next uint64 value from s .
5992	Seed sets the value of xor64 .
5993	NewFrameSet creates a new FrameSet .
5994	handleMatch is used to handle unique identifiers
5995	Index returns the index at a given frame .
5996	Frame returns the frame at a given index .
5997	HasFrame returns true if the frame exists in the set .
5998	FrameRangePadded returns the range of a frame within a given pad .
5999	Normalize returns a FrameSet containing all elements in this frame set .
6000	FramesToFrameRange converts a list of frames to a human - readable string .
6001	frame range matches
6002	toRange converts a range to a slice of ints
6003	NewWorkManager creates a new work manager .
6004	processSources processes source files from disk
6005	isInputDone returns true if the input is finished .
6006	closeInputs closes all pending inputs .
6007	load tasks from the given paths .
6008	loadRecursive recursively recursively traverses the specified paths .
6009	preparePaths takes a list of paths and returns a list of files and fileseq files .
6010	PadFrameRange appends the length of a frame to the given frange .
6011	zfillString creates a zfill string from src and z .
6012	zfillInt is the same as zfillInt .
6013	NewInclusiveRange creates a new InclusiveRange
6014	String returns the string representation of the InclusiveRange
6015	End returns the index of the inclusiveRange .
6016	Len returns the length of the inclusiveRange .
6017	Min returns the minimum of the InclusiveRange
6018	Max returns the maximum value of the InclusiveRange
6019	Contains returns true if the given value is in the InclusiveRange .
6020	closestInRange finds the closest in range in the range [ start end ) .
6021	Index returns the index at the given value .
6022	String returns a string representation of the InclusiveRanges .
6023	Len returns the total length of the InclusiveRanges .
6024	Start starts the inclusiveRanges .
6025	End marks the end of the overlapping ranges .
6026	Min returns the minimum of the inclusiveRanges
6027	Max returns the maximum inclusiveRanges .
6028	numRanges returns the number of blocks .
6029	rangeAt returns the inclusiveRange at the given index .
6030	Append adds a new range to the end
6031	AppendUnique appends a unique range to the end of the range [ start end ) .
6032	Contains implements the InclusiveRanges interface .
6033	Index implements the Index interface .
6034	FrameRange returns the frame name .
6035	FrameRangePadded returns the frame range added to the sequence .
6036	Index returns the path to the file in the sequence set .
6037	SetDirname sets the directory
6038	SetPadding sets the padding charset .
6039	SetPaddingStyle sets the padding style .
6040	SetExt sets the extension .
6041	SetFrameRange sets a frame range
6042	Len implements the FileSequence interface .
6043	String returns a string representation of this FileSequence .
6044	Copy returns a copy of this FileSequence .
6045	NewClient creates a new Client .
6046	UnmarshalXML implements xml . Unmarshaler for Header .
6047	UnmarshalXML implements xml . Unmarshaler for Body .
6048	Call sends a request to the soap action
6049	JSONDoc loads JSON document from path .
6050	Add loader
6051	JSONSpec constructs a JSON document from a path .
6052	Embedded builds a Document from a flat JSON .
6053	Spec loads the spec from the given path .
6054	Analyzed builds a Document from a YAML JSON .
6055	Expanded expands a document .
6056	ResetDefinitions resets the list of definitions to empty .
6057	Pristine returns the meta data of the document .
6058	OpenDb opens a GeoIP file .
6059	GetOrg returns the org name of an org
6060	GetRegion returns the region code for the given IP address
6061	GetRegionName returns the region name for the given region code .
6062	GetCountry returns the country code for the given IP address .
6063	NewRotatingFileHandler creates a new RotatingFileHandler .
6064	Close closes the file handler
6065	String implements the Stringer interface for Level .
6066	New creates a new Logger .
6067	Close the logger
6068	SetLevelByName sets the logging level by name .
6069	Output implements the Logger interface
6070	OutputJson writes a json object to the logger
6071	Print calls Output to print to the standard logger .
6072	Println calls Output to print to the standard logger .
6073	Debug calls Output to print to the standard logger .
6074	Debugln calls Output to print to the standard logger . Arguments are handled in the manner of fmt . Println .
6075	Error calls Output to print to the standard logger .
6076	Errorln calls Output to print to the standard logger . Arguments are handled in the manner of fmt . Println .
6077	Info calls Output to print to the standard logger .
6078	Infoln calls Output to print to the standard logger .
6079	Warn calls Output to print to the standard logger .
6080	Warnln calls Output to print to the standard logger .
6081	NewStreamHandler returns a new StreamHandler .
6082	Right adds a string to the right
6083	New returns a new instance of the API
6084	setupMetadata returns a map of resource names to resource
6085	recordTypes populates the given data type to the root .
6086	appendSorted appends a slice of ActionParam to params .
6087	parse data type
6088	parseParam creates a new ActionParam
6089	newParam creates a new ActionParam
6090	toGoReturnTypeName returns a Go type name .
6091	toGoTypeName converts a Go type name to a Go type name .
6092	parse returns a string representation of an interface .
6093	isBuiltInType returns true if the given name is a built - in type .
6094	MatchHref returns true if the href matches the href .
6095	Substitute removes duplicate values from the path .
6096	MarshalJSON implements the json . Marshaler interface for FileUpload .
6097	writeMultipartParams writes multipart form parameters into w .
6098	PerformRequest performs an HTTP request .
6099	PerformRequestWithContext performs an HTTP request with context
6100	LoadResponse from the API
6101	ScheduleLocator returns a ScheduleLocator
6102	TemplateLocator returns a TemplateLocator
6103	fetchDetails fetches information about the specified server .
6104	buildAliases builds a comma - separated list of aliases .
6105	serverArray returns an array of instances from the server array
6106	server returns information about a specific server
6107	toPackageName converts a version string into a Go package name .
6108	loadFile loads a file .
6109	main is the main entry point .
6110	runCommand runs the command .
6111	CreateJSONResponse creates an http . Response from a byte slice .
6112	AccountLocator returns an AccountLocator .
6113	AccountGroupLocator returns an AccountGroupLocator for the specified href .
6114	AlertLocator returns a new AlertLocator .
6115	AlertSpecLocator returns a new AlertSpecLocator .
6116	AuditEntryLocator returns an audit entry locator for the given href .
6117	BackupLocator returns a new BackupLocator .
6118	ChildAccountLocator returns child account locator
6119	CloudLocator returns a CloudLocator for the given CloudLocator .
6120	CloudAccountLocator returns a CloudAccountLocator for the given href .
6121	CookbookLocator returns a new CookbookLocator .
6122	CookbookAttachmentLocator returns a new CookbookAttachmentLocator .
6123	CredentialLocator returns a CredentialLocator .
6124	DatacenterLocator returns a new datacenter locator .
6125	DeploymentLocator returns a new DeploymentLocator .
6126	HealthCheckLocator returns a new HealthCheckLocator .
6127	IdentityProviderLocator return IdentityProviderLocator
6128	ImageLocator returns an ImageLocator .
6129	InputLocator returns a new InputLocator .
6130	InstanceLocator returns a new InstanceLocator .
6131	InstanceTypeLocator returns InstanceTypeLocator
6132	IP address locator
6133	IpAddressBindingLocator creates an IpAddressBindingLocator with the specified href .
6134	MonitoringMetricLocator returns a new MonitoringMetricLocator
6135	MultiCloudImageLocator returns a new MultiCloudImageLocator .
6136	MultiCloudImageMatcherLocator returns a MultiCloudImageMatcherLocator for the given href .
6137	MultiCloudImageSettingLocator returns a new MultiCloudImageSettingLocator instance
6138	NetworkLocator returns a new NetworkLocator .
6139	NetworkGatewayLocator returns a NetworkGatewayLocator for the given href .
6140	NetworkOptionGroupLocator returns a network option group locator .
6141	NetworkOptionGroupAttachmentLocator returns NetworkOptionGroupAttachmentLocator
6142	Oauth2Locator returns an Oauth2Locator for the given href .
6143	PermissionLocator returns a PermissionLocator
6144	PlacementGroupLocator returns a new PlacementGroupLocator .
6145	PreferenceLocator returns a PreferenceLocator for the specified href .
6146	AuthorizationLocator returns a new PublicationLocator
6147	ExportLineageLocator creates a new PublicationLineageLocator
6148	RecurringVolumeAttachmentLocator returns a new RecurringVolumeAttachmentLocator .
6149	RepositoryLocator returns a RepositoryLocator
6150	RepositoryAssetLocator returns a new RepositoryAssetLocator .
6151	ResourceGroupLocator returns a ResourceGroupLocator for the given href .
6152	RightScriptLocator returns a new instance of RightScriptLocator
6153	RightScriptAttachmentLocator returns a new instance of RightScriptAttachmentLocator
6154	RouteLocator returns a RouteLocator for the given href and href .
6155	RouteTableLocator returns a RouteTableLocator for the given href and href .
6156	RunnableBindingLocator returns a new RunnableBindingLocator .
6157	SchedulerLocator returns a SchedulerLocator
6158	SecurityGroupLocator returns security group locator
6159	SecurityGroupRuleLocator returns security group rule locator
6160	ServerLocator returns a ServerLocator for the given URL .
6161	ServerArrayLocator returns a ServerArrayLocator
6162	ServerTemplateLocator returns a ServerTemplateLocator .
6163	ServerTemplateMultiCloudImageLocator returns a ServerTemplateMultiCloudImageLocator
6164	SessionLocator returns a new SessionLocator .
6165	SshKeyLocator returns an SshKeyLocator for the specified href .
6166	SubnetLocator returns a SubnetLocator .
6167	TagLocator creates a TagLocator .
6168	TaskLocator returns a TaskLocator .
6169	UserLocator returns a UserLocator .
6170	UserDataLocator returns a UserDataLocator
6171	VolumeLocator returns a new VolumeLocator .
6172	VolumeAttachmentLocator creates a new VolumeAttachmentLocator
6173	VolumeSnapshotLocator returns a VolumeSnapshotLocator
6174	VolumeTypeLocator creates a new VolumeTypeLocator
6175	RegisterCommands adds commands to the APICommandRegistrar .
6176	ShowCommandHelp shows the help for the given command
6177	ShowAPIActions show APIActions
6178	ShowHelp displays the help for the given command .
6179	ParseCommandAndFlags parses a command and returns a CommandTarget
6180	validateFlagValue returns an error if the flag value is not valid
6181	buildQuery builds an APIParams from a list of values .
6182	buildPayload creates a payload from an array of values .
6183	shortenPattern returns a shortened form of a string .
6184	cleanDescription removes the description from a string .
6185	Returns true if the file exists
6186	AnalysisSnapshotLocator returns an AnalysisSnapshotLocator .
6187	BudgetAlertLocator returns a new BudgetAlertLocator .
6188	CloudBillLocator returns CloudBillLocator for a CloudBillLocator
6189	CloudBillMetricLocator creates a CloudBillMetricLocator with the given href .
6190	CurrentUserLocator returns the current user locator
6191	InstanceCombinationLocator returns an InstanceCombinationLocator for the given href .
6192	InstanceMetricLocator returns InstanceMetricLocator
6193	InstanceUsagePeriodLocator returns InstanceUsagePeriodLocator
6194	PatternLocator returns a new PatternLocator .
6195	ReservedInstanceLocator returns a reserved instance locator
6196	ReservedInstancePurchaseLocator creates a new ReservedInstancePurchaseLocator
6197	ScenarioLocator returns a new ScenarioLocator
6198	ScheduledReportLocator returns a new ScheduledReportLocator
6199	TempInstancePriceLocator creates a new TempInstancePriceLocator .
6200	UserSettingLocator returns UserSettingLocator
6201	readAllAsync reads from the given ReadCloser .
6202	extractArg takes a comma separated list of arguments and returns a new value or an empty string .
6203	write is used to write to a file
6204	AppliedPolicyLocator returns a new AppliedPolicyLocator
6205	AppvalLocator returns an ApprovalLocator
6206	InspectLocator returns an IncidentLocator for the given href .
6207	PolicyTemplateLocator returns a PolicyTemplateLocator for the given href .
6208	PublishedTemplateLocator returns a PublishedTemplateLocator
6209	DebugCookbookPathLocator returns a new DebugCookbookPathLocator
6210	DockerControlLocator returns a DockerControlLocator
6211	EnvLocator returns a new EnvLocator
6212	LoginControlLocator returns a pointer to a new LoginControlLocator object .
6213	ProcLocator returns a ProcLocator .
6214	Rl10Locator returns an Rl10Locator for the given href .
6215	TSSLocator returns a TSSLocator for the given href .
6216	TSSControlLocator returns a TSSControlLocator
6217	TSSPluginLocator returns a new TSSPluginLocator
6218	NewAngularWriter returns a new instance of an angular writer
6219	WriteResource executes the given resource .
6220	path returns a string representation of the action .
6221	mandatory
6222	New creates a new API client
6223	FromCommandLine creates an API from a command line
6224	CanAuthenticate is part of the API interface .
6225	Encrypt encrypts a plaintext using AES
6226	Decrypt decrypts text using AES
6227	guessType guesses the type of a definition .
6228	addType adds a type to the objectDataType
6229	extractCmdLineParams extracts the given action parameters from a given root .
6230	NewMetadataWriter returns a new MetadataWriter .
6231	WriteHeader writes the header to the given writer .
6232	WriteMetadata writes the given APIDescriptor to the given writer .
6233	location returns the location for the given action parameter .
6234	New creates a new instance of the API .
6235	fromAPI creates an API from an API .
6236	BuildRequest builds an HTTP request for a specific action
6237	setupMetadata creates a new set of genMetadata
6238	NewDisplayer creates a Displayer from an http . Response .
6239	ApplySingleExtract applies a single extract to the JSON document .
6240	ApplyExtract applies the selector to the Displayer .
6241	ApplyHeaderExtract is part of the Displayer interface .
6242	Output implements the Displayer interface .
6243	NewAPIAnalyzer creates a new APIAnalyzer .
6244	Analyze the API
6245	AnalyzeAliases analyzes the API resource definitions .
6246	LocatorFunc returns the locator function for the given attributes .
6247	ParseRoute parses a list of gen . PathPatterns
6248	isDeprecated returns true if path is deprecated
6249	isQueryParam returns true if a is a query parameter .
6250	isPathParam returns true if p is a path parameter
6251	fetchAuditEntries fetches audit entries from the registry .
6252	formatTime returns a string representation of the time .
6253	printAudits prints audit entries
6254	extractUnique extracts unique entries from old entries
6255	getHref returns the href of an audit entry
6256	fail marks the given string as failed .
6257	options returns a string representation of this action .
6258	paramsInitializer generates the initial parameters for an action
6259	commandLine returns a string representation of the command .
6260	toVerb converts the given text to a human - readable string .
6261	escapeBackticks escapes backticks .
6262	AccountPreferenceLocator returns an AccountPreferenceLocator for the specified href .
6263	ApplicationLocator returns an ApplicationLocator .
6264	EndUserLocator returns an EndUserLocator .
6265	NotificationRuleLocator returns a new NotificationRuleLocator .
6266	UserPreferenceLocator returns UserPreferenceLocator
6267	UserPreferenceInfoLocator returns UserPreferenceInfoLocator
6268	LoadConfig loads the config from disk .
6269	CreateConfig - Creates a new config file .
6270	fromAPI creates a new api . API from an api . API .
6271	HostFromLogin gets the host from a login string .
6272	AnalyzeParam analyzes the given parameter .
6273	AnalyzeAttribute analyzes an attribute .
6274	AnalyzeType analyzes the type definition .
6275	CreateType returns object data type for query
6276	Ref returns the definition of a reference
6277	Type returns the type of the object
6278	Required returns the list of required fields
6279	ID returns the ref name
6280	Service returns the endpoint s service name .
6281	Method returns the endpoint s method name .
6282	NewTypeRegistry creates a new TypeRegistry .
6283	GetNamedType returns the named type .
6284	CreateNamedType creates a new ObjectDataType with the given name .
6285	CreateInlineType creates an inline type
6286	FinalizeTypeNames renders an inline type name .
6287	Merge takes two API descriptors and returns an error if one occurred .
6288	FinalizeTypeNames removes the type names from the resource data types .
6289	uniqueTypeName returns a unique identifier for a given type name .
6290	InfrictParams returns the set of parameters that should be included in the action .
6291	HasOptionalParams returns true if this action has optional params
6292	MakeUniq creates an uniq based on a base string .
6293	NewClientWriter creates a new ClientWriter .
6294	WriteHeader writes a header to the client
6295	WriteResourceHeader to the writer
6296	WriteType writes the object data type to w .
6297	WriteResource writes the resource .
6298	WithTrail returns a new EvalCtx with a given trail
6299	AnalyzeEndpoint analyzes an endpoint .
6300	NetworkInterfaceLocator returns a NetworkInterfaceLocator .
6301	NetworkInterfaceAttachmentLocator returns a new NetworkInterfaceAttachmentLocator .
6302	UnmarshalJSON implements the json . Unmarshaler interface
6303	ExecutionLocator returns a new ExecutionLocator .
6304	NotificationLocator returns a new NotificationLocator .
6305	OperationLocator returns a new OperationLocator
6306	ScheduledActionLocator returns a new ScheduledActionLocator
6307	NewBasicAuthenticator creates an Authenticator for basic login request .
6308	NewSSAuthenticator returns a new instance of SSuthenticator
6309	newCookieSigner creates a new Authenticator .
6310	Sign adds a cookie to the request .
6311	CanAuthenticate checks if the host can authenticate with the given host .
6312	refresh refreshes the cookie .
6313	Sign adds an authorization header to the request .
6314	Sign adds the signature to the request .
6315	Sign adds a signature to an http request .
6316	SetHost sets the host for the auther
6317	CanAuthenticate returns an error if the request is authenticated
6318	extractRedirectURL extracts the redirect URL from the response .
6319	buildURL constructs a URL from the specified host and path .
6320	GetAction returns the Action with the given name or nil if not found .
6321	HasLink returns true if the resource has a link
6322	findMatches takes a resource href and returns a list of paths that match action
6323	NewPB returns a new HTTPClient .
6324	newVariableDumpClient returns a new dump client .
6325	newRawClient returns a new raw http . Client .
6326	DoHidden is part of the dump API .
6327	Do implements the http . Do method .
6328	doImp is used to dump an HTTP request
6329	getClientWithoutTimeout returns an http . Client without timeout .
6330	dumpRequest is used to dump the request body
6331	Write headers to buffer
6332	copyHiddenHeaders makes a copy of the map .
6333	validateCommandLine validates the command line
6334	APIClient returns a client for the given APIClient
6335	RegisterClientCommands registers all registrar commands
6336	Interactive enables interactive logger .
6337	toPattern creates a new path from a verb
6338	WithClientIP returns a context with the given IP set
6339	ClientIP returns the ip associated with the context .
6340	NewProducer creates a new producer
6341	StartProducer starts a new producer
6342	Start starts a producer
6343	Stop stops a producer .
6344	Publish message to given topic
6345	PublishTo implements PublishTo
6346	NewLocalEngine returns a new LocalEngine .
6347	validate creates a new ConsumerConfig
6348	defaults sets default values
6349	NewConsumer creates a new consumer .
6350	StartConsumer starts a new consumer
6351	Start the consumer
6352	RateLimit takes a channel and returns a channel that will receive messages over the channel . The channel will be closed when the channel is closed .
6353	Write writes raw response to w .
6354	ReadResponse reads a response from r .
6355	backoff returns a delay for the given attempt .
6356	String returns the string representation of a FrameType
6357	NewConsulEngine creates a new ConsulEngine .
6358	ParseMessageID parses a string and returns MessageID .
6359	WriteTo implements io . WriterTo interface . It serializes the MessageID into the wire format .
6360	NewMessage creates a new Message .
6361	Finish finalizes the message
6362	Requeue sends a Requeue message to the queue
6363	ReadCommand reads and returns a command .
6364	funcMapMaker return funcMap
6365	Funcs sets the function map .
6366	Execute a template
6367	RegisterPath registers a new path to the filesystem
6368	Asset returns the contents of a file
6369	Glob returns all files matching pattern .
6370	NameSpace returns an Interface for this AssetFileSystem .
6371	New creates a new Render
6372	RegisterViewPath registers a view path
6373	SetAssetFS sets the AssetFileSystem
6374	Layout creates a new layout template
6375	Funcs creates a new template with the given functions .
6376	Execute renders a template using the default layout
6377	RegisterFuncMap registers a function map .
6378	Asset returns the assets file system
6379	NewPlainClient returns a new Client with the specified credentials .
6380	Create creates a new uploader from the given URL .
6381	Open returns an io . ReadCloser for the given URL .
6382	Sign adds a key - value pair to the default service .
6383	Sign adds the AWS authorization to the request .
6384	Readdir returns a list of file descriptors
6385	Find returns all the nodes that match the given path p .
6386	Lex implements the Lexer interface .
6387	MustParseXML is like ParseXML but panics on error .
6388	ParseXML parses XML data from the given io . Reader .
6389	Call calls the wrapped function with the given arguments .
6390	Parse parses XPath string into XPathExec .
6391	MustParse is like Parse but panics on error .
6392	Exec executes a XPath Exec
6393	ExecBool is part of the XPath interface .
6394	ExecNum takes a node and converts it to a number .
6395	ExecNode is part of the XPath interface
6396	MustExec executes XPathExec and panics on error .
6397	ParseExec parses xpstr and returns the result .
6398	CreateNode creates a XMLNode
6399	GetChildren returns the children of the XMLEle
6400	GetAttrs returns a slice of Attrs .
6401	ResValue returns the ResValue of the tree .
6402	Parse parses a single XPath node .
6403	GetToken returns the token of the XMLNode .
6404	ResValue returns the string representation of an XMLNode
6405	Exec executes a XPath tree .
6406	String returns a string representation of n .
6407	Num returns the string representation of the string .
6408	BuildNS creates a NS from an Elem .
6409	GetAttribute returns the xml . Attr of a node
6410	GetAttributeVal returns the value of a given attribute .
6411	GetAttrValOrEmpty returns attribute value or empty if empty .
6412	FindNodeByPos recursively finds the node at the given position .
6413	Marshal writes the given tree to the given writer .
6414	MarshalStr returns a string representation of the tree .
6415	NewLexer creates a new Lexer .
6416	NewLexerString creates a new Lexer from a string .
6417	Split splits a string .
6418	Register registers a new error descriptor .
6419	Get returns an ErrDescriptor for the given code .
6420	GetAll returns all registered routes .
6421	From returns a new error from a given error
6422	Descriptor returns an ErrDescriptor for the given in error .
6423	GetAttributes returns the attributes of an error .
6424	HTTPStatusCode returns the HTTP status code for the given type .
6425	HTTPStatusCode converts an error to an HTTP status code .
6426	HTTPStatusToType converts a http . Status to an Unknown type .
6427	ToHTTP encodes an error into a JSON - RPC error .
6428	toImpl converts an error to an impl .
6429	MetadataFromIncomingContext returns the metadata associated with the given context .
6430	MetadataFromOutgoingContext returns the metadata associated with ctx if any .
6431	TokenFromMetadata extracts the token from metadata .
6432	TokenFromIncomingContext extracts the token from the context .
6433	OutgoingContextWithToken returns a new context with the given token
6434	KeyFromMetadata extracts key from metadata . MD .
6435	KeyFromIncomingContext extracts the metadata from the metadata .
6436	OutgoingContextWithKey returns a new context with the given key .
6437	IDFromMetadata extracts the ID from the metadata .
6438	IDFromIncomingContext extracts the ID from the given context .
6439	OutgoingContextWithID returns a new context with the given metadata .
6440	ServiceInfoFromMetadata extracts the service information from the metadata .
6441	ServiceInfoFromIncomingContext returns the service name and network address from the context
6442	OutgoingContextWithServiceInfo returns a context with the outgoing context
6443	LimitFromMetadata extracts the limit from metadata .
6444	OffsetFromMetadata extracts the offset from metadata .
6445	LimitAndOffsetFromIncomingContext is a convenience wrapper around LimitFromIncomingContext .
6446	OutgoingContextWithLimitAndOffset returns a new context with the given limit and offset .
6447	before compares two schedules .
6448	New returns a new error .
6449	WithNamespace sets namespace
6450	Wrap returns a new Namespaced
6451	WithField returns a new instance of Namespaced that implements the namespace interface .
6452	WithFields returns a new instance of the Namespaced interface .
6453	Format takes a format string and returns a formatted string
6454	fix takes a pointer to a value and converts it to a string representation .
6455	GRPCCode returns the GRPCCode for the given type
6456	GRPCCodeToType turns a code into a GRPCCode type .
6457	GRPCCode converts an error to a gRPC code .
6458	FromGRPC converts an error to an Error struct
6459	ToGRPC converts an error to a grpc error
6460	IsEnabled returns true if the namespace is enabled
6461	Set sets namespace namespaces .
6462	Cause returns the error if any .
6463	parseCode converts a string to a Code .
6464	UnaryServerInterceptor returns a new UnaryServerInterceptor .
6465	StreamServerInterceptor returns a new streaming server interceptor
6466	UnaryClientInterceptor returns a new UnaryClientInterceptor .
6467	StreamClientInterceptor returns a new streaming client interceptor for the given convert function .
6468	Interceptor returns a new streaming client interceptor .
6469	Wrap returns a new logger interface
6470	NewCounter creates a new counter
6471	NewRedisCounter creates a new RedisCounter .
6472	NewLimiter creates a new Limiter
6473	WithInsecure returns a new TokenCredentials object wrapping the credentials .
6474	WithTokenFunc returns a pointer to a TokenCredentials object wrapping the passed string .
6475	GetRequestMetadata gets the request metadata from the context .
6476	FieldsFromIncomingContext creates a ttnlog . Fields from the given context .
6477	String returns a human - readable description of the type .
6478	UnmarshalText implements the encoding . TextUnmarshaler interface .
6479	fromString converts a string to a Type
6480	Start starts the goroutines
6481	NewSimple creates a simple queue .
6482	Wrap returns a new filtered filter
6483	WithFilters returns a new Filter instance
6484	WithField returns a new filtered object with the specified key and value .
6485	WithFields returns a new filter with the specified fields .
6486	FilterSensitive creates a Filter that applies the given sensitive values to lower case .
6487	SliceFilter applies a filter to a slice of values .
6488	MapFilter returns a new Filter that applies the given map and value .
6489	RestrictFilter returns a Filter that restricts the given field name .
6490	LowerCaseFilter creates a filter that applies to a lower case filter .
6491	newBatchPoints creates a new BatchPoints .
6492	NewSinglePointWriter creates a new SinglePointWriter .
6493	Write implements io . Writer interface
6494	WithScalingInterval sets the interval between the underlying writer
6495	NewBatchingWriter creates a BatchingWriter .
6496	Write implements io . Writer interface
6497	MustParseLevel is like ParseLevel but panics on error .
6498	New creates a new gRPC stream .
6499	SetLogger sets the logger .
6500	CloseRecv closes the buffer .
6501	Stats returns the number of streams and dropped .
6502	Run starts the Stream .
6503	ServerOptions returns the gRPC server options for the given log .
6504	ClientOptions returns a set of dial options for the given log .
6505	UnaryServerInterceptor returns a new unary server interceptor for logging .
6506	StreamServerInterceptor returns a new streaming server interceptor for streaming RPCs .
6507	UnaryClientInterceptor returns a new unary client interceptor
6508	StreamClientInterceptor returns a new streaming client interceptor .
6509	defaults set default logger
6510	Flush implements the Handler interface .
6511	New creates and returns a Handler .
6512	HandleLog writes log messages to log .
6513	New returns a new Interface .
6514	Names returns the name of the UriTemplate .
6515	String returns a string representation of the value .
6516	RenderPerfdata renders a PerfDatum
6517	Exit prints a message and exits with status code .
6518	NewCheckWithOptions creates a new Check with the given options .
6519	AddResult adds a new result to the check .
6520	AddResultf is part of the Check interface .
6521	String returns the string representation of the check .
6522	Exitf is a convenience wrapper around fmt . Exitf
6523	Criticalf is part of the Check interface .
6524	Unknownf is part of the Check interface .
6525	NewDefaultStatusPolicy creates a new default status policy .
6526	NewStatusPolicy creates a new status policy .
6527	ParseRange parses a range string .
6528	Check returns true if the range is within the range .
6529	CheckInt returns true if the given value is a valid float .
6530	CheckUint64 returns true if the given value is a uint64 .
6531	NewClient creates a new API client
6532	GetKeyMeta returns the KeyMeta for the given path .
6533	GetKeysInDirMeta returns all keys in a given path .
6534	GetKeyContent returns the content for the given path
6535	GetJobSummariesForProject returns a list of all the summaries for a project
6536	GetJobsForProject returns a list of all jobs for a project .
6537	GetJob retrieves information about a job .
6538	CreateJob creates a new job .
6539	CreateOrUpdateJob creates a new job .
6540	DeleteJob deletes a job .
6541	JobSummary returns a summary of the job import result .
6542	GetSystemInfo retrieves information about the system
6543	DateTime returns the timestamp as a time . Time .
6544	GetAllProjects returns a list of all projects .
6545	GetProject returns a project by name .
6546	CreateProject creates a new project .
6547	DeleteProject deletes a project .
6548	SetProjectConfig sets the current project configuration .
6549	NewClient returns a new PBRestClient .
6550	NewClientByToken creates a new client using the given token .
6551	Set the depth of the client
6552	ListDatacenters returns a list of all datacenters
6553	CreateDatacenter creates a new datacenter .
6554	GetDatacenter gets a single datacenter
6555	UpdateDataCenter updates a single datacenter .
6556	DeleteDatacenter deletes a datacenter
6557	WaitTillProvisioned will wait until the request expires .
6558	ListFirewallRules gets the current firewall rules
6559	GetFirewallRule retrieves the current firewall rule
6560	CreateFirewallRule creates a firewall rule
6561	UpdateFirewallRule updates a firewall rule
6562	DeleteFirewallRule deletes a firewall rule
6563	ListLoadbalancers lists all loadbalancers
6564	GetLoadbalancer returns a Loadbalancer object for the given dcid .
6565	UpdateLoadbalancer creates a new loadbalancer .
6566	DeleteLoadbalancer deletes the specified loadbalancer .
6567	ListBalancedNics returns a list of all the registered network objects
6568	AssociateNic associates a nic with the given balid .
6569	GetBalancedNic retrieves a nic with balnicid
6570	DeleteBalancedNic deletes a connected nic
6571	ListLans returns a list of all Langs in the given dcid .
6572	GetLan returns the lan at the given coordinate .
6573	DeleteLan deletes a lanid
6574	ListNics returns a list of all available NICs .
6575	CreateNic creates a new nic on the server .
6576	GetNic retrieves a nic with the given parameters .
6577	UpdateNic updates a nic .
6578	DeleteNic deletes a nic
6579	ListSnapshots returns a list of all available snapshots
6580	GetSnapshot retrieves an existing snapshot .
6581	DeleteSnapshot deletes an existing snapshot
6582	UpdateSnapshot updates an existing snapshot .
6583	ListIPBlocks returns a list of all the available IP blocks .
6584	ReserveIPBlock reserves an IP block .
6585	GetIPBlock retrieves the specified IP block .
6586	UpdateIPBlock updates an existing IP block .
6587	ReleaseIPBlock releases the specified IP block
6588	ListVolumes returns a list of volumes for the given dcid
6589	GetVolume gets a volume by ID
6590	UpdateVolume updates a volume .
6591	CreateVolume creates a volume .
6592	DeleteVolume performs a request to delete a volume
6593	CreateSnapshot creates a new volume .
6594	RestoreSnapshot restores a snapshot
6595	ListServers lists all servers in the given dcid .
6596	GetServer returns the Server for the given dcid .
6597	DeleteServer deletes a server
6598	ListAttachedCdroms fetches the images associated with the server .
6599	AttachCdrom attaches a cdrom image to the server .
6600	GetAttachedCdrom fetches the image from the server .
6601	DetachCdrom detaches a cdrom path .
6602	ListAttachedVolumes lists volumes on the cluster .
6603	AttachVolume attaches a volume to a volume .
6604	GetAttachedVolume retrieves a volume from the controller .
6605	DetachVolume detaches a volume .
6606	StartServer starts a server .
6607	ListLocations returns a list of all available Locations
6608	GetRegionalLocations returns a list of all locations associated with the given regid .
6609	GetLocation returns a Location object for the given locid .
6610	GetContractResources retrieves all contract resources
6611	ListImages returns a list of all available images
6612	GetImage fetches the specified image .
6613	PrintHeaders prints response headers
6614	ListGroups retrieves a list of groups
6615	GetGroup retrieves a single group
6616	CreateGroup creates a group
6617	UpdateGroup updates an existing group
6618	DeleteGroup deletes a group
6619	ListShares returns a list of all shares .
6620	GetShare gets a share from a group
6621	AddShare adds a share to an existing group .
6622	UpdateShare updates a share .
6623	DeleteShare performs a request to delete a shared group
6624	ListGroupUsers retrieves a list of users for a group
6625	AddUserToGroup adds a user to a group
6626	DeleteUserFromGroup deletes a user from a group
6627	ListUsers returns a list of all users .
6628	GetUser returns information about the user .
6629	CreateUser creates a new user .
6630	UpdateUser updates an existing user .
6631	DeleteUser deletes a user by ID .
6632	ListResources returns a list of resources
6633	GetResourceByType fetches a resource by its ID .
6634	ListResourcesByType fetches the resources matching the given type .
6635	ListRequests returns a list of Requests .
6636	GetRequest returns the requested request .
6637	GetRequestStatus returns the status of the request .
6638	Close closes the underlying file .
6639	GetSerializableArgument gets the serializable argument
6640	BoolVar is a wrapper for EnvironmentFlags . BoolVar
6641	Bool is a convenience wrapper for EnvironmentFlags . Bool
6642	IntVar is an alias for IntVar
6643	Int is a convenience wrapper for EnvironmentFlags . Int
6644	Int64Var is a convenience wrapper for Int64Var
6645	Int64 is a convenience wrapper for EnvironmentFlags . Int64
6646	UintVar is an alias for uint flags .
6647	Uint is a convenience wrapper for EnvironmentFlags . Uint
6648	Uint64Var is a convenience wrapper for EnvironmentFlags . Int64Var
6649	Uint64 creates a new uint64 .
6650	StringVar is a convenience wrapper for StringVar
6651	String is a convenience wrapper for String
6652	Float64Var is a convenience wrapper for EnvironmentFlags . Float64Var
6653	Float64 is a convenience wrapper for EnvironmentFlags . Float64
6654	DurationVar defines a duration flag with specified name default value and usage string .
6655	Duration is a convenience wrapper around time . Duration
6656	Parse the environment
6657	WriteStringToFile writes a string to a file
6658	ReadFileToString reads a file from the given path .
6659	LineReader creates a channel from an io . Reader
6660	LineReaderFrom returns a channel that reads lines from the given path .
6661	FileExists returns true if the given file exists .
6662	FileExistsInPath returns true if the given file exists in the given path .
6663	GetPathParts returns the parts of a path .
6664	GetThisPathParts returns the full path parts of the executable file .
6665	Return a random string
6666	ParseAddress parses an address string .
6667	HomeDir returns the user s home directory
6668	IsTCPPortAvailable checks if a TCP port is available
6669	RandomTCPPort returns a random TCP port .
6670	HashString computes the hash value for the given key .
6671	Context retrieves information about the current session
6672	Token returns an oauth2 . Token .
6673	NewDaemon returns a new daemon
6674	Close closes the daemon
6675	NewAccessTokenContext returns a new context with an access token
6676	AccessTokenFromContext extracts the access token from the context .
6677	RandomAccessToken returns a new random access token .
6678	Init initializes the logger .
6679	Load loads a dictionary from path .
6680	Start starts the storage .
6681	Get is used to get a single session
6682	List returns a list of all stored sessions .
6683	Exists checks if the access token exists .
6684	Abandon marks the provisioned storage as failed .
6685	SetValue sets the value for a given access token .
6686	Delete deletes a storage .
6687	Setup initializes the storage .
6688	TearDown tears down the storage .
6689	initJaeger initializes the logger
6690	Usage prints the usage
6691	Build creates a double array from keywords .
6692	Read reads a double array from the given io . Reader .
6693	Get returns the node with the given key .
6694	ExternalNodes returns a list of all external nodes .
6695	GetOther returns a node from cluster
6696	GoString returns string representation of the cluster
6697	Scan implements the sql . Scanner interface .
6698	Value implements the driver . Valuer interface .
6699	Has returns true if the key exists in the Bag .
6700	WriteTo implements io . WriterTo interface . It serializes the index table into the wire format .
6701	ReadIndexTable reads an IndexTable from r .
6702	New creates a new action bar .
6703	RegisterAction register action
6704	Actions create a new ActionBar
6705	Render renders the action bar
6706	FuncMap render function button
6707	EditMode returns true if the action is an edit mode
6708	SwitchMode switch mode
6709	InlineEdit renders the inline edit action .
6710	Error returns the string representation of the error .
6711	ParseFile returns a list of all machines in the given filename .
6712	FindMachine finds a machine by name .
6713	New creates a new trie from an initialisms map
6714	Camel returns a copy of the given string
6715	Pascal returns the Pascal case of the given string
6716	Snake returns the snake case of a given string
6717	SnakeUpper is a lowercase version of snake_upper
6718	Kebab creates a kebab from a given string
6719	KebabUpper is similar to KebabUpper except that it returns empty string .
6720	isPathSafe checks if the string contains a whitelist
6721	Start sets the request s method to be called .
6722	ParseAuthHeaders parses auth headers from request .
6723	Tracer adds a new tracer to the client .
6724	HTTPClient overrides the default http . Client .
6725	BasicAuth sets basic auth on the client
6726	BearerAuth sets the Authorization header on the client
6727	CookieJar adds a cookie jar to the client .
6728	SanitizerEnabled sets whether sanitizer is enabled or not .
6729	OpenFile opens a file .
6730	RoundTrip executes fn and returns a response .
6731	SetAuthHeader sets authentication header
6732	FileName returns the file name
6733	newBuffersFromFiles creates a new slice of buffers from a set of files .
6734	newFileBuffer returns a new fileBuffer
6735	rewind rewind the file .
6736	ConvertResponse takes an error and converts it to a TraceResponse
6737	Set implements the flag . Value interface .
6738	WriteAnswer is part of the Option interface .
6739	String returns a string representation of the option .
6740	TriggerIncidentKey triggers an incident key
6741	TriggerWithDetails will trigger an incidentKey with the given details .
6742	TriggerIncidentKeyWithDetails triggers an incident key with the specified details .
6743	Merge merges values from src into dst .
6744	setSource sets source to value .
6745	convertString converts a string value into an integer type .
6746	Do executes f in a transaction .
6747	NewFile creates a new file writer
6748	internalRun is used to run the benchmark
6749	String returns a string representation of the Row
6750	Tabulate method for TabularResults
6751	AmazonRequest performs the Amazon request .
6752	WriteTabularData write tabular data to writer
6753	Reduce returns a list of buckets from the interval
6754	NewSemaphore creates a new Semaphore .
6755	Release releases the semaphore .
6756	Resize resizes the semaphore to the specified capacity .
6757	AddOutput adds a new output container
6758	RunBenchmarks is part of the benchmark . Request interface .
6759	parseBool parses a boolean value .
6760	checkInteger returns an error if the integer is invalid .
6761	parseInt64 parses an integer value .
6762	parseInt32 parses a 64 - bit integer .
6763	parseBigInt parse big . Int
6764	parseBitString parses a BitString from a byte slice .
6765	parseObjectIdentifier parses an object identifier .
6766	Parse base128 integer
6767	parseGeneralizedTime parses the serialized time .
6768	parsePrintableString parses a printable string
6769	check if b is a printable type
6770	parseSequenceOf parses a sequence of bytes .
6771	invalidLength checks whether the given offset is valid
6772	setDefaultValue sets default value .
6773	UnmarshalWithParams parses a byte slice into a byte slice .
6774	parseFieldParameters parses a string into a fieldParameters
6775	getUniversalType returns the universal type of the given type .
6776	DecodeString decodes a base32 string .
6777	MailNotifier returns the MailNotifier from the database
6778	SaveMailNotifier implements the Notifier interface
6779	RegisterProvider registers a provider .
6780	InitDb initializes the MongoDB table .
6781	Until loops until stopCh is closed .
6782	logPanic is the same as logPanic but with panic information
6783	User gets a user by username
6784	Users returns the users that match the given filter .
6785	SaveUser stores a user in MongoDB
6786	DeleteUser deletes a user from MongoDB
6787	LoadCACertFile loads a CertPool from a file .
6788	NewAuth returns a new Auth instance
6789	ValidateRequest validates the request
6790	Process validates the request .
6791	ValidateCN validates the CNs for the given certificate .
6792	ValidateOU validates the given certificate .
6793	KeyLen returns the length of the key in x .
6794	DefaultConfig returns the default configuration .
6795	New returns a new certSigner
6796	New creates a new VaultFactory
6797	DefaultServiceConfig returns a ServiceConfig with default values .
6798	NewService creates a new Vault Service .
6799	Delete is used to remove a cluster
6800	IsNoVaultHandlerDefined checks if the given error is a no - handler for the given error .
6801	New returns a new Vault Service .
6802	Create creates a Pki mountpoint
6803	CreateJob is used to create a job
6804	Run the config .
6805	newWatcher creates a new watcher
6806	Start starts the Watcher .
6807	Stop stops the Watcher .
6808	Active returns true if watcher is active .
6809	Add adds paths to a file
6810	watch is the main entry point for watching .
6811	Watching returns a list of paths that are watching .
6812	State returns all registered notifications .
6813	Store stores an error in the request context .
6814	Get retrieves the error from the request context .
6815	Catch wraps an error in the middleware chain .
6816	Try is a wrapper around http . Handler .
6817	Recover is a middleware that recovers panics and returns a middleware that recovers from panics .
6818	This is the main entry point .
6819	SyncHandler returns an http . Handler that synchronizes gostruct .
6820	connect connects to the server .
6821	send sends an update .
6822	NumConnections returns the number of active connections .
6823	Push pushes the state to the queue
6824	gopush pushes the state to the queue
6825	NewOutForward creates a new OutForward
6826	Run the tail file
6827	New creates a new connection .
6828	Close closes the connection .
6829	IsReconnecting returns true if the connection is reconnecting
6830	connect is used to connect to the server
6831	New Notification creates a new GNotifier .
6832	NullNotification creates a new NullNotifier .
6833	New creates a new identity
6834	Issue creates a new identity
6835	Subject sets the NATS subject
6836	PrivateKey returns an Option that sets the private key
6837	NotBefore sets the time before the client is not started .
6838	NotAfter is an Option to set the time . NotAfter value .
6839	IssuingCertificateURL specifies the issuing certificate URL .
6840	OCSPServer returns an Option that sets the OSCSP server option .
6841	New creates a new Telegram bot API .
6842	NewWithWebhook creates a new Telegram bot API client .
6843	Close closes the bot API .
6844	GetMe returns information about the current user .
6845	RunBot runs the bot .
6846	RunBotOnWebhook runs bot on webhook .
6847	NewOutgoingMessage constructs a new OutgoingMessage
6848	NewOutgoingLocation creates a new outgoing location .
6849	NewOutgoingVenue creates a new OutgoingVenue
6850	NewOutgoingVideo creates a new OutgoingVideo
6851	NewOutgoingVideoResend creates a new OutgoingVideo
6852	NewOutgoingPhoto creates an OutgoingPhoto
6853	NewOutgoingPhotoResend creates a new OutgoingPhoto
6854	NewOutgoingSticker creates a new OutgoingSticker
6855	NewOutgoingStickerResend creates a new OutgoingSticker
6856	NewOutgoingVoice creates a new OutgoingVoice
6857	NewOutgoingVoiceResend creates a new OutgoingVoice
6858	NewOutgoingAudio creates a new OutgoingAudio
6859	NewOutgoingAudioResend creates a new OutgoingAudio
6860	NewOutgoingDocument creates a new outgoingDocument
6861	NewOutgoingDocumentResend creates a new outgoingDocument with the given recipient .
6862	NewOutgoingForward creates a new outgoingForward .
6863	NewOutgoingChatAction creates a new chat action for a recipient .
6864	NewOutgoingUserProfilePhotosRequest creates a new OutgoingUserProfilePhotosRequest .
6865	NewOutgoingKickChatMember creates a new OutgoingKickChatMember
6866	NewOutgoingUnbanChatMember creates a new OutgoingUnbanChatMember
6867	NewOutgoingCallbackQueryResponse creates a new OutgoingCallbackQueryResponse
6868	NewInlineQueryAnswer creates a new inline query .
6869	Type returns the type of message .
6870	Type returns the type of the update .
6871	MarshalJSON implements json . Marshaler
6872	querystring returns a querystring for the outgoingWebhook .
6873	getBaseQueryString returns the base query string
6874	getBaseQueryString returns the base query string
6875	querystring returns the query string
6876	querystring returns querystring
6877	querystring returns the query string
6878	querystring returns the query string
6879	querystring returns query string
6880	NewInlineQueryResultArticle creates a new inline query article .
6881	NewInlineQueryResultPhoto creates a new inline query photo .
6882	NewInlineQueryResultGif creates a new inline query GIF .
6883	NewInlineQueryResultMpeg4Gif creates a new inline query .
6884	NewInlineQueryResultVideo creates a new inline query video .
6885	Send retrieves the currently active user profile photos .
6886	Send sends the chat action .
6887	Send the inline query
6888	Send a message to the current member .
6889	Send unban chat member .
6890	Send sends the response .
6891	NewAPIClient creates a new APIClient .
6892	BeforeInsert updates timestamp
6893	ColumnName returns column name .
6894	New creates a new DB .
6895	From creates a From from a struct
6896	Where returns condition .
6897	OrderBy statement with given table .
6898	Limit returns a condition that limits the number of records .
6899	Offset returns condition .
6900	Join join condition .
6901	Count creates a new column with the specified arguments .
6902	Update updates the object .
6903	Delete deletes the object .
6904	Begin starts a transaction .
6905	Commit implements the DB . Commit interface .
6906	Quote quotes the given string .
6907	SetLogOutput sets the logger output .
6908	selectToSlice is used to select a slice of structs
6909	selectToValue chooses a single row from a slice of structs
6910	fieldIndexByName finds the index of the field with the given name and index .
6911	columns returns a string representation of the table name .
6912	tagsFromField returns the tags from the field .
6913	hasSkipTag returns true if the field has a skip tag .
6914	hasPKTag checks if the field has a PK tag
6915	isAutoIncrementable returns true if the field is autoIncrementable .
6916	collectFieldIndexes returns the indexes for the given struct field .
6917	findPKIndex finds the index of the given field .
6918	sizeFromTag retrieves the size of a field .
6919	columnFromTag gets column name from field .
6920	defaultFromTag gets the default value from the tag field .
6921	Where adds a condition to the condition .
6922	And adds AND condition .
6923	Or adds a condition to the condition .
6924	Like specifies a LIKE condition .
6925	Between creates a new condition .
6926	OrderBy adds an ORDER BY clause .
6927	Limit adds a LIMIT clause .
6928	Offset adds an OFFSET clause .
6929	SetFormat sets genmai
6930	Print implements templateLogger . Print .
6931	Print implements NullLogger .
6932	Quote implements the sql . Dialect interface .
6933	SQLType gets the type of the given value .
6934	New archive
6935	Disconnect disconnects from the host .
6936	nextNetworkAdapterID returns the next network adapter ID in the given map .
6937	totalNetworkAdapters returns the number of network adapters in the given map .
6938	RemoveAllNetworkAdapters removes all network adapters from the VM .
6939	RemoveNetworkAdapter removes a network adapter
6940	NetworkAdapters returns all network adapters associated with this VM .
6941	newArchive returns a new archive for the given path and password .
6942	GetFileReader returns a reader for the named file .
6943	ExtractToWriter extracts the archive to the given writer .
6944	ExtractToFile extracts a file from an archive
6945	SharedFoldersParentDir returns the path to the shared Folders parent of the SharedFolders .
6946	Name returns the name of the snapshot .
6947	Description returns description of the snapshot .
6948	cleanupSnapshot clears the snapshot .
6949	BusTypeFromID returns a bus type from the given ID .
6950	Read reads the VMX file from disk .
6951	Write writes the VMX file to disk .
6952	NewVirtualMachine creates a new virtual machine .
6953	Vcpus returns the vcpus of the VM .
6954	VmxPath returns the path to the VM .
6955	Returns the memory size of the VM .
6956	ReadOnly returns true if VM s readonly mode is enabled .
6957	InVMTeam returns whether the VM is in the team .
6958	PowerState returns the power state of the VM .
6959	ToolsState returns the tools state of the VM .
6960	IsRunning returns true if the VM is running .
6961	GuestOS returns the guest OS .
6962	cleanupVM deletes a VM .
6963	updateVMX updates the given VM .
6964	SetMemorySize sets the memory size of the VM .
6965	SetNumberVcpus sets the number of virtual machines to 1
6966	SetDisplayName sets the display name of the virtual machine
6967	SetAnnotation sets the annotation on the VM .
6968	SetVirtualHwVersion sets the virtual machine hw version
6969	Error implements the error interface for Error .
6970	Errorf wraps fmt . Errorf
6971	Error implements the error interface for traceableError .
6972	string returns the stack frame as a string .
6973	newStackFrame creates a stack frame from pc .
6974	captureStack returns a slice of frames that capture the current stack .
6975	parse functionName returns package path and signature
6976	Stack prints an error to the stack
6977	StackWithCaller is a wrapper around stacktrace
6978	Write implements the ResponseWriter interface .
6979	ResponseStatus returns the status of the response
6980	httpResponseStruct converts the given value to a struct
6981	SetDetectedContentType sets the content type of the request .
6982	New creates a new ServerError
6983	New creates a new DBError
6984	New creates a new validation error
6985	New creates a new NotFoundError
6986	StrLength validates the string length .
6987	StrLenIn returns string length of string
6988	StrIn returns string with given value .
6989	GetEmail gets an email from the Controller
6990	MostSpecificType returns the most specific type from a slice of strings
6991	FullTypeHierarchy returns a list of the highest tier types for a given highest level type .
6992	SortTypes sorts a slice of types .
6993	Delete removes the value for the given key .
6994	Set sets a new RedisStore
6995	refresh refreshes redis from redis .
6996	Get returns a redis session by sid .
6997	Destroy removes the redis client from the redis pool .
6998	UpExpire will expire the redis .
6999	Use adds a HandlersHandler to the stack .
7000	ServeHTTP satisfies the Handler interface .
7001	Use adds middleware to router group
7002	Group creates a new router group
7003	Run runs the server .
7004	create creates a new engine .
7005	Redirect sends a redirect response with status code .
7006	Ok writes data to http request
7007	Fail the context
7008	ResStatus returns the response status code .
7009	Next adds handlers to the stack .
7010	GetSession get session from context
7011	GetBodyJSON returns the request body as JSON
7012	SetSession sets a session
7013	FreshSession gets expired session .
7014	DeleteSession deletes the session from the context .
7015	Write writes the response .
7016	WriteHeader implements the http . ResponseWriter interface .
7017	New creates a new DHCP client .
7018	setAllowLargeResults is used to set allow large results .
7019	connect connects to the BIGQuery service .
7020	InsertRow inserts a row into the project .
7021	AsyncQuery sends an async query .
7022	Query returns a slice of query results .
7023	stdPagedQuery executes a bigquery query .
7024	largeDataPagedQuery is used to query bigQuery for bigQuery .
7025	pagedQuery issues a PagedQuery request .
7026	pageOverJob fetches the result of a page .
7027	Count returns the number of rows matching the given dataset .
7028	work fetches and caches the result .
7029	subworker runs the subworker function .
7030	worker is used to trigger a worker
7031	supervisor moves the supervisor to the next pipe .
7032	Run starts the pool
7033	Add adds a new job to the pool .
7034	Wait blocks until the pool is full .
7035	Results returns a slice of Job objects .
7036	WaitForJob waits for the job to finish .
7037	Status returns the current stats of the pool .
7038	WrapHTTPHandlerFunc wraps an http . HandlerFunc into a HandlerFunc .
7039	WebSocketHandlerFunc returns a HandlerFunc
7040	StaticFile creates a static file
7041	PreloadFile is used to preload a file
7042	Initialize html templates
7043	InitTextTemplates initializes text templates .
7044	Html creates an instance of html template
7045	Text creates a new text template
7046	InitWatcher initializes a new watcher for the given pattern .
7047	CloseWatcher closes the watcher
7048	Find returns a url . Values for the given path .
7049	Add registers a new router .
7050	NewRouters returns a new Routers instance
7051	NewServerMux returns a new ServerMux .
7052	err sets error handle
7053	HandleFunc registers a HandlerFunc for the given HandlerFunc .
7054	handleError handles an error .
7055	Redirect sends a response with status code and status code .
7056	InitPProf initializes pprof routes
7057	StartSession starts a new session .
7058	returns a channel from list of ints
7059	Return a channel that repeats every item in the list .
7060	permutations iterates over the list and creates a new slice of elements .
7061	repeated permutations on the list
7062	gformat converts a format string into a format string .
7063	Errorm is a convenience function for creating an error message .
7064	Fprintm is similar to fmt . Fprint but also writes to w .
7065	Printm is a convenience wrapper for fmt . Printf .
7066	Sprintf is similar to fmt . Sprintf but uses fmt . Sprintf .
7067	Validate a password strength requirements
7068	MakeRequirements makes a password strength requirements from a password .
7069	sanityCheck validates the requirements
7070	password takes a password strength requirements and returns a string .
7071	NewPassword generates a new password .
7072	NewPasswords builds a list of passwords from a password requirements
7073	addNums adds numDigits to p
7074	punctuate returns a random punctuation
7075	Restore the deprecated_init file .
7076	Param adds a param to the ParamSet
7077	Parse parses param set
7078	Unmarshal parses a ParamSet into a ParamSet .
7079	GetDefaultHTTPClient returns a default http client .
7080	Get device info
7081	DevicePresence returns information about the given device .
7082	NotificationStatus retrieves the status of a notification .
7083	DeleteNotification deletes a notification .
7084	NotifyDevice sends a notification request to the push service .
7085	Assert asserts the tester .
7086	CreateFile creates a file .
7087	AddError adds an error to FormErrors .
7088	AddFieldError adds a field to the form errors .
7089	HasErrors returns true iff the FormErrors field is set .
7090	NewError creates a new FormErrors
7091	NewFieldError returns a new FormErrors for the given field .
7092	Helper function for ChainHandlers
7093	FinalHandler returns a middleware that wraps the given handler .
7094	Hash returns the MD5 hash of the reader
7095	IsHash returns true if h is a hash
7096	WithBaseDir sets the base directory of the named directory .
7097	WithFileFindFunc returns an Option that sets the filename function used to find the file .
7098	WithTemplateFromFiles sets the name of the template to use .
7099	WithTemplatesFromFiles returns an option that adds templates to the options .
7100	WithTemplateFromStrings sets the name of the template to be used
7101	WithTemplatesFromStrings returns an Option that adds a map of strings to the options .
7102	WithFunction adds a function to the options .
7103	WithFunctions adds custom functions to options .
7104	WithDelims sets the delimited list of open options .
7105	New creates a new set of templates
7106	RespondWithStatus sends a response with status code .
7107	RespondTemplate sends a response with the given template name and data .
7108	Respond sends a response with status code 200 .
7109	RenderTemplate renders the given template using the specified template .
7110	New creates a new h2quic server .
7111	ServeUDP serves the given UDP connection .
7112	Shutdown the server
7113	QuicHeadersHandler adds headers to the request .
7114	GetRequestIPs returns the IP address of the request
7115	DomainRedirectHandler adds a redirect handler to an http . Handler
7116	New returns a new Server instance .
7117	Add adds a new server .
7118	TCPAddr returns a net . TCPAddr for the given server name .
7119	UDPAddr returns the UDP address of the server
7120	Close closes all servers
7121	Shutdown gracefully shuts down all servers
7122	Accept implements net . Listener
7123	NewStaticFilesHandler returns a handler to serve static files
7124	ServeHTTP implements authenticator . Handler
7125	MarshalJSON marshals Options to JSON .
7126	UnmarshalJSON implements the json . Unmarshaler interface for Options .
7127	MarshalYAML marshals options to JSON .
7128	UnmarshalYAML implements the json . Unmarshaler interface for Options .
7129	NewHandler returns a new http . Handler with a log message .
7130	WithPanicResponse sets a custom panic response
7131	WithPanicResponseHandler overrides the default panic response handler
7132	New creates a new Handler .
7133	ServeHTTP dispatches to the http . Handler .
7134	NewContextFunc creates a context function from the given map .
7135	NewMapErrorRegistry creates a new MapErrorRegistry .
7136	AddError adds an error to the map error registry .
7137	AddMessageError adds an error to the map error registry .
7138	MustAddError is like AddError but panics if an error occurs .
7139	MustAddMessageError is like AddMessageError but panics if an error occurs .
7140	AddHandler adds a handler to the map error chain .
7141	MustAddHandler is like AddHandler but panics if an error occurs .
7142	Handler returns an error handler for the given code .
7143	New returns a new instance of Client .
7144	Request performs a request with the given parameters .
7145	JSONContext performs a request with a context
7146	StreamContext performs a streaming RPC on the given context .
7147	Stream creates a new data stream .
7148	JSONUnmarshal parses the data into the value pointed to by v .
7149	ServeTCP is used to serve a TCP listener
7150	ServeTCP is used to serve a TCP listener
7151	Shutdown gracefully shuts down the server
7152	HandleMethods is an HTTP handler for methods
7153	NewSetHeadersHandler adds a set of headers to the http . Handler
7154	New creates a new server
7155	HashedPath returns the path to the root directory
7156	New creates a new service .
7157	HTMLHandler returns an http . Handler that serves HTML requests
7158	Status checks if the store has status .
7159	StatusHandler returns the status of the store
7160	OnHandler handles service events .
7161	OffHandler implements Service .
7162	MarshalJSON method of PostIRCMessageRequest
7163	MarshalJSON method of PostArtifactRequest
7164	MarshalJSON method of PostArtifactResponse
7165	MarshalJSON method of HookChangedMessage
7166	MarshalJSON method of TriggerHookRequest
7167	MarshalJSON method of TriggerHookResponse
7168	UnmarshalJSON implements the json . Unmarshaler interface for TriggerHookResponse .
7169	MarshalJSON returns a JSON representation of the launch info
7170	MarshalJSON implements json . Marshaler
7171	MarshalJSON implements json . Marshaler .
7172	MarshalJSON implements the json . Marshaler interface .
7173	MarshalJSON implements the json . Marshaler interface .
7174	UnmarshalJSON implements the json . Unmarshaler interface .
7175	Write implements io . Writer
7176	Seek implements io . Seeker . Seek .
7177	Read implements io . Reader interface .
7178	MarshalJSON method of LaunchSpecsResponse
7179	MarshalJSON method of RegionLaunchSpec
7180	GenerateCode generates code for API definition .
7181	Post the API definition
7182	CreateTemporaryCredentials calls perma . CreateTemporaryCredentials
7183	setURL creates a BaseURL from a route .
7184	SignRequest signs the request with the provided credentials .
7185	APICall makes a call summary
7186	SignedURL creates a signed URL for the specified route .
7187	MarshalJSON method of HawkSignatureAuthenticationResponse
7188	bmw256 returns the bmw256 of the input .
7189	Creates a new cube hash .
7190	cavehash256 computes the cubehash256 hash of data .
7191	Sum returns the keccak representation of data .
7192	pull out to out
7193	reducedSqueezeRow0 reduces the number of rows to lower than nCols .
7194	reducedDuplexRow1 reduces the number of rows to the first row in the row .
7195	NewReaderByteCodeLoader creates a new ReaderByteCodeLoader .
7196	ReadReader loads a byte code from the reader
7197	NewV3 returns a new UUID based on a namespace and name .
7198	txLiteral moves the state to the current position .
7199	txFetchSymbol fetches the symbol from the state .
7200	txMarkRaw is used to mark the state .
7201	txUnmarkRaw unmarks the raw state .
7202	txPrint is used to print an entire state .
7203	txPrintRaw is used to print out the state .
7204	NewLoopVar creates a new LoopVar
7205	txMakeArray creates a new array of values .
7206	txFunCallOmni adds a function call to the state .
7207	DumpAST marks the flag as DumpAST .
7208	DumpByteCode sets b to MaskDumpByteCode if set .
7209	Optimize implements NaiveOptimizer
7210	NewFuncDepot creates a new funcDepot
7211	Get implements the funcDepot interface
7212	Set sets the value for the given key .
7213	NewFileTemplateFetcher creates a new FileTemplateFetcher .
7214	LastModified returns the time of the last file was modified .
7215	Reader returns an io . Reader
7216	Bytes reads from source
7217	NewState creates a new State .
7218	PushFrame creates and returns a new frame .
7219	PopFrame pops a frame from the stack .
7220	CurrentFrame returns the current frame .
7221	Warnf records a warning .
7222	AppendOutputString appends a string to the output .
7223	Popmark removes the markstack and returns the index .
7224	CurrentMark returns the current mark stack .
7225	LoadByteCode loads a ByteCode from disk .
7226	Reset resets state to its initial state .
7227	DeclareVar adds a variable to the stack .
7228	GetLvar returns the value at index i .
7229	SetLvar sets a variable in the stack .
7230	NewByteCode creates a new ByteCode
7231	Append append operation
7232	AppendOp returns a new op for the ByteCode .
7233	String returns a string representation of the bytecode
7234	NewCachedByteCodeLoader creates a new CachedByteCodeLoader
7235	Load loads a byte code from the cache
7236	NewFileCache returns a new FileCache
7237	GetCachePath returns the full path for the given key .
7238	Get retrieves an entity from the cache .
7239	Set adds an entity to the cache .
7240	Delete removes the file from the cache
7241	Get returns cache entity by given key
7242	Set implements the Cache interface .
7243	Delete removes the entry from the cache .
7244	NewStringLexer creates a new Lexer from a string .
7245	NewReaderLexer creates a new lexer from an io . Reader .
7246	NewV4 generates a new UUID .
7247	Parse is a wrapper around Kolonish
7248	ParseReader is a wrapper around KolonishReader
7249	Visit returns a channel of nodes in the AST .
7250	String returns a string representation of AST .
7251	Run executes the given bytecode .
7252	DefaultParser is the default parser for the Xslate
7253	DefaultLoader is the default loader for Xslate .
7254	DefaultVM is the default implementation of the Loader interface .
7255	Get returns the value for the given key .
7256	NewHTTPSource creates a new HTTPSource from an http . Response .
7257	NewStringByteCodeLoader creates a new StringByteCodeLoader .
7258	LoadString loads a string from the given template .
7259	Get returns the value associated with the given key .
7260	NewOp creates a new Op
7261	MarshalBinary converts op to binary representation
7262	UnmarshalBinary implements op . BinaryUnmarshaler
7263	ArgInt implements op .
7264	ArgString returns string representation of op .
7265	AppendOp appends an operation to the given buffer .
7266	Compile compiles the given AST into a byte code .
7267	NewV5 returns a new UUID for the given namespace UUID .
7268	Sort sorts a list of LexSymbolList
7269	Less reports whether the element with index i should sort before the element with index j .
7270	Swap swaps two items .
7271	Copy returns a copy of this LexSymbolSet .
7272	Set sets a value in the LexSet
7273	GetSortedList returns the SortedList
7274	Top implements the Stack interface .
7275	Resize resizes the stack to the given size .
7276	Extend adds the stack to the stack .
7277	Grow grows the stack to the specified minimum size .
7278	Get returns the element at index i .
7279	Set sets the value at index i .
7280	Push implements the Stack interface .
7281	Pop implements the Stack interface .
7282	String returns a string representation of the stack
7283	GetHostIPs returns the host IPs
7284	GetPrivateHostIPs returns the list of private IPs
7285	IsPrivate checks if an IP is a private key
7286	Environ returns a slice of all the available environment variables .
7287	getenv returns the value of the named environment variable .
7288	flagAsEnv returns the flag as a string
7289	NewPolicy creates a new Policy with default values .
7290	CreateRandom returns a random byte slice of the given length .
7291	Shuffle randomizes random bytes
7292	Generate returns a random string of the given policy .
7293	ExecutableFolder returns the executable folder .
7294	Ignore adds one or more Sentinel errors to the list .
7295	Sigs sets the Sentinel sigs .
7296	Logf is an option to set the logf function used .
7297	Errorf is an option to set the error function .
7298	New returns a new Sentinel instance .
7299	Run starts the sentinel server .
7300	Shutdown shuts down all sentinel servers .
7301	ShutdownIgnore returns true if the given error should be ignored .
7302	Register implements Sentinel .
7303	Mux returns a listener that listens on the given listener .
7304	HTTP starts the sentinel server .
7305	IgnoreError returns a function that returns an ignore error .
7306	IgnoreNetOpError reports whether the given error should be ignored .
7307	convertAndAppendContextFuncs takes a list of func functions and converts them into a slice of func .
7308	router returns a mux . Router .
7309	buildInfoHandler is the default build - info handler .
7310	Encode marshals the given interface to JSON
7311	Json parses the given JSONStruct into a martini Handler .
7312	validateAndMap ensures that the given value is a map of errors .
7313	Count returns the total number of errors
7314	Header returns a map of header values for origin .
7315	PreflightHeader returns the preflight header for the origin .
7316	IsOriginAllowed returns true if the origin matches the regular expression pattern .
7317	Allow returns an http . HandlerFunc that sets the request headers .
7318	Rendererer returns a handler that renders the given options .
7319	String returns a string representation of all accepted languages .
7320	Languages returns a martini . Handler that accepts multiple languages .
7321	Prefix is a middleware that checks the given prefix .
7322	Basic returns an http . HandlerFunc that sets basic auth .
7323	UpdateUser updates the user
7324	Get a user by id
7325	AddressToAccountId converts an account ID to an account id .
7326	MutateChangeTrust modifies the change trust operation
7327	MutateChangeTrust mutates the given change trust operation .
7328	Trust creates a ChangeTrustBuilder for the given code
7329	RemoveTrust removes a trust from the given code
7330	MutatePayment modifies the credit amount .
7331	MutatePayment modifies the destination of the destination .
7332	MutatePayment modifies the value of a NativeAmount
7333	MutatePayment modifies the path with the given address .
7334	MutateAccountMerge modifies the account merge of the Destination
7335	MustParse is like Parse but panics on error .
7336	Parse parses an integer value .
7337	String returns a string representation of xdr .
7338	CreateOffer creates a new ManagerOffer
7339	CreatePassiveOffer creates a new ManageOffer
7340	UpdateOffer creates a new ManageOfferBuilder for an offer .
7341	DeleteOffer deletes the specified offer .
7342	ManageOffer is a functional option for ManageOffer .
7343	Mutate mocks the mutator
7344	MutateManageOffer modifies the amount of an offer .
7345	MutateManageOffer modifies the specified offer .
7346	MutateManageOffer modifies the rate of an offer
7347	MutateOperation mocks base method
7348	String returns the price as a string .
7349	Transaction creates a new TransactionBuilder
7350	Mutate applies the given transaction mutators to the builder .
7351	Hash returns a 32 - byte representation of the transaction
7352	HashHex returns the hash of the transaction
7353	Sign applies the given signer to the transaction .
7354	MutateTransaction mutates a transaction
7355	MutateTransaction is part of the TransactionBuilder interface .
7356	MutateTransaction creates a new transaction
7357	MutateTransaction modifies the default values for a transaction
7358	MutateTransaction adds a transaction to an InflationBuilder .
7359	MutateTransaction is part of the ManageDataBuilder interface .
7360	MutateTransaction is part of the TransactionBuilder interface .
7361	MutateTransaction implements the transactionBuilder interface .
7362	MutateTransaction overrides the TransactionBuilder interface .
7363	MutateTransaction creates a new memo .
7364	MutateTransaction modifies the MemoText
7365	MutateTransaction is defined on the NetworkBuilder interface .
7366	MutateTransaction mutates a TransactionBuilder .
7367	MutateTransaction implements the SetOptionsBuilder interface .
7368	MutateTransaction overrides the TransactionBuilder interface .
7369	MutateTransaction implements the TransactionBuilder interface .
7370	Scan implements the sql . Scanner interface .
7371	InitialState is part of the Bundle interface .
7372	Changes returns the LedgerEntryChange for the given target key .
7373	StateAfter returns the LedgerEntry for the given key .
7374	changes returns the LedgerEntryChange for the given target .
7375	MustDecode is like Decode but panics if an error occurs .
7376	Encode encodes a version byte into a base32 encoded string .
7377	MustEncode acts like Encode but panics if the version is invalid .
7378	checkValidVersionByte returns an error if the versionByte is not valid .
7379	Checksum returns the checksum of the given data .
7380	Validate checks the checksum of the given checksum
7381	LedgerKey returns the LedgerKey for the change .
7382	checkPlausible checks if the given prefix is in the base32 alphabet
7383	Address is an alias for AccountId .
7384	Equals tests equality against another AccountId .
7385	SetAddress sets the address of an account .
7386	ToXdrObject converts an asset to an xdr asset .
7387	Through adds a path to the path
7388	PayWith creates a new send asset with the specified path .
7389	ContinoredFraction takes a price string and returns a xdr . Price object .
7390	Mutate calls the mutate method of the TransactionEnvelopeBuilder .
7391	MutateTX implements the Mutator interface .
7392	Bytes returns the envelope representation of the transaction envelope
7393	Base64 base64
7394	MutateTransactionEnvelope modifies a TransactionEnvelope
7395	MutateSetOptions sets the Options field of the Options struct .
7396	MutateSetOptions atomically sets the OptionsOp
7397	MutateSetOptions sets the value of xdr . SetOptionsOp .
7398	MutateSetOptions modifies set options operation
7399	SetThresholds sets the threshold
7400	MutateSetOptions modifies the set options operation .
7401	MutateSetOptions mocks the value of SetOptionsOp
7402	MutateSetOptions mutates a SetOptionsOp
7403	MutateCreateAccount sets the CreateAccountOp for this Destination .
7404	MutateCreateAccount modifies the address of the created account .
7405	Random returns a random full .
7406	Master returns the kep for the given network passphrase .
7407	Parse parses the given address using the given address or version .
7408	MustParse is like Parse but panics on error .
7409	MutateAllowTrust sets the allow trust operation
7410	MutateAllowTrust modifies the account asset asset
7411	MutateAllowTrust Mutates an AllowTrustOp
7412	ToAsset converts AllowTrustOpAsset to Asset .
7413	SetNative sets the Asset type Asset
7414	String returns a string representation of an Asset .
7415	Equals tests equality against another asset
7416	MustExtract finds and panics on error
7417	Unmarshal parses the xdr . Reader and stores the result in the value pointed to by v .
7418	Marshal marshals v to xdr .
7419	ValidEnum returns whether the crypto key type is valid .
7420	NewPublicKey creates a new public key from the given type and value .
7421	MustEd25519 returns the Ed25519 value of this public key .
7422	NewNodeId creates a new public key from a crypto key type
7423	NewAccountId generates a new AccountId from a crypto key type
7424	ValidEnum returns whether the asset type is valid .
7425	ArmForSwitch returns the asset type for this asset .
7426	NewAsset creates a new asset from an asset value .
7427	MustAlphaNum4 returns AssetAlphaNum4 or panic if Asset is not set .
7428	GetAlphaNum4 returns the asset s alphaNum4 type .
7429	MustAlphaNum12 returns the asset alphaNum12 if it is set .
7430	GetAlphaNum12 returns the asset s alphaNum12 type .
7431	ValidEnum returns true if the threshold indexes are valid .
7432	ValidEnum returns true if the LedgerEntryType is valid
7433	ValidEnum checks if the account flags are valid .
7434	NewAccountEntryExt returns a new AccountEntryExt instance
7435	ValidEnum checks if the trust line flags are valid
7436	NewTrustLineEntryExt creates a new TrustLineEntryExt instance
7437	ValidEnum returns true if the offer entries are valid .
7438	NewOfferEntryExt creates a new OfferEntryExt instance .
7439	NewDataEntryExt - creates new data entry extension .
7440	NewLedgerEntryData creates a new LedgerEntryData
7441	NewLedgerEntryExt creates a new LedgerEntryExt instance
7442	ValidEnum returns whether the envelope type is valid .
7443	ValidEnum returns whether the operation type is valid .
7444	ArmForSwitch implements AllowTrustOpAsset .
7445	NewAllowTrustOpAsset creates a new instance of AllowTrustOpAsset .
7446	MustAssetCode4 returns the code4 of an AllowTrustOpAsset
7447	GetAssetCode4 returns the code4 of an AllowTrustOpAsset
7448	MustAssetCode12 returns the asset code12 if allowed .
7449	GetAssetCode12 returns the asset code12
7450	NewOperationBody creates a new operation body .
7451	MustCreateAccountOp returns the operation for creating a CreateAccountOp if needed .
7452	Retrieve CreateAccountOp
7453	MustPaymentOp returns the payment op if any .
7454	GetPaymentOp returns the payment operation for this unit .
7455	MustPathPaymentOp returns the PathPaymentOp or panics if there is an error .
7456	GetPathPaymentOp returns the path payment operation .
7457	MustManageOfferOp returns the ManageOfferOp if any .
7458	GetManageOfferOp gets the ManageOfferOp for this operation .
7459	MustCreatePassiveOfferOp returns the CreatePassiveOfferOp or panic if the operation is not set .
7460	GetCreatePassiveOfferOp returns the createPassiveOfferOp for this operation .
7461	MustSetOptionsOp returns SetOptionsOp or panics on error
7462	GetSetOptionsOp returns the SetOptionsOp for this unit .
7463	MustChangeTrustOp returns the change trust operation for this operation .
7464	GetChangeTrustOp returns the ChangeTrustOp for the given Operation
7465	MustAllowTrustOp returns the AllowTrustOp field if any .
7466	GetAllowTrustOp gets the AllowTrustOp for this operation .
7467	MustDestination returns the AccountId if any .
7468	GetDestination gets the account id for this operation
7469	MustManageDataOp returns the ManageDataOp or panics on error .
7470	GetManageDataOp returns the ManageDataOp for this operation .
7471	ValidEnum returns true if the MemoType is valid .
7472	ArmForSwitch returns the arm for the given switch .
7473	NewMemo instantiates a new Memo instance .
7474	MustText returns charm text .
7475	Retrieve the text of the Memo .
7476	MustId returns the charm id if set .
7477	Returns the id of the Memo .
7478	MustHash returns the hash of the Memo .
7479	GetHash returns the hash of the Memo .
7480	MustRetHash is like GetRetHash but panics if Memo is not set .
7481	NewTransactionExt creates a new TransactionExt instance .
7482	ValidEnum returns whether the create account result code is valid .
7483	ArmForSwitch returns the arm for the specified account result .
7484	NewCreateAccountResult returns a new instance of CreateAccountResult
7485	ValidEnum returns whether the payment result code is valid .
7486	ArmForSwitch returns the arm for a PaymentResult .
7487	NewPaymentResult creates a new PaymentResult
7488	ValidEnum returns whether the path payment result code is valid .
7489	ArmForSwitch implements PathPaymentResult .
7490	NewPathPaymentResult creates a new PathPaymentResultCode
7491	MustNoIssuer returns the Asset value or panics if an error occurs .
7492	GetNoIssuer implements PathPaymentResult .
7493	ValidEnum checks if the value is a valid enum
7494	ValidEnum checks if the value is a valid enum
7495	ArmForSwitch returns the arm for an offering operation
7496	NewManageOfferSuccessResultOffer creates a new ManageOfferSuccessResultOffer
7497	ArmForSwitch returns the arm for a ManageOfferResult
7498	NewManageOfferResult creates a new ManageOfferResult instance
7499	ValidEnum returns whether the SetOptionsResultCode is valid .
7500	ArmForSwitch implements the Switch interface for SetOptionsResult .
7501	NewSetOptionsResult creates new SetOptionsResult instance
7502	ValidEnum returns whether the change trust result code is valid .
7503	ArmForSwitch returns the arm for a ChangeTrustResult
7504	NewChangeTrustResult creates a new ChangeTrustResult
7505	ValidEnum returns whether the allowed trust result code is valid .
7506	ArmForSwitch returns a string representing an AllowTrustResultCode
7507	NewAllowTrustResult creates a new AllowTrustResult instance
7508	ValidEnum returns whether the account merge result code is valid .
7509	ArmForSwitch returns the arm for switch results .
7510	NewAccountMergeResult creates a new AccountMergeResult instance
7511	MustSourceAccountBalance returns the value of SourceAccountBalance if required .
7512	GetSourceAccountBalance returns the balance of an AccountMergeResult .
7513	ValidEnum returns whether the int32 is valid or not .
7514	ArmForSwitch returns the arm name for an inflation result .
7515	NewInflationResult create new InflationResult instance
7516	MustPayouts returns an array of PaymentPayouts or panics .
7517	GetPayouts gets all payments from an inflation result .
7518	ValidEnum checks if the value is a valid enum
7519	ArmForSwitch implements ManageDataGetter .
7520	NewManageDataResult creates a new ManageDataResult
7521	ValidEnum returns whether the operation result code is valid .
7522	ArmForSwitch returns the arm for switch results .
7523	NewOperationResultTr creates a new operation result result .
7524	MustCreateAccountResult is like CreateAccountResult but panics if an error occurs .
7525	GetCreateAccountResult gets create account result result
7526	MustPaymentResult is like PaymentResult but panics if OperationResult is not set .
7527	GetPaymentResult returns the payment result .
7528	MustPathPaymentResult returns the PathPaymentResult from the result
7529	GetPathPaymentResult returns the path payment result .
7530	MustManageOfferResult gets ManageOfferResult from ManageResultTr or panics .
7531	GetManageOfferResult gets ManageOfferResult from OperationResultTr .
7532	MustCreatePassiveOfferResult is like CreatePassiveOfferResult but panics if the result is not set .
7533	MustSetOptionsResult is like SetOptionsResult but panics on error .
7534	GetSetOptionsResult gets set options result .
7535	MustChangeTrustResult gets ChangeTrustResult from OperationResultTr or panic
7536	GetChangeTrustResult returns ChangeTrustResult
7537	MustAllowTrustResult returns an AllowTrustResult result if it is not set .
7538	GetAllowTrustResult gets allowed trust result result .
7539	MustAccountMergeResult is like AccountMergeResult but panics if an AccountMergeResult is not set .
7540	GetAccountMergeResult gets the AccountMergeResult from OperationResultTr .
7541	MustInflationResult returns an InflationResult if it is not set .
7542	GetInflationResult gets the InflationResult .
7543	MustManageDataResult gets ManageDataResult from OperationResultTr or panics .
7544	GetManageDataResult gets ManageDataResult from OperationResultTr
7545	ArmForSwitch returns the arm for a given switch .
7546	NewOperationResult creates a new operation result .
7547	MustTr returns the value of OperationResultTr if set .
7548	GetTr returns the value of this operation result .
7549	ValidEnum returns whether the transaction result code is valid .
7550	ArmForSwitch returns the arm for a transaction result .
7551	NewTransactionResultResult returns a new TransactionResultResultResult
7552	MustResults returns the operation results or panics .
7553	GetResults gets the results for this transaction result .
7554	NewTransactionResultExt - creates new TransactionResultExt .
7555	NewStellarValueExt - creates a new StellarValueExt instance
7556	NewLedgerHeaderExt constructs a new LedgerHeaderExt value .
7557	ValidEnum returns whether the LedgerUpgradeType is valid
7558	ArmForSwitch returns an arm for a Ledger Upgrade
7559	NewLedgerUpgrade generates a new LedgerUpgradeType
7560	MustNewLedgerVersion returns the LedgerVersion or panics if the LedgerVersion is not set .
7561	GetNewLedgerVersion returns the LedgerVersion for the Ledger Upgrade
7562	MustNewBaseFee returns the value of NewBaseFee if required .
7563	GetNewBaseFee gets the new base fee
7564	MustNewMaxTxSetSize returns the value of NewMaxTxSetSize if required .
7565	GetNewMaxTxSetSize gets the new MaxTxSetSize
7566	ArmForSwitch returns an arm for a LedgerKey
7567	NewLedgerKey creates a new LedgerKey
7568	ValidEnum checks if an Enum is valid .
7569	ArmForSwitch returns the arm for a given key .
7570	NewBucketEntry creates a new BucketEntry
7571	MustLiveEntry returns the LedgerEntry or panics if an error occurs .
7572	Returns the LedgerEntry for the bucket .
7573	MustDeadEntry returns the LedgerKey or panics if an error occurs .
7574	GetDeadEntry returns the LedgerKey for this bucket entry .
7575	NewTransactionHistoryEntryExt returns a new TransactionHistoryEntryExt instance
7576	ArmForSwitch implements the Task interface for TransactionHistoryResultEntryExt .
7577	NewTransactionHistoryResultEntryExt creates a new TransactionHistoryResultEntryExt instance
7578	NewLedgerHeaderHistoryEntryExt returns a new LedgerHeaderHistoryEntryExt instance
7579	NewScpHistoryEntry creates a new ScpHistoryEntry .
7580	ValidEnum returns whether the LedgerEntryChangeType is valid
7581	ArmForSwitch returns an arm for a LedgerEntryChange
7582	NewLedgerEntryChange creates a new LedgerEntryChange
7583	MustCreated implements LedgerEntryChange interface
7584	GetCreated returns the LedgerEntryChange
7585	MustUpdated returns the LedgerEntryChange or panics if the LedgerEntryChange is not set .
7586	Retrieve LedgerEntryChange
7587	MustRemoved returns the LedgerKey that was removed from the LedgerEntryChange
7588	GetRemoved returns the LedgerEntryChange for this LedgerEntryChange
7589	MustState implements LedgerEntryChange interface .
7590	GetState implements LedgerEntryChange interface .
7591	NewTransactionMeta creates a new TransactionMeta instance .
7592	MustOperations returns all operations for this transaction .
7593	GetOperations gets the operations for this transaction .
7594	ValidEnum returns whether the error code is valid .
7595	ValidEnum returns true if the ip address type is valid
7596	ArmForSwitch returns a port for a peer address
7597	NewPeerAddressIp creates a new peer address
7598	MustIpv4 returns the IPv4 address of the peer
7599	GetIpv4 returns the IPv4 address of the peer
7600	MustIpv6 returns the peerAddressIp6 as a uint16
7601	GetIpv6 returns the ipv6 address
7602	ValidEnum returns whether the enum value is valid .
7603	ArmForSwitch returns an arm for a message type .
7604	NewStellarMessage create a new StellarMessage instance
7605	MustError returns the error or panics .
7606	GetError gets the error from StellarMessage
7607	MustHello returns the StellarMessage if any .
7608	GetHello gets the Hello from StellarMessage
7609	MustAuth returns the original Auth if set .
7610	Gets the auth type
7611	MustDontHave return value of StellarMessage
7612	GetDontHave gets the dontHave type
7613	MustPeers returns the peers set or panics on error
7614	Returns a list of peers
7615	MustTxSetHash returns the UintSetHash or panics .
7616	GetTxSetHash gets the txSetHash value
7617	MustTxSet returns the transaction set or panics if it is not set .
7618	GetTxSet gets the TransactionSet
7619	MustTransaction returns the transaction envelope or panics on error
7620	GetTransaction returns the envelope of a StellarMessage
7621	MustQSetHash returns stellar message . Uint256 if it is not set .
7622	GetQSetHash gets the qSetHash value
7623	MustQSet returns the ScpQuorumSet if set otherwise panics .
7624	GetQSet get QSet
7625	MustEnvelope returns the ScpEnvelope or panics if an error occurs .
7626	GetEnvelope returns the envelope of a StellarMessage
7627	MustGetScpLedgerSeq returns the value of GetScpLedgerSeq or panics if not set .
7628	GetGetGetScpLedgerSeq gets the current message signal sequence
7629	ArmForSwitch returns the armor for the given message .
7630	NewAuthenticatedMessage creates a new AuthenticatedMessage instance .
7631	ValidEnum returns true if the ScpStatementType is valid .
7632	ArmForSwitch returns the arm for a given joystick .
7633	NewScpStatementPledges creates a new ScpStatement
7634	MustPrepare returns the ScpStatementPrepare field if set .
7635	GetPrepare gets the Prepare field of the statement .
7636	MustConfirm returns the ScpStatementConfirm if set .
7637	GetConfirm gets the confirm value of a ScpStatement
7638	MustExternalize implements the ScpStatement interface for ScpStatementPledges .
7639	GetExternalize implements the ScpStatement interface .
7640	MustNominate returns the ScpNominate field if it s not set .
7641	GetNominate gets the Nominate field of the ScpStatement
7642	SafeUnmarshalBase64 decodes data from base64 .
7643	SafeUnmarshal reads data from the given byte slice and decodes it into dest .
7644	SendAmount returns the amount of the payment result .
7645	LoadAccount loads an account .
7646	SequenceForAccount returns the sequence number for an account .
7647	SubmitTransaction submits a transaction envelope .
7648	Equals tests equality against another LedgerKey
7649	SetAccount stores an account .
7650	SetData sets the ledger data for a given account .
7651	SetOffer sets the key for an account .
7652	SetTrustline sets the trust line for an account
7653	Add adds a new value to the CHDBuilder
7654	tryHash tries to create a hash for the given set of values .
7655	HashIndexFromKey returns the hash index for the given key .
7656	ReadInt read int value
7657	Read reads a CHmap from r .
7658	Get retrieves the value for the given key .
7659	Iterate returns an Iterator for this CHD .
7660	Write writes the CHD to the given io . Writer .
7661	RegisterDatasources registers datasources
7662	RegisterFonts registers fonts
7663	New creates a new Map .
7664	NewSized creates a new map with the given width and height .
7665	Load loads a map from a stylesheet .
7666	Resize resizes the map to the given width and height .
7667	Free frees the map
7668	RS returns the SRS of the map .
7669	ZoomAll skips all map entries .
7670	ZoomTo zoom to the map .
7671	Render a Map
7672	RenderImage renders the Map .
7673	RenderToFile renders the Map to a file .
7674	SetBufferSize sets the size of the map .
7675	Search returns a list of search responses
7676	Get returns a connection from the pool or creates a new one if no connection is available .
7677	put returns a connection to the pool .
7678	MonoToStereoF32 converts a buffer to a mono buffer .
7679	BitCrush shrinks the data from the bit buffer to the specified factor
7680	NormalizeMax sets the maximum value in the buffer .
7681	Gaining expands the buffer
7682	MonoDownmix converts the buffer to a mono buffer .
7683	Quantize quantizes a bitDepth to a bitDepth
7684	PCMScale recalculates the PCM scale from the buffer .
7685	StereoPan modifies the audio buffer with a pan value .
7686	Leader returns the current leader
7687	IsLeader returns true if the Candidate is leader .
7688	NewResponse creates a new Response .
7689	GetRequestID extracts the request ID from the given context .
7690	Log the monitorableWriter
7691	SendMailSSL sends an SMTP connection to addr .
7692	Send sends a message .
7693	WaitForIt polls the given connection until timeout is reached .
7694	Get reads configuration from source .
7695	initConfig initializes the config file
7696	WritePluginResultsToDatabase writes the results to a map .
7697	NewAuthController creates a new AuthController
7698	Authenticate handles the authenticated user .
7699	NewOAuth2Controller creates a new OAuth2Controller
7700	Refresh is used to refresh a token
7701	Token handles a request to create a token
7702	Logging adds a logrus . Logger to the request
7703	SingleFile returns a handler for single file
7704	Write satisfies the http . ResponseWriter interface .
7705	Hijack implements http . Hijacker interface
7706	NewMongo returns a new MongoDB connection
7707	Disconnect disconnection from Mongo
7708	New returns a new Table .
7709	PrintTable prints table for given fields
7710	PrintHorizontal prints a horizontal message
7711	PrintRow prints a row of fields .
7712	AddRow adds a new row to the table .
7713	Print the table
7714	String returns a string representation of the table
7715	getHead returns the field name .
7716	rowString returns a string representation of a row .
7717	fieldString returns a string representation of a field .
7718	stringTableDash returns the markdown dash .
7719	Bash - completion .
7720	stringMarkdownDash returns a markdown dash .
7721	HashPassword hashes a password using salt and salt .
7722	EncodeOAuth2Code encodes an OAuth2 code .
7723	DecodeOAuth2Code decodes an OAuth2 code .
7724	NewServer creates a new server .
7725	Start starts the server .
7726	Stop the server
7727	NewLoggingServeMux returns a new LoggingServeMux .
7728	Handler returns a Handler for the given request .
7729	Handle registers a logrus handler for the given pattern .
7730	HandleFunc registers a handler function for the given pattern .
7731	Init initializes the database
7732	WaitForConnection attempts to connect to elasticsearch
7733	StoreFileInfo is part of the database .
7734	StorePluginResults stores plugin results
7735	CamelCase convert src to CamelCase
7736	Getopt gets an environment variable
7737	Getopts returns the value of the user input
7738	GetSHA256 returns the SHA256 of the given file .
7739	RunCommand runs the command with the given context .
7740	RemoveDuplicates removes duplicate elements from a slice of strings .
7741	Unzip unzips the archive to the target directory .
7742	SliceContainsString returns true if a contains a .
7743	NewSMTP creates a new SMTP object .
7744	SendMail sends a mail message .
7745	GetEnvironment retrieves a single environment
7746	GetSMTP retrieves the SMTP configuration from the given source .
7747	GetConfig returns a server configuration .
7748	GetEnvironment returns the value of the given environment
7749	GetMongo retrieves the mongo configuration from source .
7750	TokenHandler adds token to request
7751	Receive receives an InMsg from the connection .
7752	Send sends an OutMsg message .
7753	allBoshReleaseNames returns a list of BoshRelease names
7754	AddedProperty is defined on the DeltaJob interface .
7755	RemovedProperty is defined on the DeltaJob interface .
7756	AddDeltaJob adds a new DeltaJob to the result .
7757	Concat concatenates two results .
7758	Read retrieves the release at the specified location .
7759	Pull downloads release from local cache
7760	BuildJob is responsible for build a job file
7761	LoadBoshRelease loads a BoshRelease from the given release .
7762	readBoshRelease reads a BoshRelease from an io . Reader .
7763	readBoshRelease reads a BoshRelease from an io . Reader
7764	readBoshJob reads the BoshRelease object
7765	NewRequest creates an API request .
7766	PushCloudConfig push a cloud config to BOSH
7767	Generate creates a packagename object
7768	CreateNewRecord creates a new record .
7769	NewShowCmd returns a new ShowCmd instance
7770	All prints all published releases .
7771	GetDefaultTaskImageResource returns the default image resource
7772	AddRawJob adds a new job to the pipeline
7773	AddGroup adds a new group
7774	GetResourceByName returns the ResourceConfig given a name or nil if not found .
7775	AddRawResource adds a raw resource to the ConcurrencyPipeline .
7776	AddResource adds a new resource .
7777	AddGithubResource add new resource
7778	AddBoshIOResource adds a BoshIOResource to the bridge
7779	AddBoshDeploymentResource adds a BoshDeploymentResource
7780	AddGitResource adds a new GitResource
7781	allJobNames returns all the names of all BoshRelease objects .
7782	NewDeploymentManifestFromFile creates a new DeploymentManifest from a file .
7783	NewDeploymentManifest creates a new DeploymentManifest
7784	AddRemoteRelease adds a new release to the manifest
7785	AddRemoteStemcell adds a remote command to the manifest
7786	Tag returns the tag for the specified key .
7787	RemoveTag removes a tag from the manifest
7788	LoadPivnetRelease loads a PivnetRelease from a release .
7789	BoshReleaseOrEmpty returns the BoshRelease if it s empty or empty .
7790	readPivnetRelease reads the BoshRelease manifest for the given path .
7791	decodeYaml decodes YAML data into v .
7792	NewZipWalker returns a new Walker .
7793	NewDiffCmd returns a new DiffCmd .
7794	All implements diff .
7795	Job diffs a job
7796	New returns a differ for the given release .
7797	StructName returns the struct name of the record .
7798	TypeName returns the name of a record .
7799	NewTgzWalker creates a new tgz Walker .
7800	NewBackoff creates a new Backoff instance .
7801	Reset resets the Backoff to its initial state .
7802	NewExponential creates a new backoff instance .
7803	NewExponentialFullJitter creates a new Backoff instance .
7804	NewLinear creates a new Backoff with the given start and limit .
7805	GetLineSize returns the line size for the given floor .
7806	GetMaxSize returns the maximum size of the buffer
7807	compute computes the spin buffer for the given output .
7808	WithTimeout adds the timeout to the post apps params
7809	WithContext adds the context to the post apps params
7810	WithHTTPClient adds the HTTPClient to the post apps params
7811	WithBody adds the body to the post apps params
7812	WithTimeout adds the timeout to the get apps app params
7813	WithContext adds the context to the get apps app params
7814	WithHTTPClient adds the HTTPClient to the get apps app params
7815	WithApp adds the app to the get apps app params
7816	UnmarshalBinary unmarshals a raw byte slice into a RouteWrapper .
7817	WithTimeout adds the timeout to the get apps params
7818	WithContext adds the context to the get apps params
7819	WithHTTPClient adds the HTTPClient to the get apps params
7820	WithTimeout adds the timeout to the delete apps app params
7821	WithContext adds the context to the delete apps app params
7822	WithHTTPClient adds the HTTPClient to the delete apps app params
7823	WithApp adds the app to the delete apps app params
7824	WithTimeout adds the timeout to the patch apps app routes params
7825	WithContext adds the context to the patch apps app routes params
7826	WithHTTPClient adds the HTTPClient to the patch apps app routes params
7827	WithApp adds the app to the patch apps app routes params
7828	WithBody adds the body to the patch apps app routes params
7829	WithRoute adds the route to the patch apps app routes params
7830	WithTimeout adds the timeout to the post apps app routes params
7831	WithContext adds the context to the post apps app routes params
7832	WithHTTPClient adds the HTTPClient to the post apps app routes params
7833	WithApp adds the app to the post apps app routes params
7834	WithBody adds the body to the post apps app routes params
7835	WithTimeout adds the timeout to the put apps app routes params
7836	WithContext adds the context to the put apps app routes params
7837	WithApp adds the app to the put apps app routes params
7838	WithBody adds the body to the put apps app routes params
7839	WithRoute adds the route to the put apps app routes params
7840	WithTimeout adds the timeout to the get apps app routes params
7841	WithContext adds the context to the get apps app routes params
7842	WithHTTPClient adds the HTTPClient to the get apps app routes params
7843	WithApp adds the app to the get apps app routes params
7844	WithTimeout adds the timeout to the patch apps app params
7845	WithContext adds the context to the patch apps app params
7846	WithHTTPClient adds the HTTPClient to the patch apps app params
7847	WithApp adds the app to the patch apps app params
7848	WithBody adds the body to the patch apps app params
7849	WithTimeout adds the timeout to the put apps app params
7850	WithContext adds the context to the put apps app params
7851	WithApp adds the app to the put apps app params
7852	WithBody adds the body to the put apps app params
7853	UnmarshalJSON from JSON
7854	MarshalJSON marshals Task to JSON .
7855	Validate validates this task
7856	GetRanges returns a slice of IPNet from ips .
7857	WithTimeout adds the timeout to the get apps app routes params
7858	WithContext adds the context to the get apps app routes params
7859	WithHTTPClient adds the HTTPClient to the get apps app routes route params
7860	WithApp adds the app to the get apps app routes params
7861	WithRoute adds the route to the get apps app routes params
7862	New returns a new Functions instance
7863	SetTransport sets the functions .
7864	WithTimeout adds the timeout to the delete apps app routes params
7865	WithContext adds the context to the delete apps app routes params
7866	WithHTTPClient adds the HTTPClient to the delete apps app routes params
7867	WithApp adds the app to the delete apps app routes params
7868	WithRoute adds the route to the delete apps app routes params
7869	WithTimeout adds the timeout to the get tasks params
7870	WithContext adds the context to the get tasks params
7871	WithHTTPClient adds the HTTPClient to the get tasks params
7872	NewValueStore returns a new instance of ValueStore .
7873	Close shuts down the store .
7874	SetBackend sets the OortService
7875	Ring returns the ring ring
7876	GetLocalID returns the local ID
7877	GetListenAddr returns the listen address
7878	Startup initializes the ReplGroupStore
7879	shutdownFinished closes the server .
7880	Stop stops the server .
7881	Exit gracefully shuts down the server .
7882	SelfUpgrade upgrades the binary
7883	SoftwareVersion returns the current version of the binary
7884	Shutdown shuts down the group store
7885	Rant returns the current user sant .
7886	Profile returns information about a specific user .
7887	Search searches for a specific term
7888	Satisfies the current user
7889	WeeklyRants returns a list of all hourly objects
7890	Get user id
7891	Shutdown shuts down the ReplValueStore .
7892	FExists returns true if the named file exists .
7893	outbound is used to close the connection
7894	Parse the message stream from the pool
7895	Group creates a new Group
7896	Groups retrieves a list of Domain groups
7897	GetGroup retrieves a group by name .
7898	Reticence returns a reticence of the given string .
7899	CheckPassword checks if the given password is valid
7900	CleanUrl cleans the URL at the given minimum .
7901	NewParameter returns a new Parameter .
7902	MakeParams creates a new set of parameters .
7903	Parse parses the given value .
7904	Email returns the email of this Forwarder
7905	Forwarder creates new forwarder for domain .
7906	Forwarders returns the forwarders of the Domain
7907	GetForwarder returns a forwarder for a domain .
7908	New creates a new CGP instance .
7909	EscapeCommaSeparated escapes comma separated strings
7910	Alias creates an alias for an account .
7911	Email returns the address of the alias .
7912	Aliases returns a list of all aliases in the account .
7913	RealName returns the account s real name .
7914	Email returns email address
7915	Account creates an account .
7916	Accounts retrieves a list of account names
7917	Exists checks if the domain exists in the Domain
7918	Aliases returns a list of all domain aliases .
7919	Domain creates a domain .
7920	Domains returns a list of all domains
7921	New returns a new Err instance
7922	Wrap wraps an error and returns a new Err struct
7923	mergeIn merges the info into an error
7924	wrapErrStr returns the wrapped error if any .
7925	concatArgs converts the arguments to a string .
7926	MailingList creates a new mailing list .
7927	NewSubscriber creates a new subscriber .
7928	Subscribers returns a list of subscribed subscribers .
7929	MailingLists returns a list of mailing lists of domain .
7930	NewByteKeyItem returns a pointer to a new byte key item .
7931	CompareBytes compares two pointers .
7932	CompareInt compares two pointers and returns the difference
7933	Alloc returns a pointer to an unsafe . Pointer for the given l .
7934	Free frees the pointer .
7935	Stats returns a string representation of the stats
7936	FreeOSMemory free OS memory
7937	Add adds an item to the Segment .
7938	NewSegment creates a new segment .
7939	Assemble builds a skiplist from a set of segments .
7940	CompareNodeTable compares two pointers .
7941	New creates a new node table .
7942	Stats returns a human - readable summary of the table .
7943	MemoryInUse returns the memory in use of the node .
7944	Get returns the pointer for the given key .
7945	Update updates the node with the given key .
7946	Remove removes the given key from the table .
7947	Close closes the node table .
7948	MemoryInUse estimates the number of nodes in the database .
7949	debugMarkFree marks the node as free .
7950	Seek moves the next item in bs .
7951	Next moves the iterator to the next value .
7952	Refresh refreshes the iterator .
7953	Close closes the underlying iterator .
7954	NewIterator returns an Iterator
7955	SeekFirst moves the iterator to the first node in the list .
7956	Next advances the merge iterator .
7957	Seek implements the Iterator interface .
7958	Keys returns the keys of the list .
7959	Remove removes the node from the list .
7960	Add adds a new node to the list .
7961	NewWithConfig creates a new skiplist with the given configuration .
7962	FreeNode adds a node to the skiplist .
7963	MakeBuf creates a new action buffer for skiplist .
7964	Size returns the number of elements in the slice .
7965	NewLevel returns a new random level .
7966	Insert is like Insert but does nothing .
7967	Insert2 inserts a node into the Skiplist .
7968	Insert3 is used to insert a single node
7969	Delete is used to delete a single node
7970	DeleteNode is used to delete a node
7971	GetRangeSplitItems returns a slice of items from the skiplist .
7972	Bytes returns the contents of this Item .
7973	ItemSize returns the size of the item in p .
7974	KVFromBytes converts a byte slice to a KV value .
7975	CompareKV compares two KV values .
7976	Emit emits the given event .
7977	UnregisterHandler unregisters the given handler .
7978	IsHandlerRegistered returns true if the given handler is registered with the given name .
7979	CompareNitro returns an integer indicating that this Pointer is less than that
7980	DefaultConfig returns the default configuration .
7981	Delete deletes the given byte slice .
7982	GetNode returns the next node in the store .
7983	SetKeyComparator sets the current key comparator
7984	UseMemoryMgmt configures the MallocFn to use MemoryMgmt .
7985	NewWithConfig creates a new Nitro instance .
7986	MemoryInUse returns the number of memory in use
7987	Close closes the node
7988	NewWriter returns a new writer .
7989	SnapshotSize returns the size of the given Pointer .
7990	Encode encodes the snapshot into w .
7991	Decode decodes the snapshot from r .
7992	Open opens the snapshot .
7993	CompareSnapshot returns an integer indicating that this snapshot is less than or equal to
7994	Garbage collect dead values
7995	GetSnapshots returns a copy of the snapshot
7996	MemoryInUse estimates the memory in use .
7997	CompareBS compares this Pointer to this Pointer
7998	Acquire acquires a reference to the barrier and returns the reference to it . If the barrier is active it will release the lock .
7999	Release releases the access barrier .
8000	FlushSession flushes the current session .
8001	Apply applies the stats to the stats report .
8002	AddInt64 adds a int64 to the stats .
8003	AddUint64 adds a uint64 to the stats .
8004	Merge merges sts into sts .
8005	GetStats returns the current StatsReport
8006	NewIterator returns a new Iterator .
8007	SeekFirst moves the iterator to the first value .
8008	SeekWithCmp moves the iterator to the next item .
8009	Seek moves the iterator to the current position .
8010	Valid implements Iterator .
8011	Delete deletes the iterator .
8012	Next advances the iterator to the next item .
8013	Init initializes the skurekeeper client
8014	FromURL creates a new URL from a URL
8015	ToURL converts a folder into a URL .
8016	Size returns the size of the tuple header .
8017	WriteTo writes the header to the given writer .
8018	Static returns a handler for static files
8019	Read parses the configuration .
8020	Del removes a section from the config .
8021	WriteTo writes the configuration to the given filename .
8022	checkSection checks if the line is a section of a line .
8023	checkLine takes a line and returns the key and value from the line .
8024	checkComment returns true if line is a comment .
8025	NewResponseWrapper returns a new ResponseWrapper
8026	Hijack implements http . Hijacker interface
8027	CloseNotify implements http . ResponseWrapper . CloseNotifier .
8028	Format for date format
8029	Logger returns a middleware that logs the request
8030	GetAvailableInventory returns a map of inventory information for the given task collection
8031	Expiration sets the token expiration time
8032	Claimer is a functional option for NewClaimer .
8033	Issuer specifies the issuer of the issuer .
8034	User specifies the user name
8035	Password specifies a password
8036	Extractor specifies a token s extractor .
8037	TokenGenerator creates a new token generator
8038	Token returns the token associated with the request .
8039	Claims extracts the claims from the request context .
8040	String returns a string representation of the Token .
8041	NewLexer creates a new Lexer .
8042	run runs the Lexer .
8043	emit emits a new token .
8044	skipWhitespace skips whitespace
8045	next returns the next rune .
8046	LineNum reports the number of lines in the input .
8047	Offset returns the current line offset .
8048	errorf emits an error token .
8049	lexText lexes a single line .
8050	lexComment scans a comment .
8051	New creates a tuple type from a namespace .
8052	AddVersion adds a version to the tuple .
8053	Contains returns true if the given field exists in the tuple .
8054	Offset returns the offset for the given field .
8055	Versions returns the versions of the tuple .
8056	SetPrivateMeta sets the task s private meta data
8057	SetPublicMeta sets meta data for a task
8058	GetRedactedVersion returns a shallow copy of the task .
8059	Equal checks if two tasks are equal .
8060	HTTP returns a handler for HTTP requests
8061	PutUint8 puts a uint8 value into the tuple .
8062	PutInt8 puts an int8 value into the tuple .
8063	PutUint16 encodes a uint16 value into a tuple .
8064	PutInt16 creates an int16 value for a given field .
8065	PutUint32 encodes a uint32 into a tuple .
8066	PutInt32 writes an int32 value to the tuple .
8067	PutUint64 encodes a uint64 to a tuple .
8068	PutInt64 puts an int64 value into the tuple .
8069	NewPackageList returns a new PackageList
8070	PutFloat32 puts a float32 value into the tuple .
8071	Classic creates a classic Martini .
8072	Languages specifies the list of languages to use .
8073	Session is an Option to set the session .
8074	Data returns the context from the request .
8075	URL is a convenience wrapper around URL .
8076	Size returns the size of the termizing process .
8077	GetRequestIDFromTaskResponse returns request id from task response
8078	PutString stores a string value .
8079	LoadDirectory recursively loads the contents of the specified directory .
8080	LoadFile loads a Package from a filename .
8081	LoadPackage loads a Package from a parser .
8082	NewDecoder returns a new decoder that reads from r .
8083	NewDecoderSize returns a new decoder that reads from r .
8084	Panic logs a panic .
8085	DeployVApp returns a fake VApp
8086	UnDeployVApp is part of the VCDClient interface
8087	Auth is the interface implementation
8088	QueryTemplate returns a fake vappTemplateRecord
8089	NewEncoder returns a new Encoder .
8090	Getter sets the nonce getter
8091	Setter sets the nonceter
8092	Age is an Option to set the age of the service .
8093	Nonce creates a new nonce based on the provided options .
8094	NonceValueFromRequest extracts the nonce status from the request context .
8095	StoreNonce - stores a nonce .
8096	PutFloat32Array puts a float32 value into a tuple .
8097	PutFloat64Array puts an array value into the tuple .
8098	Do executes the request
8099	NewLease creates a new lease
8100	Delete is used to delete a lease
8101	Post is used to post a lease
8102	ReStock is used to reinsert a task
8103	Procurement is part of the lease . Lease interface
8104	InitFromHTTPRequest initializes a lease from an HTTP request .
8105	Is returns true if the tuple type is the same
8106	Offset returns the offset of a field .
8107	WriteTo writes the tuple to w .
8108	PutTuple writes a tuple value .
8109	WriteString writes a string
8110	NotFound writes a 404 response
8111	Run starts the Agent .
8112	NewWaitGroup creates a new WaitGroup .
8113	Add implements the WaitGroup interface .
8114	Wait blocks until all pending items have completed .
8115	Gzip adds the Accept - Encoding header to the response .
8116	New creates a new InnkeeperClient .
8117	Error writes an error message .
8118	Rendererer returns a handler that renders the given Render options .
8119	NewClient creates a new PDClient .
8120	GetTask retrieves a task by ID .
8121	WriteImageToHTTP writes png . Image to w .
