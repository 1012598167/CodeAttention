0	NewSTM runs a new STM transaction .
1	first returns the first revision in the set .
2	cmps returns a list of keys with the given revision .
3	NewSTMRepeatable creates a TxnResponse .
4	NewSTMSerializable returns TxnResponse
5	NewSTMReadCommitted is a wrapper for NewSTMReadCommitted .
6	NewCertPool creates a new cert pool
7	NewCert creates a new TLS certificate
8	Pause pauses the peer .
9	Resume resets the state of the peer .
10	pick is used to pick a message from the remote peer .
11	post sends an HTTP request to the server .
12	newTxnResp creates a new transaction response .
13	applyCompare applies the compare function to the mvcc . ReadView .
14	OpCompact creates a compact operation .
15	NewPriorityQueue returns a PriorityQueue
16	Enqueue adds an entry to the priority queue .
17	NewLeaderStats returns a new LeaderStats object .
18	Succ adjusts the accuracy of the FollowerStats
19	Fail increases the number of failures .
20	delete removes a watcher from the broadcasts list .
21	startStreamWriter starts a new streamWriter .
22	checkStreamSupport returns true if the provided stream type is supported .
23	maybeUpdate updates the progress of the progress .
24	IsPaused returns true if progress is paused .
25	needSnapshotAbort returns true if the progress is a snapshot .
26	add adds an inflight to the buffer .
27	growBuf resizes the buffer .
28	freeTo frees the inflight to the specified offset .
29	SaveDBFrom saves the data from the database .
30	DBFilePath returns the path to the file with the given ID .
31	Set implements the Value interface
32	NewUniqueStringsValue returns a new UniqueStringsValue
33	UniqueStringsFromFlag returns the list of unique strings from the given flagset .
34	UniqueStringsMapFromFlag returns a map of unique strings to UniqueStringsValue
35	Percentiles returns the pcs and data from a slice of ints .
36	VerifyBootstrap verifies that the initial bootstrap is valid
37	VerifyJoinExisting returns an error if the cluster has already been set .
38	hasLocalMember checks if the cluster has a local member
39	advertiseMatchesCluster is used to advertise the cluster
40	ReqTimeout returns the amount of time to wait for an election .
41	getStatus returns the current status of the raft .
42	GetDefaultHost chooses a default host from the default system
43	getIfaceAddr returns the address associated with the given interface family .
44	getIfaceLink returns the interface associated with the given interface index .
45	lsCommandFunc is the handler for ls command
46	printLs prints the list of nodes
47	RPrint prints the node
48	NewLeaseRenewerCommand returns a new cobra . Command for lease renewer
49	Read reads a snapshot from a file
50	GetCipherSuite returns the cipher suite associated with the given string .
51	post performs a post request .
52	send adds a message to the raft cluster .
53	sendHeartbeat sends a heartbeat message .
54	bcastAppend sends the progress to the raft cluster .
55	bcastHeartbeat sends a message to the raft cluster .
56	tickElection is used to tick the leader
57	tickHeartbeat is used to tick the heartbeat interval
58	stepCandidate is used to handle a proposal proposal
59	restore attempts to restore an existing snapshot . Returns true if the snapshot was successful .
60	destable returns whether or not the raft leader is eligible for the raft .
61	checkQuorumActive returns whether the current progress is active .
62	increaseUncommittedSize increases the number of uncommitted entries .
63	reduceUncommittedSize is used to reduce the number of outstanding entries .
64	newPeriodic returns a new Periodic .
65	Pause pauses the periodic state .
66	Resume resets the periodic state .
67	Lock locks the mutex .
68	NewLocker returns a new lock .
69	NewFIFOScheduler returns a new fifo scheduler .
70	Schedule adds a new job to the scheduler .
71	Stop stops the fifo .
72	NewServer returns a new Server .
73	StartServe starts the gRPC server .
74	Stop stops the gRPC server .
75	Transport is a long running goroutine that handles requests .
76	RegisterInterruptHandler registers an interrupt handler .
77	HandleInterrupts handles SIGINT SIGINT and SIGINT .
78	OpGet returns a Range operation .
79	OpDelete creates a delete operation .
80	OpPut creates a new Put operation .
81	OpTxn creates a new transaction .
82	WithFromKey sets the key from the key
83	withTop returns the op options for a given target .
84	Exist checks if the given directory exists .
85	searchIndex attempts to find the index of the last available WAL file .
86	isValidSeq checks if the last sequence is valid .
87	NewListener creates a new TCP listener .
88	cafiles returns the list of ca files .
89	ServerConfig returns a tls . Config for the TLS configuration .
90	ClientConfig returns a tls . Config for TLSInfo .
91	newTLSKeepaliveListener returns a new TLS keepalive listener .
92	applyV2Request is the implementation of ApplyV2 .
93	NewRoleCommand returns a new instance of the role command
94	roleAddCommandFunc handles role add command
95	roleGetCommandFunc handles the role get command
96	Role grant permissions
97	Role revoke permission
98	NewCluster creates a new cluster .
99	NewClusterByConfig returns a new instance of Cluster .
100	HTTPMembers returns the list of HTTPMembers
101	waitLeader waits for all members to be leader .
102	waitNoLeader waits until there is no leader .
103	isMembersEqual returns true if membs are equal .
104	listenGRPC starts listening on the socket
105	NewClientV3 creates a new gRPC client .
106	Clone returns a deep copy of the member .
107	Close closes the member .
108	Stop stops the member .
109	checkLeaderTransition checks if the current leader is in the current leader .
110	Restart restarts a member .
111	Terminate terminates the member .
112	Metric returns the name of a metric
113	InjectPartition removes members from other .
114	RecoverPartition is part of the partition .
115	NewClusterV3 creates a new cluster version 3 .
116	ParseWithDefaults parses jwt options
117	Parse parses jwt options
118	Key returns the JWT key
119	fill fills the header fields from the header .
120	add adds a new watcher to the buffer .
121	Watch starts a watcher for the given key and the given key .
122	newFileEncoder returns a new encoder .
123	purgeFile is used to purge a directory .
124	Set implements the Value interface .
125	NewStringsValue creates a new StringsValue
126	StringsFromFlag returns the string values from the given flag set .
127	Cluster returns the cluster name
128	NewPageWriter returns a new PageWriter .
129	watch returns a watcher for the given key .
130	notify adds an event to the event history .
131	clone returns a deep copy of the watcher .
132	isHidden checks if keyPath is a valid key
133	createEtcdLogFile creates etcd log file
134	runEtcd starts the etcd server
135	stopEtcd stops etcd command
136	handleSIGQUIT_ETCDIF_DATA is used to handle etcd etcd etc .
137	LimitListener is a wrapper around net . Listener
138	allowMethod is a wrapper around http . ResponseWriter
139	NewWatchServer returns a new watchServer .
140	FiltersFromRequest converts a watch create request to mvcc . FilterFunc .
141	newPipelineHandler returns a new http . Handler .
142	checkClusterCompatibilityFromHeader verifies that the X - Server - Cluster - From header is in the cluster .
143	KeyExists returns true if the key exists .
144	KeyMissing returns true if the given key is not present .
145	ValidateSecureEndpoints validates the secure endpoints
146	putNewKV stores a new entry in v3 .
147	newUniqueEphemeralKey returns a new ephemeral key with the given prefix .
148	NewUpdateDirCommand handles the interaction between the cli .
149	updatedirCommandFunc is the handler for updatedir command
150	handleBackup handles a backup command
151	saveDB is used to save a boltdb .
152	NewWatchCommand returns a new cobra command for watch command
153	NewV3 returns a new VersionManager .
154	Save is part of the V3 API .
155	Status returns the status of the snapshot .
156	Restore restores the etcd server
157	NewAuthStore creates a new auth store .
158	NewTokenProvider creates a new token provider
159	MendPeer resumes a pending peer .
160	removePeer removes a peer from the transport .
161	ActivePeers returns the number of active peers .
162	resolveTCPAddrDefault attempts to resolve a TCP address using defaultResolver .
163	Resolve TCP addresses
164	urlsEqual compares two URLs .
165	URLStringsEqual returns true if two URLs are equal
166	NewLeaseCommand returns a new cobra command for lease subcommands
167	NewLeaseGrantCommand returns a new instance of the lease grant command
168	leaseGrantCommandFunc handles lease command
169	NewLeaseRevokeCommand returns a new instance of the cobra command
170	leaseRevokeCommandFunc is a wrapper for lease revocation
171	NewLeaseTimeToLiveCommand returns a new cobra . Command for lease info
172	leaseTimeToLiveCommandFunc is a wrapper for leaseTimeToLiveCommand .
173	NewLeaseListCommand returns a new instance of the lease list command
174	leaseListCommandFunc is a wrapper for leaseListCommand .
175	NewLeaseKeepAliveCommand returns a new instance of the lease keep - alive command
176	leaseKeepAliveCommandFunc is a wrapper for leaseKeepAliveCommand .
177	NewAlarmCommand returns a new cobra command
178	alarmDisarmCommandFunc executes alarmDisarm command .
179	alarmListCommandFunc handles alarm list command
180	Flags returns the flags for the Etcd field .
181	EmbedConfig builds an embed config from etcd
182	PProfHandlers returns a map of HTTP handlers for pprof .
183	NewBackendQuota returns a new Quota backed by Etcd .
184	NewClusterProxy creates a new cluster proxy
185	NewHandler returns a new http . Handler .
186	TimeToLiveHTTP sends an HTTP request to the given lease .
187	newWatcherBatch returns a new watcherBatch with the given events .
188	add adds a new watcher to the group .
189	contains returns whether the key is contained within the group .
190	delete removes a watcher from the group .
191	choose selects and returns a new watcher .
192	watcherSetByKey returns a watcherSet for the given key .
193	Compare implements Comparable .
194	successor returns the successor node s successor .
195	updateMax updates the max of the node .
196	visit visits the given interval .
197	Delete removes an Interval from the interval . Returns true if the interval was deleted .
198	Insert inserts an interval into the tree .
199	rotateLeft rotates the right node .
200	replaceParent replaces the parent of the given interval .
201	MaxHeight returns the height of the interval .
202	Visit implements the VisvalTree interface .
203	find returns the last interval node in the interval tree .
204	Find returns the IntervalValue for the given Interval
205	Intersects implements the IntervalTree interface .
206	Contains implements IntervalTree .
207	Stab returns a list of intervals .
208	Union union interval
209	NewExactReadCloser returns an io . ReadCloser that reads from rc .
210	NewElection returns a new election
211	ResumeElection is used to resume an election .
212	Proclaim is used to claim the current leader .
213	Resign resets the current leader
214	Leader returns the current leader .
215	Observe is part of the election . Observer interface .
216	check is used to check if an allocation is available .
217	NewExecWatchCommand creates a new cli exec command
218	execWatchCommandFunc executes a watch command
219	NewListener creates a new TCP listener .
220	NewRoundTripper returns a new http . RoundTripper .
221	createPostRequest creates a new http . Request .
222	checkPostResponse returns an error if the post status code is invalid .
223	serverVersion parses the X - Server - Version header and returns it .
224	checkVersionCompatibility returns the local version and local version .
225	setPeerURLsHeader sets X - PeerURLs header
226	addRemoteFromRequest adds remote from the request to the transport .
227	NewKeysAPIWithPrefix creates a new KeysAPI with a prefix .
228	TTTLDuration returns the duration of the node
229	SetPflagsFromEnv adds flags to the given FlagSet .
230	FlagToEnv converts a prefix to a string .
231	extracts the string with the given pre and suf .
232	passConfChange returns true if entry is a config change .
233	printInternalRaftRequest prints an internal raft request
234	listEntriesType lists all entries in a given list of entries
235	newLog creates a new raftLog .
236	newLogWithSize creates a new raftLog with the given storage .
237	findConflict finds the index of the entries in the log .
238	nextEnts returns the next pending entries .
239	allEntries returns all entries in the log .
240	slice returns the slice of entries in the log .
241	NewSession creates a new session
242	Close stops the session .
243	WithTTL sets the session TTL
244	WithLease sets the lease ID
245	addRequest adds a request to the pending read index .
246	recvAck returns the number of acks .
247	advance advances the read index to the pending read index .
248	lastPendingRequestCtx returns the last pending request context
249	Start starts the etcd server
250	start initializes the etcd server
251	Process processes a raft message
252	ReportSnapshot is part of the EtcdServer interface .
253	MoveLeader moves leadership to the current leader
254	TransferLeadership is part of the ClusterServer interface
255	configure implements the EtcdServer interface .
256	sync implements EtcdServer .
257	publish publishes the local member attributes
258	applyEntryNormal is used to apply an entry to the raft server .
259	applyConfChange applies the given configuration change to the raft cluster .
260	monitorVersions is a long running routine that monitors the cluster version .
261	goAttach runs f on the server .
262	NewRoundrobinBalanced creates a picker for round robin .
263	Pick implements rrBalancer . Picker .
264	NewTLSListener creates a new TLS listener .
265	Accept a TLS connection .
266	SetEndpoints sets the endpoints of the group .
267	Target returns the target of the resolver group .
268	Target returns the full path to the given endpoint
269	Build builds a resolver . Resolver .
270	Handle handles a request .
271	NewElectionCommand returns a new instance of the election command
272	nodeToMember converts a node into a Member
273	NewTmpBackend returns a new instance of the default database backend .
274	newRevision returns a new revision
275	Run starts the auto - revision
276	Pause marks the revision as paused .
277	Resume resumes the revision .
278	votes message type
279	DescribeMessage returns a string representation of the message .
280	DescribeEntry returns a string describing the entry .
281	DescribeEntries returns a string describing the entries .
282	SetLogger sets gRPC logger .
283	GetLogger returns the current logger .
284	maybeFirstIndex returns the index of the first entry in the snapshot .
285	maybeLastIndex returns the index of the last entry .
286	maybeTerm returns the term for the given index .
287	reroundEntriesArray returns a new slice of entries .
288	SaveSnap saves a snapshot to the storage .
289	New returns a new Client .
290	NewCtxClient returns a new Client .
291	NewFromURL creates a new Client instance .
292	Close closes the client .
293	Endpoints returns the list of known endpoints .
294	SetEndpoints sets the endpoints .
295	Sync performs a synchronous sync of the cluster
296	dialSetupOpts returns gRPC dial options .
297	Dial is a wrapper around net . Dial
298	dialWithBalancer is a wrapper around dialWithBalancer . DialWithBalancer .
299	dial is a wrapper around net . Dialer
300	WithRequireLeader returns a context with the metadata associated with this context
301	roundRobinQuorumBackoff returns a backoffFunc based on the quorum and jitter .
302	isHaltErr returns true if ctx is a halt error .
303	NewLease returns a new lease
304	IsCreate returns true if the event is a create .
305	Err is part of the WatchResponse interface .
306	IsProgressNotify returns true if the WatchResponse is a progress notification .
307	RequestProgress is part of the watcher interface .
308	nextResume returns the next resuming stream .
309	dispatchEvent takes a watchResponse and dispatches it to the caller .
310	broadcastResponse sends a watchResponse to the watchGrpcStream
311	unicastResponse sends a response to the client .
312	joinSubstreams is a long - running goroutine that waits for all subresources to complete .
313	toPB converts a watch request into a protobuf . WatchRequest .
314	toPB converts a progress request to a protobuf . WatchRequest .
315	Returns true if the value is in the set
316	ContainsAll returns true if the set contains all the given strings .
317	Equals compares two sets .
318	Values returns the set s values .
319	Copy returns a copy of this set .
320	Sub returns a copy of this set
321	v2MembersURL constructs a url for V2Members
322	NewMigrateCommand returns a new mvcc command
323	publishEntries publishes the given entries to the raft node .
324	openWAL opens the WAL for the raft node .
325	replayWAL is used to replay the WAL .
326	stop stops the raft node .
327	NewWatchCommand returns a new instance of the watch command
328	InitialState returns the current state and ConfState .
329	SetHardState is part of the Storage interface .
330	Entries returns a slice of entries for the given range .
331	Term returns the term associated with the given index .
332	LastIndex returns the last index in the storage .
333	FirstIndex returns the first index in the storage .
334	Snapshot returns the current snapshot .
335	ApplySnapshot applies the snapshot to the storage .
336	Compact implements storage . Storage . Compact .
337	unachable updates the picked state of the given URL .
338	NewEndpointCommand returns a new instance of EndpointCommand
339	epHealthCommandFunc is a wrapper for epHealthCommand .
340	NewElectCommand returns a new cobra command
341	NewDefragCommand returns a new instance of the Defrag command
342	RegisterBuilder registers a balancer builder .
343	Build creates a new balancer .
344	recordTransition returns the current connectivity state for the given new state .
345	doSerialize implements the EtcdServer interface .
346	send sends the response to the watcher .
347	post sends a response to the watcher .
348	OriginAllowed checks if origin is allowed
349	IsHostWhitelisted returns true if the host whitelist is allowed .
350	Valids implements the SelectiveStringValue interface .
351	NewSelectiveStringsValue creates a new SelectiveStringsValue .
352	NewKV returns a kv3 prefix
353	NewURLsValue creates a new URLsValue
354	URLFromFlag returns the list of URLs from the flag set .
355	servePeers is the main entry point for the etcd server
356	NewStore creates a new Store .
357	appendMarkTombstone appends a markTombstone mark to b .
358	IsDirWriteable checks if dir is writable
359	TouchDirAll creates a new directory at the given directory .
360	CreateDirAll does nothing
361	ZeroToEnd seeks to the end of the file .
362	Open implements the io . Closer interface .
363	NewRaftLoggerFromZapCore creates a raft . Logger from a zapcore . Core .
364	NewConfig creates a new client configuration from a file .
365	RegisterElectionHandler registers the http handlers for service evaluations to mux . The handlers forward requests to the grpc endpoint over conn .
366	UpdateCapability updates the capabilities for the given version .
367	NewLockCommand returns a new instance of the lock command
368	tick is part of the raft . Node interface .
369	advanceTicks advances the raft node .
370	NewAuthCommand returns a new cobra command for auth
371	authEnableCommandFunc handles auth enable command
372	authDisableCommandFunc is the handler for auth disable command
373	RetryKVClient retry KV client
374	RetryLeaseClient returns a LeaseClient backed by a client .
375	RetryClusterClient returns a client to retry a cluster .
376	RetryMaintenanceClient wraps RetryMaintenanceClient
377	RetryAuthClient retry auth client
378	NewSetDirCommand creates a new setdir command
379	Enter starts the barrier .
380	Leave is used to leave the current state .
381	HandleBasic handles basic HTTP requests
382	WriteError writes error to w .
383	MemberByName returns a single member by name
384	PeerURLs returns the list of known peers
385	ValidateConfigurationChange validates a configuration change .
386	AddMember adds a new member to the cluster
387	RemoveMember removes a member from the cluster
388	ValidateClusterAndAssignIDs returns an error if the local cluster is not valid .
389	Keep returns the set of keys for the given revision .
390	closeRequireLeader closes the keepalive leader .
391	resetRecv is used to reset the lease .
392	recvKeepAlive is used to receive a new LeaseKeepAliveResponse
393	deadlineLoop is a long running routine that waits for a deadline .
394	sendKeepAliveLoop is used to send a keepalive request .
395	NewKV creates a new kv . KV .
396	revoke revokes a lease with the given revision .
397	LeaseValue produces cmp value .
398	ValueBytes returns the value of compare_value .
399	WithRange sets the length of the query .
400	WithPrefix sets the current key .
401	mustInt64 returns an int64 or panics .
402	mustInt64orLeaseID returns the given value or panics if it is not a LeaseID .
403	Next returns the next update .
404	getJournalWriteSyncer returns a new write syncer .
405	newKV creates a new node .
406	newDir creates a new node .
407	Read reads the value of the node .
408	Write implements the Node interface .
409	List returns all the children of this node .
410	GetChild returns a child with the given name .
411	Add adds a child node
412	Remove removes a node from the store .
413	Compare returns true if the value matches the previous value .
414	Clone returns a deep copy of the node .
415	isConnectedToQuorumSince returns whether the given time is connected to the given time .
416	isConnectedSince returns true if the transport is connected to the given remote .
417	numConnectedSince returns the number of connections connected to the given time .
418	longestConnected returns the longest matching ID in membs .
419	isTornEntry checks if data is a TornEntry
420	StartMockServersOnNetwork starts a mockServers on network
421	StartAt starts the grpc server
422	StopAt stops the server at the given index .
423	Stop stops all servers
424	NewCheckCommand returns a new cobra command
425	NewCheckPerfCommand returns a new etcd command
426	NewCheckDatascaleCommand returns a new cobra command
427	NewGetCommand creates a new get command
428	NewGetCommand creates a new cli get command
429	PickPeerURL picks a random URL
430	HandleMetricsHealth implements the http . Handler interface for http . ServeMux .
431	NewRemoveCommand creates a new cli . Command .
432	rmCommandFunc is a wrapper for rm command
433	checkIntervals verifies that the given RequestOp is a valid interval .
434	ReportEventReceived reports the number of events received .
435	RegisterKVHandler registers the http handlers for service KV servers to mux . The handlers forward requests to the grpc endpoint over conn .
436	RegisterWatchHandler registers the http handlers for service watch to mux . The handlers forward requests to the grpc endpoint over conn .
437	RegisterLeaseHandler registers the http handlers for service Lease to mux . The handlers forward requests to the grpc endpoint over conn .
438	RegisterClusterHandler registers the http handlers for service Cluster to mux . The handlers forward requests to the grpc endpoint over conn .
439	RegisterMaintenanceHandler registers the http handlers for service Maintenance maintenance .
440	RegisterAuthHandler registers the http handlers for service Auth to mux . The handlers forward requests to the grpc endpoint over conn .
441	startEtcd starts a new echo server .
442	identifyDataDirOrDie reports whether the given directory is a directory or not .
443	openLast is used to open the last write lock .
444	receivedLeader is used to signal the leader .
445	lostNotify returns a channel that is closed when the leader is lost .
446	newGRPCProxyCommand returns a new grpc - proxy command
447	NewMemberCommand returns a new instance of the member command
448	NewMemberAddCommand returns a new instance of the member add command
449	NewMemberRemoveCommand returns a new instance of the member remove command
450	NewMemberUpdateCommand returns a new instance of the member update command
451	NewMemberListCommand returns a new instance of the member list command
452	memberAddCommandFunc is a wrapper around MemberAddCommandFunc
453	memberRemoveCommandFunc is a wrapper for MemberRemoveCommand .
454	memberUpdateCommandFunc is a wrapper for MemberUpdateCommand
455	memberListCommandFunc is a wrapper for MemberListCommand .
456	Open opens the WAL .
457	OpenForRead opens and opens a WAL for read .
458	Verify verifies that the provided wal is valid for the given wal .
459	Close closes the WAL .
460	notify sends an event to the watcher .
461	Remove stops the watcher .
462	mkPathDepth creates a path for a node
463	mkV2Node creates a NodeExtern .
464	prevKeyFromPuts returns the prevkvccpb . KeyValue from the response .
465	NewWeightedReport returns a new weighted report .
466	NewURLsMapFromStringMap creates a new URLsMap from a string map .
467	String returns a string representation of the URLsMap .
468	URLs returns a sorted list of URLs .
469	parse parses a string into a map .
470	NewClientHandler returns a new http . Handler for zap .
471	writeKeyEvent writes an event to the http . ResponseWriter .
472	writeKeyError writes an error to the responseWriter .
473	getUint64 get uint64 from form values
474	getBool gets bool from form values
475	waitDeletes waits for all deletes to be deleted .
476	AddOutputPaths adds additional output paths to the config .
477	NewConfig returns a Config with default values .
478	PeerURLsMapAndToken returns the URLs map and token from the cluster
479	GetDNSClusterNames returns a list of cluster names
480	checkBindURLs returns an error if any of the given URLs are not valid .
481	GetCluster returns a list of cluster names
482	GetClient returns a client for the specified service .
483	GetSRVService returns the SRV service name
484	ReadDir reads a directory .
485	compact performs a compaction .
486	Defragment - defragment
487	NewUserCommand returns a new cobra command for user subcommands
488	userAddCommandFunc handles a user add command
489	userGetCommandFunc is the handler for user get command
490	userChangePasswordCommandFunc handles a user change password .
491	addEvent adds an event to the queue .
492	scan returns the next event from the queue .
493	clone returns a deep copy of the EventHistory .
494	openSnapshotBackend opens a backend for the snapshot .
495	openBackend opens a new backend .
496	recoverSnapshotBackend is used to recover an existing snapshot .
497	NewUpdateCommand creates a new cli update command
498	updateCommandFunc is the handler for updateCommand
499	frontAndBack returns the next request and back to the front of the front .
500	Insert adds a new RequestStats to the queue .
501	Rate returns the rate of the queue .
502	Clear removes the statsQueue .
503	UniqueStrings returns a slice of random strings
504	RandomStrings returns n random strings
505	IsKeyNotFound returns true if the error is a key not found error code .
506	IsRoleNotFound checks if the error is a role not found
507	IsUserNotFound returns true if the error is a user not found error .
508	JoinCluster joins a cluster
509	GetCluster returns the current cluster
510	newProxyFunc returns a new proxy function .
511	isSafeRetry checks if err is safe retryable
512	withRetryPolicy configures the retry policy for retry
513	withAuthRetry overrides the default retry option
514	withMax sets the maximum number of retries .
515	withBackoff sets the backoffFunc to use .
516	RecvAppendReq implements the ServerStatsListener interface .
517	SendAppendReq sends a request to the server .
518	merge adds a new bucket to the buffer .
519	deleteRevKey deletes a revision .
520	isMemberBootstrapped checks if a member is bootstrapped
521	GetClusterFromRemotePeers returns a raft cluster from remote peers
522	getClusterFromRemotePeers fetches the cluster from remote nodes
523	getRemotePeerURLs returns the list of remote peers
524	getVersions returns all the known versions for the cluster .
525	decideClusterVersion determines the version of the cluster .
526	getVersion returns the versions of the given member
527	NewTimeoutDetector returns a new TimeoutDetector .
528	Reset resets the state of the DetectorDetector .
529	Observe implements the Monitor interface .
530	NewPeerHandler returns a new http . Handler for the etcd server .
531	put adds a new revision to the key index .
532	tombstone is used to handle a tombstone .
533	get returns the revision for the given index .
534	since returns the revision history for the given key .
535	keep removes the key at the given revision .
536	findGeneration returns the generation for the given revision .
537	cancelWatcher cancels a watcher .
538	syncWatchersLoop runs the watcher loop until the watcher is closed .
539	syncVictimsLoop is a long running routine that runs in a goroutine .
540	moveVictims moves the list of victims to the list of victims .
541	kvsToEvents converts vals to mvccpb . Event
542	notify sends notifications to the watcher .
543	isOpFuncCalled returns true if the passed op is a function call .
544	UnsafePut is part of the batch interface .
545	UnsafeSeqPut is like UnsafeSeqPut but does not modify the value .
546	UnsafeRange is part of the batch interface .
547	UnsafeDelete is used to delete a key
548	UnsafeForEach is like UnsafeForEach except that it calls the callback function for each key in the transaction .
549	Commit commits the transaction .
550	CommitAndStop commits a batch transaction .
551	Renew implements Lease .
552	Attach implements Lease .
553	revokeExpiredLeases attempts to find expired leases that have expired .
554	checkpointScheduledLeases ensures that there is at least one scheduled checkpoint .
555	expireExists checks if the lease has expired .
556	Find expired leases
557	refresh refreshes the lease .
558	foral sets the expiry of the lease .
559	Keys returns the list of keys in the lease .
560	Remaining returns the duration of the lease .
561	NewCompactionCommand returns a new etcd compaction command
562	compactionCommandFunc is a wrapper for compactionCommand .
563	NewPutCommand creates a new command
564	putCommandFunc is a wrapper around PutCommandFunc
565	NewHandler returns a new http . Handler .
566	NewReadonlyHandler returns a new http . HandlerFunc
567	NewSetCommand creates a new set command
568	setCommandFunc is a wrapper for SetCommand .
569	waitOnLastRev waits for the last revision to be deleted and returns true if there was a problem .
570	GetDefaultInterfaces returns a map of default host interfaces .
571	NewSnapshotCommand returns a new instance of the etcd snapshot command
572	NewMoveLeaderCommand returns a new instance of the new leader command
573	transferLeadershipCommandFunc is a helper function to handle the leader command
574	OpenDir opens a file .
575	NewRemoveDirCommand creates a new cli rm command
576	rmdirCommandFunc is a wrapper for rm command
577	NewDelCommand returns a new instance of the delete command
578	delCommandFunc handles a delete command
579	NewExpect returns a new ExpectProcess instance .
580	NewExpectWithEnv creates a new ExpectProcess .
581	ExpectFunc executes the given function and returns the result .
582	Expect returns the content of the given string .
583	LineCount returns the current line count
584	Signal implements the ExpectProcess interface .
585	keyFunc converts a RangeRequestRequest to a string .
586	Add adds a new range to the cache .
587	Get retrieves a range from the cache .
588	Invalidate invalidates the interval .
589	Compact implements the Cache interface .
590	NewUniqueURLsWithExceptions returns a new UniqueURLs instance
591	UniqueURLsFromFlag returns a list of unique URLs based on a flag set .
592	UniqueURLsMapFromFlag returns a map of unique urlsFlag from the flagset
593	Hold locks the barrier .
594	Release releases the barrier
595	Wait waits for the barrier to finish .
596	NewLockRacerCommand returns a new cobra . Command for LockRacer .
597	EvalTimeout returns the timeout for the election .
598	DialEtcdGRPCServer implements the EtcdClientDialer interface .
599	CreateEtcdClientConfig creates an etcd client configuration
600	CreateEtcdClient creates a gRPC client
601	CheckCompact returns an error if the server is not compacted .
602	Defrag defragment
603	RevHash returns the revision number of the member .
604	Rev implements the EtcdClient interface
605	Compact implements the EtcdClient interface .
606	IsLeader checks if the node is a leader
607	WriteHealthKey writes a key to etcd
608	SaveSnapshot saves the snapshot .
609	RestoreSnapshot is used to restore the snapshot
610	NewWatcher returns a new watcher
611	NewRawNode creates a new raw node .
612	Campaign is part of the raft . Node interface
613	Propose implements the Node interface .
614	ProposeConfChange is part of the raft . Node interface .
615	ApplyConfChange applies the given ConfChange to the node .
616	Step is part of raft . Node interface .
617	Ready implements the Node interface for RawNode .
618	WithProgress sets the progress of the node .
619	ReportUnreachable is part of the raft . Node interface .
620	ReportSnapshot is part of the raft . Node interface .
621	TransferLeader is part of the raft . Node interface .
622	ReadIndex is part of the raft . Node interface .
623	printcURL prints the curl command to stderr .
624	StartNode starts a new node .
625	RestartNode returns a new Raft node .
626	Tick is used to trigger a ticker .
627	MustSync returns true if st is equal to prevst .
628	NewGRPC17Health creates a new GRPC17 health check .
629	NeedUpdate returns whether the GRPC connection should be updated .
630	Send a signal to a syscall .
631	New returns a new Store .
632	Index returns the current index .
633	Get is part of the Store interface .
634	Create creates a new etcd node
635	Set is part of the Store interface .
636	getCompareFailCause returns a string representation of CompareFailCause .
637	Delete is used to delete a node
638	walk walks the tree rooted at the given path .
639	internalGet is used to get a single node
640	DeleteExpiredKeys removes expired keys from the store .
641	checkDir checks if the given node is a directory .
642	Save saves the store .
643	Recovery is part of the Store interface .
644	Next returns the next unique identifier .
645	NewMakeMirrorCommand returns a new instance of make mirror command
646	NewZapCoreLoggerBuilder returns a functional option that sets zap core logger .
647	NewSyncer returns a new syncer
648	DropPort drops a port
649	Set latency
650	Remove latency
651	NewTxnCommand returns a new cobra command
652	txnCommandFunc executes a transaction command .
653	New returns a new compactor .
654	printResponseKey prints the response key
655	RegisterLockHandler registers the http handlers for service Lock to mux . The handlers forward requests to the grpc endpoint over conn .
656	grpcHandlerFunc is a wrapper for grpc . HandlerFunc
657	addCORSHeader adds a CORSHeader to the responseWriter
658	fallback is used to apply a set of operations to the given txn .
659	IDFromString returns the ID from the given string .
660	release closes the file .
661	EncodedSize returns the size of the encoded value .
662	Decode deserializes a ValueStruct from a byte slice .
663	NewMergeIterator returns a new MergeIterator .
664	initHeap initializes the heap .
665	Valid returns whether the MergeIterator is valid .
666	Key returns the key of the iterator .
667	Value returns the value of the iterator .
668	Next moves the iterator to the next key .
669	Seek seeks to the given key .
670	Close closes the underlying MergeIterator .
671	Encode encodes the valuePointer to b .
672	Decode decodes the header from a byte slice .
673	encodeEntry returns the number of bytes written to buf .
674	SetEntry sets the entry in the batch .
675	Set implements the WriteBatch interface .
676	SetWithTTL adds a key and value to the batch .
677	Delete removes a key k .
678	commit commits the transaction .
679	Flush is part of the WriteBatch interface .
680	Error implements the WriteBatch interface .
681	getMemTables returns a list of all the tables .
682	writeRequests writes requests to vlog .
683	ensureRoomForWrite ensures that there is room for the DB .
684	writeLevel0Table writes the table to the given io . Writer .
685	handleFlushTask handles a flushTask .
686	flushMemtable flushes the memtable to disk .
687	calculateSize calculates the size of the file .
688	Size returns the size of the database .
689	Next returns the next value .
690	Release releases the sequence .
691	KeySplits returns the list of keys in the database .
692	Flatten compacts all tables in the database .
693	Mmap maps a file descriptor .
694	advise is a wrapper around MADvise
695	setDiscardTs is used to set the timestamp .
696	hasConflict returns true if the transaction has a conflict .
697	Set adds a new entry to the transaction .
698	SetWithMeta adds a new entry to the transaction .
699	Delete is used to remove an entry .
700	Get retrieves an item from the database .
701	CommitWith is part of the transaction interface .
702	View is part of the DB interface .
703	Update is part of the DB interface .
704	Seek moves the iterator to the next key .
705	SeekToLast moves the iterator to the next iterator .
706	parseKV implements the BlockIterator interface .
707	NewIterator creates a new iterator .
708	seekFrom moves the iterator to the given key .
709	seekForPrev moves the iterator to the first key .
710	Value returns the next value .
711	Seek moves the iterator to the first key .
712	NewConcatIterator returns a ConcatIterator .
713	Valid returns whether the current iteration is valid .
714	Next advances the ConcatIterator .
715	Close closes the iterators .
716	OpenExistingFile opens an existing file .
717	Copy returns a copy of a byte slice .
718	KeyWithTs returns a new key with the given timestamp .
719	ParseTs parses the timestamp from the byte slice .
720	ParseKey parses a byte slice and returns it .
721	SameKey returns true if src is equal to dst .
722	FixedDuration returns fixed duration
723	NewCloser creates a new Closer .
724	NewThrottle returns a Throttle with a maximum number of goroutines .
725	Do implements the Throttle interface .
726	Done is part of the Throttle interface .
727	Finish finishes the throttler .
728	SetDiscardTs sets the discard timestamp for the DB .
729	openReadOnly opens the file at the specified path .
730	iterate calls fn for each entry .
731	sortedFids returns a sorted list of IDs that have been deleted .
732	write writes req to disk .
733	populateDiscardStats populates the discard stats .
734	Backup is part of the Backup interface .
735	ToList converts an iterator to a list of KV objects .
736	produceRanges generates key ranges from the stream .
737	produceKVs produces a batch of kV sets .
738	Integrostrate is used to run the streaming process
739	NewStream creates a new streaming transaction .
740	NewStreamAt creates a new streaming stream .
741	DecrRef decrements the reference count .
742	ParseFileID parses the given file name .
743	PrintHistogram prints histograms .
744	newSizeHistogram creates a new size histogram .
745	buildHistogram builds the size histogram histogram .
746	printHistogram prints the histogram
747	Init initializes the watermark .
748	Begin implements WaterMark .
749	BeginMany implements WaterMarker .
750	Done marks the mark mark mark as done .
751	DoneMany implements watermarkMarker .
752	SetDoneUntil sets the watermark value for watermark .
753	WaitForMark blocks until the mark mark is done .
754	Encode encodes the header .
755	Decode decodes the header .
756	NewTableBuilder creates a new table builder .
757	keyDiff returns the key of the base key .
758	Add implements builder . Add .
759	blockIndex returns the block index of the block .
760	Finish returns the JSON encoding of the block .
761	Errorf logs a formatted error message
762	Infof logs a message
763	DecrRef decrements the ref count .
764	NewSkiplist returns a new skiplist .
765	Put adds a new value to the list .
766	Get returns the next value .
767	Key returns the current key .
768	Value returns the current value of the iterator .
769	Next sets the next item in the list .
770	Prev implements Iterator .
771	Seek moves the iterator to the specified target .
772	SeekForPrev seeks to the first item in the list .
773	NewUniIterator returns a new UiIterator
774	Next advances the iterator .
775	Seek moves the iterator to the first key .
776	asChanges converts a ManifestChange into a slice of ManifestChange objects .
777	rewrite closes the manifest file .
778	validate validates the table level .
779	acquireDirectoryLock is used to acquire a lock for a pid file .
780	release releases the lock
781	AssertTruef asserts that b is true .
782	Wrapf wraps err with debug mode .
783	initTables initializes the list of tables .
784	deleteTables deletes all tables .
785	addAddLevel0Table tries to add a table to the table .
786	getTableForKey returns the table for the given key .
787	get returns the highest version of the given key .
788	over overlapping tables .
789	String returns a string representation of the Item .
790	KeyCopy copies the item s key into dst .
791	ValueSize returns the size of the item .
792	NewKeyIterator creates a new iterator for the given key .
793	Valid returns true if the iterator is valid .
794	ValidForPrefix returns true if the iterator has at least one key .
795	Close closes the iterator .
796	parseItem parses the next item .
797	Seek moves the iterator to the next key .
798	GetMergeOperator returns a MergeOperator .
799	Get implements the MergeOperator interface .
800	compareAndAdd implements the compareAndNextLevel interface .
801	newArena returns a new Arena .
802	putNode puts a node into the arena .
803	getNode returns the node at the given offset .
804	getKey returns the key at the given offset .
805	getVal returns the next value from the buffer
806	getNodeOffset returns the offset of the node .
807	Initialize the default bad logger
808	revertToManifest removes the manifest from the manifest .
809	dropTree drops all the levels in the tree .
810	dropPrefix is used to drop a prefix .
811	isLevel0Compactable returns true if the level is compactable .
812	doCompact performs compaction .
813	get returns the value for the given key .
814	seekTotal returns the total number of accounts in the passed transaction .
815	findFirstInvalidTxn finds the first invalid transaction in the badestamps .
816	Create returns a new snapshot sink .
817	List returns all snapshots in the store .
818	Open implements the InmemSnapshotStore interface .
819	Write implements the io . Writer interface
820	NewFileSnapshotStoreWithLogger creates a new FileSnapshotStore with the specified logger .
821	NewFileSnapshotStore creates a new instance of FileSnapshotStore .
822	snapshotName returns the name of the snapshot .
823	Create creates a new SnapshotSink for a given version .
824	List returns all snapshots in the store
825	getSnapshots returns all snapshots in the directory .
826	readMeta returns the metadata for the snapshot .
827	Open opens the snapshot with the given ID .
828	ReapSnapshots removes existing snapshots .
829	Write implements io . Writer .
830	Close closes the underlying file .
831	Cancel cancels the file .
832	finalize flushes the contents of the file .
833	writeMeta writes the metadata to disk .
834	NewNetworkTransportWithConfig creates a new NetworkTransport with the given configuration .
835	setupStreamContext sets the context to be cancelled .
836	getStreamContext returns the context s context .
837	SetHeartbeatHandler sets the callback function for the transport .
838	CloseStreams closes all streams associated with this connection .
839	Close implements the NetworkTransport interface .
840	getPooledConn returns a pooled connection .
841	getConnFromAddressProvider is a wrapper around getConnFromAddressProvider
842	getConn is a wrapper around net . Conn
843	Return a connection to the pool
844	listen handles incoming connections .
845	handleConn is used to handle incoming connections
846	handleCommand handles a command
847	decodeResponse is used to decode a response .
848	sendRPC is used to send an RPC message
849	newNetPipeline creates a new netPipeline .
850	decodeResponses is a long running routine that reads responses from the pipeline .
851	AppendEntries is part of the netPipeline interface .
852	Close closes the pipeline .
853	NewObserver returns a new observer
854	RegisterObserver registers an observer .
855	DeregisterObserver deregisters an observer .
856	Observe starts a new observer .
857	NewInmemStore returns a new InmemStore .
858	FirstIndex returns the index of the first index .
859	LastIndex returns the last index in the store .
860	GetLog gets a log from the store
861	StoreLog stores a log
862	StoreLogs stores logs .
863	DeleteRange deletes a range between min and max .
864	Set sets the value for the given key .
865	Get returns the value associated with the key .
866	SetUint64 sets a uint64 value
867	GetUint64 gets uint64 value
868	NewLogCache creates a new LogCache .
869	Connect connects to the given peer .
870	Disconnect disconnects from the transport
871	DisconnectAll disconnects all peers
872	Respond sends the response to the response .
873	Open is part of the SnapshotFuture interface .
874	votes is the vote for the vote .
875	notifyAll sends a notification to all pending notifications .
876	cleanNotify removes a notifyFuture from the database .
877	LastContact returns the last contact .
878	setLastContact sets the last contact
879	replicate is used to replicate the given follower .
880	pipelineReplicate is used to perform a pipeline .
881	pipelineSend is used to send a batch of entries to the server .
882	decodeDecode is a long running goroutine that reads from the raft cluster .
883	setupAppendEntries sets up appendEntries to the Raft log .
884	setPreviousLog sets the previous log entry for the log .
885	setNewLogs adds new log entries to the raft log .
886	appendStats is used to update the stats for a given peer
887	handleStaleTerm is used to handle a stale term
888	AppendEntries implements the Transport interface .
889	RequestVote implements raft . Transport .
890	InstallSnapshot installs a snapshot
891	EncodePeer is used to encode a peer
892	DecodePeer is part of the Transport interface .
893	AppendEntries implements the pipeline . AppendEntry interface .
894	ReadPeersJSON returns a configuration from a JSON file .
895	ReadConfigJSON loads the configuration from a JSON file .
896	NewTCPTransport creates a new TCP transport .
897	NewTCPTransportWithLogger creates a new NetworkTransport using the specified bindAddr .
898	NewTCPTransportWithConfig returns a new NetworkTransport with the specified network address .
899	Dial implements the StreamLayer interface .
900	Accept implements the StreamLayer interface .
901	Addr implements the net . Addr interface .
902	restoreSnapshot is used to restore a snapshot
903	BootstrapCluster is part of the raft . Runner interface .
904	Leader returns the current leader .
905	Apply implements raft . Apply . Apply .
906	Barrier is used to get the barrier for the raft workflow .
907	VerifyLeader is part of the raft . Raft interface .
908	AddVoter is part of the Raft interface .
909	RemoveServer is used to remove a server from the raft cluster .
910	Shutdown is part of the RaftFuture interface .
911	Snapshot returns a snapshot future .
912	Restore is part of raft . Raft interface .
913	String implements the Stringer interface for Raft .
914	LastContact returns the last contact .
915	Logf calls log . Printf .
916	containsNode checks if a node is in the list of nodes
917	LeaderPlus returns the number of nodes in the cluster .
918	WaitTilUptoDate waits until maxApplySuccess .
919	assertLogEntryEqual returns true if the log entry is equal to the given log entry .
920	runFSM is part of raft . FSM interface .
921	Clone returns a deep copy of the configuration .
922	Clone returns a deep copy of the configuration .
923	hasVote returns true if the given server is a vote .
924	checkConfiguration returns an error if the configuration is not valid .
925	nextConfiguration returns the next configuration for the current configuration .
926	encodePeers encodes the given configuration .
927	decodePeers decodes a list of peers .
928	encodeConfiguration encodes the configuration .
929	decodeConfiguration decodes a Configuration .
930	goFunc runs f in a goroutine .
931	getLastIndex returns the index of the last log index .
932	getLastEntry returns the last entry in the raft state .
933	checkRPCHeader returns ErrUnsupportedProteader if rpc is not supported .
934	setLeader sets the current leader .
935	requestConfigChange is used to request a configuration change request .
936	run runs the raft Raft loop .
937	runFollower is the main loop for the raft cluster
938	liveBootstrap is used to bootstrap the cluster
939	runCandidate is the main loop for the raft leader
940	runLeader starts the raft leader .
941	startStopReplication starts a new follower .
942	configurationChangeChIfStable returns a channelChangeFuture that can be used to get the configuration change .
943	verifyLeader is called to verify the current leader .
944	checkLeaderLease checks if there is at least one leader .
945	restoreUserSnapshot is used to restore a snapshot
946	appendConfigurationEntry adds a new configuration entry to the raft cluster .
947	dispatchLogs is a part of the raft . Log interface .
948	processLogs processes the log into the raft cluster .
949	processLog is used to handle a log entry
950	processRPC handles RPC requests
951	processHeartbeat is used to handle a heartbeat
952	setLastContact sets the last contact .
953	persistVote is used to persist the vote .
954	setCurrentTerm sets the current term .
955	setState sets the current state of the raft cluster .
956	getCommitIndex returns the index of the commit index .
957	recalculate recalculates the commitment index for the commit index .
958	randomTimeout returns a time . Time out of a given duration .
959	generateUUID generates a new UUID
960	decodeMsgPack is used to decode a message
961	encodeMsgPack encodes and returns a Buffer .
962	backoff returns the backoff duration for a given round .
963	newApplySource returns a new applySource .
964	resetReset resets the internal state .
965	DefaultConfig returns the default configuration .
966	ValidateConfig validates the configuration .
967	runSnapshots is a long running routine that will run the snapshot .
968	shouldSnapshot returns whether or not the threshold of the current log .
969	takeSnapshot is part of the raft . Raft interface .
970	compactLogs is used to compact logs .
971	WebpackCheck checks if the webhook configuration is valid .
972	New returns a new generated generator .
973	UnixSocket creates a Listener for unix socket
974	Get returns an ErrorHandler for the given status .
975	PanicHandler returns a handler that handles panics .
976	partialFeeder returns the full filename for the given content type .
977	New creates a new engine engine .
978	WriteTo implements io . WriterTo interface .
979	Send sends a message to SMTP .
980	NewSMTPSender returns a SMTP sender .
981	Param returns the value for the given key .
982	Set sets a value in the context
983	Value returns the value associated with key .
984	Redirect sends a redirect request to the session
985	File returns a file .
986	MarshalJSON implements the json . Marshaler interface .
987	New creates a genny group .
988	New creates a new App instance
989	DeprecrationsCheck checks if the deprecations are deprecated .
990	List is not implemented .
991	Render implements the Render interface .
992	Save saves the session
993	GetOnce gets a value from session
994	Set sets a value in the session
995	Clear removes all values from the session
996	getSession returns a new session for the current session
997	New creates a genny generator .
998	New returns a new genny generator .
999	New returns a genny generator .
1000	NewMessage returns a new Message instance .
1001	Reset resets the message .
1002	SetHeader sets the given header field .
1003	SetHeaders sets the headers of the message .
1004	SetAddressHeader sets the address for the given field .
1005	FormatAddress formats the address as a string .
1006	SetDateHeader sets a date header field .
1007	FormatDate formats a date .
1008	SetBody sets the body writer
1009	SetPartEncoding sets the encoding of the part .
1010	SetHeader sets a file s header
1011	SetCopyFunc sets the CopyFunc
1012	AttachReader adds a new file to the message .
1013	Attach adds a file to the existing attachments .
1014	EmbedReader adds an embedded reader to the message .
1015	Embed adds a file to the message .
1016	ValidateTemplates takes a list of templates and returns a RunFunc that runs each of the given templates .
1017	PlushValidator is the same as PlushValidator
1018	Validate validates options
1019	LoadPlugins loads plugins
1020	WriteHeader implements ResponseWriter .
1021	Write implements the http . ResponseWriter interface
1022	Flush implements the http . Flusher interface .
1023	CloseNotify implements the ResponseWriter interface .
1024	Run the updater
1025	onlyRelevantFiles is a wrapper around fn to filter out files .
1026	GoTemplateEngine executes a template engine and returns the result .
1027	GET registers a new GET route for a GET request
1028	Redirect adds a redirect to the router
1029	ANY adds a handler to the router
1030	buildRouteName returns the name of the route .
1031	New returns a new mail group .
1032	NewDialer returns a Dialer .
1033	Dial connects to the SMTP server .
1034	DialAndSend implements the Dialer interface .
1035	Set sets the value for a given key .
1036	Add adds a key to flash
1037	persist persists flash data to session
1038	newFlash returns a new flash instance
1039	Get get cookie by name
1040	Set sets a cookie
1041	SetWithExpirationTime sets a cookie with the given expiration time .
1042	Delete a cookie
1043	NewMessage returns a new Message instance
1044	NewFromData creates a message from render data .
1045	New returns a new message instance
1046	CloseNotify implements the EventSource interface .
1047	NewEventSource returns a new EventSource .
1048	NewSimpleWithContext returns a new instance of Simple .
1049	Register registers a new handler .
1050	Start starts the background worker
1051	Stop stops the Worker
1052	Perform runs the given job .
1053	PerformAt executes the given job in the given time .
1054	PerformIn is the same as PerformIn but takes a duration .
1055	String returns a JSON representation of the RouteInfo .
1056	Alias adds an alias to the router .
1057	Name sets the name of the route
1058	BuildPathHelper builds a TemplateHelperFunc for the Mux
1059	New returns a new yml generator .
1060	New creates a new genny generator .
1061	RegisterCustomDecoder adds custom decoder to decoder .
1062	Replace replaces the middleware in the middlewareStack .
1063	Routes returns the Routes
1064	WrapBuffaloHandler wraps a Handler into a http . Handler
1065	PackageJSONCheck checks if the package is a valid package .
1066	match checks if the given importpath matches the key
1067	Send sends multiple messages to Sender .
1068	Last returns true if the last identifier is in the list .
1069	Stop stops the app .
1070	DepEnsure ensures that dep is ready
1071	String returns a string representation of the BuildInfo .
1072	New returns a new genny generator .
1073	AddBody adds a body to the message .
1074	AddBodies adds body to the message .
1075	AddAttachment adds an attachment to the message .
1076	AddEmbedded adds an embedded reader to the message .
1077	SetHeader sets the given header field .
1078	New creates a genny group .
1079	New returns the generated code generator .
1080	New returns a new configuration generator .
1081	Cleanup deletes jam files .
1082	MDTemplateEngine renders a Markdown template
1083	Update updates a configmap
1084	FilterChanges filters a list of ConfigUpdater changes based on the current pull request .
1085	getLabelsFromREMatches returns a list of labels from a list of matches .
1086	getLabelsFromGenericMatches returns the list of labels that match the regex
1087	Start starts the agent .
1088	Subscribe registers a new DeltaChan .
1089	Config returns the agent configuration .
1090	Set sets the agent configuration .
1091	IsMember checks if given user is a member
1092	ListIssueComments get issue comments
1093	ListPullRequestComments returns the pull request comments .
1094	ListReviews is part of the FakeClient interface .
1095	ListIssueEvents is a mock
1096	CreateComment creates a fake issue comment .
1097	CreateReview creates a new review .
1098	CreateCommentReaction creates a fake comment reaction .
1099	CreateIssueReaction creates a fake issue reaction .
1100	DeleteComment deletes an issue comment
1101	DeleteStaleComments deletes stale issue comments
1102	GetPullRequest gets the pull request
1103	GetPullRequestChanges returns pull request changes
1104	GetRef returns a fake ref
1105	DeleteRef is part of the FakeClient interface .
1106	GetSingleCommit gets a single commit
1107	CreateStatus is part of the FakeClient interface .
1108	ListStatuses is part of the Interface interface .
1109	GetCombinedStatus is part of the Interface interface .
1110	GetRepoLabels returns a list of repository labels
1111	GetIssueLabels returns a list of issue labels
1112	AddLabel is part of Interface .
1113	RemoveLabel is part of Interface .
1114	FindIssues get issues
1115	AssignIssue is part of the FakeClient interface .
1116	GetFile is part of Interface .
1117	ListTeams is a mock
1118	ListTeamMembers returns a list of team members
1119	IsCollaborator returns true if the user is a collaborator
1120	ListCollaborators is part of the FakeClient interface
1121	ClearMilestone clears the fake milestone
1122	SetMilestone sets the milestone number
1123	ListMilestones is a mock
1124	ListPRCommits is part of the Interface interface .
1125	GetRepoProjects returns a list of github projects
1126	GetOrgProjects returns github projects
1127	GetProjectColumns returns a list of ProjectColumns
1128	CreateProjectCard creates a new ProjectCard
1129	DeleteProjectCard deletes a ProjectCard .
1130	MoveProjectCard moves a ProjectCard from a ProjectCardID .
1131	CreateDatabaseClient creates an InfluxDB client
1132	Push sends a new point to influxdb
1133	NewProwJobWithAnnotation creates a new ProwJob .
1134	NewProwJob creates a new ProwJob .
1135	NewPresubmit creates a new ProwJob .
1136	PresubmitSpec creates a ProwJobSpec from the given config .
1137	PostsubmitSpec builds a ProwJobSpec from the given config .
1138	PeriodicSpec returns a ProwJobSpec for the given period .
1139	BatchSpec builds a ProwJobSpec from the given config .
1140	PartitionActive returns a channel of pending Prow jobs .
1141	ProwJobFields returns the fields for a ProwJob .
1142	ClusterToCtx converts inClusterContext to cluster alias
1143	AddCommand adds a command to the plugin
1144	Get takes name of the ProwJob and returns the corresponding ProwJob object and an error if there is any .
1145	Watch returns a watch . Interface that watches the requested rowJobs .
1146	Delete takes name of the prowJob and deletes it . Returns an error if one occurs .
1147	Patch applies the patch and returns the patched prowJob .
1148	MergeMethod returns the MergeMethod for the given org and repository .
1149	Query returns the query string for the article
1150	ForRepo returns true if the query matches the given repository .
1151	OrgExceptionsAndRepos returns a map of Exceptions and repos from the ExcludedRepos
1152	QueryMap returns a new QueryMap .
1153	ForRepo returns all queries that belong to the given repository .
1154	Validate returns an error if the policy is not valid
1155	GetTideContextPolicy parses the config and returns it .
1156	IsOptional returns true if the context is an optional context
1157	MissingRequiredContexts returns the list of required contexts that are present in the policy
1158	ValidateWebhook validates a webhook .
1159	HelpProvider returns a plugin help .
1160	HandleEvent handles an incoming pull request .
1161	HandleAll is the main entry point for all repositories
1162	NewDryRunProwJobClient returns a new ProwJobClient .
1163	Create does nothing
1164	Update does nothing
1165	UpdateStatus updates the status of the ProwJobClient .
1166	Delete does nothing
1167	DeleteCollection is part of the dryRunProwJobClient interface .
1168	Get does nothing
1169	List returns a list of Prow jobs .
1170	Watch implements Backend .
1171	Patch creates a ProwJob .
1172	hasSynced checks if the controller has been synced
1173	Run starts the controller .
1174	runWorker is a long running routine that processes the workqueue .
1175	fromKey parses a key and returns its components .
1176	enqueueKey adds the given object to the workqueue .
1177	finalState returns true if the given status is a pending state .
1178	description returns the description for the condition .
1179	rrowJobStatus returns the ProwJobState for the pipeline run .
1180	pipelineMeta returns the metadata for a ProwJob .
1181	sourceURL returns the source URL for the given ProwJob .
1182	makePipelineGitResource returns a Git repository resource .
1183	makePipelineRun makes a copy of the given ProwJob .
1184	matchingConfigs returns list of configs that match the given branch .
1185	SuggestCodeChange returns suggestions for a given problem .
1186	ServeExternalPluginHelp serves the external plugin help .
1187	protect ensures that all branches are correct .
1188	UpdateOrg implements Protobuf . UpdateOrg
1189	UpdateRepo implements Protobuf .
1190	UpdateBranch implements policy .
1191	LoadConfig loads config from config
1192	Run starts the uploader
1193	Start starts the agent .
1194	reloadSecret reloads the secret at the given path .
1195	GetSecret gets the secret from the agent .
1196	setSecret sets the secret value for the given secretPath .
1197	GetTokenGenerator returns a token generator for the given secret path .
1198	New returns a new instance of History .
1199	Record adds a new record to the history .
1200	ServeHTTP implements the http . Handler interface
1201	Flush writes all log records to the file .
1202	AllRecords returns all records in the history .
1203	MakeCommand returns a new cobra command for GCS
1204	CheckFlags checks to see if the plugin is valid
1205	ReceiveComment returns the points for the given comment .
1206	NewController creates a new ProwJob .
1207	Run starts the controller .
1208	runWorker is a long running goroutine .
1209	New returns a new LocalGit instance .
1210	MakeFakeRepo creates a fake repository for given org and organization .
1211	AddCommit adds the given files to the local repository .
1212	CheckoutNewBranch checks if the given branch is a git branch .
1213	Checkout checkout a git repository
1214	RevParse returns the revision of a git commit .
1215	CleanAll removes all regions from the database
1216	optionsForRepo returns the Lgtm for the given repository .
1217	getChangedFiles returns a list of filenames for the current pull request .
1218	loadReviewers returns the set of reviewers that are in the given filenames .
1219	NewController creates a new controller .
1220	SaveLastSync saves last sync time
1221	Sync is part of the Controller interface .
1222	AddFlags adds flags related to the event counter
1223	CheckFlags implements PluginCounterPlugin .
1224	ReceiveIssueEvent returns the points for an issue .
1225	Upload runs the uploadFargets on the bucket .
1226	FileUploadWithMetadata uploads a file with metadata
1227	DataUploadWithMetadata uploads data to object
1228	HasLabel returns true if the given label contains the given label .
1229	ImageTooBig checks if the given image is too large .
1230	LevelFromPermissions returns the level of the permission s permissions .
1231	PermissionsFromLevel converts a given permission level to RepoPermission .
1232	newProwJobs returns a prowJobs
1233	GetApplicable returns the list of Blockers that belong to the given repository .
1234	serve starts the jenkins server
1235	NewCountPlugin is a wrapper for NewCountPlugin
1236	ReceiveComment is part of the Plugin interface .
1237	updateMetrics periodically updates disk usage metrics .
1238	LogStatus logs the current status
1239	SyncConfig updates the resource configuration .
1240	Metric returns a metric for the given resource type
1241	FormatURL takes a DogURL and converts it to a URL .
1242	runAndSkipJobs runs all the requested jobs and skips them .
1243	validateContextOverlap returns an error if any of the jobs overlap .
1244	RunRequested creates a new ProwJob .
1245	skipRequested skips all pending jobs that need to be skipped .
1246	Match returns true if the label matches the specified event .
1247	Match returns true if the event matches the specified event .
1248	AddFlags adds flags to the specified FlagSet .
1249	AddFlagsWithoutDefaultGitHubTokenPath adds default flags to the given flagset .
1250	Validate validates GitHub options
1251	GitClientWithLogFields creates a GitHub client using the provided credentials .
1252	GitClient creates a GitHub client using the given secret .
1253	GitClient returns a git client
1254	toMap converts a list of groups into a map .
1255	findChanges returns a list of changes that have been added to the given list .
1256	CreateDatabase creates a new database
1257	ShouldReport returns true if the Prow job should report the report .
1258	Report implements the Reporter interface .
1259	MarkComplete marks the set as completed .
1260	NewJobAgent returns a new instance of JobAgent
1261	Start starts the job agent .
1262	Jobs returns the list of active jobs .
1263	Prows jobs
1264	GetProwJob gets a ProwJob by ID .
1265	GetJobLog gets the logs for a job
1266	unionStrings returns the union of two strings .
1267	Apply returns a copy of this policy .
1268	GetOrg returns the organization with the given name
1269	GetRepo gets a repository by name
1270	GetBranch returns the branch with the given name
1271	GetPolicy returns the policy for the given branch .
1272	UpdateIssueEvents updates issue events
1273	enqueueKey adds a key to the workqueue .
1274	rrowJobStatus returns the ProwJobState for the given build .
1275	buildEnv returns a map of environment variables for the given build .
1276	defaultArguments adds default arguments to TemplateInstantiationSpec .
1277	defaultEnv adds default environment variables to the container
1278	injectSource injects b into b .
1279	injectedSteps returns the steps that need to be injected into the container .
1280	determineTimeout returns the duration for the given BuildSpec . If no timeout is specified defaultTimeout is returned .
1281	makeBuild builds a build from a ProwJob .
1282	newLabels creates a slice of labels from an issue .
1283	newAssignees creates new assignees from given issue .
1284	NewIssueComment creates a new sql . Comment .
1285	messageFilter returns a pqutil . Filter based on the current revision
1286	IsSuccess returns true if the build is a success
1287	IsFailure returns true if the build is a failure .
1288	IsAborted returns true if the build is aborted .
1289	ProwJobID returns the job s job ID if it exists
1290	BuildID returns the buildID of the build .
1291	CrumbRequest unmarshals a crumb request .
1292	Measurement metrics for a specific request .
1293	GetSkipMetrics retrieves metrics for a given path
1294	Get performs a GET request .
1295	helper function to perform a request .
1296	doRequest creates a new http . Response .
1297	getJobName returns the job name for the given ProwJobSpec .
1298	getBuildPath returns the path to the jenkins job
1299	GetJobInfo gets JobInfo from ProwJobSpec
1300	JobParameterized returns true if the job is a parameterized
1301	EnsureBuildableJob ensures that a build is still running .
1302	LaunchBuild launches a new build .
1303	Build builds a new build
1304	BuildFromSpec creates a new build from the given spec
1305	GetEnqueuedBuilds returns all enqueued builds for the given jobs .
1306	Abort aborts a build .
1307	PresubmitToJobSpec builds a JobSpec from a presubmit job .
1308	PostsubmitToJobSpec builds a JobSpec from a postsubmit config .
1309	PeriodicToJobSpec builds a JobSpec from a periodic job .
1310	GetBuildID returns the build ID for a build .
1311	listGcsObjects lists all GCS objects in a bucket .
1312	FindBaseProfile returns the base profile of the build
1313	sortBuilds sorts a list of build numbers
1314	GetAll returns all the known regions
1315	NewEventClient returns a new EventClient
1316	PruneComments removes comments from the GitHub repository .
1317	FormatResponse returns a string representation of the user .
1318	FormatSimpleResponse returns a simple friendly message for the given user .
1319	FormatICResponse formats an issue comment .
1320	FormatResponseRaw formats a response into a formatted string .
1321	Validate validates options
1322	Encode returns the JSON encoding of options .
1323	RegisterIssueHandler registers an issue handler for the given plugin .
1324	RegisterIssueCommentCommentHandler registers an issue comment handler .
1325	RegisterPullRequestHandler registers a new pull request handler .
1326	RegisterStatusEventHandler registers a new status event handler .
1327	RegisterPushEventHandler registers a push event handler .
1328	RegisterReviewEventHandler registers a new review event handler .
1329	RegisterReviewCommentEventHandler registers a new review comment event handler .
1330	RegisterGenericCommentHandler registers a generic comment handler .
1331	NewAgent returns a new Agent
1332	InitializeCommentPruner initializes the comment pruner .
1333	CommentPruner returns the scheduler .
1334	Load config from a file
1335	Config returns the configuration .
1336	Set sets the current configuration .
1337	Start loads the plugin config
1338	GenericCommentHandlers returns a map of GenericCommentHandlers .
1339	IssueHandlers returns a map of issueHandlers .
1340	IssueCommentHandlers returns a map of issue comment handlers .
1341	PullRequestHandlers returns the registered pull request handlers .
1342	ReviewEventHandlers returns a map of registered plugins .
1343	ReviewCommentEventHandlers returns a map of track comment events .
1344	StatusEventHandlers returns a map of status events .
1345	PushEventHandlers returns the registered push event handlers .
1346	EventsForPlugin returns the list of registered event handlers .
1347	insertLink inserts a new link to the start of the start and returns true if it was modified .
1348	HelpProvider returns the plugin help .
1349	getPatch creates a patch for the given repository .
1350	releaseNoteFromParentPR returns the release - note release - note release - note .
1351	ValidatePayload returns true if the payload is a valid payload .
1352	PayloadSignature returns a signature for a given payload .
1353	updateString returns true if the two strings are equal false otherwise .
1354	updateBool is a helper function to update a bool value .
1355	configureOrgMeta configures the metadata for the given org .
1356	configureTeamRepos configures the repository for the given team .
1357	ShouldReport reports whether the given Prow job should report the report .
1358	Run executes the given job spec .
1359	Format implements Logrus . Formatter .
1360	FindLabels finds all labels that match a regular expression
1361	AddFlags adds commands to the specified FlagSet .
1362	NewAgent returns a new Agent
1363	HandleLogin returns an http . HandlerFunc for the client .
1364	HandleLogout is the handler for the login session
1365	serverError writes an error to the response .
1366	FromItem converts Item to ResourceConfigObject
1367	GetItems returns the list of items
1368	SetItems sets the items in the config collection
1369	UnmarshalText implements the json . Unmarshaler interface for RepoPermissionLevel .
1370	IsAssignee returns true if the given login is an assignee .
1371	IsAuthor returns true if the given user is an author .
1372	HasLabel returns true if the issue has the given label
1373	Branch returns the branch of the push event .
1374	truncate truncates the input string .
1375	reportStatus reports the status of pj .
1376	parseIssueComments parses issue comments and returns a list of issue comments .
1377	createComment generates comment for a report .
1378	Config returns the lens configuration .
1379	Callback callback func
1380	FormatRecord returns a string representation of a record .
1381	Namespace returns a client with the given namespace .
1382	NewFakeClient returns a new Client instance
1383	NewClientInCluster returns a new client in the cluster
1384	NewClientFromFile creates a new Client from a file
1385	NewClient creates a new client
1386	ReplaceConfigMap replaces a configMap with the given namespace
1387	GetDiskUsage returns the disk usage of the specified path
1388	GetATime returns the file at path
1389	RegisterLens registers a new lens .
1390	GetLens returns a lens by name .
1391	LastNLines returns the last n lines in the artifact .
1392	NewClient returns a new client
1393	WriteMessage sends a message to Slack
1394	MarkAndSweep removes a NATGateway from the set
1395	ListAll returns all NAT gateways
1396	NewClient returns a new Client .
1397	Acquire acquires a resource .
1398	AcquireWait waits for a resource to be available and returns a resource .
1399	AcquireByState acquires a set of resources for a given state .
1400	ReleaseAll releases all resources in the storage .
1401	ReleaseOne releases a resource
1402	UpdateAll updates all resources in the store
1403	SyncAll synchronizes all resources in the storage .
1404	UpdateOne updates a single resource
1405	Metric returns a single metric .
1406	HasResource returns true if there is a resource
1407	DialContext implements the Dialer interface .
1408	NewDashboardAgent creates a new DashboardAgent
1409	QueryPullRequests returns pull requests
1410	GetHeadContexts returns the list of contexts for the given pull request .
1411	ConstructSearchQuery builds the search query for the given login .
1412	NewBundledStates returns a BundledStates instance
1413	ReceiveEvent implements the BundledState interface .
1414	manage returns the age of all states that have been loaded .
1415	Percentile returns the age of age at the given time .
1416	NewMetrics returns a new Metrics object .
1417	NewDiskCache returns a new http . RoundTripper wrapping the given delegate .
1418	NewMemCache returns a new http . RoundTripper backed by the delegate cache .
1419	NewFromCache returns a new RoundTripper based on the delegate cache .
1420	ProwV1 retrieves the ProwV1Client
1421	Prow retrieves the ProwV1Client
1422	NewOwners returns a new owner for the given filenames .
1423	GetApprovers returns a map of app names to their Approvers
1424	GetAllPotentialApprovers returns the list of approvers that the user has access to .
1425	GetReverseMap returns a map of approver names to the list of approver names .
1426	tempUnapprovedFiles returns a list of unapproved files that are not approved .
1427	KeepCoveringApprovers returns the list of apps that have been approved .
1428	GetSuggestedApprovers returns a list of approved apps that are notapproved .
1429	GetOwnersSet returns the set of owned owners .
1430	GetShuffledApprovers returns a slice of random permutations
1431	String returns a string representation of the approval .
1432	IntersectSetsCase returns the intersection of two sets .
1433	NewApprovers returns a new Approvers
1434	AddLGTMer adds an approval to the approval list .
1435	RemoveApprover removes an approval from the given login .
1436	AddAssignees adds an assignees to the current user
1437	GetCurrentApproversSetCased returns the current approvers set
1438	GetFilesApprovers returns a map of all the apps in the current user
1439	NoIssueApprovers returns a map of Approppers that are not in the same order .
1440	Returns a list of all the files that have been approved
1441	GetFiles returns the list of approved files
1442	IsApproved returns true if the current Approved has been approved
1443	ListApprovals returns all Approval objects
1444	ListNoIssueApprovals returns the list of Approval
1445	GenerateTemplate is the same as GenerateTemplate but executes a template with the given template .
1446	writeTemplate writes a template to outputPath .
1447	Labels returns all the configured repositories .
1448	LabelsForTarget returns a list of labels filtered by target .
1449	LoadConfig loads configuration from disk .
1450	loadLabels loads the labels for the given repositories .
1451	kill marks the label as killed .
1452	create creates a new update .
1453	classifyLabels takes a list of labels and returns a map of the labels that have the same labels .
1454	linkify returns a link to the given text .
1455	NewCache creates a new cache
1456	KeyToPath returns the path to the given key .
1457	ensureDir ensures the directory exists .
1458	Put puts content into the cache
1459	Get reads the key from the cache
1460	Delete removes the key from the cache
1461	NewGCSArtifact creates a new GCSArtifact
1462	Size returns the size of the GCS artifact .
1463	ReadAll returns the contents of the GCSArtifact .
1464	ReadTail reads the last n bytes of the artifact
1465	gzipped returns true if the content is gzipped
1466	optionsForRepo returns the welcome settings for the given repository .
1467	List lists all ProwJobs in the indexer .
1468	ProwJobs returns an object that can list and get ProwJobs .
1469	List lists all ProwJobs in the indexer for a given namespace .
1470	RunsAgainstAllBranch returns true if this branch has all branches
1471	Intersects returns true if this br intersects .
1472	ShouldRun implements RegexpChangeMatcher .
1473	RunAgainstChanges returns true if the changes match the given changes .
1474	CouldRun returns true if the postsubmit has been run .
1475	ShouldRun determines if we should run the post submitcher
1476	CouldRun returns true if the given baseRef should be executed .
1477	ShouldRun implements Presubmit .
1478	GetPresubmit returns the presence of a given repository
1479	SetPresubmits sets the Presubmits for the job
1480	SetPostsubmits sets the list of postsubmit regexps
1481	AllPresubmits returns all Presubmits filtered by repos .
1482	AllPostsubmits returns a slice of Postsubmit objects .
1483	AllPeriodics returns all periodic periodic jobs
1484	ClearCompiledRegexes clears all the compiled regexps
1485	Empty returns true if the configuration is empty false otherwise .
1486	NewClient returns a new Client .
1487	ExpandAlias returns the name of the given alias .
1488	ExpandAliases expands all of the aliases in the repository .
1489	ParseFullConfig parses the given YAML bytes .
1490	ParseSimpleConfig parses the given YAML bytes .
1491	decodeOwnersMdConfig is the same as decodeOwnersMdConfig
1492	findOwnersForFile finds the owner for the given file .
1493	FindApproverOwnersForFile returns the owner of the given file .
1494	FindReviewersOwnersForFile returns the owner of the given file .
1495	FindLabelsForFile returns the set of labels for the given file .
1496	IsNoParentOwners returns true if the given path is no parent ownership .
1497	Ratio returns the ratio of the coverage .
1498	FromPayload implements the PeriodicProwJob interface .
1499	ToMessage converts PeriodicProwJobEvent to a pubsub message .
1500	UnmarshalText implements the encoding . TextUnmarshaler interface .
1501	compileApplicableBlockades takes a list of blocks and compiles them into a list of blocked blocks .
1502	calculateBlocks returns the summary of the pull request .
1503	MergeMultipleProfiles merges two profiles .
1504	AddFlags adds commands to the given FlagSet .
1505	processNextItem processes the next item in the queue
1506	handleErr is called when an error happens .
1507	AggregateFilter aggregates a set of filters against a set of filters .
1508	FilterPresubmits filters the list of presubmits and returns a list of jobs that need to be run .
1509	MakeCommand creates a new cobra command
1510	Push implements heap . Interface .
1511	Pop implements the Pop interface .
1512	NewFakeOpenPluginWrapper returns a new FakeOpenPluginWrapper
1513	ReceiveIssue is part of the Interface interface .
1514	Validate makes sure the options are valid
1515	Complete populates the options from the options
1516	Set sets the raw format
1517	Checks if the binary is installed
1518	output executes the command and returns the output .
1519	projects returns a list of projects in the project .
1520	selectProject returns a list of available projects
1521	createCluster creates a new cluster
1522	createContext creates a new GKE cluster
1523	contextConfig loads the config and returns it .
1524	selectContext is a helper function to select a context
1525	applyCreate executes the create command
1526	determineSkippedPresubmits returns a list of presubmitted jobs that need to be skipped .
1527	Dispatch dispatches to the influxdb plugin .
1528	CreateIssue creates a new issue .
1529	CreateStatus creates a new repository status .
1530	ForEachPR iterates through all of the repositories in the repository and runs them on the given repository .
1531	GetCollaborators returns the list of collaborators for the given organization .
1532	GetCombinedStatus gets the status of a repository .
1533	GetIssues returns the list of issues for the given repository .
1534	GetRepoLabels returns a list of all repositories in given repository .
1535	GetUser gets the user with the given login .
1536	checkConfigValidity verifies that auth is valid
1537	createSystemdLogfile creates a journalctl for the given service .
1538	createFullSystemdLogfile creates the full system systemd log file .
1539	createSystemdLogfiles creates systemd log files for all systemd services .
1540	prepareLogfiles creates logfiles for given node .
1541	writeSuccessMarkerFile writes success marker file to GCS .
1542	MakeCommand returns a cobra command for Junit
1543	warnDeprecated is used to warn if the current time is older than last .
1544	Describe returns the description of the RequireMatchingLabel
1545	TriggerFor returns the trigger for the given organization .
1546	EnabledReposForPlugin returns the repositories for the given plugin
1547	EnabledReposForExternalPlugin returns the list of repositories for an external plugin
1548	SetDefaults sets defaults
1549	validatePlugins returns an error if the config is not valid
1550	ShouldReport reports whether the Prow job should report the status of a ProwJob .
1551	Run runs a deep copy of refs .
1552	PathForRefs returns the path to the given refs .
1553	gitCtxForRefs returns a git context for the given refs .
1554	commandsForBaseRef returns the commands for the given refs .
1555	gitTimestampEnvs returns the environment variables for the given timestamp .
1556	gitRevParse returns the revision of the git commit .
1557	commandsForPullRefs returns the list of commands for the given refs .
1558	ProduceCovList generates a CoverageList from a list of profiles .
1559	popRandom pops random string from set
1560	resolve sets up kubeconfig if needed .
1561	ProwJobClientset returns the constructor for RWJobClientset
1562	ProwJobClient returns a pointer to a ProwJobClient
1563	InfrastructureClusterClient implements the InClusterClusterClient interface .
1564	BuildClusterClients returns a list of kubernetes pods for a given namespace
1565	Age returns the duration of the active state .
1566	ReceiveEvent returns the state of the active state
1567	ReceiveEvent returns the active state for the given event .
1568	Active returns true if all states are active .
1569	Age returns the minimum duration between two states .
1570	ReceiveEvent receives an event and returns the state of the MultiState .
1571	ProwJobs returns a ProwJobInformer .
1572	ItemToResourcesConfig converts Item to ResourcesConfig
1573	Copy returns a deep copy of the TypeToResources
1574	MakeCommand creates a new cobra command
1575	incrementNumPendingJobs increments the number of pending jobs .
1576	setPreviousReportState updates the previous report state for the current reporter .
1577	SyncMetrics is part of the Controller interface .
1578	DumpProfile writes a profile to writer .
1579	blocksEqual compares two profiles .
1580	NewProwJobInformer constructs a new informer for ProwJob type . Always prefer using an informer factory to get a shared informer instead of getting an independent one . This reduces memory footprint and number of connections to the server .
1581	NewFilteredProwJobInformer constructs a new informer for ProwJob type . Always prefer using an informer factory to get a shared informer instead of getting an independent one . This reduces memory footprint and number of connections to the server .
1582	New returns a new spy instance
1583	Lenses returns a list of all the available licenses
1584	JobPath returns the path of the job .
1585	RunPath returns the path of the executable
1586	ExtraLinks returns a slice of extra links for the start of the start .
1587	needDemux returns a list of plugins that need to be demuxed .
1588	demuxExternal dispatches to external plugins .
1589	Dispatch sends a POST request to the given endpoint .
1590	AddFlags adds flags related to plugin
1591	CheckFlags returns an error if the plugin is invalid .
1592	ReceiveIssueEvent is used to receive an issue .
1593	Load loads the config from the given config and returns it .
1594	loadConfig loads the config from the given path .
1595	yamlToConfig converts a yaml file into a JobConfig
1596	ReadFileMaybeGZIP reads a GZIP file or returns gzipped bytes .
1597	finalizeJobConfig is responsible for setting the default config values
1598	validateComponentConfig validates the components of the component .
1599	ConfigPath returns the default config path
1600	ValidateController validates the controller
1601	defaultJobBase is used to set default values
1602	SetPresubmitRegexes sets the ResubmitRegexes regexes for the set of triggers
1603	setBrancherRegexes sets the Reancher regexes
1604	SetPostsubmitRegexes sets the regexp pattern for Postsubmit requests
1605	Body returns the body of the artifact .
1606	NewBoskosHandler returns a http . ServeMuxHandler
1607	ErrorToStatus converts an error to an http status code .
1608	DumpProfile dumps the profile to stdout .
1609	LoadProfile loads profiles from stdin
1610	NewClient returns a new Client .
1611	SetCredentials sets the credentials for the client
1612	Checkout checks the commit to the given commit .
1613	CheckoutNewBranch checks if a branch is a new branch
1614	Merge merges the given commit into the repository .
1615	CheckoutPullRequest sends a checkout request to the remote repository .
1616	Config runs a git config command
1617	retryCmd is the same as retryCmd but returns the combined output of the command .
1618	LabelsAndAnnotationsForSpec returns the labels and annotations for the given spec
1619	ProwJobToPod converts a ProwJob into a Pod .
1620	CloneLogPath returns the path to the log file for the given volume .
1621	cloneEnv returns a clone of the given options .
1622	sshVolume returns a mountpoint for a secret
1623	InjectEntrypoint injects an entrypoint into the container
1624	PlaceEntrypoint creates a new entrypoint .
1625	kubeEnv returns a list of environment variables sorted by name
1626	Client returns a kubernetes client for the Kubernetes cluster
1627	handle handles the event .
1628	SendHook sends a hook to the given address .
1629	janitorClean performs a clean action on the given resource .
1630	janitor is a long - running routine that will run the garbage collector .
1631	Run starts the pull server
1632	specToStarted returns a gcs . Started . Started .
1633	Run runs the spec .
1634	hasPRChanged returns true if the pull request has been changed .
1635	UpdateIssues retrieves issues from database
1636	handleReviewEvent handles a review event .
1637	findAssociatedIssue returns the number of associated issues in the given org
1638	optionsForRepo returns the approval options for the given repository .
1639	localOnlyMain is an http . ServeMux .
1640	summarize sums the Coverage
1641	Subset returns a new CoverageList with the given prefix .
1642	ListDirectories returns a list of directory names
1643	readRequest reads an AdmissionReview from io . Reader .
1644	handle handles the request
1645	writeResponse writes the response to w .
1646	onlyUpdateStatus is used to update the status of a pod
1647	convertSuiteMeta converts a suite meta into a resultstore .
1648	NewHealth returns a new health instance
1649	ServeReady is the handler for Ready .
1650	NewController creates a new controller .
1651	newExpectedContext returns a context with the given string .
1652	contextsToStrings converts a slice of contexts into a slice of strings .
1653	filterSubpools returns a map of sub - pool sub - pools .
1654	filterSubpool returns a copy of the given subpool .
1655	poolPRMap returns a map of pull requests from a subpool .
1656	failureContexts returns a slice of missing contexts that are missing in the context .
1657	Accumulate takes a list of pull requests and applies them to each pull request .
1658	tryMerge is a helper function to check if mergeFunc is in progress .
1659	prChanges returns the changes for the given pull request .
1660	prune is used to prune the agent cache .
1661	DividePool divides a pool and returns a map of subpools .
1662	AggregateProfiles concatenates multiple profiles .
1663	countToBoolean converts a profile to a list of profiles .
1664	NewStorage creates a new storage instance .
1665	AddResource adds a resource to the storage .
1666	DeleteResource deletes a resource
1667	UpdateResource updates a resource .
1668	GetResource retrieves a single resource from the storage .
1669	GetResources returns a list of all the resources in the storage .
1670	SyncResources implements storage . Storage .
1671	ParseConfig parses a YAML configuration file .
1672	problemInFiles returns a map of files in the given files .
1673	NewPodLogArtifact creates a new PodLogArtifact
1674	CanonicalLink returns the full URL of a PodLogArtifact
1675	ReadAt implements the io . ReaderAt interface
1676	ReadAll reads all the pod logs
1677	ReadAtMost reads n bytes of pod log
1678	ReadTail gets the n bytes of the pod log
1679	newProblems returns a map of problems from a set of review comments .
1680	blemsInFiles returns a map of lint in the given files .
1681	undoPreset removes the given preset from the given preset .
1682	undoPresubmitPresets will undo the set of preset labels .
1683	yamlBytesStripNulls removes null values from yaml bytes .
1684	monitorDiskAndEvict monitors disk usage
1685	difference returns a new instance of orgRepoConfig .
1686	union returns the union of all repositories in c2 .
1687	clearStaleComments removes comments from the repository .
1688	determineReleaseNoteLabel determines the release description of the release .
1689	getReleaseNote extracts the release note from the body .
1690	NewClient returns a new Client .
1691	Acquire acquires a resource and returns it .
1692	ReleaseOne releases a resource
1693	UpdateAll is used to update all the current state .
1694	GetGitHubClient returns a GitHub client for the given access token
1695	GetUsername returns the username of the github user
1696	CreateTokenHandler creates a TokenHandler from an io . Reader
1697	CreateTokenHandlers creates token handlers
1698	String returns a string representation of the indentifier .
1699	TerminateOlderPresubmitJobs terminates the presubmit job .
1700	PushMetrics pushes metrics to the given endpoint
1701	RateLimiter returns a rate limiter for the given controller .
1702	checkExistingStatus returns the current status for a given pull request .
1703	checkExistingLabels returns true if there are no issues in the repository .
1704	handle is the main entry point for the repository .
1705	MarkdownSHAList returns a MarkdownSHAL for the given list of commits .
1706	PathForSpec returns the full path for a given job spec .
1707	AliasForSpec returns the alias for the given job spec .
1708	RootForSpec returns the path for the given job spec .
1709	NewSingleDefaultRepoPathBuilder returns a RepoPathBuilder that uses the given organization and repository .
1710	NewExplicitRepoPathBuilder returns a RepoPathBuilder that can be used to resolve repositories .
1711	RegisterSourceOrDie registers a new IssueSource .
1712	CreateAndSync creates a new instance of IssueCreator
1713	loadCache loads the cache from the repository .
1714	setIntersect is used to split two strings
1715	sync returns whether the given issue is synced or not .
1716	GetAWSCreds extracts the credentials from the resource
1717	stpper returns a channel that fires on SIGTERM and SIGTERM .
1718	newPipelineConfig creates a new pipeline config .
1719	KubeClient returns a Kubernetes client
1720	ProwJobClient returns a client for kubernetes jobs .
1721	resolveSymLink is used to resolve symlinks
1722	readJSON reads an object from the bucket .
1723	listSubDirs returns all subdirectories for a given prefix .
1724	listAll returns all keys in a given prefix .
1725	listBuildIDs returns a list of build IDs for the given root .
1726	FilterProfilePaths returns a list of profiles matching the given profile .
1727	LoadSecrets loads the secrets from the given paths .
1728	LoadSingleSecret loads a single secret from a file
1729	Set sets the bool value
1730	NewOpener returns a new OpenAPI client .
1731	IsNotExist returns true if err is not nil .
1732	LogClose logs a closer
1733	Writer opens and returns an io . WriteCloser .
1734	InitGitHubOAuthConfig initializes GitHub OAuth2 .
1735	deltaDisplayed converts a coverage change to a string .
1736	makeTable returns a formatted table for the given coverage .
1737	ContentForGitHubPost returns the output for the GitHub .
1738	AddFlags adds CLI flags to the CLI
1739	CheckFlags validates client flags
1740	getGitHubClient returns the github client
1741	limitLimitsCheckAndWait checks if the current rate limit is exceeded
1742	FetchIssues fetches issues from Git repository .
1743	hasID returns true if the given issue has the given ID .
1744	FetchIssueEvents fetches issue events from GitHub API .
1745	isPRChanged returns true if the pull request is a PRChanged event .
1746	NewFetcher returns a new Fetcher .
1747	fetchRecentIssues fetches and pushes new issues .
1748	fetchRecentEventsAndComments fetches issue - events and comments .
1749	Fetch fetches recent issues and comments .
1750	Issues returns the list of issues for flaky jobs .
1751	Title returns the title of the flaky job .
1752	Labels returns a list of labels for the flaky job .
1753	ReadHTTP is a wrapper around http . ReadHTTP
1754	String sorts the lines by timestamp .
1755	NewJobSpec creates a new JobSpec from a ProwJobSpec
1756	ResolveSpecFromEnv loads a JobSpec from environment variables
1757	EnvForSpec returns the environment variables for the given JobSpec .
1758	EnvForType returns the environment variables for a given job type .
1759	getRevisionFromRef gets the revision from the given refs
1760	GetRevisionFromSpec returns the revision of the job spec
1761	helpProvider returns the plugin help .
1762	load parses the files in the given io . Reader .
1763	loadPaths loads the paths from the given io . Reader .
1764	Match returns true if the path matches the given path .
1765	CreateDatabase creates a new influxdb database .
1766	mergeTags returns a new tags with the default tags .
1767	tagsToWhere converts tags to query string .
1768	Push creates a new point at the specified date .
1769	artifact fetches the pod log from the source .
1770	serve serves prometheus metrics .
1771	gather is a long running goroutine .
1772	makeRequest builds a Github BranchProtectionRequest from the given policy .
1773	makeReviews creates a new RequiredPullRequestReviews from the given policy .
1774	Header returns the header for the given artifacts .
1775	Callback is the callback function for the image
1776	logLinesAll returns a slice of log lines .
1777	executeTemplate executes a template on the given resource .
1778	DeepCopyObject returns a deep copy of the resource .
1779	FromItem converts Item to ResourceObject
1780	SetItems sets the items in the collection
1781	DeepCopyObject returns a deep copy of the resource .
1782	useContext executes kubectl config
1783	currentContext returns the current context
1784	command executes a command and returns the result .
1785	describeCluster returns the description of the current cluster
1786	Set appends the string value to the slice .
1787	parseXML parses the XML body into a gcsDir object
1788	Render renders the directory
1789	Render renders a record
1790	Render renders the prefix
1791	Printf implements the Logn interface .
1792	NewClient creates a new Gerrit Client instance .
1793	SetReview sets a review
1794	GetBranchRevision returns revision of branch .
1795	queryAllChanges returns all pending changes for the given time .
1796	NewTypeFilterWrapperPlugin creates a new TypeFilterWrapperPlugin
1797	AddFlags adds flags related to plugin
1798	CheckFlags returns an error if the type is not supported .
1799	AddFlags adds flags related to kubernetes client
1800	Validate validates the kubernetes client options
1801	Client returns a client for the given type
1802	newCRDClient creates a new CRD client .
1803	createRESTConfig returns the REST configuration for the given type .
1804	registerResource registers a custom resource .
1805	newDummyClient returns a dummy client .
1806	Update implements Client .
1807	TrustedPullRequest checks to see if a pull request is trusted .
1808	buildAll runs all the jobs in the given pull request .
1809	Run runs the options
1810	AddConfig adds the given config to the storage .
1811	DeleteConfig deletes a config .
1812	UpdateConfig updates the resource configuration .
1813	GetConfig retrieves the config from storage .
1814	GetConfigs returns the list of all the resources in the storage .
1815	SyncConfigs synchronizes configs .
1816	addKnownTypes adds common types to the scheme .
1817	NewController creates a new instance of KubeProwJob .
1818	Run runs the controller .
1819	addedBlockingPresubmits returns a map of presubmit conflicts with a new set of presubmit .
1820	removedBlockingPresubmits removes all presubmitted presubmits from old .
1821	migratedBlockingPresubmits returns a map of blocking presubmitMigrationMigrationMigrationMigrationMigrationMigration .
1822	Load loads the config from the given environment .
1823	canExecuteConcurrent returns true if there is a pending job .
1824	getJenkinsJobs returns jenkins jobs from a slice of Prow jobs .
1825	terminateDupes deletes all pending build jobs .
1826	Throttle is used to throttle the throttler
1827	NewClientWithFields returns a new Github API client .
1828	NewClient returns a new Client instance .
1829	NewDryRunClient creates a new DryRunClient
1830	NewFakeClient returns a fake client
1831	request sends a request to the client and unmarshals it into retry .
1832	requestRaw attempts to unmarshal the request and unmarshals the response body .
1833	getUserData retrieves the current user data .
1834	readPaginatedResultsWithValues reads the paginated results from the given URL and returns the results .
1835	UpdatePullRequest updates a pull request .
1836	getLabels returns a list of labels .
1837	stateCannotBeChangedOrOriginalError returns a StateCannotBeChangedError from the requestErr .
1838	IsMergeable returns whether or not the current pull request is a mergeable branch .
1839	Token implements oauth2 . AccessTokenSource .
1840	ListArtifacts returns the list of artifacts for the given source
1841	KeyToJob extracts a job name from a path
1842	rrowsToGCS returns the GCS path to the GCS job .
1843	FetchArtifacts fetches all artifacts from a pod
1844	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new DecorationConfig .
1845	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new GCSConfiguration .
1846	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new JenkinsSpec .
1847	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new ProwJob .
1848	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new ProwJobList .
1849	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new ProwJobSpec .
1850	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new ProwJobStatus .
1851	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new Pull .
1852	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new Refs .
1853	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new UtilityImages .
1854	upload uploads the given invocation .
1855	ApplyDefault applies defaults to the given DecorationConfig .
1856	Validate validates the DecorationConfig .
1857	ApplyDefault applies the default values to the given utility .
1858	ApplyDefault applies defaults to the default configuration .
1859	Validate validates the GCS configuration .
1860	ClusterAlias returns the cluster s alias .
1861	NewResource creates a new Resource .
1862	NewResourcesFromConfig creates a list of resources from the given configuration .
1863	UserDataFromMap creates a UserData from a map .
1864	Set implements the Value interface .
1865	UnmarshalJSON implements json . Unmarshaler
1866	Extract extracts the given user data from the given string .
1867	Set stores the given object in the given object .
1868	Update updates the user data .
1869	ToMap converts UserData to UserDataMap
1870	FromMap populates the user data from the given map .
1871	ItemToResource converts an Item into a Resource .
1872	Run runs the given options .
1873	addSSHKeys adds SSH keys to the given paths .
1874	Issutes returns the list of issues in the cluster .
1875	loadClusters loads the clusters from the given JSON data .
1876	parseTriageData parses a triage data into a triageData structure .
1877	topClusters returns a slice of clusters .
1878	topJobsFailed returns a list of all failed jobs .
1879	Title returns the title of the cluster .
1880	Labels returns the labels of the cluster .
1881	New creates a new cron job
1882	QueuedJobs returns the list of active jobs
1883	HasJob checks if a job exists
1884	addJob adds a new job to the list of active jobs .
1885	removeJob removes a job from the scheduler
1886	UpdateComments updates comments for issue .
1887	GatherProwJobMetrics aggregates the Prow jobs for the given Prow jobs .
1888	OptionOrDefault returns the default value if the option is not set .
1889	newGCSJobSource creates a new GCSJobSource .
1890	artifacts fetches the GCS artifact by key .
1891	canonicalLink returns the full path of the job .
1892	jobPath returns the full path of the job .
1893	targetURL returns the target URL for the pull request .
1894	newBuildConfig creates a new build config .
1895	NewClient returns a new github client
1896	retry executes the given action .
1897	depaginate performs a depaginate request .
1898	NewHelpAgent creates a new HelpAgent
1899	GeneratePluginHelp generates and returns the plugin help .
1900	Get pull commit hash
1901	listJobBuilds returns a list of all the jobs in a bucket .
1902	getPRBuildData returns a list of builds for the given jobs .
1903	getGCSDirsForPR returns a map of GCS directories for the given repository .
1904	deleteFromDisk deletes the image from the filesystem
1905	doNetworksCreate creates a network .
1906	networkLoadByName loads a network by name .
1907	Transaction runs a transaction on the node .
1908	ForLocalInspectionWithPreparedStmts implements ClusterInspection .
1909	SetDefaultTimeout sets default context timeout
1910	Transaction is part of the Cluster interface .
1911	EnterExclusive is used to enter an exclusive lock .
1912	ExitExclusive is part of the Cluster interface .
1913	Close closes the cluster .
1914	TxCommit commits a transaction .
1915	ParseRemote parses a remote remotes
1916	GetContainerServer returns a container server by name
1917	GetImageServer returns an implementation of the lxd . ImageServer interface
1918	initAppArmor initializes the application .
1919	appArmorCanStack returns true if the apparmor domain can be found .
1920	containerDeviceAdd adds a device to the container
1921	profileDeviceAdd adds a device
1922	ensureImageAliases ensures that a list of image aliases exist .
1923	GetExistingAliases returns the list of existing aliases .
1924	String returns a string representation of the status code .
1925	ImagesGetExpired returns the list of images that have expired .
1926	ImageSourceInsert inserts an image source into the database .
1927	ImageSourceGet returns the image with the given image ID .
1928	ImageExists checks if a given image exists in the cluster .
1929	ImageGet returns a single image .
1930	ImageGetFromAnyProject fetches the image information from the cluster .
1931	imageFill fills image properties .
1932	ImageLocate returns the local image address .
1933	ImageAssociateNode associates a node with the specified image and fingerprint .
1934	ImageDelete deletes the image with the given id .
1935	ImageAliasesGet returns a list of all images in the given project .
1936	ImageAliasGet returns the ID of an image .
1937	ImageAliasRename renames an image .
1938	ImageAliasDelete deletes an image .
1939	ImageAliasesMove moves an image aliased by source .
1940	ImageAliasAdd adds an image to the cluster .
1941	ImageAliasUpdate updates an image .
1942	ImageLastAccessUpdate updates the last_use_access date .
1943	ImageLastAccessInit initializes the cached image .
1944	ImageUpdate updates an image .
1945	ImageInsert inserts an image into the cluster .
1946	ImageGetPools returns the list of available pools .
1947	Get image pools
1948	ImageUploadedAt updates the image upload date .
1949	ImagesGetOnCurrentNode returns all images in the current node
1950	ImagesGetByNodeID returns a map of images by node ID .
1951	ImageGetNodesWithImage returns all nodes matching image fingerprint .
1952	ImageGetNodesWithoutImage returns all nodes with the given image fingerprint .
1953	Add adds a function to the group .
1954	Start starts the group .
1955	zfsIsEnabled returns true if zfs is enabled
1956	Returns zfs version
1957	Get zfs module version
1958	ZfsPoolVolumeCreate creates a zfs pool volume
1959	zfsPoolVolumeExists checks if the given dataset exists
1960	NetworkIDsNotPending returns a map of network IDs not pending .
1961	NetworkConfigAdd is part of the ClusterTx interface .
1962	NetworkNodeJoin is used to insert a node into the transaction .
1963	NetworkCreatePending creates a new network .
1964	NetworkCreated is part of the NetworkTx interface .
1965	NetworkErrored is part of the NetworkTx interface .
1966	NetworkGet returns the network with the given name .
1967	networkNodes returns the list of nodes in the cluster .
1968	NetworkGetInterface returns the network interface .
1969	NetworkConfigGet returns the configuration values for a given network .
1970	NetworkCreate creates a new network .
1971	NetworkUpdate updates a network configuration .
1972	NetworkUpdateDescription updates the description of a network .
1973	NetworkConfigClear clears the configuration for the given network .
1974	NetworkDelete deletes a network .
1975	NetworkRename renames a network .
1976	GetContainers returns a list of all the containers
1977	GetContainersFull gets all the containers full
1978	GetContainer gets a container
1979	CreateContainerFromBackup creates a new container from a backup file
1980	CreateContainer creates a new container
1981	CreateContainerFromImage creates a container from an image .
1982	UpdateContainer updates a container
1983	RenameContainer renames a container
1984	ExecContainer executes the given exec command .
1985	GetContainerFile retrieves the contents of a container
1986	CreateContainerFile creates a container file
1987	DeleteContainerFile - delete a file
1988	GetContainerSnapshotNames returns the list of snapshot names for a container
1989	GetContainerSnapshots returns a list of snapshots for a container
1990	GetContainerSnapshot gets a snapshot of a container
1991	CreateContainerSnapshot creates a new snapshot of a container
1992	MigrateContainerSnapshot updates a snapshot of a container
1993	UpdateContainerSnapshot updates a snapshot
1994	GetContainerState returns the current state of a container
1995	UpdateContainerState updates the state of a container
1996	GetContainerLogfiles returns a list of logfiles for a container
1997	GetContainerLogfile retrieves a stream of the container logs
1998	GetContainerMetadata returns the metadata for a container
1999	SetContainerMetadata sets the metadata for a container
2000	GetContainerTemplateFiles returns the list of all the templates for a container
2001	CreateContainerTemplateFile creates a container template file
2002	Delete container template file
2003	ConsoleContainer creates a console container
2004	GetContainerConsoleLog returns an io . ReadCloser for a container
2005	DeleteContainerConsoleLog deletes a console log
2006	GetContainerBackups returns the list of container backups
2007	GetContainerBackup gets the backup of a container
2008	CreateContainerBackup creates a new container backup
2009	RenameContainerBackup creates a backup of a container
2010	DeleteContainerBackup deletes a container backup
2011	GetContainerBackupFile gets a file from a container
2012	RsyncSend executes the rsync send command
2013	patches .
2014	patchRenameCustomVolumeLVs patches the LV_ volumes for a volume
2015	patchLvmNodeSpecificConfigKeys is used to patch the Lvm_configs_config keys in the cluster .
2016	GetHTTPClient returns the HTTP client
2017	do sends a request to the backend .
2018	RawQuery performs a raw query and returns the response .
2019	RawWebsocket creates a new websocket connection .
2020	RawOperation is a wrapper around RawOperation .
2021	ProfileToAPI converts a profile into api . Profile .
2022	Profiles returns the list of available profiles .
2023	ProfileGet gets a profile by name
2024	ProfilesGet returns the list of available profiles .
2025	ProfileConfig returns the list of profiles for a given project
2026	ProfileConfigClear clears a profile .
2027	ProfileConfigAdd adds a profile config to the database .
2028	ProfileContainersGet returns a map of containers for a given project
2029	ProfileCleanupLeftover deletes profiles from the cluster
2030	ProfilesExpandConfig returns a map of profile configs
2031	ProfilesExpandDevices returns the devices expanded from the list of profiles .
2032	GetServer returns the server and etag
2033	UpdateServer updates a server
2034	HasExtension returns true if the extension is supported by the server .
2035	GetServerResources returns the server resources
2036	UseProject creates a new ServerServer instance
2037	sqliteOpen opens a database connection .
2038	Rebbalance attempts to balance the current raft node .
2039	Promote moves the node to the database .
2040	Purge removes a node from the database .
2041	List returns the list of active cluster members .
2042	Count returns the number of nodes in the cluster .
2043	Enabled returns whether or not the Raft node is enabled .
2044	memberCheckNodeStateForBootstrapOrJoin returns an error if the node is not in the raft cluster .
2045	mergeCheckClusterStateForBootstrapOrBootstrapOrJoin is used to check if the current node is in the cluster .
2046	memberCheckClusterStateForAccept returns an error if the cluster state is not valid .
2047	membershipCheckClusterStateForLeave returns an error if the node is not empty .
2048	membershipCheckNoLeftoverClusterCert returns an error if there is no leaf certificate .
2049	ConfigLoad loads the config from the database .
2050	Replace implements the Config interface .
2051	Patch is the same as Patch but returns a new map .
2052	HTTPSAddress returns the HTTPS address of the given node .
2053	CertificatesGet returns all the certificates in the cluster .
2054	CertificateGet returns a certificate by fingerprint .
2055	CertSave saves a certificate .
2056	CertDelete removes all certificates from the cluster .
2057	CertUpdate updates a certificate .
2058	createDevLxdlListener creates a net . Listener
2059	Servers is part of the raft . Instance interface .
2060	Shutdown shuts down the raft instance .
2061	raftNetworkTransport creates a new raft network transport .
2062	raftConfig returns a raft . Config with default values .
2063	raftMaybeBootstrap is used to check if the raft cluster has already been initialized .
2064	CPUResource returns the CPU CPU resource .
2065	MemoryResource returns the resource information for the current process .
2066	GetOperationUUIDs retrieves a list of UUIDs
2067	GetOperations returns all active operations
2068	GetOperation gets the operation and etag
2069	GetOperationWebsocket returns a websocket connection for an operation
2070	tryMount tries to mount a syscall .
2071	lxdUsesPool checks if the given driver is a valid storage pool
2072	ProjectURIs returns the URIs for the given filter .
2073	ProjectList returns all projects with the given filter .
2074	ProjectGet gets a project by name
2075	ProjectExists checks if a project exists in the cluster .
2076	ProjectCreate creates a new project .
2077	ProjectUsedByRef gets all projects used by a given filter .
2078	ProjectRename renames a project .
2079	ProjectDelete deletes a project
2080	PasswordCheck returns an error if the password is not valid .
2081	LoadCert loads a cert from dir
2082	WriteCert writes a certificate .
2083	NewDaemon returns a new instance of Daemon
2084	DefaultDaemon returns a new Daemon
2085	AllowProjectPermission checks if the user has access to the specified project
2086	checkTrustedClient returns an error if the request is not authorized .
2087	Authenticate checks if the request is a valid certificate
2088	State is part of the Daemon interface .
2089	UnixSocket returns the path to the local socket
2090	Stop stops the daemon .
2091	setupExternalAuthentication configures an external authentication endpoint .
2092	initializeDbObject initializes the local database .
2093	WriteJSON writes body to w .
2094	EtagHash returns the SHA256 hash of the given data .
2095	EtagCheck checks if the ETag header matches the ETag header
2096	HTTPClient returns an http . Client for the given certificate .
2097	IsRecursionRequest returns true if the request is recursion
2098	GetListeners returns a list of net . Listener objects
2099	internalSQLGet returns the database schema .
2100	internalSQLPost posts the query to the daemon .
2101	PublicKey returns the public key for the certificate
2102	PrivateKey returns the private key
2103	Fingerprint returns the fingerprint of the certificate
2104	GenCert generates a cert file
2105	PrintServerInfo prints the server information .
2106	LaunchContainers launches a container in a container .
2107	CreateContainers creates a batch of containers in the container
2108	GetContainers returns all containers in the container
2109	StartContainers starts the specified containers .
2110	setQueryParam sets the query param for a given query param .
2111	GetImages returns a list of all the images
2112	GetImageFile - get an image file
2113	GetImageSecret gets an image secret
2114	GetPrivateImage returns the private image for the given fingerprint fingerprint .
2115	GetPrivateImageFile - get the private image file
2116	GetImageAliases returns a list of all image aliases
2117	tryCopyImage tries to create a remote image .
2118	CopyImage copies an image .
2119	UpdateImage updates an image
2120	DeleteImage deletes an image .
2121	RefreshImage retrieves an image .
2122	CreateImageAlias creates an image .
2123	UpdateImageAlias updates an image alias
2124	RenameImageAlias renames an image alias .
2125	DeleteImageAlias deletes an image alias
2126	Open opens a database connection .
2127	EnsureSchema ensures that the db schema is in the local database .
2128	FilesystemDetect returns the name of the filesystem .
2129	Schema returns the current schema .
2130	updateFromV37 updates the settings for the Raft config .
2131	Arch ArchitectureGetLocal returns the architecture s architecture .
2132	NewController creates a new MAAS controller .
2133	CreateContainer creates a container .
2134	DefinedContainer returns whether the container is defined by the container .
2135	UpdateContainer updates an existing container
2136	RenameContainer renames a container
2137	DeleteContainer deletes a container
2138	Add adds an update to the schema .
2139	ensureSchemaTableExists checks if the schema table exists .
2140	queryCurrentVersion returns the current version .
2141	ensureUpdatesAreApplied applies the given updates to the current version .
2142	checkSchemaVersionsHaveNoHoles returns an error if the version is missing .
2143	checkAllUpdatesAreApplied returns an error if there is no update in the database .
2144	formatSQL formats SQL statement .
2145	GetAllXattr returns all extended extended attributes .
2146	GetErrno returns the error and whether or not the error was found .
2147	Uname returns a Utsname from the system
2148	RegisterStmt registers a new statement .
2149	PrepareStmts is part of the sql . Stmts interface .
2150	NewGateway creates a new gateway
2151	DialFunc returns dqlite . DialFunc
2152	Shutdown shuts down the gateway .
2153	Sync dumps the database to disk .
2154	Reset shuts down the router .
2155	LeaderAddress returns the address of the leader .
2156	waitLeadership waits for leadership to be elected .
2157	currentRaftNodes returns the current Raft nodes .
2158	cachedRaftNodes returns the list of Raft nodes currently cached .
2159	dqliteMemoryDial implements dqlite . DialFunc
2160	DqliteLog implements dqlite . Logger .
2161	MetadataAsMap returns the metadata as a map .
2162	MetadataAsOperation returns the operation as an Operation .
2163	MetadataAsStringSlice returns the string slice as a slice of strings .
2164	MetadataAsStruct converts the metadata to a struct
2165	Load loads the data from the file .
2166	Write writes all records to a file .
2167	AddRecord adds a record to the report .
2168	LoadConfig loads a config from a file .
2169	SaveConfig saves the config to the given path .
2170	Get returns a reader for the given path .
2171	ConfigPath returns the path to the given paths .
2172	ServerCertPath returns the path to the server certificate .
2173	NewConfig returns a new Config instance .
2174	checkForPreDumpSupport returns true if the feature is non - nil and false otherwise .
2175	preDumpLoop executes a pre - dump command .
2176	newRoot returns the cobra command for LXD
2177	APIExtensionsCount returns the number of API extensions .
2178	SelectURIs executes the Select URIs using the given parameters .
2179	SelectStrings is a convenience wrapper around SelectStrings . SelectStrings .
2180	scanSingleColumn executes a single query and scanFunc using the given scanFunc .
2181	LazyHandler applies Lazy to the context .
2182	Callers returns a slice of Callers .
2183	name returns the name of the function .
2184	TrimBelow returns the trace at the given pc .
2185	TrimAbove returns the trace at the given pc .
2186	TrimBelowName removes a trace from the stack .
2187	TrimAboveName removes a trace from the stack .
2188	TrimRuntime returns a copy of the stack trace .
2189	GetCaps returns the capabilities for the given path
2190	SetCaps sets the capabilities of a VFS namespace .
2191	Read implements io . Reader .
2192	Supported returns true if the given path is supported .
2193	GetProject returns the quota for the given path .
2194	SetProject sets the project s project ID .
2195	DeleteProject deletes a project .
2196	GetProjectUsage returns the current usage of a project .
2197	SetProjectQuota sets the project quota for a project
2198	backupLoadByName returns a backup by name .
2199	backupCreate creates a new container .
2200	Rename implements storage . Rename
2201	Delete implements Backup .
2202	backupFixStoragePool fixes the default storage pool if useDefaultPool is true .
2203	Count returns the count of the count of the given condition .
2204	CountAll returns all the rows in the database .
2205	InitTLSConfig initializes TLS configuration .
2206	copyContainerThinpool copies the container to the specified source container .
2207	copyContainerLv - copies the source container to the target container .
2208	copyContainer copies a container into the target container .
2209	copyVolume copies a volume from source pool
2210	GetPrivateImage returns the private image and secret
2211	GetPrivateImageFile is part of the simplestreams interface
2212	GetImageAliasNames returns a list of all image aliases
2213	ProtoRecv reads a protobuf message from websocket .
2214	ProtoSend sends a message to websocket .
2215	ToSendControl sends a migration control message
2216	Read implements io . Reader
2217	doContainersGetFromNode gets the list of containers from a node
2218	Retry retry function
2219	IsRetriableError returns true if err is a retryable error .
2220	AppArmorProfile returns the profile of the application
2221	StoragePoolVolumeCreate creates a new btrfs volume volume
2222	ContainerStorageReady returns true if the container is ready to be ready for use .
2223	ContainerCreateFromImage creates a new btrfs storage volume .
2224	ContainerSnapshotRename renames a snapshot of the snapshot container
2225	ContainerSnapshotCreateEmpty creates a btrfs subvolume for a snapshot container
2226	trtrfsSubVolumesDelete deletes the given subvolume .
2227	isBtrfsSubVolume returns true if the given subvolume is a btrfs subvolume .
2228	SelectConfig selects a set of keys and values from a transaction .
2229	UpdateConfig inserts the values in the given values into the database .
2230	deleteConfig removes a config from a transaction .
2231	FormatSection formats a section and returns it .
2232	GetProjects returns the list of projects
2233	GetProject gets a project
2234	CreateProject creates a new project
2235	UpdateProject updates a project
2236	RenameProject creates a new project
2237	Read implements io . Reader .
2238	Write implements io . Writer .
2239	NewCanceler returns a new Canceler
2240	Cancelable returns true if the request is canceled .
2241	Cancel cancels the operation
2242	CancelableDownload cancels the request .
2243	clusterGet returns the current cluster configuration .
2244	clusterGetMemberConfig returns the configuration keys for the cluster .
2245	ClusterPutDisable disable CA
2246	tryClusterRebalance tries to establish a new cluster .
2247	internalClusterPostRebalance proxies the cluster to the current leader .
2248	internalClusterPostPromote is used to promote a node .
2249	Filters returns list of filters by entity
2250	Parse parses a mapping from a package .
2251	findStruct returns the type of the given type .
2252	parseStruct parses a struct into a slice of fields .
2253	GetProfileNames returns the list of available profiles
2254	GetProfiles returns the list of available profiles
2255	GetProfile requests a profile by name
2256	CreateProfile creates a profile
2257	UpdateProfile updates a profile
2258	RenameProfile renames a profile .
2259	Load loads a map from the given values .
2260	Dump returns the map as a map .
2261	GetRaw returns the raw value for a given key
2262	GetString gets a string value from the map .
2263	GetBool returns the value for a given key .
2264	GetInt64 returns the value at key as int64 .
2265	update updates the values in the map .
2266	set sets the value for the given key .
2267	DoesSchemaTableExist checks if the schema table exists .
2268	selectSchemaVersions selects the versions of the database .
2269	selectTablesSQL returns the list of SQL statements for a transaction .
2270	createSchemaTable creates the schema for a transaction .
2271	insertSchemaVersion inserts the schema version in the transaction .
2272	NewState returns a new state
2273	containerLXCUnload resets the LXC object .
2274	containerLXCInstantiate creates a new instance of a containerL .
2275	initStorage initializes the storage pool .
2276	OnNetworkUp is called when a network device is created
2277	setupHostVethDevice sets up the network interface
2278	getLxcState returns the current state of the container
2279	StorageStartSensitive is the same as StorageStartSensitive .
2280	deviceExistsInDevicesFolder checks if a device exists in a folder
2281	createDiskDevice creates a disk device
2282	Set network routes
2283	Path returns the full path to the container .
2284	macasInterfaces returns a list of network interfaces .
2285	getSystemHandler returns a handler for syslog .
2286	findNvidiaMinor attempts to find the device minor from the kernel
2287	GetLogger returns a logger from syslog .
2288	SetLogger sets the logger
2289	WaitRecord waits until the given channel is closed .
2290	AddContext adds a context to the logger .
2291	NewDottedVersion creates a new version from a version string .
2292	Parse parses a version string .
2293	String implements the Stringer interface .
2294	Compare compares two versions .
2295	projectCreateDefaultProfile creates a default profile .
2296	projectChange changes the features of a project .
2297	projectIsEmpty returns true if the project is empty
2298	GetCertificateFingerprints returns the list of trusted certificates
2299	GetCertificates returns a list of all the certificates
2300	GetCertificate fetches a certificate by fingerprint fingerprint
2301	CreateCertificate creates a new certificate .
2302	UpdateCertificate updates a certificate
2303	DeleteCertificate deletes a certificate
2304	Container metadata templates
2305	Container metadata template .
2306	Container metadata template .
2307	getContainerTemplatePath returns the path to the given template file .
2308	Error implements the error interface
2309	Error implements the error interface .
2310	add adds an Error to the list .
2311	UpdateSchema updates the schema of the cluster .
2312	doProfileUpdateCluster performs a profile update on the cluster
2313	doProfileUpdateContainer updates the profile for a container
2314	getProfileContainersInfo returns the list of containers for a given profile .
2315	GetNetworkNames returns a list of network names
2316	GetNetworks returns the list of networks
2317	GetNetwork gets a network by name
2318	GetNetworkLeases requests a list of network leases
2319	GetNetworkState retrieves a network state by name
2320	CreateNetwork creates a new network .
2321	UpdateNetwork updates a network
2322	RenameNetwork renames a network .
2323	Open opens a database connection .
2324	URLEncode encodes a URL into a URL .
2325	IsUnixSocket returns true if path is a socket socket
2326	HostPath returns the host path for the given path
2327	FileMove implements os . FileMove
2328	DirCopy copies a directory to the destination directory .
2329	StringMapHasStringKey returns true if a map contains a string key
2330	TextEditor returns the text editor for the given content
2331	WriteTempFile writes a temp file
2332	RenderTemplate renders the given template using the given context
2333	Every returns a schedule that runs every interval .
2334	StoragePoolMount checks if the storage pool is mounted
2335	Dump dumps the given schema .
2336	dumpTable is used to dump a table .
2337	ProjectHasProfiles checks if the given project has profiles in the cluster .
2338	ProjectNames returns the list of available projects .
2339	ProjectMap returns a map of projects .
2340	ProjectHasImages returns true if the given project has images enabled .
2341	ProjectUpdate is used to update a project .
2342	GetCluster gets cluster information
2343	UpdateCluster updates a cluster
2344	GetClusterMemberNames returns the list of member names
2345	GetClusterMembers returns the list of cluster members
2346	GetClusterMember gets a cluster member
2347	RenameClusterMember renames a member
2348	Disconnect disconnects the event listener .
2349	CompareVersions compares two versions .
2350	HasClientCertificate returns true if the client certificate has a client certificate
2351	GenerateClientCertificate generates a client certificate
2352	LoadModule loads a module
2353	Parse parses the given Go source file .
2354	PprofAddress returns the pprof address
2355	PprofUpdateAddress is used to update a TCP address
2356	NewMethod creates a new Method .
2357	Generate implements the method of the Method interface .
2358	fillSliceReferenceField fills the field of the given slice .
2359	StoragePoolID returns the ID of a storage pool .
2360	StoragePoolIDsNotPending returns a map of all storage pools currently pending .
2361	StoragePoolNodeJoin adds a node to the cluster .
2362	StoragePoolNodeJoinCeph adds storage volumes to the storage pool .
2363	StoragePoolConfigAdd adds the given config to the pool .
2364	StoragePoolCreatePending creates a new storage pool .
2365	StoragePoolCreated is part of the ClusterTx interface .
2366	StoragePoolErrored is part of the ClusterTx interface .
2367	StoragePoolNodeConfigs returns the storage pool configuration for a given node .
2368	StoragePoolsGetDrivers returns the list of available drivers .
2369	StoragePoolGetID gets the ID of a storage pool .
2370	StoragePoolGet returns the storage pool with the given name .
2371	storagePoolNodes returns the nodes for a given storage pool .
2372	StoragePoolConfigGet gets the storage pool configuration for a given pool .
2373	StoragePoolCreate creates a new storage pool .
2374	storagePoolConfigAdd adds the given storage pool config to the storage pool .
2375	StoragePoolUpdate updates a storage pool .
2376	StoragePoolConfigClear clears the storage pool configuration .
2377	StoragePoolDelete deletes a storage pool .
2378	StoragePoolVolumesGetNames returns the list of volume names for a given pool .
2379	StoragePoolVolumesGet returns a list of storage volumes .
2380	StoragePoolNodeVolumesGet returns the list of volumes for the specified node .
2381	storagePoolVolumesGet returns the list of volume volumes .
2382	StoragePoolVolumesGetType gets the list of storage volumes for a given volume type
2383	StoragePoolVolumeSnapshotsGetType gets the list of volume snapshots for a given volume
2384	StoragePoolNodeVolumesGetType gets the list of volume types for a node
2385	StoragePoolVolumeGetType gets the storage volume for a given volume type
2386	StoragePoolNodeVolumeGetTypeGetType gets the volume type for a volume
2387	StoragePoolNodeVolumeGetTypeByProject gets the volume volume for a given volume type .
2388	StoragePoolVolumeUpdate updates the volume configuration for a volume .
2389	StoragePoolVolumeDelete deletes a volume .
2390	StoragePoolVolumeRename renames an existing volume .
2391	storagePoolVolumeReplicateIfCeph checks if the given volume ID matches the given volume ID
2392	StoragePoolVolumeCreate creates a new volume pool
2393	StoragePoolVolumeGetTypeID gets the volume ID for a given volume .
2394	StoragePoolNodeVolumeGetTypeID gets the ID of a volume on a node
2395	StoragePoolVolumeTypeToName converts a volume type to a string
2396	DevicesAdd adds devices to the database .
2397	Devices returns a list of devices matching the given project .
2398	Patches returns the list of patches in the database .
2399	PatchesMarkAppApplied marks the patch as applied .
2400	entityType returns entity type
2401	entityPost returns the post for a given entity
2402	stmtCodeVar returns a string representation of the given entity .
2403	destFunc converts a slice of fields into a string .
2404	CompareConfigs compares two configs .
2405	CopyConfig returns a deep copy of the given config
2406	NewNotifier returns a new Notifier .
2407	Events starts the event listener for the given endpoints .
2408	eventsConnect connects to the LXD server .
2409	StoragePoolInit initializes storage pool .
2410	getAAProfileContent returns the profile content for the container
2411	AALoadProfile loads the profile from the container
2412	AADestroy removes the apparmor namespace
2413	APARarseProfile executes the apparmor profile command
2414	getSystemHandler returns a standard logger handler .
2415	NotifyUpgradeCompleted is called when a upgrade is completed .
2416	KeepUpdated returns a function that periodically updates the current state .
2417	maybeUpdate checks if the cluster is in the cluster and if it is in the cluster .
2418	NewServer creates a new server .
2419	StartStatusCheck starts a goroutine that periodically refreshes the cache .
2420	SyncProjects synchronizes the list of projects .
2421	AddProject adds a project
2422	DeleteProject deletes a project
2423	RenameProject renames a project
2424	IsAdmin checks if a user is admin
2425	HasPermission checks if a user has a permission
2426	RsyncSend performs a synchronous request and waits for the response to complete .
2427	RsyncSendSetup is the same as rsyncSend except that it returns a conn and a ReadCloser .
2428	tlsClientConfig returns a tls . Config initialized with TLS certificates
2429	tlsCheckCert checks if the certificate is a valid certificate
2430	Internal method for the cluster container
2431	containerPostCreateContainerMountPoint is the same as ContainerPostCreateContainerMountPoint .
2432	Contains checks if a device is in the list
2433	Update updates the list of devices in the list and returns the new device .
2434	DeviceNames returns a sorted list of device names .
2435	Infof logs a formatted message
2436	Debugf logs a formatted string
2437	Warnf logs a formatted string
2438	Errorf logs a formatted error
2439	Critf logs a formatted string
2440	eventForward sends an event to the node .
2441	StorageProgressReader returns an io . ReadCloser that renders the progress reader .
2442	StorageProgressWriter returns an io . WriteCloser that renders a ProgressWriter .
2443	GetLSBRelease returns the version of the OSB release
2444	Reset is used to reset the package s configuration .
2445	Append appends a snippet to target .
2446	ContainerToArgs converts a container into args .
2447	ContainerNames returns the names of the containers in the given project .
2448	ContainerNodeAddress returns the address of a node .
2449	ContainersListByNodeAddress returns a map of containers in a given project .
2450	ContainerListExpanded returns the list of containers expanded by the cluster .
2451	ContainersByNodeName gets the list of containers in the transaction .
2452	SnapshotIDsAndNames returns a map of snapshot IDs and name .
2453	ContainerNodeList returns a list of containers
2454	ContainerNodeProjectList returns a list of containers for a given project
2455	ContainerRemove removes a container
2456	ContainerProjectAndName returns the project and name of the project .
2457	ContainerConfigClear clears the container config .
2458	ContainerConfigGet gets the value of a container config .
2459	ContainerConfigRemove removes a container config key from the cluster .
2460	ContainerSetStateful sets the stateful for a container .
2461	ContainerProfilesInsert inserts profiles into a container .
2462	ContainerProfiles returns the list of profiles for a container
2463	ContainerConfig returns the config values for a container
2464	ContainerSetState sets the state of the container
2465	ContainerUpdate updates a container .
2466	ContainerLastUsedUpdate updates the last_use_update date in the cluster .
2467	ContainerGetSnapshots returns a list of snapshots for a given project
2468	ContainerGetSnapshotsFull returns a list of all snapshots in a given project .
2469	ContainerNextSnapshot returns the index of the next snapshot in the cluster .
2470	ContainerPool returns the name of the storage pool .
2471	ContainerGetBackup returns a snapshot of a container .
2472	ContainerGetBackups returns a list of backup backups for a given project .
2473	ContainerBackupCreate creates a new container backup .
2474	ContainerBackupRemove removes a backup from the cluster
2475	ContainerBackupRename renames a container backup
2476	ContainerBackupsGetExpired returns the list of backups that have expired .
2477	DefaultOS returns a default OS .
2478	Init initializes the OS
2479	GetWebsocket returns the websocket connection for the operation .
2480	Refresh implements op . Refresh .
2481	CancelTarget cancels the target operation .
2482	GetTarget returns the target operation .
2483	up initializes the server .
2484	Down stops the endpoint .
2485	serveHTTP starts the HTTP server for the given kind .
2486	closeListener closes listener
2487	activatedListeners returns a map of net . Listeners from systemdListeners
2488	CandidServer returns the server URL and domains
2489	RBACServer returns the server s RBAC server
2490	AutoUpdateInterval returns the auto update interval
2491	MAASController returns the controller and key of the MAAS controller .
2492	OfflineThreshold is the default offline threshold
2493	ConfigGetString gets string value from cluster
2494	ConfigGetBool gets bool value from cluster
2495	ConfigGetInt64 gets int64 value from cluster
2496	ClusterAddress returns the address of the cluster
2497	Debug logs a message
2498	RestServer returns a new http . Server instance
2499	projectParam returns the project parameter from the request .
2500	queryParam returns the value of the query parameter if it exists .
2501	newDb creates a new cobra command
2502	Description returns the description of the operation type .
2503	Permission returns the name of the operation .
2504	OperationsUUIDs returns the UUIDs for the given node .
2505	OperationNodes returns the list of nodes associated with the given project .
2506	OperationByUUID gets the operation by UUID
2507	OperationAdd adds a new operation to the transaction .
2508	OperationRemove removes the operation with the given UUID .
2509	operations returns all operations for a given node .
2510	expireLogsTask returns a function to expire logs .
2511	absPath returns the absolute path of the given path .
2512	Keys returns the keys of the schema .
2513	Defaults returns the default values .
2514	mustGetKey panics if the key does not exist .
2515	assertKeyType panics if the key does not exist .
2516	validate validates the given value against the Key
2517	GetStoragePoolVolumes returns volume volumes
2518	GetStoragePoolVolume retrieves a storage volume .
2519	CreateStoragePoolVolume creates a new volume .
2520	CreateStoragePoolVolumeSnapshot creates a new storage volume snapshot .
2521	Get storage pool volume snapshots
2522	GetStoragePoolVolumeSnapshot gets the volume snapshot
2523	Update storage pool volume snapshot
2524	MigrateStoragePoolVolumeVolume adds a volume to a storage pool
2525	MoveStoragePoolVolume creates a remote storage volume .
2526	UpdateStoragePoolVolume creates a new storage pool volume
2527	Delete storage pool volume
2528	RenameStoragePoolVolume creates a storage volume .
2529	doStoragePoolCreateInternal is used to create a new storage pool
2530	containerGetParentAndSnapshotName returns the parent and name of the container
2531	containerLoadFromAllProjects loads the list of containers from state .
2532	containerLoadNodeAll returns all the containers in the cluster .
2533	containerLoadNodeProjectAll returns all the containers of a given project .
2534	heartbeatNode sends a heartbeat request to the database .
2535	dotPrefixMatch returns true if the short name matches the short name .
2536	ContainerMount is part of the Storage interface .
2537	ContainerStorageReady returns true if the container is ready to be ready
2538	AskChoice asks the user to ask for a given choices
2539	AskInt asks the user for a given question
2540	AskString asks the user to ask for a given question
2541	AskPassword asks the user for a password
2542	AskPasswordOnce asks the user to read from the terminal
2543	askQuestion is a helper function to ask the user to ask for an answer
2544	Read answer from stdin
2545	profilePost posts a profile .
2546	profileDelete deletes a profile
2547	IsRootDiskDevice returns true if device is a root device .
2548	GetRootDiskDevice returns the root device and the device
2549	ForwardedResponse returns a new response for the container
2550	ForwardedResponseIfTargetIsRemote returns a response for the target node .
2551	ForwardedResponseIfContainerIsRemote retrieves a response from a container .
2552	ForwardedOperationResponse returns a response from an operation .
2553	Done implements the progress renderer .
2554	Update implements the ProgressRenderer interface .
2555	Warn renders a status message
2556	UpdateProgress implements the Renderer interface .
2557	UpdateOp implements the UpdateRenderer interface .
2558	updateFromV6 deletes the zfs configuration from the database .
2559	localCreateListener creates a net . Listener
2560	NewStmt creates a new Stmt .
2561	Generate generates the statement for the statement .
2562	register adds a statement to the database .
2563	httpsLXD returns a ServerServer instance
2564	IsActive returns true if the container is active .
2565	RaftNodeAddress returns the address of a Raft_node .
2566	RaftNodeFirst inserts the first node with the given address .
2567	RaftNodeAdd adds or updates a Raft_node .
2568	RaftNodeDelete deletes a node with the given ID .
2569	RaftNodesReplace replaces Raft_nodes with the given nodes .
2570	initCGroup initializes the cgroup
2571	sqliteDirectAccess is used to access the current journal mode .
2572	ContainerGet returns a container .
2573	ContainerID returns the ID of a container .
2574	ContainerExists checks if a container exists
2575	ContainsFields returns true if there is at least one field in the map .
2576	FieldByName returns a Field by its name .
2577	FieldColumnName returns the column name for the given entity .
2578	FilterFieldByName returns the filter field by name .
2579	ColumnFields returns the list of fields for the given column .
2580	ScalarFields returns the list of fields for this mapping
2581	RefFields returns the fields of the mapping .
2582	Column returns the column name for the field .
2583	ZeroValue returns the zero value for a field .
2584	FieldColumns returns a comma separated list of fields .
2585	FieldArgs returns a comma - separated list of fields .
2586	FieldParams returns a comma - separated list of fields .
2587	FieldCriteria builds a string from a slice of fields .
2588	initDataClusterApply applies the given configuration to the container .
2589	JsonFormatEx returns a FormatFunc representation of Record .
2590	formatLogfmtValue is used to format the logfmt value .
2591	ResolveTarget resolves a target by name
2592	Write implements io . Writer .
2593	updateNodeVersion updates node version .
2594	selectNodesVersions returns the versions of the node .
2595	GetArchitectures returns the architectures of the architecture .
2596	RuntimeLiblxcVersionAtLeast returns true if the version is less than or equal to the given version .
2597	GetExecPath returns the executable path
2598	Connect connects to the LXD cluster
2599	ConnectIfContainerIsRemote checks if a container is remote or not .
2600	ConnectIfVolumeIsRemote checks if a volume is local or not
2601	SetupTrust creates a TLS certificate
2602	GetStoragePools returns the list of storage pools
2603	GetStoragePool gets the storage pool
2604	CreateStoragePool creates a storage pool
2605	UpdateStoragePool updates a storage pool
2606	Delete a storage pool
2607	GetStoragePoolResources retrieves the resource s resources .
2608	initDirs initializes the directories .
2609	Config returns the configuration for the transaction .
2610	UpdateConfig is part of the transaction . UpdateConfig interface .
2611	Config returns the configuration for the transaction .
2612	UpdateConfig is part of the QueryTx interface .
2613	storagePoolClusterConfigForEtag returns the storage pool configuration for the storage node
2614	GetEvents returns a new event listener
2615	LogfmtFormat returns a format for log records .
2616	StorageVolumeNodeAddresses returns the list of node addresses for a given storage volume .
2617	StorageVolumeNodeGet gets the name of a node .
2618	StorageVolumeConfigGet gets the config values for a given volume ID .
2619	StorageVolumeDescriptionGet gets the description of a volume .
2620	StorageVolumeIsAvailable checks if a volume is available
2621	StorageVolumeDescriptionUpdate updates the description of a volume .
2622	StorageVolumeConfigAdd adds the given volume config to the storage .
2623	StorageVolumeConfigClear clears the storage volume config .
2624	storageVolumeIDsGet returns the ids of a storage volume .
2625	StorageVolumeCleanupImages removes images from storage pool
2626	StorageVolumeMoveToLVMThinPoolNameKey deletes the volume from the database .
2627	L prints a formatted string
2628	code returns the source code .
2629	Pretty returns a string representation of input .
2630	NetworkPublicKey returns the public key of the endpoint s public key
2631	NetworkPrivateKey returns the private key
2632	NetworkCert returns the current cert .
2633	NetworkAddress returns the address of the network .
2634	NetworkUpdateAddress is used to update the endpoint
2635	NetworkUpdateCert updates the cert for the network .
2636	networkCreateListener creates a TLS listener
2637	Accept implements net . Listener . Accept .
2638	Config sets the TLS configuration
2639	IsOffline checks if the node is offline
2640	NodeByAddress looks up a node by address .
2641	NodePendingByAddress returns the node info for the given node .
2642	NodeByName looks up a node by its name .
2643	NodeName returns the name of the node in the cluster .
2644	NodeAddress returns the address of a node .
2645	NodeIsOutdated returns true if the node is older than the latest version .
2646	NodesCount returns the number of nodes in the cluster .
2647	NodeRename renames a node .
2648	nodes returns all nodes in the pending state .
2649	NodeAdd adds a new node to the transaction .
2650	NodePending sets the status of a node .
2651	NodeUpdate is used to update a node .
2652	NodeRemove removes a node from the database .
2653	NodeHeartbeat updates the heartbeat at the given address .
2654	NodeIsEmpty returns the fingerprint of a node .
2655	NodeClear is used to clear a node .
2656	NodeOfflineThreshold returns the node offline threshold .
2657	NodeUpdateVersion updates node version .
2658	Transaction runs f on the database .
2659	rollback rolls back a transaction .
2660	ProfileURIs returns the URIs for a given profile
2661	ProfileGet returns a profile .
2662	ProfileExists checks if a profile exists in the cluster .
2663	ProfileConfigRef returns the profile config for the given profile filter .
2664	ProfileUsedByRef returns the profile used by the cluster .
2665	ProfileCreate creates a profile .
2666	ProfileRename renames a profile .
2667	ProfileDelete removes a profile .
2668	ServerTLSConfig returns a tls . Config for TLS .
2669	NetworkInterfaceAddress returns the address of the network interface .
2670	IsAddressCovered returns true if the two IP addresses are equal .
2671	SelectObjects is a convenience wrapper around SelectObjects
2672	DeleteObject removes the object with the given id .
2673	loop is a long running routine .
2674	IsTerminal returns true if the file descriptor is a terminal .
2675	socketUnixListen creates a listener for a unix socket .
2676	SocketUnixRemoveStale removes a unix socket from the local socket
2677	SocketUnixSetPermissions sets the permissions on the local socket
2678	SocketUnixSetOwnership sets the ownership of the local socket
2679	cephOSDPoolExists checks if the OSD pool exists
2680	cephOSDPoolDestroy destroys the OSD pool
2681	cephRBDVolumeExists checks if the volume exists in the cluster
2682	cephRBDSnapshotProtect is a wrapper around ceph RBBD
2683	cephRBDCloneCreate create a cephRBD clone
2684	cephRBDSnapshotListCloneListCloneList returns the list of clones to the cluster
2685	cephRBDVolumeMarkDeleted marks a deleted volume as deleted
2686	cephRBDVolumeUnmark is called when a volume is deleted
2687	cephRBDVolumeRename renames a ceph volume
2688	cephRBDVolumeSnapshotRenameRenameRenameRenameRename renames an existing volume snapshot
2689	cephRBDSnapshotDelete deletes the snapshot
2690	cephRBDVolumeCopy copies the rbd volume
2691	cephRBDVolumeListSnapshots returns the list of snapshots for a volume
2692	getRBDSize gets the size of the volume
2693	getRBDFilesystem returns the name of the RBDFilesystem .
2694	copyWithoutSnapshotsFull copies the contents of the container to the target container .
2695	copyWithoutSnapshotsSparse copies the source container to the target container .
2696	GetConfigCmd returns a cobra . Command for GetConfiguration .
2697	SetConfigCmd returns cobra . Command for setting config
2698	NewSharder returns a new sharder .
2699	NewRouter returns a new instance of the Router .
2700	renewUserCredentials is used to renew a new user .
2701	NewLocalClient returns a new client
2702	AddSpanToAnyExisting adds a new span to the context and returns it .
2703	InstallJaegerTracerFromEnv installs Jaeger Tracer from environment variables
2704	UnaryClientInterceptor returns a new unary client interceptor
2705	StreamClientInterceptor returns a new streaming client interceptor
2706	UnaryServerInterceptor returns a new unary server interceptor
2707	StreamServerInterceptor returns a StreamServerInterceptor
2708	CloseAndReportTraces closes the underlying Tracer .
2709	newWriter returns a new Writer .
2710	For sets the MaxElapsedTime field of ConstantBackoff .
2711	Log implements the http . Handler interface
2712	Format implements the Formatter interface .
2713	NewGRPCLogWriter returns a new logger
2714	Read reads the config from disk .
2715	Write writes the config to disk .
2716	Read implements io . ReadReader
2717	Write implements io . Writer .
2718	NewReadWriter returns a new ReadWriter .
2719	RunGitHookServer starts a git hook server
2720	newLoggingPipe returns a new loggingPipe .
2721	Read implements io . Reader .
2722	Write implements io . Writer .
2723	Accept implements TestListener .
2724	Close closes the listener .
2725	helper function to create an error code .
2726	InitWithKube creates a ServiceEnv instance
2727	GetEtcdClient returns the etcd client
2728	GetKubeClient returns the kubernetes client
2729	NewHasher returns a new Hasher .
2730	HashJob returns the hash of a job ID .
2731	HashPipeline returns the hash of a pipeline
2732	Status returns the status of the pipeline
2733	Cancel cancels a job
2734	Conns returns grpc . ClientConn
2735	Clients returns a list of clients
2736	NewClient creates a new grpc client
2737	RunFixedArgs creates a new cobra . Command that runs numArgs .
2738	RunBoundedArgs is a wrapper for RunBoundedArgs
2739	Run is a wrapper for Run . Run
2740	ErrorAndExit prints a formatted error and exits .
2741	ParseCommit parses a git commit .
2742	ParseBranch parses a git branch .
2743	ParseFile parses a file .
2744	Set appends a string to theArgumentArg .
2745	SetDocsUsage sets the usage function for the command .
2746	makeCronCommits creates a list of cron commit commits
2747	Writer returns writer
2748	Reader implements Client .
2749	Delete calls Delete method
2750	Walk invokes the Walk method .
2751	Exists - checks if name exists
2752	GetBlock returns a block from a given hash .
2753	Health returns the health of the server .
2754	split splits the given path and returns the path and base .
2755	ValidatePath returns an error if the given path is invalid .
2756	MatchDatum checks if data is a valid datum
2757	NewCacheServer returns a new cache server
2758	authorizePipelineOp checks if the pipeline operation is valid
2759	sudo executes the given function with the given function .
2760	setPipelineDefaults sets defaults for pipeline .
2761	incrementGCGeneration increments GC generation
2762	NewDebugServer returns a new debug server
2763	Health returns the health of the cluster .
2764	newObjBlockAPIServer creates a new block API server
2765	watchGC starts GC
2766	splitKey splits a key into a key
2767	NewWriter returns a new tabwriter writer .
2768	Write writes buf to w .
2769	PrintRepoHeader prints the repository header to w .
2770	PrintRepoInfo prints repository info .
2771	PrintDetailedRepoInfo prints detailed information about a repository .
2772	PrintBranch prints the branch info .
2773	PrintCommitInfo prints the commit info to w .
2774	PrintDetailedCommitInfo prints detailed information about the commit .
2775	PrintFileInfo prints the file info to w .
2776	PrintDetailedFileInfo prints the file info .
2777	Add a string to a string
2778	RetryNotify will retry the operation until the operation is successful .
2779	Get retrieves the data from the cache .
2780	Delete deletes the given id .
2781	PrintJobInfo prints the job info to w .
2782	PrintPipelineInfo prints the pipeline info to w .
2783	PrintWorkerStatus prints the worker status to w .
2784	PrintDetailedJobInfo prints detailed information about the given job .
2785	PrintDetailedPipelineInfo prints detailed information about the pipeline .
2786	PrintDatumInfo prints a summary of the datumInfo .
2787	PrintDetailedDatumInfo prints detailed information about the datum .
2788	PrintFile prints a file
2789	ShorthandInput returns the shorthand for the input .
2790	Retrieve returns the credentials from the vault .
2791	IsExpired implements VaultCredentialsProvider .
2792	NewBranch returns a new instance of pfs . Branch .
2793	NewCommit returns a new instance of pfs . Commit .
2794	NewCommitProvenance returns a new CommitProvenance .
2795	NewFile returns a new pfs . File
2796	CreateRepo creates a repository
2797	InspectRepo returns information about a repository
2798	ListRepo implements the PFSClient interface
2799	DeleteRepo deletes a repository .
2800	BuildCommit is part of the PFSClient interface
2801	StartCommitParent is part of the APIClient interface
2802	FinishCommit finishes a pending commit .
2803	InspectCommit returns information about a commit .
2804	BlockCommit returns information about a commit .
2805	ListCommit lists all commits
2806	ListCommitF lists all commits in the given repository .
2807	ListCommitByRepo lists all commits by given repository .
2808	CreateBranch creates a new branch .
2809	InspectBranch returns information about a branch .
2810	ListBranch gets a list of branch info
2811	SetBranch creates a new branch .
2812	DeleteBranch deletes a branch .
2813	DeleteCommit deletes a commit .
2814	FlushCommit flushes pending commits .
2815	FlushCommitF flushes the given commits .
2816	FlushCommitAll flushes all commits .
2817	SubscribeCommit starts a new commit .
2818	SubscribeCommitF is part of the PFS interface .
2819	PutObjectAsync implements the PutObjectWriteCloser interface for PutObjectWriteCloser .
2820	PutObject is part of the APIClient interface
2821	PutObjectSplit is part of the APIClient interface
2822	GetObject implements the PFSClient interface .
2823	GetObjectReader implements the GetObjectReader interface
2824	GetObjects implements the GetObjectsClient interface .
2825	TagObject implements the PFSClient interface .
2826	ListObject lists all the objects in the list
2827	InspectObject implements the GetObject interface
2828	GetTag implements the PFSClient interface
2829	GetTagReader implements the GetTagReader interface
2830	ListTag calls f for each tag
2831	Compact is part of the APIClient interface .
2832	NewPutFileClient creates a new PutFileClient
2833	PutFileOverwrite is part of the PutFile interface .
2834	Close closes the putFileClient .
2835	CopyFile implements Pfs . CopyFile
2836	GetFile is part of the APIClient interface
2837	GetFileReader implements the GetFileReader interface for GetFileReader .
2838	GetFileReadSeeker returns an io . ReadSeeker for the given commit .
2839	InspectFile returns information about a file .
2840	ListFile lists all files in a repository .
2841	ListFileHistory lists all files in a given commit .
2842	ListFileF lists all files in a given repository .
2843	Walk implements the billy . Filesystem interface for GitFile .
2844	DeleteFile deletes a file .
2845	Write implements the PutObjectWriteCloser interface .
2846	Close implements the PutObjectWriteCloser interface .
2847	PrettyPrintVersionNoAdditional returns the string representation of the version .
2848	recursiveBlockQuoteExamples recursively recursively recursively recursively
2849	errMissingField is the error response for missing field .
2850	validateFields returns an error if the schema is not known .
2851	putConfig writes the given configuration to the storage .
2852	getConfig retrieves the configuration from the storage .
2853	Serve starts the gRPC server
2854	NewPuller returns a new Puller .
2855	PullTree pulls the hashes from the given tree and pulls them into the Pusher .
2856	Push pushes a commit to the given commit .
2857	PushObj pushes the commit to the given commit .
2858	PushFile pushes a file to the Pusher .
2859	Dump implements the gRPC client .
2860	Profile implements the gRPCClient interface .
2861	Binary implements the gRPC client interface .
2862	RegisterCacheStats registers the cacheStats .
2863	wait waits for n times .
2864	RunWorkload is a long running goroutine to run the workers .
2865	createRepo creates a new repository
2866	advanceCommit adds a new commit to the worker .
2867	RandString returns a random string
2868	NewReader returns an io . Reader that reads bytes from the given rand .
2869	iterDir iterates over a single file .
2870	FSSize returns the size of the hash tree .
2871	Diff performs a diff between two hashes .
2872	Serialize writes the hash tree to the io . Writer .
2873	Deserialize takes an io . Reader and deserializes the hash tree .
2874	Copy returns a copy of the hash tree .
2875	Destroy closes the hash tree .
2876	PutFileOverwrite implements the HashTree interface .
2877	PutDirHeaderFooter adds a header to the hash tree .
2878	PutFileHeaderFooter implements the HashTree interface .
2879	deleteDir deletes a directory .
2880	NewReader returns a new Reader reading from r .
2881	Read reads a MergeNode .
2882	NewWriter returns a new Writer .
2883	Write implements the Writer interface .
2884	Copy implements io . Reader
2885	Index implements the Index interface .
2886	GetRangeFromIndex returns the range from the given index .
2887	NewFilter returns a new Filter that uses numTrees .
2888	PathToTree converts path to number of subtrees .
2889	Merge writes the contents of rs to w .
2890	Hash implements the HashTree interface .
2891	IsGlob checks if pattern is a glob
2892	GlobLiteralPrefix returns the prefix of the given pattern .
2893	GetHashTreeObject - get the hash tree for a PFS object
2894	GetHashTreeTag returns the hash tree for the given hash .
2895	PutHashTree creates a new hash tree with the given tags .
2896	NewChildCursor returns a new ChildCursor .
2897	Next returns the next key and value .
2898	NewOrdered creates a new ordered directory .
2899	MkdirAll creates a new directory
2900	PutDir implements the Ordered interface .
2901	Serialize writes the contents of the sorted tree to the given io . Writer .
2902	NewUnordered returns a new Unordered structure .
2903	Ordered returns an ordered list of all the files in order .
2904	revokeUserCredentials revokes a user access token
2905	NewAPIServer returns a new APIServer .
2906	String returns the string representation of the version .
2907	Get the pipeline info
2908	removeStr removes a string from the slice .
2909	PublicCertToPEM converts a tls . Certificate to PEM format
2910	GenerateSelfSignedCert generates a tls . Certificate for the given address .
2911	ActivateCmd is a macro command to activate a Pachy command
2912	DeactivateCmd returns a cobra command for DEactivate
2913	LoginCmd returns the cobra command for the user
2914	LogoutCmd returns the command to log out to the CLI
2915	WhoamiCmd returns the user whoami command
2916	CheckCmd returns the cobra command for a repository
2917	GetCmd returns the cobra command for the get command
2918	SetScopeCmd returns cobra command for setting scope
2919	ListAdminsCmd returns the list admins command
2920	ModifyAdminsCmd returns a cobra command for cluster admins
2921	GetAuthTokenCmd returns an instance of the get auth token command
2922	UseAuthTokenCmd returns the command to use auth token
2923	Cmds returns the list of command commands
2924	ParseScope parses a scope string .
2925	IsErrNotActivated returns true if the error is a NotActivated error .
2926	IsErrPartialActivated checks if the error is a partial activation
2927	IsErrNotSignedIn returns true if the error is a NotSignedIn .
2928	IsErrBadToken returns true if the error is a bad token .
2929	IsErrNotAuthorized returns true if the error is a NotAuthorized message .
2930	IsErrInvalidPrincipal returns true if the error is a valid principal .
2931	IsErrTooShortTTL returns true if the given error is a valid TTL
2932	NewDatumFactory creates a new datumatumFactory .
2933	NewCollection creates a new collection .
2934	Path returns the full path to the collection .
2935	getIndexPath returns the path to the given value .
2936	getMultiIndexPaths returns a list of index paths for the given field .
2937	Upsert inserts a value into the collection
2938	get implements the EtcdClient interface .
2939	List is part of the Collection interface .
2940	Watch returns a watcher for the collection .
2941	WatchByIndex returns a watcher for the given index .
2942	WatchOne returns a watcher for the given key
2943	WatchOneF starts a watcher for a given key
2944	Get returns an io . ReadCloser for the given key .
2945	Keys returns a sorted list of keys in the cache .
2946	Clear removes all keys from the cache .
2947	NewHTTPServer returns a new HTTP server .
2948	NewDeployServer returns a new APIServer .
2949	Export writes the images to the given writer .
2950	Import loads an image from an io . Reader
2951	DatumTagPrefix returns the datum tag prefix .
2952	NewPFSInput returns a new PFSInput .
2953	NewPFSInputOpts creates a new PFSInput .
2954	NewJobInput returns a new JobInput
2955	NewPipelineInput returns a new PipelineInput .
2956	CreateJob creates a new PPS job
2957	ListJobF lists all active jobs
2958	ListJobF lists all the jobs for a given pipeline
2959	FlushJob flushes the given commits .
2960	FlushJobAll flushes all pending commits to the given list .
2961	DeleteJob deletes a job .
2962	StopJob stops a running job .
2963	RestartDatum is part of the APIClient interface
2964	ListDatumStream returns a list of available datum infos .
2965	ListDatumF invokes f for a given job .
2966	InspectDatum is part of the APIClient interface
2967	Next advances the iterator to the next log .
2968	InspectPipeline returns information about the pipeline
2969	ListPipeline returns the list of pipelines
2970	DeletePipeline deletes a pipeline
2971	StartPipeline starts a new pipeline
2972	StopPipeline stops a pipeline
2973	RerunPipeline revokes the pipeline .
2974	CreatePipelineService creates a new pipeline service
2975	GetDatumTotalTime returns the total duration of the process .
2976	Mount mounts a new file system
2977	NewBufPool returns a new BufPool .
2978	StorageRootFromEnv extracts the storage root from the environment
2979	BlockPathFromEnv returns the path to the given block s path .
2980	NewGoogleClient returns a new Google Cloud Storage Client .
2981	NewGoogleClientFromSecret creates a new Google Cloud API client from the given secret .
2982	NewGoogleClientFromEnv creates a new client from environment variables
2983	NewMicrosoftClientFromSecret creates a new Windows client from a secret file
2984	NewMicrosoftClientFromEnv creates a new MicrosoftClient from an environment variable
2985	NewMinioClientFromSecret creates a minio client from a secret file
2986	NewMinioClientFromEnv creates a new minio client from environment variables
2987	NewAmazonClientFromSecret creates a new client from Amazon S3 API .
2988	NewAmazonClientFromEnv creates a new client from environment variables
2989	NewClientFromURLAndSecret creates a new Client from a URL store URL .
2990	ParseURL parses a URL string into an ObjectStoreURL .
2991	NewClientFromEnv creates a new Client from environment variables
2992	NewExponentialBackOffConfig returns an exponential backoff configuration .
2993	Close closes the reader .
2994	Close closes the WriteCloser .
2995	IsRetryable returns true if err is a retryable error .
2996	RunStdin runs the command with the given stdin and args .
2997	RunIODirPath runs the command in the specified directory .
2998	NewAuthServer returns a new auth server .
2999	expiredClusterAdminCheck returns an error if the user is not an admin admin .
3000	getOneTimePassword gets the OTP code for a given username and expiration time .
3001	hashToken returns the SHA256 hash of the token
3002	getAuthToken extracts the token from the context
3003	canonicalizeSubjects takes a list of subjects and returns a list of subjects .
3004	Matches tests if the pattern matches the expected pattern .
3005	OneOfMatches is a test - spy implementation of OneOfMatch
3006	Equal asserts that two values are equal .
3007	NotEqual asserts that the expected values are equal .
3008	oneOfEquals returns true if the given slice is a slice of slices .
3009	NoneEquals tests if two values are equal .
3010	NoError panics if err is not nil .
3011	NoErrorWithinT returns an error if f is not nil .
3012	NoErrorWithinTRetry is a test - spy implementation of RunInTRetry .
3013	YesError asserts that err is not nil .
3014	NotNil asserts that the given object is not nil .
3015	Nil asserts that the given object is nil .
3016	False asserts that the given value is false .
3017	NewSTM creates a TxnResponse from the given client .
3018	NewDryrunSTM is the same as NewDryrun but uses the provided apply function .
3019	newSTMRepeatable returns a TxnResponse .
3020	newSTMSerializable returns a TxnResponse .
3021	newSTMReadCommitted is the same as NewSTMReadCommitted but does not return an error .
3022	commit is used to commit the transaction .
3023	Pipelines returns the collection of pipelines
3024	Jobs returns all jobs in etcd
3025	NewTicker returns a new ticker .
3026	nodeToMap converts etcd node to out .
3027	ServiceAccount returns a ServiceAccount .
3028	ClusterRole returns a RoleRole
3029	RoleBinding returns a RoleBinding object .
3030	GetSecretEnvVars returns the environment variables for the given storage backend .
3031	PachdService creates a new Pachd service
3032	GithookService returns the Githook service .
3033	EtcdDeployment creates a new etcd deployment .
3034	EtcdStorageClass returns the storage class for the etcd storage class .
3035	EtcdVolume builds an EtcdVolume from an etcd volume backend
3036	EtcdNodePortService returns the etcd service port
3037	EtcdHeadlessService returns an instance of EtcdHeadlessService .
3038	EtcdStatefulSet sets EtcdStatefulSet .
3039	DashDeployment returns a Deployment .
3040	DashService returns a dash service .
3041	WriteSecret is used to encode a secret
3042	GoogleSecret returns a map of secret key and credential values .
3043	WriteDashboardAssets is used to encode dashboards
3044	WriteLocalAssets writes the local assets to the encoder .
3045	WriteCustomAssets is used to encode custom assets
3046	WriteAmazonAssets is used to encode a Amazon S3 asset .
3047	WriteGoogleAssets is the same as WriteGoogleAssets but does not encode a Google Backend .
3048	WriteMicrosoftAssets writes the assets to an object
3049	Images returns the image images .
3050	AddRegistry adds the registry to the registry .
3051	withCanonicalRandomizationFactor sets the random number of random factors .
3052	Reset resets the backoff interval .
3053	Increment current interval
3054	NewBlockAPIServer returns a new BlockAPIServer .
3055	LocalStorage returns a new storage client .
3056	deleteJob deletes a job .
3057	writeXML writes an XML response to w .
3058	clean1_7HashtreePath cleans up the given path .
3059	NewFromAddress creates a new APIClient .
3060	getUserMachineAddrAndOpts parses the PachdAddress and returns the address and options .
3061	NewInCluster returns a new APIClient
3062	Close closes the API connection .
3063	DeleteAll deletes all services
3064	SetMaxConcurrentStreams sets the maximum number of concurrent streams .
3065	WithCtx returns a copy of the APIClient
3066	NewDLock returns a new DLock implementation
3067	DatumID returns the DatumID for the datum
3068	runUserErrorHandlingCode runs the user error handling code .
3069	HashDatum returns a sha256 hash of the pipeline .
3070	HashDatum15 returns the SHA256 hash of the pipeline .
3071	Status returns the status of the server
3072	Cancel cancels a request
3073	mergeStats merges two processes .
3074	mergeChunk is used to merge the chunk .
3075	IsCommitNotFoundErr returns true if err is a commit not found
3076	IsCommitDeletedErr returns true if the error is a commit deleted .
3077	IsCommitFinishedErr returns true if the error is a commit finished .
3078	IsRepoNotFoundErr returns true if the error is a repository error .
3079	IsBranchNotFoundErr returns true if the error is a branch not found .
3080	IsFileNotFoundErr returns true if err is a file not found
3081	Version returns the version
3082	validateRepoName returns an error if the repository name is not valid .
3083	newDriver creates a new storage driver .
3084	inspectCommit returns information about the commit .
3085	scratchCommitPrefix returns the prefix of the given commit .
3086	scratchFilePrefix returns the full path to the given file .
3087	getTreeForFile returns the hash tree for the given file .
3088	provenantOnInput returns true if there are no more commits .
3089	nodeToFileInfo converts a NodeInfo to a FileInfo .
3090	fileHistory iterates over a file and calls f for each file in the given history .
3091	upsertPutFileRecords is used to upsert a PutFileRecords
3092	ReadRow reads the next row
3093	NewReporter creates a new Reporter
3094	ReportUserAction reports an action to the reporter .
3095	FinishReportAndFlushUserAction is part of the reportAndFlushUser interface .
3096	Read implements io . Reader
3097	ActivateCmd returns the CLI activate command
3098	GetStateCmd returns the get state command
3099	Cmds returns the CLI commands for Enterprise
3100	NewConfiguration returns a new Configuration object
3101	Repos returns a collection of repositories
3102	PutFileRecords returns a collection of PutFileRecords
3103	Commits returns a collection of commits .
3104	Branches returns all branches
3105	OpenCommits returns a collection of pending commits
3106	NewDAG creates a new DAG .
3107	NewNode adds a new node to the DAG .
3108	Sorted returns a list of all the nodes in the DAG .
3109	Leaves returns the IDs of the DAG .
3110	Ancestors returns the ancestors of the given node .
3111	Descendants returns the descendants of the given node .
3112	Returns the IDs of all the nodes in the DAG .
3113	NewPortForwarder returns a new PortForwarder
3114	Run starts the port forwarder
3115	RunForDaemon starts a pachd daemon .
3116	RunForSAMLACS runs the samlac . RunForSAMLACS
3117	RunForDashUI runs the dash UI
3118	RunForDashWebSocket runs the dash web server .
3119	RunForPFS runs the pachd server
3120	RunForS3Gateway runs the P3 gateway
3121	Lock locks the port forwarder
3122	Close shuts down the PortForwarder .
3123	Unmarshal unmarshals the Event into a struct
3124	UnmarshalPrev implements the Event interface for Event .
3125	MakeWatcher returns a new watcher
3126	CheckType returns an error if the type is not nil .
3127	NewPool creates a new pool
3128	Do connects to the pool
3129	Close closes the pool .
3130	buildImage builds a docker image
3131	pushImage pushes a docker image to the docker registry
3132	newMinioClient returns a new minio client .
3133	newMinioClientV2 creates a new minio minio client
3134	newMinioWriter returns a new minioWriter
3135	Close closes the writer .
3136	PipelineRepo returns a pfs . Repo for the pipeline
3137	PipelineRcName returns the Rc name for the pipeline
3138	GetRequestsResourceListFromPipeline gets the resource list from the pipeline info
3139	GetLimitsResourceListFromPipeline returns the resource limits for the pipeline
3140	getNumNodes returns the number of nodes in k8s
3141	GetExpectedNumWorkers returns the number of concurrent workers in the cluster
3142	GetExpectedNumHashtrees returns the number of expected hashkeys
3143	FailPipeline is used to fail the pipeline
3144	JobInput returns a deep copy of the pipeline input .
3145	PipelineReqFromInfo builds a CreatePipelineRequest from a PipelineInfo .
3146	NewPipelineManifestReader returns a new ManifestManifestReader .
3147	NextCreatePipelineRequest returns the next create pipeline request
3148	DescribeSyntaxError returns the original error from the parsed buffer .
3149	UpdateJobState updates an etcd job state
3150	New returns a new uuid
3151	Code returns the http status code .
3152	NewHTTPError creates a new HTTPError .
3153	NewStorage returns a new Storage object .
3154	DeleteAll deletes all items in storage .
3155	Chunk returns a slice of chunkSize chunks
3156	ChunkReader returns the number of bytes read from r .
3157	NewStreamingBytesReader returns a new io . ReadCloser .
3158	WriteToStreamingBytesServer writes io . Reader to streamingBytesServer .
3159	WriteFromStreamingBytesClient reads bytes from streamingBytesClient
3160	NewSidecarAPIServer returns a PPServer .
3161	NewEnterpriseServer creates a new etcd server
3162	validateActivationCode validates activation code .
3163	Activate activates an activation
3164	Deactivate deactivates a session
3165	lookExtensions returns the path to the given path .
3166	Start starts the process .
3167	CombinedOutput runs the command and returns the combined output .
3168	StdinPipe returns an io . WriteCloser for the command .
3169	StdoutPipe returns an io . ReadCloser for the command .
3170	dedupEnvCase returns a list of key - value pairs .
3171	InputName returns the name of the input .
3172	SortInput sorts inputs .
3173	InputBranches returns the list of branches for the input input .
3174	ValidateGitCloneURL validates Git repository URL .
3175	containsEmpty checks if a slice is empty .
3176	NewAPIServer returns a new API server
3177	G ago returns the time since the timestamp .
3178	TimeDifference returns the duration difference between two timestamps .
3179	Duration converts a duration to a string .
3180	InspectCluster returns information about a cluster
3181	Extract implements the Extractor interface .
3182	ExtractAll implements the ExtractAll method
3183	ExtractWriter implements the ExtractWriter interface .
3184	ExtractURL calls ExtractURL
3185	ExtractPipeline calls ExtractPipeline API method
3186	Restore is part of the Admin API .
3187	RestoreReader is part of the Admin API .
3188	RestoreFrom restores the objects from the other controller .
3189	RestoreURL restores the given URL .
3190	IgnoreTypes returns a cmp . Option that ignores the given types .
3191	AppendEllipsis appends an ellipsis to the text .
3192	IsType returns true if t is a type .
3193	NameOf returns the name of the function .
3194	PointerOf returns a pointer to a pointer to a pointer .
3195	String returns the edit script .
3196	stats returns the current state of the edit script .
3197	connect connects p points to dst .
3198	EquateNaNs returns an option that can be used to filter the filter .
3199	Index returns the PathStep at the given index .
3200	Key returns the index of the index .
3201	String implements the Stringer interface .
3202	FormatType converts type to textNode .
3203	formatMapKey formats a map key .
3204	formatString returns a quoted string
3205	formatHex converts a uint64 to a hex string .
3206	formatPointer returns a string representation of the pointer .
3207	Visit returns true if v is visited .
3208	retrieveUnexportedField returns the value of the given field .
3209	insert inserts cname into the tree .
3210	matchPrefix returns true if the subtree matches the given path .
3211	canonicalName returns the names of the name of the struct .
3212	FilterPath returns an option that filters the given filter function .
3213	normalizeOption returns the first option in src . If src is empty it returns nil .
3214	flattenOptions recursively flattens the options into dst .
3215	CanFormatDiffSlice returns true if the value is valid for diff mode .
3216	formatASCII converts a string to an ASCII string .
3217	coalesceAdjacentEdits computes the edit stats for the edit script .
3218	SortKeys sorts keys .
3219	FormatDiff returns the diff of a value node .
3220	coalesceAdjacentRecords takes a list of report records and returns the diff stats .
3221	Diff returns the difference between two objects .
3222	statelessCompare performs a stateless compare .
3223	sanitizeValue checks if v is a valid value .
3224	Check implements cmp . Path .
3225	makeAddressable makes sure v is a valid addressable .
3226	Marshal serializes the field to the visitor .
3227	String returns the string representation of the field .
3228	Set implements the Setter interface .
3229	Inject implements the TextMapPropagator interface .
3230	Extract implements TextMapPropagator
3231	ToLogRecord converts LogData into a LogRecord .
3232	New returns a new MockTracer instance
3233	StartSpan implements opentracing . Span
3234	RegisterInjector registers injector for given format
3235	RegisterExtractor registers a new extractor for the given format .
3236	Inject injects an opentracing SpanContext
3237	Extract implements opentracing . Extractor
3238	ContextWithSpan adds a span to the context .
3239	Set implements opentracing . Span .
3240	Set implements opentracing . Span .
3241	Set sets the flag for the given span .
3242	SetString implements opentracing . Span
3243	EmitString emits a string value
3244	EmitLazyLogger emits a log . LazyLogger
3245	RunAPIChecks runs a test and returns a test suite .
3246	CheckBaggageValues returns an APICheckOption that sets baggage values .
3247	CheckExtract is a functional option on APICheck .
3248	CheckInject specifies whether or not the service should be used .
3249	CheckEverything returns an APICheckOption that can be used to check if all values have been checked .
3250	UseProbe sets the probe probe .
3251	WithBaggageItem returns a MockSpanContext that adds baggage to the span .
3252	Tags returns the span s tags .
3253	Tag returns the value associated with a given key .
3254	Logs returns a slice of log records
3255	Context returns the span context
3256	SetTag implements opentracing . SpanContext
3257	SetBaggageItem sets a baggage item
3258	BaggageItem returns the baggage associated with the span .
3259	Finish implements the Span interface .
3260	FinishWithOptions implements opentracing . Span .
3261	String returns a string representation of the span
3262	LogFields implements Span .
3263	logFieldsWithTimestamp adds fields to the log .
3264	LogKV logs key values
3265	LogEvent logs an event
3266	LogEventWithPayload is a mock
3267	SetOperationName sets the operation name
3268	registriesDirPath returns the path to the directory of the registries directory .
3269	loadAndMergeConfig loads the config from the given directory .
3270	ParseReference parses a reference into an ImageReference .
3271	NewReference creates a new ImageReference from a Docker reference
3272	CheckAuth checks to see if auth is valid
3273	doHTTP executes the HTTP request and returns the response .
3274	detectPropertiesHelper is a helper function to detect the properties of the docker registry
3275	detectProperties calls DetectProperties on the docker client
3276	getExtensionsSignatures fetches the extensions for the given manifest digest .
3277	NewTransport returns a new http . Transport .
3278	readRegistryConf reads the config file .
3279	GetRegistries returns a list of registered registries .
3280	GetInsecureRegistries returns the insecure registries
3281	RegistryConfPath returns the path to the system registry configuration .
3282	NewOptionalBool creates a new OptionalBool
3283	changeState changes the state of the policy context .
3284	Destroy implements the PolicyContext interface .
3285	policyIdentityLogName returns the name of the identity for the given image reference
3286	RequirementsForImageRef returns the policy requirements for the given image reference
3287	ParseImageName parses an image name
3288	BlobInfoFromOCI1Descriptor returns a BlobInfo from OCI1 .
3289	OCI1FromManifest creates an OCI1 from a manifest
3290	OCI1FromComponents returns an OCI1 object from the image spec
3291	newReference creates a DockerReference from a reference .
3292	tagOrDigest returns the digest or an error .
3293	updateEmbeddedDockerReference updates the image reference with the specified Docker image reference .
3294	isTTY returns true if w is a terminal .
3295	copyUpdatedConfigAndManifest copies the contents of src into a new image .
3296	createProgressBar creates a progress bar bar .
3297	copyConfig copies the config blob into the config blob .
3298	diffIDComputationGoroutine computes the diffID of the given layer stream .
3299	computeDiffID computes the diff ID for the given stream .
3300	compressGoroutine will compress the given io . Reader
3301	newDockerClient returns a new Docker client .
3302	defaultPolicyPath returns the default policy path .
3303	NewPolicyFromFile creates a new policy from a file .
3304	NewPolicyFromBytes creates a Policy from a byte array .
3305	Creates a PolicyRequirement from JSON data
3306	newPRSignedBy creates a new PRSignedBy .
3307	newPRSignedByKeyPath creates a new PRSignedByKeyPath
3308	NewPRSignedByKeyPath creates a new PolicyRequirement based on keyPath
3309	newPRSignedByKeyData creates a new PRSignedByKeyData
3310	NewPRSignedByKeyData creates a new PolicyRequirement based on key data
3311	IsValid returns true if the key type is valid
3312	newPRSignedBaseLayer creates a new signed base .
3313	newPolicyReferenceMatchFromJSON creates a PolicyReferenceMatch from JSON data .
3314	newPRMExactReference creates a new PRMExactReference .
3315	newPRMExactRepository creates a new PRMExactRepository .
3316	newImageSource returns a new storageImageSource .
3317	getBlobAndLayerID returns an io . ReadCloser for the given blob .
3318	computeID computes the ID for the given manifest .
3319	PutManifest inserts a manifest into the destination .
3320	PutSignatures stores the provided signatures .
3321	newImage returns a new storage image .
3322	newImageSource returns an ImageSource for the given image reference
3323	LoadManifestDescriptor loads manifest descriptor .
3324	Close closes the image .
3325	append appends s to the list .
3326	isMultiImage returns true if the image is multi - image .
3327	lockPath is used to acquire a lock
3328	unlockPath unlocks the ref count for the path .
3329	view is part of the database .
3330	update is used to update the database .
3331	uncompressedDigest returns the digest for the given digest or an empty string if any .
3332	appendReplacementCandidates returns a list of candidate candidates for the given bucket .
3333	indexExists checks if the index exists
3334	createSignature creates a new signature for the given image .
3335	ParseReference parses a string into an ImageReference .
3336	NewReference creates a new image reference .
3337	getIndex returns the image index
3338	LoadManifestDescriptor loads manifest descriptor .
3339	blobPath returns the path to the blob for the digest .
3340	SignDockerManifest signs a manifest with the given digest .
3341	VerifyDockerManifestSignatureSignature verifies that the provided manifest matches the provided digest .
3342	newOpenshiftClient returns a new OpenShiftClient .
3343	doRequest sends a request to the OpenShift API
3344	getImage retrieves an image from the OpenShift API
3345	convertDockerImageReference converts a Docker image reference to a docker image reference
3346	ensureImageIsResolved ensures that the image is resolved
3347	newImageDestination returns a new ImageDestination
3348	newUntrustedSignature returns an UntrustedSignature object .
3349	MarshalJSON returns the JSON encoding of untrustedSignature .
3350	UnmarshalJSON implements the json . Unmarshaler interface for untrustedSignatureError .
3351	verifyAndExtractSignature verifies that the signature is signed by the given signature .
3352	RewriteReference replaces a reference with a prefix .
3353	getV1Registries returns the list of registered Registry .
3354	getConfigPath returns the path to the system registry configuration .
3355	GetRegistries returns the list of registered registries .
3356	readRegistryConf reads the config bytes from the config file .
3357	Manifest returns the blob s manifest and metadata .
3358	ConfigUpdate updates the image config
3359	parseImageAndDockerReference parses the Docker image and returns the reference and the reference
3360	parseDockerReferences parses and returns a list of docker references .
3361	ListNames returns a sorted list of registered transports .
3362	NewReference creates a new image reference
3363	signaturePath returns the path to the manifest .
3364	ValidateImageName validates image name
3365	SplitPathAndImage returns the path and image and image components .
3366	ValidateOCIPath returns an error if the path is not a valid OCI reference .
3367	ValidateScope validates scope
3368	BlobInfoFromSchema2Descriptor converts a Schema2Descriptor to a types . BlobInfo .
3369	Schema2FromManifest creates a new Schema2 from a manifest .
3370	Schema2FromComponents creates a new schema2 schema2 from the provided config .
3371	SetAuthentication sets the authentication credentials .
3372	RemoveAuthentication removes authentication from the system
3373	RemoveAllAuthentication removes all credentials from the system
3374	readJSONFile reads the auth config file from the given path .
3375	modifyJSON reads the contents of the docker config file and returns true if it was modified .
3376	findAuthentication attempts to find the authentication credentials for the given credentials .
3377	NewDestination returns a new Destination .
3378	AddRepoTags adds tags to destination .
3379	writeLegacyLayerMetadata writes the layer metadata to the destination .
3380	sendSymlink sends a symlink to the target .
3381	sendBytes sends a byte slice to the destination file .
3382	sendFile sends a tar file to the destination .
3383	Commit closes the destination .
3384	imageMatchesRepo returns true if the image matches the given reference .
3385	resolveImage attempts to resolve an image reference
3386	Transport returns an implementation of the StorageTransport interface .
3387	StringWithinTransport returns the string representation of a storage reference
3388	PolicyConfigurationNamespaces returns the namespaces of the policy .
3389	GzipDecompressor returns an io . ReadCloser .
3390	Bzip2Decompressor returns an io . ReadCloser that decompresses bz2 .
3391	XzDecompressor returns io . ReadCloser
3392	DetectCompression detects a decompressor and returns a new decompressor .
3393	newImageDestination returns a new ImageDestination .
3394	mountBlob attempts to mount a blob .
3395	bicTransportScope returns an instance of a BICTransportScope .
3396	newBICLocationReference creates a new BICLocationReference .
3397	parseBICLocationReference parses BICLocationReference .
3398	NewSourceFromStream creates a new source from an input stream .
3399	readTarComponent reads a tar component
3400	ensureCachedDataIsPresent checks if the source is present in the source .
3401	loadTarManifest loads the manifest from the manifest file .
3402	Close closes the source
3403	newImageDestination returns a new instance of the ImageDestination interface .
3404	imageLoadGoroutine sends an image to the docker engine
3405	NewReference creates a new image reference
3406	createOCIRef creates an OCI image reference
3407	createUntarTempDir creates a temp directory for the image
3408	destructivelyPrioritizeReplacementCandidatesWithMax returns a slice of BICReplacementCandidates with maxCandidates .
3409	newImageDestination returns a new ImageDestination .
3410	resolveExistingPathToFullyExplicit returns the full path to the given path .
3411	newImageDestination returns a new ImageDestination .
3412	isDirEmpty checks if a directory is empty
3413	removeDirContents removes all the contents of a directory
3414	GetRepositoryTags returns the tags for the given image reference
3415	DefaultCache returns the default storage for the filesystem .
3416	uncompressedDigestLocked returns the decompressed digest if any .
3417	Close closes the image .
3418	PutManifest overwrites the provided manifest .
3419	Commit saves the image
3420	tarDirectory copies the contents of src into dst .
3421	ParseStoreReference parses a reference into a storageReference .
3422	chooseDigestFromManifestList chooses the digest from the manifest list
3423	ChooseManifestInstanceFromManifestList selects a digest from a manifest .
3424	manifestSchema1FromComponents builds a schema1 . Schema1 from the given components .
3425	manifestDigest returns the digest of the image .
3426	deleteImage removes the image from the registry .
3427	Schema1FromComponents creates a new schema1 from a given reference .
3428	initialize initializes schema1 .
3429	ToSchema2Config converts a schema1 config to JSON .
3430	Digest returns the digest of the manifest .
3431	MatchesDigest returns true if the manifest matches the expected digest .
3432	NormalizedMIMEType returns the normalized MIME media type .
3433	FromBlob creates a manifest from a manifest .
3434	NewReference returns a new ImageReference .
3435	layerPath returns the path to the layer s layer path .
3436	signaturePath returns the path to the file at the given index .
3437	New creates a new pool
3438	NewFunc returns a new pool with the given function closure .
3439	ProcessTimed is the same as ProcessTimed but waits for the job to complete .
3440	SetSize sets the size of the pool
3441	GetSize returns the number of workers in the pool
3442	TL returns the center of the rectangle .
3443	BR returns the center of the rectangle .
3444	CVBox creates a CvBox2D from the box .
3445	Points returns the points of the box .
3446	FOURCC is a variant of OpenCV_CC .
3447	Merge will merge the images into dst .
3448	Split the contents of src and image .
3449	AddWeighted adds a weight of src to the specified destination .
3450	And combines two IplImage objects .
3451	AndWithMask computes the intersection of src and dst .
3452	AndScalar adds a scalar to the specified src .
3453	AndScalarWithMask computes the scalar of a scalar .
3454	Or multiplies src and dst .
3455	OrWithMask computes the product of src and dst .
3456	OrScalar is similar to OrScal but does not mask the result .
3457	OrScalarWithMask computes the scalar of a scalar .
3458	AddWithMask adds src to src .
3459	AddScalar adds a scalar to src .
3460	AddScalarWithMask adds a scalar to a scalar .
3461	Subtract performs the intersection of src1 and dst2 .
3462	SubtractWithMask removes src from src2 .
3463	SubScalar is the same as SubScal but does not perform a conversion .
3464	SubScalarWithMask submits a scalar to a scalar .
3465	SubScalarRev is the same as SubScalar except that it takes a scalar value .
3466	SubScalarWithMaskRev revokes a scalar .
3467	AbsDiff computes the absolute difference between two sources .
3468	AbsDiffScalar computes the absolute value of a scalar .
3469	MeanStdDevWithMask returns the mean and standard deviation of src .
3470	Creates a new seq .
3471	Push adds element to seq .
3472	Pop removes an element from the sequence .
3473	PushFront inserts a new element at the seq .
3474	PopFront removes element from seq .
3475	GetElemAt returns the pointer at the given index .
3476	RemoveAt removes the sequence at the specified index .
3477	Delay returns an Option that sets the delay for the client .
3478	BackOffDelay returns the delay to wait for n backoff .
3479	Error implements the error interface .
3480	Arguments adds additional arguments to the request .
3481	BodyString defines the body as a string .
3482	BodyBytes defines the body of the request body .
3483	Body sets the body of the request body .
3484	Option adds an option to the request
3485	Header adds a header to the request .
3486	Send executes the request and returns the response .
3487	Exec executes the http request
3488	Next returns the next message
3489	Cancel closes the output .
3490	FileList returns a list of files for a given path
3491	Cat returns an io . ReadCloser for the given path .
3492	List issues a GET request to the remote host .
3493	Pin pins a command to the specified path .
3494	Pins returns the list of active pins .
3495	Version returns the version and commit
3496	SwarmPeers returns SwarmConnInfos
3497	SwarmConnect connects to a swarm server .
3498	DagPutOptions returns a DagPutSettings with the given options .
3499	Pin sets the pin pin
3500	Kind sets the kind of dag put operation
3501	Hash sets the hash of the dag put operation .
3502	AddDir adds a new directory to the shell .
3503	Publish a value
3504	PublishWithDetails is like Publish but with the given content hash .
3505	ResolveValue implements PlanValue . ResolveValue .
3506	GenerateQuery generates query for the given query .
3507	EncodeValue encodes a BindVariable .
3508	Lex returns the next token .
3509	skipStatement skips the next statement .
3510	reset resets the tokenizer .
3511	Preview returns the start of a statement .
3512	NewPlanValue creates a PlanValue from an Expr .
3513	StringIn check if string is in a string
3514	NewTrackedBuffer returns a new TrackedBuffer .
3515	NewStringArena returns a new StringArena object .
3516	NewString appends b to the string buffer .
3517	SpaceLeft returns the number of space left .
3518	ParseStrictDDL parses a DDL SQL statement .
3519	ParseNext parses next token .
3520	Append appends the SQLNode to buf .
3521	ExprFromValue converts Value to AST .
3522	Backtick returns the backtick string
3523	NewValue creates a new Value .
3524	String returns a string representation of Value .
3525	EncodeSQL encodes Value .
3526	EncodeSQL encodes InsertValues .
3527	EncodeSQL encodes the tupleEqualityList .
3528	WalkStatement recursively calls walkStatement
3529	WalkSelect walks the SQLNode
3530	BindVariablesEqual returns true if two bind variables are equal .
3531	New returns a new JWTMiddleware instance .
3532	HandlerWithNext implements the http . Handler interface
3533	FromAuthHeader extracts the Authorization header from the request .
3534	FromParameter returns a TokenExtractor that extracts token from the given URL .
3535	FromFirst returns a TokenExtractor from the request
3536	getHelloPacket returns a new RPC message for the topic
3537	NewFloodSubWithProtocols returns a new instance of FloodSub .
3538	NewFloodSub creates a new FloodSub .
3539	NewLRUBlacklist returns a Blacklist with the given capacity .
3540	NewRandomSub returns a new PubSub router
3541	NewGossipSub returns a new instance of the GossipSub router
3542	NewPubSub creates a new PubSub .
3543	WithValidateThrottle is a functional option that sets the throttling throttling throttling .
3544	WithBlacklist overrides the default blacklist
3545	handleRemoveSubscription is used to handle a remove subscription .
3546	handleAddSubscription handles an addSub subscription .
3547	announce sends announcements to all peers .
3548	notifySubs sends a message to all subscribed subscribers
3549	seenMessage returns true if there is a message with the given ID .
3550	subscribedToMsg returns true if this message is subscribed to
3551	msgID returns a unique ID for this message .
3552	pushMsg is used to push a message
3553	validate checks if the message is valid
3554	validateSingleTopic is used to validate a single message
3555	getValidators returns the list of validators for the given topic .
3556	Subscribe creates a subscription for the specified topic .
3557	Subscribe by topic descriptor
3558	GetTopics returns the list of available topics .
3559	Publish publishes a message to the specified topic .
3560	ListPeers returns a list of all known peers .
3561	WithValidatorTimeout sets the timeout for the request
3562	WithValidatorConcurrency sets the number of concurrent goroutines .
3563	RegisterTopicValidator registers a validator
3564	UnregisterTopicValidator unregisters topic validator
3565	DefaultMetricPrefix returns a metric name for a metric .
3566	MetricWithPrefix returns a metric with the given prefix
3567	NewClient returns a new Client .
3568	Call makes a call to the remote server .
3569	CallPeer starts a new RPC call .
3570	CallSC starts a new RPC call .
3571	ReadResponse reads an HTTP response from ArgReadable .
3572	Write response headers .
3573	ResponseWriter is a wrapper around http . ResponseWriter
3574	ReadHeaders reads the headers from r .
3575	NewTCPRawRelay creates a new RelayRelay with the specified destinations .
3576	NewClient creates a new Client .
3577	Advertise advertises services .
3578	Handle satisfies the tchannel . Handler interface
3579	Start starts the tchannel server
3580	Port returns the port of the server .
3581	SetStrategy sets the strategy for the list of peers .
3582	Add adds a new peer to the list of peers .
3583	GetNew returns a new peer from the list of peers .
3584	Get returns a new peer from the list .
3585	Remove removes a peer from the list .
3586	Copy returns a copy of the List
3587	Len returns the number of peers in the list .
3588	exists returns the score for the given hostPort .
3589	getPeerScore returns the peer score for the given hostPort .
3590	onPeerChange is called when a peer is changed .
3591	updatePeer updates the peer s score .
3592	getConn returns the connected connection .
3593	GetConnection returns the current connection .
3594	getConnectionRelay returns a new connection to the peer .
3595	canRemove returns true if the peer has been removed .
3596	addConnection adds a new connection to the peer .
3597	removeConnection removes the connection from the list .
3598	connectionCloseStateChange is called when a connection is closed .
3599	Connect connects to the remote peer .
3600	BeginCall starts a new call .
3601	NumConnections returns the number of incoming connections .
3602	NumPendingOutbound returns the number of pending outbound connections .
3603	isEphemeralHostPort returns true if hostPort is an ephemeral host .
3604	Get implements the kvHandler interface .
3605	Set implements the http . Handler interface
3606	ClearAll implements the kvHandler interface .
3607	NewChannel creates a new channel
3608	Serve starts listening on the given listener .
3609	ListenAndServe is like ListenAndServe but uses the given hostPort .
3610	Register implements the SubChannel interface .
3611	PeerInfo returns the local peer info .
3612	GetSubChannel returns a SubChannel for the given service .
3613	serve serves incoming connections .
3614	Ping is used to ping a remote peer
3615	StatsTags returns the set of stats tags for the channel .
3616	Connect connects to the remote server .
3617	exchangeUpdated is called when a remote peer is updated .
3618	updatePeer is called when a peer is received .
3619	addConnection adds a new connection to the channel .
3620	removeClosedConn removes a connection from the channel .
3621	connectionCloseStateChange is called when a connection is closed .
3622	State returns the current state of the channel .
3623	NewReader returns a new Reader .
3624	ReadUint16 reads a uint16
3625	ReadString reads a string from the reader
3626	ReadLen16String read length string
3627	Register implements Behavior .
3628	Run satisfies the Behavior interface .
3629	Get returns a new relay timer .
3630	Put a relay timer into the pool
3631	Start starts the timer .
3632	Release releases the timer .
3633	NewLogger returns a new Logger .
3634	NewTCPFrameRelay creates a new TransportRelay
3635	tallyTags returns the tags for the known tags .
3636	Isolated clears the current state of the subChannel .
3637	Isolated returns true if the remote peer is isolated
3638	Register implements the SubChannel interface .
3639	GetHandlers returns a map of registered handlers
3640	StatsTags returns the tags for the SubChannel .
3641	registerNewSubChannel creates a new subchannel .
3642	get returns the subchannel for the given service
3643	getOrAdd returns the subchannel if it exists and adds it if it already exists .
3644	Discover returns a list of available hosts
3645	Start starts the http server
3646	listen initializes the HTTP server
3647	WriteRequest writes an HTTP request to the argument .
3648	ReadRequest reads an HTTP request .
3649	NewReadBufferWithSize returns a new ReadBuffer with the given size .
3650	ReadByte reads a single byte .
3651	ReadBytes returns the next n bytes .
3652	ReadString reads a string from the buffer
3653	ReadUint16 read uint16
3654	ReadUint32 read uint32
3655	ReadUint64 reads a uint64
3656	ReadUvarint reads a varint
3657	ReadLen8String reads a string from the buffer
3658	ReadLen16String reads a string from the buffer
3659	FillFrom implements io . ReadFrom interface .
3660	Wrap implements the ReadBuffer interface .
3661	WriteSingleByte write a single byte
3662	WriteBytes implements io . WriteBytes .
3663	WriteUint16 writes a uint16 to the buffer .
3664	WriteUint32 writes a uint32 to the buffer .
3665	WriteUint64 writes an uint64 to the buffer .
3666	WriteUvarint writes a varint to the buffer .
3667	WriteString writes a string to the buffer .
3668	WriteLen8String write length string to buffer
3669	WriteLen16String write length string to buffer
3670	DeferByte implements the WriteBuffer interface .
3671	DeferBytes implements the WriteBuffer interface .
3672	FlushTo flushes the buffer to the given io . Writer .
3673	Reset resets the buffer .
3674	Wrap implements the WriteBuffer interface .
3675	Update updates the uint16 value .
3676	Update updates the uint32 value .
3677	Update updates the uint64 value .
3678	Update overwrites existing bytes .
3679	UpdateString updates the string s value
3680	ArgReader returns an ArgReader .
3681	finish updates the checksum of the fragment .
3682	newWritableChunk returns a writable chunk .
3683	writeAsFits returns the number of bytes written to the chunk .
3684	newFragmentingWriter returns a new fragmentingWriter .
3685	ArgWriter implements the ArgWriter interface .
3686	BeginArgument implements the Writer interface .
3687	Write implements the io . Writer interface .
3688	Flush flushes the current chunk .
3689	Close implements the Writer interface .
3690	handleCallRes is used to handle a call request
3691	Arg2Reader returns an ArgReader from the response .
3692	handleError handles the error message
3693	doneReading is called when a response has been read .
3694	Creates a new fragment .
3695	flushFragment flushes the given fragment .
3696	failed is called when a request fails .
3697	arg1Reader returns a new ArgReader .
3698	arg2Reader returns a new ArgReader .
3699	arg3Reader returns an Arg3ArgReader .
3700	argReader returns a new ArgReader .
3701	recvNextFragment is used to read the next fragment .
3702	releasePreviousFragment releases the previous fragment .
3703	failed is used to report the error .
3704	parseInboundFragment parses a fragment into a readable fragment .
3705	NewContext returns a new tchannel context .
3706	WithHeaders wraps tchannel . Context
3707	healthCheck is a long running routine for the connection .
3708	SetTimeout sets timeout
3709	AddHeader adds a header to the request
3710	SetHeaders sets the headers for the request
3711	SetConnectTimeout sets the connection timeout
3712	SetRetryOptions sets retry options
3713	SetTimeoutPerAttempt sets the timeoutPerAttempt
3714	SetParentContext sets parent context
3715	Build builds a ContextWithHeaders .
3716	overrideHeaders overrides the headers fields of the request .
3717	Read implements the io . Reader interface .
3718	ReadJSON reads json data from reader
3719	NewArgWriter returns a new ArgWriteHelper .
3720	Write implements the io . Writer interface .
3721	WriteJSON writes the given data to the writer
3722	Register registers the service
3723	Count returns the number of items in the list
3724	Get retrieves a relayItem by its ID .
3725	Add adds an item to the relay list .
3726	Entomb deletes a relay item with the given id and returns true if it succeeded .
3727	NewRelayer creates a new Relayer .
3728	Relay performs a relay on a frame .
3729	Receive implements Relayer .
3730	handleNonCallReq handles a non - nil response .
3731	addRelayItem adds a new relay item to the given destination .
3732	failRelayItem is used to fail the relay .
3733	WriteStruct writes the given Thrift Thrift .
3734	ReadStruct from reader
3735	EnsureEmpty checks if the given stream is empty
3736	NewServer creates a new server .
3737	Advertise advertises hyperb hosts
3738	handleCallReqContinue is called when a request is received .
3739	dispatchInbound handles an incoming request .
3740	CallOptions returns the CallOptions for the InboundCall .
3741	Response returns the response s response .
3742	SendSystemError sends an error to the response .
3743	SetApplicationError sets the application error .
3744	Arg2Writer returns the ArgWriter s ArgWriter .
3745	doneSending is called when a request has been completed .
3746	newState returns a new state object .
3747	rootType returns the root type for the given thrift type .
3748	checkInclude returns the state of the given thrift type .
3749	isResultPointer returns true if the type is a result pointer .
3750	goType returns the name of the Thrift type .
3751	goTypePrefix returns the Go type prefix for the given thrift type .
3752	NewContext returns a new context .
3753	newIncomingContext returns a new context and cancel function .
3754	CurrentCall returns the current call .
3755	New returns a new rand . Rand instance .
3756	Health is part of the MetaHandler interface .
3757	Headers returns the request headers .
3758	ResponseHeaders returns the response headers .
3759	SetResponseHeaders sets the response headers .
3760	Child returns a new ContextWithHeaders wrapping ctx .
3761	Wrap wraps a context and returns a ContextWithHeaders .
3762	WrapWithHeaders wraps a context and returns a new ContextWithHeaders .
3763	WithoutHeaders returns a context with a set of headers
3764	Notify implements the Notifier interface .
3765	handlePeerFrame handles a single frame
3766	recvPeerFrame reads a single frame from the message .
3767	recvPeerFrameOfType is used to receive a single frame from the wire .
3768	shutdown shuts down the messageExchange .
3769	newMessageExchangeSet returns a new messageExchangeSet .
3770	addExchange adds a new ExchangeExchange .
3771	newExchange creates a new message exchange .
3772	deleteExchange removes a message from the set of exchanges .
3773	removeExchange is used to remove an exchange .
3774	expireExchange is called when a message is expired .
3775	forwardPeerFrame is used to forward a frame
3776	copyExchanges returns a copy of the current set of exchanges .
3777	Starts all exchanges .
3778	NewFrame initializes a new frame .
3779	ReadBody implements the io . Reader interface .
3780	WriteOut writes the frame header to w .
3781	CanRetry returns true if the error is retryable
3782	HasRetries returns true if the request has retries
3783	SinceStart returns the duration since the request .
3784	AddSelectedPeer adds the selected peer to the request state .
3785	RunWithRetry executes the given RetriableFunc .
3786	ChecksumSize returns the size of the checksum .
3787	New returns a new checksum .
3788	parseTemplates parses a list of template templates .
3789	NewStringSliceFlag creates a new string slice flag .
3790	withStateFuncs returns a template with the given state .
3791	IntrospectOthers returns information about all known channels .
3792	ReportInfo is part of the ChannelInfo interface .
3793	IntrospectState returns a map of PeerRuntimeState
3794	IntrospectState returns the state of the subchannel runtime
3795	IntrospectState returns the current PeerRuntimeState .
3796	IntrospectState returns the connection runtime state .
3797	IntrospectState returns the current RelayerRuntimeState .
3798	IntrospectState returns the state of the RelayItems
3799	IntrospectState returns the current ExchangeRuntimeState .
3800	NewContext returns a new tchannel context .
3801	WriteResponse writes the response .
3802	Wrap wraps a handler into a tchannel . Handler .
3803	initFromOpenTracing initializes the span in the span .
3804	startOutboundSpan starts an opentracingSpan .
3805	intToIP4 converts an int to a net . IP .
3806	servicePeerToHostPort converts a ServicePeer to a string
3807	NewStatsdReporter returns a new StatsdReporter .
3808	UnmarshalText implements the encoding . TextUnmarshaler interface .
3809	Push implements heap . Interface .
3810	Pop implements the heap . Pop interface .
3811	updatePeer implements the heap . Interface .
3812	removePeer removes a peer from the heap .
3813	pushPeer adds a new peer score to the heap .
3814	addPeer adds a new peer score to the heap .
3815	NewClient returns a TChannelClient
3816	Add adds a new peer to the list of peers .
3817	Get returns the peer from the list of known peers .
3818	WithTimeout sets the timeout for the server
3819	Methods returns the registered methods .
3820	InheritedMethods returns the inherited methods of the service
3821	Arguments returns the arguments for this method .
3822	ArgList returns the string representation of the arguments
3823	CallList returns a string representing the CallList
3824	RetType returns the type of the method .
3825	WrapResult is part of the Method interface .
3826	ReturnWith returns the string representation of the method
3827	Declaration returns the declaration of the field .
3828	startIdleSweep starts a new idleSweep .
3829	start starts the idle connection .
3830	Stop stops the idle connection .
3831	ResolveWithGoPath attempts to resolve the filename in the GOPATH . If the filename is not found an error is returned .
3832	setExtends sets the extensions for the service .
3833	register adds a handler to the map .
3834	NewClient returns a new Client .
3835	ListenIP is a wrapper around ListenIP
3836	Close closes the listener .
3837	ReadArgsV2 reads the command line arguments .
3838	WriteArgs is used to write arguments to the OutboundCallResponse .
3839	Call starts an RPC call .
3840	CallSC implements the SubChannel interface .
3841	CallV2 implements SubChannel . CallV2 .
3842	NewRealRelay creates a new Relay
3843	NewServer creates a new server
3844	RegisterHealthHandler adds a handler to the server .
3845	Handle handles an incoming RPC call .
3846	MetricsKey returns the key for the given error .
3847	NewSystemError creates a new system error
3848	NewWrappedSystemError creates a new SystemError from a wrapped error .
3849	Error returns the string representation of the system error
3850	GetContextError returns the error from the context .
3851	GetSystemErrorCode returns the system error code for the given error .
3852	ping is used to ping the connection .
3853	handlePingRes handles a ping response
3854	handlePingReq handles a ping request
3855	SendSystemError sends an error frame to the connection .
3856	connectionError logs an error .
3857	withStateLock executes the given function f on the connection .
3858	withStateRLock executes a function f on the connection .
3859	readFrames reads frames from the connection pool .
3860	writeFrames is a long running goroutine to write frames .
3861	hasPendingCalls returns true if there is a pending call .
3862	checkExchanges is called when a new exchange is received .
3863	closeNetwork closes the underlying network connection .
3864	getLastActivityTime returns the time of the last activity .
3865	Validate returns nil if the service is valid .
3866	logFailedRegistrationRetry is used to log a failed registration .
3867	initialAdvertise sends an advertise request .
3868	Service returns the body of the service .
3869	TTL returns the time . Duration value
3870	SetTTL sets the ttl value for the request .
3871	finishCall returns true if frame is a call .
3872	Flat returns a sorted list of platform names .
3873	Map applies the given function f to each platform .
3874	MapSlice is a wrapper around MapStrings .
3875	GetProtoConfig returns the proto config from the config .
3876	MapExprStrings maps an expression to a string .
3877	FlattenExpr flattens an expression .
3878	makePlatformStringsExpr returns a bazel expression expression .
3879	String returns the string representation of the platform .
3880	Find returns the full path of the workspace .
3881	runGazelle runs the GazEL environment .
3882	restoreBuildFilesInRepo restores all build files in the repo .
3883	FixLoads checks to see if the file is a loadable load .
3884	fixLoad is the same as Load but returns a new load . Load . Load .
3885	newLoadIndex returns the index of rules in the given rule .
3886	removeLegacyGoRepository removes the go repository from the rules file .
3887	Compare compares two versions .
3888	ParseVersion parses a version string .
3889	EmptyFile creates a new buildfile .
3890	LoadWorkspaceFile loads the workspace data from the given path .
3891	LoadMacroFile loads a file from the given path .
3892	EmptyMacroFile loads a file from the given path .
3893	LoadData loads a bzl file from the given path .
3894	LoadWorkspaceData loads a workspace from the given path .
3895	LoadMacroData is the same as LoadMacroData except it takes a byte array and returns it .
3896	ScanAST returns a parsed AST .
3897	ScanASTBody scans the body of the BazelFile .
3898	MatchBuildFileName returns the full path of the build file .
3899	SyncMacroFile adds the macros to the file .
3900	MacrosName returns the name of the macro .
3901	Sync syncs the file .
3902	Format returns bz . File format .
3903	Save saves the file .
3904	HasDefaultVisibility returns true if the package has default visibility
3905	NewLoad creates a new Load .
3906	Symbols returns the list of registered symbols .
3907	Has returns true if the given symbol exists .
3908	Add adds a symbol to the loader .
3909	Remove removes a symbol .
3910	Insert adds a Load to f .
3911	NewRule creates a new rule .
3912	SetKind sets the rule s kind .
3913	AttrKeys returns the keys of the rule .
3914	Attr returns the node s RHS expression .
3915	AttrString returns the string value of the rule
3916	AttrStrings returns the list of string s strings .
3917	DelAttr removes an attribute from the rule .
3918	SetAttr sets an attribute for a rule
3919	PrivateAttrKeys returns a sorted list of the attribute keys .
3920	SetPrivateAttr sets a private attribute
3921	Insert inserts a rule into the file .
3922	IsEmpty returns true if the rule is empty .
3923	CheckInternalVisibility checks if the given rel is in a subpackages
3924	New creates a new label
3925	Rel returns a new Label with the given repository and pkg .
3926	Equal returns true if l is equal to other .
3927	Contains returns true if l contains other .
3928	generateFromPath writes the generated protobuf file to w .
3929	shouldCall returns true if we should call this function .
3930	shouldUpdate returns true if the relation should be updated .
3931	shouldVisit returns true if the given path should be visited .
3932	SquashRules squashes all rules in src to dst .
3933	runClient is the main entry point for gaz . Client .
3934	UpdateRepo updates the repository with the given importPath .
3935	NewRemoteCache creates a new remote cache .
3936	Remote implements the RemoteCache interface .
3937	get gets the value from the cache
3938	ensure adds a new value to the cache if it exists . If the key is already in the cache it will be closed .
3939	RelBaseName returns the base name of the given relative path .
3940	Clone returns a deep copy of c .
3941	IsValidBuildFileName returns true if the given name is a valid build file .
3942	check returns true if the tag line is valid .
3943	fileNameInfo returns the file s extension information .
3944	otherFileInfo returns the fileInfo for the given path .
3945	protoFileInfo returns the information about the proto file .
3946	AddRule adds a rule to the index .
3947	Finish collects all rules in the index .
3948	buildImportIndex builds the index of all imported rules .
3949	IsSelfImport returns true if the find result is a self import
3950	applyKindMappings applies KindInfo to loadKinds .
3951	appendOrMergeKindMapping appends a KindLoadInfo if it exists .
3952	RuleName returns the name of the rule .
3953	buildPackages builds the list of packages from the given directory .
3954	selectPackage selects a proto package from the given directory .
3955	generateProto creates a rule for the given proto file .
3956	generateEmpty returns a list of rules that are not in the given file .
3957	ImportRepoRules returns a set of rules for the given file .
3958	MergeRules merges a set of rules into existing rules .
3959	GenerateRule returns a rule for the given repository .
3960	FindExternalRepo returns the full path of external repository
3961	ListRepositories returns a list of repositories in the given workspace
3962	MigrateLibraryEmbed migrates a library embeded by the given rules .
3963	migrateGrpcCompilers migrates the gRPC compiler to the gRPC compiler .
3964	squashCgoLibrary adds the cgo library to the cgo library .
3965	removeLegacyProto removes proto files from config file .
3966	removeLegacyGazelle removes the gazecl rules from the config file .
3967	selectPackage selects a go package from the given directory .
3968	AddBuiltin adds a resolver to the meta resolver .
3969	MappedKind adds the specified kind to the registry .
3970	Resolver returns a resolve . Resolver for this rule
3971	sortExprLabels sorts a list of strings .
3972	checkRulesGoVersion checks to see if the rules_go_go is a valid version .
3973	preprocessTags preprocesses gConfig tags
3974	setBuildTags sets the build tags
3975	splitValue splits a value into a slice of strings
3976	copyGoModToTemp copies a go file into a temporary directory .
3977	findGoTool returns the path to the go tool
3978	isBuildable returns true if this package is a buildable .
3979	startServer starts a new server
3980	watchDir creates a cancel function for the given directory .
3981	listDirs returns a list of directories in the given directory .
3982	shouldIgnore returns true if p is ignored .
3983	recordWrite records the write lock .
3984	getAndClearWrittenDirs returns a list of all written writes .
3985	CombineHandlers returns a new http . HandlerFunc .
3986	VerifyContentType checks if the given Content - Type header matches the given Content - Type header .
3987	VerifyMimeType returns a middleware that checks the MIME type
3988	VerifyBasicAuth verifies that the given username matches the given username and password .
3989	VerifyJSONRepresenting verifies that the given object is a JSON response .
3990	VerifyFormKV is a wrapper for VerifyFormKV .
3991	RespondWithProto responds with a protobuf message .
3992	RegisterFailHandlerWithT registers a GomegaFailHandler with gomega fail .
3993	EventuallyWithOffset creates an asynchronous assertion that asserts that the provided offset is at the specified offset .
3994	ConsistentlyWithOffset creates a new AsyncAssistion that asserts that the provided value is at the specified offset .
3995	Expect returns an Assertion that asserts that the given value is equal to the given value .
3996	Eventually asserts that the assertion is not satisfied .
3997	Consistently asserts that the assertion is consistent .
3998	TimeoutCloser returns an io . Closer that reads from the given io . Closer .
3999	TimeoutReader returns io . ReaderCloserCloserCloserCloserCloserCloserCloser .
4000	TimeoutWriter returns io . WriterCloserCloserCloserCloserCloserCloser .
4001	Nested is used to nest a nested error
4002	SetMockService sets mock service
4003	FindMachineByIdOrAddress finds a machine by its ID and address .
4004	Write implements the http . ResponseWriter interface
4005	Hijack implements the http . ResponseWriter interface .
4006	ListDeploys returns the list of apps that match filter .
4007	AddAll adds a route to the router
4008	samlRequestTimeout parses request_timeout
4009	RegisterHandler registers a http . Handler for a specific http . Handler .
4010	RegisterHandlerVersion registers a new tsuru handler
4011	Check returns a list of health checks .
4012	DiscoverRepositoryPath tries to find a git repository path
4013	OpenRepository opens a git repository
4014	RemoteURL returns the remote URL of the remote repository .
4015	List lists all Apps in the indexer .
4016	Apps returns an object that can list and get Apps .
4017	List lists all Apps in the indexer for a given namespace .
4018	StreamJSONResponse writes the response body to w .
4019	DropDatabase drops a database
4020	Collection returns a Collection instance .
4021	SetLogger sets the logger
4022	Error logs an error .
4023	Errorf logs a formatted error .
4024	Fatal logs a message
4025	Debugf logs a formatted message
4026	GetStdLogger returns the standard logger .
4027	Namespace returns the name of the cluster
4028	recreateContainers is used to create containers and write them to w .
4029	checkProvisioner checks if the provisioner is configured .
4030	checkDocker makes sure the configuration is valid
4031	checkScheduler returns an error if the scheduler is invalid .
4032	checkRouter returns an error if the default router is not valid .
4033	Available returns whether the unit is available .
4034	Get returns a provisioner by name
4035	Registry returns the list of registered provisioners .
4036	Error implements the error interface .
4037	validateVersion returns true if the current version is a valid version .
4038	ReadTarget reads the target from the environment .
4039	WriteTarget writes a string to the target file
4040	WriteOnTargetList writes label to targets file .
4041	Conn opens a database connection .
4042	Apps returns a collection of apps .
4043	PoolsConstraints returns the storage constraints .
4044	Users returns the storage .
4045	SAMLRequests returns storage .
4046	AppLogCollection implements Storage .
4047	CreateAppLogCollection creates a collection for app .
4048	LogsCollections implements Storage .
4049	ArchiveBuildCmds returns the command to build the build .
4050	ArchiveDeployCmds returns the command to deploy .
4051	DeployCmds returns the command names for the given application .
4052	runWithAgentCmds returns the command line args for the TTSURU application .
4053	newApps returns a apps
4054	Commit commits a container
4055	processTags takes a slice of tags and returns a slice of tags .
4056	aggregateContainersBy aggregates containers by matcher
4057	chooseNodeToAdd picks a node from the list of nodes and returns the chosen node .
4058	chooseContainerToRemove selects a container from a list of nodes
4059	Get returns a router by name
4060	Default returns the default router
4061	Store stores an app .
4062	TsuruV1 retrieves the TsuruV1Client
4063	Tsuru retrieves the TsuruV1Client
4064	NewAppInformer constructs a new informer for App type . Always prefer using an informer factory to get a shared informer instead of getting an independent one . This reduces memory footprint and number of connections to the server .
4065	NewFilteredAppInformer constructs a new informer for App type . Always prefer using an informer factory to get a shared informer instead of getting an independent one . This reduces memory footprint and number of connections to the server .
4066	Watch returns a watch . Interface that watches the requested apps .
4067	Patch applies the patch and returns the patched app .
4068	NewSharedInformerFactory constructs a new instance of a SharedInformerFactory .
4069	NewFilteredSharedInformerFactory creates a new instance of FilteredSharedInformerFactory .
4070	Proxy is not implemented
4071	UnbindUnit is part of the BindServiceClient interface .
4072	Create a plan .
4073	Remove removes a plan .
4074	ensureDefault adds default plan to the storage .
4075	DeleteInstance deletes a service instance
4076	ToInfo converts a ServiceInstance into a ServiceInstanceWithInfo .
4077	Update updates the service instance
4078	BindApp binds an app .
4079	BindUnit binds a service instance
4080	UnbindApp unbinds an app .
4081	Status implements ServiceInstance .
4082	ProxyInstance proxies a proxy
4083	Inc increments the quota .
4084	SetLimit sets the limit for an application
4085	Set sets the quota for an application .
4086	Get returns the quota for the given application .
4087	RemoveImage removes an image from the registry
4088	RemoveAppImages removes images from the registry
4089	Create creates a platform image .
4090	List returns all platforms
4091	FindByName finds a platform by its name .
4092	Update updates platform image .
4093	Remove removes a platform from the database
4094	Rollback rolls back an image .
4095	GetPoolByName returns a Pool by name
4096	Manager returns the repository manager
4097	Register registers a repository manager .
4098	start starts the syncSyncer .
4099	Shutdown implements bindSyncer .
4100	GetForProvisioner returns a builder for the given provisioner
4101	get returns a builder by name .
4102	Registry returns all registered builders
4103	RegisterQueueTask registers a runBs task .
4104	Apps returns a AppInformer .
4105	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new App .
4106	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new AppList .
4107	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new AppSpec .
4108	Write implements io . Writer
4109	ResetPassword resets the password for the given user .
4110	addKnownTypes adds all known types to the scheme .
4111	Register registers Shutdownable .
4112	Do executes all registered functions .
4113	ListImagesOrDefault returns the default images for a platform
4114	MigrateAppsCRDs migrates the services by provisioner
4115	Register registers a new MigrateFunc .
4116	RegisterOptional registers a MigrateFunc .
4117	Run runs the given command .
4118	Units returns a list of available units .
4119	MarshalJSON returns the JSON encoding of an App .
4120	AcquireApplicationLockWait waits for a lock to be held for an application .
4121	ReleaseApplicationLock releases an application lock .
4122	GetByName fetches an app by its name .
4123	AddUnits adds n units to the app .
4124	SetUnitStatus sets the status of the given unit .
4125	UpdateNodeStatus updates the status of a node .
4126	available checks if the application is available
4127	Grant grants access to the specified team .
4128	Revoke revokes an app .
4129	GetTeams returns all teams
4130	setEnv sets environment variables
4131	getEnv returns a bind . EnvVar
4132	validateNew validates a new app .
4133	Validate application
4134	InstanceEnvs returns the environment variables for a service
4135	Run executes the given command .
4136	GetUnits returns the list of available units .
4137	GetUUID gets a unique UUID
4138	Envs returns a map of environment variables .
4139	SetEnvs sets environment variables
4140	UnsetEnvs deletes the environment variables
4141	AddCName adds a new cnames route .
4142	Log creates a new applog
4143	LastLogs returns all logs in the app .
4144	List returns all apps matching filter .
4145	Swap implements the Swap interface .
4146	Start starts the application .
4147	GetDbDriver returns a database driver by name
4148	GetCurrentDbDriver returns the current database driver
4149	NewForConfig creates a new client for the given config .
4150	GetAppFromUnitID gets the app from the container
4151	NewPipeline creates a new Pipeline instance
4152	Result returns the result of the pipeline
4153	DecodeJsonPayload decodes the payload into v .
4154	UrlFor returns the baseUrl for the given path .
4155	GetCorsInfo returns the CorsInfo for the request .
4156	MiddlewareFunc adds a middleware to the middleware .
4157	MiddlewareFunc wraps an http . HandlerFunc into a HandlerFunc .
4158	WriteHeader implements http . ResponseWriter .
4159	MakeRouter creates a new Router instance .
4160	AppFunc returns a HandlerFunc
4161	escapePath returns the full path part of the given URL .
4162	escapePathExp converts a pathExp to an absolute path .
4163	start initializes the router .
4164	ofFirstDefinedRoute returns the first matching route in the list of matched routes .
4165	findRouteFromURL attempts to find a route from the given URL .
4166	MiddlewareFunc is a middlewareFunc that checks the Content - Type header .
4167	CloseNotify implements http . ResponseWriter .
4168	MiddlewareFunc wraps the AccessLogApacheMiddleware interface .
4169	Execute the text template
4170	RemoteUser returns the remote user .
4171	ApacheQueryString returns the full query string for the access log
4172	StartTime returns the start time .
4173	ApacheRemoteAddr extracts the remote address from the access log
4174	ResponseTime returns the duration of the access log .
4175	MiddlewareFunc is a middlewareFunc that adds indentation .
4176	EncodeJson encodes the given interface to JSON .
4177	WriteHeader implements the http . ResponseWriter interface .
4178	MakePath creates a path from a route
4179	MiddlewareFunc wraps RecoverMiddlewareFunc .
4180	WrapMiddlewares wraps a HandlerFunc into a HandlerFunc
4181	MiddlewareFunc wraps http . HandlerFunc
4182	WriteHeader implements http . ResponseWriter
4183	Hijack implements http . Hijacker
4184	Implement io . Writer
4185	MiddlewareFunc is a middlewareFunc that adds authentication information to the request .
4186	printDebug prints the debug level of the node .
4187	AddRoute adds a route to the tree
4188	printDebug prints debug information .
4189	FindRoutes returns a list of matched routes for a given http method
4190	FindRoutesAndPathMatched searches for a route and returns a list of matched routes
4191	FindRoutesForPath returns all routes for a given path
4192	Use adds middleware to the stack .
4193	MakeHandler creates a new http . Handler from the API .
4194	MiddlewareFunc adds an X - Powered - By default to the request .
4195	MiddlewareFunc wraps a StatusMiddlewareFunc into a HandlerFunc .
4196	GetStatus implements the http . StatusMiddleware interface .
4197	MiddlewareFunc adds a callback function to the response body
4198	Flush implements the http . Flusher interface
4199	MiddlewareFunc wraps AccessLogJsonMiddlewareFunc
4200	Fetch reads an object from S3 .
4201	sanityCheck checks if the environment is valid
4202	release closes the listener .
4203	fetchLoop is a long lived goroutine that waits for the minimum of seconds to be fetched .
4204	orkLoop runs the fork loop .
4205	Init initializes the file .
4206	Fetch returns an io . Reader for the file .
4207	Fetch performs a HEAD request .
4208	NewConfig creates a new sarama config .
4209	Validate validates the configuration .
4210	NewClient creates a new sarama client
4211	AsyncClose closes the partition consumer .
4212	Close implements the Consumer interface .
4213	MarkOffset implements the Consumer interface .
4214	NewConsumer creates a new consumer
4215	MarkOffsets adds offsets to the current offsets .
4216	ResetOffset is part of the Consumer interface .
4217	Close implements the Consumer interface .
4218	hbLoop is a long running routine that waits for a heartbeat .
4219	twLoop is a long running routine to periodically refresh the topic .
4220	cmLoop is a long running goroutine .
4221	fetchOffsets fetches offsets for given topics .
4222	MarkOffset adds offset offset
4223	ResetOffset implements the OffsetStashStore interface
4224	Offsets returns a map of offsets .
4225	Actual returns the actual instance and cloud resource .
4226	Expected implements InstanceGroup
4227	Delete deletes the instance group manager
4228	GetReconciler returns a reconciler for the given cloud .
4229	GetVersion returns version information
4230	GetVersionJSON returns the version
4231	Actual returns a copy of the resource group
4232	Expected returns the resource group and cloud resource .
4233	CreateCmd creates a new cobra command
4234	NewUbuntuCluster returns a new Ubuntu cluster
4235	ProviderConfig returns the provider configuration
4236	SetProviderConfig sets the provider config
4237	MachineProviderConfigs returns the list of available provider configs
4238	SetMachineProviderConfigs sets the provider configs for the specified provider configs .
4239	NewCluster creates a new cluster
4240	DeployControllerCmd returns the cobra command for DeployController
4241	NewRetrier returns a new retrier .
4242	RunRetry runs the retry function .
4243	MustGenerateRandomBytes returns a random byte slice
4244	ExplainCmd returns the cobra command for the cluster
4245	TimeOrderedUUID returns a random UUID
4246	GetConfigCmd implements the getconfig command
4247	RunAnnotated runs the given task with the given symbol .
4248	ListCmd returns the cobra command for the current state
4249	NewUbuntuCluster returns a new Ubuntu cluster
4250	EditCmd implements the OpenShift cli edit command
4251	RemoveKey removes a key from the agent .
4252	RemoveKeyUsingFile removes a key from the keyring
4253	Actual returns the firewall information
4254	Expected returns the cloud resource and cloud resource .
4255	Apply applies the firewall to the specified firewall
4256	Delete the firewall
4257	DeleteCmd returns the Kubernetes cli delete command
4258	NewStateStore returns a new instance of ClusterStorer .
4259	Commit commits a cluster
4260	ApplyCmd implements the OpenShift cli apply command
4261	ExpandPath expands the current working directory
4262	CompletionCmd returns the completion command
4263	AdoptCmd returns the cobra command for the Kubernetes cluster
4264	StrEnvDef returns the value of the given environment variable or default if not set .
4265	IntEnvDef returns the int value from the environment . If not found returns def .
4266	BoolEnvDef returns the boolean value from the environment or the default value if not set .
4267	readFromFS reads from the given sourcePath .
4268	VersionCmd returns the cobra command for version
4269	NewSignalHandler returns a new handler .
4270	Register the handler .
4271	NewUbuntuCluster creates a new Ubuntu cluster
4272	BeginningOfHour returns the beginning of the current time .
4273	BeginningOfDay returns the beginning of the current time .
4274	BeginningOfWeek returns the beginning of the current week .
4275	BeginningOfMonth returns the beginning of the current time .
4276	BeginningOfQuarter returns the beginning of the current time .
4277	BeginningOfYear returns the beginning of the current year .
4278	EndOfMinute returns the end time .
4279	EndOfHour returns the end time .
4280	EndOfDay returns the time . Time for the current day .
4281	EndOfWeek returns the end time .
4282	EndOfMonth returns the end time .
4283	EndOfQuarter returns the end time .
4284	EndOfYear returns the end time .
4285	MustParse is like Parse except it panics .
4286	Determines if the given date is within the given range .
4287	ParseInLocation parses the given string and returns the time . Time .
4288	MustParse parses string and returns time . Time .
4289	MustParseInLocation is like ParseInLocation except it panics .
4290	Determines if the current time is between two strings
4291	NewChannelMemoryBackend creates a new ChannelMemoryBackend .
4292	Start starts the background goroutine .
4293	Flush is part of the ChannelMemoryBackend interface .
4294	Stop stops the ChannelMemoryBackend .
4295	Formatted returns the string representation of the record .
4296	Message returns the string representation of the record .
4297	SetBackend sets the logger s backend .
4298	MustGetLogger is like GetLogger but panics .
4299	Reset reset the logger
4300	IsEnabledFor returns true if the log level is enabled .
4301	Criticalf logs an error .
4302	Warningf logs a warning message .
4303	Noticef logs a notice message .
4304	Infof implements the Logger interface .
4305	SetFormatter sets the default formatter .
4306	MustStringFormatter returns a Formatter with the given format .
4307	formatFuncName returns the name of the function f .
4308	Log implements the Formatter interface .
4309	LogLevel returns the level of the given log level .
4310	AddModuleLevel creates a new ModuleLeveledBackend
4311	GetLevel returns the level for the given module .
4312	SetLevel sets the level for the given module .
4313	IsEnabledFor returns true if module level is enabled for given module
4314	MultiLogger returns a logger that implements the Logger interface .
4315	Log implements Logger .
4316	GetLevel returns the level for the given module .
4317	SetLevel implements the Logger interface .
4318	IsEnabledFor returns true if the given log level is enabled .
4319	ConvertColors converts a slice of strings to a slice of strings
4320	NewSyslogBackend returns a new syslog backend .
4321	NewSyslogBackendPriority creates a new syslog backend .
4322	SetBackend sets the default logger implementation
4323	NewCommander returns a new Commander instance .
4324	Execute executes the command
4325	explain prints a summary of the command .
4326	explainGroup prints all subcommands to w .
4327	explain prints the usage of the command .
4328	handleAlias checks if the command is an alias .
4329	Execute executes the default CLI command
4330	LoadFromData loads a config file .
4331	LoadFromReader loads a ConfigFile from an io . Reader .
4332	ReloadData reloads the config file .
4333	AppendFiles appends the given files to the config file .
4334	GetKeyList returns the list of keys in the given section .
4335	SaveConfigData writes config data to io . Writer .
4336	SaveConfigFile saves a config file .
4337	Find returns a new Selection object containing the matched elements .
4338	FindByXPath returns a new Selection object containing the matched elements .
4339	FindByLink returns a new Selection object with the specified text .
4340	FindByLabel returns a new Selection object with the specified label .
4341	FindByName returns a new Selection object with the given name .
4342	FindByClass returns a new Selection object with the specified text .
4343	FindByID returns a new Selection object with the given id .
4344	First returns the first element in the selection filtered by the selector .
4345	FirstByXPath returns the first Selection that matches the selector .
4346	FirstByLink gets the first selection of the first element in the selection .
4347	FirstByLabel returns a new Selection object with the specified label .
4348	FirstByName returns the first Selection object with the given name .
4349	All implements the Selectable interface .
4350	AllByXPath implements Selection interface .
4351	AllByLink implements the Selectable interface .
4352	AllByLabel implements SelectableSelector .
4353	AllByName implements Selectable .
4354	AllByClass implements SelectableByClass .
4355	AllByID selects one of the selectors .
4356	FindForAppium takes a selector and returns a new Selection object .
4357	Timeout is an Option to set the timeout
4358	ChromeOptions sets the given options for the given Chrome options
4359	JoinPage returns a new Page object .
4360	Destroy destroys the page .
4361	Reset resets the state of the Page .
4362	Navigate navigates the current page .
4363	GetCookies returns the cookies of the current page .
4364	SetCookie sets a cookie
4365	DeleteCookie deletes a cookie by name .
4366	ClearCookies clears cookies .
4367	URL returns the URL of the page .
4368	Size sets the size of the page .
4369	Screenshot saves the contents of the page .
4370	Title returns the title of the page .
4371	HTML returns the HTML string
4372	PopupText returns the popup text .
4373	EnterPopupText enter the popup text
4374	ConfirmPopup asks the user to accept a popup .
4375	CancelPopup cancels the popup popup .
4376	SwitchToParentFrame switches the current frame to the current frame .
4377	SwitchToRootFrame switches the current page frame .
4378	NextWindow sets the next available window
4379	CloseWindow closes the session .
4380	WindowCount returns the number of available windows .
4381	LogTypes returns the list of available log types .
4382	MoveMouseBy moves the mouse to the specified location .
4383	DoubleClick performs a double click .
4384	Click handles a click event .
4385	Click clicks each element in the set of matched elements .
4386	DoubleClick performs a double click .
4387	Fill fills the set of matched elements .
4388	Tap handles the tap event .
4389	Touch handles the touch event .
4390	FickFinger triggers a finger on the selected elements .
4391	ScrollFinger scrolls the current finger to the specified position .
4392	NewCapabilities returns a Capabilities with the specified features .
4393	JSON jsonified capabilities
4394	HaveTitle returns a Gomega matcher for the given title .
4395	HaveURL checks if the given URL matches the given URL
4396	HavePopupText returns a Gomega matcher for the given text .
4397	HaveLoggedError returns a Gomega log matcher that matches errors .
4398	Text returns the text of the selected elements .
4399	Active returns true if the current selection matches the current active element .
4400	Attribute returns the attribute of the specified element .
4401	CSS returns the CSS property of the specified element .
4402	Selected returns true if the selection has been selected .
4403	Visible returns true if the selection is visible .
4404	Enabled returns true if the selection is enabled .
4405	HaveCount checks if count is equal to count
4406	HaveAttribute returns a Gomega matcher for the given attribute and value
4407	EdgeDriver creates a new EdgeDriver .
4408	Selendroid returns a WebDriver for the browser
4409	SwitchToFrame switches the current frame to the current frame .
4410	Count returns the number of elements in the set of matched elements .
4411	EqualsElement returns true if the element is equal to other .
4412	MouseToElement moves the current element to the selected element
4413	loggingMiddleware is a middleware that logs a request to the given logger .
4414	chainHandlers is a chain of middlewares .
4415	HTTPReverseProxy starts an HTTP reverse proxy on the target address
4416	CheckInstallation checks to see if the current version is available
4417	CheckVersion checks if the given binary is valid
4418	GetVersionForBinary gets the version for a given binary
4419	getUser retrieves a user by its ID .
4420	login returns an authenticated user .
4421	loginHandler handles a login .
4422	logoutHandler is used to clear the current user .
4423	viewHandler renders the user page .
4424	Run starts the service
4425	WithRequest sets the request body
4426	WillRespondWith sets the Response s Response .
4427	isJSONFormattedObject returns true if the given string is a JSON object .
4428	ByUsername finds a user by its username
4429	ByID returns a user by its ID .
4430	UserLogin handles a login request
4431	newClient creates a new ApiClient
4432	NewClient creates a new ApaxClient .
4433	ListServers returns a list of registered servers
4434	UpdateMessagePact adds a message to the swarm
4435	PublishPacts sends a Pacts request
4436	getPort returns the port of the given URL
4437	getAddress returns the address of the given URL .
4438	sanitiseHTTPResponse sanitizes the response
4439	Publish sends a request to PactsClient
4440	FindPortInRange tries to find a port in a range
4441	EachLike returns a matcher that matches the given content .
4442	Term creates a matcher that matches a regexp pattern
4443	UnmarshalJSON implements json . Unmarshaler
4444	objectToString converts an object to a string
4445	match returns a matcher for the given type .
4446	AddMessage add new message
4447	AddInteraction add new interaction
4448	Teardown terminates the expard server .
4449	Verify verifies that a pact is valid
4450	stateHandlerMiddleware is a middleware that returns a http . HandlerFunc .
4451	VerifyMessageProviderRaw is the same as VerifyMessageProvider except that it accepts a request .
4452	VerifyMessageConsumerRaw is the same as VerifyMessageConsumer except that it accepts a MessageConsumer .
4453	VerifyProvider is a mock
4454	NewService creates a new mock service
4455	Setup initializes the service manager
4456	addServiceMonitor starts listening for a new process creation .
4457	removeServiceMonitor is a long running routine to monitor the process .
4458	List returns the list of registered services .
4459	Command returns an exec . Cmd for service manager
4460	call sends an HTTP request to the given URL .
4461	DeleteInteractions is a mock
4462	AddInteraction is a mock
4463	WritePact is a method call to the mock service
4464	ExpectToReceive sets the description of the message
4465	WithMetadata adds metadata to the message
4466	AsType sets the type of the message
4467	UserLogin handles a login request
4468	Region returns the AWS region region .
4469	New returns a new S3 object .
4470	Bucket returns a new Bucket instance .
4471	PutWriter returns an io . WriteCloser for a bucket .
4472	url returns the URL for the bucket .
4473	SetLogger sets the internal logger
4474	InstanceKeys returns the keys for the current role
4475	EnvKeys returns the keys in the environment
4476	Sign signs an HTTP request .
4477	getAWSKeys returns the AWS S3 environment keys
4478	homeDir returns the home directory for the current user .
4479	ACL adds an ACL to the request .
4480	putPart creates a new part .
4481	abort attempts to abort a multipart upload .
4482	growPartSize returns true if we need to grow the part .
4483	CheckDisallowed checks if prefix is allowed by prefix
4484	Process parses the environment variables and populates the fields in spec
4485	MustProcess is like Process but panics .
4486	toTypeDescription returns the description of a type .
4487	Usage prints a usage message .
4488	Usagef writes the usage information to the given writer .
4489	Usaget generates the spec for the given spec
4490	Scan implements the sql . Scanner interface .
4491	Value implements the Valuer interface .
4492	NewTime returns a new Time instance
4493	TimeFromPtr creates a Time from a pointer .
4494	ValueOrZero returns the time value of t .
4495	MarshalJSON implements the json . Marshaler interface for Time .
4496	SetValid sets the valid time .
4497	Ptr returns a pointer to a time . Time .
4498	NewBool creates a new Bool
4499	BoolFromPtr creates a Bool from a pointer .
4500	UnmarshalJSON implements json . Unmarshaler
4501	UnmarshalText implements the encoding . TextUnmarshaler interface .
4502	MarshalJSON implements json . Marshaler
4503	SetValid sets the bool value .
4504	NewString creates a new String
4505	UnmarshalJSON implements json . Unmarshaler
4506	MarshalText implements the encoding . TextMarshaler interface .
4507	UnmarshalText implements the json . Unmarshaler interface
4508	SetValid sets the String field s value .
4509	StringFromPtr creates a string from a string .
4510	MarshalJSON implements json . Marshaler
4511	NewInt creates a new Int
4512	IntFromPtr creates an Int from a pointer .
4513	UnmarshalJSON implements json . Unmarshaler
4514	MarshalText implements the encoding . TextMarshaler interface .
4515	SetValid sets the int value .
4516	UnmarshalText implements the encoding . TextUnmarshaler interface .
4517	MarshalText implements the encoding . TextMarshaler interface .
4518	SetValid sets the float64 value
4519	MarshalJSON implements the json . Marshaler interface .
4520	UnmarshalJSON implements json . Unmarshaler
4521	UnmarshalText implements the json . Unmarshaler interface .
4522	MarshalJSON implements json . Marshaler
4523	newGossipChannel returns a new gossipChannel .
4524	GossipUnicast sends a message to the remote peer .
4525	GossipBroadcast sends a gossip message to the remote peer .
4526	Send the given GossipData .
4527	SendDown sends the given GossipData .
4528	gobEncode encodes a slice of items into a byte slice .
4529	newTokenBucket creates a new token bucket .
4530	wait waits until the next unused token is available .
4531	capacityToken returns the size of the current token .
4532	PrefixRangeEnd returns the end of a range .
4533	newLocalPeer returns a new local peer .
4534	getConnections returns the set of known connections
4535	createConnection creates a new local connection
4536	doAddConnection handles a new connection .
4537	startLocalConnection starts a new local connection .
4538	SendProtocolMsg sends a protocol message to the remote server
4539	NewStatus returns a new Status instance .
4540	makePeerStatusSlice converts a slice of PeerStatus to a slice of PeerStatus .
4541	makeUnicastRouteStatusSlice returns a slice of unicast route status .
4542	makeBroadcastRouteStatusSlice returns a slice of broadcastRouteStatus .
4543	makeLocalConnectionStatusSlice returns a slice of LocalConnectionStatusSlice .
4544	makeTrustedSubnetsSlice converts a slice of IPNetnets to a slice of strings .
4545	Range implements the EtcdClient interface .
4546	Put implements the EtcdClient interface .
4547	DeleteRange implements the EtcdServer interface .
4548	Txn is part of the EtcdServer interface .
4549	Compact is not implemented
4550	proposeInternalRaftRequest is used to propose an internal RPC request .
4551	applyCompare applies the given compare to the given value .
4552	Describes returns the list of known peers .
4553	OnGC registers a callback to be called when the peer is garbage collected .
4554	OnInvalidateShortIDs registers callback function that is called when the peer is invalidated .
4555	chooseShortID chooses a random short short short ID .
4556	fetchWithDefault adds a new peer to the list of peers .
4557	Fetch returns the peer with the given name .
4558	fetchAndAddRef increments the local ref count for the given peer .
4559	FetchByShortID returns the peer identified by shortID .
4560	GarbageCollect garbage collects all pending peers .
4561	newRoutes returns a new Routes
4562	OnChange adds a callback to be called when the routes are changed .
4563	Unicast returns the name of the given unicast route
4564	UnicastAll returns the name of all registered unicast routes .
4565	Broadcast returns the list of known peers .
4566	BroadcastAll returns the list of known peers .
4567	NewPeer returns a new peer .
4568	Register implements the peer . Peer interface .
4569	ReadFrom implements net . Conn . ReadFrom
4570	WriteTo implements net . Packet . WriteTo .
4571	LocalAddr returns the network address of this peer .
4572	OnGossip is invoked when a gossip message is received
4573	OnGossipBroadcast is invoked when a gossip message is received
4574	OnGossipUnicast is invoked when a gossip message is received
4575	NewDefaultServer returns a new Server instance .
4576	PeerNameFromUserInput returns a PeerName from a user input .
4577	bytes returns the bytes as a byte slice .
4578	NewRouter creates a new Router instance .
4579	sendAllGossip is used to send gossip gossip messages
4580	sendAllGossipDown sends all gossip peers to the given connection .
4581	broadcastTopologyUpdate broadcasts a set of peers to gossip .
4582	OnGossipUnicast is invoked when a gossip message is received from a peer .
4583	OnGossipBroadcast is called when a new gossip message is received .
4584	Gossip returns the current gossip state
4585	OnGossip is part of the router .
4586	Encode is used to encode the gossip data .
4587	newState returns a new state .
4588	Merge merges the state into a new state .
4589	mergeReceived merges the set of known peers .
4590	mergeComplete merges the set of known peers .
4591	OnGossipBroadcast implements the gRossipMessage interface
4592	OnGossip returns a new GossipData .
4593	generateKeyPair generates and returns the public and private key
4594	convert session key to shared secret key
4595	newTCPCryptoState returns a new tcpCryptoState .
4596	Send implements gob . Transport .
4597	Send sends a message to the sender .
4598	Send sends a message to the sender .
4599	Receive reads a message from gob - encoded stream
4600	Receive reads bytes from the buffer .
4601	Receive waits for a TCP connection to be encrypted
4602	newPeer returns a new peer
4603	incr increments the current state of the peer .
4604	Gossip returns the current state of the peer .
4605	OnGossipUnicast is invoked when a gossip message is received from the remote peer .
4606	makeRaftPeer returns a raft . Peer for the given network address .
4607	String returns a string representation of the peer
4608	forEachConnectedPeer iterates over all connected peers and calls f for each peer .
4609	parsePeerUID parses a string into a PeerUID .
4610	Swap swaps two peers .
4611	Less implements sort . Interface .
4612	doIntro executes the introspection flow .
4613	filterV1Features returns a map of supported protocol versions .
4614	newConnectionMaker returns a new connection maker .
4615	connectionAborted is called when an attempt is aborted .
4616	newGossipSender returns a new gossipSender .
4617	Send implements the Sender interface .
4618	Broadcast adds the given GossipData to the sender .
4619	Flush is used to flush the connection .
4620	Sender creates a new gossip sender for a given channel
4621	Flush flushes all the senders .
4622	findMainPath finds the path of the main executable .
4623	Create creates a new channel
4624	Send sends a message
4625	SendJSON sends the given value to the client
4626	remapError converts an error into an error .
4627	NamespacedContext returns a new context with the given namespace .
4628	Converts MemcacheGetResponse_Item_Item to Item .
4629	singleError returns the first error if any .
4630	Get returns the cached item for the given key
4631	GetMulti is a wrapper around memcache . GetMulti .
4632	Delete removes a key from the database .
4633	DeleteMulti deletes a memcache .
4634	Increment increments the value for the given key .
4635	IncrementExisting increments the value at the given delta .
4636	set sets a MemcacheSetRequest .
4637	Get implements the Codec interface .
4638	Stats returns the current memcache statistics .
4639	Flush flushes all memcache .
4640	RunInBackground runs f on the system
4641	List returns the list of available modules .
4642	SetNumInstances sets the number of instances in the given module
4643	Versions returns all versions of the given module .
4644	DefaultVersion returns the default version .
4645	Start starts a new module .
4646	Stop stops a module
4647	Ancestor sets the ancestor of the query .
4648	EventualConsistency sets the state of the query .
4649	Project sets the projection for the query .
4650	Distinct sets the distinct fields of the query .
4651	DistinctOn sets the distinct ON clause on the query .
4652	KeysOnly sets the keysOnly field of the query .
4653	Limit sets the limit of the query .
4654	Offset sets the offset of the query .
4655	BatchSize sets the size of the query .
4656	Start sets the start of the query .
4657	End sets the end of the query .
4658	Count implements the Query interface .
4659	Run executes the query .
4660	Next returns the next key from the iterator .
4661	Cursor returns a new Cursor .
4662	String returns the string representation of the cursor .
4663	DecodeCursor decodes a Cursor .
4664	saveEntity saves the properties of the PropertyLoadSaver .
4665	Namespace returns a context with the given namespace
4666	typeof returns the type of the given variable name .
4667	dot returns the dot of the given type .
4668	joinFunc joins a function into a string .
4669	validPropertyName returns true if the given property name is valid .
4670	getStructCodec returns the underlying struct codec for the given type .
4671	LoadStruct loads a struct into dst .
4672	SaveStruct converts a struct to a slice of properties .
4673	ServingURL returns the URL for the given blob .
4674	DeleteServingURL deletes the given blob .
4675	CurrentOAuth returns the current OAuth user .
4676	OAuthConsumerKey returns the OAuth consumer key
4677	String returns the email address
4678	LoginURL returns a URL that can be used to connect to the given destination .
4679	LoginURLFederated returns a login URL that can be used to authenticate the user .
4680	LogoutURL creates a logout URL for the user .
4681	insertContext inserts a context into the call .
4682	NewClient returns a new Client .
4683	NewContext returns a new context .
4684	NewRemoteContext returns a new Context .
4685	Debugf logs an error .
4686	guestbookKey returns a key for the guestbook .
4687	toRetryParameters converts RetryOptions to TaskQueueRetryParameters .
4688	NewPOSTTask creates a new POST task .
4689	ParseRequestHeaders parses the HTTP request headers
4690	Add adds a new task to the queue
4691	AddMulti adds multiple tasks to the taskqueue .
4692	Delete deletes a task
4693	DeleteMulti deletes tasks from the taskqueue .
4694	Lease returns a list of tasks in a given queue .
4695	LeaseByTag is like LeaseByTag but with the given tag .
4696	Purge purges the queue
4697	ModifyLease modifies the taskqueue
4698	QueueStats fetches the taskqueue statistics .
4699	IsTimeoutError returns true if err is a timeout error .
4700	Func registers a new function .
4701	Task returns a task queue .
4702	RequestHeaders returns the taskqueue request headers .
4703	WithContext returns a copy of the request with the given request .
4704	WithAPICallFunc returns a context with the given APICallFunc .
4705	APICall calls internal method
4706	ModuleHostname returns the hostname of the given module .
4707	AccessToken gets an access token .
4708	PublicCertificates returns the list of public certificates for the app .
4709	ServiceAccount returns the service account name .
4710	SignBytes signs the given bytes .
4711	fetch is part of the blobstore . Reader interface .
4712	seek seeks to the given offset .
4713	multiKeyToProto converts appID to protobuf protobuf message .
4714	referenceValueToReference converts a PropertyValue_ReferenceValue into a KeyValue .
4715	keyToReferenceValue converts a key to a property value .
4716	Put inserts a key into the context .
4717	PutMulti adds multiple keys to the datastore .
4718	Delete removes the key from the database .
4719	DeleteMulti deletes a single key .
4720	deploy executes the given command
4721	Next returns the next record .
4722	Converts protobuf protobuf messages to AppLogs .
4723	protoToRecord converts a RequestLog into a Record .
4724	Run executes the query .
4725	run executes the log service .
4726	Current returns the current user
4727	IsAdmin returns true if the user is an admin .
4728	isErrFieldMismatch returns true if err is ErrFieldMismatch .
4729	Stat returns the BlobInfo for a given blob .
4730	Send writes the header to the responseWriter .
4731	UploadURL creates an upload URL .
4732	Delete deletes a blob .
4733	DeleteMulti deletes a blob .
4734	NewReader returns a new reader .
4735	Handle is the handler for the message
4736	Send sends a message to the server
4737	Invite sends an invite request .
4738	Send sends the presence of a node .
4739	GetPresence returns the presence of a presence
4740	GetPresenceMulti returns the presence of the presence of the given JID .
4741	newStructFLS returns a FieldLoadSaver for a struct pointer .
4742	SaveStruct saves a struct .
4743	Namespaces returns the names of all namespace names .
4744	Kinds returns the list of registered kinds .
4745	RunInTransaction runs f in a transaction .
4746	imports returns true if the given file has been imported .
4747	importSpec returns the import spec for the given file .
4748	declImports returns true if the given GenDecl is an IMPORT
4749	isPkgDot reports whether t is a pkg .
4750	isTopName returns true if the given expression is a top - level expression .
4751	isName returns true if the given expression is a name .
4752	isCall reports whether t is a call expression .
4753	refestsTo returns true if n is a reference to this node .
4754	isEmptyString returns true if the given expression is an empty string .
4755	countUses returns the number of methods used for the given expression .
4756	assignTo returns true if x is assigned to x .
4757	newPkgDot returns a selector expression .
4758	renameTop renames the top of a file .
4759	matchLen returns the index of the length of x
4760	deleteImport deletes the import spec .
4761	rewriteImport returns true iff the file was rewrote .
4762	DefaultTicket returns the default ticket
4763	flushLog flushes the pending log .
4764	withDeadline returns a new context with the given deadline .
4765	KeepAlive keeps the socket alive .
4766	applyTransaction applies the transaction to the given transaction .
4767	Analyze a set of tags into an app .
4768	buildContext builds a build . Context from the given build tags .
4769	syschesizeMain generates the main entry for the app .
4770	findInGopath finds the path in the given directory .
4771	copyTree copies all files in srcDir to dstDir .
4772	copyFile copies a file into a tar writer .
4773	checkMain checks if the main package is a valid package .
4774	isMain reports whether f is a main function .
4775	readFile returns true if filename is a valid function .
4776	initField initializes a new value .
4777	loadEntity loads the entity protobuf data into dst
4778	validIndexNameOrDocID returns true if s is a valid index name .
4779	Open opens a new index .
4780	Put inserts src into the index .
4781	Get loads the document from the index .
4782	Delete removes the index from the index .
4783	DeleteMulti deletes documents by ids .
4784	Search implements the IndexIterator interface .
4785	fetchMore will fetch the results from the list .
4786	Next fetches the next document from the iterator .
4787	Facets fetches facets .
4788	DefaultBucketName returns the default bucket name .
4789	valid returns true if the Key is valid .
4790	Equal returns true if k is equal to o .
4791	root returns the current key .
4792	marshal encodes a Key .
4793	String returns a string representation of the key .
4794	Encode returns the base64 encoding of the key
4795	DecodeKey decodes a base64 encoded key
4796	NewIncompleteKey creates a new key with the given kind and parent kind .
4797	NewKey creates a new Key .
4798	AllocateIDs allocates and allocates a new ID .
4799	IsOverQuota returns true if the error is over - 1 .
4800	ClassicContextFromContext returns the appengine context from a context
4801	Send sends a message .
4802	SendToAdmins sends a message to admins .
4803	Failures returns the number of failed failures .
4804	decodeFieldNumberAndTyp3 decodes the field number and typ3 .
4805	checkTyp3 returns an error if the type is not a type .
4806	decodeTyp3 decodes a Typ3 type .
4807	NewPrefixBytes creates a new prefix bytes .
4808	getLengthStr returns string representation of type length .
4809	collectImplementers_nolock recursively collectImplementers
4810	checkConflictsInPrio_nolock returns an error if the implementer is not a conflict .
4811	constructConcreteType is a helper method to construct a concrete concrete type .
4812	MarshalBinaryLengthPrefixedWriter implements the encoding . BinaryMarshaler interface for BinaryLengthPrefixedWriter .
4813	MarshalBinaryBare marshals a byte slice into a byte slice .
4814	UnmarshalBinaryLengthPrefixed implements the codec . BinaryUnmarshaler interface
4815	UnmarshalBinary unmarshals a byte slice into a pointer .
4816	MustMarshalJSON panics .
4817	MustUnmarshalJSON is like UnmarshalJSON but panics on error .
4818	MarshalJSONIndent implements json . Marshaler
4819	newDataReader returns a new internalDataReader .
4820	Read implements io . Reader
4821	ListenAndServeTLS is like ListenAndServe except that it accepts TLS certificates and key files .
4822	Produce wraps ProducerFunc
4823	PromoteHandlerFunc wraps a handler function and returns a new handler .
4824	Serve starts a server .
4825	Serve starts a new server
4826	Fail prints the error message and exits .
4827	WriteUsage prints the usage of the parser .
4828	WriteHelp writes help to w .
4829	MustParse is like Parse but panics if dest is not nil .
4830	Parse parses the configuration and returns an error if any .
4831	walkFields recursively traverses all of the fields in v .
4832	Parse parses args and returns an error if any .
4833	setSlice sets a slice of strings .
4834	canParse returns true if t is a scalar .
4835	isBoolean returns true if t is a bool
4836	NewFromMap creates a new Tree from a map .
4837	Insert inserts a value into the tree .
4838	Delete deletes a node from the tree .
4839	DeletePrefix returns the number of elements in the tree .
4840	deletePrefix deletes the node with the given prefix .
4841	Get returns the value for a given string
4842	LongestPrefix returns the longest prefix of s .
4843	Minimum implements the Tree interface .
4844	WalkPrefix walks the tree rooted at the given prefix .
4845	recursiveWalk invokes fn for each node in the tree .
4846	ToMap converts the tree to a map .
4847	checkip returns the iptype and ip number of the given IP .
4848	readuint32 reads a uint32
4849	readuint128 returns a big . Int .
4850	loadMessage loads an IP2Location record from the given string .
4851	Printrecord returns the IP2Location record .
4852	Main is the main function .
4853	SaveToPdfFile writes a PDF file to the given filePath .
4854	CubicCurveTo adds a cubic curve to the path .
4855	ArcTo adds an ArcTo to the path .
4856	String returns a string representation of the Path .
4857	VerticalFlip returns the vertical flip of the vertical line .
4858	NewGlyphCache returns a new cache
4859	Fetch fetches a glyph from the cache .
4860	renderGlyph renders a glyph into a glyph .
4861	Copy returns a deep copy of the Glyph .
4862	Fill implements the Glyphr interface .
4863	Main is the main entry point .
4864	Draw draws a drawing point .
4865	Paint draws the spans .
4866	SetColor sets the color of the Painter .
4867	NewPainter returns a new Painter .
4868	GetStringBounds returns the bounds of a string .
4869	recalc recalculates the current font size .
4870	SetFont sets the font font .
4871	ClearRect creates a rectangle with the specified coordinates .
4872	drawString draws a string at the specified width .
4873	newGroup creates a new group .
4874	newMask creates a new mask .
4875	embedSvgFont embeds the given text into SVG .
4876	TraceQuad takes a set of quads and returns an error .
4877	GetFontName returns the font name
4878	NewStackGraphicContext creates a new StackGraphicContext .
4879	NewFolderFontCache returns a new FolderFontCache .
4880	NewSyncFolderFontCache creates a new sync folder font cache .
4881	Main is the main entry point .
4882	NewPdf returns a new Fpdf instance .
4883	clearRect draws a rectangle .
4884	NewGraphicContext returns a new GraphicContext .
4885	Clear clears the current page .
4886	GetStringBounds gets the width of a string .
4887	CreateStringPath creates a new line at the given text .
4888	FillStringAt fills a string at the specified location .
4889	SetStrokeColor sets the stroke color .
4890	SetFillColor sets the fill color .
4891	SetLineDash sets the line dash pattern .
4892	SetLineWidth sets the line width .
4893	Main is the main entry point .
4894	Draw draws a text .
4895	SaveToPngFile saves the image to a png .
4896	LoadFromPngFile loads a png image from a png file .
4897	Resource returns the resource for the given folder .
4898	Output returns the path to the output file .
4899	Main runs the post script .
4900	Draw draws a draw2d image .
4901	Main draws the geometry .
4902	B Bubble draws the given height .
4903	Dash draws a dash .
4904	CubicCurve draws a cubic curve .
4905	FillStroke draws a stroke .
4906	FillStyle fills gc . DrawStyle with the given width and height .
4907	PathTransform draws a path .
4908	Star draws a star .
4909	Draw draws a rectangle .
4910	ConvertPath converts a draw2d path to a PDF .
4911	Main draws a line cap .
4912	Draw draws a new line with the given cap .
4913	DrawContour draws a circle at the given path .
4914	Flatten flattens a path .
4915	Clear clears the current image .
4916	ClearRect draws a rectangle .
4917	DrawImage draws an image .
4918	Main draws the frame image .
4919	Draw draws a draw2d image .
4920	Draw draws a draw .
4921	ChecksumString32S returns the checksum of s .
4922	ChecksumString64S returns the checksum of s .
4923	NewS32 returns a new xxHash32 .
4924	NewS64 returns a new xxHash64 .
4925	round64 rounds v to h .
4926	Checksum32S returns the checksum of the given byte slice .
4927	Checksum64S returns the checksum of the given bytes .
4928	getStage returns the stage of the daemon stage
4929	New returns a new Glg instance .
4930	Get creates a new glg instance .
4931	SetMode sets the mode of the logger .
4932	SetPrefix sets the prefix of the logger .
4933	Returns the current mode of the current logger
4934	Initialize the logger
4935	SetWriter sets the logger writer
4936	SetLevelColor sets the color of the log level .
4937	SetLevelWriter sets the logger writer
4938	AddStdLevel adds a log level to the console .
4939	EnableColor enable color
4940	EnableLevelColor enable level color .
4941	DisableLevelColor disables log level color .
4942	RawString returns raw string
4943	Returns the LEVEL level from the specified tag
4944	Println calls println function
4945	Fatal prints a FATAL message .
4946	Fatalf logs an error and panics .
4947	Returns true if the mode is enabled
4948	CaptureMetrics is a wrapper around the http . Handler interface
4949	get returns the value at the given position .
4950	Save saves data to the given writer
4951	SaveToFile saves data to a given file
4952	Load loads the data from an io . Reader
4953	LoadFromFile loads data from a file
4954	Key returns the key for the given id
4955	Value returns the value at the given id
4956	Delete deletes a node .
4957	Set implements the Version interface .
4958	Compare compares two versions .
4959	Slice returns a slice of int64s .
4960	BumpMajor increments the major and patch values .
4961	BumpMinor increments the version number .
4962	BumpPatch increments the patch count .
4963	validateIdentifier returns an error if the identifier is not a valid semver identifier .
4964	newStream creates a new Stream .
4965	addSubscriber adds a subscriber to the stream .
4966	New returns a new Server .
4967	Close stops the server .
4968	CreateStream creates a new stream
4969	RemoveStream closes a stream .
4970	StreamExists checks if a stream exists
4971	Publish publishes an event .
4972	NewClient returns a new Client .
4973	Subscribe reads events from the given stream .
4974	SubscribeChan subscribes to the given stream .
4975	SubscribeRaw sends a raw message to the server .
4976	Unsubscribe unsubscribes from a channel
4977	NewEventStreamReader returns a new EventStreamReader .
4978	ReadEvent reads the next event from the stream .
4979	HTTPHandler is the default http handler
4980	Add adds an event to the eventLog .
4981	Replay implements the EventLogger interface .
4982	readKey reads a PEM - encoded private key from a PEM - encoded file .
4983	writeKey writes a ecdsa private key to a file .
4984	anyKey returns a new ecdsa . Signer for a key .
4985	sameDir returns the full path to the given file .
4986	printAccount prints an account .
4987	tmpl executes a text template and writes it to w .
4988	printUsage prints the usage of the command .
4989	FromRequest extracts the X - Real - IP address from the request .
4990	Do executes the clear command .
4991	Do executes the disabled command .
4992	Do executes the removedom storage item .
4993	Do implements the SetDOMStorage interface .
4994	Do executes the push push message .
4995	Do executes the command .
4996	Do executes the inspecter command .
4997	Do executes the force update on page load .
4998	Do executes the SkipWaiting command .
4999	Do executes the StartWorker RPC command .
5000	Do executes the StopAllWorkers command .
5001	Do executes the stop worker .
5002	Do executes the remote command .
5003	Do executes the update registration .
5004	Do executes the bind command .
5005	Do executes the bind command .
5006	Error implements the error interface for ExceptionDetails .
5007	Do executes the specified command .
5008	Do executes the seekAnimations command .
5009	Do executes the setPaused command .
5010	Do sets the playback rate .
5011	Do executes the set timing command .
5012	Do executes the given command .
5013	Do purges the current JavaScript object .
5014	Do executes the set pressure notification .
5015	Do executes the simulated pressure notification .
5016	WithSamplingInterval adds the SamplingInterval to the start sampling params
5017	WithSuppressRandomness adds the SuppressRandomness to the start sampling params
5018	Do executes the sampler command .
5019	Do executes the StopSampling RPC command .
5020	Do executes the clear device orientation .
5021	Do executes the set device orientation .
5022	Do executes the given violation report .
5023	Do executes the stop violation report .
5024	String returns a string representation of the modifier .
5025	WithNodeID adds the nodeID to the get partialAXTree params
5026	WithBackendNodeID adds the BackendNodeID to the get partialAXTree params
5027	WithObjectID adds the objectID to the get partialAXTree params
5028	WithFetchRelatives adds the FetchRelatives params
5029	Do executes the set time domain .
5030	WithClipRect adds the ClipRect to the profile snapshot params
5031	Do executes the command .
5032	Do executes the clearObjectStore command .
5033	Do executes the delete database command .
5034	Do executes the deleteObjectStoreEntries command .
5035	WithKeyRange adds the KeyRange to the request data params
5036	Do sets the sampling interval .
5037	Do executes the command .
5038	WithCallCount adds the CallCount to the start precise coverage code params
5039	WithDetailed adds the Detailed coverage to the start precise coverage code params
5040	Do executes the precise precise coverage .
5041	Do executes the command execution .
5042	Do executes the precise precise coverage .
5043	Do executes the command .
5044	Do executes the ignore certificate errors .
5045	Do executes the AddInspectedHeapObject RPC command .
5046	Do executes the collectGarbage RPC command .
5047	WithSamplingInterval adds the SamplingInterval to the start sampling params
5048	Do executes the tracking heap heap .
5049	WithReportProgress adds the reportProgress to the stop tracking heap objects params
5050	Do executes the task .
5051	WithReportProgress adds the reportProgress to the take heap snapshot params
5052	Do executes the given snapshot .
5053	WithBrowserContextID adds the BrowserContextID to the GrantPermissions params
5054	Do executes the grant permissions command .
5055	WithBrowserContextID adds the BrowserContextID to the reset permissions params
5056	Do executes the reset permissions command .
5057	Do executes a crash command .
5058	Do executes the crash process .
5059	WithQuery adds the query to the get histograms params
5060	WithTargetID adds the targetID to the getWindowForTarget params
5061	Do executes the set window bounds .
5062	WithImage adds the image to the set dock tile params
5063	Do executes the dock tile command .
5064	Do executes the delete cache command .
5065	Do executes the delete entry .
5066	WithPathFilter adds the path to the request entries params
5067	Do executes the discard search results .
5068	Do executes the focus command .
5069	Do executes markdownable state .
5070	WithIncludeUserAgentShadowDOM adds the IncludeUserAgentShadowDOM to the perform search params
5071	Do executes redo command .
5072	Do executes the remove attribute command .
5073	Do executes the remove command .
5074	Do executes the request on the remote node .
5075	WithNodeID adds the nodeID to the resolve node params
5076	WithBackendNodeID adds the backend nodeID to the resolve node params
5077	WithExecutionContextID adds the ExecutionContextID to the resolve node params
5078	Do executes the set attribute value .
5079	WithName adds the name to the set attributesAsText params
5080	Do executes the set attributes command .
5081	Do executes the set file input files .
5082	Do executes the set inspected node .
5083	Do executes the set node value .
5084	Do implements the SetOuter interface .
5085	Do executes the undo command .
5086	Do executes the force command .
5087	Do executes the set effective property on the node .
5088	Do executes the start rule usage .
5089	Do executes a close command .
5090	Do executes the clear data for the given origin .
5091	Do executes the track storage storage .
5092	Do executes the track indexedDB query .
5093	Do is part of the CacheStorage interface .
5094	Do is part of the IndexedDB interface .
5095	Do executes the highlight command .
5096	Do highlights the specified frame .
5097	WithNodeID adds the nodeID to the highlight node params
5098	WithBackendNodeID adds the BackendNodeID to the highlight node params
5099	WithObjectID adds the objectID to the highlight node params
5100	WithSelector adds the selector to the highlight node params
5101	Do executes the highlight node .
5102	Do executes the highlight quads .
5103	Do highlights the specified rectangles .
5104	WithHighlightConfig adds the HighlightConfig to the set inspect mode params
5105	Do executes the inspect mode .
5106	Do executes the ShowAdHighlights command .
5107	WithMessage adds the message to the setPausedInDebuggerMessage params
5108	DoPausedInDebugger executes the setPausedInDebuggerMessage .
5109	Do executes the show debug debug borders .
5110	Do executes the show FPS counter .
5111	Do executes the show paint rects command .
5112	Do executes the show scroll bottleneck rects .
5113	Do executes the showHitTestBorders command .
5114	Do executes the showviewport size on the screen .
5115	Do executes the clear browser cache .
5116	Do executes the clear browser cookies .
5117	WithErrorReason adds the errorReason to the ContinueIntercepted request params
5118	WithRawResponse adds the rawResponse to the proceedIntercepted request params
5119	WithURL adds the URL to the ContinueIntercepted request params
5120	WithMethod adds the Method to the ContinueIntercepted request params
5121	WithPostData adds the postData to the proceedIntercepted request params
5122	WithHeaders adds the Headers to the ContinueIntercepted request params
5123	WithAuthChallengeResponse adds the authChallengeResponse to the ContinueIntercepted request params
5124	Do executes the request .
5125	WithURL adds the URL to the delete cookies params
5126	WithDomain adds the domain to the delete cookies params
5127	WithPath adds the path to the delete cookies params
5128	Do executes the delete command .
5129	WithConnectionType adds the ConnectionType to the emulateNetworkConditions params
5130	Do executes the given network condition .
5131	Do executes the enabled command .
5132	WithUrls adds the Urls to the get cookies params
5133	Do executes the replay XHR request .
5134	Do implements the SetBlockedURL interface .
5135	Do implements the SetBypassService interface .
5136	Do executes the cache disable command .
5137	WithURL adds the URL to the set cookie params
5138	WithDomain adds the domain to the set cookie params
5139	WithPath adds the path to the set cookie params
5140	WithSecure adds the secure to the set cookie params
5141	WithHTTPOnly adds the HTTPOnly to the set cookie params
5142	WithSameSite adds the same cookie to the set cookie params
5143	WithExpires adds the expires to the set cookie params
5144	Do executes the set cookies command .
5145	Do sets data size limits for a test
5146	Do executes the set extra HTTP headers .
5147	Do implements the SetRequestInterception interface .
5148	Do executes the clear device metrics override .
5149	Do executes the clear command .
5150	Do executes the reset page scale factor .
5151	Do executes the set focus emulation .
5152	Do executes the CPU throttling rate .
5153	WithColor adds the color to the set default background color override params
5154	Do executes the set default background color .
5155	WithScale adds the scale to the set device metrics override params
5156	WithDontSetVisibleSize adds the DontSetVisibleSize to the set device metrics override params
5157	WithScreenOrientation adds the ScreenOrientation params
5158	Do executes the set device metrics override .
5159	Do executes the scrollbars hidden .
5160	Do executes the set document cookie .
5161	DoEmitTouchEvents executes the touch events for the mouse .
5162	Do executes the setemulated media command .
5163	WithLatitude adds the Latitude to the set geolocationOverride params
5164	WithLongitude adds the Longitude to the set geococationOverride params
5165	WithAccuracy adds the accuracy to the set geoocation override params
5166	Do executes the set geococation override .
5167	Do sets the page scale factor .
5168	Do executes the script execution .
5169	WithMaxTouchPoints adds the MaxTouchPoints to the set touch emulation enabled params
5170	Do executes the touch emulation .
5171	WithBudget adds the Budget to the set virtual time policy params
5172	WithMaxVirtualTimeTaskStarvationCount adds the MaxVirtualTimeTaskStarvationCount to the setVirtualTimeTaskStarvationCount params
5173	WithWaitForNavigation adds the waitForNavigation params
5174	WithAcceptLanguage adds the acceptLanguage to the set user agent override params
5175	WithPlatform adds the platform to the set user agent override params
5176	Do executes the set user agent .
5177	Do executes the key exchange .
5178	Do executes the insert text command .
5179	WithButtons adds the Buttons to the dispatch mouse event params
5180	Do executes the mouse command .
5181	Do executes the touch event .
5182	Do executes the touch command .
5183	Do executes the ignore input events .
5184	Do executes the touch gesture .
5185	WithXOverscroll adds the xOverscroll to the SynthesizeScroll gesture params
5186	WithYOverscroll adds the YOverscroll to the SynthesizeScroll gesture params
5187	Do executes the SynthesizeScroll gesture .
5188	Do executes the touch gesture .
5189	Domain returns the domain part of the method .
5190	WithDepth adds the depth to the get event listeners params
5191	Do executes the remove breakpoint .
5192	WithTargetName adds the targetName to the remove event listener breakpoint params
5193	Do executes the remove event listener .
5194	Do executes the specified instrumentation breakpoint .
5195	Do executes the specified XHR breakpoint .
5196	Do executes the set DOM breakpoint .
5197	Do executes the set event listener .
5198	Do executes the set instrumentation breakpoint .
5199	Do executes the set XHR breakpoint .
5200	WithExecutor returns a context with the given executor .
5201	Execute executes a custom executor
5202	AttributeValue returns the value of the attribute with the given name
5203	xpath returns the path to the current node .
5204	String returns a string representation of NodeType .
5205	Do executes the set sink command .
5206	Do executes the tab mirroring command .
5207	Do executes the stop command .
5208	Do executes the StartObserving RPC command .
5209	Do executes the StopObserving RPC .
5210	Do executes the set recording .
5211	Do executes the clear events command .
5212	WithObjectID adds the ObjectID to the call function on params
5213	WithArguments adds the Arguments to the call function on params
5214	WithExecutionContextID adds the ExecutionContextID to the call function on params
5215	WithObjectGroup adds the ObjectGroup to the call function on params
5216	Do executes the DiscardConsoleEntries command .
5217	WithContextID adds the contextID to the evaluate params
5218	WithOwnProperties adds theOwnProperties to the get properties params
5219	WithGeneratePreview adds the GeneratePreview to the get properties params
5220	WithExecutionContextID adds the ExecutionContextID to the global lexicalScopeNames params
5221	WithObjectGroup adds the ObjectGroup to the query objects params
5222	Do executes the release command .
5223	Do executes the release command .
5224	Do executes the command .
5225	Do executes the custom object formatter .
5226	Do executes the max call stack size .
5227	Do executes the command execution .
5228	Do executes the add binding command .
5229	Do executes the remove binding command .
5230	Do executes the command .
5231	Do executes the RecordClockSyncMarker interface .
5232	WithBufferUsageReportingInterval adds the BufferUsageReportingInterval to the start params
5233	WithNoDisplayUpdates adds the NoDisplayUpdates to the BeginFrameParams instance
5234	WithScreenshot adds the screenshot to the BeginFrame params
5235	BringToFront executes the bringToFront RPC command .
5236	WithClip adds the Clip to the capture screenshot params
5237	WithFromSurface adds the FromSurface to the capture screenshot params
5238	WithWorldName adds the worldName to the createIsolatedWorld params
5239	WithGrantUniveralAccess adds the GrantUniveralAccess to the createIsolatedWorld params
5240	Do executes the reset navigation history .
5241	WithPromptText adds the promptText to the handleJavaScriptDialog params
5242	Do executes the dialog dialog .
5243	WithReferrer adds the referrer to the navigation params
5244	WithTransitionType adds the transitionType to the navigation params
5245	WithFrameID adds the frameID to the navigation params
5246	Do executes the navigation command .
5247	WithLandscape adds the Landscape to the printToPDFParams params
5248	WithDisplayHeaderFooter adds the DisplayHeaderFooter to the PrintToPDFParams instance
5249	WithPrintBackground adds the printBackground to the PrintToPDFParams instance
5250	WithScale adds the scale to the printToPDFParams params
5251	WithPaperWidth adds the PaperWidth to the printToPDavarams instance
5252	WithPaperHeight adds the PaperHeight to the printToPDFParams instance
5253	WithIgnoreInvalidPageRanges adds the IgnoreInvalidPageRanges to the PrintToPDFParams instance
5254	WithFooterTemplate adds the footerTemplate to the printToPDFParams instance
5255	WithPreferCSSPageSize adds the PreferCSSPageSize to the printToPDFPageSize params
5256	WithScriptToEvaluateOnLoad adds the scriptToEvaluateOnLoad to the reload params
5257	Do executes the reload command .
5258	Do executes the script to remove the specified script .
5259	Do executes the screencast command .
5260	Do executes the ad - blocking command .
5261	Do executes the request with the given policy .
5262	Do executes the set font families .
5263	Do executes the set font sizes .
5264	Do executes the set document content .
5265	WithDownloadPath adds the download path to the set downloadBehavior params
5266	Do implements the SetDownloadBehavior interface .
5267	Do executes the specified lifecycle events .
5268	WithFormat adds the Format to the startScreencast params
5269	WithMaxWidth adds the MaxScreencast params
5270	WithMaxHeight adds the MaxHeight to the startScreencast params
5271	WithEveryNthFrame adds the EveryNthFrame to the startScreencast params
5272	Do executes the screencast command .
5273	Do executes the stop load command .
5274	Do executes the given web lifecycle state .
5275	Do executes the screencast command .
5276	Do executes the compilation cache .
5277	Do adds the compilation cache to the cache .
5278	Do executes the clear compilation cache .
5279	WithGroup adds the group to the generate test report params
5280	Do executes the command .
5281	Do executes the activate command .
5282	WithBindingName adds the bindingName to the exposeDevToolsProtocol params
5283	Do executes the deposeDevTools protocol .
5284	WithBrowserContextID adds the BrowserContextID to the create target context params
5285	WithSessionID adds the sessionID to the detachFromTarget params
5286	Do executes the detach command .
5287	Do executes the Dispose BrowserContext RPC .
5288	WithSessionID adds the sessionID to the sendMessageToTarget params
5289	Do sends the send message to the specified target .
5290	Do executes the set auto attach command .
5291	DoDiscover executes the set discover targets command .
5292	DoRemote sets remote locations .
5293	WithPatterns adds the Patterns to the enable params
5294	WithHandleAuthRequests adds the HandleAuthRequests to the enable params
5295	Do executes the fail request .
5296	WithBody adds the body to the Fulfill request params
5297	WithResponsePhrase adds the ResponsePhrase to the Fulfill request params
5298	Do executes the request .
5299	WithURL adds the URL to the ContinueRequest params
5300	WithMethod adds the method to the continue request params
5301	WithPostData adds the postData to the continue request params
5302	WithHeaders adds the headers to the ContinueRequest params
5303	Do executes the command .
5304	Do executes the command .
5305	Do executes the command execution .
5306	WithIncludeCommandLineAPI adds the IncludeCommandLineAPI to the evaluate on call frame params
5307	Do executes the paused pause command .
5308	Do executes the pause on async call .
5309	Do executes the remove breakpoint .
5310	Do executes the resume command .
5311	Do executes the set async call stack depth .
5312	Do executes the blackbox patterns .
5313	Do executes the blackboxed range operation .
5314	WithURL adds the url to the set breakpointByURL params
5315	WithURLRegex adds the URLRegex to the set breakpointByURL params
5316	WithScriptHash adds the scriptHash to the set breakpointByURL params
5317	WithColumnNumber adds the breakpoint to the set breakpointByURL params
5318	WithCondition adds the condition to the set breakpoint on function call params
5319	Do executes the set breakpoints active .
5320	Do executes the pause on exceptions .
5321	Do executes the set return value .
5322	WithDryRun adds the dryRun to the set script source params
5323	Do executes the set skipAllPauses command .
5324	Do executes the set variable value .
5325	WithBreakOnAsyncCall adds the breakOnAsyncCall to the stepInto params
5326	Do executes the step step .
5327	Do executes the command .
5328	Do executes the step over the command .
5329	Listen implements the notify . ListenFundle interface .
5330	ListenClose calls ListenCloseF .
5331	Connected is part of the Network interface .
5332	Disconnected is part of the Network interface .
5333	OpenedStream is part of the Network interface .
5334	ClosedStream is part of the Network interface .
5335	WithNoDial returns a context with no dial set .
5336	GetNoDial returns the NoDial value for the context
5337	WithDialPeerTimeout returns a context with dial peer timeout
5338	Open is part of the Driver interface .
5339	Prevpos returns the previous position of the previous position
5340	Last returns the index of the last read buffer .
5341	DeleteMostRecentBytes removes n bytes from the buffer .
5342	NewFloat64RingBuf creates a new float64 ring buffer .
5343	TwoContig returns the two slices of two slices .
5344	Earliest returns the earliest value of the buffer .
5345	Values returns a slice of float64 values
5346	NewAtomicFixedSizeRingBuf creates a new AtomicFixedSizeRingBuf .
5347	Reset resets the buffer .
5348	NewPointerRingBuf creates a new PointerRingBuffer .
5349	TwoContig implements the PointerRing interface .
5350	NumPage returns the number of pages in the trailer .
5351	Font returns a font for the given name .
5352	Width returns the width of the font .
5353	Encoder returns the TextEncoder for the Font .
5354	Interpret attempts to interpret the given string into the given context .
5355	Open opens a file .
5356	NewReader returns a new io . Reader wrapping f .
5357	NewReaderEncrypted returns a new reader for the given PDF file .
5358	Trailer returns a new Value .
5359	Kind returns the kind of the value .
5360	newBuffer returns a new buffer .
5361	Paginate returns pagination information about the current page
5362	CascadeDelete deletes the cascade of document
5363	cascadeDeleteWithConfig is used to delete a relation from a relation config
5364	cascadeSaveWithConfig is the same as cascadeSaveWithConfig except that it returns the change info .
5365	MapFromCascadeProperties converts a list of properties to a map .
5366	Connect connects to the Mongo server
5367	lowerInitial converts a string to lower case
5368	Find returns the resultset for the given query .
5369	RawInformationQuery performs a raw query against an HTTP request .
5370	NewClient creates a new Client .
5371	Close closes the underlying connection .
5372	startTLSIfRequired creates a new stream features based on the provided options .
5373	startStream starts a new stream .
5374	IsEncrypted returns true if the client is encrypted
5375	Recv reads a chat message .
5376	Send a chat message
5377	SendOrg sends an org
5378	SendKeepAlive sends keep alive
5379	SendHtml sends an HTML message
5380	nextStart returns the next start element
5381	JoinProtectedMUC joins a protected MUCI with the specified nick_type
5382	LeaveMUC is used to leave a presence
5383	AttachBuffer attaches a byte buffer to the message .
5384	Attach attaches a file to the specified file .
5385	Inline adds the message to the file .
5386	AddHeader adds a new header to the message .
5387	Tolist returns the list of recipients
5388	Bytes returns a string representation of the message .
5389	Send mail message
5390	GetHeader returns the first value associated with the given header .
5391	GetHeaderValues returns the list of values associated with the given header .
5392	SetHeader adds a single header to the envelope .
5393	AddHeader adds a new header to the envelope .
5394	DeleteHeader removes a header from the envelope .
5395	AddressList returns the list of addresses in the envelope .
5396	Clone returns a deep copy of the envelope .
5397	ReadEnvelope from io . Reader
5398	EnvelopeFromPart creates an envelope from a part .
5399	parseTextOnlyBody parses an Envelope body into e . Body
5400	parseMultiPartBody parses a multipart body into e .
5401	matchHTMLBodyPart checks if the part is a HTML body part .
5402	ensureCommaDelimitedAddresses ensures the given string is a comma - separated string .
5403	Date specifies the date .
5404	From sets the email address
5405	Subject sets the email subject .
5406	To adds a new email address to the mail .
5407	ToAddrs sets the list of recipients to use .
5408	CC adds a new email address
5409	CCAddrs sets the email address of the email .
5410	ReplyTo sets the email address to reply to the email address .
5411	Header adds a header to the email .
5412	AddAttachment adds an attachment to the email .
5413	AddFileAttachment adds a file to the email .
5414	AddInline adds a new part to the email .
5415	Equals returns true if two MailBuilder are equal
5416	Encode writes the part .
5417	encodeHeader encodes a multipart header .
5418	encodeContent encodes the content into bte .
5419	selectTransferEncoding returns the transfer encoding for the given content .
5420	setParamValue sets the value for a given key
5421	NewBase64Cleaner returns a new Base64Cleaner
5422	decodeToUTF8Base64Header decodes a MIME header .
5423	parseMediaType parses a media type and returns the parsed media type .
5424	fixMangledMediaType fixes MIME media type .
5425	detectMultipartMessage returns true if the part is a multipart message .
5426	detectBinaryBody determines if the part is a binary body .
5427	B BreadthMatchFirst returns the first part of the parts .
5428	B BreadthMatchAll returns all parts of a part .
5429	DepthMatchFirst returns the first part of the part .
5430	DepthMatchAll returns all parts of a part .
5431	ToASCII converts a string to UTF - 8 .
5432	NewPart creates a new Part .
5433	AddChild adds a child to p .
5434	TextContent returns true if part is part content type
5435	setupHeaders parses a multipart part .
5436	setupContentHeaders parses the Content - Content - Type header .
5437	convertFromDetectedCharset tries to convert the charset to UTF - 8 charset .
5438	Clone clones a part .
5439	ReadParts reads parts from io . Reader
5440	parseParts parses the parts of the reader .
5441	UUID returns a random UUID
5442	NewQPCleaner returns a new QPCleaner .
5443	Error returns the string representation of the error .
5444	addError adds an error to the list of errors .
5445	addWarning adds a warning .
5446	Wrap takes a slice of strings and returns the resulting slice .
5447	ConvertToUTF8String converts a byte slice to a string
5448	JoinAddress joins multiple addresses .
5449	Printf implements Markdown .
5450	EnvelopeToMarkdown writes a markdown to w .
5451	FormatPart formats a Part .
5452	newBoundaryReader returns a new boundaryReader .
5453	Read implements the io . Reader interface .
5454	Next implements io . Reader .
5455	Parse parses a byte slice and returns it .
5456	Assign assigns a value to a given symbol .
5457	NewRClient creates a new RClient with the given host and port .
5458	NewRClientWithAuth creates a new RClient with the given username and password .
5459	Register registers a custom generator .
5460	Fuzz fuzzes all fields in e .
5461	findFakeFunctionFor returns a function that looks for a given function name .
5462	Apply applies options to options .
5463	ToOption converts options into an Option .
5464	waitThenClose waits until the event channel is closed .
5465	send sends an event .
5466	NewMovingAverage returns a new MovingAverage with the given age and age .
5467	Set value
5468	calcKeys50 calculates the keys from the given password .
5469	getKeys returns a slice of keys that have been used to encrypt the encrypted key .
5470	checkPassword returns nil iff the password is valid .
5471	parseFileEncryptionRecord parses the encryption record .
5472	parseEncryptionBlock parses the encryption block .
5473	newArchive50 returns a new fileBlockReader .
5474	Read implements io . Reader .
5475	ReadByte reads a single byte from the cipherBlockReader .
5476	newCipherBlockReader returns a new cipherBlockReader .
5477	newAesDecryptReader returns a new instance of the AESDecryptReader .
5478	limitByteReader returns a limited byte reader with n bytes .
5479	Mode returns the file s mode bits .
5480	nextBlockInFile returns the next block in the file .
5481	next returns the next block .
5482	Read implements io . Reader .
5483	Read implements io . Reader .
5484	Next returns the next file .
5485	NewReader returns a new Reader reading from r .
5486	OpenReader opens a ReadCloser .
5487	getV3Filter returns the v3 filter for the given code .
5488	init initializes decoder .
5489	readBlockHeader reads the next block header .
5490	readCodeLengthTable reads the code length table .
5491	shrinkStates returns a slice of states with the given size .
5492	expandStates expands the current state of the current state .
5493	pushByte pushes a byte c to the heap .
5494	sccByte returns the succByte of the given state .
5495	ccContext returns a context for the given state .
5496	calcAes30Params returns the key and iv values for a given password .
5497	parseDosTime parses the os . Time value as a time . Time .
5498	decodeName decodes a name from buf and returns it .
5499	readExtTimes reads the extension time .
5500	readBlockHeader reads a block header from the archive .
5501	newArchive15 returns a new fileBlockReader .
5502	readFilter5Data reads the filter5 data from the bitReader .
5503	writeByte appends a byte c to w .
5504	copyBytes copies bytes from the buffer .
5505	read reads bytes from the window .
5506	queueFilter adds a new filter to the buffer .
5507	Process filters .
5508	fill fills the next filter block .
5509	Read implements io . Reader
5510	readFull is a wrapper around io . ReadFull
5511	findSig attempts to find the next sig in bufio . Reader .
5512	execute executes the given command .
5513	newVM returns a new instance of VM .
5514	limitBitReader returns a bitReader that reads n bytes from r .
5515	readUint32 reads a uint32
5516	Step3 step3
5517	Stem removes a word from a word .
5518	Step 6 . 3
5519	Step 5 . 5
5520	step2a takes a snowball word and returns true if the snowball was created
5521	Step 4 . 3
5522	Stem takes a word and returns a stemmed string .
5523	step1c checks if the word is a valid word .
5524	Step3 step3 step 3
5525	isStopWord returns true if the given word is a stop word .
5526	capitalizeYUI capitalizes a snowflake word .
5527	step2 takes a snowball word and returns true if it was successful .
5528	step3 step3 step3 step3
5529	Step0 step0 step0
5530	VnvSuffix returns the index of a word .
5531	Step1 step1 step 1 step 1
5532	step2a takes a snowball word and returns true if it s a step .
5533	removePerfectiveGerundEnding checks to see if the word is older than the given snowball .
5534	removeAdjectivalEnding returns true if the word ends with the given snowflake word .
5535	step2b takes a snowball word and returns true if the word was built .
5536	Step 4
5537	step5 returns true if the snowball is valid .
5538	Stem converts a word to a word .
5539	Stem converts a word to a word .
5540	isStopWord returns true if the given word is a stop word .
5541	isStopWord returns true if the given word is a stop word .
5542	New creates a SnowballWord from a string
5543	RemoveLastNRunes removes n runes from the word .
5544	resetR1R2 resets R1 r2 .
5545	slice returns a slice of runes between start and stop .
5546	FitsInR1 returns true if the word is in R1
5547	FitsInR2 returns true if the word is in R2
5548	FitsInRV returns true if the word is in R .
5549	FirstPrefix returns the first matching prefixes .
5550	HasSuffixRunes returns true if the word has the given suffix runes .
5551	FirstSuffixIfIn returns the first suffix in the snowball .
5552	RemoveFirstSuffixIfIn removes the first suffix from the word .
5553	RemoveFirstSuffix removes the first suffix from the word
5554	FirstSuffix returns the first suffix of the word .
5555	Preprocess words .
5556	step0 returns true if the word is a step0 .
5557	step1b takes a snowflake word and returns true if it was successful .
5558	step2b takes a snowball word and returns true if the word was built .
5559	capitalizeYs takes a snowball word and returns the number of capitalizations .
5560	uncapitalizeYs recalculates the Snowball from the snowball .
5561	mer stemSpecialWord is used to stem a word
5562	isShortWord returns true if SnowballWord is a short word .
5563	step1a checks if the word is a valid word
5564	Set sets a value for a given key .
5565	Get returns the value for a given key
5566	Cleanup removes the goroutine from the goroutine .
5567	getValues returns the current values .
5568	linkGRs sets goroutine s current goroutine data .
5569	unlinkGRs removes grpc gRPC goroutine data .
5570	AppUri creates an AppUriCreator for an App .
5571	CurlAppWithTimeout is like CurlApp but waits for the specified app to finish .
5572	CurlApp starts an app with the given app name and args .
5573	CurlAppRoot returns the root URL of the app .
5574	GetTags returns a slice of tags from a string .
5575	GetTagsAsUniqueStrings returns a slice of tags with prefix and terminator .
5576	isTerminator returns true if r is a terminal .
5577	uniquify removes duplicates
5578	New returns a new Location middleware .
5579	Get gets the value from the gin context .
5580	GenerateRSAKeyPair generates a new RSA private key pair .
5581	Verify checks if data is a valid signature .
5582	Encrypt encrypts data using RSA public key
5583	Sign implements rsa . Signer
5584	GetPublic returns the public key
5585	Decrypt decrypts an RSA private key
5586	UnmarshalRsaPrivateKey unmarshals a Rsa private key
5587	GenerateKeyPair generates and returns a new private key pair .
5588	GenerateKeyPairWithReader generates and returns a new private key pair .
5589	GenerateEKeyPair generates and returns a shared keypair .
5590	UnmarshalPublicKey unmarshals a public key into a PublicKey
5591	MarshalPublicKey converts a PubKey into a protobuf .
5592	UnmarshalPrivateKey unmarshals a private key from a byte slice .
5593	MarshalPrivateKey encodes a private key into a protobuf .
5594	KeyEqual returns true if two keys are equal .
5595	GenerateECDSAKeyPair generates an ECDSA private key pair
5596	GenerateECDSAKeyPairWithCurve generates an ECDSA private key and returns the public key .
5597	DEPRECATED
5598	UnmarshalECDSAPrivateKey parses a ECDSA private key
5599	UnmarshalECDSAPublicKey unmarshals an ECDSA public key
5600	Equals returns true if the two keys are equal
5601	Sign implements the Signer interface .
5602	Equals returns true if the two keys are equal
5603	Verify checks if data is a valid signature .
5604	GenerateSecp256k1Key generates a secp256k1 private key
5605	UnmarshalSecp256k1PrivateKey decodes a secp256k1 private key .
5606	UnmarshalSecp256k1PublicKey decodes a secp256k1 public key .
5607	Equals returns true if this key is equal to the given key .
5608	Sign implements the Crypto interface for Crypto .
5609	Equals returns true if this secp256k1PublicKey is equal to the given public key .
5610	Verify checks if data is a valid signature .
5611	Raw returns a copy of the private key
5612	Sign implements the crypto . Signer interface .
5613	Equals returns true if the key is equal to the given public key .
5614	Verify returns true iff sig is a valid signature .
5615	UnmarshalEd25519PublicKey unmarshals an Ed25519 public key .
5616	UnmarshalEd25519PrivateKey unmarshals ed25519 private key
5617	EditScriptForStrings is similar to EditScriptForStrings except it takes a slice of strings .
5618	EditScriptForMatrix returns an edit script for the given matrix .
5619	WriteMatrix writes matrix to writer
5620	New creates a new Lockfile .
5621	GetOwner returns the owner of the pid file .
5622	TryLock tries to acquire a lockfile . If the lockfile does not exist it will panic .
5623	Unlock unlocks the lockfile .
5624	NewBase creates a new Base instance .
5625	SetFallbackLogger sets the fallback logger
5626	AddLogger add logger
5627	LogWithTime implements the Logger interface .
5628	Log implements the Log interface
5629	Warnm error message
5630	NewTemplateWithFuncMap is like NewTemplateWithFunc but uses the given function to create a template .
5631	Execute executes a template message .
5632	NewTemplateMsg returns a TemplateMsg struct .
5633	NewLogAdapterFor returns a new LogAdapter for the given base .
5634	SetAttr sets an attribute
5635	LogWithTime implements LogAdapter .
5636	Log implements LogAdapter .
5637	Dbgm calls Debugm with attrs
5638	NewAttrsFromMap creates a new Attrs from a map .
5639	NewAttrsFromAttrs creates a new Attrs from a slice of Attributes .
5640	MergeAttrs merges the given attributes into the attributes .
5641	SetAttr sets a new attribute
5642	GetAttr returns the value associated with the given key .
5643	RemoveAttr removes an attribute from the attributes .
5644	Attrs returns a copy of the attributes .
5645	Debugm calls the default Debugm function
5646	Infom calls default Infom function .
5647	Warningm calls default Warningm .
5648	Errm is a wrapper around Errorm .
5649	Errorm implements the error interface
5650	Fatalm calls default Fatalm
5651	Dief calls DefaultDefault
5652	Diem prints a diem
5653	ToLogLevel converts a string to a LogLevel
5654	CallErr executes the given function f and returns the error .
5655	New creates a new StackdriverHook .
5656	Fire logs a log entry
5657	Levels returns an Option that sets the logging level for the stackdriver .
5658	ProjectID sets the project ID
5659	EntriesService configures the logging service .
5660	LoggingService configures the logging service .
5661	ErrorService sets the error reporting service .
5662	HTTPClient returns an Option that sets the LoggingService .
5663	MonitoredResource sets the logger used by the Stackdriver .
5664	ErrorReportingLogName is an Option that sets the name of the log driver .
5665	Labels sets the labels for the stackdriver
5666	PartialSuccess is a functional option that enables partial success .
5667	GoogleComputeCredentials is a functional option for Google ComputeCredentials .
5668	NewEncoder returns a new Encoder .
5669	NewDecoder returns a new decoder .
5670	NewStreamEncoder returns a new StreamEncoder .
5671	NewStreamDecoder returns a new StreamDecoder .
5672	Register adds a codec to the registry .
5673	Unregister removes a codec from the registry .
5674	Lookup returns the codec for the given media type .
5675	Codecs returns the registered codecs .
5676	Type returns the type of the error .
5677	Install a new adapter
5678	AdapterOf returns the adapter for the given type .
5679	AppendDuration appends duration to b .
5680	fmtInt formats uint64 to buf .
5681	NewDecoder returns a new objconv . Decoder .
5682	NewStreamDecoder returns a new objconv . StreamDecoder .
5683	Unmarshal parses a byte slice and stores it in the value pointed to by v .
5684	String returns the string representation of the type .
5685	zeroValueOf returns the zero value of the given type .
5686	NewValueParser returns a new ValueParser .
5687	ParseTag parses a tag
5688	NewEncoder returns a new objconv . Encoder .
5689	NewStreamEncoder returns a new objconv . StreamEncoder .
5690	NewPrettyEncoder returns a new objconv . Encoder .
5691	NewPrettyStreamEncoder returns a new ObjectEncoder .
5692	Marshal returns a byte slice .
5693	NewEncoder returns a new Encoder .
5694	EncodeArray encodes an array to JSON .
5695	EncodeMap calls the encoder for each key - value pair .
5696	NewStreamEncoder returns a new StreamEncoder .
5697	Open implements io . Writer .
5698	Close closes the stream .
5699	Encode implements the Encoder interface .
5700	newStructType creates a new structType from t .
5701	lookup returns the type for the given type .
5702	clear removes all items from the cache .
5703	CheckUint64Bounds checks if v is a uint64
5704	CheckInt64Bounds returns an error if the given int64 is not valid .
5705	NewDecoder returns a new Decoder .
5706	Decode implements the Decoder interface .
5707	DecodeArray decodes a Array value .
5708	DecodeMap decodes a map value .
5709	NewStreamDecoder returns a new ObjectDecoder .
5710	Len returns the length of the decoder .
5711	Err returns the error of the decoder .
5712	Decode implements the Decoder interface .
5713	Encoder returns a new stream encoder .
5714	init sets default flags for logging .
5715	LevelFromString returns the Level from a string
5716	NewBackend returns a new instance of Backend .
5717	callsite returns the filename and line number .
5718	print prints a formatted string .
5719	Logger returns a new logger
5720	Trace implements the Logger interface .
5721	Tracef is part of the Logger interface .
5722	Debug logs a debug message .
5723	Debugf logs a debug message .
5724	Info logs an INFO message .
5725	Infof logs a formatted string .
5726	Warn implements the Logger interface .
5727	Warnf implements the Logger interface .
5728	Error logs an error message .
5729	Errorf logs an error message .
5730	Critical logs a critical message .
5731	Criticalf logs a formatted string .
5732	Level returns the current log level .
5733	SetLevel sets the log level .
5734	Concat concatenates a Permission
5735	HasPermission checks if a permission is in a permission
5736	ConcatPermissioner returns a new Permissioner
5737	HasPermission returns true if there is no permission in the list
5738	Register registers a checker
5739	NewPermission creates a new Permission
5740	Get returns a Checker by name
5741	isPtrFromHeap returns true if the given address is a pointer .
5742	IsPtr returns true if the given address is a pointer .
5743	FindObject finds an object from the heap .
5744	ForEachObject calls fn for each Object in the page .
5745	ForEachRoot calls fn for each root of the process .
5746	Addr returns the address of the process
5747	Size returns the size of the heap .
5748	Type returns the type of the given object .
5749	ForEachRootPtr calls fn for each element in the process .
5750	edge edges1 returns true if there is at least one edge .
5751	setHeapPtr sets heap info for a given address .
5752	findHeapInfo returns the heapInfo for the given address .
5753	allHeapInfo allocates a heap . heapInfo .
5754	runtimeName returns the runtime name for the given dwarf .
5755	readRuntimeConstants initializes the runtime constants .
5756	add adds a function to the tab .
5757	sort sorts the minimum number of times .
5758	find finds a function by PC .
5759	read reads a PCTab .
5760	readVarint reads a varint
5761	useLine returns a line for use .
5762	commandPath returns the full path of the command .
5763	readCore reads a core . Core .
5764	typeName returns the name of the type .
5765	fieldName returns the field name for x .
5766	typeFieldName returns the name of the field .
5767	FindFunc finds the function in the process
5768	Core returns a Process from a core . Process .
5769	Address returns the address of the region .
5770	Int returns the int value of the region .
5771	Uintptr returns the current uintptr .
5772	Cast returns a new region .
5773	Deref implements region .
5774	Uint64 returns the uint64 value as a uint64 .
5775	Uint32 returns the uint32 value as a uint32 .
5776	Int32 returns the int32 value as an int32 .
5777	Uint16 returns the uint16 value as a uint16 .
5778	Uint8 returns the uint8 value of the region .
5779	String returns the string representation of the region .
5780	SlicePtr returns a pointer to a slice .
5781	SliceLen returns the length of the region .
5782	Field returns the region of the region .
5783	ReadUint8 returns the uint8 value of a given address
5784	ReadUint16 reads a uint16 from the core file
5785	ReadUint32 reads a uint32 from the core file
5786	ReadUint64 reads a uint64 from the core file
5787	ReadInt8 reads an int8
5788	ReadInt16 reads an int16
5789	ReadInt32 read int32
5790	ReadInt64 read int64
5791	ReadUintptr reads a uintptr
5792	ReadPtr returns the address as a uint64 .
5793	ReadCString read a string
5794	Source returns the name of the mapping .
5795	findMapping returns the mapping for a given address .
5796	Max returns the largest address
5797	Min returns the minimum address
5798	Align returns the Align address .
5799	initialize initializes the dom dom .
5800	calculate computes the nodes in the dom .
5801	eval evaluates the given vName and returns it .
5802	compress compresses the given VName .
5803	link adds v to the DOM .
5804	reverse reverses the dom .
5805	calcSize computes the size of the process .
5806	objField returns a string representation of the field .
5807	Readable returns true if the address is readable
5808	ReadableN returns true if n is readable false otherwise .
5809	splitMappingsAt splits a mapping at a given address .
5810	DynamicType returns the type of the given type .
5811	Create implements Btrfs . Filesystem .
5812	Resolve resolves an IP address from the given URL .
5813	Equal returns true if tokens are equal .
5814	newDefaultClassifier returns a default tokenClassifier .
5815	Next returns the next token
5816	NewTokenizer returns a new Tokenizer .
5817	Split splits a string into a slice of strings .
5818	Between returns the string between left and right
5819	BetweenF returns a function that returns a function that returns a function that returns a function .
5820	Camelize returns a copy of the string s .
5821	Capitalize capitalizes a string .
5822	CharAt returns the character at the given index .
5823	CharAtF returns a function that returns a function at the given index .
5824	ChompLeft returns s with the given prefix
5825	ChompLeftF is a wrapper around ChompLeftF .
5826	ChompRight returns s with suffix removed .
5827	ChompRightF is a wrapper around ChompRightF
5828	ClassifyF converts a string to a classify function .
5829	Clean removes spaces
5830	Dasherize takes a string and returns it as a string .
5831	EscapeHTML escape html
5832	DecodeHTMLEntities decodes HTML entities
5833	EnsurePrefixF is a wrapper around EnsurePrefix .
5834	EnsureSuffixF is a wrapper around EnsureSuffix .
5835	Humanize turns a string into a human readable form .
5836	Iif returns true if condition is false otherwise .
5837	IndexOf returns the index of the first occurrence of needle in the string .
5838	IsLower returns true if the given string is a lower case .
5839	IsUpper returns true if s is a uppercase .
5840	Left returns the left part of s .
5841	LeftF is a wrapper around Left
5842	Literals converts a string to a slice of letters
5843	Lines returns a slice of lines in s .
5844	Map iterates over a slice of strings and iterates over elements .
5845	Match checks if a string matches a regular expression
5846	tasks is the main task for the project .
5847	Pad pad string to string
5848	PadF pad string
5849	PadLeft pad string
5850	PadLeftF pad left
5851	PadRightF pad right
5852	Pipe returns a copy of the string s
5853	QuoteItems converts a slice of strings into a slice of strings .
5854	ReplaceF returns a function that replaces n characters with newlines .
5855	ReplacePatternF is a wrapper around ReplacePatternF .
5856	Reverse reverses a string
5857	RightF is a wrapper around RightF
5858	Slice returns a slice of string s .
5859	SliceF returns a function wrapper around a slice of strings .
5860	SliceContains returns true if the slice contains the given value .
5861	SliceIndexOf returns the index of the given string slice or - 1 if not found
5862	Slugify sanitizes a string .
5863	StripPunctuation removes whitespace characters from a string .
5864	StripTags removes tags from a string
5865	Substr returns the substring at index n .
5866	SubstrF is a wrapper around SubstrF .
5867	TemplateWithDelimiters returns a template with the given values .
5868	ToArgv converts a string to a list of arguments
5869	ToBool converts a string to a boolean
5870	ToBoolOr convert string to bool
5871	ToIntOr cast string to int
5872	ToFloat32Or converts a string to float32
5873	ToFloat64Or converts a string to float64
5874	UnescapeHTML unescape HTML
5875	WrapHTML adds HTML tags to HTML tags .
5876	WrapHTMLF is a wrapper around WrapHTMLF .
5877	ReapChildren is used to re - reap the children of the given pids .
5878	SdNotify writes the given state to systemd .
5879	NewAuthenticator returns a new Authenticator
5880	Endpoint returns an http . Handler for the given prefix .
5881	Unique removes duplicates from the given slice .
5882	Contains returns true if the list contains the given id .
5883	Includes returns true if all of the objects are in the subset .
5884	Require is the same as Require except that it requires a Model .
5885	Enqueue creates a new job
5886	A returns an Authorizer that uses the given matcher .
5887	Run authorizes the given enforcers .
5888	And creates a new authorizer and appends to the given arguments .
5889	Or returns an Authorizer that matches a and b .
5890	Enqueue adds a new job to the queue
5891	Callback adds a callback to the queue
5892	NewWatcher returns a new watcher .
5893	Add adds a new stream
5894	Action returns fire . Action
5895	Write returns true if the operation is a write operation
5896	String returns the string representation of the operation .
5897	Query returns a bson filter for the current context
5898	Respond writes the given value to the ResponseWriter .
5899	EnsureApplication ensures that an application exists .
5900	EnsureFirstUser ensures the first user in the store
5901	Callback returns a fire . Callback
5902	OpenStream creates a new stream
5903	Close closes the stream .
5904	AddTokenIndexes adds indexes to the indexer
5905	GetTokenData returns token data
5906	SetTokenData sets the token data
5907	ValidSecret returns true if the secret is valid
5908	HashSecret hashes the application s secret .
5909	ValidPassword returns true if the given password is valid .
5910	HashPassword hashes the User s password .
5911	MustCreateStore is like CreateStore but panics .
5912	CreateStore creates a new mongo store
5913	C returns the mgo . Collection for the given model .
5914	NewAssetServer returns a new http . Handler for the given directory
5915	DefaultGrantStrategy is the default grant strategy
5916	DefaultTokenData returns the default token data .
5917	GenerateToken generates a new token for the policy
5918	ParseToken parses a JWT token
5919	E creates a new enforcer
5920	MustGet is part of the Model interface .
5921	MustSet panics .
5922	NewGroup returns a new group .
5923	Add adds a controller to the group .
5924	Endpoint returns a handler for the group
5925	Add adds an index to the index .
5926	AddRaw adds an index to the index .
5927	Ensure ensures that all indexes exist .
5928	NewCatalog creates a new Catalog instance .
5929	Add adds models to the catalog .
5930	All returns all models in the catalog .
5931	Visualize returns a visualization of the catalog .
5932	NewErrorReporter returns a Reporter that reports errors .
5933	EnsureIndexes ensures that the indexer exists .
5934	E returns an error
5935	Compose takes a chain of middlewares and returns a http . Handler .
5936	Includes returns true if all of the items in the given subset are included .
5937	Intersect returns the intersection between two lists .
5938	E returns a new Error instance .
5939	RootTracer is a middleware for tracing
5940	NewTracerFromRequest creates a new Tracer from a request
5941	NewTracer returns a new Tracer .
5942	Push a span
5943	Last returns the span .
5944	Tag implements the Tracer interface .
5945	Log implements Tracer .
5946	Context implements opentracing . Tracer .
5947	Pop implements Tracer .
5948	Finish implements Tracer .
5949	NewPool creates a new pool .
5950	Add a task to the pool
5951	Run starts the pool
5952	NewBodyLimiter returns a new BodyLimiter
5953	LimitBody limits the size of the body .
5954	C returns a Callback that invokes the specified function .
5955	Only returns a matcher that matches the given operations
5956	BasicAuthorizer returns a callback that authenticates the request with the given credentials .
5957	ModelValidator returns a callback that validates the model .
5958	TimestampValidator returns a callback that can be used to validate the timestamp .
5959	RelationshipValidator returns a function that returns a function that will be called when a model is found .
5960	Inspect inspects all objects in the Seekret
5961	NewRule creates a new rule
5962	AddUnmatch adds a unmatch to the rule list
5963	Run returns a list of run results
5964	NewSecret creates a new secret
5965	NewObject returns a new object .
5966	SetMetadata sets the metadata for a given key .
5967	GetMetadata returns the value associated with the key
5968	Returns all metadata
5969	SetRule sets the rule
5970	SetObject sets an object
5971	SetNline sets the nline number
5972	SetContent sets the content of the exception .
5973	Run checks if the given secret matches the given secret .
5974	AddRule add rule
5975	LoadRulesFromFile loads rules from file
5976	LoadRulesFromDir loads rules from directory
5977	DefaultRulesPath returns the default rules path
5978	EnableRule enables a rule
5979	DisableRule disables a rule
5980	EnableRuleByRegexp enables rule by regexp
5981	DisableRuleByRegexp disables rule by regexp
5982	LoadObjects loads all objects from the given source .
5983	GroupObjectsByMetadata implements the SeekRetry interface .
5984	GroupObjectsByPrimaryKeyHash returns a map of objects by primary key hash .
5985	AddException adds an exception
5986	LoadExceptionsFromFile loads the exceptions from a file .
5987	printPlainResults prints a list of results to stdout
5988	printJsonResults prints results to stdout
5989	NewXor64Source returns a new instance of Xor6464Source .
5990	xor64 returns the xor of the given uint64 .
5991	next returns the next uint64 from the source .
5992	Seed sets the source of the source .
5993	NewFrameSet creates a new FrameSet .
5994	handleMatch handles the frame
5995	Index returns the index of the given frame .
5996	Frame returns the position of the frame at index .
5997	HasFrame returns true if the frame is in the set .
5998	FrameRangePadded returns a string representation of the frame set .
5999	Normalize returns a copy of s .
6000	FramesToFrameRange converts a slice of frames to a string .
6001	frameRangeMatches returns a slice of strings that match a frame .
6002	toRange converts a start and step into a slice .
6003	NewWorkManager creates a new work manager
6004	processSources processes the source files in the working directory
6005	isInputDone returns true if input is non - nil .
6006	closeInputs closes all input directories
6007	load loads a set of tasks from the given paths .
6008	loadRecursive loads all files in the given paths .
6009	preparePaths takes a list of paths and returns a list of files and a list of files .
6010	PadFrameRange pads a frame in a frame .
6011	zfillString returns a string with zeros z .
6012	zfillInt returns z with zeros z .
6013	NewInclusiveRange creates a new InclusiveRange .
6014	String returns the string representation of an InclusiveRange .
6015	End returns the end of the range .
6016	Len returns the length of the length of the range .
6017	Min returns the minimum of the range
6018	Max returns the maximum value in the range
6019	Contains returns true if the value is within the range .
6020	closestInRange returns the closest value in the given value
6021	Index returns the index of the nearest value
6022	String returns a string representation of the InclusiveRanges .
6023	Len returns the number of blocks in the range
6024	Start returns the number of blocks in the range .
6025	End returns the end of the range .
6026	Min returns the minimum of the set .
6027	Max returns the maximum value in the range
6028	numRanges returns the number of blocks in the range .
6029	rangeAt returns the InclusiveRange at the given index .
6030	Append appends an InclusiveRange to the list .
6031	AppendUnique appends the given start and step to the end .
6032	Contains returns true if the given value is in the range .
6033	Index returns the index of the given value .
6034	FrameRange returns the length of the frame .
6035	FrameRangePadded returns the length of the frame .
6036	Index returns the path of the frame .
6037	SetDirname sets the directory name .
6038	SetPadding sets the padding of the file .
6039	SetPaddingStyle sets the padding style .
6040	SetExt sets the extension extension .
6041	SetFrameRange sets the frame range .
6042	Len returns the length of the sequence .
6043	String returns the string representation of the sequence .
6044	Copy returns a new FileSequence
6045	NewClient returns a new Client .
6046	UnmarshalXML implements xml . Unmarshaler
6047	UnmarshalXML implements xml . Unmarshaler
6048	Call performs a soap action
6049	JSONDoc loads a JSON document from a file .
6050	AddLoader adds a loader to the specified predicate .
6051	JSONSpec loads a JSON document .
6052	Embedded creates a new Document from an array of JSON messages .
6053	Spec loads the spec file
6054	Analyzed builds a Document from JSON data .
6055	Expanded returns a new document .
6056	ResetDefinitions resets the spec s definitions .
6057	Pristine returns the current Pristine .
6058	OpenDb opens a GeoIP file .
6059	GetOrg returns the organization of the given IP
6060	GetRegion returns the region and region and region .
6061	GetRegionName returns the region name for the given country code and region .
6062	GetCountry returns the country code for the given IP
6063	NewRotatingFileHandler creates a new RotatingFileHandler .
6064	Close closes the file descriptor
6065	String returns the string representation of the log level .
6066	New creates a new Logger .
6067	Close closes the logger .
6068	SetLevelByName sets the level of the logger .
6069	Output implements Logger . Output .
6070	OutputJson writes the body to the underlying logger .
6071	Print calls Output to print to the standard logger .
6072	Println calls Println func .
6073	Debug calls the Debug function .
6074	Debugln calls Output . Output . Arguments are handled in the manner of fmt . Println .
6075	Error logs an error message .
6076	Errorln outputs an error log . Arguments are handled in the manner of fmt . Println .
6077	Info calls Info function .
6078	Infoln implements the Logger interface .
6079	Warn implements the Logger interface .
6080	Warnln calls OutputWarn func .
6081	NewStreamHandler returns a new StreamHandler .
6082	Right returns the right part of the string .
6083	New returns a new server instance .
6084	setupMetadata returns the metadata for the SSDB resource .
6085	recordTypes recursively iterates over all of the types of the given type
6086	appendSorted appends a list of action params to params .
6087	parseDataType parses the data type of the action
6088	parseParam parses a param and returns it .
6089	newParam creates a new action parameter
6090	toGoReturnTypeName converts a Go return type into Go type .
6091	toGoTypeName returns the name of a Go type .
6092	pettify returns the JSON representation of an object .
6093	isBuiltInType returns true if the given name is a builtin type
6094	MatchHref returns true if the given href matches the pattern
6095	Substitute takes a set of variables and returns a string and a slice of strings .
6096	MarshalJSON implements the json . Marshaler interface for FileUpload .
6097	Write multipart form params
6098	PerformRequest sends a request to the API
6099	PerformRequestWithContext sends a request to the API
6100	LoadResponse loads the response body into a JSON object
6101	ScheduleLocator returns a ScheduleLocator
6102	TemplateLocator returns a TemplateLocator
6103	fetchDetails is a helper method to fetch the details of the server .
6104	buildAliases builds the CLI aliases for the SSH config
6105	serverArray returns the list of server instances with the given name .
6106	server returns the server with the given name .
6107	toPackageName returns the package name for the given version .
6108	loadFile loads a js file
6109	Prints the kingpin API .
6110	Run the command
6111	CreateJSONResponse creates a http . Response
6112	AccountLocator returns an AccountLocator .
6113	AccountGroupLocator returns an instance of AccountGroupLocator .
6114	AlertLocator returns an AlertLocator .
6115	AlertSpecLocator returns an AlertSpecLocator .
6116	AuditEntryLocator returns an AuditEntryLocator .
6117	BackupLocator creates a new BackupLocator
6118	ChildAccountLocator creates a new ChildAccountLocator .
6119	CloudLocator creates a CloudLocator
6120	CloudAccountLocator returns a CloudAccountLocator .
6121	CookbookLocator returns a new instance of CookbookLocator .
6122	CookbookAttachmentLocator returns a new instance of CookbookAttachmentLocator .
6123	CredentialLocator returns a CredentialLocator .
6124	DatacenterLocator returns a DatacenterLocator .
6125	DeploymentLocator returns a DeploymentLocator .
6126	HealthCheckLocator returns a new health check locator .
6127	IdentityProviderLocator returns an IdentityProviderLocator .
6128	ImageLocator returns an ImageLocator
6129	InputLocator returns an InputLocator .
6130	InstanceLocator returns InstanceLocator
6131	InstanceTypeLocator returns a InstanceTypeLocator .
6132	IPAddressLocator returns a new IP address locator
6133	IPAddressBindingLocator returns a new IpAddressBindingLocator .
6134	MonitoringMetricLocator returns a new instance of MonitoringMetricLocator .
6135	MultiCloudImageLocator returns a new instance of MultiCloudImageLocator .
6136	MultiCloudImageMatcherLocator creates a new MultiCloudImageMatcherLocator .
6137	MultiCloudImageSettingLocator returns a new instance of MultiCloudImageSettingLocator .
6138	NetworkLocator creates NetworkLocator
6139	NetworkGatewayLocator returns a NetworkGatewayLocator .
6140	NetworkOptionGroupLocator returns a network option group locator .
6141	NetworkOptionGroupAttachmentLocator returns a new network option group attachment locator .
6142	Oauth2Locator returns an Oauth2Locator .
6143	PermissionLocator returns a PermissionLocator
6144	PlacementGroupLocator returns a PlacementGroupLocator .
6145	PreferenceLocator creates a new PreferenceLocator .
6146	PublisherLocator returns a new PublicationLocator
6147	PublicationLineageLocator returns a new PublicationLineageLocator .
6148	RecurringVolumeAttachmentLocator returns a new instance of RecurringVolumeAttachmentLocator .
6149	RepositoryLocator creates a new RepositoryLocator
6150	RepositoryAssetLocator creates a new RepositoryAssetLocator .
6151	ResourceGroupLocator returns a ResourceGroupLocator .
6152	RightScriptLocator creates a new right script locator .
6153	RightScriptAttachmentLocator returns a new instance of RightScriptAttachmentLocator .
6154	RouteLocator creates a new RouteLocator
6155	RouteTableLocator returns a new instance of RouteTableLocator
6156	RunnableBindingLocator returns a RunnableBindingLocator .
6157	SchedulerLocator returns a SchedulerLocator .
6158	SecurityGroupLocator returns a SecurityGroupLocator .
6159	SecurityGroupRuleLocator returns a SecurityGroupRuleLocator .
6160	ServerLocator creates a ServerLocator
6161	ServerArrayLocator returns a ServerArrayLocator .
6162	ServerTemplateLocator returns a ServerTemplateLocator .
6163	ServerTemplateMultiCloudImageLocator returns a ServerTemplateMultiCloudImageLocator .
6164	SessionLocator returns a SessionLocator
6165	SshKeyLocator returns a SshKeyLocator .
6166	SubnetLocator returns a SubnetLocator .
6167	TagLocator returns a TagLocator .
6168	TaskLocator returns a TaskLocator
6169	UserLocator returns UserLocator
6170	UserDataLocator returns a UserDataLocator .
6171	VolumeLocator returns a VolumeLocator
6172	VolumeAttachmentLocator returns a new VolumeAttachmentLocator .
6173	VolumeSnapshotLocator returns a VolumeSnapshotLocator .
6174	VolumeTypeLocator returns a VolumeTypeLocator .
6175	RegisterCommands registers the APICommandRegistrar
6176	ShowCommandHelp show help
6177	ShowAPIActions executes the showActions command
6178	ShowHelp prints help
6179	ParseCommandAndFlags parses a command and returns it .
6180	validateFlagValue returns an error if the flag is not valid .
6181	buildQuery builds the APIParams from the list of values .
6182	buildPayload converts a slice of APIParams into APIParams .
6183	shortenPattern returns the pattern that matches the pattern .
6184	cleanDescription removes the security scope
6185	fileExists checks if a file exists
6186	AnalysisSnapshotLocator returns an instance of AnalysisSnapshotLocator .
6187	BudgetAlertLocator returns a new BudgetAlertLocator .
6188	CloudBillLocator returns a CloudBillLocator .
6189	CloudBillMetricLocator returns a CloudBillMetricLocator .
6190	CurrentUserLocator creates a new CurrentUserLocator
6191	InstanceCombinationLocator returns an InstanceCombinationLocator .
6192	InstanceMetricLocator returns a new InstanceMetricLocator .
6193	InstanceUsagePeriodLocator returns a new InstanceUsagePeriodLocator .
6194	PatternLocator returns a PatternLocator
6195	ReservedInstanceLocator returns a reserved instance locator
6196	ReservedInstancePurchaseLocator creates a new reserved instance purchase locator .
6197	ScenarioLocator returns a new ScenarioLocator .
6198	ScheduledReportLocator creates a new scheduler report locator
6199	TempInstancePriceLocator creates a new TempInstancePriceLocator
6200	UserSettingLocator returns a UserSettingLocator .
6201	readAllAsync reads bytes from io . ReadAll .
6202	extractArg extracts the value from args and returns the value
6203	write writes b to the output file .
6204	AppliedPolicyLocator returns applied policy locator
6205	ApprovalLocator returns an ApprovalLocator .
6206	In IncidentLocator returns an IncidentLocator .
6207	PolicyTemplateLocator returns a PolicyTemplateLocator .
6208	PublishedTemplateLocator returns a new instance of PublishedTemplateLocator
6209	DebugCookbookPathLocator returns a new instance of DebugCookbookPathLocator .
6210	DockerControlLocator returns a DockerControlLocator
6211	EnvLocator creates a new environment locator
6212	LoginControlLocator returns a LoginControlLocator .
6213	ProcLocator returns ProcLocator
6214	Rl10Locator creates a new Rl10Locator .
6215	TSSLocator creates a TSSLocator
6216	TSSControlLocator creates a TSSControlLocator
6217	TSSPluginLocator returns a new TSSPluginLocator .
6218	NewAngularWriter returns a new angular writer
6219	WriteResource implements io . Writer
6220	path returns a string representing the action
6221	monatory returns true if the action is mandatory .
6222	New creates a new API client
6223	FromCommandLine creates a new API client .
6224	CanAuthenticate checks if the user is authenticated
6225	Encrypt encrypts a string using AES - 64 - bit encryption .
6226	Decrypt decrypts a base64 encoded string
6227	guessType returns the type for the given reference
6228	addType adds the type to the given object
6229	extractCmdLineParams extracts the args from a command line params .
6230	NewMetadataWriter returns a new MetadataWriter .
6231	WriteHeader writes the header to w .
6232	WriteMetadata writes the metadata to w .
6233	location returns the string representation of the location .
6234	New returns a new rsapi instance
6235	fromAPI converts rapi . API to api . API
6236	BuildRequest builds an HTTP request for the given resource .
6237	setupMetadata initializes the metadata map .
6238	NewDisplayer returns a Displayer .
6239	ApplySingleExtract is the same as ApplyExtract but applies ExtractExtract .
6240	ApplyExtract applies the given selector to the body
6241	ApplyHeaderExtract extracts the specified header from the response
6242	Output returns the JSON representation of the display .
6243	NewAPIAnalyzer returns a new APIAnalyzer .
6244	Analyze returns an api . APIDescriptor
6245	AnalyzeAliases analyzes the API resources
6246	LocatorFunc returns the locator function for the given attributes .
6247	ParseRoute parses a route and returns the pathPatterns
6248	isDeprecated returns true if path is deprecated .
6249	isQueryParam returns true if n is a query parameter .
6250	isPathParam checks if a pathPattern is a valid pathPattern
6251	fetchAuditEntries fetches audit entries
6252	formatTime formats tm . Time
6253	printAudits prints audit entries
6254	extractUnique removes duplicate entries from old entries .
6255	getHref returns the href of the audit entry
6256	fail is a utility function to check if the format fails
6257	params returns a string representing the required parameters .
6258	paramsInitializer generates the initializer for the action .
6259	commandLine returns the command line arguments .
6260	Convert a verb to a verb
6261	escapeBackticks returns a string with backticks
6262	AccountPreferenceLocator returns an AccountPreferenceLocator .
6263	ApplicationLocator returns an ApplicationLocator
6264	EndUserLocator creates a new EndUserLocator .
6265	NotificationRuleLocator returns a NotificationRuleLocator .
6266	UserPreferenceLocator returns a UserPreferenceLocator .
6267	UserPreferenceInfoLocator returns a UserPreferenceInfoLocator .
6268	LoadConfig loads a ClientConfig from a file .
6269	CreateConfig creates a new config file .
6270	fromAPI converts rapi . API to api . API
6271	HostFromLogin returns the host from login .
6272	AnalyzeParam generates an ActionParam from a Parameter
6273	AnalyzeAttribute analyzes an attribute
6274	AnalyzeType determines the type of a type
6275	CreateType creates an object from the query parameters .
6276	Ref returns the definition for a given reference
6277	Type returns the type of an object
6278	Required returns list of required strings .
6279	ID returns the ID of the reference .
6280	Service returns the service name
6281	Method returns the method of the endpoint
6282	NewTypeRegistry returns a new instance of TypeRegistry .
6283	GetNamedType gets the ObjectDataType by name
6284	CreateNamedType creates a new ObjectDataType .
6285	CreateInlineType creates an inline type .
6286	FinalizeTypeNames is the same as FinalizeTypeNames .
6287	Merge merges two API versions .
6288	FinalizeTypeNames is the same as FinalizeTypeNames except that it takes a map of ResourceDataTypes .
6289	uniqueTypeName returns a unique identifier for the given type .
6290	MandatoryParams returns the list of mandatory params
6291	HasOptionalParams returns true if the action has mandatory params
6292	MakeUniq creates a new unique identifier .
6293	NewClientWriter returns a new ClientWriter .
6294	WriteHeader writes the header to w .
6295	WriteResourceHeader writes the resource header to w .
6296	WriteType writes the TypeDataType to w .
6297	WriteResource writes a resource to the writer .
6298	WithTrail returns a copy of the current evaluation context .
6299	AnalyzeEndpoint analyzes the endpoint for the given verb .
6300	NetworkInterfaceLocator returns a NetworkInterfaceLocator .
6301	NetworkInterfaceAttachmentLocator returns a new NetworkInterfaceAttachmentLocator .
6302	UnmarshalJSON implements json . Unmarshaler
6303	ExecutionLocator returns execution locator
6304	NotificationLocator creates a new notification locator
6305	OperationLocator returns OperationLocator
6306	ScheduledActionLocator returns a new ScheduledActionLocator
6307	NewBasicAuthenticator creates a new Authenticator .
6308	NewSSAuthenticator returns a new Authenticator using the given auther .
6309	newCookieSigner returns a new authenticator that authenticates cookies using the given accountID .
6310	Sign signs an http . Request .
6311	CanAuthenticate returns nil if the client is authenticated
6312	refresh refreshes the cookie from the response .
6313	Sign implements the http . Request interface .
6314	Sign implements the http . Request interface
6315	Sign signs a new session
6316	SetHost sets the host
6317	CanAuthenticate checks to see if the user preferences are valid .
6318	extractRedirectURL extracts the redirect URL from the response .
6319	buildURL builds a URL from the given host and path .
6320	GetAction gets the action by name
6321	HasLink returns true if the resource has a link
6322	findMatches returns all paths that match the given href .
6323	NewPB returns a new HTTPClient .
6324	newVariableDumpClient returns a new VariableDumpClient
6325	newRawClient returns a new http . Client with no redirect settings
6326	DoImp sends a request to the dump .
6327	Do implements the Do method .
6328	doImp executes the request and returns the response .
6329	getClientWithoutTimeout returns an http . Client without timeout
6330	dumpRequest is used to dump the request .
6331	writeHeaders writes the headers to a buffer
6332	copyHiddenHeaders returns a deep copy of the header
6333	validateCommandLine validates command line arguments .
6334	APIClient returns a client for the given command name
6335	RegisterClientCommands registers client commands .
6336	Interactive sets the log15 handler
6337	toPattern converts a verb string into a pathPattern .
6338	WithClientIP returns a context with client IP set .
6339	ClientIP returns the client IP from the context .
6340	NewProducer creates a new producer
6341	StartProducer starts a new producer
6342	Start starts the producer .
6343	Stop stops the producer .
6344	Publish publishes message
6345	PublishTo implements the Producer interface .
6346	NewLocalEngine returns a new instance of LocalEngine .
6347	validate returns an error if the configuration is not valid .
6348	defaults sets default values for consumers
6349	NewConsumer creates a new consumer .
6350	StartConsumer starts a new consumer
6351	Start starts the consumer .
6352	RateLimit implements the RateLimit interface .
6353	Write writes the response to w .
6354	ReadResponse reads a response from r .
6355	backoff returns a time . Duration for a given attempt .
6356	String returns a string representation of the frame type .
6357	NewConsulEngine creates a new Consul Engine .
6358	ParseMessageID parses a string into a MessageID .
6359	WriteTo implements io . WriterTo interface .
6360	NewMessage creates a new Message .
6361	Finish finishes the process .
6362	Requeue sends a Req to the remote server .
6363	ReadCommand reads a command
6364	funcMapMaker is a helper function that returns the function s FuncMapMaker .
6365	Funcs sets template functions
6366	Execute executes a template
6367	RegisterPath registers a path to the filesystem .
6368	Asset returns the contents of the given file .
6369	Glob returns all files matching the given pattern .
6370	NameSpace returns an Interface for the named AssetFileSystem .
6371	New creates a new Render instance
6372	RegisterViewPath register view paths
6373	SetAssetFS sets the asset filesystem
6374	Layout returns a new template instance
6375	Funcs returns a template with the given functions .
6376	Execute executes a template
6377	RegisterFuncMap adds a function to render template
6378	Asset returns the content of a file
6379	NewPlainClient returns a new plaintext client .
6380	Create creates a new uploader
6381	Open sends a request to the given URL .
6382	Sign implements the DefaultService interface .
6383	Sign implements the http . Request interface .
6384	Readdir implements the FileReader interface .
6385	Find returns the list of nodes in x .
6386	Lex implements Lexer . Lexer
6387	MustParseXML is like ParseXML but panics on error .
6388	ParseXML parses the given io . Reader .
6389	Call calls wrapped function
6390	Parse parses XPath string and returns XPathExec .
6391	MustParse is like Parse but panics .
6392	Exec executes XPath XPath on XPath .
6393	ExecBool executes the XPath expression .
6394	ExecNum returns the result of XPath expression .
6395	ExecNode executes the XPath XPath expression .
6396	MustExec is like Exec but panics .
6397	ParseExec parses xp string and returns the result .
6398	CreateNode creates a new child node .
6399	GetChildren returns the children of xm .
6400	GetAttrs returns the node s attributes .
6401	ResValue returns the res value of x .
6402	Parse parses a XML node .
6403	GetToken returns the current token
6404	ResValue returns the string representation of the node .
6405	Exec executes xpFilt against a node .
6406	String returns the string representation of n .
6407	Num returns the number of digits in s .
6408	BuildNS builds a list of NSNS .
6409	GetAttribute gets an attribute from the given node
6410	GetAttributeVal returns the value of an attribute .
6411	GetAttrValOrEmpty returns an empty string if it is empty .
6412	FindNodeByPos finds the node at the given position .
6413	Marshal writes the given Node to w .
6414	MarshalStr converts a Tree to a string .
6415	NewLexer returns a new Lexer
6416	NewLexerString returns a new Lexer .
6417	Split implements the Stringer interface .
6418	Register implements the Registerer interface .
6419	Get returns the ErrDescriptor for the given code .
6420	GetAll returns all registered errors .
6421	From converts an error to an Error .
6422	Descriptor returns the ErrDescriptor for the given error .
6423	GetAttributes returns the attributes of an error .
6424	HTTPStatusCode returns the HTTP status code for the given type .
6425	HTTPStatusCode returns the HTTP status code of the error .
6426	HTTPStatusToType converts HTTP HTTP response status to type .
6427	ToHTTP implements http . ResponseWriter
6428	toImpl converts an error to a impl .
6429	MetadataFromIncomingContext creates a metadata . MD from a context
6430	MetadataFromOutgoingContext creates a metadata . MD from the given context .
6431	TokenFromMetadata extracts token from metadata .
6432	TokenFromIncomingContext extracts the token from the context
6433	OutgoingContextWithToken returns a new context with the given token
6434	KeyFromMetadata extracts key from metadata .
6435	KeyFromIncomingContext extracts the key from a context
6436	OutgoingContextWithKey returns a new context with the given key
6437	IDFromMetadata extracts the ID from the metadata .
6438	IDFromIncomingContext returns ID from context
6439	OutgoingContextWithID returns a new context with the given ID .
6440	ServiceInfoFromMetadata returns the service name and net - address of the metadata .
6441	ServiceInfoFromIncomingContext returns service name and netAddress from context
6442	OutgoingContextWithServiceInfo returns a new context with the given service version .
6443	LimitFromMetadata extracts the limit from metadata .
6444	OffsetFromMetadata extracts offset from metadata .
6445	LimitAndOffsetFromIncomingContext extracts the limit and offset from the context
6446	OutgoingContextWithLimitAndOffset returns a new context with the given limit and offset .
6447	before returns true if i is before i . e .
6448	New implements the Error interface .
6449	WithNamespace adds a namespace to the context
6450	Wrap returns a new instance of Namespaced .
6451	WithField returns a new logger with the specified field .
6452	WithFields implements the Namespaced interface .
6453	Format returns a formatted message with the given attributes .
6454	fix returns a copy of v .
6455	GRPCCode returns the gRPC code for the given type .
6456	GRPCCodeToType converts a gRPC code into a Type .
6457	GRPCCode returns gRPC code .
6458	FromGRPC converts a grpc error into an Error .
6459	ToGRPC converts an error to grpc error .
6460	IsEnabled checks if a given namespace is enabled
6461	Set sets the namespaces .
6462	Cause returns the cause of an error .
6463	parseCode parses a string into a Code
6464	UnaryServerInterceptor returns a new UnaryServerInterceptor .
6465	StreamServerInterceptor returns a streaming . StreamServerInterceptor .
6466	UnaryClientInterceptor returns a new unary client interceptor
6467	StreamClientInterceptor returns a new streaming client interceptor
6468	Interceptor returns a streaming client interceptor
6469	Wrap wraps a logrus . Interface .
6470	NewCounter returns a new Counter with the specified bucket size .
6471	NewRedisCounter returns a new Counter .
6472	NewLimiter returns a Limiter that limits the given counter .
6473	WithInsecure returns a copy of the TokenCredentials with insecure authentication .
6474	WithTokenFunc returns a new TokenCredentials object
6475	GetRequestMetadata gets the token metadata from the request
6476	FieldsFromIncomingContext returns ttnlog . Fields from context
6477	String returns the string representation of the type .
6478	UnmarshalText implements the encoding . TextUnmarshaler interface .
6479	fromString returns a type from a string .
6480	Start starts the goroutine .
6481	NewSimple returns a new Simple .
6482	Wrap returns a new instance of Filtered
6483	WithFilters returns a new Filtered object with the given filters .
6484	WithField adds a field to the filter .
6485	WithFields implements the Filter interface .
6486	FilterSensitive is a FilterFunc that returns a FilterFunc that returns a Filter that matches the given string .
6487	SliceFilter is used to filter a slice of strings
6488	MapFilter is used to filter map keys
6489	RestrictFilter adds a filter to a filter .
6490	LowerCaseFilter is a filter function to filter a filter .
6491	newBatchPoints creates a new BatchPoints instance .
6492	NewSinglePointWriter returns a new SinglePointWriter .
6493	Write implements the io . Writer interface .
6494	WithScalingInterval sets the BatchingWriter s scaling interval .
6495	NewBatchingWriter returns a BatchingWriter .
6496	Write implements the io . Writer interface .
6497	MustParseLevel is like ParseLevel but panics .
6498	New returns a new streaming stream
6499	SetLogger sets the logger
6500	CloseRecv closes the stream .
6501	Stats returns the current state of the stream .
6502	Run starts the stream .
6503	ServerOptions returns gRPC server options
6504	ClientOptions returns gRPC dial options .
6505	UnaryServerInterceptor returns a new unary server interceptor
6506	StreamServerInterceptor returns a streaming server interceptor for streaming RPCs .
6507	UnaryClientInterceptor returns a new unary client interceptor
6508	StreamClientInterceptor returns a streaming client interceptor
6509	defaults sets the default config values .
6510	Flush implements the http . Handler interface .
6511	New creates a new handler .
6512	HandleLog implements log . Handler .
6513	New returns a new TTNRandom implementation
6514	Names returns the names of the URI parts .
6515	String returns the string representation of the Perfatum .
6516	RenderPerfdata returns the string representation of per perfdata
6517	Exit prints the given status
6518	NewCheckWithOptions creates a new check with the given options .
6519	AddResult adds a status to the check .
6520	AddResultf adds a formatted error to the check .
6521	String returns the string representation of the check .
6522	Exitf is part of the Check interface .
6523	Criticalf calls Criticalf function .
6524	Unknownf is a convenience wrapper around the Checkf function .
6525	NewDefaultStatusPolicy returns a default status policy
6526	NewStatusPolicy creates a new policy from the given statuses .
6527	ParseRange parses a Range from a string .
6528	Check returns true if the given value is within the range .
6529	CheckInt checks if the value is an int
6530	CheckUint64 checks if the value is a uint64
6531	NewClient returns a new Client .
6532	GetKeyMeta returns the metadata for a key .
6533	GetKeysInDirMeta returns all keys in the given path .
6534	GetKeyContent retrieves the content of a key .
6535	GetJobSummariesForProject returns all the jobs for a given project
6536	GetJobsForProject returns all the jobs for a given project
6537	GetJob returns a Job detail by its ID .
6538	CreateJob creates a new job summary .
6539	CreateOrUpdateJob creates a new job .
6540	DeleteJob deletes a job .
6541	JobSummary returns a JobSummary from the result .
6542	GetSystemInfo gets system information .
6543	DateTime returns the timestamp .
6544	GetAllProjects returns all projects
6545	GetProject returns a project by name .
6546	CreateProject creates a new project .
6547	DeleteProject deletes a project
6548	SetProjectConfig sets the config for a project
6549	NewClient returns a new PBRestClient .
6550	NewClientbyToken returns a Client with the given token .
6551	SetDepth sets the depth of the client
6552	ListDatacenters returns a list of datacenters
6553	CreateDatacenter creates a new datacenter
6554	GetDatacenter returns a single datacenter
6555	UpdateDataCenter updates a new datacenter .
6556	DeleteDatacenter deletes a datacenter
6557	WaitTillProvisioned waits for a request to complete .
6558	ListFirewallRules - list firewall rules
6559	GetFirewallRule fetches a firewall rule .
6560	CreateFirewallRule creates a new firewall rule .
6561	UpdateFirewallRule updates an existing firewall rule .
6562	DeleteFirewallRule deletes a firewall rule
6563	ListLoadbalancers returns all loadbalancers
6564	GetLoadbalancer returns the loadbalancer for the given dcid .
6565	UpdateLoadbalancer updates a loadbalancer .
6566	DeleteLoadbalancer deletes a loadbalancer
6567	ListBalancedNics returns a list of nics for the given balancer .
6568	AssociateNic associates a new nic with the given nic ID .
6569	GetBalancedNic gets a single network nic
6570	DeleteBalancedNic deletes a balancer nic
6571	ListLans returns a list of LANs for the given dcid .
6572	GetLan gets a single lan
6573	DeleteLan sends a request to DELETE request
6574	ListNics returns a list of network interfaces .
6575	CreateNic creates a new nic .
6576	GetNic gets a single nic
6577	UpdateNic updates a nic .
6578	DeleteNic deletes a nic
6579	ListSnapshots returns a list of all available snapshots .
6580	GetSnapshot returns a snapshot with the given ID .
6581	DeleteSnapshot deletes a snapshot
6582	UpdateSnapshot updates a snapshot
6583	ListIPBlocks returns a list of all IP blocks
6584	ReserveIPBlock creates a new IP block .
6585	GetIPBlock returns information about a given IP block
6586	UpdateIPBlock updates an IP block .
6587	ReleaseIPBlock releases an IP block
6588	ListVolumes returns a list of all volumes
6589	GetVolume gets a volume
6590	UpdateVolume updates a volume .
6591	CreateVolume creates a new volume .
6592	DeleteVolume deletes a volume .
6593	CreateSnapshot creates a new snapshot
6594	RestoreSnapshot restores a snapshot
6595	ListServers returns a list of servers for a given dcid .
6596	GetServer returns a server for the given dcid .
6597	DeleteServer deletes a server .
6598	ListAttachedCdroms lists all the Cdroms
6599	AttachCdrom attaches a cdid to the server
6600	GetAttachedCdrom gets the image cdrom
6601	DetachCdrom detaches the cdrom from the server
6602	List attached volumes
6603	AttachVolume creates a new volume
6604	GetAttachedVolume retrieves an attached volume .
6605	DetachVolume detaches a volume .
6606	StartServer starts a new server
6607	ListLocations returns a list of all locations
6608	GetRegionalLocations returns the locations for the given regid .
6609	GetLocation returns the location for the given location .
6610	GetContractResources returns the list of all available contracts .
6611	ListImages returns a list of all images
6612	GetImage gets an image by its ID .
6613	PrintHeaders prints response headers
6614	ListGroups returns a list of all active groups
6615	GetGroup returns a single group
6616	CreateGroup creates a new group
6617	UpdateGroup updates a group
6618	DeleteGroup deletes a group
6619	ListShares returns a list of shares
6620	GetShare returns the details of a share .
6621	AddShare creates a new share .
6622	UpdateShare updates a share .
6623	DeleteShare deletes a share .
6624	ListGroupUsers returns a list of users for a given group
6625	AddUserToGroup adds a user to a group
6626	DeleteUserFromGroup deletes a user from a group
6627	ListUsers returns a list of all users
6628	GetUser returns information about a user
6629	CreateUser creates a new user .
6630	UpdateUser updates an existing user .
6631	DeleteUser deletes a user .
6632	ListResources returns all available resources
6633	GetResourceByType fetches a resource by its resource id .
6634	ListResourcesByType returns all resources matching the given type
6635	ListRequests returns a list of all HTTP requests
6636	GetRequest retrieves a single request .
6637	GetRequestStatus - get request status
6638	Close closes the underlying writer .
6639	GetSerializableArgument gets the value of the serializable argument
6640	BoolVar implements EnvironmentFlag .
6641	Bool creates a boolFlag with specified name and usage string .
6642	IntVar implements EnvironmentFlag .
6643	Int defines an int flag with specified name default value and usage string .
6644	Int64Var implements the Int64Var interface .
6645	Int64 implements environs . Int64Flag .
6646	UintVar adds an uintVar to the environment variable .
6647	Uint adds an uint to the environment .
6648	Uint64Var adds an uint64Var to the environment .
6649	Uint64 creates an option that parses its value as uint64 .
6650	StringVar implements EnvironmentFlag .
6651	String creates an environment flag with specified name and usage string .
6652	Float64Var implements EnvironmentFlag .
6653	Float64 implements environs . Float64Flag .
6654	DurationVar implements the DurationVar interface .
6655	Duration defines a duration flag with specified name default value and usage string .
6656	Parse parses the environment variables
6657	WriteStringToFile writes a string to a file
6658	ReadFileToString reads the contents of a file .
6659	LineReader returns a channel that reads lines from an io . Reader .
6660	LineReaderFrom returns a channel of lines read from a file .
6661	FileExists checks if a file exists
6662	Check if a file exists
6663	GetPathParts returns the path parts of the given path .
6664	GetThisPathParts returns the path parts of the executable
6665	RandomString returns a random string
6666	ParseAddress returns the proto and path of the address
6667	HomeDir returns the home directory
6668	IsTCPPortAvailable checks if a TCP port is available
6669	RandomTCPPort returns a random TCP TCP port
6670	HashString returns the hash of the given string .
6671	Context gets access token from context
6672	Token returns an oauth2 . Token from the session .
6673	NewDaemon returns a new instance of Daemon
6674	Close closes the daemon .
6675	NewAccessTokenContext returns a new context with an access token .
6676	AccessTokenFromContext returns the access token from the given context .
6677	RandomAccessToken generates a random access token
6678	Init initializes zap logger .
6679	Load loads a dictionary from a file .
6680	Start starts a new session
6681	Get is part of the Storage interface .
6682	List returns all the sessions in the storage .
6683	Exists checks if the access token exists .
6684	Aband is used to abort a session
6685	SetValue sets the value for a given access token
6686	Delete deletes a session from storage .
6687	Setup initializes the storage schema .
6688	TearDown closes the storage schema .
6689	initJaeger initializes an opentracing Tracer .
6690	Usage returns the usage report .
6691	Build builds a DoubleArray from the given keywords .
6692	Read reads a DoubleArray from an io . Reader .
6693	Get returns the node at k .
6694	ExternalNodes returns the list of external nodes
6695	GetOther returns the first node in the cluster
6696	GoString returns the string representation of a Cluster
6697	Scan implements the Scanner interface .
6698	Value implements the driver . Valuer interface .
6699	Has returns true if the key exists in the bag .
6700	WriteTo implements io . WriterTo interface .
6701	ReadIndexTable reads the index table .
6702	New creates a new ActionBar
6703	RegisterAction registers a new action
6704	Actions returns a new ActionBar instance
6705	Render HTML page
6706	FuncMap returns a function map for edit_button
6707	EditMode checks if the current user is edit mode
6708	SwitchMode switch mode
6709	InlineEdit show inline edit
6710	Error returns the string representation of the error .
6711	ParseFile parses a file .
6712	FindMachine searches for a machine by filename and returns it .
6713	New returns a new Kace .
6714	Camel converts a string to CamelCase
6715	Pascal converts a string to PascalCase
6716	Snake returns a snake case string
6717	SnakeUpper returns a snake case
6718	Kebab returns a kebab - delimited string
6719	KebabUpper is a wrapper around KebabUpper
6720	isPathSafe checks if given string is a valid path
6721	Start implements the Span interface .
6722	ParseAuthHeaders parses HTTP headers and returns AuthCreds
6723	Tracer sets the Tracer to use .
6724	HTTPClient sets the http client
6725	BasicAuth sets the username and password
6726	BearerAuth sets the bearer authentication token .
6727	CookieJar configures the cookie jar .
6728	SanitizerEnabled sets the sanitizer to use .
6729	OpenFile opens a file .
6730	RoundTrip executes a RoundTripFn function .
6731	SetAuthHeader sets the Authorization header
6732	FileName returns the filename associated with the Content - Disposition header .
6733	newBuffersFromFiles creates a new buffer from the given files .
6734	newFileBuffer returns a new file buffer
6735	rewind implements the io . Reader interface .
6736	ConvertResponse converts HTTP response to HTTP response
6737	Set sets the value of the option
6738	WriteAnswer implements the Option interface for BoolOption
6739	String returns a string representation of the option .
6740	TriggerIncidentKey triggers an incident key
6741	TriggerWithDetails will trigger a detailed incident with the given details .
6742	TriggerIncidentKeyWithDetails is like TriggerIncidentKey but with detailed details .
6743	Merge merges src into dst .
6744	setSource sets the source of the given value .
6745	convertString converts src to dst
6746	Do executes f on d .
6747	NewFile creates a new io . Writer
6748	internalRun executes the benchmark .
6749	String returns a string representation of the row .
6750	Tabulate returns a tabular slice of the results .
6751	AmazonRequest performs a HTTP request to the AWS API .
6752	WriteTabularData writes a tabular data into w .
6753	Reduce returns a list of buckets sorted by interval
6754	NewSemaphore returns a new Semaphore instance .
6755	Release releases the semaphore .
6756	Resize resizes the semaphore .
6757	AddOutput adds an output to the benchmark .
6758	RunBenchmarks executes the given RequestFunc .
6759	parseBool parses a boolean value .
6760	checkInteger checks if the number is an integer .
6761	parseInt64 parses an integer from a byte slice .
6762	parseInt32 parses an int32 from a byte slice .
6763	parseBigInt parses a big . Int from a byte slice .
6764	parseBitString parses a BITString .
6765	parseObjectIdentifier parses an object identifier .
6766	parseBase128Int parses a base128 integer from a byte slice .
6767	parseGeneralizedTime parses a time . Time from a byte slice .
6768	parsePrintableString parses a string .
6769	isPrintable returns true if b is a printable .
6770	parseSequenceOf parses a sequence of bytes .
6771	invalidLength returns true if the offset is less than the given length .
6772	setDefaultValue sets the default value if required .
6773	UnmarshalWithParams unmarshals a field into val .
6774	parseFieldParameters parses a string into a fieldParameters struct
6775	getUniversalType returns the tag number for the given type
6776	DecodeString decodes a raw string .
6777	MailNotifier get mail notification from database
6778	SaveMailNotifier saves a mail notification
6779	RegisterProvider registers a provider .
6780	Initialize MongoDB
6781	Until runs f until stopCh is closed .
6782	logPanic logs panics
6783	Get user by username
6784	Users get users from database
6785	SaveUser saves a user in MongoDB
6786	DeleteUser delete a record
6787	LoadCACertFile loads a CertPool from a file .
6788	NewAuth creates a new Auth object
6789	ValidateRequest returns an error if the request is not valid .
6790	Process implements auth . Handler
6791	ValidateCN validates the CN for the given certificate
6792	Validate OU
6793	KeyLen returns the length of x .
6794	DefaultConfig returns a new Vault configuration .
6795	New creates a new cert signer
6796	New creates a new VaultFactory
6797	DefaultServiceConfig returns a ServiceConfig with default values .
6798	NewService creates a new Vault service .
6799	Delete deletes a cluster
6800	IsNoVaultHandlerDefined returns true if the error is a no - op .
6801	New returns a new Vault service .
6802	Create creates a new role
6803	CreateJob creates a new Config .
6804	Run starts the worker .
6805	Creates a new Watcher instance
6806	Start starts the watcher .
6807	Stop stops the watcher .
6808	Active returns true if the watcher is active .
6809	Add adds paths to watch .
6810	watch is a long running goroutine that waits for changes to finish .
6811	Watching returns a list of watched paths .
6812	State returns all the watched paths .
6813	Store stores the error in the request context .
6814	Get returns the error associated with the request .
6815	Catch adds an error to the middleware .
6816	Try is a wrapper around http . Handler
6817	Recover is a middleware that returns a panic .
6818	This is the main entry point for the server
6819	SyncHandler returns an http . Handler that waits for the response to finish .
6820	connect connects to the server .
6821	send sends an update to the transport .
6822	NumConnections returns the number of active connections .
6823	Push pushes the push queue to the queue .
6824	gopush pushes the state to the state .
6825	NewOutForward creates a new OutForward .
6826	Run starts the tail process
6827	New creates a new fluent instance .
6828	Close closes the connection
6829	IsReconnecting returns true if the connection is reconnecting .
6830	Connect to the server .
6831	Notification creates a new notification notification .
6832	NullNotification creates a new NullNotifier .
6833	New creates a new identity
6834	Issue creates a new issuer
6835	Subject returns an Option that sets the name of the certificate .
6836	PrivateKey returns an Option that sets the private key to use .
6837	NotBefore is an Option that sets the time when the client is not before .
6838	NotAfter is a functional option to set the value of the timeout .
6839	IssuingCertificateURL is an Option to set the URL of the certificate URLs .
6840	OSPServer is an Option to set the OCSSP server
6841	New creates a new TelegramBotAPI instance .
6842	NewWithWebhook creates a new instance of TelegramBotAPI
6843	Close the API connection .
6844	GetMe gets the current user
6845	RunBot runs the bot .
6846	RunBotOnWebhook runs the bot on webhook .
6847	NewOutgoingMessage creates a new OutgoingMessage .
6848	NewOutgoingLocation creates a new OutgoingLocation .
6849	NewOutgoingVenue creates a new OutgoingVenue .
6850	NewOutgoingVideo creates a new OutgoingVideo .
6851	NewOutgoingVideoResend creates a new OutgoingVideo .
6852	NewOutgoingPhoto creates a new OutgoingPhoto .
6853	NewOutgoingPhotoResend creates a new OutgoingPhoto .
6854	NewOutgoingSticker creates a new OutgoingSticker .
6855	NewOutgoingStickerResend creates a new OutgoingSticker .
6856	NewOutgoingVoice creates a new OutgoingVoice .
6857	NewOutgoingVoiceResend creates a new OutgoingVoice .
6858	NewOutgoingAudio creates a new OutgoingAudio .
6859	NewOutgoingAudioResend creates a new OutgoingAudio instance .
6860	NewOutgoingDocument creates a new OutgoingDocument .
6861	NewOutgoingDocumentResend creates a new OutgoingDocument instance .
6862	NewOutgoingForward creates a new OutgoingForward .
6863	NewOutgoingChatAction creates a new OutgoingChatAction .
6864	NewOutgoingUserProfilePhotosRequest creates a new OutgoingUserProfilePhotosRequest .
6865	NewOutgoingKickChatMember creates a new OutgoingKickChatMember .
6866	NewOutgoingUnbanChatMember creates a new OutgoingUnbanChatMember .
6867	NewOutgoingCallbackQueryResponse creates a new OutgoingCallbackResponse .
6868	NewInlineQueryAnswer creates a new inline query answer .
6869	Type returns the type of MessageType
6870	Type returns the type of update .
6871	MarshalJSON implements the json . Marshaler interface for Recipient .
6872	querystring returns the string representation of the outgoing set webhook
6873	getBaseQueryString returns the query string for the outgoing request
6874	getBaseQueryString returns the query string for the outgoing message .
6875	querystring returns querystring
6876	querystring returns the querystring for the photo
6877	querystring converts outgoingUserProfilePhotosRequest to query string
6878	querystring returns the querystring for the outgoing video
6879	querystring returns querystring
6880	NewInlineQueryResultArticle creates a new inline query article .
6881	NewInlineQueryResultPhoto creates a new inline query photo .
6882	NewInlineQueryResultGif creates a new inline query result .
6883	NewInlineQueryResultMpeg4Gif creates a new inline query result .
6884	NewInlineQueryResultVideo creates a new inline query video .
6885	Send sends the outgoing user profile photos .
6886	Send the outgoing chat action
6887	Send an inline query
6888	Send kicks off the kick chat .
6889	Send sends an unbanChatMember to the user .
6890	Send sends the request to the API .
6891	NewAPIClient creates a new APIClient .
6892	BeforeInsert sets timestamp before creation
6893	ColumnName returns column name .
6894	New creates a new DB instance
6895	From creates a From from a struct
6896	Where creates a new condition .
6897	OrderBy creates a condition .
6898	Limit returns a condition that is less than or equal to limit .
6899	Offset creates a condition condition .
6900	Join creates a JoinCondition .
6901	Count creates a count function .
6902	Update runs the update on the database
6903	Delete deletes a record from the database .
6904	Begin starts a transaction .
6905	Commit closes the database .
6906	Quote implements the sql . Quote method
6907	SetLogOutput sets the logger output .
6908	selectToSlice converts sql . Rows into slice .
6909	selectToValue returns a reflect . Value from a slice .
6910	fieldIndexByName returns the index of the field with the given name .
6911	columns returns a column name for the given columns .
6912	tagsFromField returns a slice of options from a field .
6913	hasSkipTag returns true if field has skip tag
6914	hasPKTag returns true if the field has a PK tag .
6915	isAutoIncrementable returns true if the field is autoincrementable .
6916	collectFieldIndexes collects indexes for the given type .
6917	findPKIndex finds the PK index for a given type .
6918	sizeFromTag returns the size of the dbSize tag .
6919	columnFromTag returns the column name from the database .
6920	defaultFromTag returns the default value for the given field .
6921	Where adds a WHERE condition to the query .
6922	And creates AND condition .
6923	Or adds an OR condition to the condition .
6924	Like adds a LIKE condition to the query .
6925	Between creates a condition .
6926	OrderBy adds ORDER BY clause .
6927	Limit adds a limit to the condition .
6928	Offset adds the offset to the condition .
6929	SetFormat sets the log format .
6930	Print implements the fmt . Print interface .
6931	Print implements NullLogger .
6932	Quote returns a quoted string
6933	SQLType returns the name of the type .
6934	New returns a new archive archive .
6935	Disconnect disconnects the host .
6936	nextNetworkAdapterID returns the next network adapter id
6937	totalNetworkAdapters returns the number of network adapters in the VM
6938	RemoveAllNetworkAdapters removes network adapters
6939	RemoveNetworkAdapter removes a network adapter from the VM .
6940	NetworkAdapters returns all available network adapters
6941	newArchive creates a new archive .
6942	GetFileReader returns an io . ReadCloser for the given file .
6943	ExtractToWriter extracts a file from the archive .
6944	ExtractToFile extracts a file from the archive .
6945	SharedFoldersParentDir returns the path to the folder where the folder is shared .
6946	Name returns the name of the snapshot .
6947	Description returns the description of the snapshot .
6948	cleanupSnapshot closes the snapshot .
6949	BusTypeFromID returns the type of a vmx . Bus .
6950	Read from VMXFile
6951	Write the model to the file
6952	NewVirtualMachine creates a new virtual machine .
6953	Vcpus returns the number of available CPUs .
6954	VMPath returns the path of the VM .
6955	MemorySize returns the size of the VM .
6956	ReadOnly returns true if the VM is read - only .
6957	InVMTeam returns true if VM is in the VM .
6958	PowerState returns the power state of the VM .
6959	ToolsState returns the current user s tools .
6960	IsRunning returns true if the VM is running .
6961	GuestOS returns the guest OS .
6962	cleanupVM deallocates a VM .
6963	updateVMX updates the virtual machine configuration .
6964	SetMemorySize sets the memory size of the VM .
6965	SetNumberVcpus sets the number of virtual machines .
6966	SetDisplayName sets the display name
6967	SetAnnotation sets the annotation of the VM .
6968	SetVirtualHwVersion sets the virtualware version
6969	Error returns the string representation of an error .
6970	Errorf wraps fmt . Errorf
6971	Error implements the error interface .
6972	string returns a string representation of the stacktrace .
6973	newStackFrame returns a new stack frame .
6974	captureStack returns a slice of stack frames .
6975	parseFuncName returns package path and signature
6976	Stack logs an error
6977	StackWithCaller logs the error and logs the error .
6978	Write implements the http . ResponseWriter interface .
6979	ResponseStatus returns the status of the http response .
6980	httpResponseStruct returns the value of a http . ResponseWriter
6981	SetDetectedContentType sets the Content - Type header
6982	New returns a new ServerError
6983	New creates a new DBError
6984	New creates a new error
6985	New creates a new NotFoundError
6986	ValLength validates the length of a string
6987	StrLenIn validates the length of a string
6988	StrIn validate string
6989	GetEmail validate email
6990	MostSpecificType returns the most specific version of the given types .
6991	FullTypeHierarchy returns the full type of the given type
6992	SortTypes sorts a slice of types .
6993	Delete removes key from the store .
6994	Set implements RedisProvider
6995	refresh refreshes the session .
6996	Get returns a redis session by sid
6997	Destroy removes a session from redis .
6998	UpExpire removes expired session .
6999	Use adds a router handler
7000	Implement the http . Handler interface
7001	Use adds a router to the router group
7002	Group creates a new router group
7003	Run starts the router .
7004	create creates a new router engine
7005	Redirect sends a redirect to the given URL .
7006	Ok sends a JSON response .
7007	Fail writes the given error to the ResponseWriter .
7008	ResStatus implements http . ResponseWriter .
7009	Next calls next handler
7010	GetSession gets the session from the context
7011	GetBodyJSON - get request body
7012	SetSession sets a session
7013	FreshSession forces a new session to be expired
7014	DeleteSession deletes a session
7015	Write implements the http . ResponseWriter interface .
7016	WriteHeader implements http . ResponseWriter
7017	New returns a new Client instance
7018	setAllowLargeResults configures whether or not the request should be allowed .
7019	connect returns a new bigquery service .
7020	InsertRow inserts a row into BigQuery .
7021	AsyncQuery is the same as AsyncQuery but allows you to fetch the results .
7022	Query executes a query against a dataset .
7023	stdPagedQuery runs the bigquery query and returns the results .
7024	largeDataPagedQuery is a helper function that runs largeDataPagedQuery on a large dataset .
7025	pagedQuery executes a paginated query and returns the results channel .
7026	pageOverJob is a helper function to fetch the rows of a job .
7027	Count returns the number of records in the given dataset .
7028	work executes a fetch request
7029	helper function
7030	Perform a worker
7031	Supervisor runs the supervisor .
7032	Run starts the pool
7033	Add a function to the pool
7034	Wait blocks until the pool is closed
7035	Results returns all the jobs in the pool
7036	Wait for a job
7037	Returns the status of the pool .
7038	WrapHTTPHandlerFunc wraps http . HandlerFunc
7039	WebSocketHandlerFunc wraps a websocket . HandlerFunc
7040	StaticFile creates a static file with the given content type .
7041	PreloadFile returns a preloaded http . File .
7042	InitHtmlTemplates initializes html templates
7043	InitTextTemplates initializes text templates
7044	Html creates a new HTML template
7045	Text creates a new text template
7046	InitWatcher initializes a new watcher .
7047	CloseWatcher closes the watcher .
7048	Find returns the routes matching the given path .
7049	Add adds a handler to the router .
7050	NewRouters returns a new router instance .
7051	NewServerMux returns a new server mux .
7052	err sets the error handler
7053	HandleFunc adds a HandlerFunc to the Mux .
7054	handleError is used to handle an error
7055	Redirect sets the response status code .
7056	InitPProf init the pprof server
7057	StartSession starts a new session
7058	Creates a slice of items from a list .
7059	Return a buffered slice of int slices .
7060	Creates a list of permutations .
7061	Return a slice of permutations from list .
7062	Gets the format and args from the format .
7063	Errorm - formatted error message
7064	Fprintm formats a formatted string and returns the number of bytes written .
7065	Printm is a convenience wrapper for fmt . Printf
7066	Sprintf is a convenience wrapper for fmt . Sprintf
7067	Validate returns true if the password is a valid password strength .
7068	MakeRequirements returns a PasswordStrengthRequirements from the given password .
7069	sanityCheck returns true if the security strength requirements are valid .
7070	password returns a password with the given requirements .
7071	NewPassword returns a password from the given password strength .
7072	NewPasswords returns a slice of n passwords that have the given requirements .
7073	addNums returns a random string with numDigits
7074	pctuate returns a random punctuation with numPunc
7075	Determine if the input is not already initialized .
7076	Param adds a param to the set
7077	Parse parses a set of parameters into a ParamSet
7078	Unmarshal implements the json . Unmarshaler interface
7079	GetDefaultHTTPClient returns a default http client
7080	DeviceInfo returns information about a device .
7081	DevicePresence returns the status of the device .
7082	NotificationStatus returns the status of a push .
7083	DeleteNotification deletes a notification
7084	NotifyDevice sends a notification request to Pushy .
7085	Assert asserts whether b is true .
7086	CreateFile creates a new file with size .
7087	AddError adds an error to the form
7088	AddFieldError adds an error to the form of field errors .
7089	HasErrors returns true if the FormErrors has no errors .
7090	NewError creates a new form error
7091	NewFieldError creates a new form error .
7092	ChainHandlers chains the provided functions into a single middleware .
7093	FinalHandler returns a final handler that returns itself .
7094	Hash returns the MD5 hash of the reader .
7095	IsHash returns whether h is a valid MD5 hash .
7096	WithBaseDir returns an Option that sets the path to the given directory .
7097	WithFileFindFunc returns an Option that sets the filename for the file .
7098	WithTemplateFromFiles configures the template with the given name .
7099	WithTemplatesFromFiles adds templates to the list of templates
7100	WithTemplateFromStrings sets the name of the template
7101	WithTemplatesFromStrings adds template strings to the map
7102	WithFunction adds a function to the list of functions
7103	WithFunctions is an Option to set the template functions
7104	WithDelims sets the delimiter to close .
7105	New returns a new templates object
7106	RespondWithStatus implements http . ResponseWriter
7107	RespondTemplate writes a template response with status code 429 .
7108	Respond writes a template response with status code 429 .
7109	RenderTemplate executes the given template and returns the result .
7110	New creates a new h2quic server
7111	ServeUDP serves a UDP connection
7112	Shutdown shuts down the server .
7113	QuicHeadersHandler adds the response headers to the request .
7114	GetRequestIPs returns the list of IP addresses in the request
7115	DomainRedirectHandler returns a handler that redirects to the given domain and https port .
7116	New returns a new Server instance
7117	Add adds a new server
7118	TCPAddr returns the TCP address of the server .
7119	UDPAddr returns the udp address of the server .
7120	Close closes all servers
7121	Shutdown shuts down all active servers .
7122	Accept returns a new TCP connection .
7123	NewStaticFilesHandler returns a handler that serves static files
7124	ServeHTTP implements the http . Handler interface
7125	MarshalJSON converts Options to JSON .
7126	UnmarshalJSON implements json . Unmarshaler for Options .
7127	MarshalYAML implements the json . Marshaler interface for Options .
7128	UnmarshalYAML implements the json . Unmarshaler interface for Options .
7129	NewHandler returns a new http . Handler that logs the request .
7130	WithPanicResponse returns an Option to set the response body .
7131	WithPanicResponseHandler sets a custom panic response handler .
7132	New creates a new handler .
7133	ServeHTTP implements http . Handler
7134	NewContextFunc returns a context from a map
7135	NewMapErrorRegistry creates a new MapErrorRegistry .
7136	AddError adds an error to the registry .
7137	AddMessageError adds an error to the registry .
7138	MustAddError is like AddError but panics .
7139	MustAddMessageError registers an error with the given code and panics .
7140	AddHandler adds a handler to the registry .
7141	MustAddHandler is like AddHandler but panics .
7142	Handler returns the handler for the given error code .
7143	New returns a new API client .
7144	Request sends a request to the client .
7145	JSONContext sends a JSON request to the given io . Reader .
7146	StreamContext sends a streaming request to the given io . Reader .
7147	Stream performs a streaming request .
7148	JSONUnmarshal unmarshals JSON data into v .
7149	ServeTCP implements the Server interface for Server .
7150	ServeTCP implements the Server interface for Server .
7151	Shutdown stops the server
7152	HandleMethods implements http . Handler
7153	NewSetHeadersHandler returns a new http . Handler that adds headers to the http . Handler .
7154	New creates a new server
7155	HashedPath returns the path to the given file .
7156	New creates a new service .
7157	HTMLHandler implements the http . Handler interface .
7158	Status returns the status of the service .
7159	StatusHandler returns the status of the backend .
7160	OnHandler is the handler for Server .
7161	OffHandler is part of the Server interface .
7162	MarshalJSON method of PostIRCMessageRequest
7163	MarshalJSON method of PostArtifactRequest
7164	MarshalJSON method of PostArtifactResponse
7165	MarshalJSON method of HookChangedMessage
7166	MarshalJSON method of TriggerHookRequest
7167	MarshalJSON method of TriggerHookResponse
7168	UnmarshalJSON implements the json . Unmarshaler interface for TriggerHookResponse .
7169	MarshalJSON method of LaunchInfo
7170	MarshalJSON implements json . Marshaler
7171	MarshalJSON implements json . Marshaler
7172	MarshalJSON method of Var3
7173	MarshalJSON implements the json . Marshaler interface .
7174	UnmarshalJSON implements the json . Unmarshaler interface .
7175	Write implements io . Writer .
7176	Seek implements the io . Seeker interface for ReadWriteSeeker .
7177	Read implements io . ReadWriteSeeker .
7178	MarshalJSON method of LaunchSpecsResponse
7179	MarshalJSON method of RegionLaunchSpec
7180	GenerateCode generates code for example code .
7181	postPopulate adds the schema to the api entry
7182	CreateTemporaryCredentials creates a new Credentials object with the given scopes .
7183	setURL creates a new URL .
7184	SignRequest implements http . Client . SignRequest .
7185	APICall executes a single RPC call .
7186	SignedURL returns a signed URL that can be used to sign a URL .
7187	MarshalJSON method of HawkSignatureAuthenticationResponse
7188	Creates a bmw256 hash from a byte slice
7189	Creates a new cube hash .
7190	Convert a cube to a cube
7191	Sum returns a keccak256 sum of data .
7192	Evaluate out a block .
7193	reducedSqueezeRow0 is a helper function to reduce the size of a Sketch .
7194	reducedDuplexRow1 modifies the state of the state in the state .
7195	NewReaderByteCodeLoader creates a new ReaderByteCodeLoader .
7196	LoadReader loads the bytes from reader
7197	NewV3 returns a new UUID based on the given namespace and name .
7198	txLiteral marks the current state as a literal .
7199	txFetchSymbol fetches symbol from current state .
7200	txMarkRaw marks the state as raw string .
7201	txUnmarkRaw marks the state as rawString .
7202	txPrint writes the value of the transaction to stderr .
7203	txPrintRaw is a convenience wrapper around txPrintRaw
7204	NewLoopVar creates a new LoopVar instance .
7205	txMakeArray allocates a new array .
7206	txFunCallOmni is called when a function call is called .
7207	DumpAST enables or disables flags .
7208	DumpByteCode sets the flag s value .
7209	Optimize implements NaiveOptimizer .
7210	NewFuncDepot creates a new funcDepot
7211	Get returns the value for a given key
7212	Set adds a value to the depot
7213	NewFileTemplateFetcher creates a new FileTemplateFetcher .
7214	LastModified implements FileSource .
7215	Reader implements Source .
7216	Bytes returns the contents of the file .
7217	NewState returns a new state .
7218	PushFrame returns a new frame .
7219	PopFrame pops a frame from the stack .
7220	CurrentFrame returns the current frame .
7221	Warnf logs a warning message .
7222	AppendOutputString appends the output to the output .
7223	Popmark removes the mark from the state .
7224	CurrentMark returns the current mark .
7225	LoadByteCode loads a byte from state .
7226	Reset resets the state .
7227	Add a variable to the stack
7228	GetLvar gets the value at the given index .
7229	SetLvar sets the value of the given variable .
7230	NewByteCode returns a new ByteCode
7231	Append appends op to the byte list .
7232	AppendOp appends an op to the buffer .
7233	String returns a string representation of this ByteCode .
7234	NewCachedByteCodeLoader creates a new CachedByteCodeLoader .
7235	Load loads a byte from cache
7236	NewFileCache returns a new instance of FileCache
7237	GetCachePath returns the path to the cache
7238	Get retrieves an entity from the cache
7239	Set stores the entity in the cache
7240	Delete removes the file at key .
7241	Get returns the cache entity for the given key
7242	Set sets a cache entity
7243	Delete removes the key from the cache
7244	NewStringLexer returns a new parser .
7245	NewReaderLexer returns a new parser .
7246	NewV4 returns a new UUID UUID .
7247	Parse parses the given template and returns it .
7248	ParseReader parses an io . Reader
7249	Visit returns a channel of all nodes in the AST .
7250	String returns a string representation of the AST AST .
7251	Run executes the given byte code .
7252	DefaultParser is the default parser
7253	DefaultLoader is the default Loader implementation
7254	DefaultVM is the default VM
7255	Get returns the value associated with the key
7256	NewHTTPSource creates a new HTTPSource from an http . Response .
7257	NewStringByteCodeLoader creates a new StringByteCodeLoader .
7258	LoadString loads a string into vm .
7259	Get returns a single variable
7260	NewOp creates a new op .
7261	MarshalBinary allocates a binary representation of op .
7262	UnmarshalBinary implements the encoding . BinaryUnmarshaler interface for OpType .
7263	ArgInt returns the argument s argument .
7264	ArgString returns string representation of op .
7265	AppendOp appends an op to the current context .
7266	Compile implements the BasicCompiler interface .
7267	NewV5 returns a new UUID based on the SHA1 hash .
7268	Sort sorts the lex symbol list .
7269	Less implements sort . Interface .
7270	Swap swaps two elements .
7271	Copy returns a copy of the LexSymbolSet .
7272	Set sets a new LexSymbol
7273	GetSortedList returns the sorted list
7274	Top implements the Stack interface .
7275	Resize resizes the stack .
7276	Extend extends the stack .
7277	Grow resizes the stack .
7278	Get returns the element at the given index .
7279	Set sets the value at the given index .
7280	Push appends a value to the stack .
7281	Pop implements the Stack interface .
7282	String returns a string representation of the stack .
7283	GetHostIPs returns a list of host IPs
7284	GetPrivateHostIPs returns the list of private host IPs
7285	IsPrivate checks if an IP is a private network
7286	Environ returns a slice of environment variables .
7287	getenv returns the value of the specified environment variable
7288	flagAsEnv converts a flag to a string .
7289	NewPolicy returns a Policy with default values .
7290	CreateRandom returns a random slice of random bytes
7291	Shuffle shuffles a slice of bytes
7292	Generate generates a random password based on the policy
7293	ExecutableFolder returns the executable folder .
7294	Ignore is a functional option for the Sentinel .
7295	Sigs is used to set the shutdown signal .
7296	Logf is a functional option to set the log function used for logging .
7297	Errorf is an Option to set the error function .
7298	New returns a new Sentinel instance
7299	Run starts the Sentinel server .
7300	Shutdown implements the Sentinel interface .
7301	ShutdownIgnore returns true if the error is shut down .
7302	Register registers the server .
7303	Mux registers a new mux .
7304	HTTP starts an HTTP server .
7305	IgnoreError returns true if err is a non - nil error .
7306	IgnoreNetOpError returns true if err is a network error .
7307	convertAndAppendContextFuncs converts a slice of functions into a context .
7308	router returns a new mux . Router .
7309	buildInfoHandler returns information about the build - info
7310	Encode to json
7311	Json decodes JSON data into martini .
7312	validateAndMap calls martini . ValidateAndMap and returns a map of errors .
7313	Count returns the number of errors .
7314	Header returns a map of headers to headers
7315	PreflightHeader returns a map of headers based on the request origin .
7316	IsOriginAllowed checks if the origin is allowed to be allowed
7317	Allow adds headers to the request .
7318	Renderer returns a middleware that renders the given renderer .
7319	String returns a string representation of the AcceptLanguages .
7320	Languages returns a handler that handles Accept languages .
7321	Prefix adds a prefix to the router .
7322	Basic returns a http . HandlerFunc that sets the Basic Authentication Authorization header .
7323	UpdateUser updates a user
7324	GetById get user by id
7325	AddressToAccountId converts a string to an account ID .
7326	MutateChangeTrust creates an xdr . ChangeTrustOp
7327	MutateChangeTrust modifies the limit .
7328	Trust creates a ChangeTrust builder for a credit asset .
7329	RemoveTrust creates a ChangeTrustBuilder from a CreditAsset .
7330	MutatePayment parses a CreditAmount
7331	MutatePayment modifies the destination of a payment operation
7332	MutatePayment parses a PayloadOp
7333	MutatePayment modifies a PayloadOp
7334	MutateAccountMerge is part of the AccountMergeBuilder interface .
7335	MustParse is like Parse but panics .
7336	Parse converts a string into an integer .
7337	String converts xdr to a string .
7338	CreateOffer creates a new ManageOffer builder .
7339	CreatePassiveOffer creates a ManageOffer builder .
7340	UpdateOffer creates a new ManageOffer builder .
7341	DeleteOffer returns a ManageOffer builder for the specified rate .
7342	ManageOffer creates a ManageOffer builder
7343	Mutate is part of the ManageOfferBuilder interface .
7344	MutateManageOffer modifies the amount of ManageOfferOp
7345	MutateManageOffer updates the ManageOfferOp
7346	MutateManageOffer mutates a ManageOfferOp
7347	MutateOperation mutates the operation .
7348	String returns the string representation of the price .
7349	Transaction creates a new transaction builder instance .
7350	Mutate is part of the TransactionBuilder interface .
7351	Hash returns the hash of the transaction builder .
7352	HashHex returns the transaction hash .
7353	Sign creates a new transaction envelope with the given signers .
7354	MutateTransaction implements AllowTrustBuilder .
7355	MutateTransaction implements ChangeTrustBuilder .
7356	MutateTransaction implements the CreateAccountBuilder interface .
7357	MutateTransaction sets default values for TransactionBuilder .
7358	MutateTransaction implements the InflationBuilder interface .
7359	MutateTransaction is part of the TransactionBuilder interface .
7360	MutateTransaction is part of the TransactionBuilder interface .
7361	MutateTransaction adds a transaction to the transactionBuilder .
7362	MutateTransaction adds a transaction to the transactionBuilder .
7363	MutateTransaction mutates the transaction s Mem .
7364	MutateTransaction adds a transaction to the transactionBuilder .
7365	MutateTransaction is part of the TransactionBuilder interface .
7366	MutateTransaction implements PaymentBuilder .
7367	MutateTransaction implements the SetOptionsBuilder interface .
7368	MutateTransaction implements TransactionBuilder .
7369	MutateTransaction is part of the SourceAccount interface .
7370	Scan implements the sql . Int64 interface .
7371	InitialState returns the current state for the given key
7372	Changes is part of the Bundler interface .
7373	StateAfter returns the state after the given key .
7374	changes returns the list of changes that need to be applied .
7375	MustDecode is like Decode but panics on failure .
7376	Encode encodes src to base32 .
7377	MustEncode is like Encode but panics .
7378	checkValidVersionByte returns nil if the version is valid .
7379	Checksum returns the checksum of the given data .
7380	Validate checks the checksum of the checksum
7381	Returns the LedgerKey for the given type
7382	checkPlausible checks that the base32 alphabet is valid .
7383	Address returns the string representation of an AccountId .
7384	Equals returns true if this account id is equal to the given type .
7385	SetAddress sets the given address .
7386	ToXdrObject converts an Asset to an xdr . Asset .
7387	Through adds a new asset to the payload
7388	PayWith creates a new PayWithPath instance .
7389	retriedFraction parses a price and returns the updated price .
7390	Mutate is part of the Builder interface .
7391	MutateTX is part of the envelope interface .
7392	Bytes returns the transaction envelope .
7393	Base64 implements the Base64Builder interface .
7394	MutateTransactionEnvelope mutates the transaction envelope .
7395	MutateSetOptions mutates the HomeDomainOp .
7396	MutateSetOptions mutates an InflationDest object .
7397	MutateSetOptions mutates the master weight .
7398	MutateSetOptions modifies the set options .
7399	SetThresholds sets the threshold values .
7400	MutateSetOptions mutates options .
7401	MutateSetOptions mutates the set options .
7402	MutateSetOptions modifies SetOptionsOp
7403	MutateCreateAccount is part of the CreateAccount interface .
7404	MutateCreateAccount modifies a CreateAccountOp
7405	Random returns a random kp seed .
7406	Master returns a kpk from the given network .
7407	Parse parses an address from the given string .
7408	MustParse parses the given address or panics .
7409	MutateAllowTrust implements AllowTrustOp
7410	MutateAllowTrust implements the AllowTrustAsset interface
7411	MutateAllowTrust modifies the AllowTrustOp
7412	ToAsset converts AllowTrustOpAsset to Asset .
7413	SetNative sets the asset type
7414	String returns the string representation of the Asset .
7415	Equals returns true if the asset is equivalent to another .
7416	MustExtract is like Extract except it panics .
7417	Unmarshal implements io . Unmarshaler
7418	Marshal writes v to w .
7419	ValidEnum returns true if the enum value is valid .
7420	NewPublicKey creates a new public key
7421	MustEd25519 returns the Ed25519 version of the public key .
7422	NewNodeId creates a new node identity
7423	NewAccountId creates a new AccountId
7424	ValidEnum returns true if the enum value is valid .
7425	ArmForSwitch returns the asset name for an asset type .
7426	NewAsset creates a new Asset instance
7427	MustAlphaNum4 returns the AssetAlpha4 or panics .
7428	GetAlphaNum4 returns the alpha number of the asset
7429	MustAlphaNum12 returns the AssetAlpha12 or panics .
7430	GetAlphaNum12 returns the alpha number of the asset
7431	ValidEnum returns true if the index is valid
7432	ValidEnum returns true if the enum value is valid
7433	ValidEnum returns true if the enum is valid .
7434	NewAccountEntryExt creates a new AccountEntryExt instance
7435	ValidEnum returns true if the value is valid
7436	NewTrustLineEntryExt creates a new TrustLineEntryExt instance
7437	ValidEnum returns true if the enum value is valid
7438	NewOfferEntryExt creates an OfferEntryExt instance
7439	NewDataEntryExt creates a new DataEntryExt instance
7440	NewLedgerEntryData creates a new LedgerEntryData from a type
7441	NewLedgerEntryExt creates a new ledgerEntryExt instance
7442	ValidEnum returns true if the envelope type is valid
7443	ValidEnum returns true if the operation type is valid
7444	ArmForSwitch implements AssertOpAsset .
7445	NewAllowTrustOpAsset creates a new AllowTrustOpAsset .
7446	MustAssetCode4 returns the asset code 4 .
7447	GetAssetCode4 returns the asset code 4 .
7448	MustAssetCode12 returns asset code 12 .
7449	GetAssetCode12 returns the asset code 12 .
7450	NewOperationBody creates a new operation body .
7451	MustCreateAccountOp returns the value of CreateAccountOp or panic .
7452	GetCreateAccountOp returns the CreateAccountOp for the operation .
7453	MustPaymentOp returns payment op if not set .
7454	GetPaymentOp returns the payment operation s payment operation .
7455	MustPathPaymentOp returns the PathPaymentOp or panics .
7456	GetPathPaymentOp gets the PathPaymentOp from the request body
7457	MustManageOfferOp returns the ManageOfferOp or panics .
7458	GetManageOfferOp gets the ManageOfferOp from the operation body .
7459	MustCreatePassiveOfferOp returns the value of CreatePassiveOfferOp if not set .
7460	GetCreatePassiveOfferOp returns the CreatePassiveOfferOp for the operation .
7461	MustSetOptionsOp returns the SetOptionsOp if set .
7462	GetSetOptionsOp gets SetOptionsOp from OperationBody .
7463	MustChangeTrustOp returns the ChangeTrustOp if set .
7464	GetChangeTrustOp returns the ChangeTrustOp from the operation body .
7465	MustAllowTrustOp returns the AllowTrustOp if set or panics .
7466	GetAllowTrustOp returns the AllowTrustOp if the operation is allowed .
7467	MustDestination returns the AccountId if set .
7468	GetDestination returns the destination of the operation .
7469	MustManageDataOp returns the ManageDataOp or panics .
7470	GetManageDataOp returns the ManageDataOp for the operation .
7471	ValidEnum returns true if the enum value is valid .
7472	ArmForSwitch implements the Armo interface .
7473	NewMemo returns a new Memo instance .
7474	MustText gets the text from the Memo .
7475	GetText gets the text from the Memo
7476	MustId panics .
7477	GetId returns the id of the Memo
7478	MustHash returns the hash value or panics .
7479	GetHash returns the hash of this Memo .
7480	MustRetHash returns the RetHash or panics .
7481	NewTransactionExt creates a new TransactionExt instance .
7482	ValidEnum returns true if the value is valid .
7483	ArmForSwitch returns the ArmForSwitch value for a Switch .
7484	NewCreateAccountResult creates a new CreateAccountResult instance
7485	ValidEnum returns true if the payment result code is valid .
7486	ArmForSwitch returns the ArmForSwitch value for the Switch .
7487	NewPaymentResult creates a new PaymentResult instance
7488	ValidEnum returns true if the value is valid .
7489	ArmForSwitch implements the ArmPaymentResult interface .
7490	NewPathPaymentResult creates a new PathPaymentResult instance
7491	MustNoIssuer returns the Asset MissingIssuer or panics .
7492	GetNoIssuer returns the Asset s NoIssuer value .
7493	ValidEnum returns true if the value is a valid EnageOfferResultCode .
7494	ValidEnum returns true if the value is valid .
7495	ArmForSwitch implements ManageOfferResultOffer
7496	NewManageOfferSuccessResultOffer creates a new ManageOfferSuccessResultOffer .
7497	ArmForSwitch implements ManageOfferResult .
7498	NewManageOfferResult creates a new ManageOfferResult .
7499	ValidEnum returns true if the value is valid
7500	ArmForSwitch returns the ArmForSwitch value for Switch .
7501	NewSetOptionsResult creates a new SetOptionsResult instance
7502	ValidEnum returns true if the value is valid
7503	ArmForSwitch returns the ArmForSwitch value for switch Switch
7504	NewChangeTrustResult creates a new change trust result
7505	ValidEnum returns true if the AllowTrustResultCode is valid
7506	ArmForSwitch returns the ArmForSwitch value for Switch Switch
7507	NewAllowTrustResult creates a new AllowTrustResult instance
7508	ValidEnum returns true if the enum value is valid .
7509	ArmForSwitch implements AccountMergeResult .
7510	NewAccountMergeResult creates a new AccountMergeResult instance
7511	MustSourceAccountBalance returns the value of SourceAccountBalance or panic .
7512	GetSourceAccountBalance returns the source account balance .
7513	ValidEnum returns true if the enum value is valid
7514	ArmForSwitch returns the Payouts associated with the given Switch .
7515	NewInflationResult creates a new InflationResult
7516	MustPayouts returns a slice of Payouts or panics .
7517	GetPayouts returns the Payouts of the given InflationResult .
7518	ValidEnum returns true if the value is valid
7519	ArmForSwitch implements ManageDataResult .
7520	NewManageDataResult creates a ManageDataResult from the given code and value .
7521	ValidEnum returns true if the enum value is valid
7522	ArmForSwitch returns the arm for the given operation type .
7523	NewOperationResultTr creates a new operation result .
7524	MustCreateAccountResult is part of the CreateAccountResult interface .
7525	GetCreateAccountResult - get create account result
7526	MustPaymentResult returns payment result without panics .
7527	GetPaymentResult - get payment result
7528	MustPathPaymentResult returns the PathPaymentResult or panics .
7529	GetPathPaymentResult get PathPaymentResult
7530	MustManageOfferResult returns the ManageOfferResult or panics .
7531	GetManageOfferResult get ManageOfferResult
7532	MustCreatePassiveOfferResult returns a ManageOfferResult or panics .
7533	MustSetOptionsResult is part of the SetOptionsResult interface .
7534	GetSetOptionsResult get SetOptionsResult
7535	MustChangeTrustResult is part of the ChangeChangeTrustResult interface .
7536	GetChangeTrustResult get ChangeTrustResult
7537	MustAllowTrustResult is part of the AllowTrustResult interface .
7538	GetAllowTrustResult returns AllowTrustResult
7539	MustAccountMergeResult is part of the AccountMergeResult interface .
7540	GetAccountMergeResult get AccountMergeResult from Operation
7541	MustInflationResult returns the InflationResult or panics .
7542	GetInflationResult get InflationResult
7543	MustManageDataResult returns the ManageDataResult or panics .
7544	GetManageDataResult get ManageDataResult from operation
7545	ArmForSwitch implements the ArmForSwitch method
7546	NewOperationResult creates a new OperationResult .
7547	MustTr returns an OperationResultTr or panics .
7548	GetTr returns the Tr associated with the OperationResult .
7549	ValidEnum returns true if the value is valid .
7550	ArmForSwitch returns the arm for the given switch code .
7551	NewTransactionResultResult creates a new TransactionResult .
7552	MustResults returns a slice of OperationResult or panics .
7553	GetResults returns the operation results .
7554	NewTransactionResultExt creates a new TransactionResultExt instance .
7555	NewStellarValueExt creates a new StellarValueExt instance
7556	NewLedgerHeaderExt creates a new LedgerHeaderExt instance
7557	ValidEnum returns true if the enum is valid
7558	ArmForSwitch returns an arm for the specified switch type .
7559	NewLedgerUpgrade creates a new upgrade for a type
7560	MustNewLedgerVersion returns the value of NewLedgerVersion or panics .
7561	GetNewLedgerVersion returns a new instance of NewLedgerVersion
7562	MustNewBaseFee returns the new baseFee if set .
7563	GetNewBaseFee returns the new base base fee
7564	MustNewMaxTxSetSize returns the value of NewMaxTxSetSize or panics .
7565	GetNewMaxTxSetSize returns the new MaxTxSetSize of the upgrade upgrade .
7566	ArmForSwitch returns an arm for the specified switch type .
7567	NewLedgerKey creates a new LedgerKey from a type
7568	ValidEnum returns true if the enum value is valid .
7569	ArmForSwitch implements BucketEntry .
7570	NewBucketEntry creates a new BucketEntry .
7571	MustLiveEntry returns the LedgerEntry or panics .
7572	GetLiveEntry returns the LedgerEntry for the given bucket .
7573	MustDeadEntry returns the key and panics .
7574	GetDeadEntry returns the key associated with the given bucket .
7575	NewTransactionHistoryEntryExt creates a new TransactionHistoryEntryExt instance .
7576	ArmForSwitch implements AccountHistoryGetter .
7577	NewTransactionHistoryResultEntryExt creates a new TransactionHistoryResultEntryExt instance .
7578	NewLedgerHeaderHistoryHistoryEntryExt creates a new LedgerHeaderHistoryEntryExt instance
7579	NewScpHistoryEntry creates a ScpHistoryEntry .
7580	ValidEnum returns true if the given enum value is valid .
7581	ArmForSwitch returns an arm for the specified switch type
7582	NewLedgerEntryChange creates a new LedgerEntryChange from a type
7583	MustCreated is like NewCreated except it panics .
7584	GetCreated returns the created value of the created led .
7585	MustUpdated is part of the LedgerEntry interface .
7586	GetUpdated returns the updated value of the led .
7587	MustRemoved is a helper function to panic if the key was removed .
7588	GetRemoved returns the removed removed key .
7589	MustState is part of the LedgerEntry interface .
7590	GetState returns the current state of the switch
7591	NewTransactionMeta initializes TransactionMeta .
7592	MustOperations is part of the TransactionMeta interface .
7593	GetOperations is part of the Operation interface .
7594	ValidEnum returns true if the enum value is valid
7595	ValidEnum returns true if the IP address is valid .
7596	ArmForSwitch implements the ArmForSwitch interface .
7597	NewPeerAddressIp creates a new PeerAddressIp from a type
7598	MustIpv4 returns the ipv4 address or panics .
7599	GetIp4 returns the ip4 address of the peer
7600	MustIpv6 returns the value of ipv6 or panics .
7601	GetIp6 returns the ip6 value of the peer
7602	ValidEnum returns true if the message type is valid
7603	ArmForSwitch returns an arm for a message type
7604	NewStellarMessage creates a StellarMessage from a type
7605	MustError returns an error or panics .
7606	GetError returns the error associated with the message
7607	MustHello returns the Hello value or panics .
7608	GetHello returns the Hello value of the message
7609	MustAuth returns Auth if the message is not set .
7610	GetAuth gets the Auth from the message
7611	MustDontHave returns a DontHave value panics .
7612	GetDontHave returns the DontHave field of the message
7613	MustPeers returns the list of peers or panics .
7614	GetPeers returns the list of peers
7615	MustTxSetHash panics if message is not set .
7616	GetTxSetHash returns the hash of the message
7617	MustTxSet returns the transaction set or panics .
7618	GetTxSet gets the transaction set from the message
7619	MustTransaction returns the TransactionEnvelope or panics .
7620	GetTransaction returns a TransactionEnvelope from the message
7621	MustQSetHash returns the QSetHash without panics .
7622	GetQSetHash returns the QSet hash of the message
7623	MustQSet returns the ScpQuorumSet or panics .
7624	GetQSet returns the ScpQuorumSet of the message
7625	MustEnvelope returns the ScpEnvelope or panics .
7626	GetEnvelope gets a ScpEnvelope from the message
7627	MustGetScpLedgerSeq panics if GetScpLedgerSeq is not set .
7628	GetGetScpLedgerSeq gets the getScpLedgerSeq
7629	ArmForSwitch implements the ArmForSwitch interface .
7630	NewAuthenticatedMessage creates an AuthenticatedMessage with the given value .
7631	ValidEnum returns true if the enum value is valid
7632	ArmForSwitch returns an arm for the specified switch type .
7633	NewScpStatementPledges creates a new ScpStatementPledges from a type
7634	MustPrepare returns the PreparePrepare or panics .
7635	GetPrepare returns the StatementPrepare associated with the Switch interface .
7636	MustConfirm returns the ScpStatementConfirm or panics .
7637	GetConfirm returns the ScpStatementConfirm associated with the Switch .
7638	MustExternalize is the default externalization function .
7639	GetExternalize returns the StatementExternalize from the switch
7640	MustNominate returns the Nominate or panics .
7641	GetNominate returns the Nominate Nominate
7642	SafeUnmarshalBase64 decodes the base64 encoded data into dest .
7643	SafeUnmarshal unmarshals data into dest .
7644	SendAmount returns the amount of asset funds
7645	LoadAccount loads an account .
7646	SequenceForAccount returns the sequence number for the given account ID .
7647	SubmitTransaction sends a transaction to Rollbar
7648	Equals returns true if key is equal to other .
7649	SetAccount sets the given account ID .
7650	SetData sets the data for the given key .
7651	SetOffer sets the ledger key for the given account .
7652	SetTrustline sets the key for the given account .
7653	Add implements ChDBuilder interface
7654	tryHash tries to check if a hash is in the bucket .
7655	HashIndexFromKey returns the index of a hash .
7656	ReadInt read int
7657	Read from io . Reader
7658	Get returns the value for a given key .
7659	Iterate returns an Iterator .
7660	Write writes the ChD to w .
7661	RegisterDatasources registers the specified datasources .
7662	RegisterFonts registers the given fonts .
7663	New returns a new Map .
7664	NewSized creates a Mapnik object .
7665	Load loads the map from the map .
7666	Resize resizes the map .
7667	Free frees the map .
7668	SRS returns the SRS representation of the Map .
7669	ZoomAll zoom - Zoom all maps .
7670	ZoomTo zoom to the map .
7671	Render a map to a map
7672	RenderImage takes a map and returns the image .
7673	RenderToFile render the map to a file
7674	SetBufferSize sets the size of the map .
7675	Search is used to query all search responses .
7676	Get returns the next available connection .
7677	put adds a connection to the pool .
7678	MonoToStereoF32 converts a float32 to a stereo data .
7679	BitCrush computes the bitCrush
7680	NormalizeMax normalizes the audio buffer
7681	G Gain is used to gain a gain
7682	MonoDownmix converts a FloatBuffer to a mono buffer .
7683	Quantize quantizes the audio buffer
7684	PCMScale performs the PCM scaling of the input buffer
7685	StereoPan sets the StereoPan to the audio buffer
7686	Leader returns the current leader
7687	IsLeader returns true if the candidate is leader .
7688	NewResponse returns a new Response .
7689	GetRequestID retrieves the request ID from the context .
7690	Log implements the MonitorWriter interface .
7691	SendMailSSL sends a mail message to the given address
7692	Send send message
7693	WaitForIt waits for a TCP connection to the given host .
7694	Get returns the configuration from the given source .
7695	initConfig - initializes Viper .
7696	WritePluginResultsToDatabase writes the results to the database
7697	NewAuthController creates a new AuthController .
7698	Authenticate checks to see if the user is valid .
7699	NewOAuth2Controller creates a new OAuth2 controller .
7700	Refresh access token
7701	Token handles an OAuth2 token
7702	Logging implements the http . Handler interface .
7703	SingleFile returns a handler that serves a single file
7704	Write implements the http . ResponseWriter interface
7705	Hijack implements http . Hijacker
7706	NewMongo creates a new MongoDB instance
7707	Disconnect disconnects the client
7708	New returns a new table .
7709	PrintTable prints a table
7710	PrintHorizontal prints a map
7711	PrintRow prints a row of fields .
7712	AddRow adds a new row to the table .
7713	Print prints the table .
7714	String returns a string representation of the table .
7715	getHead returns the head of the table .
7716	rowString returns a string representation of a row .
7717	fieldString returns the string representation of a field .
7718	stringTableDash returns a dash table dash .
7719	printMarkdownDash prints the markdown dash .
7720	stringMarkdownDash returns the markdown dash .
7721	HashPassword returns a hash of the given password .
7722	EncodeOAuth2Code encodes OAuth2 code .
7723	DecodeOAuth2Code decodes OAuth2 code and returns the response .
7724	NewServer creates a new server .
7725	Start starts the lunarc server
7726	Stop stops the server .
7727	NewLoggingServeMux returns a new instance of LoggingServeServeMux .
7728	Handler implements the http . Handler interface .
7729	Handle implements the http . Handler interface .
7730	HandleFunc registers a handler for the given pattern .
7731	Init initializes Elasticsearch .
7732	WaitForConnection waits until Elasticsearch is available
7733	StoreFileInfo - store file info
7734	StorePluginResults stores the plugin results
7735	CamelCase converts src to CamelCase
7736	GetOpt gets an option from an environment variable
7737	Get opts from environment variable
7738	GetSHA256 returns the SHA256 checksum of the given file .
7739	RunCommand executes a command and returns its output .
7740	RemoveDuplicates removes duplicates
7741	Unzip unzips a zip archive
7742	SliceContainsString checks if a string is in a slice
7743	NewSMTP creates a new SMTP instance
7744	SendMail sends a mail message
7745	GetEnvironment returns the first available environment
7746	GetSMTP returns the configuration for the given source .
7747	GetConfig returns the config for the given source .
7748	GetEnvironment returns the configuration for the given environment
7749	GetMongo returns the configuration for the given source .
7750	TokenHandler returns a handler that handles JWT requests .
7751	Receive receives an incoming message from the connection .
7752	Send sends an OutMsg .
7753	allBoshReleaseNames returns the names of all BoshRelease objects .
7754	AddedProperty adds the added property to the DeltaJob .
7755	RemovedProperty sets the removed property for a DeltaJob
7756	AddDeltaJob adds a DeltaJob to the result .
7757	Concat concatenates two DeltaJob objects .
7758	Read returns an io . ReadCloser for the release .
7759	Pull pulls a release from the local cache
7760	BuildJob is a helper function to build a job
7761	LoadBoshRelease loads a BoshRelease from a git repository .
7762	readBoshRelease reads a BoshRelease from an io . Reader .
7763	readBoshRelease reads the BoshRelease from rr .
7764	readBoshJob reads a BoshRelease from io . Reader
7765	NewRequest creates a new http . Request .
7766	PushCloudConfig pushes a cloud config to BOSH
7767	Generate creates a new packager object for the given packfile .
7768	CreateNewRecord creates a new JobManifest property .
7769	NewShowCmd returns a new ShowCmd instance .
7770	All prints all releases
7771	GetDefaultTaskImageResource returns the default image image resource
7772	AddRawJob adds a raw job to the pipeline
7773	AddGroup adds a group to the pipeline
7774	GetResourceByName returns the resource config with the given name
7775	AddRawResource adds a raw resource to the pipeline
7776	AddResource adds a resource to the pipeline
7777	AddGithubResource adds a Github resource to the pipeline .
7778	AddBoshIOResource adds a BoshIOR to the pipeline
7779	AddBoshDeploymentResource adds a BoshDeploymentResource to the pipeline .
7780	AddGitResource adds a new Git resource to pipeline
7781	allJobNames returns a list of all the job names .
7782	NewDeploymentManifestFromFile creates a new DeploymentManifest from a file .
7783	NewDeploymentManifest returns a DeploymentManifest instance
7784	AddRemoteRelease adds a new release to manifest .
7785	AddRemoteStemcell adds a rememcell to the manifest .
7786	Tag returns the tag associated with the manifest .
7787	RemoveTag removes a tag from the manifest .
7788	LoadPivnetRelease loads a PivnetRelease
7789	BoshReleaseOrEmpty returns the BoshRelease if it exists or empty .
7790	readPivnetRelease reads the Pivnet release from the given path .
7791	decodeYaml decodes YAML data into v .
7792	NewZipWalker returns a new Walker
7793	NewDiffCmd returns a new instance which can be used to issue diff JSON - RPC command .
7794	All prints the contents of the release command .
7795	Job diff job
7796	New returns a Differ Differ Differ between two releases .
7797	Return the struct name for the record .
7798	Returns the type name of the record .
7799	NewTgzWalker creates a new tgzWalker .
7800	NewBackoff returns a new Backoff instance .
7801	Reset implements the Backoff interface .
7802	NewExponential returns a new Backoff instance .
7803	NewExponentialFullJitter creates a new BackoffFitter .
7804	NewLinear returns a new Backoff instance .
7805	Get line size
7806	GetMaxSize returns the maximum line size
7807	compute writes the output to the output .
7808	WithTimeout adds the timeout to the post apps params
7809	WithContext adds the context to the post apps params
7810	WithHTTPClient adds the HTTPClient to the post apps params
7811	WithBody adds the body to the post apps params
7812	WithTimeout adds the timeout to the get apps app params
7813	WithContext adds the context to the get apps app params
7814	WithHTTPClient adds the HTTPClient to the get apps app params
7815	WithApp adds the app to the get apps app params
7816	UnmarshalBinary unmarshals a raw byte slice into a RouteWrapper .
7817	WithTimeout adds the timeout to the get apps params
7818	WithContext adds the context to the get apps params
7819	WithHTTPClient adds the HTTPClient to the get apps params
7820	WithTimeout adds the timeout to the delete apps app params
7821	WithContext adds the context to the delete apps app params
7822	WithHTTPClient adds the HTTPClient to the delete apps app params
7823	WithApp adds the app to the delete apps app params
7824	WithTimeout adds the timeout to the patch apps app router params
7825	WithContext adds the context to the patch apps app router params
7826	WithHTTPClient adds the HTTPClient to the patch apps app routes route params
7827	WithApp adds the app to the patch apps app routes route params
7828	WithBody adds the body to the patch apps app routes route params
7829	WithRoute adds the route to the patch apps app router params
7830	WithTimeout adds the timeout to the post apps app router params
7831	WithContext adds the context to the post apps app router params
7832	WithHTTPClient adds the HTTPClient to the post apps app routes params
7833	WithApp adds the app to the post apps app router params
7834	WithBody adds the body to the post apps app routes params
7835	WithTimeout adds the timeout to the put apps app router params
7836	WithContext adds the context to the put apps app router params
7837	WithApp adds the app to the put apps app routes route params
7838	WithBody adds the body to the put apps app routes route params
7839	WithRoute adds the route to the put apps app router params
7840	WithTimeout adds the timeout to the get apps app router params
7841	WithContext adds the context to the get apps app routes params
7842	WithHTTPClient adds the HTTPClient to the get apps app routes params
7843	WithApp adds the app to the get apps app routes params
7844	WithTimeout adds the timeout to the patch apps app params
7845	WithContext adds the context to the patch apps app params
7846	WithHTTPClient adds the HTTPClient to the patch apps app params
7847	WithApp adds the app to the patch apps app params
7848	WithBody adds the body to the patch apps app params
7849	WithTimeout adds the timeout to the put apps app params
7850	WithContext adds the context to the put apps app params
7851	WithApp adds the app to the put apps app params
7852	WithBody adds the body to the put apps app params
7853	UnmarshalJSON handles deserialization of a Task
7854	MarshalJSON implements swagger . Marshaller
7855	Validate validates this task
7856	GetRanges returns a slice of IPNet .
7857	WithTimeout adds the timeout to the get apps app routes route params
7858	WithContext adds the context to the get apps app routes route params
7859	WithHTTPClient adds the HTTPClient to the get apps app routes route params
7860	WithApp adds the app to the get apps app routes route params
7861	WithRoute adds the route to the get apps app routes route params
7862	New creates a new Functions
7863	SetTransport sets the transport
7864	WithTimeout adds the timeout to the delete apps app routes route params
7865	WithContext adds the context to the delete apps app routes route params
7866	WithHTTPClient adds the HTTPClient to the delete apps app routes route params
7867	WithApp adds the app to the delete apps app routes route params
7868	WithRoute adds the route to the delete apps app routes route params
7869	WithTimeout adds the timeout to the get tasks params
7870	WithContext adds the context to the get tasks params
7871	WithHTTPClient adds the HTTPClient to the get tasks params
7872	NewValueStore creates a new ValueStore .
7873	Close shuts down the underlying valueStore .
7874	SetBackend sets the Oort backend
7875	Ring returns the current ring ring .
7876	GetLocalID returns the local ID
7877	GetListenAddr returns the address of the local node
7878	Start startup starts the replication loop
7879	Shutdown the server
7880	Stop stops the server .
7881	Exit terminates the server .
7882	SelfUpgrade attempts to upgrade the version of the binary
7883	SoftwareVersion returns the current version .
7884	Shutdown shuts down the underlying storage .
7885	Return a Rant model .
7886	Profile returns the user s profile .
7887	Search returns all Rants matching the given term
7888	returns a Rant model
7889	WeekDailyRants returns the list of Rants for the application
7890	getUserId returns the user id of the specified user .
7891	Shutdown shuts down the Store .
7892	FExists checks if a file exists
7893	outbound is a long running goroutine that reads out messages from OpenFlow
7894	Parse the message stream
7895	Group creates a new Group .
7896	Groups returns the list of groups associated with the domain .
7897	GetGroup gets a group by name
7898	Reticence retreives the given string length .
7899	CheckPassword returns an error if the given password is not valid .
7900	CleanUrl checks if a url is valid and returns it .
7901	NewParameter returns a new Parameter
7902	MakeParams returns a slice of parameters .
7903	Parse parses the given value into Params .
7904	Email returns the email address
7905	Forwarder creates a new Forwarder
7906	Forwarders returns the list of forwarded forwardingers .
7907	GetForwarder returns the forwarding forwarder for the domain .
7908	New creates a new CGP instance .
7909	EscapeCommaSeparated returns a comma - separated string
7910	Alias returns an alias for the given account .
7911	Email returns the email address
7912	Aliases returns the list of aliases .
7913	RealName returns the real name of the account .
7914	Email returns the email address
7915	Account creates a new Account
7916	Accounts returns a list of all accounts in the domain .
7917	Exists checks if a domain exists
7918	Aliases returns the list of aliases for the given domain .
7919	Domain creates a new domain
7920	Domains returns a list of domains .
7921	New returns a new Err
7922	Wrap wraps an error into a new Err .
7923	mergeIn merges info into e .
7924	wrappedErrStr returns a string representation of the wrapped error .
7925	concatArgs returns a formatted string
7926	MailingList creates a new MailingList .
7927	Subscriber returns a Subscriber
7928	Subscribers returns all registered subscribers .
7929	MailingLists returns a list of mailing list .
7930	NewByteKeyItem returns a pointer to a byte slice .
7931	CompareBytes compares two bytes .
7932	CompareInt compares two pointers .
7933	Allococ returns an unsafe . Pointer that can be used to allocate memory allocations .
7934	Free frees a pointer .
7935	Stats returns the status of the mem_stats file .
7936	FreeOSMemory frees the system .
7937	Add implements the Segment interface .
7938	NewSegment returns a new Segment .
7939	Assemble takes a set of segments and returns a new Skiplist .
7940	CompareNodeTable compares two node pointers .
7941	New returns a new NodeTable .
7942	Stats returns the statistics for the node .
7943	MemoryInUse returns the number of items in the cache .
7944	Get returns a pointer to a pointer .
7945	Update updates a pointer to a node .
7946	Remove removes a node from the table .
7947	Close closes the node table .
7948	MemoryInUse returns the number of nodes in the database .
7949	debugMarkFree marks the node as free .
7950	Seek moves the iterator to the given byte slice .
7951	Next implements Iterator .
7952	Refresh refreshes the iterator .
7953	Close closes the underlying iterator .
7954	NewIterator returns an iterator over the specified snapshot .
7955	SeekFirst moves the iterator to the first iterator .
7956	Next implements the MergeIterator interface .
7957	Seek moves the iterator to the next iterator .
7958	Keys returns the keys in the list .
7959	Remove removes a node from the list .
7960	Add adds a node to the list .
7961	NewWithConfig returns a new skiplist with the given configuration .
7962	FreeNode frees the given node .
7963	MakeBuf returns an ActionBuffer .
7964	Size returns the number of items in n .
7965	NewLevel returns a new random level .
7966	Insert inserts a new item into the skiplist .
7967	Insert3 inserts a new node into the sketch .
7968	Insert3 inserts a new node at the given position .
7969	Delete removes a node from the skiplist .
7970	DeleteNode is used to delete a node
7971	GetRangeSplitItems returns a slice of nodes that are split into nways .
7972	Bytes returns the item s length .
7973	ItemSize returns the size of the item .
7974	KVFromBytes returns the KV from a byte slice .
7975	CompareKV compares two KV .
7976	Emit adds a new event to all handlers
7977	UnregisterHandler removes a handler from the event controller .
7978	IsHandlerRegistered checks if a handler is registered
7979	CompareNitro is the same as CompareNitro .
7980	DefaultConfig returns a default configuration .
7981	Delete implements the io . Writer interface
7982	GetNode returns the node at the given byte slice .
7983	SetKeyComparator sets key comparator .
7984	UseMemoryMgmt is used to use the memory migrateMgmt .
7985	NewWithConfig creates a new Nitro instance
7986	MemoryInUse returns the number of memory in use
7987	Close closes the Nitro instance .
7988	NewWriter returns a new writer
7989	SnapshotSize returns the size of the snapshot .
7990	Encode writes the snapshot to w .
7991	Decode decodes the Snapshot from a buffer .
7992	Open marks the snapshot as open .
7993	CompareSnapshot returns the number of pointers in this snapshot .
7994	GC triggers a garbage collector
7995	GetSnapshots returns a slice of all the snapshots
7996	MemoryInUse returns the number of memory in bytes
7997	CompareBS compares two buffers .
7998	Acquire acquires a new session and returns it .
7999	Release releases the access barrier .
8000	FlushSession flushes the current session .
8001	Apply applies the stats to the report .
8002	AddInt64 adds an int64 to the stats .
8003	AddUint64 adds a uint64 to the stats .
8004	Merge merges two stats .
8005	GetStats returns the current stats report .
8006	NewIterator returns a new Iterator .
8007	SeekFirst moves the first item in the iterator .
8008	SeekWithCmp implements Iterator . SeekWithCmp .
8009	Seek moves the iterator to the next position .
8010	Valid returns whether the iterator is valid .
8011	Delete deletes the current iterator .
8012	Next moves the iterator to the next item .
8013	Init registers a new SKUkeeper .
8014	FromURL returns the URL from the given URL .
8015	ToURL converts a folder to a URL
8016	Size returns the size of the tuple in bytes .
8017	WriteTo implements io . WriterTo interface .
8018	Static returns a handler for the given directory .
8019	Read parses the configuration file .
8020	Del deletes a key
8021	WriteTo implements the io . WriterTo interface .
8022	checkSection checks if a section is a section
8023	checkLine returns the key and value from the given line .
8024	checkComment checks if the given line is a comment .
8025	NewResponseWrapper returns a new ResponseWrapper
8026	Hijack implements the http . ResponseWriter interface .
8027	CloseNotify implements the http . ResponseWriter interface .
8028	DateFormat is an Option to set the date format .
8029	Logger wraps a http . HandlerFunc and logs the response .
8030	GetAvailableInventory returns a map of available sku builders .
8031	Expiration sets the expiration time
8032	Claimer returns a TokenOpt that sets the default claims .
8033	Issuer sets the issuer to use .
8034	User sets the user to use .
8035	Password sets the user password .
8036	Extractor sets the extractor for the request .
8037	TokenGenerator creates a new JWT token generator
8038	Token returns the token associated with the request .
8039	Claims extracts the JWT claims from the request context .
8040	String returns the string representation of the Token .
8041	NewLexer creates a new Lexer .
8042	run runs the lexer .
8043	Emit a Token
8044	skipWhitespace skips whitespace .
8045	next returns the next rune
8046	LineNum returns the number of lines in the input .
8047	Offset returns the position of the current line .
8048	errorf handles an error .
8049	lexText lexes a text .
8050	lexComment consumes a comment .
8051	New creates a new tuple type .
8052	AddVersion adds a version to the tuple .
8053	Contains returns true if the given field exists in the tuple .
8054	Offset returns the offset of the specified field .
8055	Versions returns the versions of the tuple .
8056	SetPrivateMeta sets the private metadata for a task
8057	SetPublicMeta sets the metadata for a task
8058	GetRedactedVersion returns the redacted version of the task .
8059	Equal returns true if two tasks are equal
8060	HTTP wraps an http . Handler with the given verb and verbs .
8061	PutUint8 inserts an uint8 value into the buffer .
8062	PutInt8 inserts an int8 value into the buffer .
8063	PutUint16 adds an uint16 to the buffer .
8064	PutInt16 adds an int16 to the buffer .
8065	PutUint32 adds an uint32 to the buffer .
8066	PutInt32 adds an int32 to the buffer .
8067	PutUint64 adds an uint64 to the buffer .
8068	PutInt64 adds an int64 to the buffer .
8069	NewPackageList returns a new empty PackageList .
8070	PutFloat32 creates a float32 value .
8071	Classic returns a Martini instance .
8072	Languages returns an Option that sets the language tags .
8073	Session returns an Option that sets the session .
8074	Data returns the context s ContextValue
8075	URL appends a prefix to the current context
8076	Size returns the size of the terminal .
8077	GetRequestIDFromTaskResponse returns request ID from task response
8078	PutString appends a string value to the buffer .
8079	LoadDirectory loads all the files in the given directory .
8080	LoadFile loads a parsed package from a file .
8081	LoadPackage loads a Package from the given parser .
8082	NewDecoder returns a new decoder .
8083	NewDecoderSize returns a new decoder that reads bytes from r .
8084	Panic returns a middleware that logs panics .
8085	DeployVApp deploys a vapp
8086	UnDeployVApp removes a task
8087	Auth returns ErrAuthFake
8088	QueryTemplate retrieves a vappTemplateRecord
8089	NewEncoder returns a new Encoder .
8090	Getter returns an Option that sets the nonce .
8091	Setter returns an Option that sets the nonce .
8092	Age is an Option to set the age of the client
8093	Nonce returns a non - expired non - expired nonce .
8094	NonceValueFromRequest returns the nonceStatus from the request context
8095	StoreNonce stores the nonce associated with the request .
8096	PutFloat32Array adds an float32 to the buffer .
8097	PutFloat64Array adds a float64 array to the tuple .
8098	Do implements spy . Doer
8099	NewLease creates a new lease
8100	Delete deletes the task
8101	Post creates a new lease
8102	ReStock returns a new sku task for the currently available SKU
8103	Procurement returns a new task for the given SKU .
8104	InitFromHTTPRequest initializes the lease object
8105	Is returns true if the tuple is a valid hash .
8106	Offset returns the offset of the specified field .
8107	WriteTo implements io . WriterTo interface .
8108	PutTuple adds a tuple to the buffer .
8109	WriteString writes a string
8110	NotFound writes a 404 response .
8111	Run starts the agent .
8112	NewWaitGroup returns a new WaitGroup .
8113	Add is part of the WaitGroup interface .
8114	Wait waits for all outstanding requests to complete .
8115	Gzip is a wrapper around http . Handler .
8116	New returns a new InnkeeperClient
8117	Error writes a response with status code .
8118	Renderer returns a handler that renders the given RenderOptions .
8119	NewClient returns a new PDClient .
8120	Perform a task
8121	WriteImageToHTTP writes an image to http . ResponseWriter .
