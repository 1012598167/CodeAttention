0	NewSTM is part of the StmClient interface .
1	first returns the first revision in the set .
2	cmps returns a list of write sets with the given revision .
3	NewSTMRepeatable is the same as NewSTMRepeatable except it returns a TxnResponse .
4	NewSTMSerializable is a wrapper for NewSTMSerializable .
5	NewSTMReadCommitted is a wrapper for NewSTMReadCommitted .
6	NewCertPool creates a new x509 . CertPool
7	NewCert creates a new TLS certificate
8	Pause pauses the peer .
9	Resume resets the peer .
10	pick returns a channel that can be sent to the peer .
11	post sends a POST request to the server .
12	newTxnResp creates a new transaction .
13	applyCompare applies the compare interface to mvcc .
14	OpCompact creates a new CompactOp .
15	NewPriorityQueue returns a PriorityQueue
16	Enqueue adds an entry to the queue
17	NewLeaderStats returns a new LeaderStats
18	Succ adjusts the accuracy of the FollowerStats
19	Fail increments the failure count .
20	delete removes a watcher from the broadcasts list .
21	startStreamWriter starts a new streamWriter .
22	checkStreamSupport returns true if v is supported by this version
23	maybeUpdate updates the progress of the Progress
24	IsPaused returns true if the progress is paused
25	needSnapshotAbort returns true if progress is a snapshot
26	add adds an inflight to the buffer .
27	growBuf will grow the buffer if needed .
28	freeTo removes the inflight from the buffer
29	SaveDBFrom saves a snapshot from r to disk .
30	DBFilePath returns the path to the named snapshot .
31	Set implements the Value interface .
32	NewUniqueStringsValue creates a new UniqueStringsValue
33	UniqueStringsFromFlag returns the unique strings value for the given flag set
34	UniqueStringsMapFromFlag returns a map of unique strings to UniqueStringsValue
35	Percentiles returns the percentiles of a slice of ints .
36	VerifyBootstrap verifies the initial bootstrap configuration .
37	VerifyJoinExisting returns an error if the ClusterConfig already exists .
38	hasLocalMember checks if the local peer has a local member
39	advertiseMatchesCluster is used to advertise a set of peers
40	ReqTimeout returns the timeout for the server .
41	getStatus returns the current status of a raft node .
42	GetDefaultHost returns the default host .
43	getIfaceAddr returns the interface address for the given interface family .
44	getIfaceLink returns the interface associated with the given interface index .
45	ls command
46	printLs prints the list of nodes
47	rPrint prints the node
48	NewLeaseRenewerCommand returns a new cobra command for lease renewer
49	Read reads a snapshot from a file
50	GetCipherSuite returns the cipher suite for the given string
51	post sends the given data to the pipeline .
52	send adds a message to the raft cluster .
53	sendHeartbeat sends a heartbeat message to the raft log .
54	bcastAppend sends a batch of progress updates to the raft cluster .
55	bcastHeartbeat broadcasts a heartbeat to the raft cluster .
56	tickElection is used to tick the election loop .
57	tickHeartbeat is used to tick the heartbeat interval .
58	stepCandidate processes a proposal message
59	restore attempts to restore a snapshot from the raft snapshot . Returns true if the snapshot was successfully restored .
60	tendable returns true if the raft node is eligible to persist .
61	checkQuorumActive returns true if the current progress is active .
62	increaseUncommittedSize increases the uncommitted size .
63	reduceUncommittedSize reduces the number of uncommitted entries .
64	newPeriodic returns a new Periodic .
65	Pause sets the periodic state .
66	Resume resets the periodic state .
67	Lock locks the mutex .
68	NewLocker returns a new lock .
69	NewFIFOScheduler returns a fifo scheduler .
70	Schedule adds a new job to the queue .
71	Stop stops the fifo .
72	NewServer returns a new Server .
73	StartServe starts the grpc server
74	Stop stops the server
75	Transport is the main entry point for transport . Transport .
76	RegisterInterruptHandler registers an interrupt handler .
77	HandleInterrupts handles SIGINT SIGINT and SIGINT .
78	OpGet returns a Range operation .
79	OpDelete creates a delete operation .
80	OpPut creates a Put operation .
81	OpTxn creates a new transaction opn .
82	WithFromKey returns an OpOption that sets the key for the key .
83	withTop returns a list of op options for the given target .
84	Exist checks if dir exists
85	searchIndex returns the index starting at the given index .
86	isValidSeq returns true if the last sequence is valid .
87	NewListener creates a new net . Listener
88	cafiles returns the list of cafiles .
89	ServerConfig returns the TLS configuration for the server .
90	ClientConfig returns a tls . Config for the client configuration .
91	newTLSKeepaliveListener creates a new TLS keepalive listener .
92	applyV2Request is the implementation of applyV2 .
93	NewRoleCommand returns a cobra command for subcommands
94	roleAddCommandFunc handles a role add command
95	roleGetCommandFunc handles the role get command
96	Role grant permissions
97	roleRevokePermissionCommandFunc handles role revoke - permission command .
98	NewCluster creates a new cluster cluster .
99	NewClusterByConfig returns a new Cluster instance .
100	HTTPMembers returns a slice of HTTPMembers
101	waitLeader waits for all members to be in the cluster .
102	waitNoLeader waits for all members to be leader .
103	isMembersEqual returns true if membs are equal
104	listenGRPC starts listening on the socket
105	NewClientV3 creates a new gRPC client .
106	Clone returns a deep copy of the member .
107	Close closes the member .
108	Stop is part of the Member interface .
109	checkLeaderTransition checks if the current leader is transitioning from oldLead .
110	Restart restarts a member
111	Terminate terminates a member .
112	Metric returns the metric name for the given metric name
113	InjectPartition removes members from other .
114	RecoverPartition is part of the Member interface .
115	NewClusterV3 creates a new ClusterV3 .
116	ParseWithDefaults parses jwt options .
117	Parse parses the JWT options
118	Key returns the key .
119	fill fills the header fields .
120	add adds a new watcher to the list .
121	Watch implements the Watch interface .
122	newFileEncoder returns a new encoder .
123	purgeFile is used to purge a file
124	Set implements the Value interface .
125	NewStringsValue creates a new StringsValue
126	StringsFromFlag returns the value of a string slice if it exists
127	Cluster returns the cluster name .
128	NewPageWriter returns a new PageWriter
129	watch starts watching for changes .
130	notify adds the event to the event history .
131	clone returns a copy of this watcher .
132	isHidden returns true if keyPath is hidden
133	createEtcdLogFile creates an etcd log file
134	runEtcd starts the etcd server
135	stopEtcd stops the etcd command
136	handle_SIGIT_ETCDSA_DATA_TO_REVE_COMMAND_REMOVE_COMMAND_REMOVE_COMMAND_REMOVE_COMMAND_REMOVE_REMOVE_COMMAND_COMMUT_COMMAND_COMMAND_REMOVEIGIT_DATA and SIGINT .
137	LimitListener wraps l . Listener .
138	allowMethod checks if a method is allowed
139	NewWatchServer returns a new instance of WatchServer .
140	FiltersFromRequest converts a watch create request to mvcc .
141	newPipelineHandler returns a new http . Handler .
142	checkClusterCompatibilityFromHeader checks to see if the X - Server - Cluster - From header is valid
143	KeyExists compares the given key with the given version .
144	KeyMissing returns true if the key is missing
145	ValidateSecureEndpoints validates secure endpoints
146	putNewKV stores a new entry in the given KV .
147	newUniqueEphemeralKey returns a new ephemeral key prefix .
148	NewUpdateDirCommand handles the interaction between the cli flags and the action handler for update - directory
149	updatedirCommandFunc is used to handle an updatedir command
150	handleBackup handles the backup directory
151	saveDB is used to save a boltdb database .
152	NewWatchCommand returns a cobra command for watch
153	NewV3 returns a new VersionManager .
154	Save a v3 snapshot
155	Status returns the status of the snapshot
156	Restore restarts the etcd server
157	NewAuthStore returns an instance of AuthStore .
158	NewTokenProvider creates a new TokenProvider
159	MendPeer resumes the peer with the given ID .
160	removePeer removes a peer from the transport .
161	ActivePeers returns the number of active peers .
162	resolveTCPAddrDefault is used to resolve a TCP address
163	Resolve TCP addresses
164	urlsEqual compares two URLs .
165	URLStringsEqual compares two URLs .
166	NewLeaseCommand returns a new cobra command for lease subcommand
167	NewLeaseGrantCommand returns a new cobra command for leases
168	leaseGrantCommandFunc handles lease grant command
169	NewLeaseRevokeCommand returns a new cobra command for revoke
170	leaseRevokeCommandFunc handles a revoke request .
171	NewLeaseTimeToLiveCommand returns a new cobra . Command for testing
172	leaseTimeToLiveCommandFunc is the interface for leaseID .
173	NewLeaseListCommand returns a new cobra . Command for testing
174	leaseListCommandFunc is a wrapper for leaseListCommand
175	NewLeaseKeepAliveCommand returns a new cobra . Command for renew - keep - alives
176	leaseKeepAliveCommandFunc handles the keep - alive command
177	NewAlarmCommand returns a cobra command for alarms
178	alarmDisarmCommandFunc is a wrapper around alarmDisarmCommand .
179	alarmListCommandFunc handles alarm list command .
180	Flags returns flags for etcd
181	EmbedConfig returns a copy of the embed configuration .
182	PProfHandlers returns a map of HTTP handlers to handlers .
183	NewBackendQuota returns a new Quota based on the configuration .
184	NewClusterProxy returns a new ClusterServer .
185	NewHandler returns a new http . Handler .
186	TimeToLiveHTTP performs a time . TimeToLiveHTTP request .
187	newWatcherBatch returns a new watcherBatch with the given minRevision .
188	add adds a new watcher to the set .
189	contains returns true if the key is contained in the map .
190	delete removes a watcher from the list .
191	choose selects the maximum number of watchers and returns a new one .
192	watcherSetByKey returns a watcherSet that matches the given key .
193	Compare implements Comparable .
194	successor returns the successor node s successor .
195	updateMax updates the max of the node .
196	visit calls visit on the given IntervalNode .
197	Delete deletes an IntervalTree . Returns true if the interval was deleted .
198	Insert inserts a new value into the tree .
199	rotateLeft rotates the right left .
200	replaceParent replaces the parent of the interval node .
201	MaxHeight returns the maximum height of the interval tree .
202	Visit calls the VisvalTree for each interval in the interval .
203	find returns the last interval node in the interval tree .
204	Find returns the IntervalValue for the given Interval
205	Intersects implements the IntersectTree interface .
206	Contains returns true if the IntervalTree contains the given Interval .
207	Stab returns a slice of IntervalValues .
208	Union returns the union of the given IntervalTree .
209	NewExactReadCloser returns a ReadCloser that reads from rc .
210	NewElection creates a new election .
211	ResumeElection is used to resume an election .
212	Propclaim is used to claim the given value .
213	Resign resets the current leader .
214	Leader returns the current election .
215	Observe returns a channel that can be used to watch the election .
216	check checks if r is available .
217	NewExecWatchCommand defines the exec - watch command
218	execWatchCommandFunc executes a watch command and returns a watcher .
219	NewListener creates a new TLS listener .
220	NewRoundTripper creates a new RoundTripper .
221	createPostRequest creates a new http . Request
222	checkPostResponse returns error if the response is invalid .
223	serverVersion returns the server - version .
224	checkVersionCompatibility returns the local version and local version .
225	setPeerURLsHeader sets X - PeerURLs header
226	addRemoteFromRequest adds remote peers to the transport .
227	NewKeysAPIWithPrefix creates a new KeysAPI with the given prefix .
228	TTTLDuration returns the TTL of the node .
229	SetPflagsFromEnv adds flags to the given FlagSet .
230	FlagToEnv converts a prefix to a string .
231	extracts a string with prelude pre and suf .
232	passConfChange returns true iff the entry is a change .
233	printInternalRaftRequest prints an InternalRaftRequest .
234	listEntriesType prints a list of entrydecoder entries
235	newLog creates a new raftLog .
236	newLogWithSize creates a new raftLog with the given storage .
237	findConflict returns the index of an entry in the log .
238	nextEnts returns the next pending entries .
239	allEntries returns all entries in the log .
240	slice returns a slice of entries in the log .
241	NewSession creates a new session
242	Close the session
243	WithTTL sets the TTL for the session
244	WithLease sets the lease ID
245	addRequest adds a new message to the pending index .
246	recvAck returns the number of acks .
247	advance advances the pendingReadIndexQueue .
248	lastPendingRequestCtx returns the last processed request context .
249	Start starts the etcd server
250	start initializes the etcd server
251	Process processes a raft message
252	ReportSnapshot implements the EtcdServer interface .
253	MoveLeader is used to move leadership to a new leader
254	TransferLeadership removes leadership from etcd .
255	configure sends a config change to the raft cluster
256	sync sends a SYNC request to the server .
257	publish publishes the local member attributes to the cluster
258	applyEntryNormal is used to apply an entry to the raft server .
259	applyConfChange applies the given configuration change to the raft cluster .
260	monitorVersions monitors the etcd cluster version .
261	goAttach runs f on the server .
262	NewRoundrobinBalanced creates a picker .
263	Pick returns the next available subConn .
264	NewTLSListener creates a new TLS listener .
265	acceptLoop accepts TLS connections .
266	SetEndpoints sets the endpoints for this group .
267	Target returns the target name .
268	Target returns the URL for the given endpoint
269	Build builds a resolver . Resolver .
270	Handle handles requests
271	NewElectionCommand returns a new cobra command for election
272	nodeToMember converts a NodeExtern to a Member
273	NewTmpBackend returns a temporary file with the given batch interval .
274	newRevision returns a new revision
275	Run starts the auto - revision .
276	Pause marks the revision as paused .
277	Resume resets the revision .
278	votes message type
279	DescribeMessage returns a string representation of a message .
280	DescribeEntry returns the entry s description .
281	DescribeEntries returns a string representation of a slice of entries .
282	SetLogger sets gRPC logger .
283	GetLogger returns the current logger
284	maybeFirstIndex returns the index of the first snapshot if present .
285	maybeLastIndex returns the index of the last entry .
286	maybeTerm returns the term for the given index .
287	swapEntriesArray returns a new slice of entries .
288	SaveSnap saves a snapshot to the storage .
289	New returns a new instance of Client .
290	NewCtxClient returns a new Client using the provided context .
291	NewFromURL creates a new Client instance .
292	Close closes the client
293	Endpoints returns the list of known endpoints .
294	SetEndpoints sets the endpoints for the cluster .
295	Sync syncs all members of the cluster
296	dialSetupOpts returns gRPC dial options .
297	Dial creates a grpc . ClientConn using the given endpoint
298	dialWithBalancer creates a grpc . ClientConn using the given endpoint .
299	dial opens a connection to the target server .
300	WithRequireLeader adds the metadata to the request context .
301	roundRobinQuorumBackoff returns a backoffFunc that invokes the given jitter function .
302	isHaltErr returns true if ctx is a halt error .
303	NewLease returns a lease with the given prefix
304	IsCreate returns true if event is create
305	Err is part of the WatchResponse interface .
306	IsProgressNotify returns true if the WatchResponse is a progress notification .
307	RequestProgress is part of the watcher interface .
308	nextResume returns the next resuming stream if there is none .
309	dispatchEvent takes a watchResponse and dispatches it to the caller .
310	broadcastResponse sends a watchResponse to all subscribers .
311	unicastResponse sends the response to the receiving watcher and returns true if the response was successfully delivered .
312	joinSubstreams is used to join all sub - subsubs .
313	toPB converts a watch request to a protobuf Message .
314	toPB converts the progress request to a pb . WatchRequest .
315	Contains returns true if the given value is in the set .
316	ContainsAll returns true if the set contains all of the given strings .
317	Equals compares two sets .
318	Values returns the set s values .
319	Copy returns a copy of this unsafe set .
320	Sub returns a copy of this set
321	v2MembersURL returns a url for v2 members
322	NewMigrateCommand creates a new mvcc command
323	publishEntries publishes the given entries to the raft node .
324	openWAL opens the WAL for the raft node .
325	replayWAL is used to replay the WAL .
326	stop is used to stop the raft node .
327	NewWatchCommand returns a new cobra command for watch command
328	InitialState is part of the Storage interface .
329	SetHardState is part of the Storage interface .
330	Entries returns the entries for the given range .
331	Term returns the term for the given index .
332	LastIndex returns the last index .
333	FirstIndex returns the first index .
334	Snapshot returns the current snapshot .
335	ApplySnapshot applies the snapshot to the storage .
336	Compact implements Storage . Compact .
337	unachable marks the given URL as unreachable .
338	NewEndpointCommand returns a cobra command for Endpoint
339	epHealthCommandFunc is a wrapper for ephemeral endpoint
340	NewElectCommand returns a cobra command for Elect
341	NewDefragCommand returns a new cobra command for defragment
342	RegisterBuilder registers a new balancer .
343	Build builds a new balancer .
344	recordTransition updates the current state of the given state .
345	doSerialize implements the EtcdServer interface .
346	send sends the response to the watcher .
347	post sends a response to the watcher .
348	OriginAllowed checks if origin is allowed
349	IsHostWhitelisted returns true if the host whitelist is whitelisted .
350	Valids returns a sorted list of valids .
351	NewSelectiveStringsValue creates a new SelectiveStringsValue .
352	NewKV returns a kv3 prefix
353	NewURLsValue creates a new URLsValue
354	URLsFromFlag returns a slice of URLs from a flagset .
355	servePeers is used to serve peers
356	NewStore returns a new store .
357	appendMarkTombstone appends a mark to b .
358	IsDirWriteable checks if dir is writable
359	TouchDirAll is a wrapper for MkdirAll
360	CreateDirAll creates a directory in the given directory .
361	ZeroToEnd sets the end of the file .
362	Open opens the file pipeline .
363	NewRaftLoggerFromZapCore creates a raft . Logger from a zapcore . Core .
364	NewConfig loads a YAML configuration from a filepath
365	RegisterElectionHandler registers the http handlers for serviceElection to mux . The handlers forward requests to the grpc endpoint over conn .
366	UpdateCapability updates the capabilities for the given version .
367	NewLockCommand returns a new cobra command for locking
368	tick ticks the raft node .
369	advanceTicks advances the raft node .
370	NewAuthCommand returns a cobra command for auth
371	authEnableCommandFunc handles auth enable command
372	authDisableCommandFunc is the handler for authDisable command
373	RetryKVClient returns a new KV client .
374	RetryLeaseClient returns a LeaseClient based on the given client .
375	RetryClusterClient returns a ClusterClient that wraps the given Client .
376	RetryMaintenanceClient is part of the MaintenanceClient interface .
377	RetryAuthClient returns an auth client based on the given client .
378	NewSetDirCommand creates a new setdir command
379	Enter is part of the Barrier interface .
380	Leave implements the Delete interface .
381	HandleBasic handles basic basic requests
382	WriteError writes an error to the client .
383	MemberByName returns a copy of the member with the given name .
384	PeerURLs returns a list of known peers
385	ValidateConfigurationChange validates a configuration change .
386	AddMember adds a new member to the cluster
387	RemoveMember removes a member from the cluster .
388	ValidateClusterAndAssignIDs validates the cluster and updates the local member list
389	Keep returns a map that contains all of the items in the index .
390	closeRequireLeader closes the keepalive leader .
391	resetRecv is used to reset the lease keepalive
392	recvKeepAlive is called when a new LeaseKeepAliveResponse is received .
393	deadlineLoop keeps keep alive and closes keepAlives .
394	sendKeepAliveLoop sends a keep - alive keepalive request .
395	NewKV creates a new lease KV .
396	revoke revokes a lease .
397	LeaseValue produces cmpulative value .
398	ValueBytes returns the value of Compare_Value .
399	WithRange sets the end of the query .
400	WithPrefix overrides the CmpKey .
401	mustInt64 panics if val is not a int64 .
402	mustInt64orLeaseID returns the value as int64 or panics .
403	Next returns the next update or an error .
404	getJournalWriteSyncer returns a new WriteSyncer .
405	newKV creates a new node
406	newDir creates a new node .
407	Read returns the value for the node .
408	Write writes the value to the node .
409	List returns a list of all nodes .
410	GetChild returns a child by name .
411	Add a child node
412	Remove removes the node from the tree .
413	Compare returns true if the node matches the previous value .
414	Clone returns a copy of the node .
415	isConnectedToQuorumSince returns true if the connection is connected to the given time .
416	isConnectedSince returns true if the given time is connected to the given transport .
417	numConnectedSince returns the number of connections connected to this transport .
418	longestConnected returns the longest matching ID .
419	isTornEntry checks if data is a TornEntry .
420	StartMockServersOnNetwork starts a mockServers on the specified network .
421	StartAt starts the server at index .
422	StopAt stops the server at index .
423	Stop stops all servers .
424	NewCheckCommand returns a cobra command for the etcd cluster
425	NewCheckPerfCommand returns a cobra command for testing
426	NewCheckDatascaleCommand returns a cobra . Command for testing
427	NewGetCommand creates a new cobra . Command for get - command
428	NewGetCommand creates a new cli . Command
429	PickPeerURL picks random peer URL
430	HandleMetricsHealth handles prometheus metrics
431	NewRemoveCommand creates a new cli . Command .
432	rmCommandFunc is a wrapper for rm command
433	checkIntervals returns a map of IntervalTree errors .
434	ReportEventReceived reports the number of events received .
435	RegisterKVHandler registers the http handlers for service KV RPC to mux . The handlers forward requests to the grpc endpoint over conn .
436	RegisterWatchHandler registers the http handlers for serviceWatch to mux . The handlers forward requests to the grpc endpoint over conn .
437	RegisterLeaseHandler registers the http handlers for service Lease to mux . The handlers forward requests to the grpc endpoint over conn .
438	RegisterClusterHandler registers the http handlers for service Cluster to mux . The handlers forward requests to the grpc endpoint over conn .
439	RegisterMaintenanceHandler registers the http handlers for serviceMaintenance to mux . The handlers forward requests to the grpc endpoint over conn .
440	RegisterAuthHandler registers the http handlers for service Auth to mux . The handlers forward requests to the grpc endpoint over conn .
441	startEtcd starts a new ETCD .
442	identifyDataDirOrDie returns a dirType for the given directory .
443	openLast opens the last write for the last WAL .
444	gotLeader is called when we get a leader .
445	lostNotify returns a channel that will be closed when the leader is lost .
446	newGRPCProxyCommand returns a cobra command for grpc - proxy subcommand
447	NewMemberCommand returns a cobra command for member subcommands
448	NewMemberAddCommand returns a new cobra command for a member
449	NewMemberRemoveCommand returns a new cobra command for a member
450	NewMemberUpdateCommand returns a new cobra command for update
451	NewMemberListCommand returns a cobra command for a memberlist command
452	memberAddCommandFunc is a wrapper around MemberAddCommand .
453	memberRemoveCommandFunc handles a member remove command
454	memberUpdateCommandFunc handles a member update command
455	memberListCommandFunc is a wrapper for MemberListCommand .
456	Open opens the WAL .
457	OpenForRead opens the WAL for the given snapshot .
458	Verify checks if the given walDir is valid .
459	Close closes the WAL .
460	notify sends an event to the eventChan . Returns true if the event was updated .
461	Remove stops the watcher .
462	mkPathDepth creates a path for nodePath
463	mkV2Node creates a NodeExtern .
464	prevKeyFromPuts returns the prevKvv for the previous transaction
465	NewWeightedReport returns a new Report .
466	NewURLsMapFromStringMap creates a new URLsMap from a string map
467	String returns a string representation of the URLsMap .
468	URLs returns a sorted list of urls .
469	parse converts a string to a map .
470	NewClientHandler returns a new instance of the http . Handler interface .
471	writeKeyEvent writes a key event to the response writer .
472	writeKeyError writes the error to the response writer .
473	getUint64 get uint64 from form data
474	getBool gets a bool from the form data
475	waitDeletes waits for deletes to complete .
476	AddOutputPaths is defined on the Config interface .
477	NewConfig returns a new Config with default values .
478	PeerURLsMapAndToken returns the URLMap and token for the peer
479	GetDNSClusterNames returns a list of cluster names
480	checkBindURLs returns an error if any of the given URLs are not found .
481	GetCluster returns a list of cluster names
482	GetClient returns a client for a given service
483	GetSRVService returns the SRV service name
484	ReadDir returns a list of all files in the given directory .
485	compact compacts the given rev .
486	defrag deletes an ephemeral endpoint
487	NewUserCommand returns a cobra command for user subcommands
488	userAddCommandFunc adds a user add command
489	userGetCommandFunc handles the user get command
490	userChangePasswordCommandFunc handles user change password .
491	addEvent adds an event to the queue
492	scan returns the next item in the queue .
493	clone returns a deep copy of the EventHistory .
494	openSnapshotBackend opens a snapshot of a snapshot .
495	openBackend opens a new etcd backend .
496	recoverSnapshotBackend attempts to recover a snapshot from a snapshot .
497	NewUpdateCommand defines the cli update command
498	updateCommandFunc is a wrapper for updateCommand .
499	frontAndBack returns the front and back of the front of the queue .
500	Insert adds a new RequestStats to the queue .
501	Rate returns the rate of the queue .
502	Clear clears the queue .
503	UniqueStrings returns n random strings
504	RandomStrings returns n random strings
505	IsKeyNotFound returns true if the error is a key not found error code
506	IsRoleNotFound returns true if the error is a role not found error
507	IsUserNotFound returns true if the error is a user not found error
508	JoinCluster joins a cluster
509	GetCluster returns the current cluster
510	newProxyFunc returns a new proxy function .
511	isSafeRetry returns true if err is safe to call this function .
512	withRetryPolicy is used to set the retry policy
513	withAuthRetry overrides the default retry option
514	withMax sets the maximum number of retries .
515	withBackoff returns a retry option that sets the backoff function .
516	RecvAppendReq implements the ServerStatsListener interface .
517	SendAppendReq tracks the number of outstanding requests .
518	merge adds the bucket to bb .
519	deleteRevKey deletes the given key .
520	isMemberBootstrapped checks if a member is bootstrapped
521	GetClusterFromRemotePeers returns a raft cluster from remote peers
522	getClusterFromRemotePeers retrieves a raft cluster from remote peers
523	getRemotePeerURLs returns a list of remote peers
524	getVersions returns the version information for the raft cluster .
525	determineClusterVersion determines the version of the cluster .
526	getVersion returns the version information for the given member
527	NewTimeoutDetector creates a new TimeoutDetector .
528	Reset resets the timer .
529	Observe implements the Monitor interface .
530	NewPeerHandler returns a new http . Handler
531	put adds a new entry to the key index .
532	tombstone adds a tombstone to the key index .
533	get returns the revision for the given index .
534	since returns a slice of revisions for the given key .
535	keep removes the generation at the given index .
536	findGeneration returns the generation for the given rev .
537	cancelWatcher cancels a watcher .
538	syncWatchersLoop runs the watcher and periodically updates the watcher .
539	syncVictimsLoop runs until all victims are removed .
540	moveVictims moves all victims in the store to a new set of victims .
541	kvsToEvents converts vals to mvccs .
542	notify sends notifications to the watcher .
543	isOpFuncCalled returns true if the operation is in the passed opts
544	UnsafePut is part of the interface .
545	UnsafeSeqPut calls unsafe . UnsafeSeqPut .
546	UnsafeRange is part of the interface .
547	UnsafeDelete removes a key from the batch .
548	UnsafeForEach is part of the interface .
549	Commit commits the transaction .
550	CommitAndStop commits the transaction and commits the transaction .
551	Renew implements Lease .
552	Attach implements the Lease interface .
553	revokes expired leases .
554	checkpointScheduledLeases is used to periodically update the scheduled checkpoints .
555	expireExists checks if the lease is expired and if it has expired .
556	findExpiredLeases returns a list of expired leases .
557	refresh refreshes the lease .
558	fore forever sets the lease to expire .
559	Keys returns the keys in the lease .
560	Remaining returns the duration of the lease .
561	NewCompactionCommand returns a cobra command for compaction
562	compactionCommandFunc is a wrapper for compactionCommand .
563	NewPutCommand creates a new cobra command
564	putCommandFunc is a wrapper for Put .
565	NewHandler returns a new http . Handler
566	NewReadonlyHandler returns a new http . HandlerFunc
567	NewSetCommand creates a new set command
568	setCommandFunc is a wrapper for SetCommand .
569	waitOnLastRev waits for the last revision to be deleted .
570	GetDefaultInterfaces returns a map with default host names .
571	NewSnapshotCommand returns a cobra command for snapshot subcommands
572	NewMoveLeaderCommand returns a new cobra command for move - leader command
573	transferLeadershipCommandFunc takes a command and attempts to move the leader to the target .
574	OpenDir opens a file named by path .
575	NewRemoveDirCommand returns a new cli rm command
576	rmdirCommandFunc is a wrapper for rm command .
577	NewDelCommand returns a new cobra command for delete
578	delCommandFunc is a wrapper for Delete
579	NewExpect creates a new ExpectProcess .
580	NewExpectWithEnv creates a new ExpectProcess
581	ExpectFunc is part of the ExpectProcess interface .
582	Expect returns true if the string matches the given string .
583	LineCount returns the current line count
584	Signal sends a signal to the host
585	keyFunc converts RangeRequest to a string .
586	Add adds a new range to the cache .
587	Get retrieves a range from the cache
588	Invalidate invalidates the cache .
589	Compact resets the cache .
590	NewUniqueURLsWithExceptions returns a new UniqueURLs instance
591	UniqueURLsFromFlag returns the unique URLs for the given flag set
592	UniqueURLsMapFromFlag returns a map of unique urls flag names to values
593	Hold locks the barrier
594	Release removes the barrier
595	Wait waits for the barrier to finish .
596	NewLockRacerCommand returns a new cobra command for LockRacer .
597	EmitTimeout returns the timeout for the member election .
598	DialEtcdGRPCServer connects to an etcd server
599	CreateEtcdClientConfig creates an etcd client configuration .
600	CreateEtcdClient creates a new etcd client
601	CheckCompact returns an error if the member is not compacted .
602	Defrag defragment
603	RevHash returns the revision number
604	Rev returns the revision of the member
605	Compact implements the Etcd interface .
606	IsLeader checks if the member is a leader
607	WriteHealthKey writes a key to etcd
608	SaveSnapshot saves the snapshot
609	RestoreSnapshot is used to restore a snapshot
610	NewWatcher creates a new watcher
611	NewRawNode creates a new RawNode .
612	Campaign is used to perform a campaign
613	Propose implements the Node interface .
614	ProposeConfChange is part of the Node interface .
615	ApplyConfChange applies the given ConfChange to the node .
616	Step is part of the raft . Node interface .
617	Ready returns a new ready to be ready for use .
618	WithProgress sets the progress for the node .
619	ReportUnreachable is part of the raft . Node interface .
620	ReportSnapshot is part of the raft . Node interface .
621	TransferLeader is part of the raft . Node interface .
622	ReadIndex is part of the raft . Node interface .
623	printcURL prints the curl command to stderr .
624	StartNode starts a new node
625	RestartNode returns a new Raft node .
626	Tick is called whenever the node is running .
627	MustSync returns true if stamp is equal to prevst .
628	NewGRPC17Health returns a new instance of GRPC17Health
629	NeedUpdate returns true if this node needs to be updated
630	dflate a syscall signal
631	New returns a new Store
632	Index returns the current index .
633	Get is part of the Store interface .
634	Create is part of the Store interface .
635	Set is part of the Store interface .
636	getCompareFailCause returns a description of CompareFailCause .
637	Delete is used to delete a node
638	walk traverses the node tree rooted at the given path .
639	internalGet is used to get a single node
640	DeleteExpiredKeys removes expired keys from the store .
641	checkDir checks if a directory exists in the store .
642	Save persists the store to disk .
643	Recovery recovers from the store .
644	Next returns the next unique id .
645	NewMakeMirrorCommand returns a cobra command for mirror - mirror command
646	NewZapCoreLoggerBuilder creates a new instance of zap core logger .
647	NewSyncer creates a new syncer
648	DropPort drops a port
649	Set latency
650	Remove latency
651	NewTxnCommand returns a new cobra command for Txn command
652	txnCommandFunc is a wrapper for txn command
653	New returns a new compactor .
654	printResponseKey prints the response key
655	RegisterLockHandler registers the http handlers for service Lock to mux . The handlers forward requests to the grpc endpoint over conn .
656	grpcHandlerFunc wraps gRPC handler
657	addCORSHeader adds CORS headers
658	fallback is used to fallback a set of ops .
659	IDFromString returns ID from a string .
660	release closes the file .
661	EncodedSize returns the size of the ValueStruct .
662	Decode deserializes a ValueStruct from a byte slice .
663	NewMergeIterator returns a new MergeIterator .
664	initHeap initializes the heap .
665	Valid returns true if the MergeIterator is valid .
666	Key returns the current key .
667	Value returns the value of this iterator .
668	Next moves the iterator to the next key .
669	Seek seeks to the given key .
670	Close closes all iterators .
671	Encode encodes the ValuePointer to b .
672	Decode decodes the header from a byte slice .
673	encodeEntry encodes an entry into buf .
674	SetEntry stores an entry in the batch .
675	Set adds a new entry to the batch .
676	SetWithTTL adds a new entry to the batch .
677	Delete removes a key from the batch .
678	commit commits the transaction to the database .
679	Flush flushes any pending writes to the database .
680	Error returns the error of the batch .
681	getMemTables returns a copy of the memory tables .
682	writeRequests writes data to vlog .
683	ensureRoomForWrite ensures that there is room to be room .
684	writeLevel0Table writes the table to the given writer .
685	handleFlushTask handles a flush task .
686	flushMemtable flushes the memory table to disk .
687	calculates the size of the file .
688	Size returns the size of the database .
689	Next increments the next value .
690	Release releases the sequence .
691	KeySplits returns a list of key splits .
692	Flatten compacts all tables in the database .
693	Mmap maps a file descriptor to a file .
694	madvise is a wrapper around MADvise .
695	setDiscardTs is used to update the TTL of the cluster .
696	hasConflict returns true if there is a conflict in the database .
697	Set adds a new entry to the store .
698	SetWithMeta adds a new entry to the transaction .
699	Delete is part of the Indexer interface .
700	Get retrieves an item from the database .
701	CommitWith commits all writes to the transaction .
702	View is part of the DB interface .
703	Update is part of the DB interface .
704	Seek moves the iterator to the next key .
705	SeekToLast moves the iterator to the next iterator .
706	parseKV populates the next block .
707	NewIterator returns a new Iterator .
708	seekFrom seeks to the given key from the iterator .
709	seekForPrev moves the iterator to the first key .
710	Value returns the current value .
711	Seek moves the iterator to the first key .
712	NewConcatIterator returns a concatenated iterator .
713	Valid returns true if the iteration is valid .
714	Next moves the cursor to the next position .
715	Close closes the iterator .
716	OpenExistingFile opens a file named by filename .
717	Copy returns a copy of a .
718	KeyWithTs encodes a key to a byte slice .
719	ParseTs returns the timestamp from the byte array .
720	ParseKey returns the length of the byte slice .
721	SameKey compares two keys .
722	FixedDuration formats a fixed duration .
723	NewCloser creates a new Closer with the given initial value .
724	NewThrottle returns a Throttle with the given max .
725	Do implements the Throttle interface .
726	Done implements the Throttle interface .
727	Finish finishes the Throttle .
728	SetDiscardTs sets the timestamp for the DB .
729	openReadOnly opens the file at the given path .
730	iterate iterates over the log entry .
731	sortedFids returns a sorted list of filenames .
732	write writes data to v .
733	populateDiscardStats populates the discard stats for the given value .
734	Backup is part of the Backup interface .
735	ToList converts an iterator to a list
736	produceRanges generates a range of key ranges .
737	produceKVs produces a batch of KVVs .
738	Organization implements Streamer interface
739	NewStream is part of the DB interface .
740	NewStreamAt is part of the DB interface .
741	DecrRef decrements the ref count .
742	ParseFileID parses an ID from a file name .
743	PrintHistogram outputs histogram histograms .
744	newSizeHistogram creates a new size histogram .
745	buildHistogram builds a histogram histogram .
746	printHistogram prints histogram data
747	Init initializes the watermark .
748	Begin adds a new mark to the mark .
749	BeginMany implements MarkMarker .
750	Done marks the mark as done .
751	DoneMany marks the mark as done .
752	SetDoneUntil sets the watermark to true .
753	WaitForMark waits for a mark to be marked .
754	Encode encodes b into b .
755	Decode decodes the header from a byte slice .
756	NewTableBuilder creates a new table builder .
757	keyDiff returns the diff of the base key .
758	Add implements builder . Add .
759	blockIndex returns the block index for the block .
760	Finish returns the JSON representation of the block .
761	Errorf logs to an error level .
762	Infof logs to the logger .
763	DecrRef decrements the ref count .
764	NewSkiplist returns a new skiplist .
765	Put adds a new value to the slice .
766	Get returns the next key in the skiplist .
767	Key returns the current key .
768	Value returns the current value of the iterator .
769	Next sets the next element .
770	Prev moves the cursor to the previous value .
771	Seek moves the iterator to a target .
772	SeekForPrev seeks to the first element in the list .
773	NewUniIterator returns a new ui iterator
774	Next advances the iterator .
775	Seek seeks to the given key .
776	asChanges converts Manifest to ManifestChange .
777	rewrite rewrites the manifest file .
778	validate validates the table level .
779	acquireDirectoryLock acquires a lock on the given directory .
780	release releases the lock
781	AssertTruef asserts that b is true .
782	Wrapf wraps err with debug mode .
783	initTables initializes the table .
784	deleteTables deletes all tables .
785	tryAddLevel0Table tries to add a table to the table .
786	getTableForKey returns the table for the given key .
787	get returns the value for the given key .
788	over overlapping tables .
789	String returns a string representation of the Item
790	KeyCopy copies the item s key to dst .
791	ValueSize returns the size of the item .
792	NewKeyIterator is part of the Transaction interface .
793	Valid returns true if the iterator is valid .
794	ValidForPrefix returns true if the iterator has at least one key .
795	Close closes the iterator .
796	parseItem parses the item and adds it to the iterator .
797	Seek seeks to the given key .
798	GetMergeOperator returns a MergeOperator .
799	Get implements the MergeOperator interface .
800	compareAndAdd returns true if there is at least one level equal to this one .
801	newArena returns a new Arena .
802	putNode puts a node to the arena .
803	getNode returns the node at the given offset .
804	getKey returns the key at offset .
805	getVal returns the value at offset .
806	getNodeOffset returns the offset of the given node .
807	Called to initialize the bad logger
808	revertToManifest removes all tables from the manifest .
809	dropTree drops all tables in the tree .
810	dropPrefix is used to drop a prefix .
811	isLevel0Compactable returns true if the level is compactable .
812	doCompact runs compaction .
813	get returns the highest value for the given key .
814	seekTotal attempts to seek all accounts in badger .
815	findFirstInvalidTxn finds the first invalid transaction in the badger db .
816	Create creates a new snapshot sink
817	List returns all snapshots in the store .
818	Open opens an existing snapshot
819	Write implements the io . Writer interface
820	NewFileSnapshotStoreWithLogger creates a new FileSnapshotStore with the given base .
821	NewFileSnapshotStore creates a new FileSnapshotStore .
822	snapshotName returns the name of the snapshot .
823	Create creates a new snapshot sink for a given version .
824	List returns all snapshots in the store
825	getSnapshots returns all snapshots in the store
826	readMeta reads the metadata from the snapshot
827	Open opens a snapshot
828	ReapSnapshots removes all snapshots from the store .
829	Write writes data to the underlying file .
830	Close closes the sink
831	Cancel cancels the snapshot
832	finalize flushes the contents of the snapshot .
833	writeMeta writes the metadata file .
834	NewNetworkTransportWithConfig creates a new networkTransport using the given config .
835	setupStreamContext sets up the context for the transport
836	getStreamContext returns the context s context .
837	SetHeartbeatHandler sets the heartbeat handler for this transport .
838	CloseStreams closes all open streams .
839	Close the NetworkTransport
840	getPooledConn returns a connection pool for target address .
841	getConnFromAddressProvider returns a net . Conn for the given address
842	getConn opens a connection to target .
843	returnConn returns a connection to the pool
844	listen processes incoming connections .
845	handleConn is used to process a connection
846	handleCommand handles a single command
847	decodeResponse decodes the response from the conn and releases the response .
848	sendRPC sends an RPC message to the client .
849	newNetPipeline creates a new netPipeline .
850	decodeResponses is used to decode responses from the connection
851	AppendEntries is part of the NetworkPipeline interface .
852	Close closes the pipeline
853	NewObserver returns a new observer .
854	RegisterObserver registers an observer .
855	DeregisterObserver removes the observer from the raft .
856	Observation adds an observer to the list of observers .
857	NewInmemStore returns a new InmemStore .
858	FirstIndex returns the first index .
859	LastIndex returns the last index .
860	GetLog gets a log entry
861	StoreLog stores a log
862	StoreLogs stores logs
863	DeleteRange removes all entries from the store .
864	Set sets the value for the given key .
865	Get returns the value for the given key .
866	SetUint64 implements the Store interface .
867	GetUint64 gets uint64
868	NewLogCache creates a new LogCache
869	Connect connects to the given peer .
870	Disconnect disconnects from the transport
871	DisconnectAll closes all connected peers
872	Respond sends a response to the response channel .
873	Open is part of the SnapshotFuture interface .
874	vote updates the pending vote .
875	notifyAll sends a notification to all pending notifications .
876	cleanNotify removes a notifyFuture from the server .
877	LastContact is part of the ReplicationReplication interface .
878	setLastContact sets the last contact
879	replicate is used to replicate a given follower .
880	pipelineReplicate is used to perform a pipeline operation .
881	pipendSend sends an append to the raft cluster .
882	decodeDecode is used to decode a protobuf message
883	setupAppendEntries sets up a new appendEntries request .
884	setPreviousLog sets the previous log entry
885	setNewLogs adds new entries to the raft log .
886	appendStats updates metrics for a peer
887	handleStaleTerm is used to handle a stale term .
888	AppendEntries implements transport . Transport .
889	RequestVote implements transport . Transport .
890	InstallSnapshot is part of the Transport interface .
891	EncodePeer implements transport . Transport .
892	DecodePeer is part of the transport . Transport interface .
893	AppendEntries is part of the pipeline
894	ReadPeersJSON loads a set of peers from a JSON file .
895	ReadConfigJSON loads configuration from a JSON file .
896	NewTCPTransport returns a new NetworkTransport .
897	NewTCPTransportWithLogger creates a new TCPTransport using the specified address .
898	NewTCPTransportWithConfig creates a new TCPTransport using the given address .
899	Dial implements StreamLayer .
900	Accept implements the StreamLayer interface .
901	Addr returns the peer s address .
902	restoreSnapshot is used to restore a snapshot
903	BootstrapCluster is part of the raft . Raft interface .
904	Leader returns the current Raft leader .
905	Apply implements raft . Apply .
906	Barrier implements raft . Raft . Barrier .
907	VerifyLeader is part of the raft . Raft interface .
908	AddVoter is part of the Raft interface .
909	RemoveServer is used to remove a server from the raft cluster .
910	Shutdown will return a Future that will terminate the Raft future .
911	Snapshot returns a snapshot of the Raft snapshot .
912	Restore is part of the raft . Raft interface .
913	String returns a human - readable representation of the raft node
914	LastContact is part of the raft . Raft interface .
915	Logf logs to the standard logger .
916	containsNode returns true if the node contains the given raft node .
917	LeaderPlus returns a list of raft nodes that are greater than n .
918	WaitTilUptoDate implements the Cluster interface .
919	assertLogEntryEqual asserts that a LogEntry is equal to the given LogEntry .
920	runFSM is part of the raft . FSM interface .
921	Clone returns a copy of the configuration .
922	Clone returns a copy of the configuration .
923	hasVote returns true if the given ID is a vote .
924	checkConfiguration checks whether the configuration is valid .
925	nextConfiguration returns the next configuration for the given configuration change .
926	encodePeers encodes the given configuration into a byte slice .
927	decodePeers is used to decode multiple peers .
928	encodeConfiguration is used to encode a configuration .
929	decodeConfiguration decodes BSON Configuration .
930	goFunc runs f on the raft state .
931	getLastIndex returns the index of the last log index .
932	getLastEntry returns the last entry in the raft state .
933	checkRPCHeader returns ErrUnsupportedProteader if rpc is not supported .
934	setLeader sets the current leader .
935	requestConfigChange is used to request a configuration change .
936	run runs the raft Raft worker .
937	runFollower is used to run the raft leader
938	liveBootstrap starts a bootstrap cluster with the given configuration .
939	runCandidate runs the Candidate state .
940	runLeader is part of the raft . Raft interface .
941	startStopReplication starts a new follower .
942	configurationChangeChIfStable returns a channel change that can be used to change the configuration change .
943	verifyLeader is called when a verifyFuture is received .
944	checkLeaderLease returns how long the raft leader is reached .
945	restoreUserSnapshot is used to restore a snapshot
946	appendConfigurationEntry adds a new configuration entry to the raft cluster .
947	dispatchLogs is used to dispatch a batch of log messages
948	processLogs processes the logs at the given index .
949	processLog is used to process a log entry
950	processRPC processes an RPC call
951	processHeartbeat is called when a heartbeat is received
952	setLastContact sets last contact
953	persistVote is used to persist the last vote candidate .
954	setCurrentTerm stores the current term .
955	setState sets the raft state to the current leader .
956	getCommitIndex returns the current commit index .
957	recalculate recalculates the commitment index .
958	randomTimeout returns a channel that will be closed when the specified duration is reached .
959	generateUUID generates a new UUID
960	decodeMsgPack decodes the msgpack encoded in buf into out .
961	encodeMsgPack is used to encode a message
962	backoff calculates the backoff for a given round .
963	newApplySource returns a new applySource .
964	reset resets the rnd .
965	DefaultConfig returns the default configuration .
966	ValidateConfig validates the config .
967	runSnapshots is a long running routine that runs snapshotSnapshots .
968	shouldSnapshot returns true if the raft snapshot should be refreshed .
969	takeSnapshot is used to create a new snapshot
970	compactLogs compacts logs from Raft logs .
971	WebpackCheck checks if the webpack configuration is valid .
972	New creates a new template generator .
973	UnixSocket returns a http . Listener
974	Get returns an ErrorHandler for the given status
975	PanicHandler is a middleware that returns an error handler .
976	partialFeeder returns a partial feeder for a given name .
977	New creates a new engine .
978	WriteTo implements io . WriterTo .
979	Send sends a message to SMTP .
980	NewSMTPSender creates a new SMTPS sender
981	Param returns the value for the given key .
982	Set sets a value for a given key .
983	Value returns the value associated with the given key .
984	Redirect sends a redirect request
985	File returns a file .
986	MarshalJSON returns the JSON encoding of the default context .
987	New creates a Genny group .
988	New returns a new instance of App
989	DeprecrationsCheck checks if deprecations are deprecated .
990	List is not implemented .
991	Render renders the Render function .
992	Save the session
993	GetOnce get value from session
994	Set stores a value in the session
995	Clear removes all values from the session
996	getSession returns a session for the current session
997	New generates a gogen generator
998	New creates a new template generator
999	New creates a new template generator
1000	NewMessage returns a new Message instance .
1001	Reset resets the message .
1002	SetHeader sets a single header field .
1003	SetHeaders sets the headers of the message .
1004	SetAddressHeader sets the address field of the message .
1005	FormatAddress formats an address as a string .
1006	SetDateHeader sets a date header field .
1007	FormatDate formats a date .
1008	SetBody sets the body writer
1009	SetPartEncoding sets the encoding for the part .
1010	SetHeader sets the header for the given file
1011	SetCopyFunc sets the CopyFunc for the file .
1012	AttachReader adds a new file to the attachments file .
1013	Attach adds a file to the list of attachments .
1014	EmbedReader adds a new embedded file to the message .
1015	Embed adds a new embedded file to the message .
1016	ValidateTemplates ensures that all of the templates are valid .
1017	PlushValidator returns nil if plush is valid .
1018	Validate validates options
1019	LoadPlugins loads all registered plugins
1020	WriteHeader implements ResponseWriter .
1021	Write writes data to the ResponseWriter .
1022	Flush implements the http . Flusher interface .
1023	CloseNotify returns true when the ResponseWriter is closed .
1024	Run runs the updater .
1025	onlyRelevantFiles iterates over a file and calls fn on each of them .
1026	GoTemplateEngine parses a template and returns the result .
1027	GET adds a route to the router .
1028	Redirect adds a redirect to the router
1029	ANY adds a handler for ANY methods
1030	buildRouteName returns the name of the route
1031	New creates a new mail generator .
1032	NewDialer returns a new dialer .
1033	Dial connects to the SMTP server .
1034	DialAndSend implements the Dialer interface .
1035	Set sets the data for a given key .
1036	Add adds a new value to flash
1037	persist stores the flash data in the session
1038	newFlash returns a new flash instance
1039	Get get cookie by name
1040	Set sets a cookie
1041	SetWithExpirationTime sets a cookie with the given value .
1042	Delete a cookie
1043	NewMessage returns a new instance of Message
1044	NewFromData creates a new Message from Render data
1045	New returns a new message instance
1046	CloseNotify returns true when the listener is closed .
1047	NewEventSource returns a new EventSource .
1048	NewSimpleWithContext returns a new instance of Simple .
1049	Register registers a handler .
1050	Start starts the background worker
1051	Stop stops the Background Worker
1052	Perform performs a given job
1053	PerformAt applies the given job to the given time .
1054	PerformIn runs a job in the background .
1055	String returns a JSON representation of the RouteInfo .
1056	Alias registers a new alias for this route .
1057	Name sets the name of the route
1058	BuildPathHelper is a helper function for BuildPathHelperFunc .
1059	New creates a newci template
1060	New creates a Genny Generator .
1061	RegisterCustomDecoder registers a custom decoder
1062	Replace replaces the middleware in the middlewareStack .
1063	Routes returns all routes
1064	WrapBuffaloHandler wraps a http . Handler into a http . Handler
1065	PackageJSONCheck check package json . json .
1066	match returns true if the import path matches the data
1067	Send sends multiple messages to Sender .
1068	Last returns true if the last identifier is in the slice .
1069	Stop stops the app .
1070	DepEnsure ensures that dep is set
1071	String returns the BuildInfo as a string .
1072	New creates a Genny Generator .
1073	AddBody adds a body to the message .
1074	AddBodies adds the body to the message .
1075	AddAttachment adds a new attachment to the message .
1076	AddEmbedded adds an embedded stream to the message .
1077	SetHeader sets a header field .
1078	New creates a new template group .
1079	New returns a generated template generator .
1080	New generates a new configuration generator .
1081	Cleanup removes all files in the directory .
1082	MDTemplateEngine renders a markdown template
1083	Update updates a configmap
1084	FilterChanges takes a list of changes and returns a map of ConfigMapUpdateChanges
1085	getLabelsFromREMatches returns a list of labels from a match
1086	getLabelsFromGenericMatches returns the list of labels that match the pattern .
1087	Start starts the agent .
1088	Subscribe adds a new DeltaChan to the agent .
1089	Config returns the agent configuration .
1090	Set updates the agent config .
1091	IsMember checks if given user is a member
1092	ListIssueComments is part of the FakeClient interface .
1093	ListPullRequestComments is part of the interface .
1094	ListReviews is part of the FakeClient interface .
1095	ListIssueEvents is part of the FakeClient interface .
1096	CreateComment creates a new IssueComment
1097	CreateReview creates a new review
1098	CreateCommentReaction creates a new comment reaction
1099	CreateIssueReaction adds a new issue reaction .
1100	DeleteComment deletes an issue comment
1101	DeleteStaleComments deletes stale issue comments
1102	GetPullRequest returns pull request
1103	GetPullRequestChanges returns pull request changes
1104	GetRef is part of Interface .
1105	DeleteRef is part of Interface .
1106	GetSingleCommit gets a single commit
1107	CreateStatus adds a new status to the FakeClient .
1108	ListStatuses is part of the Interface interface .
1109	GetCombinedStatus is part of the FakeClient interface .
1110	GetRepoLabels returns a list of repository labels
1111	GetIssueLabels returns a list of issue labels
1112	AddLabel is part of Interface .
1113	RemoveLabel is part of Interface .
1114	FindIssues is a mock
1115	AssignIssue is part of the FakeClient interface .
1116	GetFile is part of Interface .
1117	ListTeams is a mock
1118	ListTeamMembers returns a list of team members
1119	IsCollaborator returns true if the user is a collaborator
1120	ListCollaborators lists all collaborators
1121	ClearMilestone clears the milestone
1122	SetMilestone sets the milestone number
1123	ListMilestones lists all milestones
1124	ListPRCommits is part of the FakeClient interface .
1125	GetRepoProjects returns a list of repositories .
1126	GetOrgProjects returns a list of github projects
1127	GetProjectColumns returns a list of ProjectColumns
1128	CreateProjectCard creates a new ProjectCard
1129	DeleteProjectCard deletes a project card .
1130	MoveProjectCard moves a ProjectCard to a fake client .
1131	CreateDatabaseClient creates a InfluxDB client
1132	Push sends a new point to InfluxDB
1133	NewProwJobWithAnnotation creates a new ProwJob .
1134	NewProwJob creates a new ProwJob .
1135	NewPresubmit creates a new ProwJob .
1136	PresubmitSpec creates a ProwJobSpec from the given config .
1137	PostsubmitSpec creates a ProwJobSpec from config .
1138	PeriodicSpec returns a ProwJobSpec for the given config .
1139	BatchSpec creates a ProwJobSpec from the given config .
1140	PartitionActive returns a channel of Prow jobs that have been processed .
1141	ProwJobFields returns fields for a ProwJob .
1142	ClusterToCtx returns the name of the cluster
1143	AddCommand adds a command to the plugin .
1144	Get takes name of the prowJob and returns the corresponding prowJob object and an error if there is any .
1145	Watch returns a watch . Interface that watches the requested prowJobs .
1146	Delete takes name of the prowJob and deletes it . Returns an error if one occurs .
1147	Patch applies the patch and returns the patched prowJob .
1148	MergeMethod returns the MergeMethod for the given org and repository .
1149	Query returns the query string .
1150	ForRepo returns true if the query matches the given repository .
1151	OrgExceptionsAndRepos returns a map of Exceptions and repos of the ExcludedRepos .
1152	QueryMap returns a new QueryMap .
1153	ForRepo returns all queries that belong to the given repository .
1154	Validate checks if the policy is valid
1155	GetTideContextPolicy parses the settings for the given context
1156	IsOptional returns true if the context is an optional context
1157	MissingRequiredContexts returns all required contexts
1158	ValidateWebhook is used to validate a webhook request
1159	HelpProvider returns a plugin help .
1160	HandleEvent handles an event .
1161	HandleAll is the handler for all repositories
1162	NewDryRunProwJobClient creates a new ProwProwJobClient
1163	Create creates a new ProwJob
1164	Update does nothing
1165	UpdateStatus does nothing
1166	Delete does nothing
1167	DeleteCollection is part of the DeleteProwJobClient interface .
1168	Get does nothing
1169	List retrieves ProwJobs .
1170	Watch implements Backend .
1171	Patch is part of the ProwJobClient interface .
1172	hasSynced returns true if the controller has been synced .
1173	Run runs the controller .
1174	runWorker processes a new workqueue .
1175	fromKey converts a key into its components .
1176	enqueueKey adds the given object to the work queue
1177	finalState returns true if the given status is valid .
1178	description returns the description for the condition .
1179	rrowJobStatus returns the ProwJobState for the pipeline run .
1180	pipelineMeta returns the metadata for a ProwJob .
1181	sourceURL returns the source URL for the given ProwJob .
1182	makePipelineGitResource returns a pipeline resource .
1183	makePipelineRun creates a new PipelineRun from a ProwJob .
1184	matchingConfigs returns the set of requirements that are not in the repository .
1185	SuggestCodeChange returns suggestions for the given problem .
1186	ServeExternalPluginHelp serves the plugin help .
1187	protect is called by the manager to protect a branch .
1188	UpdateOrg implements Protobuf .
1189	UpdateRepo implements Protobuf .
1190	UpdateBranch implements the Protector interface
1191	LoadConfig loads config from config
1192	Run the artifacts uploader
1193	Start starts the agent .
1194	reloadSecret reloads a secret file
1195	GetSecret returns the secret for the given secret path
1196	setSecret adds a secret value to the map
1197	GetTokenGenerator returns a function that returns token generator
1198	New returns an instance of HistoryHistory
1199	Record adds a new entry to the history
1200	ServeHTTP implements the http . Handler interface .
1201	Flush writes the action history for the given path
1202	AllRecords returns all the records in the history .
1203	MakeCommand returns a cobra command for GCS
1204	CheckFlags checks to see if the plugin is registered
1205	ReceiveComment returns the points for a given comment
1206	NewController creates a new controller
1207	Run starts the controller .
1208	runWorker runs the worker goroutine .
1209	New returns a new LocalGit instance
1210	MakeFakeRepo creates a fake repo in the given org
1211	AddCommit creates a new commit of the given files .
1212	CheckoutNewBranch performs a checkout of a new branch
1213	Checkout checkout a repository
1214	RevParse returns the revision of a git commit .
1215	CleanAll cleans all regions
1216	optionsForRepo returns the Lgtm for the given repository .
1217	getChangedFiles returns a list of filenames for this pull .
1218	loadReviewers takes a set of filenames and returns a set of reviewers .
1219	NewController creates a new controller
1220	SaveLastSync saves last sync time
1221	Sync syncs all changes in the database .
1222	AddFlags registers flags for the plugin
1223	CheckFlags checks the plugin s flags .
1224	ReceiveIssueEvent returns a new point for an issue event .
1225	Upload performs a batch of uploadFargets .
1226	FileUploadWithMetadata uploads a file with metadata
1227	DataUploadWithMetadata uploads data to object
1228	HasLabel returns true if the given issue has a given label .
1229	ImageTooBig checks if a given image is too large .
1230	LevelFromPermissions returns the permission level for the given permissions
1231	PermissionsFromLevel returns RepoPermission s permissions .
1232	newProwJobs returns a PrrowJobs
1233	GetApplicable returns a slice of Blockers that belong to the given repository .
1234	serve starts the jenkins server
1235	NewCountPlugin returns a cobra command for count events
1236	ReceiveComment is part of the Plugin interface .
1237	updateMetrics periodically updates disk usage metrics
1238	LogStatus logs the current status
1239	SyncConfig updates the resources in the database
1240	Metric returns a metric for the given type
1241	FormatURL formats a Dogfile
1242	runAndSkipJobs runs all requested jobs and skips them .
1243	Validate context overlap
1244	RunRequested builds a ProwJobClient .
1245	skipRequested skips all skipped jobs .
1246	Match returns true if the label event matches the specified label .
1247	Match returns true if the event name matches the specified label .
1248	AddFlags adds flags to the specified FlagSet .
1249	AddFlagsWithoutDefaultDefaultGitHubTokenPath adds default flags to the given flagset
1250	Validate validates GitHubOptions .
1251	GitClientWithLogFields returns a GitHub client using the provided credentials .
1252	GitClient returns an instance of GitHub client
1253	GitClient creates a new git client
1254	toMap converts a CoverageList to a map .
1255	findChanges returns a list of changes that need to be added to the given list
1256	CreateDatabase create database
1257	ShouldReport returns true if the ProwJob should report the report .
1258	Report implements Reporter . Report .
1259	MarkComplete marks the set as finished
1260	NewJobAgent returns a new instance of JobAgent
1261	Start starts the job agent .
1262	Jobs returns a slice of jobs
1263	ProwJobs returns a slice of pruning jobs .
1264	GetProwJob returns a ProwJob by ID .
1265	GetJobLog returns the logs for a job
1266	unionStrings returns the union of parent and child .
1267	Apply returns a copy of this policy .
1268	GetOrg returns an org with the given name
1269	GetRepo returns a repository by name
1270	GetBranch retrieves a branch by name
1271	GetPolicy returns a policy for the given branch
1272	UpdateIssueEvents updates issue events
1273	enqueueKey adds the given object to the workqueue .
1274	rrowJobStatus returns the ProwJobState for the given BuildStatus .
1275	buildEnv returns the environment variables for the given build job .
1276	defaultArguments adds default arguments to TemplateInstantiationSpec .
1277	defaultEnv adds default environment variables to the container
1278	injectSource injects the source code into b .
1279	injectedSteps returns the set of steps that should be injected into the container .
1280	determineTimeout determines the timeouts for the given BuildSpec
1281	makeBuild creates a new build from a ProwJob
1282	newLabels creates new labels
1283	newAssignees creates new assignees
1284	NewIssueComment creates a new sql . Comment from an issue comment .
1285	messageFilter returns a filter that filters messages that match the given time .
1286	IsSuccess returns true if the build is a success
1287	IsFailure returns true if the build failed .
1288	IsAborted returns true if the build is aborted
1289	ProwJobID returns the jrow job id of the action
1290	BuildID returns the buildID for the build action
1291	CrumbRequest initializes the crumb request field .
1292	measurements metrics .
1293	GetSkipMetrics is a wrapper for GetSkipMetrics .
1294	Get performs a GET request .
1295	request sends a request and returns the response .
1296	doRequest sends an HTTP request and returns the response .
1297	getJobName returns the job name for the given ProwJobSpec
1298	getBuildPath returns the path to the job spec
1299	GetJobInfo returns JobInfo from ProwJobSpec
1300	JobParameterized returns true if the JobInfo has any defined parameters .
1301	EnsureBuildableJob ensures that the given spec has already been created
1302	LaunchBuild launches a new build
1303	Build builds a ProwJob
1304	BuildFromSpec launches a new build from a given spec
1305	GetEnqueuedBuilds returns a map of enqueued builds from the server
1306	Abort aborts a build .
1307	PresubmitToJobSpec converts a presubmit job to a downward API job spec .
1308	PostsubmitToJobSpec creates a downwardapi . JobSpec from the given config .
1309	PeriodicToJobSpec converts periodic config to downwardapi . JobSpec .
1310	GetBuildID returns a build ID for a totURL
1311	listGcsObjects lists all GCS objects in a bucket .
1312	FindBaseProfile returns the base profile of the build
1313	sortBuilds returns a slice of ints from a string
1314	GetAll returns a list of all regions
1315	NewEventClient creates a new EventClient
1316	PruneComments removes all comments from the GitHub API .
1317	FormatResponse formats a human readable message
1318	FormatSimpleResponse returns a simple message friendly message .
1319	FormatICResponse formats an issue comment .
1320	FormatResponseRaw formats a response as a human readable string .
1321	Validate validates the options
1322	Encode encodes Options to JSON .
1323	RegisterIssueHandler registers an issue handler for the given name .
1324	RegisterIssueCommentHandler registers a new IssueCommentHandler for the given name .
1325	RegisterPullRequestHandler registers a new pull request handler
1326	RegisterStatusEventHandler registers a handler for status events .
1327	RegisterPushEventHandler registers a push event handler .
1328	RegisterReviewEventHandler registers a new review event handler .
1329	RegisterReviewCommentEventHandler registers a new review comment event handler .
1330	RegisterGenericCommentHandler registers a generic comment handler .
1331	NewAgent creates a new Agent
1332	InitializeCommentPruner initializes a new comment pruner .
1333	CommentPruner returns an instance of the comment pruner .
1334	Load config from a file
1335	Config returns the agent configuration .
1336	Set updates the agent configuration .
1337	Start loads the plugin config
1338	GenericCommentHandlers returns a map of GenericCommentHandlers .
1339	IssueHandlers returns a map of issueHandlers .
1340	IssueCommentHandlers returns a map of issue - comment handlers for the given repository .
1341	PullRequestHandlers returns a map of pull request handlers .
1342	ReviewEventHandlers returns a map of all registered plugins .
1343	ReviewCommentEventHandlers returns a map of track event handlers .
1344	StatusEventHandlers returns a map of status events to status events
1345	PushEventHandlers returns a map of push event handlers .
1346	EventsForPlugin returns the list of registered event handlers .
1347	insertLink inserts a new link to the startstore
1348	HelpProvider returns the plugin help for the specified branch .
1349	getPatch returns a patch for a given branch .
1350	releaseNoteFromParentPR returns a release - note release - note release - note release - note .
1351	ValidatePayload returns true if sig is a valid signature .
1352	PayloadSignature returns the SHA1 signature of the given payload .
1353	updateString returns true if the two strings are equal false otherwise .
1354	updateBool updates a bool value and panics if any .
1355	configureOrgMeta configures metadata for an organization
1356	configureTeamRepos configures teamRepos for given team name .
1357	ShouldReport reports whether the given ProwJob should report the report .
1358	Run uploads the provided spec to the GCS
1359	Format implements Logrus . Formatter .
1360	FindLabels finds all labels that match a regex
1361	AddFlags adds commands to the specified FlagSet .
1362	NewAgent creates a new Agent .
1363	HandleLogin returns an http . HandlerFunc that is used to authenticate the client .
1364	HandleLogout is a middleware that handles an authentication request .
1365	serverError is the default error handler .
1366	FromItem populates the ResourcesConfigObject from the given Item .
1367	GetItems returns the items in the collection
1368	SetItems sets the items in the ResourcesConfigCollection
1369	UnmarshalText implements the encoding . TextUnmarshaler interface for RepoPermissionLevel .
1370	IsAssignee returns true if the given login is an assignee .
1371	IsAuthor returns true if the given login string matches the given login .
1372	HasLabel returns true if the issue contains the given label
1373	Branch returns the branch name .
1374	truncate truncates the input .
1375	reportStatus updates the status of a ProwJob .
1376	parseIssueComments parses issue comments and returns a list of issue comments .
1377	createComment generates a comment for a report job .
1378	Config returns the lens configuration .
1379	Callback returns a callback that will be called on each image .
1380	FormatRecord formats a record
1381	Namespace returns a copy of the Client .
1382	NewFakeClient creates a new Client with default client
1383	NewClientInCluster returns a new client for the given namespace
1384	NewClientFromFile creates a new Client from a YAML file
1385	NewClient creates a new kube client
1386	ReplaceConfigMap replaces a ConfigMap with the given namespace
1387	GetDiskUsage returns the disk usage for the specified path
1388	GetATime returns the file at path
1389	RegisterLens registers a new viewer .
1390	GetLens returns a lens by name .
1391	LastNLines returns the last n lines of an artifact .
1392	NewClient returns a new Client
1393	WriteMessage sends a message to Slack
1394	MarkAndSweep deletes a natGateway
1395	ListAll returns all NATGateways
1396	NewClient returns a new Client .
1397	Acquire acquires a resource and returns it .
1398	AcquireWait acquires a resource and waits for it to finish .
1399	AcquireByState acquires a set of resources for a given state and returns them .
1400	ReleaseAll releases all resources
1401	ReleaseOne releases a resource
1402	UpdateAll updates all resources
1403	SyncAll syncs all resources in the cluster
1404	UpdateOne updates a single resource
1405	Metric returns a metric by rtype .
1406	HasResource returns true if there is a resource
1407	DialContext implements the Dialer interface .
1408	NewDashboardAgent creates a new DashboardAgent
1409	QueryPullRequests returns pull requests
1410	GetHeadContexts returns a list of all authorizations for a pull request .
1411	ConstructSearchQuery creates a search query for a user .
1412	NewBundledStates returns a new BundledStates object .
1413	ReceiveEvent implements the Bundler interface .
1414	manage returns the age of the states that have been loaded .
1415	Percentile returns the age for the given time .
1416	NewMetrics returns a new instance of Metrics
1417	NewDiskCache creates a new http . RoundTripper using the given delegate .
1418	NewMemCache returns a new http . RoundTripper .
1419	NewFromCache returns a new http . RoundTripper .
1420	ProwV1 retrieves the ProwV1Client
1421	Prow retrieves the ProwV1Client
1422	NewOwners returns an ownership of the given filenames .
1423	GetApprovers returns a map of app names to their authorities
1424	GetAllPotentialApprovers returns a list of approver names
1425	GetReverseMap returns an approver map with approver names .
1426	tempUnapprovedFiles returns a set of unapproved files
1427	KeepCoveringApprovers returns a set of apps that are present in the repo
1428	GetSuggestedApprovers returns a list of approved apps
1429	GetOwnersSet returns the set of owners owned by this owner
1430	GetShuffledApprovers returns a slice of random permutations
1431	String returns a string representation of an Approval
1432	IntersectSetsCase returns the intersection of two sets .
1433	NewApprovers creates an Approvers
1434	AddLGTMer adds a new license to the approval list .
1435	RemoveApprover removes an approver from the map
1436	AddAssignees adds an assignees to the approval list
1437	GetCurrentApproversSetCased returns the current Approvers set
1438	GetFilesApprovers returns a map of all the files in the current set
1439	NoIssueApprovers returns a map of Approval names to their approver
1440	UnapprovedFiles returns the set of approved files
1441	GetFiles returns the list of approved files
1442	IsApproved returns true if the Approved has been set
1443	ListApprovals returns a list of Approval objects
1444	ListNoIssueApprovals returns a list of Approval objects
1445	GenerateTemplate is used to generate a template
1446	writeTemplate writes a template to outputPath .
1447	Labels returns all of the configured labels
1448	LabelsForTarget returns a list of labels that match the provided target .
1449	LoadConfig loads configuration from a path
1450	loadLabels loads the labels for the given repository .
1451	kill is used to kill a repository .
1452	create creates a new update .
1453	classifyLabels takes a list of labels and returns a map of required labels .
1454	linkify returns a linkable link .
1455	NewCache creates a new cache
1456	KeyToPath returns the path to the given key .
1457	ensureDir ensures dir exists
1458	Put stores content in the cache
1459	Get loads the key from the cache
1460	Delete removes the key from the cache
1461	NewGCSArtifact creates a new GCSArtifact
1462	Size returns the size of the GCS Artifact
1463	ReadAll returns the contents of the artifact
1464	ReadTail returns the last n bytes of the artifact
1465	gzipped returns true if the artifact is gzipped
1466	optionsForRepo returns the welcome settings for the given repository .
1467	List lists all ProwJobs in the indexer .
1468	ProwJobs returns an object that can list and get ProwJobs .
1469	List lists all ProwJobs in the indexer for a given namespace .
1470	RunsAgainstAllBranch returns true if this branch has all the current branch .
1471	Intersects reports whether this br intersects this br .
1472	ShouldRun implements RegexpChangeMatcher .
1473	RunsAgainstChanges returns true if the given changes match the given changes .
1474	CouldRun returns true if this Postsubmit has been run .
1475	ShouldRun implements Postsubmit .
1476	CouldRun returns true if the given baseRef should be run .
1477	ShouldRun implements Presubmit .
1478	GetPresubmit returns the presubmit for the given repository
1479	SetPresubmits sets the Presubmits map
1480	SetPostsubmits sets the Postsubmits map
1481	AllPresubmits returns all Presubmits matching the given repositories .
1482	AllPostsubmits returns all the postsubmits of the job config
1483	AllPeriodics returns all periodic periodic periodic jobs .
1484	ClearCompiledRegexes clears all compiled regexps .
1485	Empty returns true if the configuration is empty .
1486	NewClient returns a new Client instance .
1487	ExpandAlias returns the name of the given alias .
1488	ExpandAliases expands any aliases in the repository aliases .
1489	ParseFullConfig parses YAML bytes and returns a FullConfig
1490	ParseSimpleConfig parses YAML bytes and returns a SimpleConfig
1491	decodeOwnersMdConfig decodes YAML config from path
1492	findOwnersForFile returns the owner name for the given file .
1493	FindApproverOwnersForFile returns the owner of the given file .
1494	FindReviewersOwnersForFile returns the name of the user owned by the given path .
1495	FindLabelsForFile returns the set of labels for a given file
1496	IsNoParentOwners returns true if the given path is no parent
1497	Ratio returns the ratio of the coverage .
1498	FromPayload deserializes into PeriodicProwJobEvent
1499	ToMessage converts PeriodicProwJobEvent to a pubsub message .
1500	UnmarshalText implements the encoding . TextUnmarshaler interface .
1501	compileApplicableBlockades compiles the blocked blockades into a list of blocked blocks
1502	calculateBlocks computes the summary of a pull request .
1503	MergeMultipleProfiles merges multiple profiles .
1504	AddFlags adds command - line flags to the given FlagSet .
1505	processNextItem processes the next item
1506	handleErr is called when an error occurs .
1507	AggregateFilter aggregates a set of filters into a single filter .
1508	FilterPresubmits returns a list of jobs that need to be run in a given filter .
1509	MakeCommand returns a cobra . Command for testing
1510	Push adds an issue event to the heap .
1511	Pop removes the last element from the heap
1512	NewFakeOpenPluginWrapper creates a new FakeOpenPluginWrapper
1513	ReceiveIssue is part of the Interface interface .
1514	Validate makes sure the options are valid
1515	Complete populates the options from the options
1516	Set sets the raw format
1517	ensure checks if a binary exists
1518	output runs the command and returns the output .
1519	projects returns a list of all projects in the project .
1520	selectProject returns a user s active project .
1521	createCluster creates a new cluster
1522	createContext creates a new GKE cluster
1523	contextConfig is used to setup the config loader
1524	selectContext is used to select a new context
1525	applyCreate runs the create command
1526	determineSkippedPresubmits returns a list of presubmits that should be skipped .
1527	Dispatch is used to receive new points from the database .
1528	CreateIssue creates a new issue .
1529	CreateStatus creates a new status for a repository .
1530	ForEachPR is part of the GitHub API .
1531	GetCollaborators returns a list of collaborators for an organization .
1532	GetCombinedStatus returns the status of a repository .
1533	GetIssues returns a list of issues for the given repository .
1534	GetRepoLabels returns a list of all labels for an issue .
1535	GetUser gets a user by login .
1536	checkConfigValidity checks if the config is valid
1537	createSystemdLogfile creates the journalctl for the given service .
1538	createFullSystemdLogfile creates a full systemd journalctl .
1539	createSystemdLogfiles creates logfiles for all systemd services .
1540	prepareLogfiles builds the logfiles for the node
1541	writeSuccessMarkerFile writes success marker file to GCS
1542	MakeCommand returns cobra command for junit
1543	warnDeprecated is called when a warning occurs .
1544	Describe returns a description of the RequireMatchingLabel .
1545	TriggerFor returns a trigger for an organization
1546	EnabledReposForPlugin returns a list of repositories for a given plugin
1547	EnabledReposForExternalPlugin returns a list of repositories for an external plugin
1548	SetDefaults sets defaults for the ConfigUpdater
1549	validatePlugins returns nil if all of the plugins are valid
1550	ShouldReport returns true if the ProwJob should report the status of a ProwJob .
1551	Run clones the given refs .
1552	PathForRefs returns the path for the given refs .
1553	gitCtxForRefs creates a new git context for the given refs .
1554	commandsForBaseRef returns the commands for the given refs .
1555	gitTimestampEnvs returns environment variables for the given timestamp
1556	gitRevParse returns the revision of the git commit
1557	commandsForPullRefs returns a list of commands for the given refs .
1558	ProduceCovList generates a coverage list from a set of profiles .
1559	popRandom pops random element from set
1560	Resolve the kubeconfig
1561	ProwJobClientset returns the RWJobClientset for the given namespace
1562	ProwJobClient returns a ProwJobClient for the given namespace
1563	InfrastructureClusterClient returns an instance of a Kubernetes client
1564	BuildClusterClients returns a set of kubernetes clients for a given namespace
1565	Age returns the age of the ActiveState
1566	ReceiveEvent returns an InactiveState that matches the given event name .
1567	ReceiveEvent returns an active state for the given event name and time
1568	Active returns true if all states are active .
1569	Age returns the age of all states .
1570	ReceiveEvent receives an event and returns the state of the MultiState
1571	ProwJobs returns a ProwJobInformer .
1572	ItemToResourcesConfig converts Item to ResourcesConfig
1573	Copy returns a copy of this TypeToResources
1574	MakeCommand creates a new cobra . Command for aggregate coverage
1575	incrementNumPendingJobs increments the number of pending jobs .
1576	setPreviousReportState updates the reporter state for the given reporter .
1577	SyncMetrics updates the metrics for the controller .
1578	DumpProfile writes a set of profiles to a writer .
1579	blocksEqual compares two profiles .
1580	NewProwJobInformer constructs a new informer for ProwJob type . Always prefer using an informer factory to get a shared informer instead of getting an independent one . This reduces memory footprint and number of connections to the server .
1581	NewFilteredProwJobInformer constructs a new informer for ProwJob type . Always prefer using an informer factory to get a shared informer instead of getting an independent one . This reduces memory footprint and number of connections to the server .
1582	New creates a new spymill .
1583	Lenses returns a list of all licenses that match .
1584	JobPath returns the path to the job .
1585	RunPath takes a path and returns a path
1586	ExtraLinks returns a slice of extra links .
1587	needDemux returns a list of plugins that need to be demuxed .
1588	demuxExternal dispatches events to external plugins .
1589	dispatch sends a POST request to the server .
1590	AddFlags adds flags for the plugin
1591	CheckFlags checks the flags of the plugin
1592	ReceiveIssueEvent is used to receive an issue event
1593	Load loads the config and returns a Config object .
1594	loadConfig loads the config from the given path and jobConfig .
1595	yamlToConfig unmarshals yaml into nc .
1596	ReadFileMaybeGZIP reads a GZIP file .
1597	finalizeJobConfig sets defaults for the job config
1598	validateComponentConfig makes sure all required fields are valid
1599	ConfigPath returns the default config path .
1600	ValidateController validates a Controller
1601	defaultJobBase is used to set defaults on the job .
1602	SetPresubmitRegexes sets the regexps regexes for all PresubmitRegexes
1603	setBrancherRegexes sets the regex for the brancher
1604	SetPostsubmitRegexes sets all PostsubmitRegexes
1605	Body returns the body of an artifact
1606	NewBoskosHandler returns a http . ServeMux handler .
1607	ErrorToStatus converts an error to http status code
1608	DumpProfile dumps a profile to stdout .
1609	LoadProfile loads profiles from stdin
1610	NewClient returns a new Client instance .
1611	SetCredentials sets the credentials for the client
1612	Checkout checkout a commit
1613	CheckoutNewBranch creates a new branch in the repository
1614	Merge merges the given commit and returns true if successful .
1615	CheckoutPullRequest performs a pull request on the remote repository
1616	Config runs a git config command .
1617	retryCmd runs the command and returns the combined output .
1618	LabelsAndAnnotationsForSpec returns a map of labels and annotations for the given spec .
1619	ProwJobToPod converts a ProwJob to a pod .
1620	CloneLogPath returns the path to the log file at the specified path .
1621	cloneEnv creates a clone of the given options
1622	sshVolume creates a new volume mount for a secret
1623	InjectEntrypoint injects an entrypoint into the container
1624	PlaceEntrypoint creates a new container entrypoint for a container
1625	kubeEnv returns a list of environment variables .
1626	Client returns a client for the Kubernetes API client
1627	handle handles an event .
1628	SendHook sends a hook to the given address .
1629	janitorClean runs the janitor on the given resource
1630	janitor runs the garbage collector .
1631	Run starts the pull server
1632	specToStarted takes a job spec and returns a gcs . Started . Started .
1633	Run runs the OpenShift cli .
1634	hasPRChanged returns true if the pull request has been changed .
1635	UpdateIssues retrieves latest issues from database
1636	handleReviewEvent handles a review event .
1637	findAssociatedIssue returns the number of unique issue in the given body
1638	optionsForRepo returns the Approve for the given repository .
1639	localOnlyMain is the middleware for testing .
1640	summarize sums the CoverageList .
1641	Subset returns a new CoverageList with the given prefix .
1642	ListDirectories returns all the directories in the coverage list
1643	readRequest reads the request body from r .
1644	handle is used to handle an HTTP request
1645	writeResponse writes the response to the writer .
1646	onlyUpdateStatus takes a status update and returns an admission response
1647	convertSuiteMeta converts a suite meta metadata into a resultstore .
1648	NewHealth returns a new Health instance
1649	ServeReady is the handler for ServeReady .
1650	NewController creates a new controller .
1651	newExpectedContext creates a new context with the given string .
1652	contextsToStrings converts contexts to strings .
1653	filterSubpools takes a raw map of sub - pools and returns a map of sub - pools .
1654	filterSubpool returns a copy of the subpool without removing any pull requests .
1655	poolPRMap returns a map of pull requests from a subpool
1656	failureContexts checks that all required contexts are missing
1657	Accumulate takes a set of pull requests and merges them into a list of successes and returns a list of successes that were successful .
1658	tryMerge runs the mergeFunc function .
1659	prChanges returns the changes for the given pull request .
1660	prune is used to prune the agent .
1661	DividePool divides a pool and returns a map of subpools .
1662	AggregateProfiles aggregates a set of profiles .
1663	countToBoolean converts a profile to a set .
1664	NewStorage creates a new storage layer
1665	AddResource adds a new resource to the storage .
1666	DeleteResource deletes a resource
1667	UpdateResource updates the resource .
1668	GetResource retrieves a resource from the storage .
1669	GetResources returns a list of all the resources in the storage .
1670	SyncResources synchronizes the resources .
1671	ParseConfig parses a YAML configuration file
1672	problemicsInFiles takes a set of files and returns a map of errors .
1673	NewPodLogArtifact creates a new PodLogArtifact
1674	CanonicalLink returns the canonical link of a PodLogArtifact
1675	ReadAt returns the length of the PodLogArtifact
1676	ReadAll reads all the pod logs
1677	ReadAtMost reads n bytes of a pod log
1678	ReadTail returns the last n bytes of the pod log
1679	newProblems creates a map of problems from a set of review comments .
1680	blemsInFiles returns a map of problems in the given files .
1681	undoPreset removes the specified preset from the given preset .
1682	undoPresubmitPresets will undo all preset labels .
1683	yamlBytesStripNulls removes nulls from YAML
1684	monitorDiskAndEvict monitors disk usage and evictUntilPercentBlocksFree
1685	difference returns a new instance of orgRepoConfig with all repositories in c2 .
1686	union returns a new instance of orgRepoConfig .
1687	clearStaleComments removes stale comments from the issue .
1688	determineReleaseNoteLabel determines the release note for the given payload
1689	getReleaseNote extracts the release note from the body .
1690	NewClient creates a new Client .
1691	Acquire acquires a resource and releases it .
1692	ReleaseOne releases a resource
1693	UpdateAll will update all information in a given state .
1694	GetGitHubClient returns a new GitHub API client
1695	GetUsername returns the user s username
1696	CreateTokenHandler creates a TokenHandler from an io . Reader
1697	CreateTokenHandlers creates a set of token handlers
1698	String returns a string representation of this job .
1699	TerminateOlderPresubmitJobs terminates all pending presubmit jobs .
1700	PushMetrics pushes metrics to metrics pusher
1701	RateLimiter returns a rate limiter for a given controller name .
1702	checkExistingStatus returns the current status for a given pull request
1703	checkExistingLabels returns true if there are any issues in the repository .
1704	handle runs the action on the given pull request .
1705	MarkdownSHAList formats a list of commits .
1706	PathForSpec builds a path for a given spec
1707	AliasForSpec returns the alias for the given job spec .
1708	RootForSpec returns the root path for a given job spec
1709	NewSingleDefaultRepoPathBuilder returns a RepoPathBuilder that can be used as a repository name .
1710	NewExplicitRepoPathBuilder returns a RepoPathBuilder that can be used as an argument .
1711	RegisterSourceOrDie registers a new IssueSource .
1712	CreateAndSync creates a new instance of IssueCreator
1713	loadCache populates the internal cache .
1714	setIntersect removes all elements in a and removes them from b .
1715	sync returns true if the given issue is synced .
1716	GetAWSCreds extracts the AWS credentials from the resource
1717	stopped returns a channel that will be closed when a SIGTERM is received .
1718	newPipelineConfig creates a new pipeline config .
1719	KubeClient returns a Kubernetes client
1720	ProwJobClient returns a new client for kubeconfig .
1721	resolveSymLink is used to resolve symlinks
1722	readJSON reads JSON data from a bucket .
1723	listSubDirs returns all subdirectories
1724	listAll returns all keys for a given prefix
1725	listBuildIDs returns all buildIDs for the given root .
1726	FilterProfilePaths returns a filtered set of profiles that match a regular expression .
1727	LoadSecrets loads the secrets from the given paths .
1728	LoadSingleSecret loads a single secret from a path
1729	Set sets the bool value .
1730	NewOpener returns a new gcp . Opener
1731	IsNotExist returns true if the error is a NotExist error .
1732	LogClose logs a closer
1733	Writer opens a GCS file .
1734	InitGitHubOAuthConfig initializes GitHub OAuth2 .
1735	deltaDisplayed returns a string representation of the coverage change .
1736	makeTable returns a summary of the changes in the profile
1737	ContentForGitHubPost returns a string representation of the coverage report .
1738	AddFlags adds command - line flags
1739	CheckFlags validates client flags
1740	getGitHubClient returns a github client
1741	limitLimitsCheckAndWait checks if the current token limit is reached .
1742	FetchIssues fetches issues from the given repository .
1743	hasID returns true if there is an issue with the given id .
1744	FetchIssueEvents fetches issues from an issueID and sends them to the channel .
1745	isPRChanged returns true if the pull request is a PRChanged event .
1746	NewFetcher returns a new Fetcher .
1747	fetchRecentIssues retrieves all issues pushed to the repository
1748	fetchRecentEventsAndComments fetches issue - events and comments .
1749	Fetch fetches recent issues and comments from database .
1750	Issues returns a list of flaky jobs .
1751	Title returns the title of a flaky job .
1752	Labels returns the labels of the flaky job .
1753	ReadHTTP is a wrapper around http . ReadHTTP .
1754	String sorts the lines by timestamp .
1755	NewJobSpec creates a new JobSpec from a ProwJobSpec
1756	ResolveSpecFromEnv returns the job spec from the environment
1757	EnvForSpec returns the environment variables for a job spec
1758	EnvForType returns the environment variables for the given job type .
1759	getRevisionFromRef gets the revision from the given refs
1760	GetRevisionFromSpec returns the revision of the job spec
1761	helpProvider returns a new plugin help .
1762	load loads the paths from the given io . Reader .
1763	loadPaths loads the paths from the given io . Reader .
1764	Match returns true if the path matches the given path .
1765	CreateDatabase creates a new InfluxDB with the given tags .
1766	mergeTags returns a new set of default tags .
1767	tagsToWhere converts a tags map to a WHERE clause .
1768	Push adds a new point to an InfluxDB .
1769	ifact extracts a pod log artifact from the source
1770	serve serves prometheus metrics
1771	gather is a long running routine that periodically collects metrics .
1772	makeRequest creates a new BranchProtectionRequest from a policy .
1773	makeReviews creates a new RequiredPullRequestReviews from the given policy .
1774	Header returns the header for the given artifacts
1775	Callback is the callback for the callback
1776	logLinesAll reads all log lines from an artifact .
1777	executeTemplate executes the given template and returns the result .
1778	DeepCopyObject returns a deep copy of the object .
1779	FromItem populates the resource object from the given resource .
1780	SetItems sets the items in the ResourceCollection
1781	DeepCopyObject returns a deep copy of the resource collection
1782	useContext runs kubectl config with the given context
1783	currentContext returns the current context
1784	command runs a command with the given arguments .
1785	describeCluster returns the description of a container
1786	Set appends a string to the slice .
1787	parseXML unmarshals an XML body into a gcsDir .
1788	Render renders a dir
1789	Render renders a record
1790	Render renders a prefix
1791	Printf implements Logger .
1792	NewClient creates a new Gerrit Client
1793	SetReview sets a new review
1794	GetBranchRevision returns revision of a branch .
1795	queryAllChanges returns all changes for the given lastUpdate time
1796	NewTypeFilterWrapperPlugin creates a new TypeFilterWrapperPlugin
1797	AddFlags adds flags for the type filter
1798	CheckFlags returns an error if the plugin is not supported .
1799	AddFlags adds flags for the Kubernetes client
1800	Validate validates the client configuration
1801	Client returns a client for the given type
1802	newCRDClient creates a new CRD client .
1803	createRESTConfig creates a rest . Config based on the provided type .
1804	registerResource registers a custom resource definition
1805	newDummyClient returns a dummy client
1806	Update adds a new object to the client
1807	TrustedPullRequest checks if a pull request is trusted
1808	buildAll runs all the jobs in the pull request .
1809	Run runs the provided options
1810	AddConfig adds a new resource config to the storage .
1811	DeleteConfig deletes a config .
1812	UpdateConfig updates the storage . ResourcesConfig .
1813	GetConfig returns the config for the given name .
1814	GetConfigs returns a list of all the configs .
1815	SyncConfigs implements Storage . SyncConfigs .
1816	addKnownTypes adds all known types to the scheme .
1817	NewController creates a new kubeProwJobController .
1818	Run runs the controller .
1819	addBlockingPresubmits returns a map of presubmits to a set of presubmit .
1820	removesBlockingPresubmits returns a map of presubmits removed from old .
1821	migratedBlockingPresubmits returns a map of blocked blocking presubmits from old to old .
1822	Load loads config from environment
1823	canExecuteConcurrently returns true if the given ProwJob can be started .
1824	getJenkinsJobs takes a slice of ProwJob and returns a slice of jenkinsJobs .
1825	terminateDupes will terminate all pending jobs that have been cancelled .
1826	Throttle is used to throttle the client
1827	NewClientWithFields returns a new GitHub API client .
1828	NewClient returns a new Client instance .
1829	NewDryRunClient creates a new DryRunClient .
1830	NewFakeClient creates a new fake client
1831	request sends a request and returns the status code .
1832	requestRaw is used to unmarshal a raw request .
1833	getUserData gets the current user data .
1834	readPaginatedResultsWithValues reads the paginated results from the page and returns the results .
1835	UpdatePullRequest updates a pull request .
1836	getLabels returns a list of labels .
1837	stateCannotBeChangedOrOriginalError returns a StateCannotBeChangedError with the given error .
1838	IsMergeable returns true if there is a mergeable pull request .
1839	Token implements oauth2 . TokenSource .
1840	ListArtifacts returns a list of all artifacts for the given src
1841	KeyToJob returns job name and build id
1842	rrowToGCS returns the GCS path to the GCS path
1843	FetchArtifacts fetches artifacts from a pod
1844	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new DecorationConfig .
1845	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new GCSConfiguration .
1846	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new JenkinsSpec .
1847	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new ProwJob .
1848	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new ProwJobList .
1849	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new ProwJobSpec .
1850	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new ProwJobStatus .
1851	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new Pull .
1852	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new Refs .
1853	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new UtilityImages .
1854	upload uploads the given invocation to the given target .
1855	ApplyDefault applies defaults to the given DecorationConfig .
1856	Validate validates the DecorationConfig .
1857	ApplyDefault returns a copy of the given UtilityImages with the same defaults .
1858	ApplyDefault applies defaults to the given GCSConfiguration .
1859	Validate validates the GCS configuration
1860	ClusterAlias returns the cluster alias .
1861	NewResource returns a new Resource .
1862	NewResourcesFromConfig returns a slice of ResourceConfig from the given configuration .
1863	UserDataFromMap creates a UserData from a UserDataMap
1864	Set implements the flag . Value interface .
1865	UnmarshalJSON unmarshals JSON into UserData
1866	Extract unmarshals a yaml file into out .
1867	Set stores a YAML in the UserData
1868	Update updates the given UserData .
1869	ToMap converts UserData to UserDataMap
1870	FromMap populates the UserDataMap from the given map .
1871	ItemToResource converts an Item to a Resource .
1872	Run runs the given options .
1873	addSSHKeys adds keys to the given paths
1874	Issues is part of the TriageFiler interface .
1875	loadClusters loads a triples from a trie .
1876	parseTriageData returns a triage data structure .
1877	topClusters returns a slice of clusters .
1878	topJobsFailed returns the number of failed jobs .
1879	Title returns a human - readable summary of the cluster
1880	Labels returns the labels of the cluster .
1881	New creates a new Cron
1882	QueuedJobs returns a list of queued jobs
1883	HasJob checks if a job exists
1884	addJob adds a new job to the CronAgent
1885	removeJob removes a job from the map .
1886	UpdateComments updates the comments for an issue
1887	GatherProwJobMetrics takes a slice of Prow jobs and returns the metric map
1888	OptionOrDefault returns the option value or the default value if it is 0 .
1889	newGCSJobSource returns a new GCSJobSource .
1890	artifacts fetched from the GCS artifact .
1891	canonicalLink returns the path to the blobfs .
1892	jobPath returns the path to the GCS job source .
1893	targetURL returns the target URL for the pull request .
1894	newBuildConfig creates a new buildConfig .
1895	NewClient returns a new GitHub API client
1896	retry runs the given action .
1897	depaginate performs a depaginate on the specified call .
1898	NewHelpAgent creates a new HelpAgent
1899	GeneratePluginHelp generates the help for the plugin
1900	getPullCommitHash returns the commit hash of a pull
1901	listJobBuilds returns a list of jobs matching the given jobPrefixes .
1902	getPRBuildData returns a slice of buildData for the given jobs .
1903	getGCSDirsForPR returns a map of GCSDirs for the given repository .
1904	deleteFromDisk deletes the image from disk
1905	doNetworksCreate creates a network
1906	networkLoadByName loads a network by name .
1907	Transaction runs a transaction on the node .
1908	ForLocalInspectionWithPreparedStmts is part of the Cluster interface .
1909	SetDefaultTimeout sets default context timeout
1910	Transaction is part of the Cluster interface .
1911	EnterExclusive is used to enter an exclusive lock
1912	ExitExclusive is part of the Cluster interface .
1913	Close closes the database .
1914	TxCommit commits a transaction .
1915	ParseRemote returns the default remotes for the given raw string .
1916	GetContainerServer returns a container server by name
1917	GetImageServer returns the lxd server
1918	initAppArmor initializes AppArmorStacking
1919	appArmorCanStack returns true if the apparmor domain can be found
1920	containerDeviceAdd adds a device to the container
1921	profileDeviceAdd adds a device to a container
1922	ensureImageAliases ensures a list of image aliases exists .
1923	GetExistingAliases returns an array of images with the given name .
1924	String returns a string representation of the status code .
1925	ImagesGetExpired returns all images that have expired .
1926	ImageSourceInsert inserts an image source into the database .
1927	ImageSourceGet returns the image source for the given image ID .
1928	ImageExists checks if a given project exists .
1929	ImageGet returns information about the specified image .
1930	ImageGetFromAnyProject gets information about a specific image
1931	imageFill fills image properties
1932	ImageLocate returns the local address of the cluster .
1933	ImageAssociateNode adds a node to the cluster
1934	ImageDelete deletes an image .
1935	ImageAliasesGet returns all image aliases for the given project
1936	ImageAliasGet returns information about an image .
1937	ImageAliasRename renames an image .
1938	ImageAliasDelete deletes an image alias from the cluster .
1939	ImageAliasesMove moves an image aliased from source to destination .
1940	ImageAliasAdd adds a new image alias to the cluster .
1941	ImageAliasUpdate updates an image .
1942	ImageLastAccessUpdate updates the last_use_access date .
1943	ImageLastAccessInit initializes the cached image .
1944	ImageUpdate updates an image .
1945	ImageInsert inserts a new image into the cluster .
1946	ImageGetPools returns a list of all storage pools .
1947	ImageGetPoolNamesFromIDs returns a list of pool names for the specified pool IDs
1948	ImageUploadedAt updates the timestamp of an image .
1949	ImagesGetOnCurrentNode returns all images in the cluster .
1950	ImagesGetByNodeID returns a map of images by node ID .
1951	ImageGetNodesWithImage returns all nodes with the given fingerprint .
1952	ImageGetNodesWithoutImage returns all nodes with the given image fingerprint .
1953	Add adds a new task to the group .
1954	Start starts the group .
1955	zfsIsEnabled returns true if zfs is enabled
1956	Get version information
1957	Get the zfs module version
1958	ZfsPoolVolumeCreate creates a zfs pool volume
1959	ZfsPoolVolumeExists checks if the given dataset exists
1960	NetworkIDsNotPending returns a map of network IDs to IDs in the cluster .
1961	NetworkConfigAdd is part of the ClusterTx interface .
1962	NetworkNodeJoin adds a node to the transaction .
1963	NetworkCreatePending creates a new network .
1964	NetworkCreated is used to update the state of a network .
1965	NetworkErrored returns an error indicating whether or not the network failed .
1966	NetworkGet returns the network with the given name .
1967	networkNodes returns the list of nodes in the cluster .
1968	NetworkGetInterface returns network interface
1969	NetworkConfigGet returns the configuration for the specified network .
1970	NetworkCreate creates a new network .
1971	NetworkUpdate updates a network .
1972	NetworkUpdateDescription updates a network description .
1973	NetworkConfigClear clears the network config .
1974	NetworkDelete deletes a network .
1975	NetworkRename renames a network name .
1976	GetContainers returns a list of all containers
1977	GetContainersFull is part of the LXD interface .
1978	GetContainer gets a container by name
1979	CreateContainerFromBackup creates a new container backup
1980	CreateContainer creates a new container
1981	CreateContainerFromImage creates a new container
1982	UpdateContainer updates a container
1983	RenameContainer renames a container
1984	ExecContainer executes a container
1985	GetContainerFile returns the contents of a container
1986	CreateContainerFile creates a container file
1987	DeleteContainerFile deletes a file
1988	GetContainerSnapshotNames returns the list of snapshots for a container
1989	GetContainerSnapshots returns a list of snapshots
1990	GetContainerSnapshot gets a container snapshot
1991	CreateContainerSnapshot creates a new snapshot of a container
1992	MigrateContainerSnapshot updates a container snapshot
1993	UpdateContainerSnapshot updates a snapshot
1994	GetContainerState returns the current state of a container
1995	UpdateContainerState updates the state of a container
1996	GetContainerLogfiles returns a list of logfiles for a container
1997	GetContainerLogfile returns a stream of a container logs
1998	GetContainerMetadata returns metadata about a container
1999	SetContainerMetadata sets the metadata for a container
2000	GetContainerTemplateFiles returns all the templates for a container
2001	CreateContainerTemplateFile creates a container template
2002	DeleteContainerTemplateFile deletes a container template file
2003	ConsoleContainer adds a console to the server .
2004	GetContainerConsoleLog returns a stream of console logs .
2005	DeleteContainerConsoleLog deletes a container console .
2006	GetContainerBackups returns the backups of a container
2007	GetContainerBackup gets a backup
2008	CreateContainerBackup creates a backup of a container
2009	RenameContainerBackup creates a backup of a container
2010	DeleteContainerBackup deletes a backup of a container
2011	GetContainerBackupFile returns a snapshot of a container
2012	RsyncSend performs a synchronous sync with the specified path
2013	patches .
2014	patchRenameCustomVolumeLVs modifies the vm . vn . Volume .
2015	patchLvmNodeSpecificConfigKeys patches the Lvm_configs_configs_keys field of the given node .
2016	GetHTTPClient returns the HTTP client
2017	do executes the request against the bakery client
2018	RawQuery is a wrapper for RawQuery
2019	RawWebsocket creates a new websocket connection
2020	RawOperation is a wrapper for RawOperation
2021	ProfileToAPI converts a Profile to api . Profile .
2022	Profiles returns a list of available profiles .
2023	ProfileGet gets a profile by name
2024	ProfilesGet returns a list of profiles .
2025	ProfileConfig returns the set of profiles for a given project
2026	ProfileConfigClear clears a profile .
2027	ProfileConfigAdd adds a new profile config to the database .
2028	ProfileContainersGet returns a map of containers for a given profile
2029	ProfileCleanupLeftover removes all profiles from the cluster
2030	ProfilesExpandConfig returns an expanded map of profile configs
2031	ProfilesExpandDevices takes a list of devices and returns a slice of devices
2032	GetServer returns the server and etag
2033	UpdateServer updates a server
2034	HasExtension returns true if the server supports an extension
2035	GetServerResources returns the server s resources .
2036	UseProject returns a ServerServer with the given name
2037	sqliteOpen opens a database connection .
2038	Rebalance attempts to rebalance the current raft node .
2039	Promote the node to the database
2040	Purge removes a node from the database .
2041	List returns a list of all known cluster members .
2042	Count returns the number of nodes in the cluster .
2043	Enabled returns whether or not the Raft node is enabled .
2044	membershipCheckNodeStateForBootstrapOrJoin checks if the node is a member of bootstrapping .
2045	membershipCheckClusterStateForBootstrapOrBootstrapOrJoin checks if a bootstrap node is eligible for bootstrapping .
2046	membershipCheckClusterStateForAccept returns an error if the cluster state is not accepted .
2047	member membershipCheckClusterStateForLeave returns an error if the node is not empty .
2048	member membershipCheckNoLeftoverClusterCert checks if a leaf node cert exists
2049	ConfigLoad loads the config from the database .
2050	Replace replaces the config with the given values .
2051	Patch returns a copy of the config .
2052	HTTPSAddress returns the HTTPS address for the given node .
2053	CertificatesGet returns all certificates in the cluster .
2054	CertificateGet returns information about a certificate .
2055	CertSave stores a certificate in the cluster .
2056	CertDelete removes all certificates from the cluster .
2057	CertUpdate updates a certificate .
2058	createDevLxdlListener creates a listener for the given directory .
2059	Servers is part of the raft . Instance interface .
2060	Shutdown shuts down the raft instance .
2061	raftNetworkTransport creates a new raft . NetworkTransport for the given address .
2062	raftConfig returns a raft . Config with sane defaults .
2063	raftMaybeBootstrap is called when a raft cluster is bootstrapped .
2064	CPUResource returns the CPU CPU resource .
2065	MemoryResource returns information about the memory usage of the process .
2066	GetOperationUUIDs returns UUIDs
2067	GetOperations returns the list of active operations
2068	GetOperation gets the operation and etag
2069	GetOperationWebsocket returns a websocket connection
2070	tryMount attempts to mount a syscall to the specified path .
2071	lxdUsesPool checks if the given driver exists in the cluster
2072	ProjectURIs returns the URIs for the given filter .
2073	ProjectList returns a list of projects .
2074	ProjectGet gets a project by name .
2075	ProjectExists checks if a project exists in the cluster .
2076	ProjectCreate creates a new project .
2077	ProjectUsedByRef returns a map of projects used by a given filter
2078	ProjectRename renames a project .
2079	ProjectDelete deletes a project
2080	PasswordCheck checks if a password is valid
2081	LoadCert loads a TLS certificate
2082	WriteCert writes a cert and ca to dir
2083	NewDaemon returns a new Daemon
2084	DefaultDaemon returns a default daemon .
2085	AllowProjectPermission checks if a specific permission is allowed for a project
2086	checkTrustedClient returns an error if the client is not authenticated .
2087	Authenticate checks if the request is valid
2088	State returns the current state of the daemon
2089	UnixSocket returns the unix socket .
2090	Stop terminates the daemon .
2091	setupExternalAuthentication is used to setup external authentication
2092	initializeDbObject initializes the local database .
2093	WriteJSON writes body to w .
2094	EtagHash returns the etag hash of data .
2095	EtagCheck checks if the ETag header matches the ETag header
2096	HTTPClient returns a new HTTP client for the given certificate .
2097	IsRecursionRequest returns true if the request is recursion
2098	GetListeners returns a list of net . Listener s listeners
2099	internalSQLGet returns database schema .
2100	internalSQLPost is used to post a database query
2101	PublicKey returns the public key
2102	PrivateKey returns the private key
2103	Fingerprint returns the fingerprint of the certificate
2104	GenCert generates a new cert
2105	PrintServerInfo prints server information .
2106	LaunchContainers launches containers in a container
2107	CreateContainers creates containers for a container
2108	GetContainers returns all containers in the container
2109	StartContainers starts the specified containers .
2110	setQueryParam is used to set the query param
2111	Get all images
2112	GetImageFile - Get an image file
2113	GetImageSecret gets an image secret
2114	GetPrivateImage returns an image and secret
2115	GetPrivateImageFile - get private image file
2116	GetImageAliases returns all image aliases
2117	tryCopyImage tries to create a copy of the given images .
2118	CopyImage copies an image
2119	UpdateImage updates an image
2120	DeleteImage deletes an image
2121	RefreshImage refresh image
2122	CreateImageAlias creates a new image alias .
2123	UpdateImageAlias updates an image alias
2124	RenameImageAlias renames an image alias
2125	DeleteImageAlias deletes an image alias
2126	Open opens a database connection .
2127	EnsureSchema ensures that a database schema exists in the given directory .
2128	FilesystemDetect returns the filesystem name for the given path
2129	Schema returns a schema . Schema .
2130	updateFromV37 updates the settings in the database .
2131	Arch ArchitectureGetLocal returns the architecture name .
2132	NewController creates a new Controller
2133	CreateContainer creates a container with the specified name .
2134	DefinedContainer returns true if the container is defined by the controller .
2135	UpdateContainer updates an existing container
2136	RenameContainer renames a container
2137	DeleteContainer deletes a container
2138	Add adds an update to the schema .
2139	ensureSchemaTableExists ensures that the schema table exists .
2140	queryCurrentVersion returns the current version .
2141	ensureUpdatesAreApplied applies the given updates to the database .
2142	checkSchemaVersionsHaveNoHoles returns an error if any of the versions are missing .
2143	checkAllUpdatesAreApplied returns an error if there is no update in the database .
2144	format SQL statement
2145	GetAllXattr retrieves all extended attributes from path .
2146	GetErrno returns the errno of the given error .
2147	Uname converts symlink to Utsname .
2148	RegisterStmt registers the given SQL statement .
2149	PrepareStmts returns a map of prepared statements .
2150	NewGateway creates a new gateway
2151	DialFunc returns dqlite . DialFunc .
2152	Shutdown the gateway
2153	Sync writes the database to disk .
2154	Reset resets the raft node
2155	LeaderAddress returns the leader address .
2156	waitLeadership waits for the raft node to be elected .
2157	currentRaftNodes returns a slice of Raft nodes .
2158	cachedRaftNodes fetches Raft nodes .
2159	dqliteMemoryDial returns a DialFunc that connects to a unix socket .
2160	DqliteLog calls dqlite . Logger .
2161	MetadataAsMap returns the metadata as a map .
2162	MetadataAsOperation returns the operation as an Operation .
2163	MetadataAsStringSlice returns a slice of strings as a slice of strings .
2164	MetadataAsStruct unmarshals metadata to struct
2165	Load data from a file
2166	Write the data to a file
2167	AddRecord adds a new record to the report .
2168	LoadConfig loads the configuration from a file .
2169	SaveConfig persists the configuration to disk .
2170	Get loads a file from the container
2171	ConfigPath returns the path to the given paths .
2172	ServerCertPath returns the path to the server certificate .
2173	NewConfig returns a new Config .
2174	checkForPreDumpSupport checks if the container supports preDump support .
2175	preDumpLoop runs the post - dump command .
2176	newRoot creates a new cobra . Command for the LXD .
2177	APIExtensionsCount returns the number of API extensions .
2178	SelectURIs executes a query and returns a slice of URIs .
2179	SelectStrings executes a query and returns a slice of strings .
2180	scanSingleColumn runs a single column in a transaction .
2181	LazyHandler applies Lazy to the context .
2182	Callers returns a slice of the callers in the pool .
2183	name returns the name of the function .
2184	TrimBelow returns a copy of the trace at the given pc .
2185	TrimAbove returns a copy of the trace at the given pc .
2186	TrimBelowName returns the trace with the given name .
2187	TrimAboveName returns the trace at the given name .
2188	TrimRuntime returns a copy of the trace removed from the file system .
2189	GetCaps returns the capabilities for the given path
2190	SetCaps will set the caps for the given path
2191	Read implements ProgressReader .
2192	Supported checks if a volume is supported
2193	GetProject retrieves a project ID .
2194	SetProject sets the project id for a project
2195	DeleteProject deletes a project
2196	GetProjectUsage returns the usage of a project
2197	SetProjectQuota sets the quota for a project
2198	backupLoadByName returns a backup by name .
2199	backupCreate creates a backup container .
2200	Rename renames the snapshot
2201	Delete implements Backup .
2202	backupFixStoragePool updates the storage pool with the given backupInfo
2203	Count returns the count of the count of the given conditions .
2204	CountAll returns a map of all tables in the database .
2205	InitTLSConfig initializes the TLS configuration .
2206	copyContainerThinpool copies the container to the specified destination container .
2207	copyContainerLv copies the contents of a container into the target container .
2208	copyContainer copies a container into the target container .
2209	copyVolume copies a volume to a volume .
2210	GetPrivateImage returns the private image and secret
2211	GetPrivateImageFile is unsupported
2212	GetImageAliasNames returns a list of all image aliases
2213	ProtoRecv reads a binary message from a WebSocket stream .
2214	ProtoSend sends a binary message to the WebSocket .
2215	ProtoSendControl sends a migration control message
2216	Read implements the io . Reader interface .
2217	doContainersGetFromNode gets the list of containers from a node .
2218	Retry tries to retry a database connection .
2219	IsRetriableError returns true if the given error is a RetriableError .
2220	AppArmorProfile returns the armored armor profile
2221	StoragePoolVolumeCreate creates a new volume on btrfs
2222	ContainerStorageReady returns true if the container is ready to be ready for use .
2223	ContainerCreateFromImage creates a new storage volume for the specified container
2224	ContainerSnapshotRename renames the snapshot of a snapshot container
2225	ContainerSnapshotCreateEmpty creates an empty snapshot for a snapshot container
2226	btrfsSubVolumesDelete deletes the btrfs subvolume .
2227	isBtrfsSubVolume returns true if the given subvolume is a btrfs subvolume .
2228	SelectConfig selects a set of keys and values from a table .
2229	UpdateConfig updates the config for the given values .
2230	deleteConfig removes the given config from the database .
2231	FormatSection formats a section and content
2232	GetProjects returns a list of projects
2233	GetProject gets a project by name
2234	CreateProject creates a new project
2235	UpdateProject updates a project
2236	RenameProject renames a project
2237	Read implements io . Reader .
2238	Write implements io . Writer .
2239	NewCanceler creates a new Canceler
2240	Cancelable returns true if the canceller is canceled .
2241	Cancel cancels the operation
2242	CancelableDownload is used to cancel a request
2243	Returns the current cluster configuration .
2244	clusterGetMemberConfig returns the configuration keys for a given cluster
2245	ClusterPutDisable shuts down the cluster
2246	tryClusterRebalance attempts to realance rebalance .
2247	internalClusterPostRebalance rolls back the current node .
2248	internalClusterPostPromote is used to promote a node
2249	Filters returns all filters that match entity
2250	Parse returns the mapping for the given name .
2251	findStruct looks up a StructType by name
2252	parseStruct returns a slice of fields .
2253	GetProfileNames returns a list of available profiles
2254	GetProfiles returns a list of profiles
2255	GetProfile retrieves a profile by name
2256	CreateProfile creates a new profile
2257	UpdateProfile updates a profile
2258	RenameProfile renames a profile
2259	Load creates a new Map with the given values .
2260	Dump returns a map representation of this Map .
2261	GetRaw returns the value for the given key .
2262	GetString gets a string value from the map .
2263	GetBool returns the value for a given key .
2264	GetInt64 returns the value for a key as int64 .
2265	update updates the values in the map .
2266	set sets the value for the given key
2267	DoesSchemaTableExist returns true if the schema table exists in the database .
2268	selectSchemaVersions selects all schema versions in the database .
2269	selectTablesSQL returns a slice of SQL statements in a transaction .
2270	createSchemaTable creates a schema .
2271	insertSchemaVersion inserts a new schema version in the database .
2272	NewState returns a new instance of State
2273	containerLXCUnload resets the LXC .
2274	containerLXCInstantiate creates a new instance of a containerL .
2275	initStorage initializes the storage pool .
2276	OnNetworkUp is called when a network device is created .
2277	setupHostVethDevice initializes the veth device
2278	getLxcState returns the current state of the container .
2279	StorageStartSensitive checks if the container s mount point is in a container .
2280	deviceExistsInDevicesFolder checks if a folder exists in the container
2281	createDiskDevice creates a disk device
2282	setNetworkRoutes sets the network routes for the given device
2283	Path returns the path of the LXC container .
2284	macasInterfaces returns a slice of maas . ContainerInterfaceSubnets .
2285	getSystemHandler returns the logger for the given syslog .
2286	findNvidiaMinor returns the device minor version of the kernel
2287	GetLogger returns a logger based on the syslog configuration .
2288	SetLogger sets the logger .
2289	WaitRecord blocks until the given channel is closed .
2290	AddContext adds context to the logger .
2291	NewDottedVersion returns a new DottedVersion
2292	Parse parses a version string .
2293	String returns the dotted version
2294	Compare compares two dotted versions .
2295	projectCreateDefaultProfile creates a new default profile .
2296	projectChange updates a project
2297	projectIsEmpty returns true if the project is empty
2298	GetCertificateFingerprints returns a list of fingerprinted certificates
2299	GetCertificates returns a list of all certificates
2300	GetCertificate fetches a certificate by fingerprint
2301	CreateCertificate creates a new certificate
2302	UpdateCertificate updates a certificate
2303	DeleteCertificate deletes a certificate
2304	Container metadata templates
2305	Container metadata templates .
2306	Container metadata templates
2307	getContainerTemplatePath returns the path to the given template .
2308	Error implements the error interface .
2309	Error implements the error interface .
2310	add adds an error to the list .
2311	UpdateSchema updates the database .
2312	doProfileUpdateCluster updates the profile in the cluster
2313	doProfileUpdateContainer updates the profile metadata for a container .
2314	getProfileContainersInfo returns list of containers for a given profile
2315	GetNetworkNames returns a list of network names
2316	GetNetworks returns a list of networks
2317	GetNetwork gets a network by name
2318	GetNetworkLeases returns a list of network leases
2319	GetNetworkState retrieves a network state by name
2320	CreateNetwork creates a new network
2321	UpdateNetwork updates a network
2322	RenameNetwork renames a network
2323	Open opens a database connection .
2324	URLEncode encodes a path into a URL
2325	IsUnixSocket returns true if path is a socket socket
2326	HostPath returns the host path for the given path
2327	FileMove moves a file
2328	DirCopy copies a directory
2329	StringMapHasStringKey returns true if a map contains a string key
2330	TextEditor creates a text editor
2331	WriteTempFile writes a temp file
2332	RenderTemplate renders a template
2333	Every returns a schedule that runs every interval
2334	StoragePoolMount checks if the storage pool is mounted
2335	Dump dumps a dump of a given schema .
2336	dumpTable dump table for given table
2337	ProjectHasProfiles returns true if the given project has profiles in the database .
2338	ProjectNames returns the list of all projects in the transaction .
2339	ProjectMap returns a map of projects indexed by ID .
2340	ProjectHasImages returns true if the specified project has images enabled .
2341	ProjectUpdate updates a project
2342	GetCluster gets the cluster and its name
2343	UpdateCluster updates a cluster
2344	GetClusterMemberNames returns a list of member names
2345	GetClusterMembers returns a list of all cluster members
2346	GetClusterMember gets a member
2347	RenameClusterMember renames a member
2348	Disconnect disconnects the event listener .
2349	CompareVersions compares two versions .
2350	HasClientCertificate returns true if the client certificate exists .
2351	GenerateClientCertificate generates client certificate
2352	LoadModule loads a module
2353	Parse a go source file
2354	PprofAddress returns the pprof address .
2355	PprofUpdateAddress updates the endpoint listener
2356	NewMethod creates a new Method .
2357	Generate generates the generated code for this method
2358	fillSliceReferenceField fills the field with the given field .
2359	StoragePoolID returns the ID of a storage pool .
2360	StoragePoolIDsNotPending returns a map of all storage pools in the pending state .
2361	StoragePoolNodeJoin adds a node to the transaction .
2362	StoragePoolNodeJoinCeph adds a storage pool node to the database .
2363	StoragePoolConfigAdd adds a new config to the store .
2364	StoragePoolCreatePending adds a new storage pool to the database .
2365	StoragePoolCreated is part of the ClusterTx interface .
2366	StoragePoolErrored is defined on the ClusterTx interface .
2367	StoragePoolNodeConfigs returns a map of storage pool node configuration for a given poolID .
2368	StoragePoolsGetDrivers returns a list of all storage pools .
2369	StoragePoolGetID returns the ID of a storage pool .
2370	StoragePoolGet returns the named storage pool .
2371	storagePoolNodes returns the nodes for a given storage pool .
2372	StoragePoolConfigGet returns the configuration for a given storage pool .
2373	StoragePoolCreate creates a new storage pool .
2374	storagePoolConfigAdd adds a new storage pool config to the storage pool .
2375	StoragePoolUpdate updates a storage pool .
2376	StoragePoolConfigClear clears the storage pool configuration for a given pool .
2377	StoragePoolDelete deletes a StoragePool by name .
2378	StoragePoolVolumesGetNames returns a list of volume names .
2379	StoragePoolVolumesGet returns a list of storage volumes .
2380	StoragePoolNodeVolumesGet returns the list of volumes for the specified node .
2381	storagePoolVolumesGet returns volume volumes .
2382	StoragePoolVolumesGetType returns the list of volumes for a given volume type .
2383	StoragePoolVolumeSnapshotsGetType returns the list of volume snapshots for a volume
2384	StoragePoolNodeVolumesGetType returns the list of volumes for a given volume type
2385	StoragePoolVolumeGetType gets a volume for a given volume type
2386	StoragePoolNodeVolumeGetType gets the volume for a given volume
2387	StoragePoolNodeVolumeGetTypeByProject returns the volume for a given volume type
2388	StoragePoolVolumeUpdate creates a new volume .
2389	StoragePoolVolumeDelete deletes a volume .
2390	StoragePoolVolumeRename renames a volume on the cluster
2391	storagePoolVolumeReplicateIfCeph replicates the given volume with the given volume ID .
2392	StoragePoolVolumeCreate creates a new storage pool
2393	StoragePoolVolumeGetTypeID returns the volume ID for a given volume .
2394	StoragePoolNodeVolumeGetTypeID gets the ID of a volume on a node
2395	StoragePoolVolumeTypeToName converts a volume type to its name .
2396	DevicesAdd adds devices to the database .
2397	Devices returns a list of devices for a given project
2398	Patches returns all patches in the node .
2399	PatchesMarkApplied adds a patch to the database .
2400	entityType returns entity type
2401	entityPost returns the post for a given entity
2402	stmtCodeVar returns a string representation of the given entity
2403	destFunc returns a string representation of a field .
2404	CompareConfigs compares two configs .
2405	CopyConfig returns a copy of the given map
2406	NewNotifier creates a new Notifier .
2407	Events starts a new event watcher .
2408	eventsConnect creates a listener for the given address
2409	StoragePoolInit initializes storage .
2410	getAAProfileContent returns the profile content for the container
2411	AALoadProfile loads an apparmor profile
2412	AADestroy removes the apparmor namespace
2413	APPARarseProfile parses the apparmor profile
2414	getSystemHandler returns a log . Handler for the given syslog .
2415	NotifyUpgradeCompleted is called when a upgrade is completed .
2416	KeepUpdated returns a function that periodically updates the state of the given state .
2417	maybeUpdate checks if a cluster update should be updated
2418	NewServer creates a new server
2419	StartStatusCheck starts the server .
2420	SyncProjects synchronously synchronously synchronously to the server
2421	AddProject adds a new project
2422	DeleteProject deletes a project
2423	RenameProject renames a project
2424	IsAdmin checks if a user is admin
2425	HasPermission checks if a given permission exists in the server
2426	rsyncSend performs a synchronous sync with the given path
2427	rsyncSendSetup runs rsync on the remote c2c process
2428	tlsClientConfig returns the TLS configuration for the given certificate .
2429	tlsCheckCert returns true if the peer certificate is valid .
2430	Internal method for creating a new container
2431	containerPostCreateContainerMountPoint is called when a container is created
2432	Contains returns true if the given device is in the list .
2433	Update takes a new list of devices and returns a map containing the changes that are changed
2434	DeviceNames returns a list of device names .
2435	Infof logs an error message
2436	Debugf logs a message at level Debug .
2437	Warnf logs a warning message
2438	Errorf logs an error message .
2439	Critf logs a critical message
2440	eventForward forwards an event to a node .
2441	StorageProgressReader returns an io . ReadCloser that can be used to render progress ProgressReader .
2442	StorageProgressWriter is part of the StorageReader interface .
2443	GetLSBRelease returns the LXD release version
2444	Reset resets the current environment
2445	Append appends a snippet to target .
2446	ContainerToArgs converts a Container to a ContainerArgs
2447	ContainerNames returns the names of containers in the given project .
2448	ContainerNodeAddress returns the address of a container .
2449	ContainersListByNodeAddress returns a map of containers for the given node address .
2450	ContainerListExpanded is a wrapper around ContainerList .
2451	ContainersByNodeName returns a map of containers name in the transaction .
2452	SnapshotIDsAndNames returns a map of container ID and name
2453	ContainerNodeList returns a list of containers in a transaction .
2454	ContainerNodeProjectList returns a list of containers for a given project
2455	ContainerRemove removes a container .
2456	ContainerProjectAndName returns the project and name for the given container id .
2457	ContainerConfigClear clears the container config .
2458	ContainerConfigGet gets the value for a container config .
2459	ContainerConfigRemove removes a config key from the cluster .
2460	ContainerSetStateful updates the stateful for a container .
2461	ContainerProfilesInsert adds profiles to a container .
2462	ContainerProfiles returns a list of profiles for the specified container id .
2463	ContainerConfig returns a map of container config values .
2464	ContainerSetState sets the state of a container .
2465	ContainerUpdate updates a container .
2466	ContainerLastUsedUpdate updates the last_use_use date in the cluster .
2467	ContainerGetSnapshots returns a list of snapshots for a given container
2468	ContainerGetSnapshotsFull returns a list of snapshots for a given container
2469	ContainerNextSnapshot returns the number of snapshots in the cluster .
2470	ContainerPool returns the name of the storage pool .
2471	ContainerGetBackup returns a snapshot of a container .
2472	ContainerGetBackups returns a list of backup backups for a given project and name .
2473	ContainerBackupCreate creates a backup of a container
2474	ContainerBackupRemove removes a backup from the cluster
2475	ContainerBackupRename renames a backup of a container backup
2476	ContainerBackupsGetExpired returns a list of all backups in the cluster
2477	DefaultOS returns a default operating system .
2478	Init initializes the OS
2479	GetWebsocket returns the websocket connection .
2480	Refresh implements op . Refresh .
2481	CancelTarget cancels the operation .
2482	GetTarget gets the target operation
2483	upup initializes the endpoints .
2484	Down closes all endpoints .
2485	serveHTTP serves the given kind .
2486	closeListener closes the listener
2487	activatedListeners converts systemdListeners to a map of listeners
2488	CandidServer returns the server URL and domains
2489	RBACServer returns the RBAC server
2490	AutoUpdateInterval returns the auto update interval .
2491	MAASController returns the controller s MAAS controller .
2492	OfflineThreshold returns the offline threshold for the cluster
2493	ConfigGetString returns the string value for a given key .
2494	ConfigGetBool gets a bool from the cluster
2495	ConfigGetInt64 gets an int64 from a cluster .
2496	ClusterAddress returns the address of the listener .
2497	Debug logs a message .
2498	RestServer returns a new http . Server instance
2499	projectParam returns the project param from the request .
2500	queryParam returns the value for the query param
2501	newDb creates a new cobra command
2502	Description returns a description of the operation type .
2503	Permission returns the name of the operation
2504	OperationsUUIDs returns the UUIDs for the given node .
2505	OperationNodes returns the list of nodes associated with the given project .
2506	OperationByUUID returns an operation by UUID .
2507	OperationAdd adds a new operation to the transaction .
2508	OperationRemove removes the operation with the given UUID .
2509	operations returns all operations in the transaction .
2510	expireLogsTask returns a function that will expire log files .
2511	absPath returns the absolute path of the given file .
2512	Keys returns the keys of the schema .
2513	Defaults returns the default values .
2514	mustGetKey is like Get but panics on error .
2515	assertKeyType panics if the key does not exist .
2516	validate validates the value against the Key
2517	GetStoragePoolVolumes returns a list of volume volumes
2518	GetStoragePoolVolume retrieves a StorageVolume
2519	CreateStoragePoolVolume creates a new volume
2520	CreateStoragePoolVolumeSnapshot creates a new storage pool snapshot
2521	GetStoragePoolVolumeSnapshots returns volume snapshots for a given pool
2522	GetStoragePoolVolumeSnapshot gets a volume snapshot
2523	UpdateStoragePoolVolumeSnapshot updates a volume snapshot
2524	MigrateStoragePoolVolume adds a volume to a volume .
2525	MoveStoragePoolVolume moves a volume to a remote container
2526	UpdateStoragePoolVolume updates a storage pool
2527	DeleteStoragePoolVolume deletes a volume
2528	RenameStoragePoolVolume renames a volume .
2529	doStoragePoolCreateInternal is used to create a new storage pool
2530	containerGetParentAndSnapshotName extracts parent and snapshot name from container name
2531	containerLoadFromAllProjects loads all containers from the state .
2532	containerLoadNodeAll loads all containers from the cluster .
2533	containerLoadNodeProjectAll loads all containers of a given project .
2534	heartbeatNode sends a heartbeat node to the database .
2535	dotPrefixMatch returns true if the short prefix matches the short name .
2536	ContainerMount is part of the Storage interface .
2537	ContainerStorageReady returns true if the container is ready to be ready for use .
2538	AskChoice asks for a given choice .
2539	AskInt asks for a question
2540	AskString asks for a given question and returns the answer .
2541	AskPassword prompts the user for a given question .
2542	AskPasswordOnce asks the user for a password .
2543	askQuestion asks the user to ask the default answer
2544	readAnswer reads a single line from stdin trimming .
2545	profilePost posts a profile .
2546	profileDelete deletes the default profile
2547	IsRootDiskDevice returns true if the device is a root device .
2548	GetRootDiskDevice returns the root device and map of the device
2549	ForwardedResponse creates a new response for a container
2550	ForwardedResponseIfTargetIsRemote returns a response for the target node
2551	ForwardedResponseIfContainerIsRemote returns a response for a container
2552	ForwardedOperationResponse is a convenience function for returning a Response .
2553	Done marks the progress renderer as done .
2554	Update implements ProgressRenderer .
2555	Warn renders a progress message
2556	UpdateProgress implements the ProgressRender interface .
2557	UpdateOp updates the progress renderer
2558	updateFromV6 updates the zfs configuration in the database .
2559	localCreateListener creates a net . Listener
2560	NewStmt creates a new Stmt .
2561	Generate outputs the statement to the given buffer .
2562	register adds a statement to the database .
2563	httpsLXD creates a new LXD server
2564	IsActive returns true if the container is active
2565	RaftNodeAddress returns the address of a Raft node .
2566	RaftNodeFirst inserts the node with the given address .
2567	RaftNodeAdd adds a new node to a Raft_node .
2568	RaftNodeDelete deletes a node by its ID .
2569	RaftNodesReplace replaces the Raft_nodes in the transaction .
2570	initCGroup initializes the cgroup
2571	sqliteDirectAccess is used to update the journal access mode .
2572	ContainerGet returns a container .
2573	ContainerID returns the ID of a container .
2574	ContainerExists checks if a container exists in the cluster .
2575	ContainsFields returns true if all of the fields of the mapping match the given fields .
2576	FieldByName returns a field by its name
2577	FieldColumnName returns the column name for the given field name .
2578	FilterFieldByName returns a Field by name .
2579	ColumnFields returns all fields in a map .
2580	ScalarFields returns the field s value .
2581	RefFields returns the fields of the mapping .
2582	Column returns the column name .
2583	ZeroValue returns the zero value for a field .
2584	FieldColumns returns a comma separated list of fields .
2585	FieldArgs returns a comma - separated list of fields .
2586	FieldParams returns a comma - separated list of fields .
2587	FieldCriteria generates a query criteria from fields .
2588	initDataClusterApply applies the given configuration to the container .
2589	JsonFormatEx returns a format for JSON records .
2590	formatLogfmtValue returns the logfmt value .
2591	ResolveTarget resolves a target by name
2592	Write implements the io . Writer interface
2593	updateNodeVersion updates the node version .
2594	selectNodesVersions returns the version of the node .
2595	GetArchitectures returns the architectures for the local architecture
2596	RuntimeLiblxcVersionAtLeast returns true if runtimeLiblity is compatible with runtimeLiblity .
2597	GetExecPath returns the executable path
2598	Connect creates a new LXD container server
2599	ConnectIfContainerIsRemote returns a container server connected to a container .
2600	ConnectIfVolumeIsRemote checks if a volume is present on the cluster
2601	SetupTrust creates a new TLS certificate
2602	GetStoragePools returns a list of storage pools
2603	GetStoragePool gets a StoragePool by name
2604	CreateStoragePool creates a new storage pool
2605	UpdateStoragePool updates a storage pool
2606	DeleteStoragePool deletes a storage pool
2607	GetStoragePoolResources retrieves a StoragePool
2608	initDirs initializes the directories .
2609	Config returns the configuration for the transaction .
2610	UpdateConfig updates an existing config .
2611	Config returns the configuration for the transaction .
2612	UpdateConfig updates an existing config .
2613	storagePoolClusterConfigForEtag returns the storage pool configuration for the given storage node config .
2614	GetEvents returns a list of events .
2615	LogfmtFormat returns a log . Format for logging .
2616	StorageVolumeNodeAddresses returns the list of node addresses for a given node .
2617	StorageVolumeNodeGet returns the name of a storage volume .
2618	StorageVolumeConfigGet returns the configuration for a given volume .
2619	StorageVolumeDescriptionGet returns the description of a volume .
2620	StorageVolumeIsAvailable checks if a volume is available on a cluster
2621	StorageVolumeDescriptionUpdate updates the description of a volume .
2622	StorageVolumeConfigAdd adds a new volume config to the store .
2623	StorageVolumeConfigClear clears a storage volume config .
2624	storageVolumeIDsGet returns a slice of storage volume IDs .
2625	StorageVolumeCleanupImages deletes all image - volumes from the cluster .
2626	StorageVolumeMoveToLVMThinPoolName deletes the vm . thinpool from the database .
2627	L prints to the Buffer .
2628	code returns the source code .
2629	Pretty returns a string representation of the input .
2630	NetworkPublicKey returns the public key of the endpoints .
2631	NetworkPrivateKey returns the private key
2632	NetworkCert returns the network certificate
2633	NetworkAddress returns the address of the listener .
2634	NetworkUpdateAddress updates the endpoint
2635	NetworkUpdateCert updates the cert for the given network .
2636	networkCreateListener creates a net . Listener
2637	Accept implements the net . Listener interface .
2638	Config sets the TLS configuration for the listener
2639	IsOffline checks if the node is offline
2640	NodeByAddress looks up a NodeInfo by its address .
2641	NodePendingByAddress returns the node info for the given address .
2642	NodeByName looks up a node by name . Returns ErrNoSuchObject if not found .
2643	NodeName returns the name of the node .
2644	NodeAddress returns the address of a node .
2645	NodeIsOutdated returns true if the local node is older than the local node .
2646	NodesCount returns the number of nodes in the transaction .
2647	NodeRename renames a node .
2648	nodes runs all nodes in a transaction .
2649	NodeAdd adds a node to the transaction .
2650	NodePending updates the node with the given id .
2651	NodeUpdate updates a node .
2652	NodeRemove removes a node from the database .
2653	NodeHeartbeat updates the node s heartbeat .
2654	NodeIsEmpty checks if a node is empty .
2655	NodeClear clears a node .
2656	NodeOfflineThreshold retrieves the node offline threshold .
2657	NodeUpdateVersion updates a node .
2658	Transaction runs a function in a transaction .
2659	rollback rolls back a transaction .
2660	ProfileURIs returns the URIs for a given profile filter
2661	ProfileGet returns a profile .
2662	ProfileExists checks if a profile exists in the cluster .
2663	ProfileConfigRef returns a map of profile config for a given profile filter
2664	ProfileUsedByRef returns a map of profile used by a given filter
2665	ProfileCreate creates a new profile .
2666	ProfileRename renames a profile .
2667	ProfileDelete removes a profile .
2668	ServerTLSConfig returns the TLS configuration for the server .
2669	NetworkInterfaceAddress returns the network interface address .
2670	IsAddressCovered returns true if the two addresses are covered by the given address .
2671	SelectObjects is a convenience wrapper around SelectObjects .
2672	DeleteObject deletes an object from a table . Returns true if the object was deleted false otherwise .
2673	loop runs the task .
2674	IsTerminal returns true if the given file descriptor is a terminal .
2675	socketUnixListen opens a unix socket on a unix socket
2676	socketUnixRemoveStale removes a stale unix socket
2677	SocketUnixSetPermissions sets the permissions on the local socket
2678	SocketUnixSetOwnership sets the ownership of the local socket
2679	cephOSDPoolExists returns true if the OCI pool exists
2680	cephOSDPoolDestroy destroys an OCI pool
2681	cephRBDVolumeExists checks if the volume exists in the cluster
2682	cephRBDSnapshotProtect runs ceph RBBD unprotected
2683	cephRBDCloneCreate creates a copy of the cluster
2684	cephRBDSnapshotListClones returns the list of clones for the cluster
2685	cephRBDVolumeMarkDeleted marks the node as deleted
2686	cephRBDVolumeUnmarkDeleted is called when a volume is deleted
2687	cephRBDVolumeRename renames the ceph volume name
2688	cephRBDVolumeSnapshotRenameRenameRenename renames the snapshot
2689	cephRBDSnapshotDelete removes a snapshot from the cluster
2690	cephRBDVolumeCopy copies the CephRBD volume
2691	cephRBDVolumeListSnapshots returns a list of snapshots for a volume
2692	getRBDSize returns volume size
2693	getRBDFilesystem returns the name of the RBDFilesystem .
2694	copyWithoutSnapshotsFull copies the contents of the container to the target container .
2695	copyWithoutSnapshotsSparse copies the source container to the target container
2696	GetConfigCmd returns cobra . Command for GetConfig
2697	SetConfigCmd returns cobra . Command for setting config
2698	NewSharder returns a new sharder .
2699	NewRouter returns a new instance of Router .
2700	Renewed user credentials
2701	NewLocalClient returns a new Client instance .
2702	AddSpanToAnyExisting adds a new span to the context and returns it .
2703	InstallJaegerTracerFromEnv installs a jaeger tracing API .
2704	UnaryClientInterceptor returns a new UnaryClientInterceptor .
2705	StreamClientInterceptor returns a new StreamClientInterceptor .
2706	UnaryServerInterceptor returns a new unary server interceptor
2707	StreamServerInterceptor returns a new StreamServerInterceptor .
2708	CloseAndReportTraces closes the global Tracer
2709	newWriter returns a new Writer
2710	For is part of the Backoff interface .
2711	Log implements the Logger interface .
2712	Format implements Formatter .
2713	NewGRPCLogWriter returns a new logger
2714	Read reads config from disk .
2715	Write the config
2716	Read from the underlying io . Reader
2717	Write implements io . Writer .
2718	NewReadWriter returns a new ReadWriter .
2719	RunGitHookServer runs the hook server
2720	newLoggingPipe returns a new instance of loggingPipe .
2721	Read implements the io . Reader interface .
2722	Write implements the logging . Writer interface .
2723	Accept returns the next connection .
2724	Close closes the listener
2725	errorf creates a new hash tree error .
2726	InitWithKube initializes the kubecon service
2727	GetEtcdClient returns the etcd client
2728	GetKubeClient returns kubernetes client
2729	NewHasher returns a new Hasher .
2730	HashJob returns the hash of a job ID .
2731	HashPipeline returns the hash of a pipeline
2732	Status returns the status of the pipeline
2733	Cancel cancels a job
2734	Conns returns gRPC client connections
2735	Clients returns a list of clients
2736	NewClient creates a new grpc client
2737	RunFixedArgs creates a new cobra . Command that runs numArgs .
2738	RunBoundedArgs returns a cobra . RunFoundedArgs that runs the command in a given range .
2739	Run is a wrapper for Run .
2740	ErrorAndExit prints an error to stderr and exits .
2741	ParseCommit parses a git commit
2742	ParseBranch parses a branch from a git branch .
2743	ParseFile parses a file and returns a pointer to it .
2744	Set appends a string to the argument .
2745	SetDocsUsage sets the docs usage for the command
2746	makeCronCommits creates a list of cron commits
2747	Writer is part of the Tracer interface .
2748	Reader implements Client .
2749	Delete deletes a named node
2750	Walk invokes the Walk method on the client .
2751	Exists - checks if name exists
2752	GetBlock returns a block from a hash .
2753	Health is part of the server .
2754	split splits the given path and returns the name and base .
2755	ValidatePath returns an error if the given path is invalid .
2756	MatchDatum returns true if the input files match the filter
2757	NewCacheServer returns a new GroupCacheServer .
2758	authorizePipelineOp ensures that the pipeline operation is valid .
2759	sudo runs f on the pps user
2760	setPipelineDefaults sets defaults for PipelineInfo
2761	incrementGCGeneration increments GC generation
2762	NewDebugServer returns a new debug server .
2763	Health returns the health of the cluster .
2764	newObjBlockAPIServer creates a new BlockAPI server
2765	watchGC starts garbage collection
2766	splitKey is used to split a key
2767	NewWriter returns a new tabwriter for the given header .
2768	Write writes buf to w .
2769	PrintRepoHeader prints the repo header
2770	PrintRepoInfo prints repository info .
2771	PrintDetailedRepoInfo prints detailed information about a repository .
2772	PrintBranch prints the current branch info
2773	PrintCommitInfo prints the commit info to w .
2774	PrintDetailedCommitInfo prints the commit info .
2775	PrintFileInfo prints the file info to w .
2776	PrintDetailedFileInfo prints the file info .
2777	Add a string to a string
2778	RetryNotify will retry the operation until the operation is successful .
2779	Get retrieves an ID from the cache
2780	Delete deletes the given id .
2781	PrintJobInfo prints job info .
2782	PrintPipelineInfo prints pipeline info
2783	PrintWorkerStatus prints a worker status
2784	PrintDetailedJobInfo prints detailed information about a job .
2785	PrintDetailedPipelineInfo prints information about the pipeline .
2786	PrintDatumInfo prints a summary of the datumInfo .
2787	PrintDetailedDatumInfo prints detailed information about the datum .
2788	PrintFile prints a file
2789	ShorthandInput returns the shorthand for the input
2790	Retrieve retrieves credentials from vault .
2791	IsExpired reports whether this credential is expired .
2792	NewBranch creates a new Branch
2793	NewCommit creates a new Commit .
2794	NewCommitProvenance creates a new CommitProvenance
2795	NewFile returns a new File instance
2796	CreateRepo creates a new repository
2797	InspectRepo returns information about a repository
2798	ListRepo returns a list of repositories
2799	DeleteRepo deletes a repository
2800	BuildCommit builds a PFS commit
2801	StartCommitParent starts a new commit .
2802	FinishCommit finishes a pending commit .
2803	InspectCommit returns information about a commit .
2804	BlockCommit returns information about a commit .
2805	ListCommit lists all commits
2806	ListCommitF lists all commits in the repository
2807	ListCommitByRepo lists all commits in a given repository .
2808	CreateBranch creates a new branch
2809	InspectBranch returns information about a branch .
2810	ListBranch gets a list of BranchInfo
2811	SetBranch creates a new branch
2812	DeleteBranch deletes a branch .
2813	DeleteCommit deletes a commit .
2814	FlushCommit is part of the APIClient interface
2815	FlushCommitF is part of the PFS interface .
2816	FlushCommitAll flushes all commits .
2817	SubscribeCommit is part of the PFS interface .
2818	SubscribeCommitF is part of the PFS interface .
2819	PutObjectAsync implements the PutObjectWriteCloser interface for PutObjectWriteCloser .
2820	PutObject is part of the APIClient interface
2821	PutObjectSplit is part of the APIClient interface
2822	GetObject gets a PFS object
2823	GetObjectReader returns an io . ReadCloser for a PFS object
2824	GetObjects returns a stream of PFS objects .
2825	TagObject tags an object
2826	ListObject lists all PFS objects in the API
2827	InspectObject gets an object info by hash .
2828	GetTag retrieves a single tag
2829	GetTagReader is part of the APIClient interface
2830	ListTag calls f for each tag
2831	Compact is part of the APIClient interface .
2832	NewPutFileClient creates a new PutFileClient
2833	PutFileOverwrite is part of the PutFileClient interface .
2834	Close closes the PutFileClient .
2835	CopyFile implements Pfs . CopyFile
2836	GetFile is part of the API .
2837	GetFileReader is part of the API interface .
2838	GetFileReadSeeker returns an io . ReadSeeker
2839	InspectFile returns information about a file .
2840	ListFile lists all file descriptors
2841	ListFileHistory returns a list of FileInfo
2842	ListFileF is part of the PFS interface .
2843	Walk calls the given function for each file in the repository .
2844	DeleteFile deletes a file
2845	Write implements the PutObjectWriteCloser interface .
2846	Close implements the PutObjectWriteCloser interface .
2847	PrettyPrintVersionNoAdditional pretty prints version number
2848	recursiveBlockQuoteExamples recursively recursively recursively recursively
2849	errMissingField is the error response for a missing field .
2850	validateFields validates the fields of a request
2851	putConfig writes the given configuration to the storage .
2852	getConfig retrieves the configuration from the storage .
2853	Serve runs the given server options .
2854	NewPuller creates a new puller
2855	PullTree pulls hashes from a PUT tree
2856	Push pushes a commit to the given root
2857	PushObj pushes a commit to the given root
2858	PushFile pushes a file to Pusher .
2859	Dump dumps debug information to the given io . Writer .
2860	Profile is part of the APIClient interface
2861	Binary writes the binary representation of the client
2862	RegisterCacheStats registers the cacheStats
2863	wait waits for n times .
2864	RunWorkload runs a single worker .
2865	createRepo creates a new repository
2866	advanceCommit adds a new commit to the worker .
2867	RandString generates a random string
2868	NewReader returns an io . Reader that reads bytes from the given rand .
2869	iterDir calls f for each file in a directory .
2870	FSSize returns the size of the hash tree .
2871	Diff is the implementation of Diff .
2872	Serialize writes the hash tree to an io . Writer .
2873	Deserialize takes an io . Reader and deserializes the hash tree .
2874	Copy copies the hash tree from the database
2875	Destroy closes the hash tree .
2876	PutFileOverwrite implements the PFSHashTree interface .
2877	PutDirHeaderFooter adds a header to the hash tree .
2878	PutFileHeaderFooter implements the HashTree interface .
2879	deleteDir deletes a directory .
2880	NewReader returns a new Reader reading from r .
2881	Read reads a MergeNode .
2882	NewWriter returns a new Writer writing to w .
2883	Write writes a MergeNode to the Writer .
2884	Copy copies from r to w .
2885	Index returns the contents of the index .
2886	GetRangeFromIndex returns the range from the given prefix .
2887	NewFilter returns true if numTrees are equal to numTrees .
2888	PathToTree converts path to N trees .
2889	Merge writes the set of readers to the writer .
2890	Hash implements the HashTree interface .
2891	IsGlob returns true if the pattern matches a glob pattern .
2892	GlobLiteralPrefix returns the prefix of the given pattern .
2893	GetHashTreeObject gets a HashTree object from a PFS object
2894	GetHashTreeTag returns the hash tree for a PFS
2895	PutHashTree creates a HashTree with the given tags .
2896	NewChildCursor returns a new ChildCursor .
2897	Next moves the cursor to the next key .
2898	NewOrdered creates a new ordered directory
2899	MkdirAll creates a new directory
2900	PutDir implements the Ordered interface .
2901	Serialize encodes the Ordered objects into an io . Writer .
2902	NewUnordered returns a new Unordered object .
2903	Ordered returns an ordered list of all the files in this order .
2904	revokeUserCredentials revokes user credentials .
2905	NewAPIServer returns a new APIServer .
2906	String returns the version as a string .
2907	getPipelineInfo returns information about the pipeline
2908	removeStr removes a string from the slice . Returns true if the slice was removed .
2909	PublicCertToPEM returns PEM - encoded certificate
2910	GenerateSelfSignedCert generates a new self - signed certificate for the given address . If name is non - nil it will be used .
2911	ActivateCmd implements the ActivateCmd interface for Pachyder
2912	DeactivateCmd returns a cobra command for Deactivate
2913	LoginCmd returns the cobra command for the user
2914	LogoutCmd returns a cobra command for logout commands
2915	WhoamiCmd returns cobra command for user
2916	CheckCmd returns cobra . Command for testing
2917	GetCmd returns the cobra command for the get command
2918	SetScopeCmd returns cobra . Command for SetScope
2919	ListAdminsCmd returns a cobra command for list admins
2920	ModifyAdminsCmd returns a cobra . Command for modifying admins
2921	GetAuthTokenCmd returns a cobra . Command for get auth token
2922	UseAuthTokenCmd returns cobra . Command for use auth token
2923	Cmds returns the CLI commands for the CLI
2924	ParseScope parses a scope string .
2925	IsErrNotActivated checks if the given error is not an error
2926	IsErrPartiallyActivated returns true if the given error is a partial activation error .
2927	IsErrNotSignedIn returns true if the error is a NotSignedIn error .
2928	IsErrBadToken returns true if the error indicates that the error is ErrBadToken .
2929	IsErrNotAuthorized returns true if the error indicates that the error is not authorized .
2930	IsErrInvalidPrincipal returns true if the error is a valid principal .
2931	IsErrTooShortTTL returns true if the error indicates that the given error should be truncated .
2932	NewDatumFactory creates a new datumatumFactory .
2933	NewCollection creates a new collection .
2934	Path returns the path to the given key .
2935	getIndexPath returns the path for the given field key .
2936	getMultiIndexPaths returns a list of path paths for a given field .
2937	Upsert inserts a value into the collection .
2938	get is part of the Collection interface .
2939	List is part of the Collection interface .
2940	Watch is part of the Collection interface .
2941	WatchByIndex returns a watcher for a given index
2942	WatchOne returns a watcher for a given key .
2943	WatchOneF is part of the Collection interface .
2944	Get returns a ReadCloser for the given key .
2945	Keys returns a sorted list of keys .
2946	Clear removes all keys from the cache .
2947	NewHTTPServer returns a new httprouter
2948	NewDeployServer returns a new APIServer .
2949	Export writes the specified images to the given io . Writer .
2950	Import loads an image stream from the given io . Reader
2951	DatumTagPrefix returns the DatumTag prefix for a given salt
2952	NewPFSInput returns a new PFSInput .
2953	NewPFSInputOpts creates a new PFSInput .
2954	NewJobInput creates a new JobInput .
2955	NewPipelineInput creates a new PipelineInput .
2956	CreateJob creates a new pipeline
2957	ListJobF lists all jobs
2958	ListJobF lists all jobs in the pipeline
2959	FlushJob flushes the given commits and flushes them .
2960	FlushJobAll flushes all of the given commits .
2961	DeleteJob deletes a job .
2962	StopJob stops a running job .
2963	RestartDatum is part of the APIClient interface
2964	ListDatum streams a list of datumInfos in the API
2965	ListDatumF invokes f for a given job
2966	InspectDatum is part of the APIClient interface
2967	Next moves the next log message to the end of the stream .
2968	InspectPipeline returns information about a pipeline
2969	ListPipeline returns all PipelineInfo
2970	DeletePipeline deletes a pipeline
2971	StartPipeline starts a new pipeline
2972	StopPipeline stops a pipeline
2973	RerunPipeline renames a pipeline
2974	CreatePipelineService creates a new pipeline
2975	GetDatumTotalTime returns the total time of the process stats
2976	Mount is used to mount a new file system
2977	NewBufPool returns a new BufPool .
2978	StorageRootFromEnv retrieves storage root from environment variables
2979	BlockPathFromEnv returns the path to the block s path .
2980	NewGoogleClient creates a new Google Cloud Storage Client .
2981	NewGoogleClientFromSecret creates a new Google Cloud Storage Client .
2982	NewGoogleClientFromEnv creates a new Client from the environment variables
2983	NewMicrosoftClientFromSecret creates a new Windows client from a secret
2984	NewMicrosoftClientFromEnv creates a new Microsoft Client from an environment variable
2985	NewMinioClientFromSecret creates a minio client from a secret file
2986	NewMinioClientFromEnv creates new minio client from environment variables
2987	NewAmazonClientFromSecret creates a new Amazon EC2 client from Amazon S3 API
2988	NewAmazonClientFromEnv returns an instance of Client based on environment variables
2989	NewClientFromURLAndSecret creates a new Client from an object store URL
2990	ParseURL parses a URL string into an ObjectStoreURL .
2991	NewClientFromEnv creates a new Client from a storage backend
2992	NewExponentialBackOffConfig returns a new exponential backoff .
2993	Close closes the underlying ReadCloser .
2994	Close closes the WriteCloser .
2995	IsRetryable returns true if the error is a retryable error .
2996	RunStdin runs the command with the given stdin
2997	RunIODirPath runs the specified command in the specified directory
2998	NewAuthServer creates a new auth server
2999	expired .
3000	getOneTimePassword gets an authentication code for a username
3001	hashToken returns the SHA256 hash of the token .
3002	getAuthToken extracts the token from the context
3003	Returns canonicalized subjects .
3004	Matches checks if the actual match matches the expected pattern .
3005	OneOfMatches is similar to OneOfMatch but panics if the matches matches .
3006	Equal asserts that two values are equal .
3007	NotEqual asserts that the expected values are equal .
3008	oneOfEquals returns true if slice is equal to slice .
3009	NoneEquals asserts that the actual and expected values are equal .
3010	NoError asserts that err is not nil .
3011	NoErrorWithinT is like NoErrorWithin but does not return an error .
3012	NoErrorWithinTRetry is a test - spy implementation of RunWithinTRetry .
3013	YesError asserts that err is not nil .
3014	NotNil asserts that object is not nil .
3015	Nil asserts that the object is nil .
3016	False asserts that the given value is false .
3017	NewSTM creates a new STM .
3018	NewDryrunSTM creates a new STM .
3019	newSTMRepeatable runs a new STM repeatable operation .
3020	newSTMSerializable returns TxnResponse .
3021	newSTMReadCommitted creates a new STM ReadCommitted .
3022	commit commits the transaction .
3023	Pipelines returns all the pipeline information .
3024	Jobs returns all jobs in etcd
3025	NewTicker returns a new ticker .
3026	nodeToMap converts etcd node to out
3027	ServiceAccount returns a ServiceAccount resource .
3028	ClusterRole returns a ClusterRole object that represents a ClusterRole
3029	RoleBinding returns a RoleBinding object that represents a RoleBinding .
3030	GetSecretEnvVars returns the environment vars for the given storage backend
3031	PachdService returns a new Pachd service .
3032	GithookService returns a Githhook service .
3033	EtcdDeployment creates an etcd deployment
3034	EtcdStorageClass returns the etcd storage class .
3035	EtcdVolume creates a new etcd . PersistentVolume .
3036	EtcdNodePortService returns the etcd service port .
3037	EtcdHeadlessService returns a Kubernetes Service .
3038	EtcdStatefulSet executes EtcdStatefulSet .
3039	DashDeployment returns a Deployment .
3040	DashService returns a v1 . Service .
3041	WriteSecret is used to encode a secret
3042	GoogleSecret returns a map of secret key - value pairs .
3043	WriteDashboardAssets encodes dashboards to JSON
3044	WriteLocalAssets writes the local assets to the encoder .
3045	WriteCustomAssets is used to encode custom assets
3046	WriteAmazonAssets marshals an Amazon CloudFront Service Account
3047	WriteGoogleAssets is used to encode a Google Cloud Storage object
3048	WriteMicrosoftAssets encodes a Microsoft Asset into an object
3049	Images returns the set of images used by the client
3050	AddRegistry adds a registry name to the registry
3051	withCanonicalRandomizationFactor sets the randomization factor .
3052	Reset resets the backoff counter
3053	increments current interval
3054	NewBlockAPIServer returns a new BlockAPIServer .
3055	LocalStorage creates a new local storage client .
3056	deleteJob deletes an existing job
3057	writeXML writes a XML response with status code .
3058	clean1_7HashtreePath cleans up the given path
3059	NewFromAddress creates a new APIClient from the given address
3060	getUserMachineAddrAndOpts returns the address and options for the user machine .
3061	NewInCluster returns a new APIClient object
3062	Close closes the API connection
3063	DeleteAll deletes all services
3064	SetMaxConcurrentStreams sets the maximum number of concurrent streams .
3065	WithCtx returns a copy of the APIClient with ctx .
3066	NewDLock returns a new DLock implementation
3067	DatumID returns the DatumID of a file
3068	runUserErrorHandlingCode runs the user error handling code .
3069	HashDatum hashes the datum of a pipeline
3070	HashDatum15 computes the hash of the pipeline data .
3071	Status returns worker status
3072	Cancel cancels the API
3073	mergeStats merges two processes .
3074	mergeChunk merges the chunk results into a chunk .
3075	IsCommitNotFoundErr checks if the error is a commit not found error .
3076	IsCommitDeletedErr checks if the error is a commit deletion error .
3077	IsCommitFinishedErr checks if the given error is a commit .
3078	IsRepoNotFoundErr returns true if the error is a repository error .
3079	IsBranchNotFoundErr returns true if the error is a branch not found error .
3080	IsFileNotFoundErr returns true if the error is a file not found error .
3081	Version returns the current version
3082	validateRepoName checks whether given repository name is valid .
3083	newDriver creates a new storage driver
3084	inspectCommit inspects the commit on the given commit
3085	scratchCommitPrefix returns the path to the given commit .
3086	scratchFilePrefix returns the path to the given file .
3087	getTreeForFile returns the hash tree for the given file .
3088	provenant on
3089	nodeToFileInfo converts a NodeInfo to a FileInfo .
3090	fileHistory runs f on the given file .
3091	upsertPutFileRecords upserts a PutFileRecords object .
3092	ReadRow reads a single row
3093	NewReporter creates a new Reporter
3094	ReportUserAction reports how to report a user action .
3095	FinishReportAndFlushUserAction adds an action to a flush and then flushes the action .
3096	Read implements the io . Reader interface .
3097	ActivateCmd returns the cobra command for activation
3098	GetStateCmd returns the cobra command for GetState
3099	Cmds returns the cobra command for Enterprise
3100	NewConfiguration returns a new Configuration instance
3101	Repos returns a collection of repositories
3102	PutFileRecords returns a collection of PutFileRecords
3103	Commits returns a collection of commits
3104	Branches returns all branches
3105	OpenCommits returns a collection of pending commits
3106	NewDAG creates a new DAG .
3107	NewNode adds a new node to the DAG .
3108	Sorted returns a list of all the nodes in the DAG .
3109	Leaves returns a list of all the leaves in the DAG .
3110	Ancestors returns the ancestors of the node in the DAG .
3111	Descendants returns a list of all descendants of the given id .
3112	Ghosts returns all the ids in the DAG .
3113	NewPortForwarder returns a new PortForwarder
3114	Run implements portforwarder .
3115	RunForDaemon starts a pachd daemon .
3116	RunForSAMLACS runs the samlac . RunForSamLACS
3117	RunForDashUI runs the dash UI
3118	RunForDashWebSocket runs the dash web server .
3119	RunForPFS runs the pachd for the given port .
3120	RunForS3Gateway runs the port forwarder
3121	Lock the port - forwarder
3122	Close shuts down the PortForwarder .
3123	Unmarshal unmarshals the Event into a struct
3124	UnmarshalPrev unmarshals the previous value into the Event
3125	MakeWatcher creates a new watcher
3126	CheckType returns nil if val is not nil .
3127	NewPool creates a new pool
3128	Do runs f in a goroutine .
3129	Close closes the pool
3130	buildImage builds a docker image
3131	pushImage pushes a docker image to the docker registry
3132	newMinioClient returns a new minio client
3133	newMinioClientV2 creates a new minio minio client
3134	newMinioWriter creates a new minio writer
3135	Close closes the writer .
3136	PipelineRepo returns a pfs . Repo for the pipeline
3137	RipelineRcName returns the Rc name for the pipeline
3138	GetRequestsResourceListFromPipeline gets resource list from pipeline info
3139	GetLimitsResourceListFromPipeline returns the resource list for the pipeline
3140	getNumNodes returns the number of parallelism nodes
3141	GetExpectedNumWorkers returns the number of expected number of nodes in the cluster
3142	GetExpectedNumHashtrees returns the number of expected hashtrees
3143	FailPipeline updates a pipeline state
3144	JobInput returns a deep copy of the pipeline input .
3145	PipelineReqFromInfo creates a CreatePipelineRequest from a PipelineInfo
3146	NewPipelineManifestReader returns a new ManifestManifestReader
3147	NextCreatePipelineRequest returns the next CreatePipelineRequest from the manifest .
3148	DescribeSyntaxError returns the original error if any .
3149	UpdateJobState updates an existing job state
3150	New returns a new UUID .
3151	Code returns the HTTP status code .
3152	NewHTTPError returns a new HTTPError .
3153	NewStorage creates a new Storage object
3154	DeleteAll deletes all items from storage .
3155	Chunk returns a slice of chunkSize chunks .
3156	ChunkReader reads from r until EOF .
3157	NewStreamingBytesReader returns a new StreamingBytesReader .
3158	WriteToStreamingBytesServer writes data to streamingBytesServer .
3159	WriteFromStreamingBytesClient reads from streamingBytesClient
3160	NewSidecarAPIServer creates a new sidecar API server .
3161	NewEnterpriseServer creates a new etcd server
3162	validateActivationCode validates activation code .
3163	Activate activates the given activation
3164	Deactivate deactivates an enterprise
3165	lookExtensions returns the path to the given path .
3166	Start starts the command .
3167	CombinedOutput runs the command and returns the combined output .
3168	StdinPipe returns an io . WriteCloser for the command .
3169	StdoutPipe returns a pipe that will be closed when the command starts .
3170	dedupEnvCase takes a case - insensitive string and returns a slice of strings .
3171	InputName returns the name of the input .
3172	SortInput sorts inputs
3173	InputBranches returns a list of all branches of an Input
3174	ValidateGitCloneURL validates git clone URL .
3175	containsEmpty checks if a slice is empty .
3176	NewAPIServer returns a new API server .
3177	Angle returns the time since the timestamp .
3178	TimeDifference returns the time difference between two timestamps .
3179	Duration converts a duration to a human - readable string .
3180	InspectCluster returns information about a cluster
3181	Extract calls Extract API .
3182	ExtractAll is part of the APIClient interface
3183	ExtractWriter is a wrapper for ExtractWriter
3184	ExtractURL calls ExtractURL . ExtractURL
3185	ExtractPipeline returns a CreatePipeline request
3186	Restore is part of the Admin interface
3187	RestoreReader is part of the AdminAPIClient interface .
3188	RestoreFrom will restore all objects from the APIClient .
3189	RestoreURL restores a URL
3190	IgnoreTypes returns a new cmp . Option that ignores all of the given types .
3191	AppendEllipsis appends an ellipsis .
3192	IsType returns true if t is a type .
3193	NameOf returns the name of the function .
3194	PointerOf returns a pointer to a new pointer .
3195	String returns the edit script .
3196	stats returns the statistics for an edit script .
3197	connect adds dst to the path .
3198	EquateNaNs returns an option that can be used to filter the contents of the query .
3199	Index returns the PathStep at the given index .
3200	Key returns the key of the index .
3201	String implements the Reporter interface .
3202	FormatType converts a type into a textNode .
3203	formatMapKey formats a map key .
3204	formatString returns a quoted string .
3205	formatHex converts a uint64 to a hex string .
3206	formatPointer returns a string representation of the pointer .
3207	Visit returns true if v is visited .
3208	retrieveUnexportedField returns the value of a pointer to a struct field .
3209	insert inserts the given cname into the field tree .
3210	matchPrefix returns true if the field tree matches the given path .
3211	canonicalName returns the names of the named field .
3212	FilterPath returns an option that filters the given filter function .
3213	normalizeOption takes a src and returns the first one .
3214	flattenOptions flattens src into dst .
3215	CanFormatDiffSlice returns true if the value is a slice .
3216	formatASCII formats an ASCII string ascii .
3217	coalesceAdjacentEdits takes an editScript and returns a list of statistics about the edit script .
3218	SortKeys returns a copy of vs .
3219	FormatDiff returns the diff of a value node .
3220	coalesceAdjacentRecords takes a report and returns a list of stats that have changed .
3221	Diff returns the difference between two objects .
3222	statelessCompare is the same as StatelessCompare except that it will only be called once .
3223	sanitizeValue returns a reflect . Value if v is nil .
3224	Check implements the Checker interface .
3225	makeAddr returns a copy of v .
3226	Marshal serializes the field to the visitor .
3227	String returns a string representation of the field .
3228	Set sets the tag to the given Span .
3229	Inject implements the TextMapPropagator interface .
3230	Extract implements TextMapPropagator interface .
3231	ToLogRecord converts LogData into a LogRecord .
3232	New returns a new MockTracer
3233	StartSpan is part of the Tracer interface .
3234	RegisterInjector registers injector for given format
3235	RegisterExtractor registers a new Extractor for a given format
3236	Inject injects an opentracing . SpanContext
3237	Extract is part of the Tracer interface .
3238	ContextWithSpan adds a new span to the context .
3239	Set implements opentracing . Span .
3240	Set adds a tag to the span .
3241	Set adds a flag to the span .
3242	SetString implements the opentracing . Span interface .
3243	EmitString emits a string value
3244	EmitLazyLogger emits a log . LazyLogger
3245	RunAPIChecks runs the specified APIChecks .
3246	CheckBaggageValues is an APICheck option to set baggage values .
3247	CheckExtract is a functional option on APIChecker .
3248	CheckInject specifies whether the service should be injected .
3249	CheckEverything returns an APICheck option that can be used for testing .
3250	UseProbe is a functional option for testing .
3251	WithBaggageItem adds a baggage item to the span .
3252	Tags returns a copy of the span .
3253	Tag returns a value for a given key .
3254	Logs returns a copy of the logs .
3255	Context returns the span context
3256	SetTag sets a tag for a span
3257	SetBaggageItem sets a baggage item in the span context
3258	BaggageItem returns the value of a baggage item .
3259	Finish records the timing of the span .
3260	FinishWithOptions implements the opentracing . Span interface .
3261	String returns a string representation of the span
3262	LogFields logs a log entry
3263	logFieldsWithTimestamp adds a log record to the log .
3264	LogKV logs key - value pairs .
3265	LogEvent logs an event .
3266	LogEventWithPayload logs an event .
3267	SetOperationName sets the operation name
3268	registersDirPath returns the path to the registries directory .
3269	loadAndMergeConfig loads the config from a directory
3270	ParseReference converts a string to an ImageReference .
3271	NewReference creates a new ImageReference from a DockerRef
3272	CheckAuth checks if auth is valid
3273	doHTTP sends an HTTP request
3274	detectPropertiesHelper is used to detect the properties of the docker registry
3275	detectProperties calls DetectProperties on the docker client
3276	getExtensionsSignatures downloads the extensions for a given manifest
3277	NewTransport returns a new http . Transport .
3278	readRegistryConf reads the config file from the registry
3279	GetRegistries returns a list of registry names .
3280	GetInsecureRegistries returns the list of insecure registries .
3281	RegistryConfPath returns the path to the system registry configuration .
3282	NewOptionalBool creates a new OptionalBool
3283	changeState changes the state of the policy context .
3284	Destroy destroys the policy context .
3285	policyIdentityLogName returns the name of the given image reference
3286	RequirementsForImageRef returns the policy requirements for an image reference
3287	ParseImageName returns an ImageReference from an image name .
3288	BlobInfoFromOCI1Descriptor converts OCI1 to a types . BlobInfo
3289	OCI1FromManifest unmarshals OCI1 from JSON
3290	OCI1FromComponents creates an OCI1 from the image spec
3291	newReference creates a DockerReference from a named reference .
3292	tagOrDigest returns the digest or an error if any .
3293	updateEmbeddedDockerReference adds an Embedded Docker reference to the dest .
3294	isTTY returns true if w is a TTY .
3295	copyUpdatedConfigAndManifest copies the contents of src into a new image and returns it .
3296	createProgressBar is responsible for creating a progress bar
3297	copyConfig copies config blobs from src to dest .
3298	diffIDComputationGoroutine computes the diffID of the given layerStream .
3299	computeDiffID computes the diff ID for the given stream .
3300	compressGoroutine compresses src into dest .
3301	newDockerClient creates a docker client for the given system context
3302	defaultPolicyPath returns the default policy path .
3303	NewPolicyFromFile creates a new policy from a file
3304	NewPolicyFromBytes creates a new Policy from a byte array
3305	newPolicyRequirementFromJSON creates a PolicyRequirement from JSON data
3306	newPRSignedBy creates a new PRSignedBy .
3307	newPRSignedByKeyPath creates a new signed by keyPath
3308	NewPRSignedByKeyPath creates a new PolicyRequirement for the specified keyPath
3309	newPRSignedByKeyData returns a new SignedByKeyData instance
3310	NewPRSignedByKeyData creates a new PolicyRequirement instance
3311	IsValid returns true if sbKeyType is valid
3312	newPRSignedBaseLayer creates a new SignedBaseLayer .
3313	newPolicyReferenceMatchFromJSON creates a PolicyReferenceMatch from JSON data
3314	newPRMExactReference creates a new PRMExactReference
3315	newPRMExactRepository creates a new PRMExactRepository .
3316	newImageSource creates a new storageImageSource .
3317	getBlobAndLayerID returns an io . ReadCloser and layerID .
3318	computeID returns the ID for the given manifest .
3319	PutManifest inserts a manifest into the destination .
3320	PutSignatures stores the provided signatures .
3321	newImage returns a new instance of the storage image .
3322	newImageSource returns a new ImageSource .
3323	LoadManifestDescriptor loads manifest descriptor
3324	Close closes the image .
3325	append adds s to the list .
3326	isMultiImage returns true if the image is multi - image .
3327	lockPath acquires a lock on path .
3328	unlockPath unlocks the ref count for the given path .
3329	view opens a database view .
3330	update is used to update the database .
3331	uncompressedDigest returns the digest for the given digest or an empty string if none is found .
3332	appendReplacementCandidates appends the replacement candidates to the candidate bucket .
3333	indexExists returns true if the index file exists .
3334	createSignature creates a new signature for the image
3335	ParseReference returns an ImageReference from a string
3336	NewReference creates a new image reference
3337	getIndex returns the image index
3338	LoadManifestDescriptor loads manifest descriptor
3339	blobPath returns the path to the blob with the given digest .
3340	SignDockerManifest signs a manifest with the given Docker reference
3341	VerifyDockerManifestSignature verifies the unverified manifest against the unverified manifest
3342	newOpenshiftClient returns a new OpenShift API client .
3343	doRequest sends a request to OpenShift API
3344	getImage retrieves an ImageStreamImage by name
3345	Convert docker image reference
3346	ensureImageIsResolved checks if the image is resolved
3347	newImageDestination creates a new ImageDestination
3348	newUntrustedSignature creates a new UntrustedSignature .
3349	MarshalJSON encodes untrustedSignature to JSON .
3350	UnmarshalJSON implements json . Unmarshaler
3351	verifyAndExtractSignature verifies a unverified signature .
3352	RewriteReference is used to rewrite a reference
3353	getV1Registries returns a list of registry registries
3354	getConfigPath returns the config path for the system
3355	GetRegistries returns the system registry configuration .
3356	readRegistryConf reads the config bytes from the config file .
3357	Manifest returns the blob s manifest .
3358	ConfigUpdate updates the image config
3359	parseImageAndDockerReference parses the Docker image and returns the Docker reference and an error .
3360	parseDockerReferences parses two docker images and returns a reference to the names of the two Docker images .
3361	ListNames returns a sorted list of transport names .
3362	NewReference creates a new image reference
3363	signaturePath returns the path to the manifest file
3364	ValidateImageName returns an error if the image name is invalid .
3365	SplitPathAndImage splits a path and returns its components .
3366	ValidateOCIPath returns an error if the path is not a valid OCI reference .
3367	ValidateScope validates the scope .
3368	BlobInfoFromSchema2Descriptor converts a Schema2Descriptor to a types . BlobInfo .
3369	Schema2FromManifest creates a Schema2 from a manifest .
3370	Schema2FromComponents creates a new Schema2 from the provided components .
3371	SetAuthentication sets the credentials for the given registry
3372	RemoveAuthentication removes authentication information from the registry
3373	RemoveAllAuthentication removes all credentials from the system
3374	readJSONFile reads a json file from the given path
3375	modifyJSON reads the contents of the config file and updates the user .
3376	findAuthentication returns the credentials and credentials for the given path .
3377	NewDestination returns a new destination for the given reference .
3378	AddRepoTags adds tags to the destination .
3379	writeLegacyLayerMetadata writes a layer metadata to the destination .
3380	sendSymlink sends a symlink to the destination .
3381	sendBytes sends a byte slice to the destination .
3382	sendFile sends a tar stream to the destination .
3383	Commit closes the tar .
3384	imageMatchesRepo returns true if the image matches the given reference .
3385	resolveImage attempts to resolve an image reference
3386	Transport returns a new instance of ImageTransport
3387	StringWithinTransport returns a string representation of the storage reference
3388	PolicyConfigurationNamespaces returns a list of namespaces for this policy
3389	GzipDecompressor returns gzip decompressor
3390	Bzip2Decompressor returns the Bzip2 decompressor
3391	XzDecompressor returns an io . ReadCloser that decompresses rz .
3392	DetectCompression detects a decompressor and returns its decompressor .
3393	newImageDestination returns a new ImageDestination
3394	mountBlob is used to mount a blob
3395	bicTransportScope returns a new instance of the BICTransportScope .
3396	newBICLocationReference creates a new instance of BICLocationReference .
3397	parseBICLocationReference returns a reference to a BICLocationReference .
3398	NewSourceFromStream creates a new source from an input stream
3399	readTarComponent reads a tar component
3400	ensureCachedDataIsPresent checks if the source is present in the source .
3401	loadTarManifest loads the manifest from the source .
3402	Close removes the source
3403	newImageDestination returns a new instance of the ImageDestination interface
3404	imageLoadGoroutine sends an image to the docker engine
3405	NewReference creates a new image reference
3406	createOCIRef creates a new OCI image reference
3407	createUntarTempDir creates a temp directory and deletes it .
3408	destructivelyPrioritizeReplacementCandidatesWithMax returns a slice of BICReplacementCandidates with maxCandidates .
3409	newImageDestination returns a new ImageDestination .
3410	resolveExistingPathToFullyExplicit returns the absolute path to the given path .
3411	newImageDestination returns a new instance of a dirImageDestination
3412	isDirEmpty checks if a directory is empty .
3413	removeDirContents removes all contents of a directory
3414	GetRepositoryTags returns the set of tags for a given image
3415	DefaultCache returns the default blobinfo for the system
3416	uncompressedDigestLocked returns the uncompressed digest if any .
3417	Close closes the image .
3418	PutManifest is part of the UnpackedImageStream interface .
3419	Commit writes the image to the dest directory .
3420	tarDirectory copies the contents of src into dst .
3421	ParseStoreReference returns a storageReference .
3422	chooseDigestFromManifestList takes a manifest list and returns the digest .
3423	ChooseManifestInstanceFromManifestList selects a manifest based on a manifest .
3424	manifestSchema1FromComponents returns a Schema1 for the given components .
3425	manifestDigest returns the digest for the instance digest if present .
3426	deleteImage deletes an image
3427	Schema1FromComponents creates a new Schema1 from a reference .
3428	init initializes Schema1 .
3429	ToSchema2Config converts a Schema1Config to JSON .
3430	Digest returns the digest .
3431	MatchesDigest returns true if the manifest matches the expected digest .
3432	NormalizedMIMEType returns the canonicalized MIME type .
3433	FromBlob creates a manifest from a manifest blob
3434	NewReference returns a reference to an image reference .
3435	layerPath returns the path to the layer s layer path .
3436	signaturePath returns the path to the given signature .
3437	New returns a new pool
3438	NewFunc returns a new pool that runs n workers concurrently .
3439	ProcessTimed processes a payload and waits for it to finish .
3440	SetSize sets the size of the pool .
3441	GetSize returns the number of workers in the pool
3442	TL returns the rectangle of the rectangle .
3443	BR returns the BR of the rectangle .
3444	CVBox returns a CvBox2D .
3445	Points returns the points in the box .
3446	FOURCC computes the 16 - bit sequence of 4 - bit vectors .
3447	Merge copies the contents of the image into dst .
3448	Split a source image into a source .
3449	AddWeighted adds a weight matrix to the specified destination .
3450	And computes two IplImage objects .
3451	AndWithMask computes the intersection of src2 and dst .
3452	AndScalar computes the intersection of src and dst .
3453	AndScalarWithMask computes the scalar and mask of a scalar .
3454	Or multiplies src and dst .
3455	OrWithMask computes the result of two sources .
3456	OrScalar computes the union of src and dst .
3457	OrScalarWithMask computes the scalar with the given mask and mask .
3458	addWithMask adds src to src2 .
3459	AddScalar adds a scalar to the specified image .
3460	AddScalarWithMask adds a scalar to a scalar .
3461	Subtracts src1 and dst2 .
3462	SubtractWithMask subtracts src2 from src2 .
3463	SubScalar performs a sub - scalar reduction of src .
3464	SubScalarWithMask submits a scalar value to a scalar .
3465	SubScalarRev is the same as SubScalar except that it takes a scalar value .
3466	SubScalarWithMaskRev submits a scalar value to dst .
3467	AbsDiff computes the absolute difference between two images .
3468	AbsDiffScalar computes the absolute difference of a scalar value .
3469	MeanStdDevWithMask computes the mean of src and mask .
3470	CreateSeq creates a sequence .
3471	Push adds element to seq .
3472	Pop removes an element from the sequence .
3473	PushFront inserts a new element to the seq .
3474	PopFront removes element from seq .
3475	GetElemAt returns the value at the specified index .
3476	RemoveAt removes the seq from the sequence .
3477	Delay returns an Option that sets the delay for the client .
3478	BackOffDelay returns the delay between n and b .
3479	Error implements the error interface .
3480	Arguments adds arguments to the request
3481	BodyString defines the request body as a body .
3482	BodyBytes defines the body of the request .
3483	Body defines the body of the request .
3484	Option adds a new option to the request
3485	Header adds a header to the request .
3486	Send sends the request and returns the response .
3487	Exec executes the request and decodes the response into the given struct
3488	Next returns the next message
3489	Cancel the output
3490	FileList returns a list of files
3491	Cat starts a cat command
3492	List issues a command to list all Ls objects .
3493	Pin pins a file at the specified path
3494	Pins returns a map of pin info for all pins .
3495	Version returns the version and commit
3496	SwarmPeers returns all known peers
3497	SwarmConnect connects to a remote address
3498	DagPutOptions returns a set of DagPutOptions .
3499	Pin is used to set the pin pin
3500	Kind is a functional option for creating a dagPutOption .
3501	Hash sets the hash for a dag PutOption
3502	AddDir adds a new directory to the shell .
3503	Publish a value to a node
3504	PublishWithDetails will publish a content hash to a remote host
3505	ResolveValue implements PlanValue .
3506	GenerateQuery generates a query for the given query .
3507	EncodeValue encodes a BindVariable .
3508	Lex returns the next token .
3509	skipStatement skips whitespace .
3510	reset resets the tokenizer .
3511	Preview returns the start of a statement .
3512	NewPlanValue converts an Expr to a PlanValue .
3513	StringIn checks if a string is in a slice of strings
3514	NewTrackedBuffer returns a new TrackedBuffer .
3515	NewStringArena returns a new instance of StringArena .
3516	NewString implements the Stringer interface .
3517	SpaceLeft returns the number of space left .
3518	ParseStrictDDL parses a DDL SQL statement .
3519	ParseNext parses the next token .
3520	Append appends SQLNode to buf .
3521	ExprFromValue converts Value to AST .
3522	Backtick converts a string to a backtick
3523	NewValue creates a new Value .
3524	String returns the value as a string .
3525	EncodeSQL encodes Value to BinWriter .
3526	EncodeSQL encodes InsertValues .
3527	EncodeSQL encodes TupleEqualityList .
3528	WalkStatement recursively calls WalkStatement .
3529	WalkSelect implements the SQLite interface .
3530	BindVariablesEqual compares two bind variables .
3531	New creates a new JWTMiddleware .
3532	HandlerWithNext satisfies the JWTMiddleware interface .
3533	FromAuthHeader extracts the Authorization header from the request .
3534	FromParameter returns a TokenExtractor that extracts token from the query
3535	FromFirst returns a TokenExtractor that extracts tokens from the request .
3536	getHelloPacket creates a new rpc packet from the topic
3537	NewFloodSubWithProtocols returns a new instance of a FloodSubServer .
3538	NewFloodSub creates a new FloodSub
3539	NewLRUBlacklist returns a Blacklist with the given capacity .
3540	NewRandomSub returns a new instance of a random pubsub router
3541	NewGossipSub creates a new GossipSub router
3542	NewPubSub creates a new PubSub
3543	WithValidateThrottle is a functional option that sets the maximum number of goroutines .
3544	WithBlacklist overrides the default blacklist
3545	handleRemoveSubscription is used to remove the given subscription .
3546	handleAddSubscription handles an addSubscription message .
3547	announce sends a message to all peers .
3548	notifySubs sends a message to all subscribers
3549	seenMessage returns true if there is a message with the given ID .
3550	subscribedToMsg returns true if the message is subscribed to this message .
3551	msgID returns the ID of the message
3552	pushMsg sends a message to the given peer
3553	validate checks if a message is valid
3554	validateSingleTopic checks whether a single message is valid for the given topic .
3555	getValidators returns a list of validators
3556	Subscribe is used to subscribe to a given topic
3557	SubscribeByTopicDescriptor creates a subscription for a topic descriptor
3558	GetTopics returns a list of topic names .
3559	Publish sends a message to a specific topic
3560	ListPeers returns a list of all known peers .
3561	WithValidatorTimeout sets the timeout for the request
3562	WithValidatorConcurrency sets the number of concurrent goroutines to use .
3563	RegisterTopicValidator registers a validator
3564	UnregisterTopicValidator unregisters validator
3565	DefaultMetricPrefix returns a metric name for a metric name .
3566	MetricWithPrefix returns a metric name with the given prefix .
3567	NewClient creates a new Client
3568	Call makes a call to the TChannel .
3569	CallPeer starts a new RPC call .
3570	CallSC is part of the SubChannel interface .
3571	ReadResponse reads the response from ArgReadable .
3572	Write headers .
3573	ResponseWriter creates a http . ResponseWriter from a TChannel
3574	ReadHeaders reads the headers from r .
3575	NewTCPRawRelay creates a Relay that wraps the given destinations .
3576	NewClient creates a new Client
3577	Advertise sends an advertising packet to the client .
3578	Handle processes an InboundCall .
3579	Start starts the tchannel server
3580	Port returns the server s port .
3581	SetStrategy sets the strategy for the peer list .
3582	Add adds a new peer to the list of peers .
3583	GetNew returns a new peer based on the prevSelected map
3584	Get returns the next peer in the list or an error if the peer is not present .
3585	Remove removes a peer from the list .
3586	Copy returns a copy of the PeerList
3587	Len returns the number of peers in the list .
3588	exists returns the peer score for the given hostPort .
3589	getPeerScore returns the peer score for the given host port .
3590	onPeerChange is called when a peer is changed .
3591	updatePeer updates the peer with newScore .
3592	getConn returns the connected connection .
3593	GetConnection returns a connection to the peer
3594	getConnectionRelay returns a new connection to the peer if it exists .
3595	canRemove returns true if the peer has been removed .
3596	addConnection adds a new connection to the peer .
3597	removeConnection removes a connection from the peer list and returns true if it was removed .
3598	connectionCloseStateChange is called when a peer is closed .
3599	Connect connects to the peer .
3600	BeginCall starts a new RPC call .
3601	NumConnections returns the number of incoming connections .
3602	NumPendingOutbound returns the number of currently pending outbound connections .
3603	isEphemeralHostPort returns true if hostPort is a ephemeral host port .
3604	Get returns the value for the given key .
3605	Set implements the KVHandler interface .
3606	ClearAll implements the KVHandler interface .
3607	NewChannel creates a new channel
3608	Serve starts listening on the given listener .
3609	ListenAndServe starts listening on the given host port .
3610	Register adds a handler to the channel .
3611	PeerInfo returns information about the peer .
3612	GetSubChannel returns a SubChannel with the given options .
3613	serve accepts incoming connections .
3614	Ping checks if the peer is alive .
3615	StatsTags returns a map of tags to tags .
3616	Connect initiates a new connection to the channel .
3617	exchangeUpdated is called when the peer is updated .
3618	updatePeer adds a new peer to the channel .
3619	addConnection adds a new connection to the channel .
3620	removeClosedConn removes the given connection from the channel .
3621	connectionCloseStateChange is called when a connection closes the channel .
3622	State returns the current state of the channel .
3623	NewReader returns a new Reader with the given io . Reader .
3624	ReadUint16 reads a uint16
3625	ReadString reads a string from the underlying reader
3626	ReadLen16String read a length string
3627	Register implements the Behavior interface .
3628	Run satisfies the Behavior interface .
3629	Get returns a new relay timer . If the pool is already stopped it will panic .
3630	Put adds the relay timer to the pool .
3631	Start starts the timer .
3632	Release releases the timer .
3633	NewLogger returns a Logger that writes to the given io . Writer .
3634	NewTCPFrameRelay creates a new Transport Relay
3635	tallyTags returns a set of tags for the known tags .
3636	Isolated resets the peer s state .
3637	Isolated returns true if the remote peer is isolated
3638	Register implements the SubChannel interface .
3639	GetHandlers returns all registered handlers
3640	StatsTags returns the tags for the SubChannel .
3641	registerNewSubChannel is used to register a new subchannel
3642	get a SubChannel
3643	getOrAdd returns a SubChannel or adds it to the map .
3644	Discover returns a list of host ports for a given service name
3645	Start starts the HTTP server
3646	listen initializes the HTTP server
3647	WriteRequest writes the HTTP request to the argument .
3648	ReadRequest reads the request and returns an http . Request object .
3649	NewReadBufferWithSize returns a new ReadBuffer with the given size .
3650	ReadByte implements io . ReadByte .
3651	ReadBytes implements io . ReadBytes .
3652	ReadString read a string
3653	ReadUint16 reads a uint16
3654	ReadUint32 reads a uint32
3655	ReadUint64 reads a uint64
3656	ReadUvarint reads a varint
3657	ReadLen8String read a string
3658	ReadLen16String read a length string
3659	FillFrom implements io . ReadFrom interface .
3660	Wrap implements the ReadBuffer interface .
3661	WriteSingleByte writes a single byte to the underlying io . Writer .
3662	WriteBytes writes to the buffer .
3663	WriteUint16 writes a uint16 to the buffer .
3664	WriteUint32 writes a uint32 to the buffer .
3665	WriteUint64 writes a uint64 to the buffer .
3666	WriteUvarint writes a varint to the buffer .
3667	WriteString writes a string to the buffer .
3668	WriteLen8String writes a string to the buffer .
3669	WriteLen16String writes a string to the buffer .
3670	DeferByte implements the WriteBuffer interface .
3671	DeferBytes is part of the WriteBuffer interface .
3672	FlushTo writes data to iow .
3673	Reset resets the buffer .
3674	Wrap implements the WriteBuffer interface .
3675	Update updates the uint16 reference .
3676	Update updates the uint32Ref .
3677	Update updates the uint64Ref .
3678	Update updates the bytes in b .
3679	UpdateString updates the string with s .
3680	ArgReader returns a new ArgReader .
3681	finish updates the mutable checksum .
3682	newWritableChunk returns a writableChunk .
3683	writeAsFits writes b to the chunk .
3684	newFragmentingWriter returns a new fragmentingWriter .
3685	ArgWriter returns a new ArgWriter .
3686	BeginArgument implements the Writer interface .
3687	Write implements the io . Writer interface .
3688	Flush flushes the current chunk .
3689	Close finalizes the current chunking .
3690	handleCallRes is used to handle a call frame
3691	Arg2Reader is a wrapper around Arg2Reader .
3692	handleError handles an error frame
3693	doneReading is called when a request has been read .
3694	newFragment creates a new FragableFragment .
3695	flushFragment flushes the given fragment .
3696	failed is called when an error occurs .
3697	arg1Reader is a wrapper for ArgResReader .
3698	arg2Reader returns a new ArgReader .
3699	arg3Reader is a wrapper for Arg3 .
3700	argReader returns a new ArgReader .
3701	recvNextFragment reads and parses the next fragment .
3702	releasePreviousFragment releases the previous fragment .
3703	failed is a no - op .
3704	parseInboundFragment reads a fragment from the wire .
3705	NewContext returns a new TChannel .
3706	WithHeaders returns a new context with the given headers .
3707	healthCheck is a long running routine that runs a connection alive .
3708	SetTimeout sets the timeout for the request
3709	AddHeader adds a header to the request
3710	SetHeaders sets the headers for the request
3711	SetConnectTimeout sets the connection timeout
3712	SetRetryOptions sets retry options
3713	SetTimeoutPerAttempt sets the timeoutPerAttempt
3714	SetParentContext sets the parent context
3715	Build builds a context from a TChannelContextBuilder .
3716	overrideHeaders is used to override the request headers
3717	Read reads from the underlying reader
3718	ReadJSON reads from the reader
3719	NewArgWriter returns a new ArgWriteHelper .
3720	Write implements the Writer interface .
3721	WriteJSON writes data to the writer
3722	Register registers the protobuf handler
3723	Count returns the number of items in the list
3724	Get retrieves a relay item by id .
3725	Add adds an item to the relay list .
3726	Entomb deletes a relay item with the given id and returns whether it was found .
3727	NewRelayer creates a new Relayer .
3728	Relay sends a frame to the network .
3729	Receive sends a frame to the Relayer .
3730	handleNonCallReq handles an incoming frame .
3731	addRelayItem creates a relay item with the given remap ID .
3732	failRelayItem is used to fail a relay item .
3733	WriteStruct writes a TStruct to the given writer .
3734	ReadStruct from reader
3735	EnsureEmpty checks if the stream is empty
3736	NewServer creates a new server
3737	Advertise advertises hyperb hosts .
3738	handleCallReqContinue is called when an incoming request is received
3739	dispatchInbound is called when an incoming request is received
3740	CallOptions returns the CallOptions for the InboundCall .
3741	Response returns the response body .
3742	SendSystemError sends an error to the client .
3743	SetApplicationError sets the application error state .
3744	Arg2Writer returns a new ArgWriter .
3745	doneSending is called when an incoming call was received .
3746	newState creates a new state from a Thrift Thrift .
3747	rootType returns the root type for the given thrift type .
3748	checkInclude returns the state of the given thrift type .
3749	isResultPointer returns true if the given thrift type is a pointer .
3750	goType returns the name of the thrift type .
3751	goTypePrefix returns the name for the given thrift type prefix .
3752	NewContext returns a new context .
3753	newIncomingContext returns a new context and cancel function .
3754	CurrentCall returns the current call
3755	New returns a new rand . Rand using the given seed .
3756	Health is part of the MetaHandler interface .
3757	Headers returns the request headers .
3758	ResponseHeaders returns the response headers .
3759	SetResponseHeaders sets the response headers .
3760	Child returns a new Context with the given headers .
3761	Wrap returns a Context with the given context .
3762	WrapWithHeaders returns a new Context with the given headers .
3763	WithoutHeaders returns a context with the given context set .
3764	Notify implements ErrNotifier .
3765	forwardPeerFrame forwards a frame to the peer .
3766	recvPeerFrame retrieves a single frame from the peer .
3767	recvPeerFrameOfType attempts to receive a single frame from the message pool .
3768	shutdown shuts down the messageExchange .
3769	newMessageExchangeSet returns a new instance of MessageExchangeSet .
3770	addExchange adds a new exchange to the messageExchangeSet .
3771	newExchange creates a new message exchange .
3772	deleteExchange deletes a message from the set .
3773	removeExchange removes an exchange from the messageExchangeSet .
3774	expireExchange marks the message exchange as expired .
3775	forwardPeerFrame forwards a frame to the message exchange .
3776	copyExchanges returns a copy of this messageExchange .
3777	Stops all exchanges .
3778	NewFrame initializes a new frame
3779	ReadBody reads the body from r .
3780	WriteOut writes the frame to w .
3781	CanRetry returns true if the error can be retried
3782	HasRetries returns true if the request has been retried .
3783	SinceStart returns the duration since the request state .
3784	AddSelectedPeer adds the current peer to the request state
3785	RunWithRetry runs the given function with RetriableFunc .
3786	ChecksumSize returns the size of the checksum type .
3787	New returns a new checksum .
3788	parseTemplates parses a set of templates and returns a slice of templates .
3789	NewStringSliceFlag returns a new instance of StringSliceFlag .
3790	withStateFuncs returns a copy of the template with the given state .
3791	IntrospectOthers returns a map of channel names to channels .
3792	ReportInfo returns information about this channel .
3793	IntrospectState returns a map of PeerRuntimeState
3794	IntrospectState returns the state of the subChannelMap
3795	IntrospectState returns the current PeerRuntimeState .
3796	IntrospectState returns a connection runtime state .
3797	IntrospectState returns the current state of the RelayerRuntimeState .
3798	IntrospectState is part of the RelayItems interface .
3799	IntrospectState returns an ExchangeSetRuntimeState .
3800	NewContext returns a new TChannel .
3801	WriteResponse writes the response .
3802	Wrap wraps an inbound . Handler into a TChannel .
3803	initFromOpenTracing injects a span in a span .
3804	startOutboundSpan starts a new span in the outgoing call .
3805	intToIP4 converts a uint32 to a net . IP
3806	servicePeerToHostPort converts a ServicePeer to a string .
3807	NewStatsdReporter creates a new StatsD reporter .
3808	UnmarshalText implements the encoding . TextUnmarshaler interface for ToS .
3809	Push implements heap . Interface .
3810	Pop implements the heap . Pop interface .
3811	updatePeer updates the peer with the given score .
3812	removePeer removes a peer from the heap .
3813	pushPeer adds a new peer to the heap .
3814	addPeer adds a new peer to the heap .
3815	NewClient creates a new TChannelClient
3816	Add adds a new peer to the list .
3817	Get returns the peer with the given hostPort
3818	WithTimeout sets the timeout for the client
3819	Methods returns a sorted list of registered methods .
3820	InheritedMethods returns the inherited methods of the service
3821	Arguments returns the arguments for this method .
3822	ArgList returns a string representing the arguments
3823	CallList returns a string representing the CallList .
3824	RetType returns the type of the method .
3825	WrapResult is part of the Method interface .
3826	ReturnWith returns method name and error
3827	Declaration returns the declaration for this field .
3828	startIdleSweep starts a new idleSweep .
3829	start starts the idle connection .
3830	Stop stops the idleSweep .
3831	ResolveWithGoPath takes a filename and attempts to resolve the filename .
3832	setExtends sets the extensions for the service .
3833	register a handler
3834	NewClient returns a new Client .
3835	ListenIP returns an IP address .
3836	Close closes the listener .
3837	ReadArgsV2 reads the command line arguments .
3838	WriteArgs writes the arguments to the TChannel .
3839	Call starts a TChannel call .
3840	CallSC is part of the SubChannel interface .
3841	CallV2 performs a V2 call .
3842	NewRealRelay creates a new Relay
3843	NewServer creates a new server
3844	RegisterHealthHandler adds a handler to the server .
3845	Handle is called by tchannel . Handle
3846	MetricsKey returns the key for the given error code .
3847	NewSystemError returns a new instance of SystemError
3848	NewWrappedSystemError returns a new SystemError with the wrapped error .
3849	Error returns error message
3850	GetContextError returns the error from the given error .
3851	GetSystemErrorCode returns the system error for the given error
3852	ping sends a ping message .
3853	handlePingRes handles a ping frame
3854	handlePingReq handles a ping message .
3855	SendSystemError sends an error frame to the connection .
3856	connectionError logs an error to the server .
3857	withStateLock runs f on the connection .
3858	withStateRLock runs f on the connection .
3859	readFrames reads frames from the connection .
3860	writeFrames is used to write multiple frames to the connection pool .
3861	hasPendingCalls returns true if there are any pending calls .
3862	checkExchanges is called when the connection changes have changed .
3863	closeNetwork closes the underlying connection .
3864	getLastActivityTime returns the time of the last activity .
3865	Validate validates a service
3866	logFailedRegistrationRetry is used to log a failed registration .
3867	initialAdvertise sends an advertise request .
3868	Service returns the body of the request .
3869	TTL returns the time . Duration .
3870	SetTTL sets the TTL of the call request .
3871	finishCall returns true if this frame is a call .
3872	Flat returns a sorted list of strings .
3873	Map applies the provided function to all platforms in the platform .
3874	MapSlice maps a slice of strings to platforms .
3875	GetProtoConfig returns the proto config from the config .
3876	MapExprStrings maps an expression to a string .
3877	FlattenExpr flattens a bzl . Expr .
3878	makePlatformStringsExpr creates a select expression .
3879	String returns the string representation of the platform .
3880	Find returns the full path to the given directory .
3881	runGazelle runs the GazEL environment .
3882	restoreBuildFilesInRepo restores all build files in the repo
3883	FixLoads modifies the given rules .
3884	fixLoad returns a copy of load . Load .
3885	newLoadIndex returns the index of the rules in the given rules .
3886	removeLegacyGoRepository removes all go - repository rules .
3887	Compare compares two versions .
3888	ParseVersion parses a version string .
3889	EmptyFile creates a new empty file .
3890	LoadWorkspaceFile loads a workspace from the given path .
3891	LoadMacroFile loads a file from the given path .
3892	EmptyMacroFile loads a file from a path
3893	LoadData loads a file from the given path .
3894	LoadWorkspaceData loads a file from a given path .
3895	LoadMacroData loads a file from the given path .
3896	ScanAST returns a parsed AST .
3897	ScanASTBody scans the AST into the AST .
3898	MatchBuildFileName returns the path to the named file in the given directory .
3899	SyncMacroFile adds macros to the file .
3900	MacrosName returns the name of the function .
3901	Sync syncs the file .
3902	Format returns bz .
3903	Save the file to the given path
3904	HasDefaultVisibility returns true if the package has default visibility .
3905	NewLoad creates a new Load .
3906	Symbols returns a list of symbol names .
3907	Has returns true if the symbol has a given symbol .
3908	Add adds a symbol to the loader .
3909	Remove removes a symbol from the Loader .
3910	Insert adds a new Load to the Load .
3911	NewRule creates a new rule .
3912	SetKind sets the kind of the rule
3913	AttrKeys returns the keys of the rule .
3914	Attr returns a bazel . Expr .
3915	AttrString returns the string value of a rule .
3916	AttrStrings returns the list of strings for the given key .
3917	DelAttr removes an attribute from the rule .
3918	SetAttr sets an attribute for a rule .
3919	PrivateAttrKeys returns the keys of the attribute
3920	SetPrivateAttr sets a private attribute
3921	Insert inserts a new rule into the rule .
3922	IsEmpty returns true if the rule is empty .
3923	CheckInternalVisibility returns the absolute path for the given relative path .
3924	New creates a new Label .
3925	Rel returns a new Label with the given repository and pkg .
3926	Equal compares two labels .
3927	Contains returns true if l contains other .
3928	generateFromPath generates generated code for the given root path
3929	shouldCall returns true if we should call this function .
3930	shouldUpdate returns true if the given relation should be updated .
3931	shouldVisit returns true if the given path should be visited .
3932	SquashRules squashes all rules in src to dst .
3933	runClient runs the gazeline client
3934	UpdateRepo updates the repository with the given import path .
3935	NewRemoteCache creates a new RemoteCache .
3936	Remote implements the RemoteCache interface .
3937	get retrieves the value from the map .
3938	ensure checks if a key is already in the map
3939	RelBaseName returns base name .
3940	Clone returns a deep copy of c .
3941	IsValidBuildFileName returns true if the given build file name is valid .
3942	check checks if a tag line exists .
3943	fileNameInfo returns information about the named file .
3944	otherFileInfo returns a fileInfo for the given path .
3945	ProtoFileInfo returns information about proto file .
3946	AddRule adds a rule to the index .
3947	Finish builds the index .
3948	buildImportIndex builds the import map for the rules .
3949	IsSelfImport returns true if the find result is a self import
3950	applyKindMappings applies KindMappings to loadInfos .
3951	appendOrMergeKindMapping appends a KindLoad to a map .
3952	RuleName returns the name of a rule .
3953	buildPackages builds a list of packages from the given directory .
3954	selectPackage returns a proto_library_library_library .
3955	generateProto creates a rule for the given proto file
3956	generateEmpty returns a set of rules that are not defined in regularFiles .
3957	ImportRepoRules imports a file into a set of rules .
3958	MergeRules merges a set of rules into a new rule .
3959	GenerateRule creates a rule from a repository
3960	FindExternalRepo returns the full path of an external repository .
3961	ListRepositories returns the Repositories for the given workspace
3962	migrateLibraryEmbed migrates the library embedded in a library .
3963	migrateGrpcCompilers replaces gRPC compiler rules with gRPC compiler .
3964	squashCgoLibrary is used to squash a cgo library .
3965	removeLegacyProto removes proto files from config file .
3966	removeLegacyGazelle removes any rules that are not in Gaz .
3967	selectPackage selects a package from the given directory .
3968	AddBuiltin adds a builtin to the meta resolver .
3969	MappedKind adds a new kind to the mapping
3970	Resolver returns the built - in Resolver for this rule
3971	sortExprLabels sorts a comma - separated list of expressions .
3972	checkRulesGoVersion checks to see if the rules_go_go is compatible
3973	preprocessTags preprocess tags .
3974	setBuildTags sets the build tags .
3975	splitValue splits a comma separated value into a slice of strings .
3976	copyGoModToTemp copies a go mod to a temp dir
3977	findGoTool returns the path to the go binary
3978	isBuildable returns true if the package is a buildable .
3979	startServer starts the running process
3980	watchDir watches for changes in a directory recursively .
3981	listDirs returns a list of all directories in the given directory .
3982	shouldIgnore returns true if p is ignored .
3983	recordWrite records write lock
3984	getAndClearWrittenDirs returns all clear written dirs .
3985	CombineHandlers combines multiple handlers into a single handler .
3986	VerifyContentType verifies that the Content - Type header matches the expected Content - Type header .
3987	VerifyMimeType checks the Content - Type header against the MIME type
3988	VerifyBasicAuth verifies that the credentials match the provided username and password .
3989	VerifyJSONRepresenting returns a http . HandlerFunc that verifies the provided object .
3990	VerifyFormKV is a wrapper for VerifyForm .
3991	RespondWithProto returns a http . HandlerFunc that replies to the given HTTP status code .
3992	RegisterFailHandlerWithT registers a GomegaFailHandler with gomega FailHandler .
3993	EventuallyWithOffset asserts that the assertion is an asynchronous assertion .
3994	ConsistentlyWithOffset is like ConsistentlyWithOffset but does not return an error instead .
3995	Expect returns an Assertion that asserts that the test fails .
3996	Eventually asserts that the assertion has been asserted .
3997	Consistently asserts that the assertion is consistent .
3998	TimeoutCloser returns a closer to the given io . Closer .
3999	TimeoutReader returns an io . ReadCloser that reads from r .
4000	TimeoutWriter returns an io . Writer that will write to w .
4001	Nested is used to nest an error
4002	SetMockService sets the mock service
4003	FindMachineByIdOrAddress finds a machine by its id and address .
4004	Write writes data to the ResponseWriter .
4005	Hijack hijacks the connection
4006	ListDeploys returns all apps that match filter
4007	AddAll adds a route to the router
4008	samlRequestTimeout returns request_timeout
4009	RegisterHandler registers a http . Handler for an http . Handler
4010	RegisterHandlerVersion registers a new tsuru handler
4011	Check returns a list of registered health checks .
4012	DiscoverRepositoryPath returns the path to a git repository .
4013	OpenRepository opens a git repository
4014	RemoteURL returns the remote URL for the named repository
4015	List lists all App in the indexer .
4016	Apps returns an object that can list and get Apps .
4017	List lists all Apps in the indexer for a given namespace .
4018	StreamJSONResponse streams JSON from a http . Response .
4019	DropDatabase drops a database
4020	Collection returns a new Collection instance .
4021	SetLogger sets the logger
4022	Error logs an error
4023	Errorf logs a message at level Error .
4024	Fatal logs a warning message .
4025	Debugf logs to the target .
4026	GetStdLogger returns the standard logger .
4027	Namespace returns the name of the cluster
4028	recreateContainers is the same as recreateContainer but does nothing .
4029	checkProvisioner checks to see if the provisioner is configured .
4030	checkDocker makes sure docker is configured
4031	checkScheduler returns an error if docker is invalid .
4032	checkRouter returns an error if the default router is invalid .
4033	Available returns true if the unit is available
4034	Get returns a Provisioner by name
4035	Registry returns all registered provisioners .
4036	Error implements the error interface .
4037	validateVersion returns true if the current version is a valid version .
4038	ReadTarget reads the target from the environment
4039	WriteTarget writes a string to the target file
4040	WriteOnTargetList writes label to target .
4041	Conn opens a database connection
4042	Apps returns a collection of apps .
4043	PoolsConstraints returns a collection of pool_constraints
4044	Users returns a collection of email addresses .
4045	SAMLRequests returns a collection of SAML requests .
4046	AppLogCollection is defined on Storage .
4047	CreateAppLogCollection creates a new collection for an app .
4048	LogsCollections implements Storage .
4049	ArchiveBuildCmds returns the buildcmds for the build
4050	ArchiveDeployCmds returns the buildcmds for an app
4051	DeployCmds returns the command names for the given app .
4052	runWithAgentCmds returns a slice of strings that should be run on the given app .
4053	newApps returns a apps
4054	Commit commits the container
4055	processTags takes a slice of tags and returns a list of all the tags removed .
4056	aggregateContainersBy aggregates containers by matcher .
4057	chooseNodeToAdd will choose a random node to use for the given container
4058	chooseContainerToRemove returns the container ID for a given app .
4059	Get returns a router by name
4060	Default returns the default router
4061	Store stores a new entry in the database
4062	TsuruV1 retrieves the TsuruV1Client
4063	Tsuru retrieves the TsuruV1Client
4064	NewAppInformer constructs a new informer for App type . Always prefer using an informer factory to get a shared informer instead of getting an independent one . This reduces memory footprint and number of connections to the server .
4065	NewFilteredAppInformer constructs a new informer for Apps type . Always prefer using an informer factory to get a shared informer instead of getting an independent one . This reduces memory footprint and number of connections to the server .
4066	Watch returns a watch . Interface that watches the requested apps .
4067	Patch applies the patch and returns the patched app .
4068	NewSharedInformerFactory creates a new instance of SharedInformerFactory .
4069	NewFilteredSharedInformerFactory creates a new instance of FilteredSharedInformerFactory .
4070	Proxy is not implemented
4071	UnbindUnit removes a unit from the broker
4072	Create creates a new plan .
4073	Remove removes a plan .
4074	ensureDefault ensures the default plan is missing
4075	DeleteInstance deletes an existing service instance
4076	ToInfo converts a ServiceInstance to a ServiceInstance .
4077	Update updates the service instance
4078	BindApp binds an app .
4079	BindUnit binds a service instance
4080	UnbindApp unbinds an app .
4081	Status returns the status of the service instance
4082	ProxyInstance validates a proxy
4083	Inc increments the quota for an app .
4084	SetLimit sets the limit for an app
4085	Set updates the quota for an app
4086	Get returns the quota for an app .
4087	RemoveImage removes an image from the registry
4088	RemoveAppImages removes images from the registry
4089	Create creates a new platform
4090	List returns all platforms .
4091	FindByName retrieves a platform by its name .
4092	Update updates a platform image
4093	Remove removes a platform from the registry
4094	Rollback updates an existing platform
4095	GetPoolByName returns a Pool by name
4096	Manager returns the repository manager configuration .
4097	Register registers a new repository manager
4098	start starts the syncSyncer .
4099	Shutdown implements BindSyncer .
4100	GetForProvisioner gets a builder from the provisioner
4101	get returns a builder by name .
4102	Registry returns all registered builders
4103	RegisterQueueTask registers a new queue task .
4104	Apps returns a AppInformer .
4105	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new App .
4106	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new AppList .
4107	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new AppSpec .
4108	Write implements the LogWriter interface .
4109	ResetPassword reset password
4110	addKnownTypes adds all known types to the scheme .
4111	Register registers a Shutdownable function .
4112	Do runs all registered functions .
4113	ListImagesOrDefault returns the default images for a platform
4114	MigrateAppsCRDs migrates CRDs .
4115	Register registers a new MigrateFunc .
4116	RegisterOptional registers a MigrateFunc .
4117	Run runs the supplied args .
4118	Units returns all units of the provisioner .
4119	MarshalJSON - encodes App .
4120	AcquireApplicationLockWait waits for an application to acquire a lock . Returns true if the lock was acquired .
4121	ReleaseApplicationLock releases an application lock
4122	GetByName gets an app by its name .
4123	AddUnits adds n units to an app .
4124	SetUnitStatus sets the status of the given unit .
4125	UpdateNodeStatus updates node status
4126	available checks if an application is available
4127	Grant grants access to an app
4128	Revoke revokes an app .
4129	GetTeams returns all teams
4130	setEnv sets environment variable
4131	getEnv returns a bind . EnvVar
4132	validateNew validates the app
4133	validate the App
4134	InstanceEnvs returns the environment variables for the given service
4135	Run runs a command
4136	GetUnits returns all units in the app .
4137	GetUUID gets a unique UUID
4138	Envs returns a map of environment variables .
4139	SetEnvs sets environment variables .
4140	UnsetEnvs removes all environment variables
4141	AddCName adds new cnames to the app .
4142	Log adds a new log entry to the database
4143	LastLogs returns all logs in the app .
4144	List returns all apps matching the filter .
4145	Swap is used to swap two routers
4146	Start starts the app .
4147	GetDbDriver returns a database driver by name .
4148	GetCurrentDbDriver returns the current database driver
4149	NewForConfig creates a new client for the given config .
4150	GetAppFromUnitID returns a container by its ID
4151	NewPipeline returns a new instance of the pipeline
4152	Result returns the result of the pipeline .
4153	DecodeJsonPayload unmarshals the request body into v .
4154	UrlFor returns a URL for the given path
4155	GetCorsInfo returns the CorsInfo for the request .
4156	MiddlewareFunc returns a MiddlewareFunc middleware .
4157	MiddlewareFunc returns a MiddlewareFunc that adds records to the recorder .
4158	WriteHeader implements http . ResponseWriter .
4159	MakeRouter creates a new router
4160	AppFunc returns a HandlerFunc
4161	escapedPath returns the escaped path .
4162	escapedPathExp returns a copy of the escaped pathExp .
4163	start initializes the router .
4164	ofFirstDefinedRoute returns the first matching route of a set of routes .
4165	findRouteFromURL finds and returns the first route matching the given URL .
4166	MiddlewareFunc is defined on ContentTypeChecker interface .
4167	CloseNotify is part of the http . ResponseWriter interface .
4168	MiddlewareFunc is defined on the AccessLogApacheMiddleware interface .
4169	executeTextTemplate executes the text template
4170	RemoteUser returns the remote user
4171	ApacheQueryString returns the ApacheQuery string if present .
4172	StartTime returns the current time .
4173	ApacheRemoteAddr extracts the remote address from the access log
4174	ResponseTime returns the response time if available .
4175	MiddlewareFunc returns a HandlerFunc that adds indentation .
4176	EncodeJson encodes a value to JSON .
4177	WriteHeader implements the http . ResponseWriter interface .
4178	MakePath creates a path from a route
4179	MiddlewareFunc returns a middleware function .
4180	WrapMiddlewares wraps an array of middlewares into a HandlerFunc
4181	MiddlewareFunc returns a MiddlewareFunc .
4182	WriteHeader implements the http . ResponseWriter interface .
4183	Hijack implements http . Hijacker
4184	Write writes b to the underlying writer
4185	MiddlewareFunc is the middleware function used by the middleware .
4186	printDebug prints debug information .
4187	AddRoute adds a route to the tree .
4188	printDebug prints a debug tree .
4189	FindRoutes returns all routes that match the given http method
4190	FindRoutesAndPathMatched finds all routes matching the given HTTP method and path .
4191	FindRoutesForPath finds all routes matching the given path
4192	Use adds middlewares to the stack
4193	MakeHandler returns an http . Handler with middleware .
4194	MiddlewareFunc returns a MiddlewareFunc middleware .
4195	MiddlewareFunc wraps the http . StatusMiddlewareFunc
4196	GetStatus returns the current status
4197	MiddlewareFunc returns a HandlerFunc based on the query parameters
4198	Flush implements http . ResponseWriter
4199	MiddlewareFunc wraps the AccessLogJsonMiddleware interface .
4200	Fetch retrieves an object from S3 .
4201	sanityCheck checks if the environment variable is valid
4202	release is used to release the listener
4203	fetchLoop is a long running routine that runs in a separate goroutine .
4204	orkLoop runs the master fork loop .
4205	Init initializes the file .
4206	Fetch retrieves the current hash from the file .
4207	Fetch fetches the HEAD request .
4208	NewConfig returns a new Config .
4209	Validate validates the config
4210	NewClient creates a new sarama client
4211	AsyncClose is part of the PartitionConsumer interface .
4212	Close closes the partition consumer .
4213	MarkOffset implements Consumer interface .
4214	NewConsumer creates a new consumer
4215	MarkOffsets adds offsets to the set .
4216	ResetOffset resets the current offset
4217	Close the consumer
4218	hbLoop is a long running routine that runs a heartbeat .
4219	twLoop is a long running routine that periodically updates the topic
4220	cmLoop is part of the Consumer interface .
4221	fetchOffsets fetches offsets for given topics .
4222	MarkOffset is part of the Store interface
4223	ResetOffset implements the OffsetStash interface
4224	Offsets returns a map of offsets .
4225	Actual returns the actual instance group
4226	Expected returns a copy of the InstanceGroup
4227	Delete deletes the instance group
4228	GetReconciler returns a reconciler for the given cloud .
4229	GetVersion returns version information
4230	GetVersionJSON returns the current version
4231	Actual transforms a ResourceGroup into a ResourceGroup
4232	Expected returns the resource group and cloud resources .
4233	CreateCmd returns a cobra command for creating a new command
4234	NewUbuntuCluster creates a new Ubuntu cluster
4235	ProviderConfig returns a control plane configuration
4236	SetProviderConfig sets the provider config
4237	MachineProviderConfigs returns a slice of machine s provider configs .
4238	SetMachineProviderConfigs sets machine s provider configs .
4239	NewCluster returns a new instance of Cluster
4240	DeployControllerCmd returns the cobra command for DeployController
4241	NewRetrier returns a retryable Retrier .
4242	RunRetry runs retry .
4243	MustGenerateRandomBytes returns random bytes
4244	ExplainCmd returns the cobra command for explain
4245	TimeOrderedUUID returns a random UUID string
4246	GetConfigCmd returns cobra . Command for GetConfig
4247	RunAnnotated runs a given task .
4248	ListCmd returns the cobra command for the current state
4249	NewUbuntuCluster returns a new instance of an Ubuntu cluster
4250	EditCmd returns cobra . Command for edit
4251	RemoveKey removes a key from the agent .
4252	RemoveKeyUsingFile removes a key from the keyring
4253	Actual returns the actual firewall
4254	Expected returns a new resource and cloud resource .
4255	Apply applies the given firewall to the actual resource
4256	Delete deletes a firewall
4257	DeleteCmd returns the Kubernetes cli delete command
4258	NewStateStore returns a new state store
4259	Commit commits a cluster
4260	ApplyCmd returns the Kubernetes cli apply command
4261	ExpandPath expands the current working directory
4262	CompletionCmd returns cobra command
4263	AdoptCmd returns the cobra command for cobra
4264	StrEnvDef is like StrEnv but returns the default value if not found .
4265	IntEnvDef returns an int from the environment or the default value if not found .
4266	BoolEnvDef returns the boolean value for the given environment variable .
4267	readFromFS reads the content from the sourcePath
4268	VersionCmd returns the cobra command for kubicorn
4269	NewSignalHandler returns a new handler that will send signals to the server .
4270	Register starts the handler .
4271	NewUbuntuCluster returns a new instance of the Ubuntu cluster
4272	BeginningOfHour returns the beginning of the current time .
4273	BeginningOfDay returns the beginning of the current time .
4274	BeginningOfWeek returns the beginning of the current time .
4275	BeginningOfMonth returns the beginning of the current month
4276	BeginningOfQuarter returns the beginning of the current month
4277	BeginningOfYear returns the beginning of the current time .
4278	EndOfMinute returns the end time .
4279	EndOfHour returns the end time .
4280	EndOfDay returns the time . Time representation of the current day .
4281	EndOfWeek returns the end of the current week
4282	EndOfMonth returns the end time .
4283	EndOfQuarter returns the end time .
4284	EndOfYear returns the end time .
4285	MustParse is like Parse but panics if an error occurs .
4286	Determines if the given date is within the given range .
4287	ParseInLocation is like Parse except that it takes a location and returns a pointer to it .
4288	MustParse is like Parse but panics .
4289	MustParseInLocation is like ParseInLocation but panics instead .
4290	Determines if two times are equal
4291	NewChannelMemoryBackend returns a new ChannelMemoryBackend .
4292	Start starts the ChannelMemoryBackend .
4293	Flush implements the ChannelBackend interface .
4294	Stop stops the ChannelMemoryBackend .
4295	Formatted returns the string representation of the record .
4296	Message returns the string representation of the record .
4297	SetBackend sets the backend for the logger
4298	MustGetLogger is like GetLogger but panics on error
4299	Reset reset the logger
4300	IsEnabledFor returns true if the logging level is enabled for the given log level .
4301	Criticalf outputs a critical log message
4302	Warningf logs with WARNING level . Arguments are handled in the manner of fmt . Printf .
4303	Noticef logs a warning message
4304	Infof logs a message at INFO level .
4305	SetFormatter sets the default formatter .
4306	MustStringFormatter returns a formatter for the given string format
4307	formatFuncName returns the name of the function f .
4308	Log implements the Formatter interface .
4309	LogLevel returns the log level for the given log level .
4310	AddModuleLevel creates a new LeveledBackend with the given backend .
4311	GetLevel returns the level for the given module .
4312	SetLevel sets the logging level for the given module .
4313	IsEnabledFor returns true if the given module is enabled for the given module
4314	MultiLogger returns a new instance of Logger that can be used to log messages with the given Backend .
4315	Log implements Logger .
4316	GetLevel returns the log level for the given module .
4317	SetLevel implements Logger interface .
4318	IsEnabledFor implements Logger . IsEnabledFor .
4319	ConvertColors converts a slice of integers to a slice of strings
4320	NewSyslogBackend returns a new instance of syslog backend
4321	NewSyslogBackendPriority creates a new syslog backend that writes to syslog .
4322	SetBackend returns a new logger with the specified backend .
4323	NewCommander returns a new Commander instance .
4324	Execute executes a command
4325	explain prints a summary of the command .
4326	explainGroup prints a summary of the command group .
4327	explain displays a summary of the command .
4328	handleAlias returns the alias for the command .
4329	Execute is part of the DefaultCommander interface .
4330	LoadFromData loads a config file from the given data .
4331	LoadFromReader loads a ConfigFile from a Reader .
4332	ReloadData reloads the config file .
4333	AppendFiles appends multiple files to the config file .
4334	GetKeyList returns the list of keys for a given section .
4335	SaveConfigData writes config data to io . Writer
4336	SaveConfigFile saves configuration data to a file
4337	Find returns a new Selection object containing the matched elements .
4338	FindByXPath returns a new Selection object containing the matched elements .
4339	FindByLink returns a new Selection object containing the matched elements .
4340	FindByLabel returns a new Selection object with the specified label .
4341	FindByName returns a new Selection object with the given name .
4342	FindByClass returns a new Selection object with the specified class .
4343	FindByID gets a selection by id .
4344	First returns a new Selection object containing the first element matching the selector .
4345	FirstByXPath returns a new Selection object with the first element matched by the selector .
4346	FirstByLink returns a new Selection object containing the first element of the matched element .
4347	FirstByLabel returns a new Selection object with the specified label .
4348	FirstByName gets a selection by name .
4349	All returns a new Selection with the specified selector .
4350	AllByXPath is an alias for Selectable .
4351	AllByLink is a shortcut for Selectable .
4352	AllByLabel is an alias for Selectable .
4353	AllByName is an alias for Selectable .
4354	AllByClass is an alias for SelectableSelect .
4355	AllByID is an alias for Selectable .
4356	FindForAppium returns a new Selection object containing the matched elements .
4357	Timeout is an Option to set the timeout
4358	ChromeOptions sets the options for the Chrome Options map
4359	JoinPage joins a URL and returns a Page .
4360	Destroy destroys the page .
4361	Reset resets the state of the Page .
4362	Navigate navigates the current page .
4363	GetCookies returns the cookies associated with the page .
4364	SetCookie sets a cookie
4365	DeleteCookie deletes a cookie by name .
4366	ClearCookies removes cookies from the page .
4367	URL returns the current page URL
4368	Size changes the size of the page .
4369	Screenshot writes a screenshot to disk .
4370	Title returns the current page title .
4371	HTML returns the HTML page
4372	PopupText returns the popup text .
4373	EnterPopupText enter the popup text .
4374	ConfirmPopup confirms the popup window
4375	CancelPopup cancels the popup popup
4376	SwitchToParentFrame switches the current frame to the current frame .
4377	SwitchToRootFrame switches the current page frame .
4378	NextWindow gets the next available window
4379	CloseWindow closes the active window .
4380	WindowCount returns the number of windows available for the page .
4381	LogTypes returns the list of available log types .
4382	MoveMouseBy moves the mouse by the given coordinates .
4383	DoubleClick performs a double click .
4384	Click handles a click event .
4385	Click clicks each element in the set of matched elements .
4386	DoubleClick doubles each element in the set of matched elements .
4387	Fill sets the matched elements in the set of matched elements .
4388	Tap handles a tap event .
4389	Touch handles a touch event .
4390	FlickFinger touches the cursor at the specified point .
4391	ScrollFinger scrolls the cursor to the specified position .
4392	NewCapabilities returns a Capabilities with the specified features .
4393	JSON returns the capabilities as a JSON string .
4394	HaveTitle checks if a string matches a title
4395	HaveURL checks if a string is a validator
4396	HavePopupText checks if the provided text is populated
4397	HaveLoggedError returns a Gomega matcher that matches an error .
4398	Text returns the text of the selected elements .
4399	Active returns true if the current selection matches the current selection .
4400	Attribute gets the value of an element .
4401	CSS gets the CSS property .
4402	Selected returns true if the element has been selected .
4403	Visible returns true if the selection is visible .
4404	Enabled returns true if the element is enabled .
4405	HaveCount checks if count is equal to count
4406	HaveAttribute checks if the attribute value matches the expected value
4407	EdgeDriver returns a new WebDriver .
4408	Selendroid creates a WebDriver for the given jar
4409	SwitchToFrame switches the current element to the current frame
4410	Count returns the number of elements in the selection .
4411	EqualsElement returns true if the element equals another .
4412	MouseToElement moves the selection to the specified element .
4413	loggingMiddleware logs a debug message .
4414	chainHandlers chains all middlewares
4415	HTTPReverseProxy starts a HTTP reverse proxy server
4416	CheckInstallation checks that all installed binaries are within the range
4417	CheckVersion returns nil if the version is valid
4418	GetVersionForBinary returns the version for the given binary
4419	getUser retrieves a user by its ID .
4420	login returns an authenticated user .
4421	loginHandler handles a request to authenticate the user .
4422	logoutHandler resets the user s user .
4423	viewHandler renders the user page .
4424	Run starts the HTTP client
4425	WithRequest sets the request body .
4426	WillRespondWith sets the response as a response .
4427	isJSONFormattedObject returns true if the string is a JSON object
4428	ByUsername returns a User by its username
4429	ByID returns a User by its ID .
4430	UserLogin handles a request to authenticate against a user
4431	newClient creates a new Client instance
4432	NewClient returns a new API client .
4433	ListServers returns a list of registered servers
4434	UpdateMessagePact adds a new message to the api
4435	PublishPacts publishes a set of Pacts
4436	getPort returns the port for the given URL
4437	getAddress returns the address of the given raw URL
4438	sanitiseHTTPResponse sanitizes the response
4439	Publish sends a request to the registry
4440	FindPortInRange returns the index of a port in a range
4441	EachLike returns a matcher matching the content of the given content
4442	Term creates a matcher that matches a regexp pattern .
4443	UnmarshalJSON implements json . Unmarshaler
4444	Convert object to string
4445	match returns a matcher matching the srcType .
4446	AddMessage add new message
4447	AddInteraction creates a new Interaction
4448	Teardown terminates the server .
4449	Verify verifies that all interactions are valid .
4450	stateHandlerMiddleware returns a proxy middleware .
4451	VerifyMessageProviderRaw implements the json . Marshaler interface
4452	VerifyMessageConsumerRaw is used to verify a message consumer
4453	VerifyProvider is a mock
4454	NewService mocks base method
4455	Setup initializes the service manager
4456	addServiceMonitor starts listening for a new process creation .
4457	removeServiceMonitor is called when the process is running .
4458	List returns a map of processes .
4459	Command returns the exec . Cmd for the service manager
4460	call makes a mocked call
4461	DeleteInteractions calls DeleteInteractions .
4462	AddInteraction adds an interaction to the service .
4463	WritePact does nothing
4464	ExpectsToReceive sets the description of the message
4465	WithMetadata adds metadata to the message .
4466	AsType defines the type of the message .
4467	UserLogin retrieves a user login by username and password .
4468	Region returns the region name .
4469	New returns a new S3 object .
4470	Bucket returns a Bucket with the given name .
4471	PutWriter returns a writer for a given path
4472	url returns the URL part of the bucket .
4473	SetLogger sets the internal logger with the given prefix and flag .
4474	InstanceKeys returns the keys for the role
4475	EnvKeys returns the keys in the environment
4476	Sign adds the request to the bucket .
4477	getAWSKeys returns AWS S3 keys
4478	homeDir returns the home directory for the current user .
4479	ACL adds a new ACL header to the request .
4480	putPart creates a new part
4481	abort aborts a multipart upload .
4482	growPartSize returns true if the number of parts can grow .
4483	CheckDisallowed checks if prefix is allowed by prefix
4484	Process builds the spec for the given spec
4485	MustProcess is like Process but panics on error
4486	toTypeDescription returns a string describing the type .
4487	Usage prints a usage message .
4488	Usagef writes the usage information for the given spec
4489	Usaget generates the spec for the given spec
4490	Scan implements the sql . Scanner interface .
4491	Value return sql . Value
4492	NewTime returns a new Time instance
4493	TimeFromPtr creates a new Time from a pointer .
4494	ValueOrZero returns the time . Time value .
4495	MarshalJSON returns the JSON encoding of Time .
4496	SetValid sets the time value .
4497	Ptr returns a pointer to a time . Time .
4498	NewBool creates a new Bool
4499	BoolFromPtr converts a pointer to a Bool .
4500	UnmarshalJSON implements json . Unmarshaler
4501	UnmarshalText implements the encoding . Unmarshaler interface .
4502	MarshalJSON returns the JSON encoding of b .
4503	SetValid sets the bool value .
4504	NewString creates a new String
4505	UnmarshalJSON implements json . Unmarshaler
4506	MarshalText implements the encoding . TextMarshaler interface .
4507	UnmarshalText implements the json . Unmarshaler interface .
4508	SetValid sets the Valid field s value .
4509	StringFromPtr creates a new string from a string .
4510	MarshalJSON returns the JSON encoding of the string .
4511	NewInt creates a new Int
4512	IntFromPtr converts a pointer to a int .
4513	UnmarshalJSON - decodes JSON data to Int64 .
4514	MarshalText implements the encoding . TextMarshaler interface for Int .
4515	SetValid sets the int64 value .
4516	UnmarshalText implements the encoding . TextUnmarshaler interface .
4517	MarshalText implements the encoding . TextMarshaler interface for Bool .
4518	SetValid sets the float64 value
4519	MarshalJSON returns the JSON encoding of t .
4520	UnmarshalJSON decodes JSON data into a Float .
4521	UnmarshalText implements the encoding . TextUnmarshaler interface for Float .
4522	MarshalJSON implements json . Marshaler .
4523	newGossipChannel creates a new gossipChannel .
4524	GossipUnicast sends a message to a peer .
4525	GossipBroadcast sends a gossip message to the channel .
4526	Send a GossipData to the channel .
4527	SendDown sends a message to the channel .
4528	gobEncode encodes a slice of values into a slice of bytes .
4529	newTokenBucket creates a new token bucket .
4530	wait waits until the bucket is available .
4531	capacityToken calculates the capacity for the token bucket .
4532	PrefixRangeEnd returns the end of the end of the range .
4533	newLocalPeer returns a new local peer .
4534	getConnections returns a copy of the current connection set .
4535	createConnection creates a new connection to the local address
4536	doAddConnection adds a new connection to the peer .
4537	startLocalConnection starts a new LocalConnection .
4538	SendProtocolMsg sends a protocol message .
4539	NewStatus returns a new Status object .
4540	makePeerStatusSlice converts a slice of PeerStatus to a slice of PeerStatus .
4541	makeUnicastRouteStatusSlice returns a slice of unicast route status .
4542	makeBroadcastRouteStatusSlice returns a slice of broadcastRouteStatus .
4543	makeLocalConnectionStatusSlice returns a slice of LocalConnectionStatus .
4544	makeTrustedSubnetsSlice converts a slice of IPNetnets to a slice of strings
4545	Range implements the EtcStore interface .
4546	Put is part of the EtcdServer interface .
4547	DeleteRange is part of the EtcdServer interface .
4548	Txn is part of the EtcdServer interface .
4549	Compact is not implemented
4550	proposeInternalRaftRequest is used to propose an internal RPC request .
4551	applyCompare applies the comparison between the given key and value .
4552	Describes returns a slice of PeerDescription
4553	OnGC adds a callback to be called when the peer is garbage collected .
4554	OnInvalidateShortIDs is called when a peer is invalidated .
4555	chooseShortID selects a peer short short ID from the peer .
4556	fetchWithDefault adds a new peer to the peers list .
4557	Fetch returns the peer with the given name .
4558	fetchAndAddRef increments the ref count for the given peer name .
4559	FetchByShortID returns the peer with the short ID .
4560	GarbageCollect garbage collects all pending peers .
4561	newRoutes creates a new routes
4562	OnChange adds a callback function to be called when routes are changed .
4563	Unicast returns the name of a unicast route
4564	UnicastAll returns the peer name for the given peer name .
4565	Broadcast returns the routing list for the given peer name .
4566	BroadcastAll returns the names of all known peers .
4567	NewPeer returns a new peer .
4568	Register implements the peer interface for peer .
4569	ReadFrom implements net . Conn . ReadFrom
4570	WriteTo writes data to dst .
4571	LocalAddr returns the network address of this peer .
4572	OnGossip is called when a peer is received from the peer .
4573	OnGossipBroadcast is invoked when a peer receives a gossip message
4574	OnGossipUnicast implements the peer interface for GossipUnicast .
4575	NewDefaultServer returns a new server with default configuration .
4576	PeerNameFromUserInput returns the PeerName from a user input
4577	bytes returns the bytes as a byte slice .
4578	NewRouter creates a new Router .
4579	sendAllGossip sends all the gossip peers to the router
4580	sendAllGossipDown sends all gossip peers down to the given connection .
4581	broadcastTopologyUpdate broadcasts a set of peers to gossip .
4582	OnGossipUnicast is invoked when a gossip message is received from a peer .
4583	OnGossipBroadcast implements router . OnGossipBroadcast .
4584	Gossip returns the state of the current node .
4585	OnGossip implements the Router interface .
4586	Encode implements the encoding . Encoder interface .
4587	newState creates a new state with the given peer name .
4588	Merge returns a copy of this state .
4589	mergeReceived merges the set of known peers into the set .
4590	mergeComplete takes a set of peers and merges them into the state .
4591	OnGossipBroadcast implements gossiper . OnGossipMessage
4592	OnGossip returns a new GossipData with the given update .
4593	generateKeyPair returns the public and private key pair .
4594	convert a shared secret key to a shared secret key .
4595	newTCPCryptoState returns a new tcpCryptoState .
4596	Send sends gob - encoded data to the receiver
4597	Send sends a message to the sender .
4598	Send encrypts msg using encryptedTCPSender .
4599	Receive is used to receive a message
4600	Receive is part of the TCPReceiver interface .
4601	Receive receives a TCP message and decrypts it .
4602	newPeer creates a new peer
4603	incr increments the peer s update .
4604	GossipData returns the current state of the peer .
4605	OnGossipUnicast is invoked when a peer receives a gossip message .
4606	makeRaftPeer returns a raft . Peer for the given address .
4607	String returns a string representation of a peer
4608	forEach connected peers .
4609	parsePeerUID converts a string to a PeerUID .
4610	Swap swaps two peers .
4611	Less implements sort . Interface .
4612	doIntro executes the introspection protocol .
4613	filterV1Features takes a map of protocol version1 and returns a map of key - value pairs .
4614	newConnectionMaker creates a new connection maker .
4615	connectionAborted marks this connection as aborted .
4616	newGossipSender returns a new gossip sender .
4617	Send a GossipData
4618	Broadcast adds a new gossip message to the sender .
4619	Flush sends a flush to the gossip server .
4620	Sender returns a new gossip sender for a given channel name
4621	Flush flushes all senders .
4622	findMainPath returns the path to the main executable file .
4623	Create creates a new channel .
4624	SendMessage sends a message to the server .
4625	SendJSON marshals the given value to JSON .
4626	remapError returns the error if any .
4627	NamespacedContext returns a copy of ctx with the given namespace .
4628	protoToItem converts MemcacheGetResponse_Item to Item
4629	singleError returns the first error if any .
4630	Get returns the value for the given key . ErrCacheMiss is returned if the key doesn t exist .
4631	GetMulti gets a memcache value .
4632	Delete removes a key from the context .
4633	DeleteMulti deletes memcache .
4634	Increment increments the value in the context .
4635	IncrementExisting increments the value for a given delta .
4636	set sets the Memcache set
4637	Get implements Codec . Get .
4638	Stats returns statistics about the memcache .
4639	Flush all the memcache .
4640	RunInBackground runs f on the system
4641	List returns all available modules .
4642	SetNumInstances sets the number of instances in the given module .
4643	Versions returns the versions of the given module .
4644	DefaultVersion returns the default version of the module .
4645	Start starts a new module
4646	Stop stops a module
4647	Ancestor sets the ancestor of the query .
4648	EventualConsistency specifies the consistency level of the query .
4649	Project adds a projection to the query .
4650	Distinct sets the distinct query to distinct .
4651	DistinctOn sets the distinct ON clause on the query .
4652	KeysOnly is an alias for Query .
4653	Limit sets the limit for the query .
4654	Offset specifies the offset of the query .
4655	BatchSize limits the size of the query .
4656	Start sets the start of the query .
4657	End sets the end of the query .
4658	Count is part of the Query interface .
4659	Run runs the query .
4660	Next loads the next entity from the iterator .
4661	Cursor returns a cursor for the current iterator .
4662	String returns the string representation of the cursor .
4663	DecodeCursor decodes a Cursor from a string .
4664	saveEntity saves the given struct to the EntityProto
4665	Namespace returns a new context with the given namespace .
4666	typeof returns the type of the given name .
4667	dot returns the dot notation for the given typ .
4668	joinFunc joins in and out .
4669	validPropertyName returns true if the given property name is valid .
4670	getStructCodec returns the underlying struct codec for t .
4671	LoadStruct loads a struct from a struct
4672	SaveStruct converts src to a struct .
4673	ServingURL returns the URL served by the given blobKey .
4674	DeleteServingURL deletes a blob from an appengine .
4675	CurrentOAuth returns the current OAuth user .
4676	OAuthConsumerKey returns the OAuth consumer key .
4677	String returns the username as a string .
4678	LoginURL returns a URL that can be used to authenticate the given destination .
4679	LoginURLFederated creates a login URL that can be used to authenticate a user .
4680	LogoutURL creates a logout URL for the user .
4681	insertContext inserts a context into the call stack .
4682	NewClient returns a new Client instance
4683	NewContext returns a new context .
4684	NewRemoteContext returns a new Context .
4685	Debugf logs an error message .
4686	guestbookKey returns a key for a guestbook
4687	toRetryParameters converts RetryOptions to TaskQueueRetryParameters
4688	NewPOSTTask creates a new POST task .
4689	ParseRequestHeaders returns RequestHeaders from an http . Header
4690	Add adds a new task to the system
4691	AddMulti adds multiple tasks to a taskqueue
4692	Delete deletes a task .
4693	DeleteMulti deletes tasks
4694	Lease is a blocking version of Lease .
4695	LeaseByTag is like LeaseByTag but takes a tag .
4696	Purge purges the taskqueue
4697	ModifyLease modifies the taskqueue
4698	QueueStats fetches statistics about a taskqueue .
4699	IsTimeoutError returns true if the given error is a timeout error .
4700	Func registers a new function
4701	Task implements the Task interface .
4702	RequestHeaders returns the taskqueue . RequestHeaders interface .
4703	WithContext returns a copy of the request context with the given request .
4704	WithAPICallFunc returns a copy of the given APICall function .
4705	APICall calls internal API call .
4706	ModuleHostname returns the hostname for the given module .
4707	Returns an access token .
4708	PublicCertificates returns a list of all public certificates
4709	ServiceAccount returns the service account name .
4710	SignBytes signs the given bytes
4711	fetch data from the blobstore .
4712	seek seeks to the given offset .
4713	multiKeyToProto converts appID to protobuf messages .
4714	referenceValueToKey converts a property value to a KeyValue .
4715	keyToReferenceValue converts a key to a property value .
4716	Put inserts a key into the context .
4717	PutMulti stores the data in the datastore
4718	Delete removes the key from the database .
4719	DeleteMulti deletes multiple keys .
4720	deploy runs the given command
4721	Next returns the next record .
4722	converts protobuf protobuf messages to AppLog
4723	protoToRecord converts a RequestLog into a Record
4724	Run creates a new query .
4725	run executes the logservice
4726	Current returns the current user .
4727	IsAdmin returns true if the user is authenticated .
4728	isErrFieldMismatch returns true if err is ErrFieldMismatch .
4729	Stat returns the BlobInfo for the given blobKey .
4730	Send writes the given blob to the response writer .
4731	UploadURL returns the upload URL for the blobstore .
4732	Delete removes a blob from an appengine .
4733	DeleteMulti deletes multiple blobs .
4734	NewReader returns a new reader for the given blobKey .
4735	Handle handles the request
4736	Send sends a message to the server .
4737	Invite sends an invite .
4738	Send sends a presence message .
4739	GetPresence returns the presence of an existing one
4740	GetPresenceMulti returns a list of all the presence of the given JID .
4741	newStructFLS returns a FieldLoadSaver .
4742	SaveStruct saves a struct .
4743	Namespaces returns a list of all namespace names .
4744	Kinds returns a list of all kinds in the context .
4745	RunInTransaction runs f in a transaction and calls f for each transaction .
4746	imports returns true if the given file exists in the given file .
4747	importSpec returns the import spec for the given file path .
4748	declImports returns true if the genDeclarations are in the given path .
4749	isPkgDot reports whether t is a pkg dot .
4750	isTopName returns true if n is a top name .
4751	isName returns true if n is an identifier .
4752	isCall reports whether t is a call expression .
4753	refersTo returns true if n is a reference to this node .
4754	isEmptyString returns true if n is an empty string .
4755	countUses returns the number of methods used in the given scope .
4756	assignsTo returns true if x is assigned to x .
4757	newPkgDot returns a selector expression .
4758	renameTop renames the name of a file .
4759	matchLen returns the index of two strings .
4760	deleteImport deletes an import .
4761	rewriteImport returns true iff the file has been reaped .
4762	DefaultTicket returns the default ticket
4763	flushLog flushes any buffered logs to the server .
4764	withDeadline returns a copy of parent with a deadline set .
4765	KeepAlive tells the connection to keep alive .
4766	applyTransaction applies the transaction setters to the transaction .
4767	analyze analyzes the specified tags .
4768	buildContext returns a new build . Context with default values .
4769	synthesizeMain is used to synthesize the main file
4770	findInGopath finds the import path in the given directory .
4771	copyTree copies files from srcDir to dstDir .
4772	copyFile copies src from src to dst .
4773	checkMain checks if the main package is valid
4774	isMain reports whether f is a main function .
4775	Reads a file containing a function declaration .
4776	initField initializes the field at the given index .
4777	loadEntity loads the EntityProto from src into dst
4778	validIndexNameOrDocID returns true if s is a valid index name .
4779	Open opens an index .
4780	Put adds src to the index .
4781	Get loads documents from the index .
4782	Delete removes a single document from the index .
4783	DeleteMulti deletes documents by ID .
4784	Search returns an iterator for the given query string .
4785	fetchMore will fetch more items from the list .
4786	Next fetches the next document from the iterator .
4787	Facets fetches facets from the iterator .
4788	DefaultBucketName returns the default bucket name .
4789	valid returns true if the Key is valid .
4790	Equal returns true if this Key is equal to another .
4791	root returns the root of the Key .
4792	marshal encodes the Key into b .
4793	String returns the key as a string .
4794	Encode encodes the Key to base64
4795	DecodeKey decodes the encoded key into a Key .
4796	NewIncompleteKey returns a new Key with the given kind .
4797	NewKey creates a new Key .
4798	AllocateIDs is used to allocate IDs for a given kind .
4799	IsOverQuota returns true if the error indicates that an error is due to a call error .
4800	ClassicContextFromContext returns the appengine context from the given context .
4801	Send sends a message .
4802	SendToAdmins sends a message to admins .
4803	Failures returns the number of failed failures .
4804	decodeFieldNumberAndTyp3 decodes the field number and Typ3 .
4805	checkTyp3 returns an error if the type is not a Typ3 type .
4806	decodeTyp3 decodes the Typ3 from bz .
4807	NewPrefixBytes creates a new PrefixBytes
4808	getLengthStr returns the string representation of the type .
4809	collectImplementers_nolock collects all implementers for the given type .
4810	checkConflictsInPrio_nolock returns an error if the interface is not in the system .
4811	constructConcreteType returns the concrete type and irvSet .
4812	MarshalBinaryLengthPrefixedWriter implements the encoding . BinaryMarshaler interface for BinaryLengthPrefixedWriter .
4813	MarshalBinaryBare marshals a byte slice into a byte slice .
4814	UnmarshalBinaryLengthPrefixed implements the Unmarshaler interface for BinaryLengthPrefix .
4815	UnmarshalBinaryBare unmarshals bytes into ptr .
4816	MustMarshalJSON is like MarshalJSON but panics on error .
4817	MustUnmarshalJSON is like UnmarshalJSON but panics on error .
4818	MarshalJSONIndent marshals an object to JSON .
4819	newDataReader returns a new data reader reading from r .
4820	Read implements the io . Reader interface .
4821	ListenAndServeTLS is like ListenAndServe but allows the caller to specify the TLS configuration .
4822	Produce produces a new Handler .
4823	PromoteHandlerFunc returns a copy of the given handler function .
4824	Serve starts the server
4825	Serve accepts incoming connections
4826	Fail prints an error message .
4827	WriteUsage prints the usage of the parser .
4828	WriteHelp prints the help of the parser .
4829	MustParse is like Parse but panics on error .
4830	Parse parses the given config into dest .
4831	walkFields recursively visits all fields of v .
4832	Parse parses the given arguments and returns an error if any .
4833	setSlice sets a slice of strings .
4834	canParse returns true if t is a scalar .
4835	isBoolean returns true if t is a bool
4836	NewFromMap creates a new Tree from a map .
4837	Insert inserts a new element in the Tree . Returns the old value and whether the entry was inserted .
4838	Delete deletes a node
4839	DeletePrefix returns the number of elements in the tree .
4840	deletePrefix deletes the node with the given prefix .
4841	Get returns the value for a given string
4842	LongestPrefix returns the longest prefix of the longest prefix .
4843	Minimum implements the Tree interface .
4844	WalkPrefix walks the tree rooted at the given prefix .
4845	recursiveWalk recursively calls fn for each node in n .
4846	ToMap returns a copy of the tree .
4847	checkip returns iptype and ipnum
4848	read uint32
4849	readuint128 reads a uint32
4850	load a new IP2Location record
4851	Printrecord returns the IP2Location record .
4852	Main is the main entry point for gc .
4853	SaveToPdfFile writes a PDF document to a file .
4854	CubicCurveTo adds a cubic curve to the path .
4855	ArcTo adds a line to the path .
4856	String returns a string representation of the Path .
4857	VerticalFlip returns a copy of the current path .
4858	NewGlyphCache returns a new cache
4859	Fetch fetches a glyph from the cache
4860	renderGlyph renders a glyph as a Glyph
4861	Copy returns a copy of the Glyph .
4862	Fill implements the Glyph interface .
4863	Main draws a line from a file .
4864	Draw draws a drawing point .
4865	Paint draws a set of spans .
4866	SetColor sets the color of the Painter .
4867	NewPainter returns a new Painter .
4868	GetStringBounds returns the bounds of a string
4869	recalc recalculates the current font size .
4870	SetFont sets the current font .
4871	ClearRect clears a rectangle
4872	drawString draws the text at the specified point .
4873	newGroup creates a new Group
4874	newMask creates a new mask .
4875	embedSvgFont embeds a text in the current font
4876	TraceQuad takes a quad curve and a flatteningThreshold .
4877	GetFontName returns the font name
4878	NewStackGraphicContext returns a new StackGraphicContext .
4879	NewFolderFontCache creates a new folder font cache .
4880	NewSyncFolderFontCache creates a new sync folder font cache .
4881	Main draws a graphic .
4882	NewPdf returns a new Fpdf instance .
4883	clearRect clears a rectangle .
4884	NewGraphicContext returns a new GraphicContext .
4885	Clear clears the current page .
4886	GetStringBounds gets the bounds of a string
4887	CreateStringPath creates a new line at the specified path .
4888	FillStringAt fills the cursor at the specified point .
4889	SetStrokeColor sets the stroke color .
4890	SetFillColor sets the fill color .
4891	SetLineDash sets the line dash pattern .
4892	SetLineWidth sets the line width .
4893	Main is the main entry point for example
4894	Draw draws a text .
4895	SaveToPngFile saves the image to a png .
4896	LoadFromPngFile loads a png image from a png file .
4897	Resource returns a string representation of a resource
4898	Output returns a path to the output file .
4899	Main runs the post script with the specified extension .
4900	Draw draws a graphic .
4901	Main draws a geometry .
4902	Bb Bubble draws a triangle .
4903	Dash draws a dash .
4904	CubicCurve draws a cubic curve .
4905	FillStroke draws a stroke .
4906	FillStyle fills the line with the given width and height .
4907	PathTransform implements the Drawable interface .
4908	Star draws a star .
4909	Draw draws a rectangle .
4910	ConvertPath converts a draw2d path to a PDF .
4911	Main is the main entry point .
4912	Draw draws the line at the specified offset .
4913	DrawContour draws a circle at the specified path
4914	Flatten flattens a path .
4915	Clear clears the current image .
4916	ClearRect draws a rectangle
4917	DrawImage draws an image .
4918	Main is the main function for Main .
4919	Draw draws a png .
4920	Draw draws a line at the specified point .
4921	ChecksumString32S returns the checksum of s .
4922	ChecksumString64S returns the checksum of s .
4923	NewS32 returns a new initialized xxHash32 .
4924	NewS64 returns a new instance of xxHash64 .
4925	round64 rounds v into h .
4926	Checksum32S computes the hash of the input .
4927	Checksum64S returns the checksum of the input .
4928	getStage returns the stage of the environment variable
4929	New returns a new Glg instance .
4930	Get initializes glg .
4931	SetMode sets the mode of the logger .
4932	SetPrefix sets the prefix of the logger .
4933	GetCurrentMode returns current logger level .
4934	Initialize the logger
4935	Set the logger
4936	SetLevelColor sets the color for the specified level .
4937	SetLevelWriter set the logger writer
4938	AddStdLevel adds a log level to the console .
4939	EnableColor enables color colors .
4940	EnableLevelColor enables color color .
4941	DisableLevelColor disables the color .
4942	RawString returns the raw string from the input byte slice .
4943	Returns the LEVEL value for a given tag
4944	Println calls glog . Println
4945	Fatal prints a fatal message .
4946	Fatalf outputs a fatal error message .
4947	Returns true if the current mode is enabled .
4948	CaptureMetrics is part of the http . Handler interface .
4949	get returns the value at the given key .
4950	Save writes dataType to out .
4951	SaveToFile saves data to a file
4952	Load loads data from an io . Reader
4953	LoadFromFile loads data from a file
4954	Key returns the key for the given id .
4955	Value returns the value at id
4956	Delete deletes the given key .
4957	Set deserializes a version string .
4958	Compare compares two versions .
4959	Slice returns the version number .
4960	BumpMajor resets the major version .
4961	BumpMinor increments the version number .
4962	BumpPatch increments the patch count .
4963	validateIdentifier returns an error if the id is not a valid semver identifier .
4964	newStream creates a new Stream .
4965	addSubscriber adds a subscriber to the stream .
4966	New returns a new Server .
4967	Close closes the server
4968	CreateStream creates a new stream
4969	RemoveStream removes a stream
4970	StreamExists checks if a stream exists
4971	Publish adds an event to the stream .
4972	NewClient returns a new Client .
4973	Subscribe sends an event to the server .
4974	SubscribeChan is used to subscribe to a stream of events
4975	SubscribeRaw is used to subscribe to a given handler .
4976	Unsubscribe the given channel from the client .
4977	NewEventStreamReader returns a new EventStreamReader .
4978	ReadEvent reads the next event from the stream .
4979	HTTPHandler is the default http handler
4980	Add adds an event to the event log .
4981	Replay replays the events in the background .
4982	readKey reads a PEM - encoded key from a PEM - encoded file .
4983	writeKey writes the given ecdsa private key to the given path .
4984	anyKey returns a crypto . Signer for the given filename .
4985	sameDir returns the path to the given file .
4986	printAccount prints an account .
4987	tmpl executes a template and writes it to w .
4988	printUsage prints the usage for the given io . Writer .
4989	FromRequest extracts the X - Real - IP address from the request .
4990	Do executes the clear command .
4991	Do executes the Disable command .
4992	Do removes the specified DOMStorageItem .
4993	Do implements the SetDOMStorage interface .
4994	Do executes a push message .
4995	Do executes the command .
4996	Do executes the inspecter command .
4997	Do executes the force update on the page .
4998	Do executes the SkipWaiting command .
4999	Do executes the command .
5000	Do executes the StopAllWorkers command .
5001	Do executes the stop worker .
5002	Do performs a unregister command .
5003	Do executes the update command .
5004	Do executes the bind command .
5005	Do executes the command .
5006	Error returns the error message .
5007	Do executes the release animations command .
5008	Do executes the SeekAnimations command .
5009	Do executes the paused command .
5010	Do sets the playback rate .
5011	Do executes the set timing command .
5012	Do executes the command - line command .
5013	Do executes the command on the communicator .
5014	Do executes the set pressure notification .
5015	Do executes the simulated pressure notification .
5016	WithSamplingInterval adds the SamplingInterval to the start sampling params
5017	WithSuppressRandomness adds the suppressRandomness to the start sampling params
5018	Do runs the sampling process .
5019	Do executes the StopSampling command .
5020	Do executes the clear device orientation .
5021	Do sets the device orientation .
5022	Do executes the violation report .
5023	Do executes the stop violation report .
5024	String returns a readable version of the Modifier .
5025	WithNodeID adds the nodeID to the get partialAXTree params
5026	WithBackendNodeID adds the BackendNodeID to the get partialAXTree params
5027	WithObjectID adds the ObjectID to the get partial accessibility tree params
5028	WithFetchRelatives adds the FetchRelatives to the get partialAXTree params
5029	Do executes the set time domain .
5030	WithClipRect adds the ClipRect to the profile snapshot params
5031	Do executes the release snapshot command .
5032	Do executes the clear object store .
5033	Do executes the delete command .
5034	Do executes the DeleteObjectStoreEntries command .
5035	WithKeyRange adds the KeyRange to the request data params
5036	Do executes the set sampling interval .
5037	Do executes the command .
5038	WithCallCount adds the CallCount to the start precise coverage params
5039	WithDetailed adds the Detailed to the StartPreciseCoverage params
5040	Do executes the precise coverage .
5041	Do executes the command .
5042	Do executes the precise precise coverage .
5043	Do executes the command .
5044	Do executes the ignore certificate errors .
5045	Do adds an object to the cache .
5046	Do executes the collect garbage collection .
5047	WithSamplingInterval adds the SamplingInterval to the start sampling params
5048	Do is part of the Conn interface .
5049	WithReportProgress adds the reportProgress to the stop tracking heapapObjects params
5050	Do executes the command .
5051	WithReportProgress adds the reportProgress to the take heap snapshot params
5052	Do executes the snapshot .
5053	WithBrowserContextID adds the BrowserContextID to the GrantPermissions params
5054	Do executes the command .
5055	WithBrowserContextID adds the BrowserContextID to the reset permission params
5056	Do executes the reset permissions command .
5057	Do executes a crash command .
5058	Do executes the crash process .
5059	WithQuery adds the query to the get histograms params
5060	WithTargetID adds the targetID to the get windowForTarget params
5061	Do executes the set window bounds .
5062	WithImage adds the image to the set dock tile params
5063	Do executes the dock tile command .
5064	Do executes the delete command .
5065	Do executes the delete entry command .
5066	WithPathFilter adds the path filter to the RequestEntries params
5067	Do executes the discard search results .
5068	Do executes the focused command .
5069	Do executes the markdown command .
5070	WithIncludeUserAgentShadowDOM adds the IncludeUserAgentShadowDOM to the perform search params
5071	Do executes the Redis command .
5072	Do removes the specified attribute .
5073	Do performs a remove command .
5074	Do executes the request and returns a list of child nodes .
5075	WithNodeID adds the nodeID to the resolve node params
5076	WithBackendNodeID adds the backend nodeID to the resolve node params
5077	WithExecutionContextID adds the ExecutionContextID to the resolve node params
5078	Do executes the set attribute value .
5079	WithName adds the name to the SetAttributesAsText params
5080	Do executes the set attribute command .
5081	Do sets the file input files .
5082	Do executes the set inspected node .
5083	Do executes the set node value .
5084	Do implements the Setter interface .
5085	Do executes the Undo command .
5086	Do executes the command .
5087	Do executes the set property on the node .
5088	Do executes the command - line command .
5089	Do executes a close command .
5090	Do executes the clear data for the given origin .
5091	Do tracks the cache storage for the given origin .
5092	Do executes the indexedDB command .
5093	Do is part of the CacheStorage interface .
5094	Do is part of the Conn interface .
5095	Do executes the highlight command .
5096	Do highlights the specified frame .
5097	WithNodeID adds the nodeID to the highlight node params
5098	WithBackendNodeID adds the BackendNodeID to the highlight node params
5099	WithObjectID adds the ObjectID to the highlight node params
5100	WithSelector adds the selector to the highlight node params
5101	Do highlights the node .
5102	Do highlights quads .
5103	Do highlights the specified rectangle .
5104	WithHighlightConfig adds the highlightConfig to the set inspect mode params
5105	Do executes the inspect mode .
5106	Do executes the ShowAdHighlights command .
5107	WithMessage adds the message to the setPausedInDebuggerMessage params
5108	Do is part of the Debugger interface .
5109	Do executes the show debug borders .
5110	Do executes the show FPS counter .
5111	Do executes the show paint rects command .
5112	Do executes the scroll bottleneck rects command .
5113	Do executes the showHitTestBorders command .
5114	Do executes the showviewport size on the console .
5115	Do executes the clear - cache command .
5116	Do executes the clear browser cookies .
5117	WithErrorReason adds the ErrorReason to the ContinueIntercepted request params
5118	WithRawResponse adds the RawResponse to the ContinueIntercepted request params
5119	WithURL adds the URL to the ContinueIntercepted request params
5120	WithMethod adds the method to the ContinueIntercepted request params
5121	WithPostData adds the postData to the ContinueIntercepted request params
5122	WithHeaders adds the Headers to the ContinueIntercepted request params
5123	WithAuthChallengeResponse adds the authChallengeResponse to the ContinueIntercepted request params
5124	Do executes the command with the specified context .
5125	WithURL adds the URL to the delete cookies params
5126	WithDomain adds the domain to the delete cookies params
5127	WithPath adds the path to the delete cookies params
5128	Do executes the delete command .
5129	WithConnectionType adds the ConnectionType to the emulateNetworkConditions params
5130	Do executes the specified network condition .
5131	Do executes the enabled command .
5132	WithUrls adds the urls to the get cookies params
5133	Do executes the replay XHR command .
5134	Do executes the blocked URLSParoon command .
5135	Do executes the set bypass service worker .
5136	Do executes the cache disable command .
5137	WithURL adds the URL to the set cookie params
5138	WithDomain adds the domain to the set cookie params
5139	WithPath adds the path to the set cookie params
5140	WithSecure adds the secure to the set cookie params
5141	WithHTTPOnly adds the HTTPOnly to the set cookie params
5142	WithSameSite adds the SameSite params
5143	WithExpires adds the expires to the set cookie params
5144	Do executes the command .
5145	Do executes the set data size limits for a test
5146	Do executes the set extra HTTP headers .
5147	Do executes the set interceptception command .
5148	Do executes the clear device metrics override .
5149	Do executes the clear command .
5150	Do executes the page scale factor .
5151	Do executes the command .
5152	Do runs the CPU throttling .
5153	WithColor adds the color to the SetDefaultBackgroundColorOverride params
5154	Do sets the default background background color .
5155	WithScale adds the scale to the set device metrics override params
5156	WithDontSetVisibleSize adds the dontSetVisibleSize to the SetDeviceMetricsOverride params
5157	WithScreenOrientation adds the ScreenOrientation params
5158	Do sets the device metrics override .
5159	Do executes the scrollbars hidden .
5160	Do executes the set document cookie .
5161	Do alters the touch events for the mouse .
5162	Do executes the set emulated media command .
5163	WithLatitude adds the Latitude to the set geolocationOverride params
5164	WithLongitude adds the Longitude to the set geococationOverride params
5165	WithAccuracy adds the accuracy to the set geococationOverride params
5166	Do executes the command - line command .
5167	Do changes the page scale factor .
5168	Do executes the script execution .
5169	WithMaxTouchPoints adds the maxTouchPoints to the set touch emulationEnabled params
5170	Do executes the touch emulation command .
5171	WithBudget adds the Budget to the set virtual time policy params
5172	WithMaxVirtualTimeTaskStarvationCount adds the max virtualTimeTaskStarvationCount params
5173	WithWaitForNavigation adds the waitForNavigation params
5174	WithAcceptLanguage adds the acceptLanguage to the set user agent override params
5175	WithPlatform adds the platform to the set user agent override params
5176	Do executes the command - line command .
5177	Do executes the key event command .
5178	Do executes the insert text command .
5179	WithButtons adds theButtons to the dispatch mouse event params
5180	Do executes the mouse command .
5181	Do executes the touch event .
5182	Do executes the touch command .
5183	Do executes the set of input events .
5184	Do executes the touch gesture .
5185	WithXOverscroll adds the xOverscroll to the SynthesizeScrollcroll params
5186	WithYOverscroll adds the YOverscroll to the SynthesizeScrollcroll params
5187	Do executes the scroll gesture .
5188	Do executes the touch gesture .
5189	Domain returns the domain name .
5190	WithDepth adds the depth to the get event listeners params
5191	Do executes the specified DOM breakpoint .
5192	WithTargetName adds the targetName to the remove event listener breakpoint params
5193	Do executes the command - line breakpoint .
5194	Do executes the command execution .
5195	Do executes the disconnect command .
5196	Do sets the DOM breakpoint .
5197	Do executes the command - line breakpoint .
5198	Do executes the command execution .
5199	Do executes the XHR request .
5200	WithExecutor returns a new context with the executor set .
5201	Execute is part of the Context interface .
5202	AttributeValue returns the value for the named attribute .
5203	xpath returns the path to an XPath string .
5204	String returns the string representation of the NodeType .
5205	Do executes the set sink command .
5206	Do executes the tab mirroring command .
5207	Do executes the command .
5208	Do executes the StartObserving RPC .
5209	Do executes the stop observer .
5210	Do executes the set recording command .
5211	Do executes the clear events command .
5212	WithObjectID adds the ObjectID to the callFunctionOn params
5213	WithArguments adds the Arguments to the callFunctionOn params
5214	WithExecutionContextID adds the ExecutionContextID to the call function on params
5215	WithObjectGroup adds the ObjectGroup to the callFunctionOn params
5216	Do executes the DiscardConsoleEntries command .
5217	WithContextID adds the contextID to the evaluate params
5218	WithOwnProperties adds theOwnProperties to the get properties params
5219	WithGeneratePreview adds the GeneratePreview to the get properties params
5220	WithExecutionContextID adds the ExecutionContextID to the global lexicalScopeNames params
5221	WithObjectGroup adds the ObjectGroup to the query object group params
5222	Do executes the release command .
5223	Do executes the release object group .
5224	Do executes the command .
5225	Do executes the custom object formatter .
5226	Do executes the set max call stack size .
5227	Do executes the command .
5228	Do adds a binding binding to the specified command .
5229	Do removes the specified binding .
5230	Do executes the command .
5231	Do executes the given clock sync marker .
5232	WithBufferUsageReportingInterval adds the BufferUsageReportingInterval to the start params
5233	WithNoDisplayUpdates adds the NoDisplayUpdates to the BeginFrameParams
5234	WithScreenshot adds the Screenshot to the BeginFrame params
5235	Do executes the bringToFront RPC command .
5236	WithClip adds the Clip to the CaptureScreenshot params
5237	WithFromSurface adds the FromSurface to the capture screenshot params
5238	WithWorldName adds the world to the create isolation world params
5239	WithGrantUniveralAccess adds the GrantUniveralAccess to the createIsolatedWorld params
5240	Do executes the reset navigation history .
5241	WithPromptText adds the PromptText to the handleJavaScriptDialog params
5242	Do executes the dialog dialog .
5243	WithReferrer adds the Referrer to the Navigate params
5244	WithTransitionType adds the transitionType to the Navigate params
5245	WithFrameID adds the frameID to the navigation params
5246	Do executes the given history entry .
5247	WithLandscape adds the Landscape to the printToPDFarams params
5248	WithDisplayHeaderFooter adds the DisplayHeaderFooter to the PrintToPDFarams instance
5249	WithPrintBackground adds the PrintBackground to the print to the print destination params
5250	WithScale adds the scale to the printToPDFParams params
5251	WithPaperWidth adds the PaperWidth to the printToPDFarams
5252	WithPaperHeight adds the PaperHeight to the printToPDFarams
5253	WithIgnoreInvalidPageRanges adds the IgnoreInvalidPageRanges to the printToPDFanges params
5254	WithFooterTemplate adds the footerTemplate to the printToPDFarams instance
5255	WithPreferCSSPageSize adds the PreferCSSPageSize to the printToPDFPageSize params
5256	WithScriptToEvaluateOnLoad adds the scriptToEvaluateOnLoad to the reload params
5257	Do executes a reload command .
5258	Do executes the script to remove the specified document .
5259	Do executes the screencast command .
5260	Do executes the ad - blocking command .
5261	Do executes the request with the given credentials .
5262	Do sets the font families .
5263	Do sets the font sizes .
5264	Do sets the document content .
5265	WithDownloadPath adds the download path to the set downloadBehavior params
5266	Do implements the SetBehavior interface .
5267	Do executes the desired lifecycle events .
5268	WithFormat adds the Format to the startScreencast params
5269	WithMaxWidth adds the MaxScreen to the startScreencast params
5270	WithMaxHeight adds the MaxHeight to the startScreencast params
5271	WithEveryNthFrame adds the EveryNthFrame to the startScreencast params
5272	Do starts the screencast .
5273	Do executes the stoploading command .
5274	Do executes the specified web lifecycle state .
5275	Do executes the StopScreencast command .
5276	Do sets the compilation cache .
5277	Do adds the compilation cache .
5278	Do executes the clear compilation cache .
5279	WithGroup adds the group to the generate test report params
5280	Do executes the command .
5281	Do activates the activated target .
5282	WithBindingName adds the BindingName to the ExposeDevToolsProtocol params
5283	Do executes the device command .
5284	WithBrowserContextID adds the BrowserContextID to the create target context params
5285	WithSessionID adds the sessionID to the detach from Target params
5286	Do executes the specified command .
5287	Do executes the given browser context .
5288	WithSessionID adds the sessionID to the send messageToTarget params
5289	Do sends a message to the target
5290	Do executes the set auto attach command .
5291	Do executes the set discover targets command .
5292	Do executes the set remote locations command .
5293	WithPatterns adds the Patterns to the enable params
5294	WithHandleAuthRequests adds the HandleAuthRequests to the enable params
5295	Do executes the fail request .
5296	WithBody adds the body to the Fulfill request params
5297	WithResponsePhrase adds the ResponsePhrase to the response params
5298	Do executes the command .
5299	WithURL adds the URL to the ContinueRequest params
5300	WithMethod adds the method to the ContinueRequest params
5301	WithPostData adds the postData to the ContinueRequest params
5302	WithHeaders adds the Headers to the ContinueRequest params
5303	Do executes the specified command .
5304	Do executes the command with the given context .
5305	Do executes the command .
5306	WithIncludeCommandLineAPI adds the IncludeCommandLineAPI params to the EvaluateOnCallFrame params
5307	Do executes the command .
5308	Do executes the command in the context .
5309	Do executes the specified breakpoint .
5310	Do executes the resume command .
5311	Do executes the set asynchronous call stack depth .
5312	Do sets the blackbox patterns .
5313	Do executes the set of blackboxed ranges .
5314	WithURL adds the URL to the SetBreakpointByURL params
5315	WithURLRegex adds the URLRegex to the set breakpointByURL params
5316	WithScriptHash adds the scriptHash to the set breakpointByURL params
5317	WithColumnNumber adds the ColumnNumber to the SetBreakpointByURL params
5318	WithCondition adds the Condition to the SetBreakpointOnFunctionCall params
5319	Do executes the set breakpoints command .
5320	Do executes the pause on exceptions .
5321	Do executes the set command .
5322	WithDryRun adds the dryRun to the set script source params
5323	Do executes the set skipAllPauses command .
5324	Do executes the set value .
5325	WithBreakOnAsyncCall adds the breakOnAsyncCall to the stepInto params
5326	Do executes the step command .
5327	Do executes the command .
5328	Do executes the specified command .
5329	Listen calls the Listen function .
5330	ListenClose calls the ListenClose function .
5331	Connected implements the NotifyBundle interface .
5332	Disconnected is called when a connection is disconnected .
5333	OpenedStream calls the wrapped Stream if not nil .
5334	ClosedStream is part of the Network interface .
5335	WithNoDial returns a context with no dial set .
5336	GetNoDial returns the NoDial value for the context
5337	WithDialPeerTimeout returns a context with dial peer timeout set .
5338	Open is part of the Driver interface .
5339	Prevpos returns the previous position of the previous position
5340	Last returns the last n bytes in the buffer
5341	DeleteMostRecentBytes removes n bytes from the buffer
5342	NewFloat64RingBuf creates a new float64 ring buffer
5343	TwoContig returns the two slices of two slices in the buffer .
5344	Earliest returns the earliest value of the buffer .
5345	Values returns a slice of float64 values
5346	NewAtomicFixedSizeRingBuf creates a new AtomicFixedSizeRingBuffer .
5347	Reset resets the buffer .
5348	NewPointerRingBuf creates a new PointerRingBuffer .
5349	TwoContig implements the Pointer interface .
5350	NumPage returns the number of pages in the trailer .
5351	Font returns a Font for the given name .
5352	Width returns the width of the font .
5353	Encoder returns the TextEncoder for the Font .
5354	Interpret is used to interpret the given string into the given function .
5355	Open opens a file .
5356	NewReader returns a new Reader reading from f .
5357	NewReaderEncrypted returns an io . Reader that encrypts a PDF file .
5358	Trailer returns a new Value .
5359	Kind returns the kind of the value .
5360	newBuffer returns a new buffer .
5361	Paginate returns a paginated page of results
5362	CascadeDelete deletes all documents from the document
5363	cascadeDeleteWithConfig is used to delete all associations with a relation
5364	cascadeSaveWithConfig is used to create a new document .
5365	MapFromCascadeProperties extracts a map from a document
5366	Connect connects to the MDS server .
5367	convert string to lower case
5368	Find returns the resultset for a collection
5369	RawInformationQuery sends a raw query to the server
5370	NewClient creates a new Client .
5371	Close closes the client connection
5372	startTLSIfRequired performs the startTLS if required .
5373	startStream starts a new stream
5374	IsEncrypted returns true if the client is encrypted
5375	Recv receives a chat message and returns it .
5376	Send a chat message
5377	SendOrg sends an org string to the server
5378	SendKeepAlive sends keep - alive
5379	SendHtml send chat message
5380	Read the next start element
5381	JoinProtectedMUC join a protected member
5382	LeaveMUC instructs the server to leave the node .
5383	AttachBuffer attaches a buffer to the message .
5384	Attach attaches a file to disk .
5385	Inline attaches a file to a file .
5386	AddHeader adds a new header to the message .
5387	Tolist returns a list of recipients .
5388	Bytes returns a human - readable representation of this message .
5389	Send mail message
5390	GetHeader returns the first value associated with the given header .
5391	GetHeaderValues returns the values associated with the given header .
5392	SetHeader sets a single header value .
5393	AddHeader adds a new header to the envelope .
5394	DeleteHeader deletes a header by name .
5395	AddressList returns the address list for the given key .
5396	Clone returns a deep copy of the envelope .
5397	ReadEnvelope reads an Envelope from r .
5398	EnvelopeFromPart extracts an Envelope from a part .
5399	parseTextOnlyBody parses an Envelope body
5400	parseMultiPartBody parses an Envelope into e . Body .
5401	matchHTMLBodyPart checks if the part is a HTML body part .
5402	ensureCommaDelimitedAddresses ensures the string is a comma - separated string .
5403	Date specifies the date .
5404	From sets the From header
5405	Subject specifies the email subject .
5406	To adds a new email address .
5407	ToAddrs specifies the recipients of the email .
5408	CC defines a CC address .
5409	CCAddrs sets the email addresses for the recipient .
5410	ReplyTo sets the email address
5411	Header adds a header to the email builder .
5412	AddAttachment adds an attachment to the email .
5413	AddFileAttachment adds a file to the email builder .
5414	AddInline adds a new part to the email .
5415	Equals compares two MailBuilder objects .
5416	Encode encodes a Part .
5417	encodeHeader encodes the Header into bb .
5418	encodeContent encodes the content into bte .
5419	selectTransferEncoding returns the transfer encoding for the given content .
5420	setParamValue sets the value for the given key
5421	NewBase64Cleaner returns a new Base64Cleaner
5422	decodeToUTF8Base64Header is used to decode a MIME header .
5423	parseMediaType parses a media type and returns it .
5424	fixMangledMediaType takes a mtype and converts it to a string .
5425	detectMultipartMessage returns true if the part is a multipart part .
5426	detectBinaryBody returns true if the part is a binary body .
5427	BreadthMatchFirst returns the first part of the part .
5428	BreadthMatchAll returns all parts that match a matcher .
5429	DepthMatchFirst returns the first part of the part .
5430	DepthMatchAll returns all parts that match the given matcher .
5431	ToASCII converts a string to UTF - 8 .
5432	NewPart returns a new Part .
5433	AddChild adds a child to p .
5434	TextContent returns true if the part is a text content type .
5435	Parse the headers from r .
5436	setupContentHeaders parses the Content - Disposition and Content - Type header .
5437	convertFromDetectedCharset takes a reader and converts it to a Charset .
5438	Clone clones a part .
5439	ReadParts reads parts from r .
5440	parseParts populates the parts from the reader .
5441	UUID returns a random UUID
5442	NewQPCleaner returns a new QPCleaner .
5443	Error returns error message
5444	addError adds an error to the Part .
5445	addWarning adds a warning to the part .
5446	Wrap takes a slice of strings and returns the result .
5447	ConvertToUTF8String converts a byte slice to UTF8 string
5448	JoinAddress joins a slice of addresses .
5449	Printf implements Markdown .
5450	EnvelopeToMarkdown writes an envelope to w .
5451	FormatPart writes a part .
5452	newBoundaryReader returns a new boundaryReader .
5453	Read implements the io . Reader interface .
5454	Next implements io . Reader .
5455	Parse returns the parsed object from the given buffer .
5456	Assign assigns a value to a given symbol .
5457	NewRClient returns a new RClient .
5458	NewRClientWithAuth creates a new RClient with the given username and password .
5459	Register registers a custom generator .
5460	Fuzz fuzzes all fields in e .
5461	findFakeFunctionFor returns a function that can be used for testing
5462	Apply applies the given options to the options .
5463	ToOption converts options to a new Option .
5464	waitThenClose waits until the event channel is closed .
5465	send sends an event .
5466	NewMovingAverage creates a new MovingAverage .
5467	Set sets the current value .
5468	calcKeys50 calculates the private keys for a passphrase .
5469	getKeys retrieves the keys from the archive .
5470	checkPassword checks if the password is valid .
5471	parseFileEncryptionRecord parses a file encryption record .
5472	parseEncryptionBlock parses the encryption block .
5473	newArchive50 returns a new fileBlockReader .
5474	Read implements io . Reader .
5475	ReadByte reads a single byte from the underlying io . Reader .
5476	newCipherBlockReader returns a new instance of cipherBlockReader .
5477	newAesDecryptReader returns a new instance of AESDecryptReader .
5478	limitByteReader returns a limited - length reader that reads from r .
5479	Mode returns the FileMode for the FileHeader .
5480	nextBlockInFile returns the next block in the file .
5481	next returns the next block from the file .
5482	Read implements the io . Reader interface .
5483	Read implements io . Reader .
5484	Next returns the next file in the stream .
5485	NewReader returns a new Reader reading from r .
5486	OpenReader opens a volume .
5487	getV3Filter returns the v3 filter for the given code .
5488	init initializes decoding .
5489	readBlockHeader reads a block header .
5490	readCodeLengthTable reads the code length table from the bitReader .
5491	shrigStates returns a slice of states with the given size .
5492	expandStates returns the expanded state of the current context .
5493	pushByte pushes a byte to the heap .
5494	descByte returns the succByte for the given ii .
5495	accContext returns a context with the given index .
5496	calcAes30Params calculates the AES - 1 hash of the given password .
5497	parseDosTime returns the time . Time value in seconds .
5498	decodeName decodes BSON encoded name .
5499	readExtTimes reads the timestamps from buf .
5500	readBlockHeader reads a block header from the archive .
5501	newArchive15 returns a new instance of a fileBlockReader .
5502	readFilter5Data reads the filter5 data from the input stream .
5503	writeByte writes a byte c to the buffer .
5504	copyBytes copies bytes from the buffer to the buffer .
5505	read from the window
5506	queueFilter adds a new filterBlock to the buffer .
5507	processFilters reads filters from the input stream .
5508	fill fills the data from the decoder .
5509	Read implements io . Reader .
5510	readFull reads from r until io . EOF .
5511	findSig tries to find a sig file .
5512	execute executes the given command .
5513	newVM returns a new VM from the given byte slice .
5514	limitBitReader limits the number of bytes read from the given reader .
5515	readUint32 reads a uint32
5516	Step3 step3
5517	Stem converts a word to a word .
5518	Step 634
5519	Step5 step 5 .
5520	step2a takes a snowball word and returns true if it was successful .
5521	Step 4 .
5522	Stem takes a word and returns a stemmed string .
5523	step1c checks to see if the word is a valid word .
5524	Step3 step3 step3 .
5525	isStopWord returns true if a word is a stop word .
5526	capitalizeYUI capitalizes the snowball .
5527	step2 steps a snowball word .
5528	step3 step3 step3
5529	step0 step0 step0
5530	VnvSuffix returns the length of the word .
5531	step1 step1 step1 step1
5532	step2a takes a snowball word and returns true if it was successful .
5533	removePerfectiveGerundEnding returns true if the given word has been pruned .
5534	removeAdjectivalEnding returns true if the word ends with an adjective .
5535	step2b takes a snowball word and computes the step .
5536	Step 4 .
5537	step5 moves the snowball word to a word .
5538	Stem converts a word to a word .
5539	Stem converts a word to a word .
5540	isStopWord reports whether word is a stop word .
5541	isStopWord reports whether a word is a stop word .
5542	New creates a SnowballWord from a string
5543	RemoveLastNRunes removes n runes from the word .
5544	resetR1R2 resets R1 r2 .
5545	slice returns a slice of runes .
5546	FitsInR1 returns true if the word is in R1
5547	FitsInR2 returns true if the word fits in R2
5548	FitsInRV returns true if the word is in R .
5549	FirstPrefix returns the first prefix of the word .
5550	HasSuffixRunes returns true if the word has a suffix set .
5551	FirstSuffixIfIn is like FirstSuffix except it returns a slice of runes .
5552	RemoveFirstSuffixIf removes the first suffix from the word .
5553	RemoveFirstSuffix removes the first suffix from the word .
5554	FirstSuffix returns the first suffix of the word .
5555	Preprocess words .
5556	step0 step0 step1
5557	step1b takes a snowflake word and returns true if it was successful .
5558	step2b takes a snowball word .
5559	capitalizeYs returns the number of words in the snowball .
5560	capitalizeYs decodes the Snowball word .
5561	stemSpecialWord takes a word and returns a stemmed word .
5562	isShortWord returns true if SnowballWord is a short word .
5563	step1a takes a snowflake word and returns true if successful .
5564	Set sets a value for a given key .
5565	Get returns the value for a given key .
5566	Cleanup removes all goroutines .
5567	getValues returns the values of the current goroutine .
5568	linkGRs links the goroutine data to the goroutine IDs .
5569	unlinkGRs removes all grpc goroutines .
5570	AppUri generates an app URI for an app
5571	CurlAppWithTimeout calls the app s CurlApp with the given timeout .
5572	CurlApp is the same as CURL but waits for the application to complete .
5573	CurlRoot returns the root URL of the app .
5574	GetTags returns a slice of tags from a given prefix .
5575	GetTagsAsUniqueStrings returns all tags with prefix and terminator .
5576	isTerminator reports whether r is a terminal or not .
5577	uniquify removes duplicates from a slice .
5578	New returns a new Location middleware .
5579	Get gets the value from the gin context .
5580	GenerateRSAKeyPair generates a new RSA key pair using RSA .
5581	Verify returns true iff sig is a valid signature .
5582	Encrypt encrypts bsa .
5583	Sign signs message using RSA private key
5584	GetPublic returns the public key
5585	Decrypt decrypts data using RSA private key .
5586	UnmarshalRsaPrivateKey unmarshals a RSA private key .
5587	GenerateKeyPair generates a new private key pair using the given type .
5588	GenerateKeyPairWithReader generates a new key pair using the given crypto . Reader
5589	GenerateEKeyPair generates a new key pair using the given name .
5590	UnmarshalPublicKey unmarshals a public key from a byte slice .
5591	MarshalPublicKey encodes a PubKey to bytes .
5592	UnmarshalPrivateKey unmarshals a private key from a byte slice .
5593	MarshalPrivateKey encodes a private key to bytes .
5594	KeyEqual compares two keys .
5595	GenerateECDSAKeyPair generates an ECDSA private key pair
5596	GenerateECDSAKeyPairWithCurve creates a new private key pair using the given reader .
5597	ECCDSAKeyPairFromKey converts an ecdsa private key to a private key
5598	UnmarshalECDSAPrivateKey unmarshals an ECDSA private key
5599	UnmarshalECDSAPublicKey unmarshals an ECDSA public key
5600	Equals returns true if the keys are equal .
5601	Sign signs data using ecdsa .
5602	Equals returns true if the two keys are equal .
5603	Verify returns true iff sigBytes is a valid signature .
5604	GenerateSecp256k1Key generates a secp256k1 private key
5605	UnmarshalSecp256k1PrivateKey decodes a secp256k1 private key .
5606	UnmarshalSecp256k1PublicKey unmarshals a Secp256k1 public key .
5607	Equals returns true if the two keys are equal .
5608	Sign returns the serialized form of data .
5609	Equals returns true iff this Key is equal to the receiver
5610	Verify returns true iff sigStr is a valid signature .
5611	Raw returns a copy of the key .
5612	Sign signs msg with msg .
5613	Equals compares two Ed25519PublicKey objects .
5614	Verify returns true iff sig is a valid signature .
5615	UnmarshalEd25519PublicKey unmarshals an ed25519 public key .
5616	UnmarshalEd25519PrivateKey unmarshals an ed25519 private key .
5617	EditScriptForStrings is like EditScriptForStrings but takes a slice of strings .
5618	EditScriptForMatrix returns an edit script for the given matrix .
5619	WriteMatrix writes matrix to writer
5620	New creates a new Lockfile .
5621	GetOwner returns the owner of the lockfile .
5622	TryLock tries to acquire a lockfile . If the lockfile does not exist it will panic .
5623	Unlock unlocks the lockfile
5624	NewBase returns a new Base instance
5625	SetFallbackLogger sets the fallback logger .
5626	AddLogger adds a logger to the Base Logger .
5627	LogWithTime implements Logger .
5628	Log logs a message at the specified level .
5629	Warnm calls Outputm for an error message .
5630	NewTemplateWithFuncMap creates a new template with the given function map .
5631	Execute executes a template and returns the result .
5632	NewTemplateMsg returns a TemplateMsg .
5633	NewLogAdapterFor returns a new LogAdapter for the given base .
5634	SetAttr implements LogAdapter .
5635	LogWithTime implements LogAdapter .
5636	Log implements LogAdapter .
5637	Dbgm is a shortcut for debugging .
5638	NewAttrsFromMap creates a new Attrs from a map .
5639	NewAttrsFromAttrs creates a new Attrs from a slice of Attributes .
5640	MergeAttrs merges attrs .
5641	SetAttr sets a new attribute
5642	GetAttr returns the value associated with the given key .
5643	RemoveAttr removes an attribute from the attributes map .
5644	Attrs returns a copy of the attributes .
5645	Debugm is a shortcut for Debugm .
5646	Infom prints an error message .
5647	Warningm is an alias for Warningm .
5648	Errm is a wrapper around Errorm .
5649	Errorm is a shortcut for Errorm .
5650	Fatalm calls fmt . Fatalm
5651	Dief calls DefaultDefault
5652	Diem prints a diem .
5653	ToLogLevel converts a string to a LogLevel
5654	CallErr calls f with the given function .
5655	New creates a new Stackdriver hook .
5656	Fire logs a logrus entry
5657	Levels is a functional option for logging .
5658	ProjectID is used to set the project ID .
5659	EntriesService is a functional option for logging .
5660	LoggingService is a functional option for logging .
5661	ErrorService is an Option to set the error reporting .
5662	HTTPClient returns an Option that sets the logging service used for logging .
5663	MonitoredResource returns an Option that sets the logger used for logging .
5664	ErrorReportingLogName is a functional option to set the logger name .
5665	Labels returns an Option that sets labels on the stackdriver .
5666	PartialSuccess is a functional option for creating a new stackdriver hook .
5667	GoogleComputeCredentials is a functional option for Google ComputeMetadata .
5668	NewEncoder returns a new Encoder .
5669	NewDecoder returns a new Decoder .
5670	NewStreamEncoder returns a new StreamEncoder .
5671	NewStreamDecoder returns a new StreamDecoder .
5672	Register adds a codec to the registry
5673	Unregister removes a codec from the registry .
5674	Lookup returns the codec for the given mimetype .
5675	Codecs returns a map of codec names .
5676	Type returns the type of the error .
5677	Install registers an adapter
5678	AdapterOf returns an adapter for the given type
5679	AppendDuration appends a duration to the input byte slice .
5680	formatInt is fmt . fmt . fmt
5681	NewDecoder returns a new objconv . Decoder .
5682	NewStreamDecoder returns a new objconv . StreamDecoder .
5683	Unmarshal unmarshals b into v .
5684	String returns the name of the type .
5685	zeroValueOf returns the zero value for t .
5686	NewValueParser returns a new ValueParser .
5687	ParseTag parses a tag from a string .
5688	NewEncoder returns a new objconv . Encoder .
5689	NewStreamEncoder returns a new objconv . StreamEncoder .
5690	NewPrettyEncoder returns a new encoder that encodes pretty - printed data to w .
5691	NewPrettyStreamEncoder returns a new object encoder .
5692	Marshal encodes v into a byte slice .
5693	NewEncoder returns a new Encoder .
5694	EncodeArray writes the given function to the encoder .
5695	EncodeMap calls the encoder for each key - value pair .
5696	NewStreamEncoder returns a new StreamEncoder .
5697	Open opens the stream .
5698	Close closes the stream .
5699	Encode implements Encoder .
5700	newStructType creates a new structType for t .
5701	lookup returns the structType for the given type
5702	clear clears the cache .
5703	CheckUint64Bounds checks v to see if v is a uint64 .
5704	CheckInt64Bounds check int64 value
5705	NewDecoder returns a new Decoder .
5706	Decode implements Decoder . Decode .
5707	DecodeArray decodes a map value .
5708	DecodeMap decodes a map .
5709	NewStreamDecoder returns a new StreamDecoder .
5710	Len returns the length of the decoder .
5711	Err returns the error encountered during decoding .
5712	Decode decodes data into v .
5713	Encoder creates a new stream encoder .
5714	init sets default flags for logging
5715	LevelFromString returns the Level from a string .
5716	NewBackend returns a new instance of Backend .
5717	callsite returns the filename and line number of the caller .
5718	print prints a log entry to the writer .
5719	Logger returns a new logger instance .
5720	Trace implements Logger .
5721	Tracef is part of the Logger interface .
5722	Debug logs a debug entry .
5723	Debugf logs a debug message .
5724	Info implements Logger .
5725	Infof logs a message at level Info .
5726	Warn implements Logger .
5727	Warnf logs a warning message .
5728	Error logs an error message .
5729	Errorf logs an error message .
5730	Critical implements Logger .
5731	Criticalf logs a message at level Critical .
5732	Level returns the current log level .
5733	SetLevel sets the log level .
5734	Concatenates two Permission objects .
5735	HasPermission checks if a permission is allowed
5736	ConcatPermissioner concatenates multiple Permissioners .
5737	HasPermission returns true if a permission is present in the list
5738	Register adds a role to a role
5739	NewPermission creates a new Permission
5740	Get a role by name
5741	isPtrFromHeap returns true if the address is a pointer to a ptr .
5742	IsPtr returns true if the given address is a pointer to a pointer .
5743	FindObject finds an object in the memory cache .
5744	ForEachObject calls fn for each Object in the page .
5745	ForEachRoot calls fn for each Root in the Process .
5746	Addr returns core . Address
5747	Size returns the size of x .
5748	Type returns the type and row number of the element .
5749	ForEachRootPtr calls fn for each Root in the Process .
5750	edge1 returns true if r is an edge of range .
5751	setHeapPtr sets heap info for a given address .
5752	findHeapInfo returns the heap info for a given address .
5753	allocHeapInfo returns the heap info for a given address .
5754	runtimeName returns the runtime name .
5755	readRuntimeConstants initializes the runtime constants .
5756	add adds a function to the tab .
5757	sort sorts the slice .
5758	find finds a function in the tab .
5759	read reads a value from a core . PCTab .
5760	read varint
5761	useLine returns a line for use in the command
5762	commandPath returns the path to the command .
5763	readCore reads and returns a core . Process .
5764	typeName returns the name of the type .
5765	fieldName returns field name .
5766	typeFieldName returns the name of the field .
5767	FindFunc finds the function in the process .
5768	Core returns a Process from a core . Process .
5769	Address returns the address of the region .
5770	Int returns the integer value of the region .
5771	Uintptr returns the current uintptr .
5772	Cast returns a copy of the region .
5773	Deref returns a copy of the region .
5774	Uint64 returns the current uint64 value .
5775	Uint32 returns the uint32 as a uint32 .
5776	Int32 reads a int32 from the region .
5777	Uint16 returns the current uint16 value .
5778	Uint8 returns the current uint8 value .
5779	String returns the string representation of the region .
5780	SlicePtr returns a pointer to a slice .
5781	SliceLen returns the length of the slice .
5782	Field returns a region for the field .
5783	ReadUint8 returns the uint8 value for the given address
5784	ReadUint16 reads a uint16 from the core file
5785	ReadUint32 reads a uint32 from the core file
5786	ReadUint64 reads a uint64
5787	ReadInt8 reads an int8
5788	ReadInt16 reads an int16
5789	ReadInt32 read int32
5790	ReadInt64 reads an int64
5791	ReadUintptr reads a uintptr
5792	ReadPtr reads a uintptr from the process .
5793	ReadCString read CString
5794	Source returns the name of the mapping .
5795	findMapping returns the mapping for a given address .
5796	Max returns the largest address
5797	Min returns the minimum of two addresses .
5798	Align returns the Align address of x .
5799	initialize initializes the dom .
5800	calculates the nodes in the dom .
5801	eval computes the value for a given vName .
5802	compress compresses the given vName .
5803	link adds a link to the dom .
5804	reverse reverses the dom .
5805	calcSize computes the size of the dom .
5806	objField returns a field name .
5807	Readable returns true if the address is readable
5808	ReadableN returns true if n is readable .
5809	splitMappingsAt splits a mapping at a given address .
5810	DynamicType returns the type of the given address .
5811	Create implements Btrfs . Filesystem .
5812	Resolve returns the ip address from the given URL .
5813	Equal returns true if tokens are equal .
5814	newDefaultClassifier returns a default classifier .
5815	Next returns the next token
5816	NewTokenizer returns a new Tokenizer
5817	Split splits a string into a slice of words .
5818	Between returns the string between left and right .
5819	BetweenF returns a function that returns a function between two strings .
5820	Camelize converts a string to Camelize .
5821	Capitalize capitalizes a string .
5822	CharAt returns the character at the given index .
5823	CharAtF is a function to return a function that returns a function to return a function that returns a function to return a function .
5824	ChompLeft returns s with the given prefix .
5825	ChompLeftF is a wrapper for ChompLeft
5826	ChompRight returns s with suffix .
5827	ChompRightF is a wrapper for ChompRight
5828	ClassifyF is a function for Classify .
5829	Clean removes spaces from a string .
5830	Dasherize takes a string and returns a sanitized string .
5831	EscapeHTML escape html
5832	DecodeHTMLEntities decodes HTML entities .
5833	EnsurePrefixF is a wrapper around EnsurePrefix .
5834	EnsureSuffixF is a helper function for EnsureSuffix .
5835	Humanize turns a string into a human readable form .
5836	Iif returns true if condition is false otherwise .
5837	IndexOf returns the index of needle in s .
5838	IsLower returns true if the string is a lower case
5839	IsUpper returns true if s is a uppercase .
5840	Left returns the left part of s .
5841	LeftF is a wrapper around Left .
5842	Literals converts a string to a slice of letters
5843	Lines converts a string to a slice of strings .
5844	Map iterates over a slice returning an array of elements .
5845	Match checks if a string matches a regular expression
5846	tract tasks from the project
5847	Pad pad string
5848	PadF pad string
5849	PadLeft pad string
5850	PadLeftF pad left
5851	PadRightF pads the string at the specified length .
5852	Pipe returns a copy of the string s .
5853	QuoteItems converts a slice of strings to a slice of strings .
5854	ReplaceF returns a function that returns a function that returns the new string .
5855	ReplacePatternF is a replacement for ReplacePattern .
5856	Reverse returns a copy of s .
5857	RightF returns a function that returns the right of the right string .
5858	Slice returns a slice of string .
5859	SliceF returns a new slice function .
5860	SliceContains returns true if the slice contains val .
5861	SliceIndexOf returns the index of val in a slice or - 1 if not found .
5862	Slugify returns a slugify slug .
5863	StripPunctuation removes all punctuation characters .
5864	StripTags removes tags from a string .
5865	Substr returns the substring at index n .
5866	SubstrF is a wrapper for SubstrF .
5867	TemplateWithDelimiters is similar to TemplateWithDelimiters but accepts a comma delimited string and closing delimiters .
5868	ToArgv converts a string to a slice of strings
5869	ToBool converts a string to a boolean value
5870	ToBoolOr convert string to bool value
5871	ToIntOr cast string to int
5872	ToFloat32Or convert a string to float32
5873	ToFloat64Or convert a string to float64
5874	UnescapeHTML unescapes HTML .
5875	WrapHTML wraps an HTML string with special tags .
5876	WrapHTMLF is a wrapper for WrapHTML .
5877	ReapChildren is used to re - reap all the children of the specified pids
5878	SdNotify writes a systemd notification to systemd .
5879	NewAuthenticator returns a new Authenticator
5880	Endpoint returns an http . Handler middleware .
5881	Unique returns a slice of unique ids .
5882	Contains checks if an item exists in the list .
5883	Includes returns true if all of the objects are in the given subset .
5884	Require is the same as Require .
5885	Enqueue enqueues a job
5886	A returns an Authorizer that can be used for testing .
5887	Run creates an Authorizer with the specified enforcers .
5888	And returns an Authorizer that matches a and b .
5889	Or returns an Authorizer that matches a and b .
5890	Enqueue adds a new job to the queue
5891	Callback adds a callback to be called when a queue is received
5892	NewWatcher creates a new watcher
5893	Add adds a new stream to the database .
5894	Action returns a firewatcher . Action
5895	Write returns true if the operation is writable
5896	String returns the string representation of the operation .
5897	Query returns a query for the current context
5898	Respond writes the given value to the ResponseWriter .
5899	EnsureApplication ensures that an application exists .
5900	EnsureFirstUser ensures the first user in the store
5901	Callback returns a function that will be called on every action .
5902	OpenStream is used to open a stream
5903	Close closes the stream .
5904	AddTokenIndexes adds the index to the indexer .
5905	GetTokenData returns the token data
5906	SetTokenData sets the token data
5907	ValidSecret checks if the given secret is valid
5908	HashSecret hashes the application s secret .
5909	ValidPassword returns true if the given password is valid .
5910	HashPassword hashes the User s password .
5911	MustCreateStore is like CreateStore but panics on error
5912	CreateStore creates a new store
5913	C returns a mgo . Collection for a given model
5914	NewAssetServer returns a new http . Handler for the given directory
5915	DefaultGrantStrategy is the default grant strategy
5916	DefaultTokenData returns the default token data for a resource .
5917	GenerateToken generates a new token for the policy
5918	ParseToken parses a token string and returns it .
5919	E creates a new enforcer that matches the specified name .
5920	MustGet is part of the Model interface .
5921	MustSet is part of the Model interface .
5922	NewGroup returns a new empty Group .
5923	Add adds a controller to the group .
5924	Endpoint returns an http . Handler middleware .
5925	Add adds an index to the index .
5926	AddRaw adds a new Index to the Indexer .
5927	Ensure ensures that all indexes are valid .
5928	NewCatalog creates a new Catalog instance .
5929	Add adds models to the catalog .
5930	All returns all models in the catalog .
5931	Visualize returns a visualization of the catalog .
5932	NewErrorReporter returns a Reporter that reports errors to the given writer .
5933	Ensure indexes
5934	E print a formatted error
5935	Compose composes a chain of middlewares .
5936	Includes returns true if all items are in a subset .
5937	Intersect returns the intersection between two lists .
5938	E creates an Error
5939	RootTracer is a middleware that is used for tracing
5940	NewTracerFromRequest creates a new Tracer from a request
5941	NewTracer returns a new Tracer .
5942	Push creates a new span .
5943	Last returns the last span .
5944	Tag adds a tag to the last tracer .
5945	Log implements Tracer .
5946	Context implements opentracing . Tracer .
5947	Pop removes the last span .
5948	Finish all spans
5949	NewPool creates a new pool .
5950	Add adds a new task to the pool
5951	Run the pool
5952	NewBodyLimiter returns a new BodyLimiter .
5953	LimitBody limits the size of the request .
5954	C returns a Callback that invokes the named function .
5955	Only returns matcher matching operations
5956	BasicAuthorizer returns a Callback that invokes the Firewaller interface .
5957	ModelValidator returns a Callback for Validator .
5958	TimestampValidator returns a CallbackTimestampValidator .
5959	RelationshipValidator returns a function that will return a function that will return a function that will be called when a model is found in the model .
5960	Inspect the Seekret object
5961	NewRule returns a new Rule
5962	AddUnmatch adds a unmatch to the rule .
5963	Run returns a list of run results
5964	NewSecret returns a new Secret
5965	NewObject returns a new Object
5966	SetMetadata sets the metadata for the object
5967	GetMetadata returns the value associated with the key .
5968	GetMetadataAll returns all metadata for this object
5969	SetRule sets an exception
5970	SetObject sets an exception object
5971	SetNline sets the nline .
5972	SetContent sets the content of Exception .
5973	Run determines if an Exception matches the specified secret .
5974	AddRule adds a rule to the Seekret
5975	LoadRulesFromFile loads rules from a file
5976	LoadRulesFromDir loads rules from a directory
5977	DefaultRulesPath returns the default rules path
5978	EnableRule enables a rule
5979	DisableRule disables a rule
5980	EnableRuleByRegexp enables rule by regexp
5981	DisableRuleByRegexp disables rule by regexp
5982	LoadObjects loads all objects from the source .
5983	GroupObjectsByMetadata implements the Seekret interface .
5984	GroupObjectsByPrimaryKeyHash returns a map of objects by primary key hash
5985	AddException adds an exception to the Seekret list .
5986	LoadExceptionsFromFile loads the Exceptions from a file .
5987	printPlainResults prints the results of the results .
5988	printJsonResults prints results to stdout
5989	NewXor64Source returns a new Xor64Source .
5990	xor64 returns the xor of a uint64 .
5991	next returns the next uint64 value .
5992	Seed sets the source to the given seed .
5993	NewFrameSet creates a new FrameSet .
5994	handleMatch updates the frameset .
5995	Index returns the position of the frame .
5996	Frame returns the frame at the given index .
5997	HasFrame returns true if the frame contains the given frame .
5998	FrameRangePadded returns a padded string .
5999	Normalize returns a copy of the frame set .
6000	FramesToFrameRange converts a slice of frames to a string .
6001	frameRangeMatches returns a list of frame ranges matching the frame range .
6002	toRange converts start to an array .
6003	NewWorkManager creates a new work manager
6004	processSources processes a set of sources
6005	isInputDone returns true if input is non - nil .
6006	closeInputs closes all inputs
6007	load configures the workManager .
6008	loadRecursive loads all files from the given paths .
6009	preparePaths takes a slice of paths and returns a set of files and a sequence of files .
6010	PadFrameRange pads the frame with padding .
6011	zips a string with zeros .
6012	zillInt returns z where z is z .
6013	NewInclusiveRange returns a new InclusiveRange .
6014	String returns a string representation of the InclusiveRange .
6015	End returns the end of the range
6016	Len returns the length of the range .
6017	Min returns the minimum of the range .
6018	Max returns the maximum value in the range
6019	Contains returns true if the given integer is within the range .
6020	closestInRange returns the closest value in the given value
6021	Index returns the index of the given value .
6022	String returns a string representation of the InclusiveRanges .
6023	Len returns the number of blocks in the range .
6024	Start returns the number of blocks in the range .
6025	End returns the end of the range .
6026	Min returns the minimum value .
6027	Max returns the maximum value .
6028	numRanges returns the number of blocks in the range .
6029	rangeAt returns the InclusiveRange at the given index .
6030	Append adds a new range to the end .
6031	AppendUnique appends unique values to start .
6032	Contains returns true if the given integer is within the range .
6033	Index returns the index for the given value .
6034	FrameRange returns the range of frames .
6035	FrameRangePadded returns the length of the frame .
6036	Index returns the path of the frame .
6037	SetDirname sets the directory name .
6038	SetPadding sets the padding for the file .
6039	SetPaddingStyle sets the padding for the file .
6040	SetExt sets the file extension .
6041	SetFrameRange sets the frame range .
6042	Len returns the length of the sequence .
6043	String returns a string representation of the sequence .
6044	Copy returns a copy of s .
6045	NewClient returns a new Client .
6046	UnmarshalXML implements XML . Unmarshaler
6047	UnmarshalXML implements XML . Unmarshaler
6048	Call performs a soap action
6049	JSONDoc loads a JSON document from a file
6050	AddLoader adds a new document loader
6051	JSONSpec loads a json document
6052	Embedded creates a new Document based on a JSON document .
6053	Spec loads the spec file
6054	Analyzed analyzes data and returns a Document .
6055	Expanded returns a new document .
6056	ResetDefinitions resets the spec s definitions .
6057	Pristine returns the current Pristine .
6058	OpenDb opens the database for the specified files .
6059	GetOrg returns the organization name
6060	GetRegion returns the region and region for the given IP .
6061	GetRegionName returns the region name for the given countryCode and regionCode .
6062	GetCountry returns the country code for the given IP .
6063	NewRotatingFileHandler returns a new RotatingFileHandler .
6064	Close closes the file descriptor
6065	String returns the string representation of the Level .
6066	New returns a new Logger .
6067	Close closes the logger
6068	SetLevelByName sets the logging level by name .
6069	Output implements Logger . Output .
6070	OutputJson writes the body to the logger .
6071	Print calls Output to print to the standard logger . Arguments are handled in the manner of fmt . Print .
6072	Println calls Output to print to the standard logger .
6073	Debug calls Output to print to the standard logger . Arguments are handled in the manner of fmt . Print .
6074	Debugln calls Output to print to the standard logger . Arguments are handled in the manner of fmt . Println .
6075	Error outputs an error log . Arguments are handled in the manner of fmt . Print .
6076	Errorln calls Output to print to the standard logger . Arguments are handled in the manner of fmt . Println .
6077	Info calls Output to print to the standard logger . Arguments are handled in the manner of fmt . Print .
6078	Infoln calls Output to print to the standard logger . Arguments are handled in the manner of fmt . Println .
6079	Warn implements Logger interface
6080	Warnln logs a warning message . Arguments are handled in the manner of fmt . Println .
6081	NewStreamHandler returns a new StreamHandler .
6082	Right prepends a string to the right
6083	New returns a new API client .
6084	setupMetadata populates the metadata from ssd . ResourcePatterns .
6085	recordTypes recursively recurses into p .
6086	appendSorted appends an action param to params
6087	parseDataType returns the data type for the action param
6088	parseParam creates a new ActionParam from a path
6089	newParam creates a new action parameter
6090	toGoReturnTypeName returns Go type name .
6091	toGoTypeName returns Go type name .
6092	typify marshals an object to JSON .
6093	isBuiltInType returns true if the given name is a builtin type
6094	MatchHref returns true if the given href matches the pattern .
6095	Substitute substitute variables in PathPattern
6096	MarshalJSON implements json . Marshaler
6097	Write multipart form params
6098	PerformRequest sends an HTTP request .
6099	PerformRequestWithContext sends a request with the given context
6100	LoadResponse unmarshals the response into a JSON object
6101	ScheduleLocator creates a new schedule locator
6102	TemplateLocator returns a TemplateLocator
6103	fetchDetails populates sshConfig objects from the given envName
6104	buildAliases builds an alias for the SSHConfig
6105	serverArray returns the server array with the given name
6106	server returns the server with the given name .
6107	toPackageName returns the package name .
6108	loadFile loads a file
6109	This is the entry point for testing
6110	Run the command
6111	CreateJSONResponse creates a http . Response
6112	AccountLocator creates a new AccountLocator
6113	AccountGroupLocator creates a new AccountGroupLocator .
6114	AlertLocator creates a new alert locator
6115	AlertSpecLocator returns a new alert spec locator
6116	AuditEntryLocator returns an AuditEntryLocator .
6117	BackupLocator creates a new BackupLocator
6118	ChildAccountLocator creates a new ChildAccountLocator .
6119	CloudLocator creates a CloudLocator
6120	CloudAccountLocator creates a new CloudAccountLocator .
6121	CookbookLocator returns a new instance of CookbookLocator
6122	CookbookAttachmentLocator returns a new instance of CookbookAttachmentLocator .
6123	CredentialLocator returns a CredentialLocator .
6124	DatacenterLocator creates a datacenter locator .
6125	DeploymentLocator creates a DeploymentLocator .
6126	HealthCheckLocator creates a health check locator .
6127	IdentityProviderLocator returns an IdentityProviderLocator .
6128	ImageLocator instantiates a new ImageLocator
6129	InputLocator returns InputLocator
6130	InstanceLocator returns InstanceLocator
6131	InstanceTypeLocator returns a InstanceTypeLocator .
6132	IP address locator
6133	IPAddressBindingLocator creates a new IpAddressBindingLocator .
6134	MonitoringMetricLocator returns a new instance of MonitoringMetricLocator
6135	MultiCloudImageLocator returns a new instance of MultiImageLocator .
6136	MultiCloudImageMatcherLocator returns a new instance of MultiImageMatcher .
6137	MultiCloudImageSettingLocator returns a new instance of MultiImageSettingLocator .
6138	NetworkLocator creates a NetworkLocator
6139	NetworkGatewayLocator creates a NetworkGatewayLocator .
6140	NetworkOptionGroupLocator creates a new NetworkOptionGroupLocator .
6141	NetworkOptionGroupAttachmentLocator returns a new instance of NetworkOptionGroupAttachment .
6142	Oauth2Locator instantiates a new Oauth2Locator
6143	PermissionLocator returns a PermissionLocator
6144	PlacementGroupLocator returns a PlacementGroupLocator .
6145	PreferenceLocator creates a new PreferenceLocator .
6146	PublisherLocator creates a new PublicationLocator
6147	PublisherLineageLocator creates a new PublicationLineageLocator .
6148	urringVolumeAttachmentLocator creates a new RecurringVolumeAttachmentLocator .
6149	RepositoryLocator creates a repository locator
6150	RepositoryAssetLocator creates a new RepositoryAssetLocator .
6151	ResourceGroupLocator creates a new ResourceGroupLocator .
6152	RightScriptLocator creates a new right script locator
6153	RightScriptAttachmentLocator returns a new instance of RightScriptAttachmentLocator .
6154	RouteLocator creates a new RouteLocator
6155	RouteTableLocator returns a new instance of RouteTableLocator
6156	RunnableBindingLocator creates a RunnableBindingLocator .
6157	SchedulerLocator returns a SchedulerLocator .
6158	SecurityGroupLocator creates a SecurityGroupLocator .
6159	SecurityGroupRuleLocator returns a new SecurityGroupRuleLocator .
6160	ServerLocator creates a ServerLocator
6161	ServerArrayLocator creates a new ServerArrayLocator
6162	ServerTemplateLocator creates a ServerTemplateLocator .
6163	ServerTemplateMultiCloudImageLocator creates a new ServerTemplateMultiCloudImageLocator .
6164	SessionLocator returns a new SessionLocator
6165	SshKeyLocator creates a SshKeyLocator .
6166	SubnetLocator creates a new SubnetLocator
6167	TagLocator returns a TagLocator
6168	TaskLocator returns a TaskLocator for the given href .
6169	UserLocator creates a UserLocator
6170	UserDataLocator creates a UserDataLocator
6171	VolumeLocator creates a VolumeLocator
6172	VolumeAttachmentLocator creates a new VolumeAttachmentLocator .
6173	VolumeSnapshotLocator creates a new VolumeSnapshotLocator .
6174	VolumeTypeLocator returns a VolumeTypeLocator .
6175	RegisterCommands registers the APICommand .
6176	ShowCommandHelp show help
6177	ShowAPIActions executes rll command
6178	ShowHelp prints help for a given command
6179	ParseCommandAndFlags parses a command and returns a TargetCommands
6180	validateFlagValue returns an error if the value is not a valid flag .
6181	buildQuery builds the APIParams from the input values .
6182	buildPayload creates APIParams from APIParams
6183	shortenPattern takes a path and a suffix and returns the match .
6184	cleanDescription removes all required security scopes
6185	fileExists checks if a file exists
6186	AnalysisSnapshotLocator returns an instance of AnalysisSnapshotLocator .
6187	BudgetAlertLocator returns an instance of BudgetAlertLocator .
6188	CloudBillLocator creates a new CloudBillLocator .
6189	CloudBillMetricLocator returns a new instance of CloudBillMetricLocator .
6190	CurrentUserLocator creates a new CurrentUserLocator
6191	InstanceCombinationLocator returns a locator for an InstanceCombination href .
6192	InstanceMetricLocator creates a new InstanceMetricLocator .
6193	InstanceUsagePeriodLocator creates a new InstanceUsageLocator .
6194	PatternLocator instantiates a new PatternLocator
6195	ReservedInstanceLocator creates a new reserved instance locator
6196	ReservedInstancePurchaseLocator creates a new reserved instance purchase locator .
6197	ScenarioLocator returns a new ScenarioLocator
6198	ScheduledReportLocator instantiates a new ScheduledReportLocator .
6199	TempInstancePriceLocator creates a new TempInstancePriceLocator
6200	UserSettingLocator returns a UserSettingLocator .
6201	readAllAsync reads all data from the given io . ReadCloser .
6202	extractArg extracts the value from args and returns the value
6203	write writes b to the output file .
6204	AppliedPolicyLocator returns an applied policy locator
6205	An approval locator
6206	InceptionLocator instantiates an IncidentLocator
6207	PolicyTemplateLocator returns a new PolicyTemplateLocator
6208	PublishedTemplateLocator returns a published template locator
6209	DebugCookbookPathLocator returns a new instance of DebugCookbookPathLocator .
6210	DockerControlLocator creates a new DockerControlLocator
6211	EnvLocator creates a new EnvLocator
6212	LoginControlLocator creates a new login control locator
6213	ProcLocator returns ProcLocator
6214	Rl10Locator instantiates a new Rl10Locator
6215	TSSLocator creates a TSSLocator
6216	TSSControlLocator creates a new TSSControlLocator
6217	TSSPluginLocator instantiates a new TSSPluginLocator
6218	NewAngularWriter creates a new angular writer
6219	WriteResource renders an angular template
6220	path returns a string representation of the action pattern .
6221	monatory returns true if the action is mandatory .
6222	New creates a new API client
6223	FromCommandLine creates a new API client from a command line
6224	CanAuthenticate checks if the API is authenticated
6225	Encrypt encrypts a string using AES - 256 .
6226	Decrypt decrypts the given text .
6227	guessType guesses the type name and response body .
6228	addType adds a new Type to the API .
6229	extractCmdLineParams returns a slice of ActionParamParams that can be used to generate the command line parameters .
6230	NewMetadataWriter returns a new MetadataWriter .
6231	WriteHeader writes the header for the given package .
6232	WriteMetadata writes the metadata to a writer
6233	location returns the string representation of the location
6234	New returns a new API instance
6235	fromAPI converts rapi . API to api
6236	BuildRequest builds an HTTP request for the given resource .
6237	setupMetadata populates the metadata map .
6238	NewDisplayer creates a Displayer from a http . Response .
6239	ApplySingleExtract applies the provided extractor to the Displayer .
6240	ApplyExtract applies the given selector to the Displayer .
6241	ApplyHeaderExtract extracts the specified header from the Displayer .
6242	Output returns the string representation of the display
6243	NewAPIAnalyzer creates a new APIAnalyzer .
6244	Analyze returns an APIDescriptor .
6245	AnalyzeAliases analyzes the API resources
6246	LocatorFunc returns a locator function for the given attributes .
6247	ParseRoute takes a moniker and returns a list of pathPatterns
6248	isDeprecated returns true if path is deprecated .
6249	isQueryParam returns true if n is a query parameter .
6250	isPathParam checks if a pathPattern is a valid pathPattern
6251	Fetch audit entries
6252	formatTime returns a string representation of tm .
6253	printAudits prints audit entries
6254	extractUnique removes duplicate entries from oldEntries .
6255	getHref returns the href of the AuditEntry
6256	fail is called when an error occurs .
6257	params returns a set of parameters for this action
6258	paramsInitializer generates the initializer for an action
6259	commandLine returns the command line arguments .
6260	Convert a string to a verbose verb
6261	escapeBackticks converts a string to a Go string .
6262	AccountPreferenceLocator returns an instance of AccountPreferenceLocator .
6263	ApplicationLocator returns a new ApplicationLocator
6264	EndUserLocator creates a new EndUserLocator
6265	NotificationRuleLocator instantiates a new NotificationRuleLocator .
6266	UserPreferenceLocator returns a UserPreferenceLocator .
6267	UserPreferenceInfoLocator returns a UserPreferenceInfoLocator .
6268	LoadConfig loads config from a file
6269	CreateConfig loads a config file
6270	fromAPI converts rapi . API to api
6271	HostFromLogin returns the host name for the login .
6272	AnalyzeParam generates an ActionParam based on a Parameter
6273	AnalyzeAttribute analyzes an attribute
6274	AnalyzeType analyzes a type
6275	CreateType creates an object for a query
6276	Ref returns the definition for a given definition
6277	Type returns the type string .
6278	Required returns list of required strings
6279	ID returns the ID of the reference
6280	Service returns the service name
6281	Method returns the method name .
6282	NewTypeRegistry returns a new TypeRegistry .
6283	GetNamedType returns the named object with the given name
6284	CreateNamedType creates a new NamedType
6285	CreateInlineType creates a new inline type
6286	FinalizeTypeNames populates the names of all named types in the registry
6287	Merge merges two API descriptors .
6288	FinalizeTypeNames takes a map of resource names and applies them to the API .
6289	uniqueTypeName returns a unique identifier for the given type .
6290	Returns the list of mandatory params
6291	HasOptionalParams returns true if action has optional params
6292	MakeUniq creates an uniq unique identifier .
6293	NewClientWriter returns a new ClientWriter .
6294	WriteHeader writes the header to w .
6295	WriteResourceHeader writes a resource header
6296	WriteType writes an object to the writer
6297	WriteResource writes a resource to the writer .
6298	WithTrail returns a copy of the EvalCtx with the given tail .
6299	AnalyzeEndpoint analyzes the given endpoint and path .
6300	NetworkInterfaceLocator creates a NetworkInterfaceLocator .
6301	NetworkInterfaceAttachmentLocator returns a new NetworkInterfaceAttachmentLocator .
6302	UnmarshalJSON implements json . Unmarshaler
6303	ExecutionLocator returns execution locator
6304	NotificationLocator instantiates a new NotificationLocator
6305	OperationLocator instantiates a new OperationLocator
6306	ScheduledActionLocator instantiates a new ScheduledActionLocator
6307	NewBasicAuthenticator returns an Authenticator that authenticates basic authentication requests .
6308	NewSSAuthenticator returns an Authenticator based on the given accountID .
6309	newCookieSigner returns an Authenticator that authenticates cookies using the given accountID .
6310	Sign signs an http . Request .
6311	CanAuthenticate returns nil if the client is authenticated .
6312	refresh updates the cookie s cookies .
6313	Sign adds the token to the request .
6314	Sign adds the request s secret to the request .
6315	Sign signs a POST request
6316	SetHost sets the host name
6317	CanAuthenticate checks to see if the user is authenticated .
6318	extractRedirectURL extracts the redirect URL from the response .
6319	buildURL builds a URL from the given host and path .
6320	GetAction gets an action by name
6321	HasLink returns true if the resource has a link
6322	findMatches returns all paths that match the href
6323	NewPB creates a new HTTP client for the given ParamBlock
6324	newVariableDumpClient returns a new instance of a VariableDumpClient
6325	newRawClient returns a new http . Client with no redirect settings .
6326	DoImp is a wrapper for Do .
6327	Do sends a request to the API .
6328	doImp executes the request and returns the response .
6329	getClientWithoutTimeout returns an http . Client without timeout .
6330	dumpRequest is used to dump the request
6331	writeHeaders writes the headers to a buffer
6332	copyHiddenHeaders returns a copy of the header
6333	validateCommandLine validates command line arguments .
6334	APIClient returns a client for the given command name
6335	RegisterClientCommands registers client commands .
6336	Interactive configures the Logger .
6337	toPattern converts a verb and path into a pathPattern .
6338	WithClientIP adds the client IP to the context .
6339	ClientIP returns the client IP .
6340	NewProducer creates a new Kafka producer
6341	StartProducer starts a new producer
6342	Start starts the Producer .
6343	Stop stops the producer
6344	Publish sends a message to Kafka
6345	PublishTo implements the Producer interface .
6346	NewLocalEngine returns a new LocalEngine .
6347	validate validates consumer configuration .
6348	defaults sets default values .
6349	NewConsumer creates a new consumer
6350	StartConsumer starts a new consumer
6351	Start starts the consumer .
6352	RateLimit returns a channel that will receive messages from a given limit .
6353	Write writes r to w .
6354	ReadResponse from bufio . Reader
6355	backoff computes the backoff of an attempt .
6356	String returns the string representation of a FrameType
6357	NewConsulEngine creates a new Consul Engine .
6358	ParseMessageID parses a hexadecimal string into a MessageID .
6359	WriteTo writes the MessageID to w .
6360	NewMessage creates a new Message .
6361	Finish finishes the message .
6362	Requeue sends a Req message to the server .
6363	ReadCommand reads a single command from r .
6364	funcMapMaker returns a map of funcMap .
6365	Funcs sets template functions .
6366	Execute renders a template
6367	RegisterPath registers a path with the given path
6368	Asset returns the contents of a file
6369	Glob returns all files matching the given pattern .
6370	NameSpace is part of the AssetFileSystem interface .
6371	New returns a new Render instance .
6372	RegisterViewPath register view path
6373	SetAssetFS sets the AssetSystem for rendering
6374	Layout returns a new template with the given name .
6375	Funcs returns a copy of the template s Funcs
6376	Execute renders a template
6377	RegisterFuncMap registers a function map .
6378	Asset returns the contents of a file
6379	NewPlainClient returns a new plain client .
6380	Create creates a new uploader
6381	Open sends a GET request to the given URL .
6382	Sign signs the request with k .
6383	Sign adds a signature to the request
6384	Readdir returns a list of directory entries .
6385	Find returns the list of nodes in x .
6386	Lex starts a Lexer Lexer .
6387	MustParseXML is like Parse but panics on error .
6388	ParseXML parses an XML document from an io . Reader .
6389	Call calls the wrapped function
6390	Parse an XPath string and return an XPathExec
6391	MustParse is like Parse but panics if an error occurs .
6392	Exec executes XPath XPath on the XPath node .
6393	ExecBool executes a XPath expression .
6394	ExecNum executes XPath XPath expression .
6395	ExecNode executes a XPath XPath expression .
6396	MustExec is like Exec but panics on error .
6397	ParseExec is a wrapper around XPath . ParseExec
6398	CreateNode creates a new XMLNode .
6399	GetChildren returns the children of xm .
6400	GetAttrs returns the node s attributes .
6401	ResValue returns the res value of x .
6402	Parse parses an XItem string into a Node .
6403	GetToken returns an XML Token
6404	ResValue returns the value for an XMLNode
6405	Exec evaluates a node and returns the result .
6406	String returns a string representation of n .
6407	Num converts a string to a Num .
6408	BuildNS builds a list of NSNS .
6409	GetAttribute gets an attribute from an element
6410	GetAttributeVal returns the value of an attribute .
6411	GetAttrValOrEmpty returns an empty string if it is empty .
6412	FindNodeByPos returns the node with the given position .
6413	Marshal writes the given Node to w .
6414	MarshalStr converts a Tree to a string .
6415	NewLexer returns a new Lexer
6416	NewLexerString creates a new Lexer from a string .
6417	Split splits a string into a slice of strings .
6418	Register adds a new error to the registry .
6419	Get returns the ErrDescriptor for the given code
6420	GetAll returns all registered errors .
6421	From converts an error to an Error
6422	Descriptor returns ErrDescriptor for an error
6423	GetAttributes returns an Error for the given error .
6424	HTTPStatusCode returns the HTTP status code for the given type .
6425	HTTPStatusCode returns the HTTP status code of the error .
6426	HTTPStatusToType converts HTTP status to Type .
6427	ToHTTP converts an error to an http . ResponseWriter
6428	toImpl converts an error to a impl .
6429	MetadataFromIncomingContext returns the metadata from the given context
6430	MetadataFromOutgoingContext returns the metadata from the given context
6431	TokenFromMetadata extracts token from metadata .
6432	TokenFromIncomingContext extracts the token from the context
6433	OutgoingContextWithToken returns a copy of the outgoing context with the provided token .
6434	KeyFromMetadata extracts the key from the metadata .
6435	KeyFromIncomingContext extracts the key from the incoming context
6436	OutgoingContextWithKey returns a copy of the outgoing context with the given key .
6437	IDFromMetadata extracts the ID from the metadata .
6438	IDFromIncomingContext extracts metadata from context
6439	OutgoingContextWithID returns a copy of the outgoing context .
6440	ServiceInfoFromMetadata returns the service name and net address
6441	ServiceInfoFromIncomingContext extracts service information from a context
6442	OutgoingContextWithServiceInfo returns a copy of the outgoing context .
6443	LimitFromMetadata extracts the limit from the metadata .
6444	OffsetFromMetadata returns the offset from the metadata .
6445	LimitAndOffsetFromIncomingContext returns limit and offset from context
6446	OutgoingContextWithLimitAndOffset returns a new context with the given limit and offset .
6447	before reports whether i is before i . e .
6448	New returns an Error with the given attributes .
6449	WithNamespace adds a namespace to the logger context
6450	Wrap returns a new instance of Namespaced .
6451	WithField returns a new logger with the specified key .
6452	WithFields returns a new implementation of the Namespaced interface .
6453	Format returns a formatted message formatted according to the format specifier .
6454	fix returns a copy of v .
6455	GRPCCode returns the GRPCCode code for the given Type .
6456	GRPCCodeToType converts a gRPC code to a Type
6457	GRPCCode returns gRPC code .
6458	FromGRPC converts an error to an Error .
6459	ToGRPC converts an error to grpc error .
6460	IsEnabled returns true if the namespace is enabled
6461	Set updates the namespace namespaces .
6462	Cause returns the cause of the error .
6463	parseCode returns the code associated with the given string .
6464	UnaryServerInterceptor returns a new UnaryServerInterceptor .
6465	StreamServerInterceptor is a gRPC . StreamServerInterceptor .
6466	UnaryClientInterceptor returns a new UnaryClientInterceptor .
6467	StreamClientInterceptor is a gRPC . StreamClientInterceptor .
6468	Interceptor returns a StreamClientInterceptor that starts streaming RPCs .
6469	Wrap is part of the Logrus interface .
6470	NewCounter returns a new Counter .
6471	NewRedisCounter returns a new Counter
6472	NewLimiter is a constructor for Limiter .
6473	WithInsecure returns a copy of the TokenCredentials with insecure credentials .
6474	WithTokenFunc returns a new TokenCredentials with the given key .
6475	GetRequestMetadata extracts the token metadata from the request context
6476	FieldsFromIncomingContext creates a ttnlog . Fields from a context
6477	String returns the type name .
6478	UnmarshalText implements the encoding . TextUnmarshaler interface for Type .
6479	fromString converts a string to a Type
6480	Start starts the goroutine to collect memory stats
6481	NewSimple returns a new Simple queue .
6482	Wrap returns a new filtered instance
6483	WithFilters returns a copy of the filter .
6484	WithField adds a field to the filter .
6485	WithFields returns a new instance of Filter with the given fields .
6486	FilterSensitive is a filter that returns a Filter that matches elided strings .
6487	SliceFilter is used to filter a slice of values
6488	MapFilter is used to filter map keys
6489	RestrictFilter returns a new Filter with the given filter name .
6490	LowerCaseFilter is a filter that adds a filter to the filter .
6491	newBatchPoints creates a new BatchPoints .
6492	NewSinglePointWriter returns a new SinglePointWriter
6493	Write writes a single point to the writer .
6494	WithScalingInterval sets the sampling interval .
6495	NewBatchingWriter returns a new BatchingWriter .
6496	Write writes a new point to the writer .
6497	MustParseLevel is part of the interface .
6498	New creates a new Stream
6499	SetLogger sets the logger for the stream .
6500	CloseRecv closes the stream .
6501	Stats returns the number of bytes sent and dropped .
6502	Run starts the StreamBuffer .
6503	ServerOptions returns gRPC server options .
6504	ClientOptions returns gRPC dial options for ttnlog .
6505	UnaryServerInterceptor returns a new unary server interceptor .
6506	StreamServerInterceptor returns a StreamServerInterceptor that logs messages from ttnlog .
6507	UnaryClientInterceptor returns a new UnaryClientInterceptor .
6508	StreamClientInterceptor returns a new streaming client interceptor that can be used for streaming .
6509	defaults sets defaults .
6510	Flush flushes the batch .
6511	New creates a new Handler
6512	HandleLog implements log . Handler .
6513	New returns a new TTNRandom interface
6514	Names returns the names of the URI template .
6515	String returns the string representation of a Perfatum .
6516	RenderPerfdata renders the perfatum data
6517	Exit prints the given status
6518	NewCheckWithOptions creates a new check with the given options .
6519	AddResult adds a new status to the check .
6520	AddResultf is part of the Checker interface .
6521	String returns the string representation of the check
6522	Exitf is part of the Checker interface .
6523	Criticalf outputs a critical log message .
6524	Unknownf is an alias for Command .
6525	NewDefaultStatusPolicy returns a default status policy .
6526	NewStatusPolicy returns a new instance of StatusPolicy .
6527	ParseRange parses a Range from a string .
6528	Check returns true iff the given value is valid .
6529	CheckInt checks if an integer is within the Range .
6530	CheckUint64 checks if the value is a uint64 .
6531	NewClient returns a new Client .
6532	GetKeyMeta returns the meta for a key path
6533	GetKeysInDirMeta returns all keys in a given path
6534	GetKeyContent returns the content of a key
6535	GetJobSummariesForProject returns all jobs for a given project
6536	GetJobsForProject returns all jobs for a given project
6537	GetJob returns a job detail by ID .
6538	CreateJob creates a new job summary .
6539	CreateOrUpdateJob creates a new job summary .
6540	DeleteJob deletes a job by ID .
6541	JobSummary returns a summary of the job import result .
6542	GetSystemInfo gets system information .
6543	DateTime returns the timestamp as a time . Time .
6544	GetAllProjects returns a list of all projects
6545	GetProject returns a project by name .
6546	CreateProject creates a new project .
6547	DeleteProject removes a project by name .
6548	SetProjectConfig sets the config for a project
6549	NewClient creates a new PBRest client
6550	NewClientByToken returns a Client for the given token
6551	SetDepth sets the depth of the client .
6552	ListDatacenters returns a list of datacenters
6553	CreateDatacenter creates a new datacenter
6554	GetDatacenter returns the given dcid
6555	UpdateDataCenter updates a new datacenter
6556	DeleteDatacenter deletes a datacenter
6557	WaitTillProvisioned blocks until the request has completed .
6558	ListFirewallRules returns a list of firewall rules
6559	GetFirewallRule returns a single firewall rule
6560	CreateFirewallRule creates a new firewall rule
6561	UpdateFirewallRule updates a firewall rule
6562	DeleteFirewallRule deletes a firewall rule
6563	ListLoadbalancers returns loadbalancers for given dcid .
6564	GetLoadbalancer returns a loadbalancer by dcid .
6565	Update loadbalancer properties
6566	DeleteLoadbalancer deletes a loadbalancer
6567	ListBalancedNics returns a list of nics for the given balancer
6568	AssociateNic associates a new nic with the given ID .
6569	GetBalancedNic returns the details of the specified nic .
6570	DeleteBalancedNic deletes the specified nic
6571	ListLans returns a list of all LANs for the given dcid .
6572	GetLan gets a LAN by dcid
6573	DeleteLan deletes a lan
6574	ListNics returns a list of network interfaces .
6575	CreateNic creates a new NIC
6576	GetNic gets a nic
6577	UpdateNic updates a nic
6578	DeleteNic deletes a nic
6579	ListSnapshots returns a list of snapshots
6580	GetSnapshot gets a snapshot
6581	DeleteSnapshot deletes a snapshot
6582	UpdateSnapshot updates a snapshot
6583	ListIPBlocks returns a list of all IP blocks
6584	ReserveIPBlock creates a new IP block
6585	GetIPBlock returns information about an IP block
6586	UpdateIPBlock updates an existing IP block
6587	ReleaseIPBlock releases an IP block
6588	ListVolumes returns volumes for given dcid
6589	GetVolume gets a volume
6590	UpdateVolume updates a volume
6591	CreateVolume creates a new Volume
6592	DeleteVolume deletes a volume
6593	CreateSnapshot creates a new snapshot
6594	RestoreSnapshot restores a snapshot
6595	ListServers returns a list of servers for a given dcid .
6596	GetServer returns a server by dcid
6597	DeleteServer deletes a server
6598	ListAttachedCdroms lists all Cdroms
6599	AttachCdrom attaches a cdid to the server
6600	GetAttachedCdrom returns the image named cdid
6601	DetachCdrom detaches a cdrom
6602	ListAttachedVolumes returns a list of Volumes
6603	AttachVolume attaches a volume to a given dcid
6604	GetAttachedVolume returns the attached volume
6605	DetachVolume detaches a volume .
6606	StartServer starts a new server
6607	ListLocations returns a list of locations
6608	GetRegionalLocations returns a list of locations for a given regid .
6609	GetLocation returns information about a location
6610	GetContractResources returns all available contracts .
6611	ListImages return images
6612	GetImage retrieves an image by its ID .
6613	PrintHeaders prints response headers
6614	ListGroups returns a list of all available groups
6615	GetGroup returns a group by id
6616	CreateGroup creates a new Group
6617	UpdateGroup updates a group
6618	DeleteGroup deletes a group
6619	Returns a list of shares
6620	GetShare returns a share for a group
6621	AddShare adds a new share to a group
6622	UpdateShare updates a share
6623	DeleteShare deletes a share resource
6624	ListGroupUsers returns a list of users for a given group
6625	AddUserToGroup adds a user to a group
6626	DeleteUserFromGroup deletes a user from a group
6627	ListUsers returns a list of users
6628	GetUser returns information about a user
6629	CreateUser creates a new user
6630	UpdateUser updates an existing user
6631	DeleteUser deletes a user
6632	ListResources returns all available resources
6633	GetResourceByType gets a single resource by its id
6634	ListResourcesByType returns a list of all resources for a given type
6635	ListRequests returns a list of requests
6636	GetRequest returns the given request ID .
6637	GetRequestStatus returns request status
6638	Close closes the underlying file .
6639	GetSerializableArgument extracts the value from the meta interface
6640	BoolVar implements EnvironmentFlag .
6641	Bool implements EnvironmentFlags .
6642	IntVar implements EnvironmentFlags .
6643	Int implements EnvironmentFlags .
6644	Int64Var implements EnvironmentFlag .
6645	Int64 implements EnvironmentFlags .
6646	UintVar implements EnvironmentFlags .
6647	Uint implements EnvironmentFlags .
6648	Uint64Var implements EnvironmentFlags .
6649	Uint64 implements EnvironmentFlags .
6650	StringVar implements EnvironmentFlags .
6651	String returns an environment flag .
6652	Float64Var implements EnvironmentFlag .
6653	Float64 implements EnvironmentFlag .
6654	DurationVar implements environs . DurationVar .
6655	Duration defines an option as a duration flag .
6656	Parse parses the environment variables and parses the environment .
6657	WriteStringToFile writes a string to a file
6658	ReadFileToString reads the contents of a file
6659	LineReader returns a channel that reads lines from the given io . Reader .
6660	LineReaderFrom returns a channel from a given path .
6661	FileExists checks if a file exists
6662	FileExistsInPath checks if a file exists
6663	GetPathParts returns the path parts of the given path .
6664	Get this executable parts
6665	RandomString returns a random string
6666	ParseAddress returns proto and path components .
6667	HomeDir returns the home directory .
6668	IsTCPPortAvailable checks if a TCP port is available
6669	RandomTCPPort returns random TCP port
6670	HashString returns the hash of a string .
6671	Context retrieves session from context
6672	Token returns an oauth2 . Token from the session .
6673	NewDaemon returns a new Daemon
6674	Close closes the daemon .
6675	NewAccessTokenContext returns a new context with an access token .
6676	AccessTokenFromContext returns the access token stored in the context .
6677	RandomAccessToken returns a random access token
6678	Init creates a new zap logger .
6679	Load loads a dictionary from a file .
6680	Start is part of the Storage interface .
6681	Get is part of the Storage interface .
6682	List is part of the Storage interface .
6683	Exists is part of the Storage interface .
6684	Abandon removes the session from the storage
6685	SetValue is part of the Storage interface .
6686	Delete deletes a session
6687	Setup initializes storage .
6688	TearDown closes the database .
6689	initJaeger initializes a zap . Tracer .
6690	Usage prints a usage report .
6691	Build builds a DoubleArray from a list of keywords .
6692	Read reads a DoubleArray from r .
6693	Get returns the node at the given index .
6694	ExternalNodes returns all external nodes
6695	GetOther returns the node with the given accessToken
6696	GoString returns a string representation of the Cluster
6697	Scan implements the sql . Scanner interface .
6698	Value implements driver . Valuer interface .
6699	Has returns true if a key exists in the bag .
6700	WriteTo writes the IndexTable to the io . Writer .
6701	ReadIndexTable reads the index table from r .
6702	New creates a new ActionBar
6703	RegisterAction registers a new action
6704	Actions returns a new ActionBar instance
6705	Render renders the action page
6706	FuncMap returns a func map for edit_button
6707	EditMode checks if the current user is edit mode
6708	SwitchMode switch mode
6709	InlineEdit show inline edit
6710	Error returns the error message .
6711	ParseFile parses a file and returns a list of machines .
6712	FindMachine finds a machine by filename and returns it .
6713	New returns a new Kace .
6714	Camel converts s to CamelCase .
6715	Pascal returns the Pascal case
6716	Snake converts a string to snake case .
6717	SnakeUpper returns the snake case string
6718	Kebab takes a string and returns it .
6719	KebabUpper implements the KebabUpper interface .
6720	isPathSafe returns an error if the given string is invalid .
6721	Start implements the Tracer interface
6722	ParseAuthHeaders parses HTTP headers and returns AuthCreds
6723	Tracer is a functional option for Tracer .
6724	HTTPClient is a functional option for Client .
6725	BasicAuth sets HTTP Basic Authentication
6726	BearerAuth is used to set the authentication token
6727	CookieJar is used to set a cookie jar
6728	SanitizerEnabled is used to set the sanitizer on the client
6729	OpenFile opens a file
6730	RoundTrip executes a round trip .
6731	SetAuthHeader sets the Authorization header
6732	FileName returns the filename
6733	newBuffersFromFiles creates a new buffer from the given files .
6734	newFileBuffer returns a new instance of a FileBuffer
6735	rewind rewinds the underlying FileReader .
6736	ConvertResponse converts HTTP response to HTTP response
6737	Set converts a string to a boolean value .
6738	WriteAnswer writes an expected value to the option .
6739	String returns a string representation of a BoolOption .
6740	TriggerIncidentKey triggers an incident key
6741	TriggerWithDetails will trigger an incident with the given details .
6742	TriggerIncidentKeyWithDetails is a shortcut for TriggerIncidentityKey .
6743	Merge merges src into dst .
6744	setSource sets the source file .
6745	convertString converts src to dst
6746	Do executes f in the database .
6747	NewFile creates a new writer
6748	internalRun runs the benchmark .
6749	String returns a string representation of the row .
6750	Tabulate returns a tabular summary of the results .
6751	AmazonRequest performs Amazon HTTP request .
6752	WriteTabularData writes a tabular summary of results .
6753	Reduce returns a list of buckets in the given interval .
6754	NewSemaphore creates a new Semaphore .
6755	Release releases the semaphore .
6756	Resize resizes the semaphore .
6757	AddOutput adds a new output container to the benchmark .
6758	RunBenchmarks runs the benchmark .
6759	parseBool parses a boolean .
6760	checkInteger checks if an integer is an integer .
6761	parseInt64 parses a 64 - bit integer from a byte array .
6762	parseInt32 parses an integer from a byte slice .
6763	parseBigInt parses a big . Int from a byte slice .
6764	parseBitString parses a BITString from a byte slice .
6765	parseObjectIdentifier parses a BSON ObjectIdentifier .
6766	parseBase128Int parses a base128 integer from a byte slice .
6767	parseGeneralizedTime returns the time . Time from a byte slice .
6768	parsePrintableString parses a printable string .
6769	isPrintable reports whether b is a printable byte .
6770	parseSequenceOf is used to parse a sequence of bytes .
6771	invalidLength returns true if the offset is invalid .
6772	setDefaultValue sets the default value if required .
6773	UnmarshalWithParams unmarshals bytes into val .
6774	Parse the field parameters from a comma - separated string .
6775	getUniversalType returns the tag number for the given type
6776	DecodeString decodes a raw string .
6777	MailNotifier gets a mailNotifier from the database
6778	SaveMailNotifier updates a mail notifier
6779	RegisterProvider registers a new provider with the given name .
6780	Initialize the database
6781	Until runs f until stopCh is closed .
6782	logPanic logs panics .
6783	User get user by username
6784	Users get users
6785	SaveUser saves a user
6786	DeleteUser delete a record
6787	LoadCACertFile loads a CA certificate from a PEM - encoded file .
6788	NewAuth creates a new Auth
6789	ValidateRequest returns nil if the request is valid
6790	Process checks if the request is valid
6791	ValidateCN checks that the certificate matches the allowed CN
6792	ValidateOU validates an OU
6793	KeyLen returns the length of x .
6794	DefaultConfig returns a new vault configuration .
6795	New creates a new cert signer
6796	New creates a new VaultFactory
6797	DefaultServiceConfig returns a new ServiceConfig with default values .
6798	NewService returns a new Vault Service .
6799	Delete deletes a cluster
6800	IsNoVaultHandlerDefined returns true if the error is a no - op for the given error .
6801	New returns a new Vault Service .
6802	Create creates a new role
6803	CreateJob creates a new Job with default configuration .
6804	Run starts the worker .
6805	Create a new Watcher
6806	Start the watcher
6807	Stop the watcher
6808	Active returns true if the watcher is active .
6809	Add adds new paths to the watcher .
6810	watch is a long running goroutine that runs each watcher .
6811	Watching returns a list of watched paths .
6812	State returns a list of all watched paths .
6813	Store stores an error in the request context .
6814	Get returns the error stored in the request context .
6815	Catch adds an error to the middleware chain .
6816	Try is a wrapper around http . Handler .
6817	Recover returns a middleware that recovers panics from the request .
6818	This is the main entry point for testing .
6819	SyncHandler returns a http . Handler that sends data to the server
6820	connect connects to the client .
6821	send sends an update to the transport .
6822	NumConnections returns the number of active connections .
6823	Push pushes the push queue to the queue .
6824	gopush sends a JSON - encoded JSON blob to the internal state .
6825	NewOutForward creates a new OutForward
6826	Run runs the in - memory tail command
6827	New creates a new fluent instance .
6828	Close closes the connection
6829	IsReconnecting returns true if the connection is reconnecting .
6830	connect connects to the server .
6831	Notification creates a new Notifier
6832	NullNotification creates a new Notifier
6833	New creates a new identity
6834	Issue creates a new identity
6835	Subject returns an Option that sets the certificate name .
6836	PrivateKey returns an Option that sets the private key .
6837	NotBefore is an Option that sets a time . Time value .
6838	NotAfter is an Option that sets the timeout for the client .
6839	IssuingCertificateURL is an Option to set the URLs that are issued .
6840	OSPServer is an Option to set the OSCSP server
6841	New creates a new TelegramBotAPI instance .
6842	NewWithWebhook creates a new instance of TelegramBotAPI .
6843	Close closes the API connection .
6844	GetMe gets the current user
6845	RunBot runs the bot .
6846	RunBotOnWebhook runs a custom bot on webhook
6847	NewOutgoingMessage creates a new outgoing message .
6848	NewOutgoingLocation creates a new OutgoingLocation .
6849	NewOutgoingVenue creates a new OutgoingVenue .
6850	NewOutgoingVideo creates a new OutgoingVideo .
6851	NewOutgoingVideoResend creates a new OutgoingVideo .
6852	NewOutgoingPhoto creates a new outgoing photo .
6853	NewOutgoingPhotoResend creates a new outgoing photo .
6854	NewOutgoingSticker creates a new OutgoingSticker .
6855	NewOutgoingStickerResend creates a new OutgoingSticker instance .
6856	NewOutgoingVoice creates a new outgoingVoice .
6857	NewOutgoingVoiceResend creates a new OutgoingVoice instance .
6858	NewOutgoingAudio creates a new OutgoingAudio .
6859	NewOutgoingAudioResend creates a new outgoing audio .
6860	NewOutgoingDocument creates a new OutgoingDocument .
6861	NewOutgoingDocumentResend creates a new OutgoingDocument instance .
6862	NewOutgoingForward creates a new outgoing message .
6863	NewOutgoingChatAction creates a new OutgoingChatAction .
6864	NewOutgoingUserProfilePhotosRequest creates a new OutgoingUserProfilePhotosRequest .
6865	NewOutgoingKickChatMember creates a new OutgoingKickChatMember .
6866	NewOutgoingUnbanChatMember creates a new OutgoingUnbanChatMember .
6867	NewOutgoingCallbackQueryResponse creates a new OutgoingCallbackResponse .
6868	NewInlineQueryAnswer creates a new inline query answer
6869	Type returns the type of Message
6870	Type returns the type of this update
6871	MarshalJSON returns the JSON encoding of a Recipient .
6872	querystring returns the querystring representation of the outgoingSetWebhook .
6873	getBaseQueryString returns the query string for the outgoing request
6874	getBaseQueryString returns the query string for the outgoing message .
6875	querystring returns the string representation of the outgoing audio .
6876	querystring returns the querystring for the photo
6877	querystring returns a querystring for the OutgoingUserProfilePhotosRequest .
6878	querystring returns the query string representation of the outgoing video
6879	querystring returns the string representation of the outgoingVoice
6880	NewInlineQueryResultArticle creates a new inline query article .
6881	NewInlineQueryResultPhoto creates a new inline query photo .
6882	NewInlineQueryResultGif creates a new inline query .
6883	NewInlineQueryResultMpeg4Gif creates a new inline query result .
6884	NewInlineQueryResultVideo creates a new inline query video .
6885	Send sends the user profile photos .
6886	Send a chat action
6887	Send an inline query
6888	Send kicks off a kick .
6889	Send sends an UnbanChatMember to the user .
6890	Send sends an outgoing callback query .
6891	NewAPIClient creates a new APIClient .
6892	BeforeInsert is called before creation .
6893	ColumnName returns column name .
6894	New creates a new DB
6895	From creates a From from a struct
6896	Where creates a new Where condition .
6897	OrderBy conditionally creates a condition .
6898	Limit creates a condition that matches limit .
6899	Offset is like Offset .
6900	Join creates a new JoinCondition .
6901	Count creates a COUNT function .
6902	Update runs the update on the database
6903	Delete deletes a record from the database .
6904	Begin starts a new transaction .
6905	Commit commits the database .
6906	Quote returns a quoted string .
6907	SetLogOutput sets the logger for the database .
6908	selectToSlice converts sql . Rows to slice .
6909	selectToValue returns a reflect . Value from a sql . Result .
6910	fieldIndexByName returns the index for a field name .
6911	columns returns the column names for the given columns .
6912	tagsFromField returns the fields from the field .
6913	hasSkipTag returns true if the field has a skip tag .
6914	hasPKTag returns true if the field has a PK tag .
6915	isAutoIncrementable returns true if the field is autoincrementable .
6916	collectFieldIndexes collects indexes for a given typ .
6917	findPKIndex finds the PK index for a given type .
6918	sizeFromTag returns the DB size from the database tag .
6919	columnFromTag returns the column name for the field tag .
6920	defaultFromTag returns the default value for a field tag .
6921	Where adds a WHERE condition to the query .
6922	And adds an AND condition to the query .
6923	Or adds an OR condition to the query .
6924	Like adds a LIKE query to the query .
6925	Between adds a condition to the query .
6926	OrderBy adds ORDER BY clause .
6927	Limit adds a LIMIT clause to the query .
6928	Offset is like Offset .
6929	SetFormat implements logger . SetFormat .
6930	Print implements the Logger interface .
6931	Print implements NullLogger .
6932	Quote returns a quoted string
6933	SQLType returns the name of the MySQL type
6934	New returns a new archive .
6935	Disconnect disconnects the host .
6936	nextNetworkAdapterID returns the next available network adapter ID
6937	totalNetworkAdapters returns the number of network adapters in the given map
6938	RemoveAllNetworkAdapters removes all network adapters
6939	RemoveNetworkAdapter removes the specified adapter from the VM .
6940	NetworkAdapters returns all available network adapters .
6941	newArchive creates a new archive
6942	GetFileReader returns an io . ReadCloser for the given file name .
6943	ExtractToWriter extracts a file from the archive
6944	ExtractToFile extracts an archive from the archive .
6945	SharedFoldersParentDir returns the parent folder s shared folder path .
6946	Name returns the name of the snapshot .
6947	Description returns the description of the snapshot .
6948	cleanupSnapshot releases the snapshot .
6949	BusTypeFromID returns the bus type corresponding to the given ID .
6950	Read from a Vmx file
6951	Write writes the model to disk .
6952	NewVirtualMachine returns a new VM instance
6953	Vcpus returns the number of virtual CPUs supported by this VM .
6954	VmxPath returns the path to the VMX path .
6955	MemorySize returns the size of the VM .
6956	ReadOnly returns true if the VM is read - only .
6957	InVMTeam returns true if VM is in the VM .
6958	PowerState returns the power state of the VM .
6959	ToolsState returns the guest s tools .
6960	IsRunning returns true if the VM is running .
6961	GuestOS returns the guest OS .
6962	cleanupVM releases a VM .
6963	updateVMX updates the virtual machine .
6964	SetMemorySize sets the memory size of the VM .
6965	SetNumberVcpus sets the number of virtual machines
6966	SetDisplayName sets the display name
6967	SetAnnotation sets the annotation of the VM .
6968	SetVirtualHwVersion sets the virtualware version
6969	Error returns error message
6970	Errorf is a convenience function for fmt . Printf
6971	Error implements the error interface .
6972	string returns a string representation of the stack frame .
6973	newStackFrame returns a new stack frame .
6974	captureStack returns a slice of stack frames .
6975	Parse function name
6976	Stack prints a stacktrace
6977	StackWithCaller is similar to Stack but panics on error .
6978	Write calls the wrapped writer
6979	ResponseStatus returns the status code of the ResponseWriter .
6980	httpResponseStruct returns the reflect . Value for a struct field .
6981	SetDetectedContentType returns Content - Type header .
6982	New returns a new ServerError
6983	New creates a new DBError
6984	New adds a new error to the error
6985	New returns a new NotFoundError
6986	StrLength validates a string
6987	StrLenIn validates the length of a string
6988	StrIn validates a string
6989	GetEmail validates the email
6990	MostSpecificType returns the most specific type .
6991	FullTypeHierarchy returns the type uri for the given highest level
6992	SortTypes returns a sorted list of types .
6993	Delete removes the key from the store .
6994	Set implements RedisProvider .
6995	refresh refreshes the session data .
6996	Get retrieves a store by sid
6997	Destroy removes a session from the redis .
6998	UpExpire expires the session with the session id .
6999	Use adds a router handler
7000	ServeHTTP implements the http . Handler interface .
7001	Use adds a router to the router group .
7002	Group returns a new RouterGroup with the given handlers .
7003	Run runs the server .
7004	create creates a new RouterGroup
7005	Redirect sends a redirect to the client .
7006	Ok writes data to the ResponseWriter .
7007	Fail writes an error to the ResponseWriter .
7008	ResStatus sends a response with status code .
7009	Next calls next handler
7010	GetSession get session from context
7011	GetBodyJSON - get request body
7012	SetSession stores a session
7013	FreshSession upserts expired session
7014	DeleteSession deletes the session
7015	Write implements the http . ResponseWriter interface .
7016	WriteHeader implements http . ResponseWriter
7017	New returns a new Client
7018	setAllowLargeResults configures whether or not the client should allow large results .
7019	connect returns a new BigQuery service .
7020	InsertRow inserts a row into BigQuery .
7021	AsyncQuery is a wrapper around AsyncQuery .
7022	Query performs a query against a given dataset
7023	stdPagedQuery runs a bigquery query and returns the results channel .
7024	largeDataPagedQuery is the same as largeDataPagedQuery but takes a large array of dataChan .
7025	pagedQuery executes a paginated query .
7026	pageOverJob is a helper function that sends results over a job .
7027	Count returns the count of a dataset
7028	work executes a fetch request .
7029	subworker runs a job and returns the result .
7030	Perform worker
7031	Supervisor runs the supervisor .
7032	Run starts the pool
7033	Add a function to the pool
7034	Wait blocks until the worker is running
7035	Results returns all jobs in the pool
7036	Wait for a job to be processed
7037	Returns the status of the pool
7038	WrapHTTPHandlerFunc wraps http . HandlerFunc
7039	WebSocketHandlerFunc wraps a websocket . HandlerFunc into a HandlerFunc .
7040	StaticFile returns a static file
7041	PreloadFile reads a file and returns a preload object
7042	InitHtmlTemplates initializes html templates
7043	InitTextTemplates initializes the templates for the given pattern .
7044	Html instantiates a new HTML template
7045	Text creates a new text template
7046	InitWatcher starts a new fsnotify watcher
7047	CloseWatcher closes the watcher .
7048	Find returns the route for the given path
7049	Add adds a router to the router .
7050	NewRouters creates a new router
7051	NewServerMux returns a new server mux .
7052	err sets the error handler
7053	HandleFunc registers a handler function for the given router
7054	handleError is used to handle errors
7055	Redirect sends an HTTP response .
7056	InitPProf initializes the pprof handlers .
7057	StartSession starts a new session
7058	Creates a slice containing all combinations of the selected elements .
7059	Return a buffered list containing duplicates .
7060	Creates a list of permutations .
7061	Return a slice of permutations containing all permutations .
7062	gformat takes a format string and returns a new format and args
7063	Errorm is a convenience function for fmt . Printf
7064	Fprintm is fmt . Fprintm
7065	Implementation of fmt . Printm
7066	Sprintf is fmt . Sprintf
7067	Validate validates the password against the requirements
7068	MakeRequirements creates a PasswordStrengthRequirements from a password
7069	sanityCheck returns whether the password strength requirements are valid .
7070	password returns the password for the given requirements
7071	NewPassword returns a new Garbler instance .
7072	NewPasswords returns a slice of n th words .
7073	addNums adds numDigits to p .
7074	punctuate returns a random punctuation .
7075	Deprecated .
7076	Param adds a param to the set
7077	Parse decodes a set of params
7078	Unmarshal implements json . Unmarshaler
7079	GetDefaultHTTPClient returns a default http client
7080	DeviceInfo returns information about a device .
7081	DevicePresence returns the status of the device .
7082	NotificationStatus returns information about a push notification .
7083	DeleteNotification deletes a notification
7084	NotifyDevice sends a push notification .
7085	Assert asserts that b is true .
7086	CreateFile creates a new file
7087	AddError adds an error to the form .
7088	AddFieldError adds an error to the form .
7089	HasErrors returns true if there are any errors in the form .
7090	NewError creates a new form error
7091	NewFieldError creates an error for a field .
7092	ChainHandlers chains all middlewares
7093	FinalHandler returns a copy of the final handler
7094	Hash implements md5 .
7095	IsHash implements MD5 .
7096	WithBaseDir returns an Option that sets the path to the given directory .
7097	WithFileFindFunc returns an Option that sets the filename for each file .
7098	WithTemplateFromFiles allows you to specify a template name
7099	WithTemplatesFromFiles sets the templates for the given templates
7100	WithTemplateFromStrings is an Option to set the template name
7101	WithTemplatesFromStrings adds a map of strings to the map
7102	WithFunction adds a function to the map
7103	WithFunctions is an Option that adds a FuncMap .
7104	WithDelims sets the delimited delimiter .
7105	New creates a new templates
7106	RespondWithStatus sends a response with status code .
7107	RespondTemplate sends a response with status code 404 .
7108	Respond writes a template with status code 500 .
7109	RenderTemplate renders a template and returns the result .
7110	New creates a new server
7111	ServeUDP serves a UDP connection
7112	Shutdown closes the server .
7113	QuicHeadersHandler returns a http . Handler that adds the response headers to the server .
7114	GetRequestIPs returns the IPs of the request
7115	DomainRedirectHandler is used to redirect a domain to a domain .
7116	New returns a new Server
7117	Add adds a new server
7118	TCPAddr returns the TCP address of the server .
7119	UDPAddr returns the UDP address for the given server name .
7120	Close closes all servers
7121	Shutdown stops all servers .
7122	Accept accepts incoming connections .
7123	NewStaticFilesHandler returns a new http . Handler that serves static files
7124	ServeHTTP is defined on the AuthHandler interface .
7125	MarshalJSON converts Options to JSON .
7126	UnmarshalJSON implements json . Unmarshaller for Options .
7127	MarshalYAML implements the yaml . Marshaler interface for Options .
7128	UnmarshalYAML implements the yaml . Unmarshaler interface for Options .
7129	NewHandler returns a new http . Handler that logs the request .
7130	WithPanicResponse returns an Option that sets the response body .
7131	WithPanicResponseHandler overrides the default http . ResponseHandler .
7132	New returns a new Handler instance .
7133	ServeHTTP implements http . Handler
7134	NewContextFunc returns a function that converts a map into a context .
7135	NewMapErrorRegistry creates a new MapErrorRegistry .
7136	AddError adds an error to the registry
7137	AddMessageError adds an error to the registry
7138	MustAddError adds an error to the registry .
7139	MustAddMessageError adds a new error to the registry .
7140	AddHandler adds a handler to the registry
7141	MustAddHandler adds a handler to the registry .
7142	Handler returns the handler for the given code .
7143	New returns a new instance of Client .
7144	Request sends a request and returns the response .
7145	JSONContext sends a JSON - RPC request using the provided context .
7146	StreamContext performs a streaming request with the given context .
7147	Stream is a wrapper for Stream . Stream .
7148	JSONUnmarshal unmarshals JSON data into v .
7149	ServeTCP implements the Server interface for Server .
7150	ServeTCP implements the Server interface for Server .
7151	Shutdown gracefully shuts down the server
7152	HandleMethods is the handler for Handle methods .
7153	NewSetHeadersHandler returns a new http . Handler that adds headers to the http . Handler .
7154	New creates a new server
7155	HashedPath returns the path to the given file .
7156	New returns a new Service .
7157	HTMLHandler is part of the http . Handler interface .
7158	Status returns the status of the service .
7159	StatusHandler returns the status of the backend .
7160	OnHandler is called when a server is running .
7161	OffHandler is part of the Server interface .
7162	MarshalJSON returns the JSON encoding of PostIRCMessageRequest .
7163	MarshalJSON returns the JSON encoding of the PostArtifactRequest .
7164	MarshalJSON method of PostArtifactResponse
7165	MarshalJSON returns the JSON encoding of HookChangedMessage .
7166	MarshalJSON implements the Marshaler interface for TriggerHookRequest .
7167	MarshalJSON method of TriggerHookResponse
7168	UnmarshalJSON implements the json . Unmarshaler interface for TriggerHookResponse .
7169	MarshalJSON implements json . Marshaler
7170	MarshalJSON returns the JSON encoding of Var .
7171	MarshalJSON implements json . Marshaler
7172	MarshalJSON implements json . Marshaler
7173	MarshalJSON returns the JSON encoding of t .
7174	UnmarshalJSON - decodes JSON data to Time .
7175	Write implements the io . Writer interface .
7176	Seek implements io . Seeker
7177	Read implements io . Reader .
7178	MarshalJSON method of LaunchSpecsResponse
7179	MarshalJSON for RegionLaunchSpec
7180	GenerateCode generates code for example
7181	postPopulate pre - populates schema
7182	CreateTemporaryCredentials creates a new Credentials object with the given credentials .
7183	setURL sets the URL and query parameters
7184	SignRequest signs an http . Request with the credentials .
7185	APICall marshalls the given method and returns the result .
7186	SignedURL returns a signed URL for a given route
7187	MarshalJSON returns the JSON encoding of the HawkSignatureAuthenticationResponse .
7188	Given an input byte slice and returns a compressed byte slice
7189	NewCubHash returns a new cube hash .
7190	cube hash
7191	Sum returns the keccak256 sum of data .
7192	Evaluate out the state of the block .
7193	reducedSqueezeRow0 reduces the number of rows in the tableOut .
7194	reducedDuplexRow1 modifies the DuplexRow .
7195	NewReaderByteCodeLoader creates a new ReaderByteCodeLoader .
7196	LoadReader loads a reader from a reader
7197	NewV3 returns a UUID based on the given namespace and name .
7198	txLiteral marks a literal as a literal .
7199	txFetchSymbol fetches symbol from current state .
7200	txMarkRaw mark as a raw string .
7201	txUnmarkRaw marks the raw value as a raw string .
7202	txPrint prints the command to stderr .
7203	txPrintRaw prints the command to stderr .
7204	NewLoopVar creates a new LoopVar
7205	txMakeArray populates an array .
7206	txFunCallOmni is called when a function was called .
7207	DumpAST enables or disables the flags .
7208	DumpByteCode sets the flag value for the flag .
7209	Optimize updates the NaiveOpts interface .
7210	NewFuncDepot creates a new FuncDepot
7211	Get returns the value for a given key
7212	Set adds a value to the depot
7213	NewFileTemplateFetcher creates a new FileTemplateFetcher
7214	LastModified returns last modified time .
7215	Reader returns an io . Reader
7216	Bytes returns the contents of the source .
7217	NewState returns a new state .
7218	PushFrame returns a new frame .
7219	PopFrame pops a frame from the stack .
7220	CurrentFrame returns the current frame .
7221	Warnf logs a warning message .
7222	AppendOutputString appends a string to the output .
7223	Popmark pops a mark off the stack .
7224	CurrentMark returns the current mark .
7225	LoadByteCode loads a byte from state .
7226	Reset resets the state .
7227	Add a variable to the stack
7228	GetLvar implements the Stack interface .
7229	SetLvar sets a variable in the stack .
7230	NewByteCode returns a new ByteCode
7231	Append adds an op to the byte list .
7232	AppendOp appends an op to the buffer .
7233	String returns a string representation of the ByteCode .
7234	NewCachedByteCodeLoader creates a new CachedByteCodeLoader .
7235	Load loads a bytecode from cache
7236	NewFileCache creates a new FileCache
7237	GetCachePath returns the path to the given key
7238	Get retrieves an entity from the cache
7239	Set stores the entity in the cache
7240	Delete removes the file from the cache
7241	Get returns the value for the given key .
7242	Set stores a cache entity
7243	Delete removes the key from the cache
7244	NewStringLexer creates a new Parser from a string template
7245	NewReaderLexer returns a new parser .
7246	NewV4 returns a new UUID version 4 .
7247	Parse a Kolonish template
7248	ParseReader parses the given reader and returns a parsed AST .
7249	Visit returns a channel that can be used to walk the AST tree .
7250	String returns a string representation of the AST .
7251	Run runs the given bytecode .
7252	DefaultParser is the default parser for XSLate .
7253	DefaultLoader is the default implementation for XSLate .
7254	DefaultVM initializes the default VM .
7255	Get returns the value associated with the given key .
7256	NewHTTPSource creates a new HTTPS source
7257	NewStringByteCodeLoader creates a new instance of StringByteCodeLoader .
7258	LoadString loads a string into a VM .
7259	Get returns the value for a given key .
7260	NewOp creates a new Op
7261	MarshalBinary encodes op to binary .
7262	UnmarshalBinary implements the encoding . BinaryUnmarshaler interface for OpType .
7263	ArgInt returns the integer value of the op .
7264	ArgString returns the argument as a string .
7265	AppendOp implements op .
7266	Compile implements the Compile interface for BasicCompiler .
7267	NewV5 returns a new UUID based on the SHA - 1 hash .
7268	Sort returns a copy of the lex symbol list .
7269	Less implements sort . Interface .
7270	Swap implements sort . Interface .
7271	Copy returns a copy of the lex symbol set .
7272	Set adds a new symbol to the map .
7273	GetSortedList returns the sorted list of maps .
7274	Top returns the top element of the stack .
7275	Resize resizes the stack .
7276	Extend extends the stack .
7277	Grow resizes the stack .
7278	Get returns the element at the specified index .
7279	Set sets the value at the specified index .
7280	Push adds a new value to the stack .
7281	Pop removes the top item from the stack
7282	String returns a string representation of the stack .
7283	GetHostIPs returns the host IPs
7284	GetPrivateHostIPs returns a list of all private host IPs
7285	IsPrivate checks if an IP is a private network
7286	Environ returns a slice of environment variables .
7287	getenv returns the value of the specified environment variable .
7288	flagAsEnv returns the name as a string .
7289	NewPolicy returns a new Policy with default values .
7290	CreateRandom returns a slice of random bytes .
7291	Shuffle shuffles a byte slice
7292	Generate generates a random password based on the policy .
7293	ExecutableFolder returns the executable folder .
7294	Ignore is a functional option for the Sentinel .
7295	Sigs is an Option to set the shutdown signal .
7296	Logf is a functional option that allows you to set the log function .
7297	Errorf is an Option to set the error function .
7298	New returns a new Sentinel instance
7299	Run starts the Sentinel .
7300	Shutdown gracefully shuts down the Sentinel .
7301	ShutdownIgnore returns true if the server is shut down .
7302	Register registers the server with the given server .
7303	Mux returns a new netmux .
7304	HTTP is used to register an HTTP server
7305	IgnoreError returns true when err is nil .
7306	IgnoreNetOpError returns true if the given error indicates that the given network error is closed .
7307	convertAndAppendContextFuncs converts a context to a context .
7308	router returns a mux . Router .
7309	buildInfoHandler returns information about the build - info
7310	Encode returns the JSON encoding of v .
7311	Json decodes JSON data into martini .
7312	validateAndMap validates martini and maps it to martini .
7313	Count returns the number of errors .
7314	Header returns a map of headers for the request
7315	PreflightHeader returns a map of headers for the request
7316	IsOriginAllowed checks if origin is allowed
7317	Allow adds headers to the request .
7318	Rendered returns a middleware that renders a renderer .
7319	String returns a string representation of the AcceptLanguages .
7320	Languages returns a handler that handles Accept languages .
7321	Prefix is a middleware that removes the prefix from the request .
7322	Basic defines a basic auth middleware .
7323	UpdateUser updates a user
7324	GetById gets a user by its ID .
7325	AddressToAccountId converts an address to an account id .
7326	MutateChangeTrust mutates a ChangeTrustOp
7327	MutateChangeTrust is defined on the Limit interface .
7328	Trust creates a ChangeTrust builder for a CreditAsset
7329	RemoveTrust creates a ChangeTrust builder for the specified issuer
7330	MutatePayment modifies a CreditAmount
7331	MutatePayment modifies the destination operation
7332	MutatePayment modifies a native Amount object
7333	MutatePayment modifies a Payload operation
7334	MutateAccountMerge modifies the AccountMergeBuilder .
7335	MustParse is like Parse but panics on error .
7336	Parse converts a string to an integer .
7337	String converts xdr to a string .
7338	CreateOffer creates a new ManageOffer builder .
7339	CreatePassiveOffer creates a ManageOffer builder that will use the given rate .
7340	UpdateOffer creates a new ManagedOffer builder .
7341	DeleteOffer will return a ManageOffer builder for an offer .
7342	ManageOffer creates a ManageOffer builder
7343	Mutate applies the mutator to the ManageOfferBuilder .
7344	MutateManageOffer is defined on the Amount interface .
7345	MutateManageOffer mutates an OfferID .
7346	MutateManageOffer mutates a Rate .
7347	MutateOperation mutates the operation .
7348	String returns the price as a string .
7349	Transaction creates a new TransactionBuilder instance .
7350	Mutate adds a transaction to the TransactionBuilder .
7351	Hash returns the transaction hash .
7352	HashHex returns the transaction builder s hash .
7353	Sign creates a new TransactionEnvelopeBuilder .
7354	MutateTransaction is part of the AllowTrustBuilder interface .
7355	MutateTransaction is part of the ChangeTrustBuilder interface .
7356	MutateTransaction is part of the CreateAccountBuilder interface .
7357	MutateTransaction sets default values for TransactionBuilder .
7358	MutateTransaction is part of the TransactionBuilder interface .
7359	MutateTransaction is part of the TransactionBuilder interface .
7360	MutateTransaction is part of the TransactionBuilder interface .
7361	MutateTransaction adds the MemoHash to the TransactionBuilder .
7362	MutateTransaction is part of the TransactionBuilder interface .
7363	MutateTransaction is part of the TransactionBuilder interface .
7364	MutateTransaction mutates the MemoText .
7365	MutateTransaction is part of the Transaction interface .
7366	MutateTransaction implements PaymentBuilder .
7367	MutateTransaction is part of the SetOptionsBuilder interface .
7368	MutateTransaction is part of the TransactionBuilder interface .
7369	MutateTransaction is part of the SourceAccount interface .
7370	Scan implements the sql . Scanner interface .
7371	InitialState is part of the Bundler interface .
7372	Changes returns a list of changes in the bundle .
7373	StateAfter is part of the State interface .
7374	changes returns a list of changes that should be applied to the given target .
7375	MustDecode is like Decode but panics on failure .
7376	Encode encodes src to base32 encoding
7377	MustEncode is like Encode but panics on error .
7378	checkValidVersionByte returns nil if the version is valid .
7379	Checksum computes the checksum of data .
7380	Validate checks if the data matches the expected checksum
7381	LedgerKey returns the LedgerKey for the given change
7382	checkPlausible checks that the base32 prefix is valid .
7383	Address returns the account id as a string .
7384	Equals returns true if this AccountId equals another .
7385	SetAddress sets the Ethereum account ID .
7386	ToXdrObject converts an Asset to an xdr . Asset .
7387	Through adds a asset to the path
7388	PayWith returns a new PayWithPath instance .
7389	continuedFraction parses a price string and returns the result .
7390	Mutate is part of the Builder interface .
7391	MutateTX implements the Builder interface .
7392	Bytes returns the transaction envelope .
7393	Base64 returns the encoded bytes .
7394	MutateTransactionEnvelope mutates the TransactionEnvelope builder .
7395	MutateSetOptions mutates the HomeDomainOp
7396	MutateSetOptions is part of the SetOptions interface .
7397	MutateSetOptions mutates SetOptions .
7398	MutateSetOptions modifies a SetOptionsOp
7399	SetThresholds sets the threshold values .
7400	MutateSetOptions mutates the set options .
7401	MutateSetOptions modifies the set flags .
7402	MutateSetOptions mutates the set flags .
7403	MutateCreateAccount is part of the CreateAccount interface .
7404	MutateCreateAccount modifies a CreateAccountOp
7405	Random returns a full key from the random seed .
7406	Master returns the kpk from the given network passphrase .
7407	Parse parses an address from a string .
7408	MustParse is like Parse but panics if an error occurs .
7409	MutateAllowTrust updates an AllowTrustOp
7410	MutateAllowTrust updates an AllowTrustAsset
7411	MutateAllowTrust implements the MutableAllowTrust interface .
7412	ToAsset converts an AllowTrustOpAsset to an Asset .
7413	SetNative sets the asset
7414	String returns the Asset as a string .
7415	Equals returns true iff this asset equals another .
7416	MustExtract calls Extract and panics on error
7417	Unmarshal implements io . Unmarshaler
7418	Marshal writes v to w .
7419	ValidEnum returns true if the EnumType is valid
7420	NewPublicKey creates a new public key
7421	MustEd25519 returns the IEEE25519 representation of the public key .
7422	NewNodeId returns a new node id
7423	NewAccountId creates a new AccountId from a crypto key
7424	ValidEnum returns true if the Enum is valid
7425	ArmForSwitch returns whether the asset type is associated with the given switch type .
7426	NewAsset creates a new Asset instance
7427	MustAlphaNum4 panics if asset is not set .
7428	GetAlphaNum4 returns the AlphaNum4 field of the asset .
7429	MustAlphaNum12 panics if Asset is not set .
7430	GetAlphaNum12 returns the AlphaNum12 type of the asset
7431	ValidEnum returns true if the enum is valid
7432	ValidEnum returns true if the enum is valid
7433	ValidEnum returns true if the enum is valid
7434	NewAccountEntryExt creates a new AccountEntryExt
7435	ValidEnum returns true if the enum is valid
7436	NewTrustLineEntryExt creates a new TrustLineEntryExt instance
7437	ValidEnum returns true if the enum is valid
7438	NewOfferEntryExt creates a new OfferEntryExt instance
7439	NewDataEntryExt creates a new DataEntryExt
7440	NewLedgerEntryData creates a new LedgerEntryData from a type
7441	NewLedgerEntryExt creates a new LedgerEntryExt instance
7442	ValidEnum returns true if the EnvelopeType is valid .
7443	ValidEnum returns true if the operation type is valid
7444	ArmForSwitch returns whether or not an asset type is associated with the given switch type .
7445	NewAllowTrustOpAsset creates a new AllowTrustOpAsset
7446	MustAssetCode4 returns the asset code4 for this asset
7447	GetAssetCode4 returns the asset code4 for this Grant
7448	MustAssetCode12 returns the asset code 12 .
7449	GetAssetCode12 returns the asset code 12 .
7450	NewOperationBody creates a new OperationBody from a type
7451	MustCreateAccountOp returns the CreateAccountOp if not set .
7452	GetCreateAccountOp returns the CreateAccountOp for the operation .
7453	MustPaymentOp returns the payment op if not set .
7454	GetPaymentOp returns the payment operation s payment operation .
7455	MustPathPaymentOp is part of the OperationBody interface .
7456	GetPathPaymentOp gets the PathPaymentOp from the OperationBody .
7457	MustManageOfferOp returns the ManageOfferOp if not set .
7458	GetManageOfferOp returns the ManageOfferOp for the operation .
7459	MustCreatePassiveOfferOp returns the CreatePassiveOfferOp if not set .
7460	GetCreatePassiveOfferOp returns the CreatePassiveOfferOp if it is set or false otherwise .
7461	MustSetOptionsOp is part of the OperationBody interface .
7462	GetSetOptionsOp gets SetOptionsOp from OperationBody .
7463	MustChangeTrustOp is part of the ChangeTrustOp interface .
7464	GetChangeTrustOp returns the ChangeTrustOp associated with the OperationBody .
7465	MustAllowTrustOp returns the AllowTrustOp if not set .
7466	GetAllowTrustOp returns the AllowTrustOp field of the OperationBody .
7467	MustDestination is part of the OperationBody interface .
7468	GetDestination returns the destination for the operation .
7469	MustManageDataOp returns the ManageDataOp if not set .
7470	GetManageDataOp returns the ManageDataOp for the operation .
7471	ValidEnum returns true if the Enum type is valid
7472	ArmForSwitch implements the Armo interface .
7473	NewMemo creates a new Memo from a type
7474	MustText always returns value without panics .
7475	GetText returns the text of the Memo .
7476	MustId panics if Memo is not set .
7477	GetId returns the id of the Memo .
7478	MustHash returns the hash value or panics .
7479	GetHash returns the hash of the Memo .
7480	MustRetHash is part of the Memo interface .
7481	NewTransactionExt returns a new TransactionExt instance
7482	ValidEnum returns true if the enum value is valid .
7483	ArmForSwitch returns the arm for the specified Switch
7484	NewCreateAccountResult creates a new CreateAccountResult instance
7485	ValidEnum returns true if the enum value is valid
7486	ArmForSwitch returns the ArmForSwitch value associated with the Switch .
7487	NewPaymentResult creates a new PaymentResult instance
7488	ValidEnum returns true if the EnumResultCode is valid .
7489	ArmForSwitch returns the arm for the given Switch
7490	NewPathPaymentResult creates a new PathPaymentResult instance
7491	MustNoIssuer returns nil if NoIssuer is not set .
7492	GetNoIssuer returns the NoIssuer associated with the request
7493	ValidEnum returns true if the enum value is valid
7494	ValidEnum returns true if the value is valid
7495	ArmForSwitch implements ManagedOfferEffectResultOffer
7496	NewManageOfferSuccessResultOffer creates a new ManageOfferSuccessResultOffer
7497	ArmForSwitch returns a string representing the arm for the specified Switch
7498	NewManageOfferResult creates a new ManageOfferResult instance
7499	ValidEnum returns true if the value is valid
7500	ArmForSwitch returns the arm for the specified Switch
7501	NewSetOptionsResult creates a new set options result
7502	ValidEnum returns true if the ChangeTrustResultCode is valid
7503	ArmForSwitch returns the arm for the given Switch
7504	NewChangeTrustResult creates a new ChangeTrustResult instance
7505	ValidEnum returns true if the AllowTrustResultCode is valid
7506	ArmForSwitch returns the arm for the specified Switch
7507	NewAllowTrustResult creates a new AllowTrustResult instance
7508	ValidEnum returns true if the Enum value is valid .
7509	ArmForSwitch implements AccountMergeResult .
7510	NewAccountMergeResult creates a new AccountMergeResult instance
7511	MustSourceAccountBalance is part of the AccountMergeResult interface .
7512	GetSourceAccountBalance returns the source account balance .
7513	ValidEnum returns true if the enum value is valid
7514	ArmForSwitch returns the armouts for the given switch code
7515	NewInflationResult creates a new InflationResult
7516	MustPayouts always returns slice of Payouts or panics .
7517	GetPayouts get Payouts
7518	ValidEnum returns true if the enum value is valid
7519	ArmForSwitch returns the arm for the specified switch code
7520	NewManageDataResult creates a new ManageDataResult .
7521	ValidEnum returns true if the Enum is valid
7522	ArmForSwitch returns the arm for the given operation type .
7523	NewOperationResultTr creates a new OperationResultTr from a Type
7524	MustCreateAccountResult is part of the CreateAccountResult interface .
7525	GetCreateAccountResult get CreateAccountResult from Operation
7526	MustPaymentResult is part of the OperationResult interface .
7527	GetPaymentResult is part of the OperationResult interface .
7528	MustPathPaymentResult is part of the OperationResult interface .
7529	GetPathPaymentResult is part of the OperationResult interface .
7530	MustManageOfferResult is part of the OperationResult interface .
7531	GetManageOfferResult returns the ManageOfferResult for the operation .
7532	MustCreatePassiveOfferResult is part of the OperationResult interface .
7533	MustSetOptionsResult is part of the OperationResult interface .
7534	GetSetOptionsResult gets SetOptionsResult from Operation
7535	MustChangeTrustResult is part of the ChangeTrustResult interface .
7536	GetChangeTrustResult gets ChangeTrustResult from OperationResult
7537	MustAllowTrustResult is part of the OperationResult interface .
7538	GetAllowTrustResult get AllowTrustResult from OperationResult
7539	MustAccountMergeResult is part of the AccountMergeResult interface .
7540	GetAccountMergeResult gets the AccountMergeResult from the OperationResult .
7541	MustInflationResult is part of the OperationResult interface .
7542	GetInflationResult get InflationResult
7543	MustManageDataResult is part of the OperationResult interface .
7544	GetManageDataResult gets the ManageDataResult from the OperationResult .
7545	ArmForSwitch returns the arm for the specified operation
7546	NewOperationResult creates a new OperationResult
7547	MustTr is part of the OperationResult interface .
7548	GetTr returns the Trim of the OperationResult .
7549	ValidEnum returns true if the EnumCode is valid .
7550	ArmForSwitch returns the arm for the given switch code .
7551	NewTransactionResultResult creates a new TransactionResult instance
7552	MustResults is part of the TransactionResult interface .
7553	GetResults returns the OperationResult from this TransactionResult .
7554	NewTransactionResultExt creates a new TransactionResultExt instance .
7555	NewStellarValueExt creates a new StellarValueExt instance
7556	NewLedgerHeaderExt creates a new LedgerHeaderExt
7557	ValidEnum returns true if the enum is valid
7558	ArmForSwitch returns the arm for the specified switch
7559	NewLedgerUpgrade creates a new LedgerUpgrade from a type
7560	MustNewLedgerVersion is part of the LedgerUpgradeConfig interface .
7561	GetNewLedgerVersion returns the new LedgerVersion for the upgrade .
7562	MustNewBaseFee returns the new baseFee if not set .
7563	GetNewBaseFee returns the new base fee .
7564	MustNewMaxTxSetSize is part of the upgrade . NewMaxTxSetSize interface .
7565	GetNewMaxTxSetSize returns the new MaxTxSetSize for an upgrade .
7566	ArmForSwitch returns whether or not the LedgerKey is associated with the switch .
7567	NewLedgerKey creates a new LedgerKey from a type
7568	ValidEnum returns true if the enum value is valid .
7569	ArmForSwitch returns a string indicating whether the bucket is associated with the given Switch .
7570	NewBucketEntry creates a new BucketEntry from a type
7571	MustLiveEntry is part of the LoggerEntry interface .
7572	GetLiveEntry returns the LedgerEntry for the entry .
7573	MustDeadEntry is part of the BucketEntry interface .
7574	GetDeadEntry returns the LedgerKey for the given bucket entry .
7575	NewTransactionHistoryEntryExt creates a new TransactionHistoryEntryExt instance
7576	ArmForSwitch returns an arm for the given switch value
7577	NewTransactionHistoryResultEntryExt creates a new TransactionHistoryResultEntryExt instance .
7578	NewLedgerHeaderHistoryEntryExt creates a new LedgerHeaderHistoryEntryExt instance
7579	NewScpHistoryEntry initializes ScpHistoryEntryV0 .
7580	ValidEnum returns true if the change type is a valid enum
7581	ArmForSwitch returns the arm for the specified switch type
7582	NewLedgerEntryChange creates a new LedgerEntryChange from a type
7583	MustCreated is part of the LedgerEntryChange interface .
7584	GetCreated implements LedgerEntryGetter . GetCreated .
7585	MustUpdated is part of the LedgerEntryChange interface .
7586	GetUpdated returns the LedgerEntryChange from the switch .
7587	MustRemoved is part of the LedgerEntryChange interface .
7588	GetRemoved implements LedgerEntryGetter . GetRemoved .
7589	MustState is part of the State interface .
7590	GetState returns the state of an LedgerEntryChange
7591	NewTransactionMeta creates a new TransactionMeta from a value
7592	MustOperations is part of the TransactionMeta interface .
7593	GetOperations returns the operations associated with the switch .
7594	ValidEnum returns true if the Enum is valid .
7595	ValidEnum returns true if the integer is a valid IP address type
7596	ArmForSwitch implements the ArmForSwitch interface
7597	NewPeerAddressIp creates a new PeerAddressIp from a type
7598	MustIpv4 panics if the ipv4 is not set .
7599	GetIpv4 implements the PeerAddress interface .
7600	MustIpv6 is part of the PeerAddress interface .
7601	GetIpv6 implements the PeerAddress interface .
7602	ValidEnum returns true if MessageType is a valid Enum .
7603	ArmForSwitch returns a boolean indicating whether the message is associated with the switch type .
7604	NewStellarMessage creates a new StellarMessage
7605	MustError returns error if not set .
7606	GetError returns the error associated with the message
7607	MustHello is like Hello but panics if message is not set .
7608	GetHello returns the Hello field of the message
7609	MustAuth panics if message is not nil .
7610	GetAuth returns the Auth field of the message .
7611	MustDontHave panics if message is not present .
7612	GetDontHave returns the DontHave field of a message
7613	MustPeers panics if message is not set .
7614	GetPeers returns a slice of PeerAddress
7615	MustTxSetHash is part of the Message interface .
7616	GetTxSetHash returns the transaction s TxSetHash field .
7617	MustTxSet is part of the MessageSet interface .
7618	GetTxSet returns the TransactionSet field of the message
7619	MustTransaction returns a TransactionEnvelope if it is not set .
7620	GetTransaction returns the TransactionEnvelope of a message
7621	MustQSetHash panics if message is not set .
7622	GetQSetHash returns the QSet hash of the message
7623	MustQSet panics if message is not set .
7624	GetQSet returns the QSet value of a message
7625	MustEnvelope panics if Args is not set .
7626	GetEnvelope gets the envelope from the message
7627	MustGetScpLedgerSeq is part of the GetScpLedgerMessage interface .
7628	GetGetScpLedgerSeq returns the GetScpLedgerSeq field of the message .
7629	ArmForSwitch returns a flag indicating whether the switch should be switched on .
7630	NewAuthenticatedMessage creates an AuthenticatedMessage with the given value .
7631	ValidEnum returns true if the enum value is valid
7632	ArmForSwitch returns the arm for a swp statement
7633	NewScpStatementPledges creates a new StatementPledges from aType value
7634	MustPrepare is part of the Prepare interface .
7635	GetPrepare returns the Prepare field of a ScpStatementPledges .
7636	MustConfirm is part of the ScpStatement interface .
7637	GetConfirm returns the Confirm field of a ScpStatementPledges .
7638	MustExternalize is defined on the ScpStatement interface .
7639	GetExternalize returns the StatementExternalize field of the ScpStatementPledges interface .
7640	MustNominate panics if Nominate is not set .
7641	GetNominate returns the Nominate associated with the switch .
7642	SafeUnmarshalBase64 decodes data into a slice of bytes .
7643	SafeUnmarshal unmarshals data into dest .
7644	SendAmount returns the amount of asset payment
7645	LoadAccount loads an account by ID .
7646	SequenceForAccount returns the sequence number for the given account ID .
7647	SubmitTransaction is used to submit a transaction
7648	Equals compares two LedgerKey objects .
7649	SetAccount stores the given account id .
7650	SetData sets the data for a key .
7651	SetOffer sets the Ledger key for the given account .
7652	SetTrustline sets a new trustline entry
7653	Add implements ChDBuilder interface
7654	tryHash tries to make sure a hash is unique .
7655	HashIndexFromKey returns the hash index of b .
7656	ReadInt read int
7657	Read reads a Mmap from r .
7658	Get returns the value for the given key .
7659	Iterate returns an Iterator for the ChD .
7660	Write writes the ChD to the given io . Writer .
7661	RegisterDatasources registers datasources for the specified path .
7662	RegisterFonts registers the specified fonts .
7663	New returns a new Map .
7664	NewSized returns a Map struct .
7665	Load a map from a map
7666	Resize resizes the map .
7667	Free frees the map .
7668	SRS returns the SRS map .
7669	ZoomAll skips all maps .
7670	ZoomTo will zoom into the map .
7671	Render a map
7672	RenderImage renders the map in the map
7673	RenderToFile renders the map to a file
7674	SetBufferSize sets the size of the map .
7675	Search is used to search for search requests .
7676	Get returns the next available connection from the pool or an error if the pool is invalid .
7677	put adds a connection to the pool .
7678	MonoToStereoF32 converts a mono float32 to audio .
7679	BitCrush computes the bitCrush algorithm
7680	NormalizeMax normalizes the audio buffer
7681	Gain computes the gain of a buffer
7682	MonoDownmix converts a mono FloatBuffer to a mono buffer .
7683	Quantize quantizes the audio buffer
7684	PCMScale performs the PCM scaling of the buffer
7685	StereoPan sets the StereoPan to the specified value .
7686	Leader returns the current leader .
7687	IsLeader returns true if the candidate is leader .
7688	NewResponse returns a new Response .
7689	GetRequestID extracts the request ID from the context .
7690	Log implements the Monitor interface .
7691	SendMailSSL sends a message to the given address .
7692	Send sends an email message .
7693	WaitForIt waits for the given connection to the given port .
7694	Get reads a YAML configuration from a source .
7695	initConfig - initializes Viper .
7696	WritePluginResultsToDatabase writes plugin results to database
7697	NewAuthController creates a new AuthController .
7698	Authenticate checks if the user is valid .
7699	NewOAuth2Controller creates a new OAuth2 controller .
7700	Refresh refresh token
7701	Token is used to return a token
7702	Logging is a wrapper around http . Handler .
7703	SingleFile returns a http . Handler that serves a single file
7704	Write writes data to the ResponseWriter .
7705	Hijack implements http . Hijacker interface .
7706	NewMongo creates a new MongoDB instance
7707	Disconnect the connection
7708	New returns a new table .
7709	PrintTable prints a table
7710	PrintHorizontal prints a map
7711	PrintRow prints a table
7712	AddRow adds a new row to the table .
7713	Print prints table data .
7714	String returns a string representation of the table .
7715	getHead returns the head of the table .
7716	rowString returns a string representation of a row .
7717	fieldString returns the field s value .
7718	stringTableDash returns a dash table dash .
7719	printMarkdownDash prints the markdown dash .
7720	stringMarkdownDash returns a dash summary of the table .
7721	HashPassword returns a hash of the given password .
7722	EncodeOAuth2Code encodes OAuth2 code .
7723	DecodeOAuth2Code decodes OAuth2 code .
7724	NewServer creates a new logging server .
7725	Start starts the lunarc server
7726	Stop stops the server .
7727	NewLoggingServeMux returns a new instance of LoggingServeMux .
7728	Handler implements the http . Handler interface .
7729	Handle registers the handler for the given pattern .
7730	HandleFunc registers a handler function for the given pattern .
7731	Init initializes the database
7732	WaitForConnection waits until the given context expires
7733	StoreFileInfo stores a file
7734	StorePluginResults stores plugin results
7735	CamelCase converts src to CamelCase
7736	Getopt returns the value of an environment variable .
7737	Getopts gets envVar from envVar
7738	GetSHA256 returns SHA256 of the given file .
7739	RunCommand runs a command and returns its output .
7740	RemoveDuplicates removes duplicates from elements .
7741	Unzip unzips a zip archive
7742	SliceContainsString checks if a string is in a slice .
7743	NewSMTP returns a new SMTP instance
7744	SendMail sends a message to the server .
7745	GetEnvironment returns the value for the given environment
7746	GetSMTP returns a config from a source
7747	GetConfig returns a Config from a source .
7748	GetEnvironment returns the value for the given environment
7749	GetMongo returns the configuration for the given source .
7750	TokenHandler is a middleware that extracts token from the request .
7751	Receive receives a raw message from the connection .
7752	Send sends an OutMsg .
7753	allBoshReleaseNames returns a list of all release names .
7754	AddedProperty adds a new added property to the ManifestJobManifest .
7755	RemovedProperty adds a RemovedPropertyProperty to the DeltaJobManifest .
7756	AddDeltaJob adds a new DeltaJob to the result .
7757	Concat concatenates two DeltaJob objects .
7758	Read retrieves a release from the remote
7759	Pull downloads a release from the local cache
7760	BuildJob creates a configuration file for a given job
7761	LoadBoshRelease loads a BoshRelease from a file
7762	readBoshRelease reads a BoshRelease from rr .
7763	readBoshRelease reads the release manifest from rr .
7764	readBoshJob reads the BoshJob from the given io . Reader
7765	NewRequest creates a new http . Request
7766	PushCloudConfig pushes a config to BOSH
7767	Generate creates a new packagen file
7768	CreateNewRecord creates a new JobManifest
7769	NewShowCmd returns a new instance which can be used to issue a ShowCmd .
7770	All prints all releases
7771	GetDefaultTaskImageResource returns the default image image resource
7772	AddRawJob adds a raw job to the pipeline
7773	AddGroup adds a group to the pipeline
7774	GetResourceByName returns the resource config with the given name
7775	AddRawResource adds a raw resource to the pipeline
7776	AddResource adds a new resource to the pipeline
7777	AddGithubResource adds a new Github resource
7778	AddBoshIOResource adds a BoshIOResource to the pipeline
7779	AddBoshDeploymentResource adds a BoshDeploymentResource to the pipeline
7780	AddGitResource adds a new Git resource
7781	allJobNames returns a list of job names .
7782	NewDeploymentManifestFromFile creates a new DeploymentManifest from a file .
7783	NewDeploymentManifest returns a DeploymentManifest instance
7784	AddRemoteRelease adds a new release to the manifest .
7785	AddRemoteStemcell adds a new Stemcell to the manifest
7786	Tag returns the tag value for a given key .
7787	RemoveTag removes a tag from the manifest .
7788	LoadPivnetRelease loads a PivnetRelease
7789	BoshReleaseOrEmpty returns the BoshRelease if it exists
7790	readPivnetRelease reads the pivnet release for the given path
7791	decodeYaml decodes YAML data into v .
7792	NewZipWalker creates a new Zipkin Walker .
7793	NewDiffCmd returns a new instance which can be used to issue a Diff JSON - RPC command .
7794	All prints all the versions of the command
7795	Job diff job
7796	New returns a Differ Differ Differ Differ .
7797	Return the name of the struct
7798	Get type name
7799	NewTgzWalker creates a new Walker for tgz files .
7800	NewBackoff returns a new Backoff instance .
7801	Reset resets the backoff .
7802	NewExponential returns a new Backoff instance .
7803	NewExponentialFullJitter returns a new Backoff instance .
7804	NewLinear returns a new Backoff instance .
7805	Get line size
7806	GetMaxSize returns the max line size
7807	compute computes the sphinin string
7808	WithTimeout adds the timeout to the post apps params
7809	WithContext adds the context to the post apps params
7810	WithHTTPClient adds the HTTPClient to the post apps params
7811	WithBody adds the body to the postApps params
7812	WithTimeout adds the timeout to the get apps app params
7813	WithContext adds the context to the get apps app params
7814	WithHTTPClient adds the HTTPClient to the get apps app params
7815	WithApp adds the app to the get apps app params
7816	UnmarshalBinary decodes a byte slice into a RouteWrapper .
7817	WithTimeout adds the timeout to the get apps params
7818	WithContext adds the context to the get apps params
7819	WithHTTPClient adds the HTTPClient to the get apps params
7820	WithTimeout adds the timeout to the delete apps app params
7821	WithContext adds the context to the delete apps app params
7822	WithHTTPClient adds the HTTPClient to the delete apps app params
7823	WithApp adds the app to the delete apps app params
7824	WithTimeout adds the timeout to the patch apps app router params
7825	WithContext adds the context to the patch apps app router params
7826	WithHTTPClient adds the HTTPClient to the patch app router params
7827	WithApp adds the app to the patch app router params
7828	WithBody adds the body to the patch apps app router params
7829	WithRoute adds the route to the patch apps app router params
7830	WithTimeout adds the timeout to the post apps app router params
7831	WithContext adds the context to the post apps app router params
7832	WithHTTPClient adds the HTTPClient to the post app routes params
7833	WithApp adds the app to the post app router params
7834	WithBody adds the body to the post app routes params
7835	WithTimeout adds the timeout to the put apps app router params
7836	WithContext adds the context to the put apps app router params
7837	WithApp adds the app to the put app router params
7838	WithBody adds the body to the put apps app router params
7839	WithRoute adds the route to the put apps app router params
7840	WithTimeout adds the timeout to the get apps app router params
7841	WithContext adds the context to the get apps app router params
7842	WithHTTPClient adds the HTTPClient to the get apps app router params
7843	WithApp adds the app to the get apps app router params
7844	WithTimeout adds the timeout to the patch apps app params
7845	WithContext adds the context to the patch apps app params
7846	WithHTTPClient adds the HTTPClient to the patch apps app params
7847	WithApp adds the app to the patch apps app params
7848	WithBody adds the body to the patch apps app params
7849	WithTimeout adds the timeout to the put apps app params
7850	WithContext adds the context to the put apps app params
7851	WithApp adds the app to the put apps app params
7852	WithBody adds the body to the put apps app params
7853	UnmarshalJSON deserializes into a Task
7854	MarshalJSON marshals a Task into JSON .
7855	Validate validates this task
7856	GetRanges - get CIDR range
7857	WithTimeout adds the timeout to the get apps app router params
7858	WithContext adds the context to the get apps app router params
7859	WithHTTPClient adds the HTTPClient to the get apps app router params
7860	WithApp adds the app to the get apps app router params
7861	WithRoute adds the route to the get apps app router params
7862	New creates a new Functions
7863	SetTransport sets the transport for all functions
7864	WithTimeout adds the timeout to the delete app router params
7865	WithContext adds the context to the delete apps app router params
7866	WithHTTPClient adds the HTTPClient to the delete app router params
7867	WithApp adds the app to the delete app routes route params
7868	WithRoute adds the route to the delete apps app router params
7869	WithTimeout adds the timeout to the get tasks params
7870	WithContext adds the context to the get tasks params
7871	WithHTTPClient adds the HTTPClient to the get tasks params
7872	NewValueStore creates a new ValueStore .
7873	Close closes the underlying valueStore .
7874	SetBackend sets the Oort service .
7875	Ring returns the current ring .
7876	GetLocalID returns the local ID
7877	GetListenAddr returns the listen address
7878	Startup starts the replication server
7879	Shutdown the server .
7880	Stop stops the server .
7881	Exit terminates the server .
7882	SelfUpgrade makes a best effort to upgrade the binary
7883	SoftwareVersion returns the current version
7884	Shutdown closes the underlying storage .
7885	Return a Rant model .
7886	Profile gets the user s profile
7887	Search performs a search against the API
7888	returns a result model
7889	WeeklyRants returns all Rants
7890	getUserId returns user id for given username
7891	Shutdown shuts down the store .
7892	FExists checks if a file exists
7893	outbound sends a message stream to the OpenFlow API .
7894	Parse incoming messages
7895	Group creates a new Group .
7896	Groups returns a list of all available groups .
7897	GetGroup gets a group by name
7898	Reticence retuns a string with the given length
7899	CheckPassword checks whether a pass is valid .
7900	CleanUrl cleans a url
7901	NewParameter returns a new Parameter
7902	MakeParams creates a new set of parameters .
7903	Parse populates Params from pvalue .
7904	Email returns the email address
7905	Forwarder creates a new Forwarder
7906	Forwarders returns a list of forwarded forwardingers
7907	GetForwarder retrieves a forwarding forwarder by name .
7908	New creates a new CGP instance
7909	EscapeCommaSeparated returns a comma - separated string
7910	Alias returns an alias for the account .
7911	Email returns the email address
7912	Aliases returns a list of aliases .
7913	RealName returns the real name for this account .
7914	Email returns the email address
7915	Account creates an Account with the given name .
7916	Accounts returns a list of accounts .
7917	Exists checks to see if the domain exists
7918	Aliases returns the list of aliases for the domain .
7919	Domain creates a new Domain
7920	Domains returns a list of domains .
7921	New returns a new Err
7922	Wrap wraps an error into a new Err .
7923	mergeIn merges info into e .
7924	wrapErrStr is part of the wrappedErr interface .
7925	concat args
7926	MailingList returns a new MailingList struct .
7927	Subscriber creates a new subscriber
7928	Subscribers returns all registered subscribers .
7929	MailingLists returns a list of mailing lists .
7930	NewByteKeyItem returns a pointer to a byte slice .
7931	CompareBytes compares two bytes .
7932	CompareInt compares two pointers .
7933	Allococ returns a pointer to the memory allocation .
7934	Free frees the pointer .
7935	Stats returns a human - readable summary of allocations .
7936	FreeOSMemory frees the system memory .
7937	Add adds an item to the Segment .
7938	NewSegment returns a new Segment .
7939	Assemble returns a new Skiplist with the given segments .
7940	CompareNodeTable compares two pointers .
7941	New creates a new NodeTable .
7942	Stats returns information about the node table .
7943	MemoryInUse returns the number of items in the node table .
7944	Get returns a pointer to the value pointed to by key .
7945	Update updates the pointer to the node in the table .
7946	Remove removes a node from the table .
7947	Close closes the CompareNodeTable .
7948	MemoryInUse returns the size of the node in bytes .
7949	debugMarkFree marks the node as free .
7950	Seek moves the iterator to the next byte slice .
7951	Next advances the iterator .
7952	Refresh refreshes the iterator .
7953	Close the iterator .
7954	NewIterator returns an iterator over the given snapshot
7955	SeekFirst moves the first iterator to the first iterator .
7956	Next moves the iterator to the next node .
7957	Seek moves the iterator to the next iterator .
7958	Keys returns the keys in the list .
7959	Remove removes a node from the list .
7960	Add adds a node to the list .
7961	NewWithConfig returns a new instance of skiplist .
7962	FreeNode frees the given node .
7963	MakeBuf returns an ActionBuffer .
7964	Size returns the size of n .
7965	NewLevel returns a new random level .
7966	Insert inserts a new item into the sketch
7967	Insert2 inserts a new node .
7968	Insert3 inserts a new node in the skiplist .
7969	Delete deletes an item from the skiplist
7970	DeleteNode is used to delete a node
7971	GetRangeSplitItems returns a slice of pointers that are split into nways .
7972	Bytes returns the current item s size .
7973	ItemSize returns the size of the item in bytes .
7974	KVFromBytes returns KV from bytes .
7975	CompareKV compares two KV .
7976	Emit sends the event to all handlers
7977	UnregisterHandler unregisters a handler
7978	IsHandlerRegistered checks if a handler is registered
7979	CompareNitro returns an integer between two pointers
7980	DefaultConfig returns a default config .
7981	Delete writes bs to the underlying io . Writer .
7982	GetNode returns the node for the given byte slice .
7983	SetKeyComparator sets key comparator .
7984	UseMemoryMgmt allows you to use memoryMgmt .
7985	NewWithConfig creates a new Nitro instance
7986	MemoryInUse returns the amount of memory in bytes
7987	Close closes the Nitro
7988	NewWriter returns a new writer
7989	SnapshotSize returns the size of the snapshot .
7990	Encode writes the snapshot to the given io . Writer .
7991	Decode reads a snapshot from r .
7992	Open opens the snapshot .
7993	CompareSnapshot returns the number of pointers in this snapshot
7994	GC triggers a garbage collector .
7995	GetSnapshots returns a slice of snapshots
7996	MemoryInUse returns the number of memory in bytes
7997	CompareBS compares two buffers .
7998	Acquire acquires the access barrier .
7999	Release releases the barrier session .
8000	FlushSession flushes the current session .
8001	Apply adds a report to the report .
8002	AddInt64 adds an int64 to the stats .
8003	AddUint64 adds a uint64 to the set .
8004	Merge merges two Stats .
8005	GetStats returns a new StatsReport .
8006	NewIterator returns an Iterator that can be used for testing .
8007	SeekFirst moves the first element in the iterator .
8008	SeekWithCmp implements Iterator . SeekWithCmp .
8009	Seek moves the iterator to the next position .
8010	Valid returns true if the iterator is valid .
8011	Delete deletes the current iterator .
8012	Next moves the iterator to the next entry .
8013	Init registers a new skukeeper
8014	FromURL returns a copy of the URL
8015	ToURL converts a folder to a URL
8016	Size returns the size of the TupleHeader .
8017	WriteTo implements the io . WriterTo interface .
8018	Static returns a handler that serves static files .
8019	Read reads the configuration from the file .
8020	Del deletes a key from the given section .
8021	WriteTo writes the configuration to a file
8022	checkSection checks if a section is a section .
8023	checkLine returns the key and value pairs of a line .
8024	checkComment returns true if the given line is a comment .
8025	NewResponseWrapper returns a new ResponseWrapper .
8026	Hijack implements the http . ResponseWriter interface .
8027	CloseNotify is part of the http . ResponseWriter interface .
8028	DateFormat is an option to set the date format .
8029	Logger returns a middleware that logs the request and logs the response .
8030	GetAvailableInventory returns a map of sku builders that are available in the given collection .
8031	Expiration sets the expiration time
8032	Claimer returns a TokenOpt that sets the claims .
8033	Issuer sets the issuer
8034	User sets the user name
8035	Password sets the password for the client
8036	Extractor sets the extractor for the request .
8037	TokenGenerator creates a new JWT token generator .
8038	Token extracts the token from the request context .
8039	Claims returns the JWT .
8040	String returns the Token as a string .
8041	NewLexer creates a new Lexer .
8042	run runs the lexer .
8043	emit emits a new Token .
8044	skipWhitespace skips whitespace .
8045	next returns the next rune .
8046	LineNum returns the number of lines in the input .
8047	Offset returns the current position .
8048	errorf handles an error .
8049	lexText lexes a text .
8050	lexComment consumes a comment .
8051	New creates a new TupleType .
8052	AddVersion adds a version to the tuple .
8053	Contains returns true if the given field is in the tuple .
8054	Offset returns the offset for the given field .
8055	Versions returns the versions of the tuple .
8056	SetPrivateMeta sets the private metadata for a task
8057	SetPublicMeta sets the meta data for the given name
8058	GetRedactedVersion returns a copy of the task
8059	Equal compares two tasks .
8060	HTTP adds a handler to an http . Handler .
8061	PutUint8 inserts a uint8 value into the buffer .
8062	PutInt8 inserts an int8 value into the buffer .
8063	PutUint16 inserts a uint16 value into the buffer .
8064	PutInt16 adds an int16 to the buffer .
8065	PutUint32 adds an uint32 to the buffer .
8066	PutInt32 adds an int32 to the buffer .
8067	PutUint64 inserts a uint64 value into the buffer .
8068	PutInt64 adds an int64 to the buffer .
8069	NewPackageList returns a new PackageList .
8070	PutFloat32 creates a float32 value .
8071	Classic returns a classic Martini instance with default middleware .
8072	Languages is an Option to set the tags .
8073	Session returns an Option that sets the session .
8074	Data returns the request context .
8075	URL returns the current URL .
8076	Get the size of the term
8077	GetRequestIDFromTaskResponse returns RequestID from TaskResponse
8078	PutString implements the TupleBuilder interface .
8079	LoadDirectory loads all files from a directory
8080	LoadFile loads a package from a file
8081	LoadPackage loads a package from a given name .
8082	NewDecoder returns a new decoder .
8083	NewDecoderSize returns a new decoder that reads data from r .
8084	Panic returns a middleware that logs panics .
8085	DeployVApp is the interface implementation
8086	UnDeployVApp removes a vapp
8087	Auth returns ErrAuthFake
8088	QueryTemplate is part of the vappClient interface .
8089	NewEncoder returns a new Encoder .
8090	Getter returns an Option that sets a nonce .
8091	Setter returns an Option that sets the nonce .
8092	Age is an Option to set the age of the client
8093	Nonce adds a nonce to the http . Handler .
8094	NonceValueFromRequest returns the nonce status for the request .
8095	StoreNonce stores the nonce in the request context
8096	PutFloat32Array adds an float32 to the buffer .
8097	PutFloat64Array adds an float64 to the buffer .
8098	Do injects a spy request
8099	NewLease creates a new lease
8100	Delete deletes the task
8101	Post is used to create a new lease
8102	ReStock is used to re - stock .
8103	Procurement retrieves a SKU
8104	InitFromHTTPRequest populates a lease object
8105	Is returns true if the tuple is exactly the same .
8106	Offset returns the offset for the given field .
8107	WriteTo implements io . WriterTo interface .
8108	PutTuple adds a tuple to the buffer .
8109	WriteString writes a string
8110	NotFound writes a 404 response
8111	Run starts the agent .
8112	NewWaitGroup returns a new WaitGroup
8113	Add increments the number of outstanding outstanding requests .
8114	Wait blocks until the completed operation is complete .
8115	Gzip is a wrapper around http . Handler .
8116	New returns a new InnkeeperClient
8117	Error writes a response with status code .
8118	R Renderer returns a Handler that renders the given RenderOptions .
8119	NewClient creates a new PDClient
8120	GetTask retrieves a task by its ID .
8121	WriteImageToHTTP writes an image to http . ResponseWriter .
