0	NewSTM creates a new STM transaction .
1	first returns the first revision in rs .
2	cmps returns a list of comparators for the given revision .
3	NewSTMRepeatable creates a new repeatable STM transaction .
4	NewSTMSerializable creates a new STM transaction .
5	NewSTMReadCommitted creates a new STM transaction .
6	NewCertPool creates a new x509 . CertPool from a list of PEM - encoded certificates
7	NewCert returns a tls . Certificate from the given files . If parseFunc is nil tls . X509KeyPair is used .
8	Pause pauses the peer .
9	Resume is used to resume the peer .
10	pick picks a message from the pipeline and returns it .
11	post sends the request to the snapshot server .
12	newTxnResp creates a TxnResponse from a TxnRequest .
13	applyCompare applies a mvccpb . Compare to a ReadView .
14	OpCompact creates a compact op .
15	NewPriorityQueue creates a new priority queue .
16	Enqueue adds a new item to the priority queue .
17	NewLeaderStats creates a new LeaderStats struct .
18	Succ updates the latency and current value of the follower .
19	Fail increments the Fail counter
20	delete removes the given watcher from the broadcasts map and returns the number of broadcasts removed .
21	startStreamWriter starts a new streamWriter .
22	checkStreamSupport checks if the given version is supported by the given stream type .
23	maybeUpdate returns true if the progress was updated .
24	IsPaused returns true if the progress is paused .
25	needSnapshotAbort returns true if we need to abort a snapshot .
26	add adds a new inflight to the buffer .
27	growBuf increases the size of the inflight buffer .
28	freeTo resizes the inflight buffer to the given value .
29	SaveDBFrom saves a snapshot from the given io . Reader to disk .
30	DBFilePath returns the path to the . snap . db file for the given snapshot . If the file does not exist ErrNoDBSnapshot is returned .
31	Set implements the flag . Value interface .
32	NewUniqueStringsValue creates a new UniqueStringsValue .
33	UniqueStringsFromFlag returns a slice of unique strings from a flag .
34	UniqueStringsMapFromFlag returns a map of unique strings from a flag .
35	Percentiles converts a slice of float64s to a slice of percentiles .
36	VerifyBootstrap verifies that the server is ready for bootstrapping .
37	VerifyJoinExisting verifies that we are joining an existing cluster .
38	hasLocalMember returns an error if the local member is not in the initial cluster configuration .
39	advertiseMatchesCluster checks if the cluster is advertiseable .
40	ReqTimeout returns the request timeout .
41	getStatus returns the current status of the raft node .
42	GetDefaultHost returns the default host of the system .
43	getIfaceAddr returns the interface address for the given interface index .
44	getIfaceLink returns the netlink message for the given interface index .
45	lsCommandFunc is the entry point for ls command .
46	printLs prints a list of nodes
47	rPrint prints a node
48	NewLeaseRenewerCommand returns a new cobra command for lease renewer
49	Read reads a snapshot from disk .
50	GetCipherSuite returns the cipher suite for the given string .
51	post performs a post to the cluster .
52	send sends a message to the raft node .
53	sendHeartbeat is used to send an heartbeat message .
54	bcastAppend is used to broadcast an append message to all subscribers .
55	bcastHeartbeat is used to broadcast a heartbeat to the leader .
56	tickElection is used to tick the election .
57	tickHeartbeat is used to tick the heartbeat .
58	stepCandidate is used to step a candidate .
59	restore is used to restore a snapshot .
60	promotable returns true if this node is promotable .
61	checkQuorumActive returns true if the raft is in a quorum .
62	increaseUncommittedSize increases the number of uncommitted entries .
63	reduceUncommittedSize is used to reduce the uncommitted size to the size of the given entries .
64	newPeriodic creates a new Periodic .
65	Pause pauses the periodic process .
66	Resume marks the Periodic as paused .
67	Lock locks the mutex .
68	NewLocker returns a new locker .
69	NewFIFOScheduler creates a new fifo scheduler .
70	Schedule adds a job to the fifo .
71	Stop stops the fifo .
72	NewServer creates a new RPC server .
73	StartServe starts the gRPC server .
74	Stop stops the gRPC server .
75	Transport implements the rpcpb . TransportServer interface .
76	RegisterInterruptHandler registers an interrupt handler .
77	HandleInterrupts handles SIGINT and SIGTERM signals .
78	OpGet returns a range operation .
79	OpDelete creates a delete operation .
80	OpPut creates a put operation .
81	OpTxn creates a txn operation .
82	WithFromKey sets the op s key to the empty string .
83	withTop creates a top - level set of op options .
84	Exist checks if a directory exists
85	searchIndex searches for the given index in the given names . It returns the index and a boolean indicating whether the index was found .
86	isValidSeq returns true if the given names have a valid sequence number .
87	NewListener creates a new net . Listener .
88	cafiles returns a list of trusted CA files .
89	ServerConfig returns the TLS configuration for the server .
90	ClientConfig returns a TLS configuration based on the TLSInfo .
91	newTLSKeepaliveListener returns a new TLS keep alive listener .
92	applyV2Request handles a V2 request .
93	NewRoleCommand returns a new cobra . Command for role subcommands
94	roleAddCommandFunc is a wrapper for auth . RoleAdd
95	roleGetCommandFunc handles the role get command
96	roleGrantPermissionCommandFunc performs role grant permission command
97	roleRevokePermissionCommandFunc is a wrapper for Auth . RoleRevokePermission
98	NewCluster creates a new cluster .
99	NewClusterByConfig creates a new cluster with the given config .
100	HTTPMembers returns the HTTP members of the cluster .
101	waitLeader waits for a member to become the leader of the cluster .
102	waitNoLeader waits for all members to become leader .
103	isMembersEqual returns true if membs and wmembs are equal .
104	listenGRPC is used to listen for gRPC connections .
105	NewClientV3 creates a new clientv3 . Client for the given member .
106	Clone returns a deep copy of this member .
107	Close shuts down the member .
108	Stop stops the member .
109	checkLeaderTransition waits for the leader to transition to the new leadership .
110	Restart restarts the member .
111	Terminate terminates the member .
112	Metric returns the name of the metric with the given name .
113	InjectPartition is a test - spy implementation of InjectPartition .
114	RecoverPartition is a test - spy implementation of RecoverPartition .
115	NewClusterV3 creates a new ClusterV3 instance .
116	ParseWithDefaults parses jwtOptions with default values
117	Parse parses a map of options into jwtOptions
118	Key returns the key used to sign the request .
119	fill fills in the response header .
120	add adds a watcher to the broadcast . Returns true if the watcher was added .
121	Watch adds a new watch to the watchStream .
122	newFileEncoder returns a new encoder for the given file .
123	purgeFile removes all files with the given suffix and closes the purgec channel .
124	Set implements the flag . Value interface .
125	NewStringsValue creates a new StringsValue from a string .
126	StringsFromFlag returns the flag s value as a slice of strings .
127	Cluster returns the cluster name for the given string .
128	NewPageWriter creates a new PageWriter .
129	watch returns a watcher for the given key .
130	notify adds an event to the event history and notifies the watchers .
131	clone returns a deep copy of the event history .
132	isHidden returns true if watchPath is less than keyPath .
133	createEtcdLogFile creates the etcd log file .
134	runEtcd starts the etcd server .
135	stopEtcd is used to stop the etcd server .
136	handle_SIGQUIT_ETCD_AND_REMOVE_DATA_AND_STOP_AGENT implements the SIGQUIT command .
137	LimitListener returns a net . Listener that limits the number of connections to n .
138	allowMethod returns true if the given method is allowed .
139	NewWatchServer creates a new watch server
140	FiltersFromRequest converts a WatchCreateRequest to a list of filter functions .
141	newPipelineHandler creates a new pipeline handler .
142	checkClusterCompatibilityFromHeader checks if the cluster version is compatible with the X - Server - From header
143	KeyExists returns true if the key exists .
144	KeyMissing returns 0 if the key is missing
145	ValidateSecureEndpoints validates that the given endpoints are HTTPS endpoints .
146	putNewKV creates a new key - value pair .
147	newUniqueEphemeralKey creates a new unique ephemeral key .
148	NewUpdateDirCommand defines the libcompose updatedir subcommand .
149	updatedirCommandFunc is the entry point for updating a directory
150	handleBackup creates the backup snapshot directory
151	saveDB saves the data in srcDB to destDB .
152	NewWatchCommand returns a new cobra . Command for the watch command
153	NewV3 creates a new v3 manager .
154	Save is part of the manager . Manager interface
155	Status returns the status of the v3 snapshot file .
156	Restore restores the v3 manager .
157	NewAuthStore creates a new authStore .
158	NewTokenProvider creates a new token provider .
159	MendPeer resumes the peer with the given id .
160	removePeer removes a remote peer from the transport .
161	ActivePeers returns the number of active peers .
162	resolveTCPAddrDefault attempts to resolve a TCP address using the net . DefaultResolver .
163	resolveTCPAddrs takes a list of url . URLs and returns a new list of url . URLs .
164	urlsEqual returns true if a and b are equal .
165	URLStringsEqual compares two URL strings .
166	NewLeaseCommand returns a new cobra . Command for lease subcommands
167	NewLeaseGrantCommand returns a new cobra . Command for lease grant
168	leaseGrantCommandFunc is the handler for lease grant command
169	NewLeaseRevokeCommand returns a new cobra . Command for lease revoke
170	leaseRevokeCommandFunc is the handler for lease revoke
171	NewLeaseTimeToLiveCommand returns a new cobra . Command for lease time - to - live
172	leaseTimeToLiveCommandFunc is a wrapper for v3 . TimeToLive
173	NewLeaseListCommand returns a new cobra . Command for lease list
174	leaseListCommandFunc is a wrapper for the Kubernetes cli lease list command
175	NewLeaseKeepAliveCommand returns a new cobra . Command for lease keep - alive
176	leaseKeepAliveCommandFunc is the command handler for lease keep - alive
177	NewAlarmCommand returns a new cobra . Command for alarm subcommands
178	alarmDisarmCommandFunc handles the alarm disarm command
179	alarmListCommandFunc is a wrapper for the AlarmList command
180	Flags returns the flags for all etcd fields .
181	EmbedConfig returns an embed . Config representing the etcd configuration .
182	PProfHandlers returns a map of all pprof handlers .
183	NewBackendQuota creates a new backend quota .
184	NewClusterProxy creates a new cluster proxy
185	NewHandler creates a new lease handler
186	TimeToLiveHTTP sends a LeaseTimeToLiveRequest to the given URL .
187	newWatcherBatch creates a new watcherBatch from a list of events .
188	add adds a watcher to the group .
189	contains returns true if the given key is in the group .
190	delete removes the given watcher from the watcherGroup . Returns true if the watcher was removed .
191	choose returns a new watcherGroup with the first maxWatchers watchers . If maxWatchers is less than zero the current watcher is returned . If maxWatchers is less than zero the current watcher is returned .
192	watcherSetByKey returns the watcherSet for the given key .
193	Compare returns - 1 0 or + 1 depending on whether the two intervals are equal
194	successor returns the successor of x .
195	updateMax updates the max value of the interval node .
196	visit performs a depth - first traversal of the interval node .
197	Delete removes an interval from the IntervalTree . Returns true if the interval was deleted .
198	Insert inserts the given value into the tree .
199	rotateLeft rotates the left - most interval node .
200	replaceParent replaces the parent of x with y .
201	MaxHeight returns the maximum height of the interval tree .
202	Visit implements the IntervalVisitor interface .
203	find returns the first intervalNode that matches the given interval .
204	Find finds an interval in the tree and returns it .
205	Intersects returns true if the given interval is in the tree .
206	Contains returns true if the given interval is contained within the tree .
207	Stab returns a slice of all intervals in the tree .
208	Union returns the union of ivt and inIvt .
209	NewExactReadCloser returns an io . ReadCloser that reads exactly totalBytes bytes from rc .
210	NewElection creates a new election
211	ResumeElection is used to resume the election .
212	Proclaim updates the leader with the given value . If the leader is not leader ErrElectionNotLeader is returned
213	Resign removes the current leader .
214	Leader returns the current leader .
215	Observe implements v3 . Election .
216	check checks if the quota is available .
217	NewExecWatchCommand defines the libcompose exec - watch subcommand .
218	execWatchCommandFunc is the handler for the cli . Command interface .
219	NewListener returns a net . Listener for the given URL .
220	NewRoundTripper creates a new round tripper .
221	createPostRequest creates a new HTTP POST request .
222	checkPostResponse checks the response for a post request .
223	serverVersion returns the server version from the X - Server - Version header .
224	checkVersionCompatibility checks if the remote version is compatible with the local version .
225	setPeerURLsHeader sets the X - PeerURLs header .
226	addRemoteFromRequest parses the X - Server - From and X - PeerURLs headers .
227	NewKeysAPIWithPrefix creates a new KeysAPI with the given prefix .
228	TTLDuration returns the duration of the node s TTL .
229	SetPflagsFromEnv sets pflags from environment variables .
230	FlagToEnv converts a flag name to an environment variable name .
231	excerpt returns a string consisting of the first pre characters and the last suf characters .
232	passConfChange returns true if the entry is a ConfigChange .
233	printInternalRaftRequest prints an internal raft request .
234	listEntriesType returns a list of entries of the specified type .
235	newLog creates a new raft log with no limit .
236	newLogWithSize creates a new raft log with the given storage and logger .
237	findConflict returns the index of an entry whose term is not in the log .
238	nextEnts returns a slice of unapplied entries .
239	allEntries returns all entries in the log .
240	slice implements the LogStore interface .
241	NewSession creates a new v3 session .
242	Close revokes the session .
243	WithTTL sets the session s TTL
244	WithLease sets the lease ID for the session .
245	addRequest adds a request to the pending read index .
246	recvAck adds an ack to the pending read index .
247	advance advances the readIndexQueue to the next entry in the pending readIndexQueue .
248	lastPendingRequestCtx returns the last pending request context .
249	Start starts the etcd server .
250	start starts the etcd server .
251	Process implements raftpb . MessageProcessor .
252	ReportSnapshot reports the status of a snapshot .
253	MoveLeader moves the leader to the given transferee .
254	TransferLeadership performs a leadership transfer .
255	configure is used to apply a configuration change through raft .
256	sync sends a SYNC request to the etcd server .
257	publish is a long running goroutine that publishes the local member to the raft cluster .
258	applyEntryNormal is used to apply a normal entry .
259	applyConfChange is used to apply a configuration change to the raft cluster .
260	monitorVersions is a long lived goroutine that monitors cluster versions .
261	goAttach starts a goroutine to attach to the etcd server .
262	NewRoundrobinBalanced creates a new roundrobin balanced ticker .
263	Pick is part of the balancer . Balancer interface .
264	NewTLSListener creates a new TLS listener .
265	acceptLoop is a long lived goroutine that blocks until the listener is closed .
266	SetEndpoints sets the endpoints of the resolver group .
267	Target returns the target for the given endpoint .
268	Target returns the target URL for the given endpoint
269	Build is part of the resolver . Builder interface .
270	Handle handles the request .
271	NewElectionCommand returns a new cobra command for election subcommands
272	nodeToMember converts a v2store . NodeExtern to a Member .
273	NewTmpBackend creates a new temporary backend
274	newRevision creates a new Revision .
275	Run starts the auto - revision compaction .
276	Pause marks the revision as paused .
277	Resume marks the revision as paused .
278	voteRespMsgType returns the response message type for a vote message .
279	DescribeMessage returns a human - readable description of a message .
280	DescribeEntry returns a human - readable description of an entry .
281	DescribeEntries returns a string representation of a list of entries .
282	SetLogger sets the logger .
283	GetLogger returns the current logger .
284	maybeFirstIndex returns the index of the first snapshot if there is one .
285	maybeLastIndex returns the last index of the unstable snapshot .
286	maybeTerm returns the term of the entry at the given index .
287	shrinkEntriesArray shrinks the entries array .
288	SaveSnap is part of the Storage interface .
289	New creates a new client with the given configuration . If no endpoints are specified ErrNoAvailableEndpoints is returned .
290	NewCtxClient creates a new Client with the given context .
291	NewFromURL creates a new client from the given URL .
292	Close closes the client .
293	Endpoints returns a copy of the configured endpoints .
294	SetEndpoints sets the endpoints for the client .
295	Sync updates the endpoints of the client with the current list of members .
296	dialSetupOpts sets up gRPC dial options for the client .
297	Dial establishes a connection to the given endpoint .
298	dialWithBalancer connects to the given endpoint using the configured resolver group .
299	dial establishes a connection to a remote node .
300	WithRequireLeader returns a context with the required leader set .
301	roundRobinQuorumBackoff returns a backoffFunc that rounds the given waitBetween duration up to a multiple of the configured quorum .
302	isHaltErr returns true if the given error is a halt error .
303	NewLease returns a lease with the given prefix .
304	IsCreate returns true if the event is a create event .
305	Err returns the error associated with the watch response .
306	IsProgressNotify returns true if the response is a progress update .
307	RequestProgress is part of the stream . Watcher interface .
308	nextResume returns the next resume stream .
309	dispatchEvent converts a WatchResponse to a WatchResponse and broadcasts the response .
310	broadcastResponse broadcasts a response to all substreams .
311	unicastResponse is used to send a response to a watch .
312	joinSubstreams joins all substreams in the watchGrpcStream .
313	toPB converts the watchRequest to a protobuf WatchRequest .
314	toPB converts the progressRequest to a protobuf .
315	Contains implements the Set interface .
316	ContainsAll implements the Set interface .
317	Equals implements the Set interface .
318	Values implements the StringSet interface .
319	Copy returns a copy of this set .
320	Sub returns the difference of us and other .
321	v2MembersURL joins defaultV2MembersPrefix to the endpoint path .
322	NewMigrateCommand returns a new instance of MigrateCommand
323	publishEntries publishes the given entries to the raft node .
324	openWAL opens a WAL file .
325	replayWAL replays the current raft node s WAL .
326	stop stops the raft node .
327	NewWatchCommand returns a new instance of the watch command
328	InitialState is part of the Storage interface .
329	SetHardState implements Storage . SetHardState .
330	Entries implements the Storage interface .
331	Term returns the term for the given index .
332	LastIndex returns the last index in the storage .
333	FirstIndex returns the first index in the storage .
334	Snapshot returns the current snapshot .
335	ApplySnapshot applies a snapshot to the storage .
336	Compact is part of the Storage interface .
337	unreachable marks the URL as unreachable .
338	NewEndpointCommand returns a new cobra command for endpoint subcommands
339	epHealthCommandFunc is the main entry point for ep health command
340	NewElectCommand returns a new instance of an election command
341	NewDefragCommand returns a new cobra . Command for defrag
342	RegisterBuilder registers the balancer with the given config .
343	Build is part of the balancer . Builder interface .
344	recordTransition is used to record the transition between two states .
345	doSerialize is used to serialize an auth . AuthInfo
346	send sends the events to the watcher .
347	post sends a watch response to the watch channel .
348	OriginAllowed returns true if the origin is allowed .
349	IsHostWhitelisted returns true if the given host is in the whitelist
350	Valids returns a sorted list of valid values .
351	NewSelectiveStringsValue creates a new SelectiveStringsValue .
352	NewKV creates a new KV with a prefix .
353	NewURLsValue creates a new URLsValue from a string .
354	URLsFromFlag returns a list of URLs from a flag set
355	servePeers is used to serve all peers .
356	NewStore creates a new store .
357	appendMarkTombstone appends a mark tombstone to b .
358	IsDirWriteable ensures that the given directory is writable .
359	TouchDirAll touches all files in the given directory
360	CreateDirAll creates all the files in the given directory .
361	ZeroToEnd moves the file to the end of the file .
362	Open implements the FilePipeline interface .
363	NewRaftLoggerFromZapCore creates a new zap logger from a zapcore . Core .
364	NewConfig creates a new clientv3 . Config from a file path .
365	RegisterElectionHandler registers the http handlers for service Election to mux . The handlers forward requests to the grpc endpoint over conn .
366	UpdateCapability updates the current version of the cluster .
367	NewLockCommand returns a new instance of lock command
368	tick is used to tick the raft node .
369	advanceTicks is used to advance the number of ticks .
370	NewAuthCommand returns a new cobra . Command for auth subcommands
371	authEnableCommandFunc is the handler for auth enable command
372	authDisableCommandFunc is a command handler for auth disable
373	RetryKVClient creates a new retryKVClient .
374	RetryLeaseClient returns a lease client .
375	RetryClusterClient returns a retry cluster client .
376	RetryMaintenanceClient creates a new MaintenanceClient .
377	RetryAuthClient returns a retryAuthClient .
378	NewSetDirCommand defines the libcompose setdir subcommand .
379	Enter the barrier .
380	Leave shuts down the barrier .
381	HandleBasic is the basic HTTP handler for the etcd server .
382	WriteError writes an error to the response .
383	MemberByName returns the member with the given name .
384	PeerURLs returns a sorted list of peer URLs .
385	ValidateConfigurationChange is used to validate a configuration change .
386	AddMember adds a member to the cluster .
387	RemoveMember removes a member from the cluster .
388	ValidateClusterAndAssignIDs validates the cluster and assigns the peer IDs to the local cluster .
389	Keep returns a map of all the revisions in the tree that are available in the given revision .
390	closeRequireLeader closes all keepAlives that require a leader .
391	resetRecv returns a LeaseKeepAliveClient .
392	recvKeepAlive is used to receive a keep alive response .
393	deadlineLoop is a long lived goroutine that checks for keepAlives that have a deadline .
394	sendKeepAliveLoop sends keep alive requests to the given stream .
395	NewKV creates a new leasing KV .
396	rescind is used to rescind a key with a revision greater than or equal to rev .
397	LeaseValue is a convenience helper to create a Cmp that compares a lease key .
398	ValueBytes returns the value of this compare .
399	WithRange sets the range end for comparison .
400	WithPrefix adds a prefix to the range end .
401	mustInt64 returns the value of val if it is an int64 otherwise panics .
402	mustInt64orLeaseID returns an int64 if val is a LeaseID .
403	Next returns the next update from the watcher .
404	getJournalWriteSyncer returns a new zapcore . WriteSyncer .
405	newKV creates a new node .
406	newDir creates a new directory node .
407	Read returns the current value of the node .
408	Write sets the value and modified index of the node .
409	List returns a list of all the children of a directory .
410	GetChild returns the child node with the given name .
411	Add adds a child node to a directory .
412	Remove removes the node from the store .
413	Compare returns true if the node matches the prevValue and prevIndex .
414	Clone returns a deep copy of the node .
415	isConnectedToQuorumSince returns whether the given peer is connected to a quorum since the given time .
416	isConnectedSince returns true if the remote peer is connected since the given time .
417	numConnectedSince returns the number of connected members since the given time .
418	longestConnected returns the longest connected ID in membs .
419	isTornEntry returns true if data is a torn entry .
420	StartMockServersOnNetwork starts the mock servers on the specified network .
421	StartAt starts a gRPC server at the given index .
422	StopAt stops the gRPC server at the given index .
423	Stop stops all servers .
424	NewCheckCommand returns a new cobra . Command for kubeadm check
425	NewCheckPerfCommand returns a new cobra . Command for check - performance
426	NewCheckDatascaleCommand returns a new cobra . Command for check - datascale
427	NewGetCommand returns a new instance of the get command
428	NewGetCommand defines the libcompose get subcommand .
429	PickPeerURL picks a random peer url
430	HandleMetricsHealth adds the metrics and health routes to the given mux .
431	NewRemoveCommand defines the libcompose rm subcommand .
432	rmCommandFunc is the entry point for the rm command
433	checkIntervals checks the success of a batch of request operations and returns a set of deletes .
434	ReportEventReceived reports the number of events that have been received .
435	RegisterKVHandler registers the http handlers for service KV to mux . The handlers forward requests to the grpc endpoint over conn .
436	RegisterWatchHandler registers the http handlers for service Watch to mux . The handlers forward requests to the grpc endpoint over conn .
437	RegisterLeaseHandler registers the http handlers for service Lease to mux . The handlers forward requests to the grpc endpoint over conn .
438	RegisterClusterHandler registers the http handlers for service Cluster to mux . The handlers forward requests to the grpc endpoint over conn .
439	RegisterMaintenanceHandler registers the http handlers for service Maintenance to mux . The handlers forward requests to the grpc endpoint over conn .
440	RegisterAuthHandler registers the http handlers for service Auth to mux . The handlers forward requests to the grpc endpoint over conn .
441	startEtcd starts the etcd server .
442	identifyDataDirOrDie returns the type of the data directory or dirEmpty if the directory does not exist .
443	openLast opens the last file in the given directory .
444	gotLeader waits for the leader to become the leader .
445	lostNotify returns a channel that will be closed when the leader is lost .
446	newGRPCProxyCommand returns cobra . Command for grpc - proxy subcommands
447	NewMemberCommand returns a new instance of the member command
448	NewMemberAddCommand returns a new instance of cobra . Command for add member
449	NewMemberRemoveCommand returns a new instance of the member remove command
450	NewMemberUpdateCommand returns a new instance of an update command
451	NewMemberListCommand returns a new instance of the member list command
452	memberAddCommandFunc is the entry point for the member add command
453	memberRemoveCommandFunc is the entry point for member remove command
454	memberUpdateCommandFunc is the main entry point for member update command
455	memberListCommandFunc is a command handler for member list
456	Open opens the WAL at the given path .
457	OpenForRead opens a WAL for reading .
458	Verify verifies that the contents of a WAL file matches the contents of a snapshot .
459	Close closes the WAL .
460	notify sends an event to the event channel . Returns true if the event was sent .
461	Remove shuts down the watcher .
462	mkPathDepth returns a path with the given depth .
463	mkV2Node creates a v2store . NodeExtern from a kv .
464	prevKeyFromPuts returns the previous key from Puts .
465	NewWeightedReport creates a new weighted report .
466	NewURLsMapFromStringMap creates a new URLsMap from a map of strings .
467	String returns a string representation of the URLsMap .
468	URLs returns a sorted list of all URLs in the map .
469	parse returns a map of key - value pairs .
470	NewClientHandler returns a new http . Handler for the given etcd server .
471	writeKeyEvent writes a key event to the response .
472	writeKeyError writes an error to the ResponseWriter .
473	getUint64 gets the first value of a url query parameter as a uint64
474	getBool gets bool from url . Values
475	waitDeletes waits for all keys to be deleted .
476	AddOutputPaths adds output paths to a zap . Config .
477	NewConfig creates a new etcd server configuration .
478	PeerURLsMapAndToken returns a map of peer URLs and a token .
479	GetDNSClusterNames returns a list of DNS cluster names
480	checkBindURLs returns an error if the given URL is not a valid bind URL .
481	GetCluster returns a list of cluster names for a given service .
482	GetClient returns a client for the given service and domain .
483	GetSRVService returns the SRVService for the given service name and scheme .
484	ReadDir returns a list of files in a directory .
485	compact compacts the given revision .
486	defrag defragments an endpoint .
487	NewUserCommand returns a new cobra . Command for user subcommands
488	userAddCommandFunc is the entry point for user add command
489	userGetCommandFunc is the command handler for user get command
490	userChangePasswordCommandFunc is the handler for user change password command
491	addEvent adds the given event to the queue .
492	scan scans the event history for the given key and index .
493	clone returns a deep copy of the EventHistory .
494	openSnapshotBackend opens the backend for the given snapshot .
495	openBackend opens a new backend and returns it .
496	recoverSnapshotBackend attempts to recover a snapshot backend from an old backend . If the snapshot index is less than the old backend the backend is returned .
497	NewUpdateCommand defines the libcompose update subcommand .
498	updateCommandFunc is the entry point for update command .
499	frontAndBack returns the front and back stats .
500	Insert inserts a new RequestStats into the queue .
501	Rate returns the number of requests in the queue .
502	Clear clears the stats queue .
503	UniqueStrings returns a random slice of n unique strings .
504	RandomStrings returns n random strings
505	IsKeyNotFound returns whether or not the error is a key not found error .
506	IsRoleNotFound returns true if the error is a role not found error .
507	IsUserNotFound returns true if the error is a user not found error .
508	JoinCluster joins a cluster .
509	GetCluster returns the cluster name .
510	newProxyFunc creates a new http . ProxyFunc .
511	isSafeRetry returns true if the error is a safe retry .
512	withRetryPolicy returns a retryOption that sets the retry policy .
513	withAuthRetry returns a retryOption that sets the retryAuth flag .
514	withMax returns a retryOption that sets the maximum number of retries .
515	withBackoff returns a retryOption that sets the backoff function .
516	RecvAppendReq adds a new request to the recv rate queue .
517	SendAppendReq adds a new request to the send rate queue .
518	merge merges the contents of bbsrc into bb .
519	deleteRevKey deletes a key with revision rev .
520	isMemberBootstrapped returns true if the given member is bootstrapped .
521	GetClusterFromRemotePeers returns the Raft cluster from the remote peers .
522	getClusterFromRemotePeers returns a RaftCluster from a list of remote peers .
523	getRemotePeerURLs returns a sorted list of remote peer URLs .
524	getVersions returns a map of members to their versions .
525	decideClusterVersion returns the highest version of the cluster .
526	getVersion returns the version information for the given member .
527	NewTimeoutDetector creates a new TimeoutDetector .
528	Reset resets the timeout detector .
529	Observe returns whether or not a timeout occurred .
530	NewPeerHandler returns a new http . Handler for the given etcd server .
531	put adds a new generation to the index .
532	tombstone implements the KeyIndex interface .
533	get returns the most recent version of the key in the index .
534	since returns a list of revisions since the given revision .
535	keep removes a revision from the list of available revisions .
536	findGeneration finds the generation with the given revision . If no generation is found nil is returned .
537	cancelWatcher cancels the given watcher .
538	syncWatchersLoop is a long lived goroutine that periodically synchronizes watchers .
539	syncVictimsLoop is a long lived goroutine that periodically moves victims to the store .
540	moveVictims moves victims to the unsynced list .
541	kvsToEvents converts a slice of bytes into a slice of mvccpb . Event .
542	notify is part of the mvccpb . Store interface .
543	isOpFuncCalled returns true if a function is called .
544	UnsafePut implements the Transaction interface .
545	UnsafeSeqPut implements the Transaction interface .
546	UnsafeRange implements the BatchTx interface .
547	UnsafeDelete implements the BatchTx interface .
548	UnsafeForEach implements the BatchTx interface .
549	Commit commits the transaction .
550	CommitAndStop commits the transaction and stops the transaction .
551	Renew is part of the lease . Lease interface .
552	Attach adds items to the lease identified by id .
553	revokeExpiredLeases revokes expired leases .
554	checkpointScheduledLeases sends a checkpoint to all scheduled leases .
555	expireExists returns the next lease if it exists .
556	findExpiredLeases returns a slice of expired leases .
557	refresh updates the lease s expiry time with the given extend time .
558	forever sets the lease to forever
559	Keys returns a list of all keys in the lease .
560	Remaining returns the amount of time to wait before the lease expires .
561	NewCompactionCommand returns a new instance of cobra compaction command
562	compactionCommandFunc is the main entry point for compaction command
563	NewPutCommand returns a new instance of the put command
564	putCommandFunc is a wrapper for the cli put command
565	NewHandler returns a new reverse proxy handler .
566	NewReadonlyHandler wraps an http . Handler with a readonly handler .
567	NewSetCommand defines the libcompose set subcommand .
568	setCommandFunc handles the set command .
569	waitOnLastRev waits on the last revision of the RWMutex .
570	GetDefaultInterfaces returns a map of supported default interfaces .
571	NewSnapshotCommand returns a new cobra . Command for snapshot subcommands
572	NewMoveLeaderCommand returns a new instance of the move - leader command
573	transferLeadershipCommandFunc handles the move - leader command
574	OpenDir opens a directory and returns a file pointer .
575	NewRemoveDirCommand defines the libcompose rmdir subcommand .
576	rmdirCommandFunc removes a directory
577	NewDelCommand returns a new instance of cobra delete command
578	delCommandFunc handles the delete command
579	NewExpect creates a new ExpectProcess .
580	NewExpectWithEnv creates a new ExpectProcess .
581	ExpectFunc blocks until the function returns true .
582	Expect checks if the text contains the given string .
583	LineCount returns the number of lines in the process .
584	Signal sends the signal to the process .
585	keyFunc returns a key for a range request .
586	Add adds the request to the cache .
587	Get returns the response for the given request . If the request is not in the cache ErrCompacted is returned .
588	Invalidate implements the Cache interface .
589	Compact changes the revision of the cache to the given revision .
590	NewUniqueURLsWithExceptions returns a new instance of UniqueURLs .
591	UniqueURLsFromFlag returns a list of unique URLs from a flag set
592	UniqueURLsMapFromFlag returns a map of unique URLs from a flag set
593	Hold hijacks the barrier .
594	Release releases the barrier
595	Wait waits for the barrier to complete .
596	NewLockRacerCommand returns a new instance of lock - racer command
597	ElectionTimeout returns the etcd election timeout .
598	DialEtcdGRPCServer establishes a gRPC connection to the etcd server .
599	CreateEtcdClientConfig creates a etcd client configuration for the member .
600	CreateEtcdClient creates a etcd client for the member .
601	CheckCompact returns an error if the given revision is not equal to the current revision .
602	Defrag implements the Member interface .
603	RevHash returns the current revision and hash of the node .
604	Rev returns the current revision of the member .
605	Compact compacts the node with the given revision .
606	IsLeader returns true if the member is the leader .
607	WriteHealthKey writes the health key to etcd .
608	SaveSnapshot saves a snapshot of the member to disk .
609	RestoreSnapshot restores the snapshot of the member .
610	NewWatcher returns a new prefix - prefixed watcher .
611	NewRawNode creates a new RawNode .
612	Campaign sends a hup message to the raft node .
613	Propose is part of the raft . Node interface .
614	ProposeConfChange is part of the raft . Node interface .
615	ApplyConfChange applies a ConfChange to the node .
616	Step is part of the raft . Node interface .
617	Ready implements the Node interface for RawNode .
618	WithProgress implements the RawNode interface .
619	ReportUnreachable sends an unreachable message to the raft node .
620	ReportSnapshot reports the status of a snapshot .
621	TransferLeader is used to transfer the leader to another node .
622	ReadIndex is part of the raft . Node interface .
623	printcURL prints a curl command to stderr .
624	StartNode starts a new Raft node .
625	RestartNode restarts the node with the given configuration .
626	Tick sends a tick to the node .
627	MustSync returns true if the given hard state is different from the previous hard state .
628	NewGRPC17Health returns a new instance of the GRPC17Health .
629	NeedUpdate returns true if the healthcheck needs to be updated .
630	dflSignal sends a signal to the daemon .
631	New creates a new store .
632	Index returns the current world index .
633	Get returns the node at the given path .
634	Create creates a new entry in etcd .
635	Set implements the EtcdStore interface .
636	getCompareFailCause returns the comparison failure reason .
637	Delete deletes the node at the given path .
638	walk walks the node tree starting from the given path calling walkFunc for each node in the tree starting from the root .
639	internalGet returns the node with the given path .
640	DeleteExpiredKeys deletes expired keys from the heap .
641	checkDir checks if a directory is a directory .
642	Save returns a copy of the store as a JSON byte array .
643	Recovery is part of the store . Store interface .
644	Next returns the next unique ID .
645	NewMakeMirrorCommand returns a new instance of make - mirror command
646	NewZapCoreLoggerBuilder creates a new zap core logger builder .
647	NewSyncer returns a new Syncer .
648	DropPort removes a port from the system .
649	SetLatency sets the latency on the default interfaces .
650	RemoveLatency removes latency on all network interfaces .
651	NewTxnCommand returns a new cobra . Command for txn subcommands
652	txnCommandFunc is the main entry point for testing .
653	New returns a Compactor for the given compaction mode .
654	printResponseKey prints the response key .
655	RegisterLockHandler registers the http handlers for service Lock to mux . The handlers forward requests to the grpc endpoint over conn .
656	grpcHandlerFunc returns an http . Handler that serves gRPC requests .
657	addCORSHeader adds CORS headers to the response .
658	fallback takes a list of ops and returns a list of v3 . Ops that should not be executed .
659	IDFromString creates a new ID from a hex string .
660	release releases the lock guard file .
661	EncodedSize returns the size of the value in bytes .
662	Decode decodes a ValueStruct from a byte slice .
663	NewMergeIterator creates a new MergeIterator .
664	initHeap initializes the heap .
665	Valid returns whether the merge iterator is valid .
666	Key returns the key of the first iterator .
667	Value implements the Iterator Value interface .
668	Next advances the merge iterator to the next key .
669	Seek moves the iterator to the given key .
670	Close closes all the Iterators .
671	Encode encodes a valuePointer into a byte slice .
672	Decode decodes the header from buf .
673	encodeEntry encodes an entry to a buffer .
674	SetEntry implements the WriteBatch interface .
675	Set adds a key - value pair to the batch .
676	SetWithTTL sets an entry with a TTL .
677	Delete is part of the WriteBatch interface .
678	commit commits the write batch .
679	Flush commits the batch and waits for all pending writes to complete .
680	Error implements the error interface for WriteBatch .
681	getMemTables returns the memory tables .
682	writeRequests writes a batch of requests to the value log .
683	ensureRoomForWrite ensures that there is room for write .
684	writeLevel0Table writes the level 0 table to the given writer .
685	handleFlushTask handles the flush task .
686	flushMemtable flushes the memtable to disk .
687	calculateSize calculates the size of the LSM and VLOG files .
688	Size returns the LSM and Vlog size .
689	Next returns the next value in the sequence .
690	Release releases the sequence .
691	KeySplits returns the list of keys that have the given prefix .
692	Flatten compacts the database with the given number of workers .
693	Mmap makes a shared memory mapping for the given file descriptor .
694	Madvise wraps madvise with unix . MADV_NORMAL if readahead is true .
695	setDiscardTs is thread - safe way of setting discard timestamp
696	hasConflict returns true if there is a conflict in the transaction .
697	Set sets the value for the given key .
698	SetWithMeta is a convenience wrapper around SetEntry .
699	Delete removes the entry for the given key .
700	Get is used to retrieve an item from the database .
701	CommitWith commits the transaction with the given callback .
702	View is part of the Database interface .
703	Update is part of the Database interface .
704	Seek implements the BlockIterator Seek method .
705	SeekToLast moves the iterator to the last block .
706	parseKV populates itr . key and itr . val .
707	NewIterator creates a new iterator for the table .
708	seekFrom moves the iterator to the first block whose key is greater than or equal to key .
709	seekForPrev moves the iterator to the previous key .
710	Value returns the current value .
711	Seek moves the iterator to the next key .
712	NewConcatIterator creates a ConcatIterator from a slice of tables .
713	Valid returns true if the current iterator is valid .
714	Next advances the iterator to the next element .
715	Close closes all the underlying iterators .
716	OpenExistingFile opens an existing file .
717	Copy returns a copy of a .
718	KeyWithTs returns a copy of the given key with the given timestamp .
719	ParseTs returns the timestamp for the given key .
720	ParseKey returns the last 8 bytes of the key .
721	SameKey returns true if both keys are the same
722	FixedDuration returns a string representation of a time . Duration .
723	NewCloser creates a new Closer .
724	NewThrottle creates a new Throttle .
725	Do is a long lived goroutine that will block until an error is returned .
726	Done signals that the Throttle is done with the given error .
727	Finish shuts down the Throttle .
728	SetDiscardTs implements the function in interface DB .
729	openReadOnly opens the log file as read - only .
730	iterate iterates over all entries in the log file and calls fn for each entry .
731	sortedFids returns a sorted list of all files in the valueLog .
732	write writes a batch of requests to the value log file .
733	populateDiscardStats populates vlog . lfDiscardStats .
734	Backup writes a backup of the database to the given io . Writer .
735	ToList returns a list of items for the given key .
736	produceRanges produces a range of key - value pairs .
737	produceKVs produces a list of key - value pairs .
738	Orchestrate starts orchestrating the stream .
739	NewStream creates a new transaction stream .
740	NewStreamAt creates a new stream at the given timestamp .
741	DecrRef decreases the ref count on the table .
742	ParseFileID returns the file ID for the given file name .
743	PrintHistogram prints a histogram of key sizes .
744	newSizeHistogram creates a new sizeHistogram .
745	buildHistogram builds a histogram for the given key prefix .
746	printHistogram prints a histogram .
747	Init initializes the watermark .
748	Begin starts a new mark at the given index .
749	BeginMany starts a new water mark for the given set of indices .
750	Done marks the provided index as done .
751	DoneMany marks the given set of indices as done .
752	SetDoneUntil sets the amount of time the water mark is done .
753	WaitForMark waits for a mark to be set at the given index .
754	Encode encodes the header into b .
755	Decode decodes the header from buf and returns the number of bytes written .
756	NewTableBuilder creates a new table builder .
757	keyDiff returns the difference of the baseKey and newKey .
758	Add adds a key - value pair to the block .
759	blockIndex returns the current block index .
760	Finish returns the JSON encoding of the current block .
761	Errorf logs an error .
762	Infof logs to opt . Logger .
763	DecrRef decreases the ref count .
764	NewSkiplist creates a new Skiplist .
765	Put adds a new value to the Skiplist .
766	Get returns the value of the next key in the Skiplist .
767	Key returns the current key of the iterator .
768	Value returns the current value of the iterator .
769	Next moves the iterator to the next item in the list .
770	Prev moves the iterator to the previous element .
771	Seek moves the iterator to the first occurrence of target .
772	SeekForPrev seeks to the previous item in the list .
773	NewUniIterator creates a new UniIterator from the Skiplist .
774	Next moves the iterator to the next element .
775	Seek seeks the iterator for the given key .
776	asChanges returns a slice of manifest changes .
777	rewrite rewrites the manifest file .
778	validate checks if the level is valid .
779	acquireDirectoryLock acquires a lock on a directory .
780	release releases the lock guard handle .
781	AssertTruef asserts that b is true .
782	Wrapf is a wrapper around errors . Wrapf .
783	initTables initializes the list of tables .
784	deleteTables removes the given tables from the list and decrements the ref count .
785	tryAddLevel0Table tries to add a table to the level 0 database . It returns true if the table was added .
786	getTableForKey returns the table for the given key .
787	get returns the value for the given key .
788	overlappingTables returns the number of overlapping tables and the number of overlapping tables .
789	String returns a string representation of the item .
790	KeyCopy returns a copy of the item s key .
791	ValueSize returns the size of the value in bytes .
792	NewKeyIterator returns a new iterator for the given key .
793	Valid returns whether the iterator is valid .
794	ValidForPrefix returns true if the iterator is valid for the given prefix .
795	Close shuts down the iterator .
796	parseItem parses the next item in the iterator . It returns false if there are no more items .
797	Seek moves the iterator to the given key .
798	GetMergeOperator returns a MergeOperator .
799	Get returns an existing value .
800	compareAndAdd adds a compactDef to the current compactStatus and returns true if the compactStatus is valid .
801	newArena creates a new Arena .
802	putNode adds a new node to the buffer .
803	getNode returns the node at the given offset .
804	getKey returns the key at the given offset and size .
805	getVal returns the value at the given offset and size .
806	getNodeOffset returns the offset in bytes of the given node .
807	init initializes badger_disk_reads_total number of reads and writes
808	revertToManifest removes all tables referenced in the manifest and removes them from the database .
809	dropTree removes all levels from the manifest and returns the number of removed levels .
810	dropPrefix removes all tables with the given prefix .
811	isLevel0Compactable returns true if the first level is compactable .
812	doCompact runs the compaction for the given priority .
813	get returns the value for the given key . If maxVs is non - nil it will be returned .
814	seekTotal is used to seek the total balance of all accounts in the badger database .
815	findFirstInvalidTxn tries to find a valid violation at a given timestamp . If there is no violation at the given timestamp it returns 0 . Otherwise it returns the timestamp at which the violation was found .
816	Create creates a new in - memory snapshot .
817	List returns all the metadata for the latest snapshot .
818	Open returns the metadata and contents of the latest snapshot .
819	Write is part of the io . Writer interface .
820	NewFileSnapshotStoreWithLogger creates a new instance of FileSnapshotStore .
821	NewFileSnapshotStore creates a new instance of FileSnapshotStore .
822	snapshotName returns the name of the snapshot .
823	Create creates a new snapshot on disk .
824	List returns a list of all snapshots in the store
825	getSnapshots returns a list of all the snapshots in the directory .
826	readMeta reads the metadata for a file snapshot .
827	Open opens the snapshot with the given id and returns the metadata and state file .
828	ReapSnapshots removes all of the snapshots in the store .
829	Write is part of the io . Writer interface .
830	Close closes the FileSnapshotSink .
831	Cancel cancels the snapshot .
832	finalize flushes the buffered buffer and closes the state file .
833	writeMeta writes the meta file to disk .
834	NewNetworkTransportWithConfig creates a new NetworkTransport with the given configuration .
835	setupStreamContext is used to setup the stream context .
836	getStreamContext returns the current stream context .
837	SetHeartbeatHandler sets the function used to handle heartbeat RPCs .
838	CloseStreams shuts down the network transport s connection pool .
839	Close shuts down the network transport .
840	getPooledConn returns a connection from the connection pool . If the connection pool is empty nil is returned .
841	getConnFromAddressProvider tries to get a connection from the provider s address provider or fallback to the specified target .
842	getConn returns a connection to the given target .
843	returnConn adds a connection to the connection pool if it is not already in the pool .
844	listen is a long lived goroutine that blocks until a connection is accepted .
845	handleConn is used to handle a single connection .
846	handleCommand is used to handle a single command .
847	decodeResponse decodes the RPC response .
848	sendRPC sends an RPC message .
849	newNetPipeline creates a new netPipeline .
850	decodeResponses reads responses from the in - progress channel and decodes them .
851	AppendEntries implements the net . Conn AppendEntries method .
852	Close shuts down the netPipeline .
853	NewObserver creates a new Observer .
854	RegisterObserver registers an Observer .
855	DeregisterObserver removes an Observer .
856	observe sends an Observation to all registered observers .
857	NewInmemStore creates a new in - memory store .
858	FirstIndex returns the first index in the store .
859	LastIndex returns the last index in the store .
860	GetLog returns the log at the given index .
861	StoreLog stores a log in the InmemStore .
862	StoreLogs stores the logs to the in - memory store .
863	DeleteRange deletes all logs between min and max .
864	Set sets the value for the given key .
865	Get returns the value for the given key .
866	SetUint64 sets the value for a key .
867	GetUint64 gets the uint64 value for a given key .
868	NewLogCache creates a new LogCache .
869	Connect adds a transport to the InmemTransport .
870	Disconnect disconnects a peer from the InmemTransport .
871	DisconnectAll disconnects all in - memory peers .
872	Respond sends a response to the client .
873	Open is part of the SnapshotFuture interface .
874	vote sends the vote to the vote channel if leader is true .
875	notifyAll is a thread - safe way of notifying all followers .
876	cleanNotify removes a verifyFuture from the notify map .
877	LastContact returns the time of the last contact .
878	setLastContact updates the last contact time .
879	replicate is a long lived function that will replicate to the given follower .
880	pipelineReplicate is used to perform a pipeline replication .
881	pipelineSend is used to send a batch of AppendEntries to a remote node .
882	pipelineDecode is a long lived goroutine that reads from the AppendPipeline and updates the lastAppended state .
883	setupAppendEntries sets up the AppendEntriesRequest .
884	setPreviousLog sets the PrevLogEntry and PrevLogTerm fields of the AppendEntriesRequest .
885	setNewLogs adds new logs to the request .
886	appendStats increases the metrics counters for the given peer .
887	handleStaleTerm is called when a peer has a newer term .
888	AppendEntries is part of the raft . Transport interface .
889	RequestVote is part of the raft . Transport interface .
890	InstallSnapshot is part of the raft . Transport interface .
891	EncodePeer is part of the raft . Transport interface .
892	DecodePeer implements the transport . Transport interface .
893	AppendEntries implements the raft . AppendEntryPipeline interface .
894	ReadPeersJSON reads a configuration from a JSON file .
895	ReadConfigJSON reads a configuration from a JSON file .
896	NewTCPTransport creates a new TCP transport .
897	NewTCPTransportWithLogger creates a new TCP transport with a custom logger .
898	NewTCPTransportWithConfig creates a new TCP transport with the given configuration .
899	Dial is part of the StreamLayer interface .
900	Accept implements the net . Listener interface .
901	Addr implements the StreamLayer interface .
902	restoreSnapshot is used to restore a snapshot .
903	BootstrapCluster is used to bootstrap a cluster with the given configuration .
904	Leader returns the address of the current leader .
905	Apply implements the raft . Raft interface .
906	Barrier implements raft . Raft .
907	VerifyLeader implements the raft . Raft interface .
908	AddVoter implements the Raft interface .
909	RemoveServer removes a server from the raft cluster .
910	Shutdown implements the raft . Raft interface .
911	Snapshot implements raft . Raft . Snapshot .
912	Restore implements raft . Raft .
913	String returns a string representation of the node .
914	LastContact returns the time of the last contact .
915	Logf is part of the Logger interface .
916	containsNode returns true if the given node is in the given list .
917	LeaderPlus returns a slice of the last n nodes in the cluster .
918	WaitTilUptoDate waits for all nodes to reach the last applied index .
919	assertLogEntryEqual asserts that the given log entry is equal to the given log entry .
920	runFSM runs the Raft FSM .
921	Clone returns a deep copy of the configuration .
922	Clone returns a deep copy of the configurations .
923	hasVote returns true if the given server has a vote .
924	checkConfiguration checks if there is at least one voter in the configuration .
925	nextConfiguration returns the next configuration based on the change .
926	encodePeers encodes all the peers in the given configuration .
927	decodePeers decodes a list of peers from the given buffer .
928	encodeConfiguration encodes a configuration struct .
929	decodeConfiguration decodes a configuration message from buf .
930	goFunc starts a goroutine that runs f in its own goroutine .
931	getLastIndex returns the last log index and snapshot index .
932	getLastEntry returns the last log index and the last snapshot index .
933	checkRPCHeader returns an error if the RPC command does not have a header .
934	setLeader sets the leader of the raft node .
935	requestConfigChange is used to send a configuration change request to the raft node .
936	run is a long lived goroutine that runs the Raft state machine .
937	runFollower is a long lived goroutine that runs the raft follower .
938	liveBootstrap is used to bootstrap the Raft cluster .
939	runCandidate is a long lived goroutine that runs the raft candidate state .
940	runLeader is used to start the leader process .
941	startStopReplication is used to start the replication process .
942	configurationChangeChIfStable returns the configuration change channel if it is stable or nil otherwise .
943	verifyLeader is used to verify a leader .
944	checkLeaderLease is used to determine if we should step down the raft leader . If we should step down the raft leader . If we should step down the raft leader .
945	restoreUserSnapshot is used to restore a user - defined snapshot .
946	appendConfigurationEntry is used to append a new configuration entry to the raft state .
947	dispatchLogs is used to dispatch a batch of logs to the leader .
948	processLogs processes the logs at the given index .
949	processLog is used to process a log message .
950	processRPC is used to process a single RPC .
951	processHeartbeat is used to process a heartbeat RPC .
952	setLastContact updates the last contact time .
953	persistVote updates the last vote term and last vote candidate .
954	setCurrentTerm sets the current term .
955	setState is used to change the state of the Raft instance .
956	getCommitIndex returns the current commitment index .
957	recalculate recalculates the commitment index based on the current quorum match index .
958	randomTimeout returns a channel that can be used to wait for a random time .
959	generateUUID generates a random UUID .
960	decodeMsgPack decodes a msgpack message .
961	encodeMsgPack encodes in as a msgpack message .
962	backoff takes a base duration and a round factor and returns the base duration .
963	newApplySource returns a new instance of applySource .
964	reset resets the random number generator .
965	DefaultConfig returns a default configuration .
966	ValidateConfig returns an error if the given config is invalid .
967	runSnapshots is a long lived goroutine that will take a random snapshot .
968	shouldSnapshot returns true if we should perform a snapshot .
969	takeSnapshot is used to take a snapshot of the Raft state .
970	compactLogs is used to compact the logs from snapIdx to the last log index .
971	WebpackCheck checks if the config . js file is the same as the latest Buffalo template .
972	New creates a new genny generator .
973	UnixSocket creates a listener that listens on a unix socket .
974	Get returns the error handler for the given status .
975	PanicHandler is a middleware that emits a 500 error .
976	partialFeeder returns the name of a partial template .
977	New creates a new plush engine .
978	WriteTo writes the message to the given io . Writer .
979	Send sends a message .
980	NewSMTPSender creates a new SMTPSender .
981	Param returns the value of the request form as a string .
982	Set sets the value for the given key .
983	Value returns the value associated with the given key .
984	Redirect redirects the user to the given URL .
985	File returns a File binding .
986	MarshalJSON implements the json . Marshaler interface .
987	New creates a new genny group
988	New creates a new instance of App .
989	DeprecationsCheck checks for deprecations .
990	List is not implemented .
991	Render implements the Renderer interface .
992	Save saves the session .
993	GetOnce returns the value associated with the given key .
994	Set sets the value for the given name .
995	Clear removes all values from the session .
996	getSession returns a session for the current request .
997	New creates a new generator with the given options .
998	New creates a new generator with the given options .
999	New creates a new generator .
1000	NewMessage creates a new Message .
1001	Reset resets the message to its original state .
1002	SetHeader sets the value of a header field .
1003	SetHeaders sets a map of header names to values .
1004	SetAddressHeader adds an address header field to the message .
1005	FormatAddress returns a string representation of an address .
1006	SetDateHeader adds a date header field to the message .
1007	FormatDate returns a string representation of the given date .
1008	SetBody sets the body of the message .
1009	SetPartEncoding sets the encoding of the part .
1010	SetHeader sets the file header
1011	SetCopyFunc is a FileSetting that sets the copy function .
1012	AttachReader adds a file to the message with the given name and io . Reader .
1013	Attach adds a file to the message s attachments .
1014	EmbedReader adds an embedded file with the given io . Reader to the message .
1015	Embed adds an embedded file to the message .
1016	ValidateTemplates takes a packd . Walker and returns a run function that validates templates .
1017	PlushValidator validates plush .
1018	Validate validates the mailer options .
1019	LoadPlugins loads all available plugins .
1020	WriteHeader implements the http . ResponseWriter WriteHeader method .
1021	Write implements the io . Writer interface .
1022	Flush implements the http . Flusher interface .
1023	CloseNotify returns a channel that will be closed when the response is closed .
1024	Run runs the Buffalo updater .
1025	onlyRelevantFiles is a helper function that returns nil if there are no relevant files .
1026	GoTemplateEngine is the Go template engine .
1027	GET adds a route to the router with the GET method .
1028	Redirect redirects the request to the specified destination .
1029	ANY adds a route to the app .
1030	buildRouteName builds a route name from a route name .
1031	New creates a new mail generator .
1032	NewDialer returns a new Dialer .
1033	Dial connects to the SMTP server and returns a SendCloser .
1034	DialAndSend connects to the server and sends the given messages .
1035	Set sets the values for the given key .
1036	Add adds a key - value pair to flash
1037	persist writes the flash data to the session .
1038	newFlash returns a new Flash object .
1039	Get returns the value of a cookie .
1040	Set sets a cookie .
1041	SetWithExpirationTime sets a cookie with the given name value and expiration time .
1042	Delete deletes a cookie .
1043	NewMessage creates a new message .
1044	NewFromData creates a new message from the given data .
1045	New creates a new Message from a buffalo . Context .
1046	CloseNotify returns a channel that is closed when the event source is closed .
1047	NewEventSource returns a new EventSource .
1048	NewSimpleWithContext creates a new Simple with the given context .
1049	Register registers a handler for the given name . If the handler is already registered an error is returned .
1050	Start starts the Simple background worker
1051	Stop stops the Simple background worker .
1052	Perform executes a job .
1053	PerformAt implements the Worker interface .
1054	PerformIn runs the given job in a separate goroutine .
1055	String returns a string representation of the RouteInfo .
1056	Alias adds an alias to the RouteInfo .
1057	Name sets the route name
1058	BuildPathHelper returns a RouteHelperFunc that renders the route path .
1059	New creates a new genny generator .
1060	New creates a new generator with the given options .
1061	RegisterCustomDecoder registers a custom type decoder .
1062	Replace implements the MiddlewareStack interface .
1063	Routes returns a list of all routes .
1064	WrapBuffaloHandler wraps a http . Handler in a GET route .
1065	PackageJSONCheck checks if the package . json file is different from the latest template .
1066	match attempts to match the importpath against the data in c . Data .
1067	Send sends the given messages using the given sender .
1068	Last returns true if n is the last part of opts .
1069	Stop cancels the app and logs the error .
1070	DepEnsure runs the dep ensure command
1071	String returns a string representation of the build info .
1072	New creates a new genny generator .
1073	AddBody adds a body to the message .
1074	AddBodies adds a set of bodies to the message .
1075	AddAttachment adds an attachment to the message .
1076	AddEmbedded adds an embedded attachment to the message .
1077	SetHeader sets the value of a header field .
1078	New creates a new genny group with the given options .
1079	New creates a new application . html generator .
1080	New creates a new genny . Generator .
1081	Cleanup cleans up the files in the disk .
1082	MDTemplateEngine is the Markdown template engine .
1083	Update updates the contents of a configmap
1084	FilterChanges takes a list of pull request changes and filters out any changes that are not in the config map .
1085	getLabelsFromREMatches returns a list of labels from a list of matches .
1086	getLabelsFromGenericMatches returns a list of labels from a list of generic matches .
1087	Start starts the agent .
1088	Subscribe adds a subscription to the list of subscriptions .
1089	Config returns the current configuration .
1090	Set updates the current configuration .
1091	IsMember is a test - spy implementation of Interface . IsMember .
1092	ListIssueComments is a test - spy implementation of Interface . ListIssueComments
1093	ListPullRequestComments returns a list of pull request comments .
1094	ListReviews is a test - spy implementation of Interface . ListReviews .
1095	ListIssueEvents is a test - spy implementation of Interface . ListIssueEvents
1096	CreateComment is a test - spy implementation of Interface . CreateComment .
1097	CreateReview creates a review .
1098	CreateCommentReaction adds a new reaction to an existing comment .
1099	CreateIssueReaction adds a new reaction to an existing issue
1100	DeleteComment deletes an issue comment .
1101	DeleteStaleComments deletes stale comments from the specified issue .
1102	GetPullRequest returns a pull request .
1103	GetPullRequestChanges returns a fake list of pull request changes
1104	GetRef returns a reference to a repository .
1105	DeleteRef deletes a reference from a repository .
1106	GetSingleCommit returns a single commit .
1107	CreateStatus is a test - spy implementation of Interface . CreateStatus .
1108	ListStatuses is a test - spy implementation of Interface . ListStatuses .
1109	GetCombinedStatus returns the combined status for the given ref .
1110	GetRepoLabels returns the labels for the specified repository .
1111	GetIssueLabels returns a list of issue labels
1112	AddLabel adds a label to a repository .
1113	RemoveLabel removes a label from a repository .
1114	FindIssues is a test - spy implementation of Interface . FindIssues
1115	AssignIssue is a test - spy implementation of Interface . AssignIssue .
1116	GetFile is a test - spy implementation of Interface . GetFile .
1117	ListTeams is a test - spy implementation of Interface . ListTeams
1118	ListTeamMembers is a part of the Interface . ListTeamMembers
1119	IsCollaborator is a test - spy implementation of Interface . IsCollaborator .
1120	ListCollaborators is a test - spy implementation of Interface . ListCollaborators .
1121	ClearMilestone clears the milestone .
1122	SetMilestone is a test - spy implementation of Interface . SetMilestone .
1123	ListMilestones is a test - spy implementation of Interface . ListMilestones .
1124	ListPRCommits is a test - spy implementation of Interface . ListPRCommits .
1125	GetRepoProjects is a test - spy implementation of Interface . GetRepoProjects .
1126	GetOrgProjects returns a list of all projects in the specified org .
1127	GetProjectColumns is a test - spy implementation of Interface . GetProjectColumns
1128	CreateProjectCard creates a new ProjectCard
1129	DeleteProjectCard deletes a project card
1130	MoveProjectCard moves a project card to a new column .
1131	CreateDatabaseClient creates a new InfluxDB client .
1132	Push sends a point to InfluxDB .
1133	NewProwJobWithAnnotation creates a new prowapi . ProwJob with the given spec labels and annotations .
1134	NewProwJob creates a new prowapi . ProwJob .
1135	NewPresubmit creates a new presubmit job .
1136	PresubmitSpec converts a config . Presubmit to a prowapi . ProwJobSpec .
1137	PostsubmitSpec returns a prowapi . ProwJobSpec for the Postsubmit job .
1138	PeriodicSpec converts config . Periodic to prowapi . PeriodicJob .
1139	BatchSpec returns a prowapi . ProwJobSpec for a batch job .
1140	PartitionActive partitions a slice of prowapi . ProwJobs into two channels .
1141	ProwJobFields returns the fields of a prowapi . ProwJob .
1142	ClusterToCtx converts kube . InClusterContext to kube . DefaultClusterAlias
1143	AddCommand adds a command to plugin help
1144	Get takes name of the prowJob and returns the corresponding prowJob object and an error if there is any .
1145	Watch returns a watch . Interface that watches the requested prorowJobs .
1146	Delete takes name of the prowJob and deletes it . Returns an error if one occurs .
1147	Patch applies the patch and returns the patched prowJob .
1148	MergeMethod returns the merge method for the given org and repo .
1149	Query returns a string representation of the query .
1150	ForRepo returns true if the given repository is in the given org .
1151	OrgExceptionsAndRepos returns a map of org names to the set of repos that are not in the excluded repos set .
1152	QueryMap creates a QueryMap from a slice of TideQueries .
1153	ForRepo returns all queries for the given org and repo .
1154	Validate validates the TideContextPolicy .
1155	GetTideContextPolicy returns the tide context policy for the given branch .
1156	IsOptional checks if a context is optional
1157	MissingRequiredContexts returns a list of missing required contexts
1158	ValidateWebhook validates the webhook .
1159	HelpProvider returns the help for the needs - rebase plugin .
1160	HandleEvent handles a single pull request event .
1161	HandleAll checks all PRs for the external plugin .
1162	NewDryRunProwJobClient creates a new dryRunProwJobClient
1163	Create creates a new prow job .
1164	Update implements ProwJobClient Update method .
1165	UpdateStatus updates the status of a dryRun prow job .
1166	Delete is part of the ProwJobClient interface .
1167	DeleteCollection implements ProwJobClient . DeleteCollection .
1168	Get implements ProwJobClient Get .
1169	List returns a list of prow jobs that match the given selector .
1170	Watch implements the DryRunProwJobClient interface .
1171	Patch implements the patch . Patcher interface .
1172	hasSynced returns true if the controller has been initialized .
1173	Run starts the pipeline controller .
1174	runWorker is a long lived goroutine that runs the reconciler .
1175	fromKey splits a key into its components .
1176	enqueueKey adds a key to the workqueue
1177	finalState returns true if the status is a final state .
1178	description returns the description of a duckv1alpha1 . Condition or fallback if none is set .
1179	prowJobStatus returns the prow job state for the given pipeline run status .
1180	pipelineMeta returns the meta for a pipeline .
1181	sourceURL returns the source URL for a prow job .
1182	makePipelineGitResource creates a pipeline git resource
1183	makePipelineRun creates a new PipelineRun from a ProwJob .
1184	matchingConfigs returns a filtered list of require matching labels .
1185	SuggestCodeChange suggests the code change for the given Problem .
1186	ServeExternalPluginHelp serves the help endpoint for external plugins .
1187	protect checks to see if there is an update in the state of the branch protection . If there is an update in the state it updates the state .
1188	UpdateOrg updates all repositories in an org
1189	UpdateRepo updates all branches in a repository .
1190	UpdateBranch updates the protection requirements for a branch .
1191	LoadConfig loads the options from a JSON string .
1192	Run starts the artifact uploader .
1193	Start starts the agent reloading the secrets from the given paths .
1194	reloadSecret is used to reload a secret file .
1195	GetSecret returns the secret at the given path .
1196	setSecret sets the secret value for the given secretPath .
1197	GetTokenGenerator returns a function that can be used to generate tokens .
1198	New returns a new instance of History .
1199	Record adds a new record to the history .
1200	ServeHTTP implements the http . Handler interface .
1201	Flush writes the action history to GCS .
1202	AllRecords returns all the records in the history .
1203	MakeCommand returns a cobra command for the prowjob download command
1204	CheckFlags implements Plugin . CheckFlags .
1205	ReceiveComment returns a slice of points for the given comment .
1206	NewController returns a new instance of Controller .
1207	Run starts the controller .
1208	runWorker runs a worker goroutine .
1209	New returns a new LocalGit instance .
1210	MakeFakeRepo creates a fake git repository .
1211	AddCommit commits the given files to the given repository .
1212	CheckoutNewBranch checkout a new branch
1213	Checkout checks out a specific commit like .
1214	RevParse calls git rev - parse with the given commitlike .
1215	CleanAll cleans all resources in the given region .
1216	optionsForRepo returns the list of options for the given org and repo .
1217	getChangedFiles returns a list of changed files in the given repository .
1218	loadReviewers loads the reviewers from the given filenames .
1219	NewController returns a new instance of Controller .
1220	SaveLastSync saves the last sync time to disk .
1221	Sync syncs the last update time to disk .
1222	AddFlags adds flags related to EventCounterPlugin
1223	CheckFlags implements Plugin . CheckFlags .
1224	ReceiveIssueEvent returns a slice of points for the given issue event .
1225	Upload runs each of the given uploadTargets in a separate goroutine .
1226	FileUploadWithMetadata creates an UploadFunc that uploads a file with the given metadata .
1227	DataUploadWithMetadata returns an UploadFunc that uploads the data from src to obj with the given metadata .
1228	HasLabel returns true if issueLabels contains the given label .
1229	ImageTooBig returns true if the image is too big .
1230	LevelFromPermissions returns the level from the permissions .
1231	PermissionsFromLevel converts a RepoPermissionLevel to a RepoPermissions .
1232	newProwJobs returns a ProwJobs
1233	GetApplicable returns the list of blockers that can be applied to the given repository and branch .
1234	serve serves jenkins metrics .
1235	NewCountPlugin creates a new instance of the count command
1236	ReceiveComment is part of the sql . CommentPlugin interface
1237	updateMetrics is a long lived goroutine that updates the metrics . DiskFree DiskUsed and DiskTotal .
1238	LogStatus logs the current resources
1239	SyncConfig updates the storage with the given config .
1240	Metric returns a metric for the given resource type
1241	FormatURL formats a dog image URL .
1242	runAndSkipJobs runs the requested jobs and skips the skipped jobs .
1243	validateContextOverlap returns an error if the requested contexts are both triggered and skipped .
1244	RunRequested creates a new presubmit for the given pull request .
1245	skipRequested creates a status report for each skipped job .
1246	Match returns true if the label matches the event s label .
1247	Match returns true if the event name and label match .
1248	AddFlags adds flags related to GitHub to the specified FlagSet .
1249	AddFlagsWithoutDefaultGitHubTokenPath adds flags related to GitHub for controller manager to the specified FlagSet .
1250	Validate validates the GitHubOptions .
1251	GitHubClientWithLogFields creates a new GitHub client with the given fields .
1252	GitHubClient returns a GitHub client .
1253	GitClient returns a git client .
1254	toMap converts a CoverageList to a map .
1255	findChanges returns a list of changes from baseList to newList .
1256	CreateDatabase creates a new MySQL database .
1257	ShouldReport returns true if the prow job should be reported .
1258	Report generates a report for a prow job .
1259	MarkComplete marks all resources that have been marked as complete . Returns the number of resources marked .
1260	NewJobAgent creates a new JobAgent
1261	Start starts the job agent .
1262	Jobs returns a copy of the current jobs .
1263	ProwJobs returns the current list of prow jobs .
1264	GetProwJob returns the prowapi . ProwJob for the given job and id .
1265	GetJobLog returns the logs for the given job .
1266	unionStrings returns the union of parent and child .
1267	Apply merges the child policy with the current policy .
1268	GetOrg returns the org with the given name .
1269	GetRepo returns the repo with the given name .
1270	GetBranch returns the branch with the given name .
1271	GetPolicy returns the policy for the given branch .
1272	UpdateIssueEvents updates the issue - events for the given issue
1273	enqueueKey adds a key to the workqueue
1274	prowJobStatus returns the prow job state for the given build status .
1275	buildEnv returns a map of environment variables for a build .
1276	defaultArguments adds default arguments to the template instantiation spec
1277	defaultEnv adds default values to the container s environment .
1278	injectSource injects a source container into the build spec .
1279	injectedSteps returns a list of injected steps .
1280	determineTimeout returns the timeout for the build . If no timeout is set the default timeout is used .
1281	makeBuild creates a build from a prowjob .
1282	newLabels creates a list of labels from a slice of github . Labels .
1283	newAssignees creates a list of assignees for the given issue .
1284	NewIssueComment creates a new issue comment .
1285	messageFilter returns a filter that can be used to filter messages based on the current revision .
1286	IsSuccess returns true if the build succeeded .
1287	IsFailure returns true if the build is in a failure state .
1288	IsAborted returns true if the build is aborted .
1289	ProwJobID returns the value of prowJobID parameter
1290	BuildID returns the build ID for this build
1291	CrumbRequest performs a crumb request .
1292	measure measures the latency of a request .
1293	GetSkipMetrics sends a GET request to the given path and returns the response body .
1294	Get performs a GET request to the given path .
1295	request performs an HTTP request and returns the response .
1296	doRequest performs an HTTP request and returns the response .
1297	getJobName returns the name of the job .
1298	getBuildPath returns the path to the build directory for the given job .
1299	GetJobInfo returns information about the specified job .
1300	JobParameterized returns true if the job is parameterized .
1301	EnsureBuildableJob ensures that a buildable job exists .
1302	LaunchBuild launches a build
1303	Build builds a prow job
1304	BuildFromSpec launches a build from the given spec .
1305	GetEnqueuedBuilds returns a list of builds that have been enqueued
1306	Abort aborts a running build .
1307	PresubmitToJobSpec converts a config . Presubmit to a downwardapi . JobSpec
1308	PostsubmitToJobSpec converts config . Postsubmit to downwardapi . JobSpec .
1309	PeriodicToJobSpec converts periodic config . Periodic to downwardapi . JobSpec
1310	GetBuildID returns the build ID for the given build name and totURL .
1311	listGcsObjects lists all GCS objects in a given bucket .
1312	FindBaseProfile finds the base profile for a prow job .
1313	sortBuilds sorts a list of build strings by build number
1314	GetAll returns a list of all available regions
1315	NewEventClient creates a new EventClient .
1316	PruneComments will prune all comments for the given issue . If shouldPrune returns true the comment will be removed .
1317	FormatResponse returns a string representation of the response .
1318	FormatSimpleResponse returns a string representation of a response .
1319	FormatICResponse formats a github . IssueComment as a string .
1320	FormatResponseRaw returns a string representation of the response .
1321	Validate validates the options .
1322	Encode returns the options as a JSON string .
1323	RegisterIssueHandler registers an issue handler .
1324	RegisterIssueCommentHandler registers an issue comment handler .
1325	RegisterPullRequestHandler registers a pull request handler .
1326	RegisterStatusEventHandler registers a StatusEventHandler .
1327	RegisterPushEventHandler registers a PushEventHandler .
1328	RegisterReviewEventHandler registers a handler for review events .
1329	RegisterReviewCommentEventHandler registers a handler for review comment events .
1330	RegisterGenericCommentHandler registers a generic comment handler .
1331	NewAgent creates a new instance of the ProwJobAgent
1332	InitializeCommentPruner initializes the comment pruner .
1333	CommentPruner returns a comment pruner client .
1334	Load loads the configuration from the given path .
1335	Config returns the current configuration .
1336	Set sets the current configuration .
1337	Start starts the config agent .
1338	GenericCommentHandlers returns a map of generic comment handlers for all plugins .
1339	IssueHandlers returns a map of issue handlers for all plugins .
1340	IssueCommentHandlers returns a map of issue comment handlers for all plugins .
1341	PullPullHandlers returns a map of pull request handlers for all plugins .
1342	ReviewEventHandlers returns a map of review event handlers for all plugins .
1343	ReviewCommentEventHandlers returns a map of plugin name - > handler .
1344	StatusEventHandlers returns a map of all registered status events .
1345	PushEventHandlers returns a map of push event handlers for all plugins .
1346	EventsForPlugin returns a list of events for the given plugin .
1347	insertLink adds the viewURL to the metadata . links . resultstore .
1348	HelpProvider returns the help for the cherrypick plugin .
1349	getPatch returns the patch for a pull request .
1350	releaseNoteFromParentPR returns the release - note from the parent PR .
1351	ValidatePayload returns true if the payload is valid for the given signature .
1352	PayloadSignature returns the signature of the given payload using the given key .
1353	updateString returns true if have is equal to want false otherwise .
1354	updateBool returns true if have is equal to want false otherwise .
1355	configureOrgMeta updates the metadata of an org .
1356	configureTeamRepos returns an error if the given team does not exist in the given org .
1357	ShouldReport returns true if the prow job should report .
1358	Run runs the options .
1359	Format implements the logrus . Formatter interface .
1360	FindLabels returns all labels in the issue that match the given regex .
1361	AddFlags adds options to the specified FlagSet .
1362	NewAgent creates a new GitHub Agent .
1363	HandleLogin returns a handler that redirects the user to the agent s login URL .
1364	HandleLogout returns a handler that will invalidate the session on log out .
1365	serverError returns a 500 Internal server error .
1366	FromItem converts a common . Item to a ResourcesConfigObject
1367	GetItems returns a list of all resources .
1368	SetItems sets the items of the resources config collection .
1369	UnmarshalText implements the encoding . TextUnmarshaler interface .
1370	IsAssignee returns true if the given login is an assignee .
1371	IsAuthor returns true if the issue is author of the given login .
1372	HasLabel returns true if the issue has the specified label .
1373	Branch returns the branch of the push event .
1374	truncate truncates a string to max length .
1375	reportStatus reports the status of a prowjob .
1376	parseIssueComments takes a list of issue comments and returns a list of previous comments and latest comments .
1377	createComment creates a comment for a prow job .
1378	Config returns the config for the lens .
1379	Callback returns an empty string .
1380	FormatRecord returns a string representation of a record .
1381	Namespace returns a copy of the client with the given namespace .
1382	NewFakeClient creates a new fake deck client
1383	NewClientInCluster creates a new Kubernetes client for the in - cluster cluster .
1384	NewClientFromFile creates a new cluster client from a file .
1385	NewClient creates a new Kubernetes client
1386	ReplaceConfigMap replaces an existing configmap
1387	GetDiskUsage returns the percentage of free and used disk space in bytes .
1388	GetATime returns the atime for the given path . If the file does not exist defaultTime is returned .
1389	RegisterLens registers the given lens with Spyglass .
1390	GetLens returns the Lens for the given name .
1391	LastNLines returns the last n lines of the artifact .
1392	NewClient creates a new slack client
1393	WriteMessage sends a message to a channel .
1394	MarkAndSweep marks all NATGateways in the given set and sweeps them .
1395	ListAll returns all NATGateways for the given account and region .
1396	NewClient returns a new instance of Client .
1397	Acquire acquires a resource and stores it in the storage .
1398	AcquireWait waits for a resource to be in use and returns it . If the resource is already in use it returns ErrAlreadyInUse .
1399	AcquireByState acquires a set of resources using the specified state .
1400	ReleaseAll releases all resources
1401	ReleaseOne releases one resource
1402	UpdateAll updates all resources with the given state .
1403	SyncAll syncs all resources
1404	UpdateOne updates a single resource
1405	Metric returns the metric with the given type .
1406	HasResource returns true if there is at least one resource .
1407	DialContext implements net . Dialer . DialContext .
1408	NewDashboardAgent creates a new dashboard agent
1409	QueryPullRequests returns a list of pull requests for the given search query .
1410	GetHeadContexts returns the contexts for the given pull request .
1411	ConstructSearchQuery returns a search query for the given login .
1412	NewBundledStates creates a new BundledStates .
1413	ReceiveEvent implements the EventsReceiver interface for BundledStates .
1414	ages returns the ages for all active states at the given time .
1415	Percentile returns the duration at the given time with the given percentile . Panics if the percentile is out of scope .
1416	NewMetrics returns a new instance of Metrics
1417	NewDiskCache wraps an http . RoundTripper with a disk - backed cache .
1418	NewMemCache creates a new http . RoundTripper that caches requests in memory .
1419	NewFromCache creates a new requestCoalescer using the given httpcache . Cache .
1420	ProwV1 retrieves the ProwV1Client
1421	Prow retrieves the ProwV1Client
1422	NewOwners creates a new Owners object .
1423	GetApprovers returns a map of all owners that have been approved .
1424	GetAllPotentialApprovers returns a list of all potential approvers .
1425	GetReverseMap returns a map from approver to ownersFile
1426	temporaryUnapprovedFiles returns the unapproved files for the given approvers .
1427	KeepCoveringApprovers returns the list of approvers that should be kept for relevance .
1428	GetSuggestedApprovers returns the set of approvers that are relevant to the given list of files .
1429	GetOwnersSet returns a set of all owners .
1430	GetShuffledApprovers returns a list of shuffled approvers
1431	String returns the Approval as a string .
1432	IntersectSetsCase returns the intersection of two sets .
1433	NewApprovers returns a new instance of Approvers .
1434	AddLGTMer adds an LGTM approval .
1435	RemoveApprover removes the approver for the given login .
1436	AddAssignees adds the given logins to the list of assignees .
1437	GetCurrentApproversSetCased returns the current approvers set cased
1438	GetFilesApprovers returns a map of all files that have been approved .
1439	NoIssueApprovers returns a map of approvers that have no issue .
1440	UnapprovedFiles returns a list of files that are not approved .
1441	GetFiles returns a list of files that are approved by the current user .
1442	IsApproved returns whether or not the Approvers are approved .
1443	ListApprovals returns a list of all currently approved approvals .
1444	ListNoIssueApprovals returns a list of no issue approvals
1445	GenerateTemplate generates a message template
1446	writeTemplate writes the template to the output path .
1447	Labels returns a list of all labels in the configuration .
1448	LabelsForTarget returns a list of labels that match the given target .
1449	LoadConfig loads a configuration from the given path .
1450	loadLabels loads labels from the given list of repositories .
1451	kill kills a label from a repository .
1452	create creates a new label in a repository .
1453	classifyLabels returns the required archaic and dead labels .
1454	linkify replaces spaces with hyphens with dashes .
1455	NewCache returns a new instance of Cache .
1456	KeyToPath returns the path to the given key .
1457	ensureDir creates a directory if it does not exist .
1458	Put stores the content into the cache . If contentSHA256 is empty the content will be copied to the temp file .
1459	Get returns the value for the given key . If the key does not exist a nil value is returned .
1460	Delete removes the key from the cache
1461	NewGCSArtifact creates a new GCS artifact .
1462	Size returns the size of the artifact .
1463	ReadAll reads all bytes from the artifact .
1464	ReadTail reads the last n bytes from the artifact .
1465	gzipped returns whether the artifact is gzipped .
1466	optionsForRepo returns the options for the given org and repo .
1467	List lists all ProwJobs in the indexer .
1468	ProwJobs returns an object that can list and get ProwJobs .
1469	List lists all ProwJobs in the indexer for a given namespace .
1470	RunsAgainstAllBranch returns true if the brancher runs against all branches .
1471	Intersects returns true if the given Brancher intersects the given Brancher .
1472	ShouldRun returns whether or not the RegexpChangeMatcher should run the given changes .
1473	RunsAgainstChanges returns true if the given list of changes matches the regular expression .
1474	CouldRun returns true if the postsubmit brancher should run .
1475	ShouldRun returns true if the postsubmit should run .
1476	CouldRun returns true if the brancher should run .
1477	ShouldRun returns whether or not the presubmit should run .
1478	GetPresubmit returns the presubmit for the given job in the given repository .
1479	SetPresubmits sets the Presubmits field of a JobConfig .
1480	SetPostsubmits sets a map of postsubmits
1481	AllPresubmits returns all presubmits in the given repos .
1482	AllPostsubmits returns all postsubmits for the given repos .
1483	AllPeriodics returns all Periodics in the JobConfig .
1484	ClearCompiledRegexes clears the compiled regexes on all presubmits .
1485	Empty returns true if the config is empty .
1486	NewClient returns a new instance of Client .
1487	ExpandAlias expands the given alias .
1488	ExpandAliases expands the given set of logins and returns the expanded set .
1489	ParseFullConfig parses a full config from a byte slice .
1490	ParseSimpleConfig parses a SimpleConfig from a byte slice .
1491	decodeOwnersMdConfig reads the metadata file at path and unmarshals it into config .
1492	findOwnersForFile finds the owner of the given file relative to the given path . If no owner is found an empty string is returned .
1493	FindApproverOwnersForFile returns the user who owns the given file .
1494	FindReviewersOwnersForFile finds the owners of the given file .
1495	FindLabelsForFile returns a set of labels for the given file .
1496	IsNoParentOwners returns true if the given path has no parent owners .
1497	Ratio returns the ratio of the coverage .
1498	FromPayload unmarshals PeriodicProwJobEvent from JSON
1499	ToMessage converts periodic prow job event to pubsub message
1500	UnmarshalText implements the encoding . TextUnmarshaler interface .
1501	compileApplicableBlockades takes a list of blockades and compiles them into a list of blockades .
1502	calculateBlocks returns a summary of blockade changes .
1503	MergeMultipleProfiles merges multiple profiles into a single profile .
1504	AddFlags adds flags related to the job to the specified FlagSet
1505	processNextItem processes the next item in the queue
1506	handleErr handles an error .
1507	AggregateFilter aggregates a set of filters into a single filter .
1508	FilterPresubmits returns a list of presubmits that should be triggered and a list of presubmits that should be skipped .
1509	MakeCommand creates a new cobra . Command for the filter command
1510	Push implements heap . Interface .
1511	Pop removes the element from the heap and returns it .
1512	NewFakeOpenPluginWrapper returns a new instance of FakeOpenPluginWrapper
1513	ReceiveIssue is part of the sql . IssuePlugin interface .
1514	Validate checks that the options are valid .
1515	Complete fills in the git refs and key files .
1516	Set sets the format
1517	ensure returns an error if the given binary is not installed
1518	output runs a command and returns its output .
1519	projects returns a list of all projects .
1520	selectProject asks the user to choose a project .
1521	createCluster creates a new cluster
1522	createContext creates a new context based on the specified options .
1523	contextConfig returns a clientcmd . ClientConfigLoader and a clientcmdapi . Config .
1524	selectContext selects a context based on the provided options .
1525	applyCreate runs kubectl create
1526	determineSkippedPresubmits determines which presubmits should be skipped .
1527	Dispatch dispatches issues and events to InfluxDB .
1528	CreateIssue creates a new GitHub issue .
1529	CreateStatus creates a new status for the given ref .
1530	ForEachPR lists all pull requests in a repository
1531	GetCollaborators returns a list of all collaborators in a repository .
1532	GetCombinedStatus returns the combined status for the given ref .
1533	GetIssues returns a list of all issues in a repository .
1534	GetRepoLabels returns a list of all labels for the given repository .
1535	GetUser retrieves a user by login .
1536	checkConfigValidity checks if the config is valid
1537	createSystemdLogfile creates a log file for a systemd service
1538	createFullSystemdLogfile creates the full systemd . log file
1539	createSystemdLogfiles creates the logs for all systemd services .
1540	prepareLogfiles returns a list of logfiles relevant to this node .
1541	writeSuccessMarkerFile writes the success marker file to GCS .
1542	MakeCommand creates a new cobra . Command for junit .
1543	warnDeprecated logs a warning if the current time is older than the specified frequency .
1544	Describe returns a human readable description of the require matching label .
1545	TriggerFor returns the trigger for the given org and repo .
1546	EnabledReposForPlugin returns a list of enabled repositories for the given plugin .
1547	EnabledReposForExternalPlugin returns a list of enabled repositories for an external plugin .
1548	SetDefaults sets the defaults for the ConfigUpdater
1549	validatePlugins returns an error if any of the plugins are invalid .
1550	ShouldReport returns true if the prow job should be reported .
1551	Run clones the given refs and returns a record .
1552	PathForRefs returns the path for the given refs .
1553	gitCtxForRefs creates a git context for the given refs .
1554	commandsForBaseRef returns a list of git commands for the base ref .
1555	gitTimestampEnvs returns a list of environment variables that can be used to set git timestamps .
1556	gitRevParse runs git rev - parse HEAD
1557	commandsForPullRefs returns a list of git commands for the given pull refs .
1558	ProduceCovList produces a coverage list from a list of profiles .
1559	popRandom returns a random string from a set .
1560	resolve resolves the ExperimentalKubernetesOptions .
1561	ProwJobClientset implements the OpenShift cli options ProwJobClientset interface .
1562	ProwJobClient implements the OpenShift cli ProwJobClient interface .
1563	InfrastructureClusterClient implements the OpenShift cli InfrastructureClusterClient interface
1564	BuildClusterClients returns a map of kubernetes build clusters
1565	Age returns the amount of time elapsed since the given time .
1566	ReceiveEvent returns the active state for the event with the given label .
1567	ReceiveEvent returns the active state for the event with the given label . If the event is not in the active state false is returned .
1568	Active returns true if all states are active .
1569	Age returns the minimum age of all states for the given time .
1570	ReceiveEvent implements the StateReceiver interface .
1571	ProwJobs returns a ProwJobInformer .
1572	ItemToResourcesConfig converts an Item to a ResourcesConfig .
1573	Copy returns a copy of the TypeToResources .
1574	MakeCommand creates a new cobra . Command for the aggregate command
1575	incrementNumPendingJobs increments the number of pending jobs for the given job .
1576	setPreviousReportState sets the previous state of the prow job
1577	SyncMetrics is used to sync the prow job metrics
1578	DumpProfile dumps a list of profiles to a writer .
1579	blocksEqual compares two profile blocks .
1580	NewProwJobInformer constructs a new informer for ProwJob type . Always prefer using an informer factory to get a shared informer instead of getting an independent one . This reduces memory footprint and number of connections to the server .
1581	NewFilteredProwJobInformer constructs a new informer for ProwJob type . Always prefer using an informer factory to get a shared informer instead of getting an independent one . This reduces memory footprint and number of connections to the server .
1582	New creates a new Spyglass .
1583	Lenses returns a list of all the artifacts that match the given matchCache .
1584	JobPath returns the path to the job .
1585	RunPath implements the Run method of the Spyglass interface
1586	ExtraLinks returns a list of extra links from the started . json file .
1587	needDemux returns a list of external plugins that need a demux .
1588	demuxExternal dispatches events to external plugins .
1589	dispatch performs a POST request to the given endpoint with the given payload and headers .
1590	AddFlags adds flags for the state plugin
1591	CheckFlags implements the plugin . Plugin interface .
1592	ReceiveIssueEvent returns the points for the given issue event .
1593	Load loads the config from the given prowConfig and jobConfig .
1594	loadConfig loads the prowConfig and jobConfig from the prowConfig and jobConfig .
1595	yamlToConfig reads the yaml file at the given path and unmarshals it into the given struct .
1596	ReadFileMaybeGZIP returns the contents of the given file if it is gzipped .
1597	finalizeJobConfig is used to finalize the job configuration .
1598	validateComponentConfig returns an error if the configuration is invalid .
1599	ConfigPath returns the default configuration path
1600	ValidateController validates the controller .
1601	defaultJobBase sets default values for the JobBase
1602	SetPresubmitRegexes sets the regexes for each presubmit
1603	setBrancherRegexes sets the regexes for the Brancher .
1604	SetPostsubmitRegexes sets the Brancher and RegexpChangeMatcher in the Postsubmit struct .
1605	Body returns the body of an image from the given list of artifacts .
1606	NewBoskosHandler returns a new http . ServeMux
1607	ErrorToStatus converts an error to a HTTP status code .
1608	DumpProfile dumps the profile to the specified destination .
1609	LoadProfile loads a profile from the specified filename . If origin is - it will read from stdin .
1610	NewClient creates a new git client .
1611	SetCredentials sets credentials for the client .
1612	Checkout checks out the given commitlike .
1613	CheckoutNewBranch creates a new branch in the repo .
1614	Merge performs a git merge for the given commitlike .
1615	CheckoutPullRequest checks out a pull request .
1616	Config sets the value of a git config key .
1617	retryCmd runs the command with the given arguments and returns the combined output .
1618	LabelsAndAnnotationsForSpec converts a prowapi . ProwJobSpec to labels and annotations .
1619	ProwJobToPod converts a prowapi . ProwJob to a coreapi . Pod
1620	CloneLogPath returns the path to the clone log file .
1621	cloneEnv creates a new set of environment variables from the given options .
1622	sshVolume returns a coreapi . Volume and a coreapi . VolumeMount .
1623	InjectEntrypoint injects an entrypoint to a container
1624	PlaceEntrypoint creates an entrypoint container
1625	kubeEnv returns a list of environment variables .
1626	Client returns a Kubernetes client based on the options .
1627	handle adds or removes the work - in - progress label if needed .
1628	SendHook sends the given payload to the given address .
1629	janitorClean runs the janitor command to clean up the resource .
1630	janitor runs a clean function on the resource buffer and releases the resource .
1631	Run starts the pull server .
1632	specToStarted converts a downwardapi . JobSpec to a gcs . Started .
1633	Run runs the options .
1634	hasPRChanged returns true if the pull request has changed .
1635	UpdateIssues updates all issues in the repository
1636	handleReviewEvent handles a review event .
1637	findAssociatedIssue returns the associated issue number for the given body .
1638	optionsForRepo returns the approve options for the given org and repo .
1639	localOnlyMain is the main entry point for the github login endpoint .
1640	summarize summarizes the number of covered and all statements in the coverage list .
1641	Subset returns a subset of all coverage groups .
1642	ListDirectories returns a list of all directories in the CoverageList .
1643	readRequest reads the request from the given io . Reader .
1644	handle reads the request body and writes the response .
1645	writeResponse writes the response to the writer .
1646	onlyUpdateStatus returns a response if the update is a status update .
1647	convertSuiteMeta converts a SuitesMeta to a resultstore . Suite .
1648	NewHealth returns a new instance of Health .
1649	ServeReady serves the ready status
1650	NewController creates a new Controller .
1651	newExpectedContext creates a new expected context .
1652	contextsToStrings converts a slice of contexts to a slice of strings .
1653	filterSubpools returns a filtered set of subpools .
1654	filterSubpool returns a new subpool with prs removed from the subpool .
1655	poolPRMap returns a map of pull requests for each subpool .
1656	unsuccessfulContexts returns a list of contexts that failed to validate .
1657	accumulate returns successes pendings and nones for the given presubmits .
1658	tryMerge tries to perform a merge . It returns true if the merge was successful and false otherwise .
1659	prChanges returns the list of changed files for the given pull request .
1660	prune removes all changed files from the change cache .
1661	dividePool divides a list of pull requests into subpools .
1662	AggregateProfiles aggregates a set of profiles into a single set of profiles .
1663	countToBoolean returns a copy of the profile with the count set to 1 .
1664	NewStorage creates a new storage instance
1665	AddResource adds a resource to the storage .
1666	DeleteResource deletes the named resource .
1667	UpdateResource updates a resource .
1668	GetResource returns the resource with the given name .
1669	GetResources returns a list of all resources in the storage .
1670	SyncResources is used to sync a set of resources
1671	ParseConfig parses a Boskos config file into a list of common . Resource
1672	problemsInFiles returns the set of problems in the given files .
1673	NewPodLogArtifact creates a new pod log artifact .
1674	CanonicalLink returns the canonical URL of the artifact .
1675	ReadAt is part of the io . ReaderAt interface .
1676	ReadAll reads the contents of the pod log artifact .
1677	ReadAtMost reads at most n bytes from the pod log artifact
1678	ReadTail reads the tail of the pod log artifact
1679	newProblems takes a list of comments and returns a map of path to lint . Problem .
1680	problemsInFiles returns a map of problems in the given files .
1681	undoPreset undoes a preset .
1682	undoPresubmitPresets undoes a set of presubmit presets .
1683	yamlBytesStripNulls removes any null characters from the YAML bytes .
1684	monitorDiskAndEvict is a long lived goroutine that monitors disk usage and evicts up to the specified number of blocks .
1685	difference returns the difference between c and c2 .
1686	union returns the union of c and c2 .
1687	clearStaleComments removes stale release notes from the given pull request .
1688	determineReleaseNoteLabel returns the release note label for the given body .
1689	getReleaseNote returns the release note from the given body .
1690	NewClient creates a new Boskos client .
1691	Acquire acquires a resource with the given type and state .
1692	ReleaseOne releases one resource
1693	UpdateAll updates the basic state of all clients .
1694	GetGitHubClient returns a new github client .
1695	GetUsername returns the username of the user .
1696	CreateTokenHandler creates a token handler .
1697	CreateTokenHandlers creates a list of token handlers from a list of token files .
1698	String returns a string representation of the jobIndentifier .
1699	TerminateOlderPresubmitJobs is a helper function that will terminate jobs that are not in a presubmit state . It will terminate jobs that are not in a presubmit state .
1700	PushMetrics is a long running goroutine that will push metrics to the specified endpoint .
1701	RateLimiter returns a rate limiter for the given controllerName .
1702	checkExistingStatus returns the status of an existing pull request .
1703	checkExistingLabels checks if there are any existing labels for an issue .
1704	handle is the main entry point for a pull request .
1705	MarkdownSHAList returns a string representation of a list of git commits .
1706	PathForSpec returns the path for the given job spec .
1707	AliasForSpec returns the alias for the given job spec .
1708	RootForSpec returns the root directory for the given job spec .
1709	NewSingleDefaultRepoPathBuilder returns a RepoPathBuilder for a single default org and repo .
1710	NewExplicitRepoPathBuilder returns a RepoPathBuilder .
1711	RegisterSourceOrDie registers an issue source . If the source is already registered this function will exit .
1712	CreateAndSync creates and synchronizes issues from all sources .
1713	loadCache loads the issue creator cache from the API server .
1714	setIntersect returns the elements in a that are not in b .
1715	sync checks to see if the given issue is in the list of open and closed issues . If the issue is not in the list it returns false .
1716	GetAWSCreds returns the AWS credentials for the given resource .
1717	stopper returns a channel that is closed when an interrupt or SIGTERM is received .
1718	newPipelineConfig returns a new instance of pipelineConfig .
1719	KubeClient returns a Kubernetes client
1720	ProwJobClient returns a client for the prow job API .
1721	resolveSymLink returns the prefix of the given symLink .
1722	readJSON reads a JSON object from storage .
1723	listSubDirs returns a list of all directories under a given prefix .
1724	listAll returns a list of all the objects with the given prefix .
1725	listBuildIDs lists all build IDs in the GCS bucket .
1726	FilterProfilePaths filters profile paths based on include .
1727	LoadSecrets loads secrets from the given paths .
1728	LoadSingleSecret loads a single secret from disk
1729	Set implements the flag . Value interface .
1730	NewOpener creates a new GCP opener
1731	IsNotExist returns true if the error indicates that the object does not exist .
1732	LogClose closes the io . Closer and logs any errors .
1733	Writer returns an io . WriteCloser for the given path .
1734	InitGitHubOAuthConfig initializes GitHubOAuthConfig
1735	deltaDisplayed returns a human - readable representation of the delta .
1736	makeTable creates a table of changes between baseCovList and newCovList .
1737	ContentForGitHubPost returns the content for a GitHub post .
1738	AddFlags adds client specific flags to the command
1739	CheckFlags returns an error if the org and project are not set .
1740	getGitHubClient returns a github client
1741	limitsCheckAndWait checks if the rate limit is reached and sleeps for a minute
1742	FetchIssues returns all issues updated since the given latest time .
1743	hasID returns true if an issue event with the given id exists .
1744	FetchIssueEvents fetches issue events from Github .
1745	isPRChanged returns true if the pull request has changed .
1746	NewFetcher creates a new Fetcher .
1747	fetchRecentIssues fetches the most recent issues from the repository .
1748	fetchRecentEventsAndComments fetches most recent events and comments from the repository .
1749	Fetch fetches the most recent issues and events and comments .
1750	Issues returns a list of flaky jobs .
1751	Title returns a human - readable description of the flaky job
1752	Labels returns a list of labels for the flaky job .
1753	ReadHTTP is a wrapper around http . Get that retries until an error occurs .
1754	String returns a string representation of the lines by timestamp .
1755	NewJobSpec creates a new JobSpec from a prowapi . ProwJobSpec
1756	ResolveSpecFromEnv resolves the JobSpec from the environment variable JobSpecEnv .
1757	EnvForSpec returns a map of environment variables for the given job spec .
1758	EnvForType returns a list of environment variables for the given job type .
1759	getRevisionFromRef returns the SHA of the first pull or the BaseRef .
1760	GetRevisionFromSpec returns the revision of the job .
1761	helpProvider returns the help for the plugin .
1762	load populates the group from the given io . Reader .
1763	loadPaths loads all paths from r into g . Paths .
1764	Match checks if the given path is in the group .
1765	CreateDatabase creates a new InfluxDB database .
1766	mergeTags merges defaultTags with extraTags .
1767	tagsToWhere converts a map of tags to a WHERE clause .
1768	Push adds a new point to the batch .
1769	artifact returns a pod log artifact .
1770	serve starts the metrics server .
1771	gather is a long lived goroutine that periodically collects metrics .
1772	makeRequest builds a BranchProtectionRequest from a branchprotection . Policy .
1773	makeReviews converts a branchprotection . ReviewPolicy to a github . RequiredPullRequestReviews .
1774	Header returns the header for the given artifacts .
1775	Callback executes the line group template .
1776	logLinesAll returns all log lines from the artifact .
1777	executeTemplate executes the given template with the given data .
1778	DeepCopyObject returns a deep copy of the receiver .
1779	FromItem converts a common . Item to a ResourceObject
1780	SetItems sets a list of ResourceObjects .
1781	DeepCopyObject returns a deep copy of the receiver .
1782	useContext runs kubeadm config use - context
1783	currentContext returns the current configuration context .
1784	command is a wrapper around exec . Command .
1785	describeCluster returns a description of a cluster .
1786	Set implements the flag . Value interface .
1787	parseXML parses the contents of an object into a gcsDir .
1788	Render renders the directory .
1789	Render renders the record to the response writer .
1790	Render renders the prefix icon .
1791	Printf is part of the txnLogger interface .
1792	NewClient creates a new gerrit client .
1793	SetReview implements gerrit . Client . SetReview .
1794	GetBranchRevision returns the revision of a branch .
1795	queryAllChanges returns all changes for all projects .
1796	NewTypeFilterWrapperPlugin creates a new TypeFilterWrapperPlugin .
1797	AddFlags adds flags related to TypeFilterWrapperPlugin
1798	CheckFlags returns an error if both pull - requests and issues are set .
1799	AddFlags adds flags related to KubernetesClient for controller manager to the specified FlagSet
1800	Validate validates the KubernetesClientOptions .
1801	Client returns a Kubernetes client for the given type .
1802	newCRDClient creates a new CRD client for the given type .
1803	createRESTConfig creates a REST config based on the given kubeconfig .
1804	registerResource creates a new CRD for the given type .
1805	newDummyClient creates a new dummyClient .
1806	Update updates an existing object .
1807	TrustedPullRequest returns a list of labels that can be used to trust a pull request .
1808	buildAll runs all the jobs in the given pull request .
1809	Run executes the options and returns the number of errors encountered .
1810	AddConfig adds a resource config to the storage .
1811	DeleteConfig implements Storage . DeleteConfig .
1812	UpdateConfig implements storage . Interface .
1813	GetConfig is defined on the Storage interface .
1814	GetConfigs implements storage . Interface . GetConfigs .
1815	SyncConfigs synchronizes the current configs with the new configs .
1816	addKnownTypes adds known types to scheme .
1817	NewController returns a new instance of Controller .
1818	Run starts the status - reconciler .
1819	addedBlockingPresubmits adds new blocking presubmits to the old presubmits .
1820	removedBlockingPresubmits returns a map of presubmits that were removed from the new map .
1821	migratedBlockingPresubmits returns a map of repository name to list of blocking presubmits .
1822	Load loads the config from the environment .
1823	canExecuteConcurrently returns true if the job can be executed concurrently .
1824	getJenkinsJobs converts a slice of prowapi . ProwJobs to a slice of BuildQueryParams .
1825	terminateDupes takes a list of prowapi . ProwJobs and returns an error if there are duplicate prowapi . PresubmitJobs .
1826	Throttle will throttle the client to the specified number of tokens . If hourlyTokens < = 0 or burst < = 0 no throttling is performed .
1827	NewClientWithFields creates a new client with the given fields .
1828	NewClient creates a new graphql client
1829	NewDryRunClient creates a new DryRun Client
1830	NewFakeClient creates a new fake github client
1831	request sends the request and unmarshals the response into the value pointed to by ret .
1832	requestRaw performs the request and returns the response code and body .
1833	getUserData retrieves the current user data .
1834	readPaginatedResultsWithValues performs a GET request to the given path with the given values and accumulates the results into newObj .
1835	UpdatePullRequest updates a pull request .
1836	getLabels returns a list of labels at the given path .
1837	stateCannotBeChangedOrOriginalError returns the original error if the error is a StateCannotBeChanged error .
1838	IsMergeable checks if a pull request is mergeable .
1839	Token returns the current access token .
1840	ListArtifacts returns a list of all artifacts for the given source
1841	KeyToJob converts a key src to a job name and build ID .
1842	prowToGCS converts a prow key to a GCS path .
1843	FetchArtifacts returns a list of artifacts for the given src .
1844	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new DecorationConfig .
1845	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new GCSConfiguration .
1846	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new JenkinsSpec .
1847	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new ProwJob .
1848	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new ProwJobList .
1849	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new ProwJobSpec .
1850	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new ProwJobStatus .
1851	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new Pull .
1852	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new Refs .
1853	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new UtilityImages .
1854	upload uploads an invocation target and test to the result store .
1855	ApplyDefault merges the given DecorationConfig with the given default .
1856	Validate checks that the DecorationConfig is valid .
1857	ApplyDefault returns a copy of u with the default values set .
1858	ApplyDefault merges the default GCSConfiguration with the given one .
1859	Validate validates the GCSConfiguration .
1860	ClusterAlias returns the cluster alias for the job .
1861	NewResource creates a new resource .
1862	NewResourcesFromConfig creates a list of resources from a ResourceEntry .
1863	UserDataFromMap creates a UserData from a UserDataMap
1864	Set implements flag . Value interface .
1865	UnmarshalJSON implements the json . Unmarshaler interface .
1866	Extract implements the Extractor interface .
1867	Set implements the Set method of the UserData interface .
1868	Update updates this user data with new data .
1869	ToMap converts this UserData to a UserDataMap
1870	FromMap creates a UserData from a UserDataMap
1871	ItemToResource converts Item to Resource .
1872	Run executes the prowapi clone command .
1873	addSSHKeys adds ssh keys to the given paths .
1874	Issues returns a list of top - level clusters .
1875	loadClusters loads clusters from json .
1876	parseTriageData parses triage data .
1877	topClusters returns a slice of top count clusters .
1878	topJobsFailed returns the top count failed jobs in the cluster .
1879	Title returns a human - readable description of the cluster .
1880	Labels returns a list of labels for the cluster .
1881	New returns a new Cron instance .
1882	QueuedJobs returns a list of all queued jobs .
1883	HasJob checks if a cron job exists
1884	addJob adds a new job to the cron agent .
1885	removeJob removes a job from the cron agent .
1886	UpdateComments updates the issue s comments .
1887	GatherProwJobMetrics collects metrics for each prow job
1888	optionOrDefault returns the given option or the default value if the option is zero .
1889	newGCSJobSource creates a new gcsJobSource .
1890	artifacts returns a list of all artifacts for a given job .
1891	canonicalLink returns the canonical link to the job .
1892	jobPath returns the path to the job .
1893	targetURL returns the target URL for the pull request .
1894	newBuildConfig creates a new buildConfig .
1895	NewClient creates a new Github client .
1896	retry will retry the call until a rate limit is reached .
1897	depaginate returns a list of items that match the given criteria .
1898	NewHelpAgent creates a new plugin help agent .
1899	GeneratePluginHelp generates help for all plugins and external plugins .
1900	getPullCommitHash returns the hash of the pull commit .
1901	listJobBuilds returns a list of all builds for the given jobPrefixes .
1902	getPRBuildData returns the build data for each job in the given bucket .
1903	getGCSDirsForPR returns a map of GCS directories for the given PR in the given config .
1904	imageDeleteFromDisk deletes the image file from disk
1905	doNetworksCreate creates a network .
1906	networkLoadByName loads a network by name .
1907	Transaction executes the given function in a transaction .
1908	ForLocalInspectionWithPreparedStmts is a wrapper around Cluster . PrepareStmts .
1909	SetDefaultTimeout sets the default timeout for the cluster
1910	Transaction performs a single transaction on the cluster .
1911	EnterExclusive acquires an exclusive lock on the cluster db .
1912	ExitExclusive is part of the Cluster interface .
1913	Close closes the cluster .
1914	TxCommit commits the transaction .
1915	ParseRemote parses a remote string and returns the default remote if the remote doesn t exist
1916	GetContainerServer returns the lxd . ContainerServer for the given remote .
1917	GetImageServer returns a lxd . ImageServer for the specified remote .
1918	initAppArmor initializes the apparmor state
1919	appArmorCanStack returns true if the apparmor stack is enabled .
1920	containerDeviceAdd adds a device to a container .
1921	profileDeviceAdd adds a device to the profile .
1922	ensureImageAliases ensures the image aliases are created .
1923	GetExistingAliases returns an array of existing image aliases .
1924	String returns the string representation of the StatusCode .
1925	ImagesGetExpired returns a list of images that have expired .
1926	ImageSourceInsert inserts an image source to the cluster .
1927	ImageSourceGet returns information about an image source .
1928	ImageExists checks if an image with the given fingerprint exists in the given project .
1929	ImageGet returns the image for the specified project . If the project does not have images then the default project is used .
1930	ImageGetFromAnyProject returns the image with the given fingerprint . Returns ErrNoSuchObject if the image doesn t exist .
1931	imageFill fills the given image with values from the image_properties table .
1932	ImageLocate returns the local image address for the given fingerprint .
1933	ImageAssociateNode associates an image with a node .
1934	ImageDelete deletes an image from the cluster .
1935	ImageAliasesGet returns the list of image aliases for the specified project .
1936	ImageAliasGet returns the id of an image alias for the given project and name .
1937	ImageAliasRename renames an image alias .
1938	ImageAliasDelete removes an image alias from a project .
1939	ImageAliasesMove moves an image alias from source to destination .
1940	ImageAliasAdd adds an image alias to a project .
1941	ImageAliasUpdate updates an image alias .
1942	ImageLastAccessUpdate updates the last_use_date of the image with the given fingerprint .
1943	ImageLastAccessInit sets cached = 1 and last_use_date = today
1944	ImageUpdate updates an image .
1945	ImageInsert creates a new image in the cluster .
1946	ImageGetPools returns a list of storage pools for the given image fingerprint .
1947	ImageGetPoolNamesFromIDs returns a list of pool names from a list of pool IDs .
1948	ImageUploadedAt updates the upload_date of the image with the given id .
1949	ImagesGetOnCurrentNode returns all images on the current node
1950	ImagesGetByNodeID returns a map of image fingerprints to project names .
1951	ImageGetNodesWithImage returns a list of nodes with image fingerprint
1952	ImageGetNodesWithoutImage returns a list of nodes with the given image fingerprint .
1953	Add adds a new task to the group .
1954	Start starts all tasks in the group .
1955	zfsIsEnabled returns true if zfs is enabled .
1956	zfsToolVersionGet returns the version of the zfs tool .
1957	zfsModuleVersionGet returns the current ZFS module version .
1958	zfsPoolVolumeCreate creates a zfs pool volume .
1959	zfsPoolVolumeExists checks if a zfs pool volume exists .
1960	NetworkIDsNotPending is a part of the Cluster interface .
1961	NetworkConfigAdd is a part of the Network interface .
1962	NetworkNodeJoin is used to join a network node .
1963	NetworkCreatePending creates a network with the given name in the pending state .
1964	NetworkCreated is part of the Network interface .
1965	NetworkErrored marks a network as errored .
1966	NetworkGet returns a network by name . Returns ErrNoSuchObject if no such network exists .
1967	networkNodes returns a list of nodes in a network .
1968	NetworkGetInterface returns the network with the given interface name .
1969	NetworkConfigGet returns the configuration for the network with the given id .
1970	NetworkCreate creates a new network in the cluster .
1971	NetworkUpdate updates the description of a network .
1972	NetworkUpdateDescription updates the description of a network .
1973	NetworkConfigClear clears the network configuration for the specified node .
1974	NetworkDelete deletes a network from the cluster .
1975	NetworkRename renames a network .
1976	GetContainers returns a list of all containers
1977	GetContainersFull returns a list of all containers .
1978	GetContainer retrieves a container by name .
1979	CreateContainerFromBackup creates a container from a backup file .
1980	CreateContainer creates a new container
1981	CreateContainerFromImage creates a container from an image
1982	UpdateContainer updates an existing container .
1983	RenameContainer renames a container
1984	ExecContainer executes a container .
1985	GetContainerFile gets a file from a container .
1986	CreateContainerFile creates a file in a container
1987	DeleteContainerFile deletes a file from a container
1988	GetContainerSnapshotNames returns the names of all the snapshots of a container
1989	GetContainerSnapshots returns a list of all the snapshots of a container
1990	GetContainerSnapshot returns a snapshot of a container .
1991	CreateContainerSnapshot creates a container snapshot
1992	MigrateContainerSnapshot asks for a rename through a container snapshot
1993	UpdateContainerSnapshot updates a container snapshot
1994	GetContainerState returns the state of a container .
1995	UpdateContainerState updates the state of a container .
1996	GetContainerLogfiles returns a list of all logfiles in a container .
1997	GetContainerLogfile returns the contents of a container s log file .
1998	GetContainerMetadata returns the metadata for a container
1999	SetContainerMetadata updates the metadata for a container
2000	GetContainerTemplateFiles returns the list of template files for a container
2001	CreateContainerTemplateFile creates a container template file
2002	DeleteContainerTemplateFile deletes a container template file
2003	ConsoleContainer is used to create a new console container
2004	GetContainerConsoleLog gets the console log for a container .
2005	DeleteContainerConsoleLog deletes the console log for a container .
2006	GetContainerBackups returns a list of all the backups for a container
2007	GetContainerBackup retrieves a container backup
2008	CreateContainerBackup creates a container backup
2009	RenameContainerBackup renames a container backup
2010	DeleteContainerBackup deletes a container backup
2011	GetContainerBackupFile downloads a backup file from a container
2012	RsyncSend performs a rsync send
2013	patchesGetNames returns the names of all patches .
2014	patchRenameCustomVolumeLVs handles the case where we want to rename a custom LV to a custom LV .
2015	patchLvmNodeSpecificConfigKeys patches the lvm node specific config keys
2016	GetHTTPClient returns the underlying http . Client
2017	do sends the request to the bakery client .
2018	RawQuery is the same as RawQuery except it returns the response and the ETag
2019	RawWebsocket is a convenience wrapper around websocket . RawWebsocket .
2020	RawOperation implements the RawOperation method of the ProtocolLXD interface .
2021	ProfileToAPI converts a profile to an api . Profile .
2022	Profiles returns a list of profiles for the specified project . If the project does not have profiles the default project will be used .
2023	ProfileGet returns the profile for the specified project and name . If the profile is not found the default project is used .
2024	ProfilesGet returns a list of profiles for the specified project .
2025	ProfileConfig returns the profile configuration for the specified project and name .
2026	ProfileConfigClear clears the profile_config table for the given profile_id .
2027	ProfileConfigAdd adds a new profile config to the database .
2028	ProfileContainersGet returns the list of containers for a given project and profile .
2029	ProfileCleanupLeftover removes all profiles that have been removed from the database .
2030	ProfilesExpandConfig expands profiles in a config map .
2031	ProfilesExpandDevices expands devices from profiles to devices .
2032	GetServer returns the current LXD server .
2033	UpdateServer updates an existing server .
2034	HasExtension returns true if the LXD server has the specified extension .
2035	GetServerResources returns the resources for the LXD server
2036	UseProject returns a new LXD container server that uses the specified project .
2037	sqliteOpen opens the database at the given path .
2038	Rebalance is used to rebalance the Raft cluster .
2039	Promote is used to promote a node to a database node .
2040	Purge removes a node from the database .
2041	List returns a list of all nodes in the cluster .
2042	Count returns the number of nodes in the cluster .
2043	Enabled returns true if the node is enabled .
2044	membershipCheckNodeStateForBootstrapOrJoin checks if the node is in a bootstrap or join state .
2045	membershipCheckClusterStateForBootstrapOrJoin checks that the cluster state is consistent .
2046	membershipCheckClusterStateForAccept returns an error if the cluster has a node with the given name and address .
2047	membershipCheckClusterStateForLeave returns an error if the node is not in the cluster .
2048	membershipCheckNoLeftoverClusterCert returns an error if there is a cluster certificate in the given directory .
2049	ConfigLoad is used to load the node config from the database .
2050	Replace replaces all values in the config with the given values .
2051	Patch returns a copy of the configuration with the given values .
2052	HTTPSAddress returns the HTTPS address of the node .
2053	CertificatesGet returns a list of all certificates in the cluster .
2054	CertificateGet returns the certificate with the given fingerprint .
2055	CertSave saves a certificate to the database .
2056	CertDelete removes a certificate from the cluster .
2057	CertUpdate updates a certificate .
2058	createDevLxdlListener creates a devlxd listener .
2059	Servers is part of the Instance interface .
2060	Shutdown shuts down the raft instance .
2061	raftNetworkTransport returns a raft . Transport that is used to connect to a raft node .
2062	raftConfig returns a raft . Config with the given latency .
2063	raftMaybeBootstrap is used to bootstrap the raft cluster .
2064	CPUResource returns the CPU resource information .
2065	MemoryResource returns the memory usage of the system .
2066	GetOperationUUIDs returns a list of operation UUIDs
2067	GetOperations returns a list of all operations on the LXD cluster
2068	GetOperation returns the operation with the given UUID .
2069	GetOperationWebsocket returns a websocket connection to an operation .
2070	tryMount attempts to mount src to dst using syscall . Mount .
2071	lxdUsesPool returns true if lxd uses a storage pool with the given name and driver .
2072	ProjectURIs is part of the Cluster interface .
2073	ProjectList returns a list of projects that match the given filter .
2074	ProjectGet fetches a single project by name . Returns ErrNoSuchObject if no such project exists .
2075	ProjectExists is part of the Cluster interface .
2076	ProjectCreate creates a new project . Returns the ID of the newly created project .
2077	ProjectUsedByRef is the same as ProjectUsedByRef except it takes a ProjectFilter .
2078	ProjectRename renames a project .
2079	ProjectDelete deletes a project .
2080	PasswordCheck checks if a password is valid
2081	LoadCert loads a TLS certificate from the given directory .
2082	WriteCert writes the given cert and key to the given directory .
2083	NewDaemon creates a new daemon .
2084	DefaultDaemon creates a default daemon .
2085	AllowProjectPermission allows a user to perform a specific permission on a project .
2086	checkTrustedClient checks if the client is trusted
2087	Authenticate checks to see if the request is allowed to authenticate with the daemon .
2088	State returns the current state of the daemon .
2089	UnixSocket returns the path to the unix socket .
2090	Stop shuts down the daemon .
2091	setupExternalAuthentication is used to setup external authentication
2092	initializeDbObject initializes the database object .
2093	WriteJSON writes a JSON - encoded body to the http . ResponseWriter .
2094	EtagHash returns the Etag hash of the given data .
2095	EtagCheck checks if the ETag in the request matches the ETag in the request .
2096	HTTPClient creates a new http . Client with the given certificate and proxy .
2097	IsRecursionRequest checks if the request is a recursion request .
2098	GetListeners returns a slice of listeners starting at start .
2099	internalSQLGet returns the SQL dump for the given database .
2100	internalSQLPost executes an internal SQL query .
2101	PublicKey returns the public key of the certificate .
2102	PrivateKey returns the private key of the certificate .
2103	Fingerprint returns the fingerprint of the certificate .
2104	GenCert generates a new certificate and key file .
2105	PrintServerInfo prints information about the container server .
2106	LaunchContainers launches the specified number of containers on the given container server .
2107	CreateContainers creates the specified number of containers in the container server .
2108	GetContainers returns a list of all the containers in the container server .
2109	StartContainers starts a batch of containers .
2110	setQueryParam adds a query parameter to a URI .
2111	GetImages returns a list of all images on the LXD cluster .
2112	GetImageFile returns the image file for the given fingerprint .
2113	GetImageSecret returns the secret for an image
2114	GetPrivateImage retrieves a private image
2115	GetPrivateImageFile downloads a private image file
2116	GetImageAliases returns a list of all image aliases
2117	tryCopyImage attempts to copy an image from the source server to the target server . If the target server isn t listening on the network an error is returned .
2118	CopyImage copies an image from the source server to the target server .
2119	UpdateImage updates an image
2120	DeleteImage deletes the image with the given fingerprint .
2121	RefreshImage refreshes the image with the given fingerprint
2122	CreateImageAlias creates an image alias
2123	UpdateImageAlias updates an image alias
2124	RenameImageAlias renames an image alias
2125	DeleteImageAlias deletes an image alias
2126	Open opens the local database in the given directory .
2127	EnsureSchema ensures that the local database schema is up - to - date .
2128	FilesystemDetect returns the filesystem type for the given path .
2129	Schema returns the current schema .
2130	updateFromV37 updates the cluster configuration from V37 .
2131	ArchitectureGetLocal returns the current operating system architecture .
2132	NewController returns a new instance of Controller .
2133	CreateContainer creates a container with the given interfaces .
2134	DefinedContainer returns true if the container is defined .
2135	UpdateContainer updates the container with the given interfaces .
2136	RenameContainer renames a container
2137	DeleteContainer deletes a container
2138	Add adds an update to the schema .
2139	ensureSchemaTableExists ensures that the schema table exists .
2140	queryCurrentVersion returns the current schema version .
2141	ensureUpdatesAreApplied ensures that the provided updates are applied .
2142	checkSchemaVersionsHaveNoHoles returns an error if the schema versions have no holes .
2143	checkAllUpdatesAreApplied checks that all the given updates are applied .
2144	formatSQL returns a string representation of the SQL statement .
2145	GetAllXattr returns all extended attributes for a given path .
2146	GetErrno returns the errno of the given error .
2147	Uname returns the current system s Utsname .
2148	RegisterStmt registers a new SQL statement .
2149	PrepareStmts returns a map of prepared statements .
2150	NewGateway creates a new DQLite gateway .
2151	DialFunc returns a function that can be used to establish a connection to the DQLite gateway .
2152	Shutdown shuts down the gateway .
2153	Sync syncs the database to disk .
2154	Reset resets the gateway with the given certificate .
2155	LeaderAddress returns the address of the leader node .
2156	waitLeadership waits for the gateway to become leader .
2157	currentRaftNodes returns the current raft nodes .
2158	cachedRaftNodes returns the cached raft nodes .
2159	dqliteMemoryDial returns a DialFunc that can be used to connect to the dqlite memory server .
2160	DqliteLog logs a message in the DQLite log .
2161	MetadataAsMap returns the response metadata as a map .
2162	MetadataAsOperation returns the response metadata as an Operation .
2163	MetadataAsStringSlice returns the response metadata as a slice of strings .
2164	MetadataAsStruct returns the response metadata as a struct
2165	Load reads the CSV report file .
2166	Write writes the report to a file .
2167	AddRecord adds a new record to the CSV report .
2168	LoadConfig loads the configuration file at the given path .
2169	SaveConfig saves the configuration to the given path .
2170	Get returns the contents of the file at the given path .
2171	ConfigPath returns the path to the configuration file .
2172	ServerCertPath returns the path to the certificate file for the given remote .
2173	NewConfig returns a new instance of Config .
2174	checkForPreDumpSupport checks if we should use pre - dump support .
2175	preDumpLoop performs a pre - dump of the container .
2176	newRoot returns the root command for the lxd - generate command
2177	APIExtensionsCount returns the number of API extensions .
2178	SelectURIs is a convenience wrapper around the sql . Query function .
2179	SelectStrings is a convenience wrapper around the gorp . SelectSingleColumn function .
2180	scanSingleColumn scans a single column of a table .
2181	LazyHandler returns a Handler that evaluates lazy log records .
2182	Callers returns a slice of all runtime . Callers .
2183	name returns the name of the function .
2184	TrimBelow removes the call pc from pcs and returns it .
2185	TrimAbove trims the trace up to but not including pc .
2186	TrimBelowName removes all traces below the given name .
2187	TrimAboveName removes all traces below the given name .
2188	TrimRuntime removes the runtime from the trace .
2189	GetCaps returns the security . capability attribute for the given path .
2190	SetCaps sets the capabilities on a namespace .
2191	Read implements the io . Reader interface .
2192	Supported returns true if the quota device for the given path is supported .
2193	GetProject returns the project id for the given path .
2194	SetProject sets the quota path for the given project id .
2195	DeleteProject deletes a project .
2196	GetProjectUsage returns the quota usage for a given project .
2197	SetProjectQuota sets the quota for the given id on the given path .
2198	backupLoadByName loads a backup from the database by name .
2199	backupCreate creates a backup with the given name .
2200	Rename renames the backup to a new name .
2201	Delete deletes the backup .
2202	backupFixStoragePool is used to fix the storage pool
2203	Count returns the number of rows in a table that match the given condition .
2204	CountAll counts all the tables in the database .
2205	InitTLSConfig initializes the TLS configuration .
2206	copyContainerThinpool copies the source container to the target container .
2207	copyContainerLv copies a container from source to target .
2208	copyContainer copies a container from source to target .
2209	copyVolume copies a volume from source to target .
2210	GetPrivateImage is part of the Protocol interface .
2211	GetPrivateImageFile implements the Protocol interface
2212	GetImageAliasNames returns a list of image aliases
2213	ProtoRecv reads the next message from the websocket and unmarshals it into msg .
2214	ProtoSend sends a proto message to the websocket .
2215	ProtoSendControl sends a control message to the websocket .
2216	Read implements the io . Reader interface .
2217	doContainersGetFromNode returns a list of containers from a node .
2218	Retry will retry a function until an error is returned .
2219	IsRetriableError returns true if the given error is a retryable error .
2220	AppArmorProfile returns the current apparmor profile .
2221	StoragePoolVolumeCreate creates a BTRFS storage volume on the storage pool .
2222	ContainerStorageReady returns true if the container is a btrfs subvolume .
2223	ContainerCreateFromImage implements storage . Volume . ContainerCreateFromImage .
2224	ContainerSnapshotRename renames the storage volume for a snapshot .
2225	ContainerSnapshotCreateEmpty creates the empty btrfs volume for the given snapshot container .
2226	btrfsSubVolumesDelete deletes all subvolumes under a given path .
2227	isBtrfsSubVolume returns true if the given path is a btrfs subvolume .
2228	SelectConfig is a convenience wrapper around sql . Tx . SelectConfig .
2229	UpdateConfig updates the values of a config table .
2230	deleteConfig deletes the given config keys from the given table .
2231	FormatSection returns a string representation of a section .
2232	GetProjects returns a list of all projects in the LXD cluster
2233	GetProject returns the project with the given name .
2234	CreateProject creates a new project
2235	UpdateProject updates an existing project .
2236	RenameProject renames a project
2237	Read implements the io . Reader interface .
2238	Write writes p to the underlying io . Writer .
2239	NewCanceler creates a new Canceler .
2240	Cancelable returns true if the Canceler is cancelable .
2241	Cancel cancels all pending requests .
2242	CancelableDownload performs a download request with a canceler .
2243	clusterGet returns information about the cluster .
2244	clusterGetMemberConfig returns a list of all storage pools and networks .
2245	clusterPutDisable is used to disable the cluster
2246	tryClusterRebalance attempts to rebalance the cluster .
2247	internalClusterPostRebalance is used to rebalance the cluster .
2248	internalClusterPostPromote is used to promote a node to the cluster .
2249	Filters returns a list of filters for the given entity .
2250	Parse parses a struct declaration in the given package .
2251	findStruct looks up a struct type by name .
2252	parseStruct parses a struct and returns a list of fields .
2253	GetProfileNames returns a list of profile names
2254	GetProfiles returns a list of all profiles
2255	GetProfile returns the profile with the given name .
2256	CreateProfile creates a new profile
2257	UpdateProfile updates an existing profile .
2258	RenameProfile renames a profile
2259	Load creates a new Map from the given values .
2260	Dump returns a map of all the values in the map .
2261	GetRaw returns the raw value of a key .
2262	GetString returns the string value of a key .
2263	GetBool gets the bool value from the map .
2264	GetInt64 gets the value of a key as int64 . Panics if the key is not of type Int64 .
2265	update updates the map with the given values and returns the names of changed values .
2266	set sets the value for the given key .
2267	DoesSchemaTableExist checks if the schema table exists in the database .
2268	selectSchemaVersions returns a list of all the versions in the schema ordered by version .
2269	selectTablesSQL returns the SQL statements for all the tables in the database .
2270	createSchemaTable creates the schema table .
2271	insertSchemaVersion inserts a new version number into the database .
2272	NewState creates a new State .
2273	containerLXCUnload unloads the containerLXC .
2274	containerLXCInstantiate creates a new containerLXC .
2275	initStorage initializes the storage pool for the container .
2276	OnNetworkUp implements the LXC interface .
2277	setupHostVethDevice sets the host side veth device
2278	getLxcState returns the LXC state of the container .
2279	StorageStartSensitive implements storage . Container . StorageStartSensitive .
2280	deviceExistsInDevicesFolder checks if a device exists in the devices folder
2281	createDiskDevice creates a new disk device
2282	setNetworkRoutes sets the network routes for the given device
2283	Path returns the path to the container .
2284	maasInterfaces returns all the network interfaces in the container .
2285	getSystemHandler returns a handler for the given syslog level .
2286	findNvidiaMinor returns the minor number of the nvidia device .
2287	GetLogger creates a new logger .
2288	SetLogger returns an argument that sets the logger .
2289	WaitRecord blocks until the channel is closed or the timeout is reached . Returns nil if the channel is closed .
2290	AddContext adds a context to a logger .
2291	NewDottedVersion creates a new DottedVersion from a version string .
2292	Parse parses a version string into a dotted version .
2293	String returns a string representation of a DottedVersion .
2294	Compare compares two dotted versions .
2295	projectCreateDefaultProfile creates the default profile for the given project .
2296	projectChange changes the configuration of a project .
2297	projectIsEmpty returns true if the project is empty .
2298	GetCertificateFingerprints returns a list of all the certificate fingerprints
2299	GetCertificates returns a list of all certificates
2300	GetCertificate retrieves a single certificate by fingerprint .
2301	CreateCertificate creates a new certificate
2302	UpdateCertificate updates an existing certificate
2303	DeleteCertificate deletes a single certificate
2304	containerMetadataTemplatesGet returns a list of templates for a container .
2305	containerMetadataTemplatesPostPut handles the PUT request of metadata templates for a container .
2306	containerMetadataTemplatesDelete deletes a template from a container .
2307	getContainerTemplatePath returns the path to the template file in the container .
2308	Error implements the error interface for Error .
2309	Error implements the error interface for ErrorList .
2310	add adds an error to the ErrorList .
2311	UpdateSchema updates the cluster and node database schema
2312	doProfileUpdateCluster updates a profile in a cluster .
2313	doProfileUpdateContainer updates the profile of a container .
2314	getProfileContainersInfo returns all the containers with the specified profile .
2315	GetNetworkNames returns a list of network names
2316	GetNetworks returns a list of all available networks
2317	GetNetwork returns the network with the given name .
2318	GetNetworkLeases returns a list of all network leases
2319	GetNetworkState returns the state of a network .
2320	CreateNetwork creates a new network
2321	UpdateNetwork updates an existing network .
2322	RenameNetwork renames a network
2323	Open opens the cluster database .
2324	URLEncode encodes the given path with the given query parameters .
2325	IsUnixSocket checks if the given path is a unix socket
2326	HostPath returns the hostfs path for the given path .
2327	FileMove moves a file from oldPath to newPath .
2328	DirCopy copies the contents of source directory to destination directory .
2329	StringMapHasStringKey checks if a string map has a key
2330	TextEditor returns the contents of a text editor . If inPath is empty a temporary file is created .
2331	WriteTempFile writes content to a temporary file in the given directory with the given prefix .
2332	RenderTemplate renders the given template with the given context .
2333	Every returns a schedule that runs every interval .
2334	StoragePoolMount implements storage . Lvm interface .
2335	Dump returns a dump of the given schema .
2336	dumpTable dumps the contents of a table into a string .
2337	ProjectHasProfiles is a small function wrapper around ProjectHasProfiles .
2338	ProjectNames is part of the Cluster interface .
2339	ProjectMap is part of the Cluster interface .
2340	ProjectHasImages returns true if the specified project has images enabled .
2341	ProjectUpdate is part of the Cluster interface .
2342	GetCluster returns the current cluster
2343	UpdateCluster is used to update a cluster
2344	GetClusterMemberNames returns a list of cluster member names
2345	GetClusterMembers returns a list of all cluster members
2346	GetClusterMember returns a cluster member by name .
2347	RenameClusterMember renames a cluster member
2348	Disconnect removes the listener from the list of registered listeners .
2349	CompareVersions compares two versions .
2350	HasClientCertificate returns true if the client . crt and client . key files exist .
2351	GenerateClientCertificate generates a client certificate if it doesn t exist .
2352	LoadModule loads a module from the system .
2353	Parse parses a Go package .
2354	PprofAddress returns the address of the pprof listener .
2355	PprofUpdateAddress updates the endpoint s pprof address .
2356	NewMethod creates a new method .
2357	Generate generates the generated code for the method .
2358	fillSliceReferenceField generates code to fill a slice reference field .
2359	StoragePoolID is a part of the Cluster interface .
2360	StoragePoolIDsNotPending is a part of the Cluster interface .
2361	StoragePoolNodeJoin is used when a node joins a storage pool .
2362	StoragePoolNodeJoinCeph is used to join a node with a ceph pool .
2363	StoragePoolConfigAdd is used to add a new storage pool config to a node .
2364	StoragePoolCreatePending creates a new storage pool in the cluster .
2365	StoragePoolCreated is part of the Cluster interface .
2366	StoragePoolErrored marks a storage pool as errored .
2367	StoragePoolNodeConfigs is a part of the Cluster interface .
2368	StoragePoolsGetDrivers returns a list of all available storage drivers .
2369	StoragePoolGetID returns the ID of the storage pool with the given name .
2370	StoragePoolGet returns a storage pool by name . Returns ErrNoSuchObject if the storage pool does not exist .
2371	storagePoolNodes returns a list of nodes in a storage pool .
2372	StoragePoolConfigGet returns the storage_pool_config for the given pool .
2373	StoragePoolCreate creates a new storage pool in the cluster .
2374	storagePoolConfigAdd adds the given key - value pair to the storage_pools_config table .
2375	StoragePoolUpdate updates the description of a storage pool .
2376	StoragePoolConfigClear clears the storage_pool_config table for the given pool and node .
2377	StoragePoolDelete deletes a storage pool
2378	StoragePoolVolumesGetNames returns the names of all storage volumes in a storage pool .
2379	StoragePoolVolumesGet returns a list of all storage volumes for a given project and pool .
2380	StoragePoolNodeVolumesGet returns a list of storage volumes for a node .
2381	storagePoolVolumesGet returns a list of storage volumes for a given project pool ID and node ID .
2382	StoragePoolVolumesGetType returns a list of storage volumes for a given node .
2383	StoragePoolVolumeSnapshotsGetType returns a list of snapshots for a given volume
2384	StoragePoolNodeVolumesGetType returns a list of volume types for a storage pool node .
2385	StoragePoolVolumeGetType returns a storage volume by name and type .
2386	StoragePoolNodeVolumeGetType returns the type of a storage volume
2387	StoragePoolNodeVolumeGetTypeByProject is a wrapper for StoragePoolVolumeGetType .
2388	StoragePoolVolumeUpdate updates a storage pool volume .
2389	StoragePoolVolumeDelete deletes a storage volume .
2390	StoragePoolVolumeRename renames a storage volume .
2391	storagePoolVolumeReplicateIfCeph replicates a ceph volume if the driver is ceph .
2392	StoragePoolVolumeCreate creates a new storage volume on the cluster .
2393	StoragePoolVolumeGetTypeID returns the ID of the specified volume in a storage pool .
2394	StoragePoolNodeVolumeGetTypeID returns the ID of a storage volume of the specified type
2395	StoragePoolVolumeTypeToName converts a storage volume type to its name .
2396	DevicesAdd adds a new device to the database .
2397	Devices returns a list of devices for a given project .
2398	Patches returns a list of all patches in the node .
2399	PatchesMarkApplied marks the given patch as being applied .
2400	entityType returns the type of the entity .
2401	entityPost returns the post name for the given entity .
2402	stmtCodeVar returns the variable name for the given entity kind and filters .
2403	destFunc returns a function that can be used to create a slice of fields .
2404	CompareConfigs compares config1 with config2 and returns an error if the keys in config1 do not match config2 .
2405	CopyConfig returns a copy of the given config
2406	NewNotifier returns a new container server notifier .
2407	Events returns a function that updates the list of listeners .
2408	eventsConnect establishes a connection to the LXD cluster and returns the list of events .
2409	StoragePoolInit initializes the storage pool
2410	getAAProfileContent returns the content of the apparmor profile .
2411	AALoadProfile loads the apparmor profile for the container .
2412	AADestroy destroys an apparmor container
2413	AAParseProfile parses the apparmor profile .
2414	getSystemHandler returns the system log handler .
2415	NotifyUpgradeCompleted notifies the container server of a completed upgrade .
2416	KeepUpdated returns a function that will run when the state is updated .
2417	maybeUpdate checks if the cluster node is up - to - date and if so runs the LXD_CLUSTER_UPDATE environment variable .
2418	NewServer returns a new instance of Server .
2419	StartStatusCheck starts the status check goroutine .
2420	SyncProjects syncs projects to RBAC .
2421	AddProject adds a project to RBAC .
2422	DeleteProject deletes the project with the given id .
2423	RenameProject renames a project .
2424	IsAdmin returns true if the given user has admin access .
2425	HasPermission returns true if the user has the specified permission on the specified project .
2426	rsyncSend is a wrapper around rsyncSendSetup .
2427	rsyncSendSetup is used to setup the rsync process .
2428	tlsClientConfig creates a tls . Config based on the cert info .
2429	tlsCheckCert checks if the certificate is trusted .
2430	internalClusterContainerMovedPost is the handler for a cluster container moved request .
2431	containerPostCreateContainerMountPoint creates the mount point for the moved container .
2432	Contains returns true if the given device is in the list .
2433	Update takes a list of Devices and updates the list with the new list of Devices and updates the list with the new list of Devices .
2434	DeviceNames returns a sorted list of device names .
2435	Infof logs an info message .
2436	Debugf logs a message at debug level .
2437	Warnf logs a message at Warn level .
2438	Errorf logs an error message
2439	Critf logs a message at critical level .
2440	eventForward forwards an event to the node .
2441	StorageProgressReader returns an io . ReadCloser that tracks the progress of the given operation .
2442	StorageProgressWriter returns an io . WriteCloser that tracks the progress of the given operation .
2443	GetLSBRelease returns the lsb - release
2444	Reset resets the server environment .
2445	Append will append a snippet to a file at the given path . If path is - it will append to stdout .
2446	ContainerToArgs converts container to args .
2447	ContainerNames returns a list of all the containers in a project .
2448	ContainerNodeAddress is the same as ContainerNode but returns the address of the first node associated with the container .
2449	ContainersListByNodeAddress is a part of the Cluster interface .
2450	ContainerListExpanded is a part of the Cluster interface .
2451	ContainersByNodeName is a part of the Cluster interface .
2452	SnapshotIDsAndNames returns a map of snapshot IDs and names .
2453	ContainerNodeList is part of the Cluster interface .
2454	ContainerNodeProjectList is a part of the Cluster interface .
2455	ContainerRemove removes a container from the cluster .
2456	ContainerProjectAndName returns the project and name of a container .
2457	ContainerConfigClear removes all data associated with the given container from the database .
2458	ContainerConfigGet returns the value of the specified key in the specified container .
2459	ContainerConfigRemove removes the given key from the containers_config table .
2460	ContainerSetStateful sets the stateful state of a container .
2461	ContainerProfilesInsert adds multiple profiles to a container .
2462	ContainerProfiles returns a list of profiles assigned to a container .
2463	ContainerConfig returns the container s configuration .
2464	ContainerSetState sets the container s power state .
2465	ContainerUpdate updates an existing container .
2466	ContainerLastUsedUpdate updates the last_use_date of a container .
2467	ContainerGetSnapshots returns a list of all snapshots for a given project and name .
2468	ContainerGetSnapshotsFull returns a list of all the snapshots of a project .
2469	ContainerNextSnapshot returns the index of the next snapshot
2470	ContainerPool is part of the Cluster interface .
2471	ContainerGetBackup returns the details of a container backup .
2472	ContainerGetBackups returns the list of backups for a container
2473	ContainerBackupCreate creates a container backup
2474	ContainerBackupRemove removes a container backup
2475	ContainerBackupRename renames a container backup
2476	ContainerBackupsGetExpired returns the list of containers backups that have expired .
2477	DefaultOS returns a default OS .
2478	Init initializes the OS .
2479	GetWebsocket returns a websocket connection to the operation .
2480	Refresh refreshes the operation .
2481	CancelTarget cancels the target operation .
2482	GetTarget returns the target operation
2483	up sets up the endpoints .
2484	Down shuts down the endpoints .
2485	serveHTTP starts a new HTTP server for the given kind .
2486	closeListener closes the listener for the given kind .
2487	activatedListeners returns a map of listener kind to net . Listener .
2488	CandidServer returns the candid . api . url candid . api . key expiry and domains
2489	RBACServer returns the RBAC server
2490	AutoUpdateInterval returns the auto_update_interval setting .
2491	MAASController returns the URL and key for the MAAS controller .
2492	OfflineThreshold returns the cluster s offline_threshold value .
2493	ConfigGetString returns the string value of a given key .
2494	ConfigGetBool returns the bool value for a given key .
2495	ConfigGetInt64 returns the int64 value stored at key .
2496	ClusterAddress returns the address of the listener .
2497	Debug logs a debug message .
2498	RestServer returns a REST server for the daemon .
2499	projectParam returns the project parameter from the request . If not set the default project is returned .
2500	queryParam returns the value of the query parameter with the given key .
2501	newDb returns a new instance of the db command
2502	Description returns a human - readable description of the operation .
2503	Permission returns the permission for the operation .
2504	OperationsUUIDs is part of the Cluster interface .
2505	OperationNodes is a part of the Cluster interface .
2506	OperationByUUID is part of the ClusterTx interface .
2507	OperationAdd adds an operation to the cluster .
2508	OperationRemove is part of the ClusterTx interface .
2509	operations returns all operations in the cluster .
2510	expireLogsTask creates a task that will expire the logs in the cluster .
2511	absPath returns the absolute path of the given path .
2512	Keys returns a sorted list of all keys in the schema .
2513	Defaults returns the default values for the schema .
2514	mustGetKey returns a key from the schema or panics if the key does not exist .
2515	assertKeyType panics if the given key name does not have the given type code .
2516	validate returns an error if the value is invalid .
2517	GetStoragePoolVolumes returns a list of all the volumes in the specified storage pool
2518	GetStoragePoolVolume retrieves a storage volume by name
2519	CreateStoragePoolVolume creates a new storage volume on the specified storage pool
2520	CreateStoragePoolVolumeSnapshot creates a new volume snapshot on the specified storage pool
2521	GetStoragePoolVolumeSnapshots returns a list of all the snapshots for a given volume
2522	GetStoragePoolVolumeSnapshot retrieves a snapshot of a volume on a storage pool
2523	UpdateStoragePoolVolumeSnapshot updates a storage volume snapshot
2524	MigrateStoragePoolVolume asks the server for a rename through MigrateStoragePoolVolume
2525	MoveStoragePoolVolume moves a storage volume from source to source pool .
2526	UpdateStoragePoolVolume updates a storage volume
2527	DeleteStoragePoolVolume removes a volume from a storage pool
2528	RenameStoragePoolVolume renames a storage volume
2529	doStoragePoolCreateInternal creates a storage pool .
2530	containerGetParentAndSnapshotName gets the parent and snapshot name from a container name .
2531	containerLoadFromAllProjects loads all containers in all projects .
2532	containerLoadNodeAll loads all containers from the cluster .
2533	containerLoadNodeProjectAll loads all containers for a given project .
2534	heartbeatNode sends a heartbeat request to the given address .
2535	dotPrefixMatch returns true if the dot prefix matches the full command .
2536	ContainerMount mounts a container .
2537	ContainerStorageReady implements storage . Zfs . ContainerStorageReady .
2538	AskChoice asks the user for a choice .
2539	AskInt asks the user for an integer . If min or max is - 1 then return the default value . If max is - 1 then return the default value .
2540	AskString asks the user for a string and returns the answer .
2541	AskPassword asks the user for a question .
2542	AskPasswordOnce asks the user for a password .
2543	askQuestion asks the user for a question and returns the default answer .
2544	readAnswer reads a single line from stdin and returns it as a string . If an empty line is received defaultAnswer is returned .
2545	profilePost posts a profile to a project .
2546	profileDelete deletes a profile .
2547	IsRootDiskDevice returns true if the device is a root disk device
2548	GetRootDiskDevice returns the name of the first root disk device in the given map .
2549	ForwardedResponse returns a response for the given request .
2550	ForwardedResponseIfTargetIsRemote returns a response if the target is a remote node .
2551	ForwardedResponseIfContainerIsRemote returns a response if the container is a remote container .
2552	ForwardedOperationResponse returns a response for the given operation .
2553	Done marks the progress bar as done .
2554	Update updates the progress bar with the given status .
2555	Warn prints a warning message .
2556	UpdateProgress updates the progress bar .
2557	UpdateOp updates the progress bar for the given operation .
2558	updateFromV6 removes zfs pools and nodes from the database .
2559	localCreateListener creates a unix socket listener at the given path .
2560	NewStmt creates a new statement .
2561	Generate generates the statement .
2562	register adds a register statement to the generated code .
2563	httpsLXD creates a new LXD container server .
2564	IsActive returns true if the container is active .
2565	RaftNodeAddress returns the address of the Raft node with the given id . If no match is found ErrNoSuchObject is returned .
2566	RaftNodeFirst is used to set the Raft node ID to 1 .
2567	RaftNodeAdd adds a node to the raft_nodes table .
2568	RaftNodeDelete removes a Raft node from the store .
2569	RaftNodesReplace is used to replace a set of RaftNodes .
2570	initCGroup initializes the CGroup flags .
2571	sqliteDirectAccess is a wrapper around sqlite3 . SQLiteConn .
2572	ContainerGet returns a single container .
2573	ContainerID is part of the ClusterTx interface .
2574	ContainerExists is part of the ClusterTx interface .
2575	ContainsFields returns true if the mapping contains all of the given fields .
2576	FieldByName returns the field with the given name .
2577	FieldColumnName returns the column name for a field .
2578	FilterFieldByName returns the field with the given name or an error if the field does not exist .
2579	ColumnFields returns all column fields .
2580	ScalarFields returns all scalar fields in the mapping .
2581	RefFields returns a slice of all the fields in the mapping .
2582	Column returns the column name of the field .
2583	ZeroValue returns the zero value of the field .
2584	FieldColumns returns a comma - separated list of field names .
2585	FieldArgs returns a comma - separated list of arguments for the given fields .
2586	FieldParams returns a comma - separated list of field names .
2587	FieldCriteria returns the field criteria for the given fields .
2588	initDataClusterApply applies the cluster configuration to the container server .
2589	JsonFormatEx returns a Format that formats records as JSON .
2590	formatLogfmtValue returns a string representation of the given value .
2591	ResolveTarget returns the address of the target node in the cluster .
2592	Write implements the io . Writer interface .
2593	updateNodeVersion updates the schema and api_extensions for a node .
2594	selectNodesVersions returns the versions of the nodes in the database .
2595	GetArchitectures returns a list of available architectures .
2596	RuntimeLiblxcVersionAtLeast returns true if the golxc version is at least major . minor . micro .
2597	GetExecPath returns the path to the executable .
2598	Connect connects to a LXD cluster .
2599	ConnectIfContainerIsRemote connects to the container server if the container is remote .
2600	ConnectIfVolumeIsRemote returns a container server if the volume is remote .
2601	SetupTrust creates a new client certificate in the trust store .
2602	GetStoragePools returns a list of all available storage pools
2603	GetStoragePool returns a storage pool by name .
2604	CreateStoragePool creates a new storage pool
2605	UpdateStoragePool updates a storage pool
2606	DeleteStoragePool deletes a storage pool
2607	GetStoragePoolResources returns the resources of a storage pool
2608	initDirs initializes the directories for the OS .
2609	Config is a part of the walletdb . Tx interface .
2610	UpdateConfig is part of the walletdb . Tx interface .
2611	Config is part of the database . Tx interface .
2612	UpdateConfig is part of the Cluster interface .
2613	storagePoolClusterConfigForEtag returns the config for the storage pool cluster .
2614	GetEvents returns a new EventListener .
2615	LogfmtFormat returns a log . Format that formats log records using Logfmt .
2616	StorageVolumeNodeAddresses is a part of the Cluster interface .
2617	StorageVolumeNodeGet returns the node name of a storage volume .
2618	StorageVolumeConfigGet returns the storage volume configuration for a given volume ID .
2619	StorageVolumeDescriptionGet returns the description of a storage volume .
2620	StorageVolumeIsAvailable returns true if the given volume is available on the given storage pool .
2621	StorageVolumeDescriptionUpdate updates the description of a storage volume .
2622	StorageVolumeConfigAdd adds the given volume config to the storage_volumes_config table .
2623	StorageVolumeConfigClear clears the storage volume configuration .
2624	storageVolumeIDsGet returns a list of storage volume IDs .
2625	StorageVolumeCleanupImages deletes storage volumes with the given fingerprints .
2626	StorageVolumeMoveToLVMThinPoolNameKey moves volume . lvm . thinpool_name to lvm . thinpool_name
2627	L is a convenience wrapper around fmt . Fprintf .
2628	code returns the generated code .
2629	Pretty returns a pretty - printed JSON representation of the input .
2630	NetworkPublicKey returns the public key of the endpoint .
2631	NetworkPrivateKey returns the private key of the endpoint .
2632	NetworkCert returns the endpoint s network certificate .
2633	NetworkAddress returns the address of the listener .
2634	NetworkUpdateAddress updates the endpoint s network address .
2635	NetworkUpdateCert updates the endpoint s certificate .
2636	networkCreateListener creates a net . Listener
2637	Accept implements net . Listener . Accept .
2638	Config sets the TLS configuration for the listener .
2639	IsOffline returns true if the node is offline .
2640	NodeByAddress returns the node with the given address or ErrNoSuchObject if no such node exists .
2641	NodePendingByAddress is part of the Cluster interface .
2642	NodeByName returns the node with the given name or ErrNoSuchObject if no such node exists .
2643	NodeName is part of the Cluster interface .
2644	NodeAddress is part of the Cluster interface .
2645	NodeIsOutdated is part of the Cluster interface .
2646	NodesCount returns the number of nodes in the cluster .
2647	NodeRename is used to rename a node .
2648	nodes returns the list of nodes in the cluster .
2649	NodeAdd adds a new node to the cluster . Returns the new node ID .
2650	NodePending is part of the Cluster interface .
2651	NodeUpdate is part of the Cluster interface .
2652	NodeRemove is part of the Cluster interface .
2653	NodeHeartbeat is part of the Cluster interface .
2654	NodeIsEmpty is part of the Cluster interface .
2655	NodeClear removes all containers and images for a given node .
2656	NodeOfflineThreshold is part of the Cluster interface .
2657	NodeUpdateVersion is used to update the schema and api_extensions of a node .
2658	Transaction executes f in a transaction . If f returns sql . ErrTxDone the transaction is rolled back .
2659	rollback rolls back the transaction with the given reason .
2660	ProfileURIs returns the URIs of profiles that match the given filter .
2661	ProfileGet fetches a single profile .
2662	ProfileExists is part of the Cluster interface .
2663	ProfileConfigRef is a convenience wrapper around profileConfigRefByProjectAndName .
2664	ProfileUsedByRef is the same as ProfileUsedByRef except it returns a map of project name - > value pairs .
2665	ProfileCreate creates a profile . Returns the ID of the newly created profile or an error .
2666	ProfileRename renames a profile .
2667	ProfileDelete deletes a profile .
2668	ServerTLSConfig returns the TLS configuration for the server .
2669	NetworkInterfaceAddress returns the first non - loopback interface address .
2670	IsAddressCovered returns true if address1 is covered by address2 .
2671	SelectObjects is a convenience wrapper around sql . SelectObjects .
2672	DeleteObject deletes the given object from the given table . Returns true if the object was deleted .
2673	loop runs the task until the context is done .
2674	IsTerminal returns true if the given file descriptor is a terminal .
2675	socketUnixListen is a wrapper around net . ListenUnix .
2676	socketUnixRemoveStale removes a stale unix socket if it exists .
2677	socketUnixSetPermissions sets the permissions on the given path .
2678	socketUnixSetOwnership sets the ownership of the given path on the local socket .
2679	cephOSDPoolExists checks if the given osd pool exists
2680	cephOSDPoolDestroy destroys an osd pool
2681	cephRBDVolumeExists checks if a ceph RBD volume exists
2682	cephRBDSnapshotProtect protect RBD snapshot
2683	cephRBDCloneCreate creates a new RBD clone
2684	cephRBDSnapshotListClones returns a list of clones for a given volume
2685	cephRBDVolumeMarkDeleted deletes a ceph RBD volume .
2686	cephRBDVolumeUnmarkDeleted unmarks a RBD volume as deleted .
2687	cephRBDVolumeRename renames a RBD volume .
2688	cephRBDVolumeSnapshotRename renames a snapshot of a volume
2689	cephRBDSnapshotDelete deletes an RBD snapshot
2690	cephRBDVolumeCopy copy a volume
2691	cephRBDVolumeListSnapshots list volume snapshots
2692	getRBDSize returns the RBD size of the volume .
2693	getRBDFilesystem returns the filesystem to use for the block device .
2694	copyWithoutSnapshotsFull creates a non - sparse copy of RBD storage volume without snapshots .
2695	copyWithoutSnapshotsSparse creates a sparse copy of RBD storage volume without snapshots .
2696	GetConfigCmd returns the current auth configuration
2697	SetConfigCmd returns the set config command
2698	NewSharder returns a new Sharder .
2699	NewRouter creates a new gRPC router .
2700	renewUserCredentials renews the admin and user credentials .
2701	NewLocalClient creates a new local client
2702	AddSpanToAnyExisting adds a new span to an existing context .
2703	InstallJaegerTracerFromEnv installs a new Jaeger Tracer from environment variables .
2704	UnaryClientInterceptor returns a new UnaryClientInterceptor .
2705	StreamClientInterceptor returns a new StreamClientInterceptor .
2706	UnaryServerInterceptor returns a new UnaryServerInterceptor .
2707	StreamServerInterceptor returns a new streaming server interceptor .
2708	CloseAndReportTraces closes the global trace and reports all traces .
2709	newWriter creates a new Writer .
2710	For sets the maximum amount of time to wait before giving up .
2711	Log implements the logrus . Logger interface .
2712	Format implements logrus . Formatter .
2713	NewGRPCLogWriter creates a new instance of the GRPCLogWriter
2714	Read reads the config from disk . If no config file is found an empty string is generated .
2715	Write writes the configuration to disk .
2716	Read reads a proto . Message from the reader .
2717	Write writes val to the underlying io . Writer .
2718	NewReadWriter returns a new ReadWriter .
2719	RunGitHookServer runs the git hook server .
2720	newLoggingPipe creates a new loggingPipe .
2721	Read implements the io . Reader interface .
2722	Write implements the io . Writer interface .
2723	Accept implements net . Listener .
2724	Close closes the listener .
2725	errorf returns a new hashTreeError .
2726	InitWithKube initializes the service environment with the given configuration .
2727	GetEtcdClient returns the service env s etcd client .
2728	GetKubeClient returns the underlying kubernetes client
2729	NewHasher creates a new Hasher .
2730	HashJob returns the hash of a job ID .
2731	HashPipeline returns the hash of the pipeline name
2732	Status returns the status of all workers in a pipeline
2733	Cancel cancels a job
2734	Conns returns a list of gRPC connections for a given pipeline .
2735	Clients returns a list of clients for the given pipeline .
2736	NewClient creates a new PPS client .
2737	RunFixedArgs returns a function to run a fixed number of arguments .
2738	RunBoundedArgs returns an error if the number of arguments is less than min or the number of arguments is greater than max
2739	Run is a wrapper for cobra . Command . Run
2740	ErrorAndExit prints an error message to os . Stderr
2741	ParseCommit parses a commit string into a pfs . Commit .
2742	ParseBranch parses a git branch string into a pfs . Branch .
2743	ParseFile parses a pfs . File argument into a pfs . File .
2744	Set implements the flag . Value interface .
2745	SetDocsUsage sets the usage string for the docs command
2746	makeCronCommits creates commits for a cron job .
2747	Writer implements the ObjectClient Writer method .
2748	Reader tracingObjClient . Reader
2749	Delete implements the http . ObjectClient Delete method
2750	Walk implements the Walk method of the ObjectClient interface
2751	Exists implements the http . ObjectClient Exists method .
2752	GetBlock returns a block from a hash .
2753	Health returns the health of the server .
2754	split splits a path into its directory and base components .
2755	ValidatePath returns an error if the given path is invalid .
2756	MatchDatum returns true if the filter matches the data .
2757	NewCacheServer creates a new cache server .
2758	authorizePipelineOp is used to authorize a pipeline operation .
2759	sudo calls f with a superuser token .
2760	setPipelineDefaults sets the default values for all inputs in the pipeline .
2761	incrementGCGeneration increments the gc generation
2762	NewDebugServer creates a new debug server
2763	Health is part of the APIClient interface .
2764	newObjBlockAPIServer creates a new instance of objBlockAPIServer .
2765	watchGC watches for changes to GC generation number .
2766	splitKey returns the key with the generation number .
2767	NewWriter creates a new tabwriter with the given header .
2768	Write writes buf to the underlying writer .
2769	PrintRepoHeader prints the header of the repository .
2770	PrintRepoInfo prints information about the repository .
2771	PrintDetailedRepoInfo prints information about a repository .
2772	PrintBranch prints the branch name to the given writer .
2773	PrintCommitInfo prints the commit info to the given writer .
2774	PrintDetailedCommitInfo prints detailed information about a commit .
2775	PrintFileInfo prints a pfs . FileInfo to the given writer .
2776	PrintDetailedFileInfo prints a detailed information about a file .
2777	Add returns a string containing the given string with the given number of ancestors .
2778	RetryNotify will retry the operation until a Stop is reached . If notify is non - nil it will be called with the error of the operation .
2779	Get retrieves an item from the cache and writes it to the writer .
2780	Delete removes an item from the merge cache .
2781	PrintJobInfo prints the job info to the given writer .
2782	PrintPipelineInfo prints the pipeline name and input to the given writer .
2783	PrintWorkerStatus prints the worker status to the given writer .
2784	PrintDetailedJobInfo prints detailed information about a job .
2785	PrintDetailedPipelineInfo prints detailed information about a pipeline .
2786	PrintDatumInfo prints the datum info to the writer .
2787	PrintDetailedDatumInfo prints information about a single datum .
2788	PrintFile prints a file to the given writer .
2789	ShorthandInput returns the input as a string .
2790	Retrieve retrieves credentials from vault .
2791	IsExpired returns true if the vault credentials provider has expired .
2792	NewBranch creates a new branch .
2793	NewCommit creates a new commit .
2794	NewCommitProvenance creates a new CommitProvenance .
2795	NewFile creates a new pfs . File .
2796	CreateRepo creates a new repository .
2797	InspectRepo returns information about a repository .
2798	ListRepo returns a list of all repositories .
2799	DeleteRepo deletes a repository .
2800	BuildCommit is part of the pfs . Client interface .
2801	StartCommitParent starts the parent commit of a repository .
2802	FinishCommit is part of the CommitAPIClient interface
2803	InspectCommit returns information about a single commit .
2804	BlockCommit returns information about a block commit .
2805	ListCommit lists all commits in a repository .
2806	ListCommitF is a convenience wrapper around ListCommitStream .
2807	ListCommitByRepo lists all commits in a repository .
2808	CreateBranch creates a new branch in a repository .
2809	InspectBranch returns information about a branch in a repository .
2810	ListBranch returns a list of branches in a repository .
2811	SetBranch creates a new branch in a repository .
2812	DeleteBranch deletes a branch from a repository .
2813	DeleteCommit deletes a commit from a repository .
2814	FlushCommit implements pfs . PFSAPIClient . FlushCommit
2815	FlushCommitF is a convenience wrapper around PfsAPIClient . FlushCommit .
2816	FlushCommitAll is a convenience wrapper around FlushCommitF .
2817	SubscribeCommit implements pfs . PfsAPIClient . SubscribeCommit
2818	SubscribeCommitF creates a stream of commits and calls f for each commit .
2819	PutObjectAsync creates a new PutObjectWriteCloserAsync with the specified tags .
2820	PutObject is part of the pfs . APIClient interface .
2821	PutObjectSplit is part of the pfs . APIClient interface .
2822	GetObject is a wrapper around ObjectAPIClient . GetObject
2823	GetObjectReader returns an io . ReadCloser for the given hash .
2824	GetObjects implements ObjectAPIClient . GetObjects
2825	TagObject adds tags to an object .
2826	ListObject implements pfs . ObjectAPIClient . ListObject
2827	InspectObject implements ObjectAPIClient . InspectObject
2828	GetTag calls ObjectAPIClient . GetTag and writes the result to writer .
2829	GetTagReader implements pfs . ObjectAPIClient . GetTag
2830	ListTag implements pfs . ObjectAPIClient . ListTags
2831	Compact calls ObjectAPIClient . Compact
2832	NewPutFileClient returns a new PutFileClient .
2833	PutFileOverwrite implements pfs . PutFileClient .
2834	Close is part of the PutFileClient interface .
2835	CopyFile copies a file from one repository to another .
2836	GetFile retrieves a file from a repository .
2837	GetFileReader returns an io . Reader for the given file .
2838	GetFileReadSeeker returns an io . ReadSeeker for a file in a given commit .
2839	InspectFile returns information about a file in a repository .
2840	ListFile lists all files in a commit .
2841	ListFileHistory returns a list of files in a given commit .
2842	ListFileF implements pfs . ListFileClient .
2843	Walk calls pfs . WalkFile .
2844	DeleteFile deletes a file from a repository .
2845	Write is part of the io . Writer interface .
2846	Close closes the PutObjectWriteCloserAsync .
2847	PrettyPrintVersionNoAdditional returns a string representation of a version without additional information .
2848	recursiveBlockQuoteExamples adds the block quote examples to the parent command
2849	errMissingField returns an error indicating that a required field is missing
2850	validateFields returns an error if any of the provided fields are unknown .
2851	putConfig is used to write the configuration to the storage
2852	getConfig retrieves the current configuration from the storage .
2853	Serve starts a new gRPC server .
2854	NewPuller creates a new Puller .
2855	PullTree pulls hashes from a hashtree . HashTree
2856	Push pushes a commit to a repository .
2857	PushObj pushs a commit object to the given root .
2858	PushFile pushes a file to the remote .
2859	Dump is part of the DebugClient interface .
2860	Profile sends a profile to the given writer .
2861	Binary is part of the APIClient interface .
2862	RegisterCacheStats registers prometheus metric for cache stats .
2863	wait blocks until the counter reaches n times .
2864	RunWorkload runs a workload .
2865	createRepo creates a new repo and starts a commit .
2866	advanceCommit advances the worker to the next commit .
2867	RandString generates a random string of length n .
2868	NewReader returns a new io . Reader with the given number of bytes .
2869	iterDir calls f for each key - value pair in the directory at path .
2870	FSSize implements the billy . HashTree interface .
2871	Diff implements the Diff method of the HashTree interface .
2872	Serialize writes the hash tree to an io . Writer .
2873	Deserialize deserializes the hash tree from the given io . Reader .
2874	Copy returns a copy of the hash tree .
2875	Destroy closes the hash tree and removes the file .
2876	PutFileOverwrite implements the billy . File interface for dbHashTree .
2877	PutDirHeaderFooter adds a header and a footer to a directory .
2878	PutFileHeaderFooter is part of the pfs . HashTree interface .
2879	deleteDir deletes the directory at the given path .
2880	NewReader returns a new Reader that reads from the given io . Reader .
2881	Read reads a merge node from the reader .
2882	NewWriter returns a new Writer that writes to w .
2883	Write writes a MergeNode to the buffer .
2884	Copy reads from r and writes the result to w .
2885	Index returns the index as a byte slice .
2886	GetRangeFromIndex returns the range of bytes in the index starting at the given prefix .
2887	NewFilter creates a filter that returns true if the given number of trees is equal to the given tree .
2888	PathToTree returns the number of trees in the given path .
2889	Merge merges a set of readers into a single writer .
2890	Hash returns the hash of the tree .
2891	IsGlob returns true if pattern is a glob pattern .
2892	GlobLiteralPrefix returns the prefix of a glob pattern .
2893	GetHashTreeObject returns a HashTree for the given treeRef .
2894	GetHashTreeTag returns the hash tree for the given tag .
2895	PutHashTree creates a HashTree object .
2896	NewChildCursor returns a new ChildCursor for the given path .
2897	Next moves the cursor to the next key .
2898	NewOrdered creates a new Ordered object .
2899	MkdirAll implements the billy . Filesystem interface
2900	PutDir adds a directory entry to the ordered set .
2901	Serialize serializes the ordered tree to the passed io . Writer .
2902	NewUnordered creates a new Unordered tree .
2903	Ordered returns an ordered copy of this Unordered .
2904	revokeUserCredentials revokes user credentials .
2905	NewAPIServer creates a new APIServer .
2906	String returns a string representation of a version .
2907	getPipelineInfo returns the pipeline info for the given environment
2908	removeStr removes s from ss and returns true if s was removed .
2909	PublicCertToPEM converts a tls . Certificate to a PEM block
2910	GenerateSelfSignedCert generates a self - signed certificate for the given pkix . Name .
2911	ActivateCmd returns the activate command
2912	DeactivateCmd returns a Command instance for the deactivate command
2913	LoginCmd returns the login command
2914	LogoutCmd returns the logout command
2915	WhoamiCmd returns a cobra command for the whoami command
2916	CheckCmd returns the cobra command for pachctl check
2917	GetCmd returns the cobra command for the get command
2918	SetScopeCmd returns the cobra command for set - scope
2919	ListAdminsCmd returns the list - admins command
2920	ModifyAdminsCmd is a command to modify the current cluster admins
2921	GetAuthTokenCmd returns the cobra command for get - auth - token
2922	UseAuthTokenCmd returns the use - auth - token command
2923	Cmds returns a list of cobra commands to manage access to Pachyderm
2924	ParseScope parses a scope string .
2925	IsErrNotActivated returns true if the error is a not activated error .
2926	IsErrPartiallyActivated returns true if the error is partially activated .
2927	IsErrNotSignedIn returns true if the error is a NotSignedIn error .
2928	IsErrBadToken returns true if the error is of type ErrBadToken .
2929	IsErrNotAuthorized returns true if the error message contains the errNotAuthorizedMsg
2930	IsErrInvalidPrincipal returns true if the error is due to an invalid principal .
2931	IsErrTooShortTTL returns true if the provided error message is longer than the token s existing TTL .
2932	NewDatumFactory creates a new DatumFactory .
2933	NewCollection creates a new collection
2934	Path returns the path to the given key .
2935	getIndexPath returns the path to the field with the given key .
2936	getMultiIndexPaths returns a list of paths to each field in the given value .
2937	Upsert is part of the Collection interface .
2938	get is part of the Collection interface .
2939	List implements Collection . List .
2940	Watch returns a watcher for changes to the collection .
2941	WatchByIndex returns a watch . Watcher that watches for changes to an index .
2942	WatchOne returns a watcher for the given key .
2943	WatchOneF implements the Collection interface .
2944	Get returns an io . ReadCloser for the given key .
2945	Keys returns a sorted list of all keys in the cache .
2946	Clear removes all keys from the cache .
2947	NewHTTPServer creates a new HTTP server .
2948	NewDeployServer returns a new deploy . APIServer
2949	Export pulls images from the docker registry and writes them to out .
2950	Import imports an image from an io . Reader .
2951	DatumTagPrefix returns the prefix of the datum tag .
2952	NewPFSInput creates a new pfs input .
2953	NewPFSInputOpts creates a new pps . Input with the specified options .
2954	NewJobInput creates a new pps . JobInput .
2955	NewPipelineInput creates a new PipelineInput .
2956	CreateJob creates a new pps . Job .
2957	ListJob implements pps . ListJobF .
2958	ListJobF is a convenience wrapper around ListJobStream .
2959	FlushJob implements pps . FlushJob .
2960	FlushJobAll flushes a batch of commits to a list of pipelines .
2961	DeleteJob deletes a job by ID
2962	StopJob stops a running job .
2963	RestartDatum restarts a single datum
2964	ListDatum returns a list of datums for a given job .
2965	ListDatumF is a wrapper for ListDatumStream .
2966	InspectDatum calls pps . InspectDatum RPC .
2967	Next returns the next log message .
2968	InspectPipeline returns information about a pipeline .
2969	ListPipeline returns a list of all available pipelines .
2970	DeletePipeline deletes a pipeline
2971	StartPipeline starts a pipeline
2972	StopPipeline stops a pipeline
2973	RerunPipeline reruns a pipeline
2974	CreatePipelineService creates a new pipeline service
2975	GetDatumTotalTime returns the total time of a process .
2976	Mount mounts the filesystem at the given mount point .
2977	NewBufPool creates a new buffer pool with the given size .
2978	StorageRootFromEnv returns the environment variable PachRootEnvVar and StorageBackendEnvVar .
2979	BlockPathFromEnv returns the path to the block in the environment .
2980	NewGoogleClient creates a new Google Cloud Storage client .
2981	NewGoogleClientFromSecret creates a new Google Cloud Storage client from a Google Cloud Storage secret .
2982	NewGoogleClientFromEnv creates a new Google client from environment variables .
2983	NewMicrosoftClientFromSecret creates a new Microsoft client from a secret file .
2984	NewMicrosoftClientFromEnv creates a new Microsoft client from environment variables .
2985	NewMinioClientFromSecret creates a new Minio client from a secret .
2986	NewMinioClientFromEnv creates a new Minio client from environment variables .
2987	NewAmazonClientFromSecret creates a new Amazon S3 client from a secret file .
2988	NewAmazonClientFromEnv creates a new Amazon client from environment variables .
2989	NewClientFromURLAndSecret creates a new client from the given URL and secret .
2990	ParseURL parses a URL to an ObjectStoreURL .
2991	NewClientFromEnv creates a new TracingObjClient from environment variables .
2992	NewExponentialBackOffConfig returns a new exponential backoff configuration .
2993	Close closes the underlying reader .
2994	Close closes the underlying writer .
2995	IsRetryable returns true if the given error is retryable .
2996	RunStdin runs the command in the given io . Reader .
2997	RunIODirPath runs the command in the given directory
2998	NewAuthServer creates a new auth server
2999	expiredClusterAdminCheck checks if Pachyderm Enterprise is active and admin .
3000	getOneTimePassword returns the one - time authentication code for the given username and expiration time .
3001	hashToken returns the SHA256 hash of the given token .
3002	getAuthToken gets the authentication token from the context .
3003	canonicalizeSubjects returns a list of canonicalized subjects .
3004	Matches checks if the actual string matches the expected match .
3005	OneOfMatches checks if one of the actual strings matches a regular expression .
3006	Equal checks if two objects are equal .
3007	NotEqual asserts that actual is not equal to expected .
3008	oneOfEquals returns true if elem is a one of the given slices .
3009	NoneEquals fails if actuals is not equal to expected .
3010	NoError is a convenience wrapper around fatal . NoError .
3011	NoErrorWithinT is a test - spy implementation of NoErrorWithin .
3012	NoErrorWithinTRetry is the same as NoErrorWithin except it waits for the function to return an error .
3013	YesError is a helper function that asserts that the given error is nil .
3014	NotNil asserts that the given object is not nil .
3015	Nil asserts that the given object is nil .
3016	False asserts that the value is false .
3017	NewSTM creates a new STM transaction .
3018	NewDryrunSTM creates a new dryrun STM .
3019	newSTMRepeatable creates a repeatable STM transaction .
3020	newSTMSerializable creates a stmSerializable transaction .
3021	newSTMReadCommitted creates a read committed transaction .
3022	commit commits the read committed transaction .
3023	Pipelines returns a collection of pipelines .
3024	Jobs returns a collection of jobs .
3025	NewTicker creates a new ticker .
3026	nodeToMap recursively maps a node to a map .
3027	ServiceAccount returns a ServiceAccount resource .
3028	ClusterRole returns a ClusterRole resource .
3029	RoleBinding returns a RoleBinding resource .
3030	GetSecretEnvVars returns a list of environment variables that can be used to create a secret .
3031	PachdService returns a pachd service
3032	GithookService returns the githook service .
3033	EtcdDeployment creates a new etcd deployment
3034	EtcdStorageClass returns the default storage class for the given backend .
3035	EtcdVolume returns a persistent volume for the given backend .
3036	EtcdNodePortService returns an etcd node port service .
3037	EtcdHeadlessService returns a service that can be used to serve as a headless service .
3038	EtcdStatefulSet creates a new etcd state store
3039	DashDeployment creates a dash deployment .
3040	DashService returns a dash service .
3041	WriteSecret writes a secret
3042	GoogleSecret returns a map of key - value pairs that can be used to authenticate with Google .
3043	WriteDashboardAssets writes dashboard assets
3044	WriteLocalAssets writes local assets to disk .
3045	WriteCustomAssets writes custom assets .
3046	WriteAmazonAssets writes the assets to the specified bucket .
3047	WriteGoogleAssets writes Google assets to disk .
3048	WriteMicrosoftAssets writes the assets and secret to the specified container .
3049	Images returns a list of available images .
3050	AddRegistry adds a registry name to an image name .
3051	withCanonicalRandomizationFactor sets the canonical randomization factor .
3052	Reset resets the backoff to the initial interval .
3053	incrementCurrentInterval increases the current interval if it exceeds the MaxInterval
3054	NewBlockAPIServer creates a new instance of BlockAPIServer
3055	LocalStorage creates a new local storage client
3056	deleteJob removes a job from the pipeline .
3057	writeXML writes an XML response .
3058	clean1_7HashtreePath returns the path to the hashtree root .
3059	NewFromAddress creates a new APIClient from the given address .
3060	getUserMachineAddrAndOpts returns the user machine address and options .
3061	NewInCluster creates a new in - cluster API client .
3062	Close closes the APIClient .
3063	DeleteAll deletes all pps and pfs files
3064	SetMaxConcurrentStreams sets the maximum number of concurrent streams .
3065	WithCtx returns a copy of the APIClient with the provided context .
3066	NewDLock creates a new DLock
3067	DatumID returns a unique identifier for a slice of inputs .
3068	runUserErrorHandlingCode runs the user error handling code .
3069	HashDatum returns a sha256 hash of the input data .
3070	HashDatum15 hashes the input data for a pipeline .
3071	Status returns the current status of the worker .
3072	Cancel cancels the job .
3073	mergeStats merges two ProcessStats objects .
3074	mergeChunk merges a single chunk into a single chunk .
3075	IsCommitNotFoundErr returns true if the error is a commit not found error .
3076	IsCommitDeletedErr returns true if the error is a commit deleted error .
3077	IsCommitFinishedErr returns true if the given error is a commit finished error .
3078	IsRepoNotFoundErr returns true if the error is a repository not found error .
3079	IsBranchNotFoundErr returns true if the error is a branch not found error .
3080	IsFileNotFoundErr returns true if the error is a file not found error .
3081	Version returns the version of the server .
3082	validateRepoName returns an error if the repo name is invalid .
3083	newDriver creates a new pfs driver .
3084	inspectCommit returns information about a commit .
3085	scratchCommitPrefix returns the path to the scratch commit directory .
3086	scratchFilePrefix returns the path to the file in the scratch commit .
3087	getTreeForFile returns a hash tree for the given file .
3088	provenantOnInput returns true if the commit is provenant on the input repo .
3089	nodeToFileInfo converts a node proto to a pfs . FileInfo .
3090	fileHistory calls f for each file in the file history .
3091	upsertPutFileRecords upserts a PutFileRecords .
3092	ReadRow reads a single row from the reader .
3093	NewReporter creates a new Reporter .
3094	ReportUserAction reports a user action .
3095	FinishReportAndFlushUserAction returns a function that can be used to finish a user action .
3096	Read reads data from the underlying io . Reader .
3097	ActivateCmd returns the activate command
3098	GetStateCmd returns a command to check whether the Pachyderm cluster has activated features
3099	Cmds returns the list of commands to enable Pachyderm Enterprise features
3100	NewConfiguration creates a new configuration
3101	Repos returns a collection of repositories .
3102	PutFileRecords creates a collection of PutFileRecords .
3103	Commits returns a collection of commits in a repository .
3104	Branches returns a collection of branches in a repository .
3105	OpenCommits returns a collection of open commits .
3106	NewDAG creates a new DAG from a set of nodes .
3107	NewNode adds a new node to the DAG .
3108	Sorted returns a sorted list of all the nodes in the DAG .
3109	Leaves returns the IDs of the leaves in the DAG .
3110	Ancestors returns a list of all the ancestors of the given node .
3111	Descendants returns a list of all the descendants of the given node .
3112	Ghosts returns a list of all the Ghosts in the DAG .
3113	NewPortForwarder creates a new PortForwarder .
3114	Run starts the port forwarding process for the given app .
3115	RunForDaemon runs the pachd command for the given local and remote ports
3116	RunForSAMLACS runs pachd for SAMLACS
3117	RunForDashUI runs the dash command for the given local port .
3118	RunForDashWebSocket runs the dash - websocket command with the given local port .
3119	RunForPFS runs the pachd command for the given local port .
3120	RunForS3Gateway runs the pachd command for S3 gateway .
3121	Lock locks the port - forward process
3122	Close shuts down the port forwarder
3123	Unmarshal implements the proto . Unmarshaler interface .
3124	UnmarshalPrev unmarshals the previous event .
3125	MakeWatcher creates a new watcher .
3126	CheckType returns an error if the type of the value is not the same as the type of the template .
3127	NewPool creates a new connection pool
3128	Do calls f for each connection in the pool . If the pool is full a new connection will be created .
3129	Close closes all connections in the pool .
3130	buildImage builds a docker image
3131	pushImage tags the source image and pushes it to the destination image .
3132	newMinioClient creates a new minio client .
3133	newMinioClientV2 - Create new V2 minio client .
3134	newMinioWriter creates a new writer .
3135	Close is part of the minio . Writer interface .
3136	PipelineRepo returns a Repo for the given pipeline .
3137	PipelineRcName returns the pipeline name for the given pipeline version .
3138	GetRequestsResourceListFromPipeline gets the resource list from the pipeline
3139	GetLimitsResourceListFromPipeline gets the resource list from the pipeline
3140	getNumNodes returns the number of k8s nodes
3141	GetExpectedNumWorkers returns the expected number of workers for the given ParallelismSpec .
3142	GetExpectedNumHashtrees returns the expected number of hashtrees for the given HashtreeSpec .
3143	FailPipeline marks a pipeline as failed with the given reason .
3144	JobInput returns the job input from the pipeline info and output commit info .
3145	PipelineReqFromInfo builds a CreatePipelineRequest from a PipelineInfo struct .
3146	NewPipelineManifestReader creates a new PipelineManifestReader .
3147	NextCreatePipelineRequest returns the next CreatePipelineRequest from the pipeline manifest .
3148	DescribeSyntaxError returns an error describing a syntax error .
3149	UpdateJobState updates the state of a job in a pipeline .
3150	New creates a new UUID .
3151	Code returns the HTTP status code .
3152	NewHTTPError creates a new HTTPError .
3153	NewStorage returns a new instance of Storage
3154	DeleteAll deletes all objects from storage .
3155	Chunk chunks data into chunks of chunkSize bytes .
3156	ChunkReader reads from r and calls f for each chunk of data . It returns the number of bytes read .
3157	NewStreamingBytesReader creates a new streamingBytesReader .
3158	WriteToStreamingBytesServer writes the given io . Reader to the given StreamingBytesServer .
3159	WriteFromStreamingBytesClient reads from the given StreamingBytesClient and writes it to the given writer .
3160	NewSidecarAPIServer creates a new sidecar API server .
3161	NewEnterpriseServer returns an instance of the enterprise API server .
3162	validateActivationCode validates the activation code and returns the expiration time .
3163	Activate implements the ec . Enforcer interface
3164	Deactivate deactivates an enterprise .
3165	lookExtensions returns the path with the extension appended to the path .
3166	Start starts the command .
3167	CombinedOutput runs the command and returns its combined output .
3168	StdinPipe returns an io . WriteCloser that can be used to read from the command s stdin .
3169	StdoutPipe returns an io . ReadCloser that can be used to communicate with the command s standard output .
3170	dedupEnvCase deduplicates environment variables .
3171	InputName returns the name of the input .
3172	SortInput sorts the inputs by their name .
3173	InputBranches returns a list of all branches in the input .
3174	ValidateGitCloneURL validates a git clone URL .
3175	containsEmpty returns true if vals contains an empty string .
3176	NewAPIServer returns a new instance of APIServer
3177	Ago returns a human - readable string of the time since the given timestamp .
3178	TimeDifference returns the difference between two timestamps .
3179	Duration converts a duration proto to a human - readable string .
3180	InspectCluster returns information about a cluster .
3181	Extract implements the Extract method of AdminAPIClient .
3182	ExtractAll returns all operations
3183	ExtractWriter calls Extract and writes the result to the given io . Writer .
3184	ExtractURL calls Extract on the given URL .
3185	ExtractPipeline returns the pipeline with the given name
3186	Restore is part of the admin . APIClient interface .
3187	RestoreReader restores the given io . Reader .
3188	RestoreFrom restores from another APIClient .
3189	RestoreURL restores the given URL .
3190	IgnoreTypes returns a cmp . Option that ignores the given types .
3191	AppendEllipsis appends an ellipsis to the end of the text list .
3192	IsType returns true if t is a function of type ft .
3193	NameOf returns the name of a function .
3194	PointerOf returns the pointer of the given value .
3195	String returns a string representation of the edit script .
3196	stats returns statistics about the edit scripts .
3197	connect connects the path to the destination point using the provided EqualFunc .
3198	EquateNaNs returns true if all NaNs are considered NaN .
3199	Index returns the pathStep at the given index . If the index is out of range an empty pathStep is returned .
3200	Key returns the key of the slice .
3201	String implements the fmt . Stringer interface .
3202	FormatType takes a reflect . Type and formats it according to the format options .
3203	formatMapKey returns a string representation of a map key .
3204	formatString takes a string and returns a quoted string .
3205	formatHex returns a hex string representation of the given uint64 .
3206	formatPointer returns a human - readable representation of the pointer .
3207	Visit adds a pointer to the set of visited pointers and returns true if the pointer was already visited .
3208	retrieveUnexportedField retrieves the value of an unexported field .
3209	insert inserts the cname into the field tree .
3210	matchPrefix returns true if p is a prefix of ft .
3211	canonicalName returns the canonical name of a field in a struct .
3212	FilterPath returns an Option that can be used to filter paths based on a function .
3213	normalizeOption returns the first option in src or nil if there are no options .
3214	flattenOptions returns a copy of src with all options flattened .
3215	CanFormatDiffSlice returns true if the diff mode can format a slice of values .
3216	formatASCII returns s with all non - ASCII characters escaped .
3217	coalesceAdjacentEdits takes a list of edit scripts and coalesces them into a list of stats .
3218	SortKeys sorts a slice of reflect . Value by key .
3219	FormatDiff formats the diff of two values .
3220	coalesceAdjacentRecords takes a list of reportRecords and coalesces them into a list of diffStats .
3221	Diff returns the difference of x and y .
3222	statelessCompare performs a stateless diff .
3223	sanitizeValue checks if the given value can be converted to the given type .
3224	Check implements the Checker interface .
3225	makeAddressable makes sure the given value can be addressable .
3226	Marshal writes the field value to the given visitor .
3227	String returns a string representation of the field .
3228	Set sets the tag on the span .
3229	Inject injects a MockSpanContext into an OpenTracing TextMapWriter .
3230	Extract extracts spans from an OpenTracing TextMapReader .
3231	ToLogRecord converts the LogData to a LogRecord .
3232	New creates a new MockTracer .
3233	StartSpan implements opentracing . Tracer .
3234	RegisterInjector registers a injector for the given format .
3235	RegisterExtractor registers an Extractor for the specified format .
3236	Inject implements opentracing . Tracer .
3237	Extract implements opentracing . Tracer .
3238	ContextWithSpan returns a new context with the given span .
3239	Set sets the span s tag with the given value .
3240	Set sets the span s tag with the given value .
3241	Set sets the value of a span tag .
3242	SetString sets the value of the ipv4 tag
3243	EmitString emits a string value .
3244	EmitLazyLogger implements log . LazyLogger .
3245	RunAPIChecks runs the APICheckSuite .
3246	CheckBaggageValues is an APICheckOption to set the check baggage values
3247	CheckExtract is an APICheckOption to set the check extract flag
3248	CheckInject is an APICheckOption to set the check inject option
3249	CheckEverything returns an APICheckOption that can be used to check everything
3250	UseProbe returns an APICheckOption that configures the APICheckSuite to use the given probe .
3251	WithBaggageItem returns a new context with a new baggage item
3252	Tags returns the tags for this span .
3253	Tag returns the tag for the span .
3254	Logs returns a copy of the current trace logs .
3255	Context returns the current span context
3256	SetTag implements opentracing . Span . SetTag
3257	SetBaggageItem implements opentracing . Span . SetBaggageItem
3258	BaggageItem returns the value of a key in the span s Baggage .
3259	Finish marks the span as finished .
3260	FinishWithOptions implements opentracing . Span . FinishWithOptions .
3261	String returns a string representation of the span .
3262	LogFields implements opentracing . Span . LogFields .
3263	logFieldsWithTimestamp adds the specified fields to the log record with the specified timestamp .
3264	LogKV logs the given keyValues .
3265	LogEvent logs an event .
3266	LogEventWithPayload logs an event with the given payload .
3267	SetOperationName sets the operation name
3268	registriesDirPath returns the path to the registries directory .
3269	loadAndMergeConfig loads and merges the configuration from the given directory .
3270	ParseReference parses an image reference string into an ImageReference .
3271	NewReference creates a new OpenShift ImageReference .
3272	CheckAuth checks if the provided credentials are valid .
3273	doHTTP performs an HTTP request .
3274	detectPropertiesHelper is used to detect the properties of the docker client
3275	detectProperties calls detectPropertiesHelper .
3276	getExtensionsSignatures fetches the signature list for the given manifest digest .
3277	NewTransport returns a new http . Transport .
3278	readRegistryConf reads the registry configuration file .
3279	GetRegistries returns a list of all registries
3280	GetInsecureRegistries returns the list of insecure registries
3281	RegistriesConfPath returns the path to the registries configuration file .
3282	NewOptionalBool - creates an optional bool instance returns a pointer to it
3283	changeState changes the state of the PolicyContext .
3284	Destroy destroys the policy context .
3285	policyIdentityLogName returns a log name for the given image reference .
3286	requirementsForImageRef returns the policy requirements for the given image reference
3287	ParseImageName parses an image name into an ImageReference .
3288	BlobInfoFromOCI1Descriptor converts an OCI1 Descriptor to a BlobInfo .
3289	OCI1FromManifest returns an OCI1 object from a manifest
3290	OCI1FromComponents creates an OCI1 manifest from the given components .
3291	newReference creates a new dockerReference from a reference .
3292	tagOrDigest returns the digest or tag of the reference .
3293	updateEmbeddedDockerReference updates the manifest updates . EmbeddedDockerReference .
3294	isTTY returns true if the writer is a terminal .
3295	copyUpdatedConfigAndManifest copies the updated config and manifest to the destination image .
3296	createProgressBar creates a progress bar for the given blob .
3297	copyConfig copies the config blob from the source image to the destination image .
3298	diffIDComputationGoroutine computes the diffID of the given layer stream using the given decompressor .
3299	computeDiffID computes the diff ID for the given stream . If decompressor is not nil it will be used to decompress the stream .
3300	compressGoroutine compresses src to dest .
3301	newDockerClient creates a new docker client .
3302	defaultPolicyPath returns the default policy path .
3303	NewPolicyFromFile reads a policy from a file .
3304	NewPolicyFromBytes creates a new Policy from a JSON string .
3305	newPolicyRequirementFromJSON creates a new PolicyRequirement from JSON data .
3306	newPRSignedBy returns a pointer to a new signedBy object .
3307	newPRSignedByKeyPath creates a new signedBy using the given key type and key path .
3308	NewPRSignedByKeyPath creates a new signed key path policy requirement .
3309	newPRSignedByKeyData creates a new signedBy from key data .
3310	NewPRSignedByKeyData creates a new policy requirement for the given key data .
3311	IsValid returns true if kt is a valid SBKeyType .
3312	newPRSignedBaseLayer creates a new signed base layer .
3313	newPolicyReferenceMatchFromJSON creates a new PolicyReferenceMatch from JSON data .
3314	newPRMExactReference creates a new prmExactReference .
3315	newPRMExactRepository creates a new prmExactRepository .
3316	newImageSource creates a new storageImageSource from an image reference .
3317	getBlobAndLayerID implements storage . ImageSource .
3318	computeID returns the image ID for the given manifest .
3319	PutManifest implements storage . Destination . PutManifest .
3320	PutSignatures implements storage . ImageDestination . PutSignatures
3321	newImage creates a new ImageCloser from the given storageReference .
3322	newImageSource creates a new image source from an oci archive .
3323	LoadManifestDescriptor loads the manifest descriptor for an image .
3324	Close implements the oci . ImageSource interface .
3325	append adds a string s to the list of included strings .
3326	isMultiImage returns true if the image is a multi - image .
3327	lockPath acquires a lock on the given path .
3328	unlockPath unlocks the lock for the given path .
3329	view performs a view of the cache .
3330	update performs an update of the cache .
3331	uncompressedDigest returns the digest of an uncompressed digest or an empty string if no such digest exists .
3332	appendReplacementCandidates returns a list of replacement candidates for the given digest .
3333	indexExists returns true if the oci index exists
3334	createSignature creates a signature for the given manifest .
3335	ParseReference parses a reference string into an ImageReference .
3336	NewReference creates a new reference to an image in the specified directory .
3337	getIndex returns the index for the oci reference
3338	LoadManifestDescriptor loads the manifest descriptor from an image reference
3339	blobPath returns the path to the blob with the given digest .
3340	SignDockerManifest signs a manifest using the provided mech and keyIdentity .
3341	VerifyDockerManifestSignature verifies that the given signature is a valid signature for the given Docker manifest .
3342	newOpenshiftClient creates a new OpenShift client
3343	doRequest makes an HTTP request to Skopeo .
3344	getImage returns the image for the given imageStreamImageName
3345	convertDockerImageReference converts a docker image reference to an OpenShift image reference
3346	ensureImageIsResolved checks if the image is resolved
3347	newImageDestination creates a new openshiftImageDestination
3348	newUntrustedSignature creates a new untrusted signature .
3349	MarshalJSON returns the JSON encoding of the untrusted signature .
3350	UnmarshalJSON implements the json . Unmarshaler interface .
3351	verifyAndExtractSignature verifies and extracts the signature from the given unverified signature .
3352	RewriteReference rewrites the reference to match the provided prefix .
3353	getV1Registries returns a list of V1 Registries from a toml config .
3354	getConfigPath returns the path to the system registries configuration file .
3355	GetRegistries returns a list of registries configured for the system .
3356	readRegistryConf reads the registry configuration from the given path
3357	Manifest returns the manifest of the image .
3358	ConfigUpdate updates the config and annotations of the reference
3359	parseImageAndDockerReference returns the image s Docker reference and an error .
3360	parseDockerReferences takes two strings and parses them as reference . Named and returns them .
3361	ListNames returns a sorted list of transport names .
3362	NewReference creates a new reference to an image .
3363	signaturePath returns the path to the signature file at the given index .
3364	ValidateImageName validates the image name .
3365	SplitPathAndImage splits a reference string into a path and image .
3366	ValidateOCIPath validates an OCI path
3367	ValidateScope returns an error if the scope is invalid .
3368	BlobInfoFromSchema2Descriptor converts a Schema2Descriptor to a BlobInfo .
3369	Schema2FromManifest creates a Schema2 from a manifest .
3370	Schema2FromComponents creates a new Schema2 from the given configuration and layers .
3371	SetAuthentication sets the authentication credentials for the specified registry .
3372	RemoveAuthentication removes authentication for a given registry
3373	RemoveAllAuthentication removes authentication information from the docker config
3374	readJSONFile reads the JSON file at the given path .
3375	modifyJSON updates the JSON file at the specified path . If the file already exists it is overwritten .
3376	findAuthentication attempts to find an authentication for a given registry from a JSON file . If no authentication is found an empty string and an empty string are returned .
3377	NewDestination returns a new Destination .
3378	AddRepoTags adds repository tags to the destination .
3379	writeLegacyLayerMetadata writes the layer metadata for the given layerDescriptors to the destination . It returns a list of layer paths and the last layer ID .
3380	sendSymlink sends a symlink as a tar file
3381	sendBytes sends bytes to a file at the given path .
3382	sendFile sends the contents of stream as a tar file .
3383	Commit closes the tar and closes the destination .
3384	imageMatchesRepo returns true if the given reference matches one of the image repositories .
3385	resolveImage attempts to resolve the reference to an image . If the reference does not resolve to an image an error is returned .
3386	Transport implements storage . Transport .
3387	StringWithinTransport returns a string representation of the storageReference .
3388	PolicyConfigurationNamespaces returns the namespaces for the policy configuration .
3389	GzipDecompressor is a wrapper around pgzip . NewReader .
3390	Bzip2Decompressor returns an io . ReadCloser that can be used to decompress a bzip2 stream .
3391	XzDecompressor returns an io . ReadCloser that can be used to decompress the given io . Reader .
3392	DetectCompression detects the decompressor for the given io . Reader and returns it .
3393	newImageDestination creates a new dockerImageDestination
3394	mountBlob is used to mount a blob
3395	bicTransportScope returns a BICTransportScope for the given reference .
3396	newBICLocationReference creates a new BICLocationReference .
3397	parseBICLocationReference parses a BICLocationReference .
3398	NewSourceFromStream creates a new source from a stream .
3399	readTarComponent returns the contents of a tar component at the given path
3400	ensureCachedDataIsPresent ensures that cached data is present in the source .
3401	loadTarManifest loads the manifest . json from the source .
3402	Close closes the source and removes the tar file .
3403	newImageDestination creates a new daemonImageDestination
3404	imageLoadGoroutine executes the imageLoad command in a goroutine .
3405	NewReference creates a new reference to an image .
3406	createOCIRef creates an OCI reference for the given image .
3407	createUntarTempDir creates a temp directory from an oci archive reference .
3408	destructivelyPrioritizeReplacementCandidatesWithMax takes a slice of CandidateWithTime and returns a slice of types . BICReplacementCandidates with the given max number of candidates .
3409	newImageDestination creates a new ostreeImageDestination .
3410	resolveExistingPathToFullyExplicit resolves an existing path to fully explicit path .
3411	newImageDestination creates a new dirImageDestination .
3412	isDirEmpty returns true if the directory is empty .
3413	removeDirContents removes all the contents of a directory
3414	GetRepositoryTags returns a list of tags for a repository .
3415	DefaultCache returns the default blob info cache .
3416	uncompressedDigestLocked returns the uncompressed digest for the given digest . If the digest is not in the cache an empty string is returned .
3417	Close is part of the oci . Destination interface .
3418	PutManifest is part of the oci . Destination interface
3419	Commit is part of the oci . Destination interface .
3420	tarDirectory creates a tar file from the given directory .
3421	ParseStoreReference implements storageTransport .
3422	chooseDigestFromManifestList returns the digest of the image in the manifest list .
3423	ChooseManifestInstanceFromManifestList selects a digest from the manifest list .
3424	manifestSchema1FromComponents creates a schema1 manifest from a list of components .
3425	manifestDigest returns the digest of the image manifest . If instanceDigest is not nil it returns that digest .
3426	deleteImage deletes an image from the registry .
3427	Schema1FromComponents creates a new Schema1 from a set of components .
3428	initialize initializes the schema1 .
3429	ToSchema2Config converts a Schema1 image to a Schema2 config .
3430	Digest returns the digest of the manifest .
3431	MatchesDigest returns whether the manifest matches the expected digest .
3432	NormalizedMIMEType returns a normalized MIME type .
3433	FromBlob creates a manifest from a blob .
3434	NewReference returns a new image reference for the given path .
3435	layerPath returns the path to the layer with the given digest .
3436	signaturePath returns the path to the signature file at the given index .
3437	New creates a new pool with the given size .
3438	NewFunc creates a new pool with a closure .
3439	ProcessTimed waits for a job to complete and returns the payload . If the pool is not running ErrPoolNotRunning is returned
3440	SetSize sets the size of the pool .
3441	GetSize returns the number of workers in the pool
3442	TL returns the top left corner of the rectangle .
3443	BR returns the top left corner of the rectangle .
3444	CVBox returns a C . CvBox2D .
3445	Points returns the points in the box .
3446	FOURCC returns the four - bit four - bit four - bit four - bit four
3447	Merge merges two images .
3448	Split splits a IplImage .
3449	AddWeighted adds two images with weighting .
3450	And computes the intersection of two images and stores the result in dst .
3451	AndWithMask performs a logical AND between two images .
3452	AndScalar computes the result of a scalar and stores the result in dst .
3453	AndScalarWithMask performs an AND operation on the image with the given value and mask .
3454	Or computes the union between src1 and src2 and stores the result in dst .
3455	OrWithMask computes the logical or of two images .
3456	OrScalar computes the Or of src and dst with the given scalar value .
3457	OrScalarWithMask computes the or of src with value and dst with mask .
3458	AddWithMask adds two images with the given mask .
3459	AddScalar adds a scalar value to dst .
3460	AddScalarWithMask adds a scalar to a image with a mask .
3461	Subtract subtracts src1 from src2 and stores the result in dst .
3462	SubtractWithMask subtracts two images from src1 and dst with mask .
3463	SubScalar subtracts a scalar from src to dst .
3464	SubScalarWithMask subtracts a scalar from src with a mask .
3465	SubScalarRev is similar to SubScalarWithMask but in reverse order .
3466	SubScalarWithMaskRev subtracts value from src to dst with mask .
3467	AbsDiff computes the absolute difference between two images .
3468	AbsDiffScalar computes the absolute difference of two images .
3469	MeanStdDevWithMask returns the mean and standard deviation of the image with the given mask .
3470	CreateSeq creates a new sequence .
3471	Push pushes an element to the end of the sequence .
3472	Pop removes an element from the sequence .
3473	PushFront pushes an element to the front of the sequence .
3474	PopFront removes an element from the front of the sequence .
3475	GetElemAt returns the element at the given index .
3476	RemoveAt removes the element at the given index from the sequence .
3477	Delay sets the amount of time to wait before giving up .
3478	BackOffDelay returns the amount of time to wait before the next call to BackOff .
3479	Error implements the error interface .
3480	Arguments adds arguments to the request .
3481	BodyString sets the request body to the given string .
3482	BodyBytes sets the request body with the given bytes .
3483	Body sets the request body .
3484	Option adds an option to the request .
3485	Header adds a header to the request .
3486	Send sends the request and returns the response .
3487	Exec sends the request and decodes the response into res .
3488	Next returns the next message from the subscription .
3489	Cancel cancels the subscription .
3490	FileList lists the contents of a file
3491	Cat returns the contents of the file at the given path .
3492	List returns a list of all links for a given path .
3493	Pin adds a pin to the shell .
3494	Pins returns a list of all available pins .
3495	Version returns the version and commit .
3496	SwarmPeers returns the list of connected swarm peers .
3497	SwarmConnect connects to a remote swarm .
3498	DagPutOptions creates a new DagPutSettings with the given options .
3499	Pin is a functional option for DagPutSettings .
3500	Kind is a DagPutOption .
3501	Hash is a DagPutOption .
3502	AddDir adds a directory to the shell .
3503	Publish publishes a value to a node
3504	PublishWithDetails publishes a content hash with optional details .
3505	ResolveValue resolves the plan value .
3506	GenerateQuery generates a query from the parsed query .
3507	EncodeValue encodes a bind variable to a buffer .
3508	Lex scans the next token and stores it in the yySymType .
3509	skipStatement skips the end of a statement .
3510	reset resets the Tokenizer to its initial state .
3511	Preview returns the statement type for the given SQL statement .
3512	NewPlanValue creates a new PlanValue from an expression .
3513	StringIn checks if a string is in a list of strings
3514	NewTrackedBuffer returns a new TrackedBuffer .
3515	NewStringArena creates a new StringArena with the given size .
3516	NewString implements the StringArena interface .
3517	SpaceLeft returns the number of spaces left .
3518	ParseStrictDDL parses a strict DDL statement .
3519	ParseNext parses the next statement .
3520	Append appends the SQLNode to the buffer .
3521	ExprFromValue converts a sqltypes . Value to an Expr .
3522	Backtick returns the backtick of the given string .
3523	NewValue creates a new Value based on the type and value .
3524	String returns a string representation of the value .
3525	EncodeSQL encodes the value to SQL .
3526	EncodeSQL encodes InsertValues to SQL .
3527	EncodeSQL encodes the tuple equality list as SQL .
3528	WalkStatement walks a statement .
3529	WalkSelect walks a select statement .
3530	BindVariablesEqual compares two maps of bind variables .
3531	New creates a new JWTMiddleware .
3532	HandlerWithNext implements the JWTMiddleware interface .
3533	FromAuthHeader extracts the token from the Authorization header .
3534	FromParameter returns a TokenExtractor that extracts tokens from the URL query parameter .
3535	FromFirst returns a TokenExtractor that extracts the first token from the request .
3536	getelloPacket returns the PUBSUB packet for the myTopics .
3537	NewFloodsubWithProtocols creates a new flood sub router with the given protocols .
3538	NewFloodSub creates a new flood sub subscription .
3539	NewLRUBlacklist creates a Blacklist with the given capacity .
3540	NewRandomSub creates a new random subscription router .
3541	NewGossipSub creates a new instance of a GossipSubRouter .
3542	NewPubSub creates a new instance of PubSub .
3543	WithValidateThrottle is a functional option that sets the maximum number of messages that should be sent to the subscriber .
3544	WithBlacklist is a functional option on PubSub .
3545	handleRemoveSubscription is used to remove a subscription .
3546	handleAddSubscription is used to add a subscription to a topic .
3547	announce sends an announce message to all peers .
3548	notifySubs sends a message to all subscribed topics .
3549	seenMessage returns true if the given message has already been seen .
3550	subscribedToMsg returns true if the message is subscribed to a topic .
3551	msgID returns the message ID .
3552	pushMsg is used to push a message to a peer .
3553	validate checks if the message is valid
3554	validateSingleTopic checks if a message is valid for a single topic
3555	getValidators returns a list of validators for the given message .
3556	Subscribe subscribes to the given topic .
3557	SubscribeByTopicDescriptor subscribes to the given topic descriptor .
3558	GetTopics returns a list of all subscribed topics
3559	Publish sends a message to the given topic .
3560	ListPeers returns a list of all known peers for a given topic .
3561	WithValidatorTimeout sets the timeout for the addVal .
3562	WithValidatorConcurrency is a functional option for the AddVal . New constructor .
3563	RegisterTopicValidator adds a validator to the given topic .
3564	UnregisterTopicValidator removes the validator for the given topic .
3565	DefaultMetricPrefix is the default prefix for metrics .
3566	MetricWithPrefix returns a metric with the given prefix and name and tags .
3567	NewClient creates a new TChannel client .
3568	Call makes a TChannel RPC call .
3569	CallPeer starts a new TChannel call on the given TChannel peer .
3570	CallSC starts a new call to the given method on the given SubChannel .
3571	ReadResponse reads a response from a TChannel call .
3572	writeHeaders writes the response headers to the response writer .
3573	ResponseWriter creates a new http . ResponseWriter .
3574	ReadHeaders reads a map of headers from the given io . Reader .
3575	NewTCPRawRelay creates a raw TCP relay .
3576	NewClient creates a new TChanClient .
3577	Advertise advertises the client to the given services .
3578	Handle implements the tchannel . Handler interface .
3579	Start starts the TChannel server .
3580	Port returns the port of the server .
3581	SetStrategy sets a new ScoreCalculator for each peer in the list .
3582	Add adds a new peer to the peer list .
3583	GetNew returns a new peer from the list . If no peers are currently selected ErrNoNewPeers is returned .
3584	Get attempts to retrieve a peer from the peer list . If the peer list is empty a new peer will be selected . If the peer list is empty a new peer will be selected .
3585	Remove removes a peer from the list .
3586	Copy returns a copy of the peer list .
3587	Len returns the number of peers in the list .
3588	exists returns the peer score for the given hostPort .
3589	getPeerScore returns the peer score and a bool indicating whether the peer was found .
3590	onPeerChange is called when a peer changes its score .
3591	updatePeer updates the peer score with the new score .
3592	getConn returns the connection at the given index .
3593	GetConnection returns the currently active connection or establishes a new one .
3594	getConnectionRelay attempts to establish a connection to the peer . If there is no active connection it attempts to establish a connection . If there is no active connection it attempts to establish a connection .
3595	canRemove returns true if we can remove the peer .
3596	addConnection adds a connection to the peer .
3597	removeConnection removes a connection from the list of connections . Returns true if the connection was removed .
3598	connectionCloseStateChange notifies the peer that a connection has been closed .
3599	Connect establishes a connection to the peer .
3600	BeginCall starts a new outbound call for the given service and method .
3601	NumConnections returns the number of inbound and outbound peers .
3602	NumPendingOutbound returns the number of pending outbound connections on the peer .
3603	isEphemeralHostPort returns true if the given hostPort is an ephemeral port .
3604	Get returns the value for the given key .
3605	Set sets the value for a key .
3606	ClearAll clears all values .
3607	NewChannel creates a new channel with the given options .
3608	Serve starts listening on the given net . Listener .
3609	ListenAndServe listens on the given port and calls Serve on it .
3610	Register registers the given handler with the given method name .
3611	PeerInfo returns the local peer info for the channel .
3612	GetSubChannel returns the SubChannel for the given service name .
3613	serve is a long lived goroutine that handles incoming connections .
3614	Ping sends a ping to a remote peer .
3615	StatsTags returns a map of common stats tags for the channel .
3616	Connect establishes a new connection to the remote peer .
3617	exchangeUpdated is called when a connection has been updated .
3618	updatePeer updates the state of the given peer .
3619	addConnection adds a connection to the channel and returns true if the connection was added .
3620	removeClosedConn removes a closed connection from the channel .
3621	connectionCloseStateChange updates the state of the channel based on the current state of the connection .
3622	State returns the state of the channel .
3623	NewReader returns a new Reader .
3624	ReadUint16 reads a 16 - bit unsigned integer from the reader .
3625	ReadString reads a string from the reader .
3626	ReadLen16String reads a string of length 16 .
3627	Register registers the behavior with the given channel .
3628	Run runs the behavior .
3629	Get returns a relayTimer from the pool or creates a new one .
3630	Put puts the relayTimer back into the pool .
3631	Start implements the RelayTimer interface .
3632	Release releases the timer to the pool .
3633	NewLogger returns a logger that writes to the given io . Writer .
3634	NewTCPFrameRelay creates a new TCP frame relay .
3635	tallyTags returns a map of tally tags .
3636	Isolated sets the sub channel as isolated .
3637	Isolated returns true if the channel is isolated .
3638	Register registers the given handler for the given method name .
3639	GetHandlers returns a map of all registered handlers for this SubChannel .
3640	StatsTags returns the set of tags for this subchannel .
3641	registerNewSubChannel adds a new SubChannel to the map if it does not already exist .
3642	get returns the SubChannel for the given service name .
3643	getOrAdd returns an existing SubChannel or adds a new one if it doesn t exist .
3644	Discover queries the hyperbahn server for the specified service .
3645	Start starts the client .
3646	listen creates a new listener for the client .
3647	WriteRequest writes the request to the ArgWritable .
3648	ReadRequest reads a request from an ArgReadable .
3649	NewReadBufferWithSize creates a new ReadBuffer with the given size .
3650	ReadByte reads a single byte from the buffer . If the buffer is empty ErrEOF is returned .
3651	ReadBytes reads n bytes from the underlying buffer . ErrEOF is returned if there is no more bytes left .
3652	ReadString reads n bytes as a string .
3653	ReadUint16 reads a 16 - bit unsigned integer from the buffer
3654	ReadUint32 reads a uint32 from the buffer .
3655	ReadUint64 reads a uint64 from the buffer
3656	ReadUvarint reads a varint
3657	ReadLen8String reads a string of length 8 .
3658	ReadLen16String reads a string of the length of a uint16
3659	FillFrom fills the ReadBuffer with n bytes from io . Reader
3660	Wrap sets the contents of the ReadBuffer to b .
3661	WriteSingleByte writes a single byte to the buffer . If the buffer is full ErrBufferFull is returned .
3662	WriteBytes writes a slice of bytes to the buffer .
3663	WriteUint16 writes a uint16 to the buffer .
3664	WriteUint32 writes a uint32 to the buffer .
3665	WriteUint64 writes a uint64 to the buffer .
3666	WriteUvarint writes a variable length integer to the buffer .
3667	WriteString writes a string to the buffer .
3668	WriteLen8String writes a string with length 8 .
3669	WriteLen16String writes the length of a string to the buffer .
3670	DeferByte returns the next byte in the buffer . If the buffer is full ErrBufferFull is returned .
3671	DeferBytes returns the number of bytes that have been written to the buffer .
3672	FlushTo flushes the buffer to the given io . Writer .
3673	Reset resets the buffer .
3674	Wrap implements the io . Writer interface .
3675	Update updates the reference with the given value .
3676	Update updates the reference with the given value .
3677	Update updates the reference to the given value .
3678	Update updates the reference with the given bytes .
3679	UpdateString updates the reference with the given string .
3680	ArgReader returns a new ArgReader .
3681	finish releases the checksum if hasMoreFragments is true .
3682	newWritableChunk creates a new writableChunk .
3683	writeAsFits writes b to the contents and updates the size .
3684	newFragmentingWriter returns a new fragmentingWriter .
3685	ArgWriter implements the ArgWriter interface .
3686	BeginArgument begins a new argument in a fragment .
3687	Write is part of the io . Writer interface .
3688	Flush is part of the io . Writer interface .
3689	Close implements the io . Closer interface .
3690	handleCallRes is used to handle a call response frame .
3691	Arg2Reader returns an ArgReader from the call response .
3692	handleError sends an error frame to the remote peer . Returns true if there was an error .
3693	doneReading is called when the response is done reading .
3694	newFragment creates a new fragment .
3695	flushFragment sends a writableFragment to the request response writer .
3696	failed is part of the requestres . Writer interface .
3697	arg1Reader returns an ArgReader for the first request - response argument .
3698	arg2Reader returns an ArgReader for the 2 arguments .
3699	arg3Reader returns an ArgReader for the 3 - argument request .
3700	argReader returns an ArgReader based on the contents of this reqResReader .
3701	recvNextFragment reads the next fragment from the inbound stream .
3702	releasePreviousFragment releases the previous fragment .
3703	failed is part of the requestres . Reader interface .
3704	parseInboundFragment parses an inbound fragment .
3705	NewContext creates a new context with the given timeout .
3706	WithHeaders returns a new context with the given headers .
3707	healthCheck performs an active health check on the given connection .
3708	SetTimeout sets the timeout for the request .
3709	AddHeader adds a header to the request .
3710	SetHeaders sets the headers on the context .
3711	SetConnectTimeout sets the connection timeout .
3712	SetRetryOptions sets the retry options .
3713	SetTimeoutPerAttempt sets the timeout per attempt .
3714	SetParentContext sets the parent context
3715	Build creates a new tchannel context .
3716	overrideHeaders overrides the given headers with values from the CallOptions .
3717	Read reads from the underlying io . Reader .
3718	ReadJSON reads JSON from the input and stores the result in the value pointed to by data .
3719	NewArgWriter creates a new ArgWriteHelper .
3720	Write implements the ArgWriter interface .
3721	WriteJSON writes a JSON - encoded data to the writer .
3722	Register registers the pprof registrar .
3723	Count returns the number of items in the relay .
3724	Get returns the relayItem with the given id .
3725	Add adds an item to the list of relay items .
3726	Entomb adds the relay item to the list of relay items and waits for the deleteAfter duration to complete . If the deleteAfter duration is greater than the max relayTombs the item will be deleted immediately .
3727	NewRelayer creates a new Relayer .
3728	Relay forwards the frame to the remote peer . If the frame is a non - call request an error is returned .
3729	Receive sends a frame to the Relay . Returns true if the frame was sent and a failure reason .
3730	handleNonCallReq handles a non - call request frame .
3731	addRelayItem adds a new relayItem to the list of relay items .
3732	failRelayItem attempts to fail the relay item with the given id .
3733	WriteStruct writes the given struct to the given io . Writer .
3734	ReadStruct reads a struct from the given io . Reader .
3735	EnsureEmpty reads from r until io . EOF .
3736	NewServer returns a new TChannel service server .
3737	Advertise establishes a connection to the hyperbahn cluster .
3738	handleCallReqContinue is used to handle a call request continue frame .
3739	dispatchInbound is used to dispatch an inbound call .
3740	CallOptions returns the CallOptions for this inbound call .
3741	Response returns the response for this call .
3742	SendSystemError is part of the CallResponse interface .
3743	SetApplicationError sets the applicationError field of the response .
3744	Arg2Writer returns an ArgWriter .
3745	doneSending is called when the response is done sending .
3746	newState creates a new state from a Thrift struct .
3747	rootType returns the root type of the given thrift type .
3748	checkInclude returns the current state and the thrift type and the include .
3749	isResultPointer returns true if the given thrift type is a result pointer .
3750	goType returns the go type for the given thrift type .
3751	goTypePrefix returns the Go type name for the given thrift type .
3752	NewContext creates a new context with the given timeout .
3753	newIncomingContext creates a new context for an incoming call .
3754	CurrentCall returns the current IncomingCall .
3755	New returns a new random number generator .
3756	Health implements meta . HealthHandler .
3757	Headers returns the request headers .
3758	ResponseHeaders returns the response headers .
3759	SetResponseHeaders is part of the http . ResponseWriter interface .
3760	Child returns a copy of this context s headers .
3761	Wrap wraps the given context in a headerCtx .
3762	WrapWithHeaders wraps a map of headers into a ContextWithHeaders .
3763	WithoutHeaders returns a context with the TChannel and headers set to nil .
3764	Notify implements the Notifier interface .
3765	forwardPeerFrame forwards the given frame to the receive channel .
3766	recvPeerFrame returns the next frame received from the peer .
3767	recvPeerFrameOfType returns the next frame of the given type .
3768	shutdown shuts down the message exchange .
3769	newMessageExchangeSet creates a new messageExchangeSet .
3770	addExchange adds a messageExchange to the messageExchangeSet .
3771	newExchange creates a new message exchange .
3772	deleteExchange removes an exchange from the messageExchangeSet and returns true if the exchange was found and false if the exchange was expired .
3773	removeExchange removes an exchange from the messageExchangeSet .
3774	expireExchange removes an exchange from the messageExchangeSet .
3775	forwardPeerFrame forwards the given frame to the message exchange .
3776	copyExchanges returns a copy of the exchanges in the messageExchangeSet .
3777	stopExchanges sends an error to all exchanges in the messageExchangeSet .
3778	NewFrame creates a new frame with the given payload capacity .
3779	ReadBody reads the frame body from the given io . Reader .
3780	WriteOut writes the frame to the given io . Writer .
3781	CanRetry returns true if the error is a retryable error .
3782	HasRetries returns true if the given error is a retryable error .
3783	SinceStart returns the duration since the start of the request .
3784	AddSelectedPeer adds a selected peer to the request state .
3785	RunWithRetry executes the given RetriableFunc with retries .
3786	ChecksumSize returns the size of the checksum .
3787	New returns a new instance of Checksum .
3788	parseTemplates takes a list of template files and returns a list of templates .
3789	NewStringSliceFlag creates a new string slice flag .
3790	withStateFuncs returns a copy of the template with state funcs applied .
3791	IntrospectOthers returns a map of channel names to channel info .
3792	ReportInfo returns information about the channel .
3793	IntrospectState returns a map of peer names to their runtime state .
3794	IntrospectState returns the runtime state for each subchannel .
3795	IntrospectState returns the runtime state of the peer .
3796	IntrospectState returns the runtime state of the connection .
3797	IntrospectState returns the current state of the Relayer .
3798	IntrospectState returns RelayItemSetState for this RelayItemSet .
3799	IntrospectState returns the runtime state of the message exchange set .
3800	NewContext creates a new context with a timeout .
3801	WriteResponse writes the response to the response .
3802	Wrap returns a tchannel . Handler that wraps the given handler .
3803	initFromOpenTracing initializes the injectableSpan from an OpenTracing span .
3804	startOutboundSpan starts a new span for an outbound RPC call .
3805	intToIP4 converts a uint32 to a net . IP .
3806	servicePeerToHostPort converts a ServicePeer to a string .
3807	NewStatsdReporter creates a new statsd reporter .
3808	UnmarshalText implements the encoding . TextUnmarshaler interface .
3809	Push implements the heap . Interface .
3810	Pop removes the last peer from the heap and returns it .
3811	updatePeer updates the heap with the given peerScore .
3812	removePeer removes a peer from the heap .
3813	pushPeer adds a new peer to the heap .
3814	addPeer adds a peer to the heap .
3815	NewClient creates a new TChanClient .
3816	Add adds a new peer to the list .
3817	Get returns the peer with the given hostPort .
3818	WithTimeout returns an Option that sets the timeout .
3819	Methods returns a list of all methods in the service .
3820	InheritedMethods returns the list of inherited methods of the service .
3821	Arguments returns the arguments of the method .
3822	ArgList returns a list of arguments for the method .
3823	CallList returns the call list for this method .
3824	RetType returns the return type of the method .
3825	WrapResult is used to wrap a return value in a query string .
3826	ReturnWith returns a string representation of the method s return value .
3827	Declaration returns a string representation of the field .
3828	startIdleSweep starts an idleSweep .
3829	start starts the idleSweep poller .
3830	Stop stops the idleSweep .
3831	ResolveWithGoPath resolves the given filename using the GOPATH . If the file is not found on GOPATH an error is returned .
3832	setExtends sets the ExtendsService field of each service in the given state .
3833	register registers a handler for the given method .
3834	NewClient creates a new client for the given hosts .
3835	ListenIP returns the first available IP address .
3836	Close closes the listener .
3837	ReadArgsV2 reads 2 arguments and 3 arguments .
3838	WriteArgs writes the arguments to the call and the response .
3839	Call starts a new TChannel RPC call .
3840	CallSC is a wrapper around BeginCall and WriteArgs .
3841	CallV2 is a version of CallV1 .
3842	NewRealRelay creates a real relay .
3843	NewServer creates a new TChannel server .
3844	RegisterHealthHandler registers a health handler .
3845	Handle handles an incoming call .
3846	MetricsKey returns the metrics key for the system error code .
3847	NewSystemError creates a new system error .
3848	NewWrappedSystemError creates a new SystemError from a wrapped error .
3849	Error implements the error interface for SystemError .
3850	GetContextError converts context . DeadlineExceeded to context . Canceled .
3851	GetSystemErrorCode returns the system error code .
3852	ping sends a ping message and waits for a response .
3853	handlePingRes is used to handle a ping response frame .
3854	handlePingReq handles a ping request frame .
3855	SendSystemError sends an error frame to the remote peer .
3856	connectionError is used to log a connection error .
3857	withStateLock calls f while holding the connection s stateLock .
3858	withStateRLock calls f in a read - locked state .
3859	readFrames reads frames from the connection .
3860	writeFrames is a long lived goroutine that sends frames to the network .
3861	hasPendingCalls returns true if the connection has any pending calls .
3862	checkExchanges checks if there are any exchanges in the connection .
3863	closeNetwork closes the underlying connection to the remote peer .
3864	getLastActivityTime returns the time of the last activity .
3865	Validate validates a service .
3866	logFailedRegistrationRetry logs the failed registration attempt .
3867	initialAdvertise sends an advertising message to the hyperbahn server .
3868	Service returns the service of the request .
3869	TTL returns the TTL of the request .
3870	SetTTL sets the TTL field of the request .
3871	finishesCall returns true if the call has been completed .
3872	Flat returns a sorted list of platform strings .
3873	Map calls f on each string in ps and returns the result as a slice of strings and any errors encountered .
3874	MapSlice is a helper function that returns a slice of strings .
3875	GetProtoConfig gets the proto config from the config .
3876	MapExprStrings maps a string expression to a string expression .
3877	FlattenExpr flattens a string expression into a list of strings .
3878	makePlatformStringsExpr creates a platform string expression .
3879	String returns the platform name .
3880	Find finds the workspace file in the given directory . If the workspace file is not found os . ErrNotExist is returned .
3881	runGazelle runs the gazelle .
3882	restoreBuildFilesInRepo restores all build files in the current working directory .
3883	FixLoads takes a rule . File and a list of known loads and returns a list of loaded rules .
3884	fixLoad returns a new load with the given file and kinds removed .
3885	newLoadIndex returns the index of the first rule in after .
3886	removeLegacyGoRepository removes the legacy go_repository file .
3887	Compare compares two versions .
3888	ParseVersion parses a version string into a Version .
3889	EmptyFile creates a new empty file .
3890	LoadWorkspaceFile loads workspace data from a file .
3891	LoadMacroFile loads a macro file .
3892	EmptyMacroFile creates a new empty macro file .
3893	LoadData loads data into a file .
3894	LoadWorkspaceData loads data from a BZL workspace file .
3895	LoadMacroData loads macro data from a file .
3896	ScanAST scans the AST for the given package .
3897	ScanASTBody scans the AST body of a function .
3898	MatchBuildFileName returns the full path to the build file .
3899	SyncMacroFile syncs the macro file .
3900	MacroName returns the name of the current function .
3901	Sync synchronizes the file .
3902	Format returns the BZL format of the file .
3903	Save writes the file to a file at the given path .
3904	HasDefaultVisibility returns true if the file has the default_visibility attribute .
3905	NewLoad creates a new load statement .
3906	Symbols returns a sorted list of all known symbols .
3907	Has returns true if the symbol exists in the load .
3908	Add adds a symbol to the load .
3909	Remove removes a symbol from the load .
3910	Insert adds the load to the file at the given index .
3911	NewRule creates a new rule .
3912	SetKind sets the kind of the rule
3913	AttrKeys returns a sorted list of attribute names in the rule .
3914	Attr returns the value of the attribute with the given key .
3915	AttrString returns the value of an attribute as a string .
3916	AttrStrings returns the value of an attribute as a slice of strings .
3917	DelAttr removes an attribute from the rule .
3918	SetAttr sets the value of an attribute .
3919	PrivateAttrKeys returns a sorted list of private attribute keys .
3920	SetPrivateAttr sets a private attribute
3921	Insert adds a rule to a file .
3922	IsEmpty returns true if info . NonEmptyAttrs is non - empty .
3923	CheckInternalVisibility returns the visibility string for internal packages .
3924	New creates a new label .
3925	Rel returns a label that is relative to the given repository .
3926	Equal returns true if two labels are equal .
3927	Contains returns true if the label contains the other label .
3928	generateFromPath generates . proto files from the given root path .
3929	shouldCall returns true if rel is in updateRels .
3930	shouldUpdate returns true if the given rel should be updated .
3931	shouldVisit returns true if rel is in updateRels .
3932	SquashRules squashes rules from src to dst .
3933	runClient runs the gazelle server .
3934	UpdateRepo updates the git repo for the given import path .
3935	NewRemoteCache creates a new RemoteCache .
3936	Remote returns the remote and its vcs .
3937	get returns the value for the given key .
3938	ensure adds a new entry to the cache if it does not exist .
3939	RelBaseName returns the base name of a relative path relative to prefix and root .
3940	Clone returns a deep copy of this Config .
3941	IsValidBuildFileName returns true if the given name is a valid build file name .
3942	check returns true if the tag line is valid .
3943	fileNameInfo returns fileInfo for given path_ .
3944	otherFileInfo returns the other file info for the given path .
3945	protoFileInfo converts a proto . FileInfo to a fileInfo .
3946	AddRule adds a rule to the index .
3947	Finish collects all embedded rules and builds import index .
3948	buildImportIndex builds the import index .
3949	IsSelfImport returns true if the given label is a self import .
3950	applyKindMappings takes a list of config . MappedKinds and applies it to a list of LoadInfo s .
3951	appendOrMergeKindMapping adds the mapped kind to the load list if it does not exist .
3952	RuleName returns the name of a rule .
3953	buildPackages builds a list of packages based on the configuration .
3954	selectPackage selects a package from a map of packages .
3955	generateProto generates the proto library rule for the given package .
3956	generateEmpty returns an empty list of proto_library rules .
3957	ImportRepoRules imports a list of rules from a lock file .
3958	MergeRules merges the rules in genRules into destFile .
3959	GenerateRule generates a go_repository rule .
3960	FindExternalRepo returns the path to the external repository .
3961	ListRepositories returns a list of repositories in the given workspace .
3962	migrateLibraryEmbed migrates the embed attribute of all rules in a file .
3963	migrateGrpcCompilers migrates go_grpc_library to go_proto_library .
3964	squashCgoLibrary squashes cgo_library and go_library rules .
3965	removeLegacyProto removes legacy go_proto_library . bzl rules from a file .
3966	removeLegacyGazelle removes the gazelle rule from the given file .
3967	selectPackage returns the first buildable package in the given directory .
3968	AddBuiltin adds a builtin resolver to the metaResolver .
3969	MappedKind adds a new mapped kind to the resolver .
3970	Resolver returns the resolver for the given rule .
3971	sortExprLabels sorts a list of strings and adds the comment to the list .
3972	checkRulesGoVersion checks if the version of rules_go is compatible with the current version of io_bazel_rules_go
3973	preprocessTags adds the gc tag to the genericTags map
3974	setBuildTags sets generic build tags .
3975	splitValue splits a string into a list of strings .
3976	copyGoModToTemp copies the go . mod file to a temp directory .
3977	findGoTool returns the path to the go tool .
3978	isBuildable returns true if the package can be built .
3979	startServer starts the server .
3980	watchDir watches for changes in a directory .
3981	listDirs returns a list of all directories in the given directory .
3982	shouldIgnore returns true if p should be ignored .
3983	recordWrite records a write event for the given path .
3984	getAndClearWrittenDirs returns all written directories .
3985	CombineHandlers combines multiple http . HandlerFunc into one .
3986	VerifyContentType returns a http . HandlerFunc that verifies the Content - Type header .
3987	VerifyMimeType returns a http . HandlerFunc that verifies that the Content - Type header contains the given MIME type .
3988	VerifyBasicAuth returns a http . HandlerFunc that verifies that the specified username and password are correct .
3989	VerifyJSONRepresenting returns a handler that verifies that the given object is a valid JSON representation .
3990	VerifyFormKV validates the form with the given key and values .
3991	RespondWithProto returns a http . HandlerFunc that responds with the given message .
3992	RegisterFailHandlerWithT registers a fail handler with the given TWithHelper
3993	EventuallyWithOffset creates an async assertion that waits for an eventually assertion to be fulfilled .
3994	ConsistentlyWithOffset implements the ConsistentlyAssertion interface .
3995	Expect implements Assertion .
3996	Eventually implements the Assertion interface .
3997	Consistently implements Assertion . Consistently .
3998	TimeoutCloser wraps an io . Closer with a timeout .
3999	TimeoutReader wraps an io . Reader with a timeout .
4000	TimeoutWriter wraps an io . Writer with a timeout .
4001	Nest returns a nested error at the given path .
4002	SetMockService sets the mock service
4003	FindMachineByIdOrAddress returns the machine with the given id or address .
4004	Write implements the http . ResponseWriter Write method .
4005	Hijack implements the http . Hijacker interface .
4006	ListDeploys returns a list of all deploys matching the given filter .
4007	AddAll adds a handler for all GET POST PUT DELETE .
4008	samlRequestTimeout returns the saml request timeout
4009	RegisterHandler registers a handler for the given path and method .
4010	RegisterHandlerVersion adds a new TsuruHandler to the list .
4011	Check returns the status of all registered checkers .
4012	DiscoverRepositoryPath returns the path to the . git directory in the given directory .
4013	OpenRepository opens a git repository .
4014	RemoteURL returns the remote URL for the named remote .
4015	List lists all Apps in the indexer .
4016	Apps returns an object that can list and get Apps .
4017	List lists all Apps in the indexer for a given namespace .
4018	StreamJSONResponse streams the response body to the writer .
4019	DropDatabase drops a database .
4020	Collection returns the named collection .
4021	SetLogger sets the target s logger .
4022	Error logs an error .
4023	Errorf logs an error .
4024	Fatal is part of the Target interface .
4025	Debugf is part of the Target interface .
4026	GetStdLogger returns the target s standard logger .
4027	Namespace returns the cluster namespace
4028	recreateContainers creates containers for the specified nodes and writes them to the given writer .
4029	checkProvisioner checks if provisioner is configured .
4030	checkDocker checks that docker is configured .
4031	checkScheduler returns an error if the scheduler is not configured .
4032	checkRouter checks that the default router is configured .
4033	Available returns true if the unit is available .
4034	Get returns a provisioner by name .
4035	Registry returns a slice of provisioners .
4036	Error returns the string representation of the error .
4037	validateVersion returns true if the supported version is greater than the current version .
4038	ReadTarget reads the TSURU_TARGET environment variable .
4039	WriteTarget writes the target file .
4040	WriteOnTargetList writes a label and target to targets file .
4041	Conn returns a connection to the database .
4042	Apps returns a collection of apps .
4043	PoolsConstraints is defined on the Storage interface .
4044	Users is defined on the Storage interface .
4045	SAMLRequests is defined on the Storage interface .
4046	AppLogCollection implements storage . AppLogCollection .
4047	CreateAppLogCollection creates a log collection for the specified app .
4048	LogsCollections implements storage . Storage . LogsCollections .
4049	ArchiveBuildCmds returns the command line arguments for the archive build
4050	ArchiveDeployCmds returns the command line arguments for the deploy command
4051	DeployCmds returns the list of commands to deploy the given application .
4052	runWithAgentCmds runs the tsuru_unit_agent command for the given app .
4053	newApps returns a Apps
4054	Commit commits the container
4055	processTags takes a list of tags and returns a list of tags that are not used .
4056	aggregateContainersBy returns a map of hostaddr - > count
4057	chooseNodeToAdd will choose a node to add to a container
4058	chooseContainerToRemove will choose a node to remove a container from
4059	Get returns a router by name .
4060	Default returns the name of the default router .
4061	Store creates or updates an app s router
4062	TsuruV1 retrieves the TsuruV1Client
4063	Tsuru retrieves the TsuruV1Client
4064	NewAppInformer constructs a new informer for App type . Always prefer using an informer factory to get a shared informer instead of getting an independent one . This reduces memory footprint and number of connections to the server .
4065	NewFilteredAppInformer constructs a new informer for App type . Always prefer using an informer factory to get a shared informer instead of getting an independent one . This reduces memory footprint and number of connections to the server .
4066	Watch returns a watch . Interface that watches the requested apps .
4067	Patch applies the patch and returns the patched app .
4068	NewSharedInformerFactory creates a new SharedInformerFactory .
4069	NewFilteredSharedInformerFactory creates a new instance of a sharedInformerFactory .
4070	Proxy is not available for broker services
4071	UnbindUnit is part of the BindService interface .
4072	Create creates a new plan .
4073	Remove removes a plan from storage .
4074	ensureDefault creates a default plan if it doesn t exist .
4075	DeleteInstance deletes a service instance
4076	ToInfo converts a ServiceInstance to a ServiceInstanceWithInfo .
4077	Update updates a service in the database .
4078	BindApp binds an app to a service instance .
4079	BindUnit binds a unit to an app .
4080	UnbindApp unbinds an app .
4081	Status returns the status of the service .
4082	ProxyInstance proxies the request to the specified instance .
4083	Inc increments an application s quota .
4084	SetLimit sets the quota limit for an app . If limit is lower than allocated an error is returned .
4085	Set sets the quota usage for an app .
4086	Get returns the quota for an app .
4087	RemoveImage removes an image from the docker registry .
4088	RemoveAppImages removes all docker images for an app .
4089	Create creates a platform
4090	List returns a list of available platforms .
4091	FindByName returns a platform by name .
4092	Update updates a platform
4093	Remove removes a platform from the database
4094	Rollback rolls back a platform
4095	GetPoolByName returns the pool with the given name .
4096	Manager returns the default repository manager .
4097	Register adds a repository manager to the registry .
4098	start starts the bind syncer .
4099	Shutdown shuts down the bindSyncer .
4100	GetForProvisioner returns the builder for the given provisioner .
4101	get returns the builder with the given name .
4102	Registry returns a list of registered builders .
4103	RegisterQueueTask registers a task in a queue .
4104	Apps returns a AppInformer .
4105	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new App .
4106	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new AppList .
4107	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new AppSpec .
4108	Write implements the io . Writer interface .
4109	ResetPassword will send a password reset token to the user .
4110	addKnownTypes adds known types to scheme .
4111	Register registers a Shutdownable .
4112	Do shuts down all registered Shutdownable objects .
4113	ListImagesOrDefault returns a list of all images for the given platform or an error if the platform image is not found .
4114	MigrateAppsCRDs migrates apps to CRDs .
4115	Register registers a migration function .
4116	RegisterOptional registers an optional migration function .
4117	Run runs the command with the given args .
4118	Units returns the units of the app .
4119	MarshalJSON returns a JSON representation of the app .
4120	AcquireApplicationLockWait waits for an application lock to be acquired .
4121	ReleaseApplicationLock releases the application lock .
4122	GetByName returns the app with the given name
4123	AddUnits adds units to an app .
4124	SetUnitStatus sets the status of a unit
4125	UpdateNodeStatus updates the node status
4126	available returns true if the app is available .
4127	Grant adds a new team to the app s team list
4128	Revoke removes a team from the list of teams
4129	GetTeams returns a list of teams
4130	setEnv sets the environment variable for the app .
4131	getEnv returns the environment variable for the app .
4132	validateNew validates a new app .
4133	validate checks if the app is valid .
4134	InstanceEnvs returns a map of environment variables for the specified service and instance .
4135	Run runs the specified command and writes the output to the given writer .
4136	GetUnits returns a list of all registered units .
4137	GetUUID returns the UUID of the app
4138	Envs merges app . Env and app . ServiceEnvs into a single map .
4139	SetEnvs sets new environment variables for the app .
4140	UnsetEnvs unsets the app s environment variables
4141	AddCName adds cnames to the app
4142	Log adds a log message to the app .
4143	LastLogs returns the last lines of logs filtered by filterLog .
4144	List returns all apps that match the given filter .
4145	Swap is used to swap two apps with a single router
4146	Start starts the app with the specified process .
4147	GetDbDriver returns a database driver by name .
4148	GetCurrentDbDriver returns the current database driver .
4149	NewForConfig creates a new Clientset for the given config .
4150	GetAppFromUnitID returns the app for the given unit ID .
4151	NewPipeline creates a new pipeline with the given actions .
4152	Result returns the result of the last action .
4153	DecodeJsonPayload decodes the JSON payload of the request into the value pointed to by v .
4154	UrlFor returns the URL for the given path and query params .
4155	GetCorsInfo returns the CORS information for the request .
4156	MiddlewareFunc creates a new CORS middleware .
4157	MiddlewareFunc returns a middleware that records the response .
4158	WriteHeader implements http . ResponseWriter .
4159	MakeRouter creates a new router .
4160	AppFunc returns a handler for the given request .
4161	escapedPath returns the escaped path from the request URI .
4162	escapedPathExp returns the escaped form of pathExp .
4163	start initializes the router .
4164	ofFirstDefinedRoute returns the first defined route in a list of matches .
4165	findRouteFromURL finds the route for the given HTTP method and URL .
4166	MiddlewareFunc returns a HandlerFunc that checks the Content - Type and charset .
4167	CloseNotify implements http . CloseNotifier .
4168	MiddlewareFunc returns a middleware that logs access logs to the logger .
4169	executeTextTemplate executes the text template and returns the result .
4170	RemoteUser returns the remote user if set .
4171	ApacheQueryString returns the query string for the current request .
4172	StartTime returns the start time of the process .
4173	ApacheRemoteAddr returns the Apache remote address .
4174	ResponseTime returns theELAPSED_TIME environment variable .
4175	MiddlewareFunc returns a new JsonIndentMiddleware .
4176	EncodeJson implements the json . Marshaler interface .
4177	WriteHeader implements the http . ResponseWriter interface .
4178	MakePath creates a path from a map of path parameters .
4179	MiddlewareFunc is middleware for recovering from panics .
4180	WrapMiddlewares wraps a HandlerFunc with middlewares .
4181	MiddlewareFunc returns a new GzipMiddleware .
4182	WriteHeader implements the http . ResponseWriter WriteHeader method .
4183	Hijack implements http . Hijacker .
4184	Write implements the io . Writer interface .
4185	MiddlewareFunc adds basic auth to the request .
4186	printDebug prints a debug node .
4187	AddRoute adds a route to the trie .
4188	printDebug prints a pretty - printed representation of the tree .
4189	FindRoutes returns a list of matches for the given HTTP method and path .
4190	FindRoutesAndPathMatched returns a list of matches for the given HTTP method and path .
4191	FindRoutesForPath finds all routes that match the given path .
4192	Use adds middlewares to the stack .
4193	MakeHandler returns an http . Handler for the API .
4194	MiddlewareFunc adds the X - Powered - By header to the request .
4195	MiddlewareFunc wraps a HandlerFunc in a StatusMiddleware .
4196	GetStatus returns the current status of the process
4197	MiddlewareFunc returns a new middleware function .
4198	Flush implements the http . Flusher interface .
4199	MiddlewareFunc returns a middleware that logs access log records to the logger .
4200	Fetch fetches an object from S3 .
4201	sanityCheck returns true if envBinCheck or envBinCheckLegacy is set .
4202	release closes the listener and waits for the timeout to elapse .
4203	fetchLoop runs in its own goroutine .
4204	forkLoop is a long lived fork loop .
4205	Init initializes the File .
4206	Fetch returns an io . Reader that can be used to read the file .
4207	Fetch returns an io . Reader that can be used to read from the server .
4208	NewConfig returns a new instance of Config .
4209	Validate validates the configuration .
4210	NewClient creates a new sarama client .
4211	AsyncClose closes the partition consumer asynchronously .
4212	Close closes the partition consumer .
4213	MarkOffset updates the partition info s offset and metadata .
4214	NewConsumer creates a new consumer .
4215	MarkOffsets removes all offsets from the stashed offsets map .
4216	ResetOffset resets the offset for the given message .
4217	Close closes the consumer .
4218	hbLoop is a long lived goroutine that periodically polls for a heartbeat .
4219	twLoop is a long running goroutine that periodically refreshes the topic metadata .
4220	cmLoop is a long lived goroutine that commits messages to Kafka .
4221	fetchOffsets returns a map of offsets for each topic and partition .
4222	MarkOffset marks an offset for a given topic and partition .
4223	ResetOffset resets the offset for a message .
4224	Offsets returns the current set of offsets .
4225	Actual creates a new instance group based on the current instance .
4226	Expected returns the immutable cluster and the expected instance group .
4227	Delete removes the instance group from the cluster
4228	GetReconciler returns a cloud . Reconciler .
4229	GetVersion returns the version information .
4230	GetVersionJSON returns the version as a JSON string .
4231	Actual returns the actual resource group
4232	Expected creates a new resource group based on the current state .
4233	CreateCmd implements the OpenShift cli create command
4234	NewUbuntuCluster creates a new ubuntu cluster
4235	ProviderConfig returns the ControlPlaneProviderConfig for the cluster
4236	SetProviderConfig sets the provider config for the cluster
4237	MachineProviderConfigs returns the provider configs for all the machines in the cluster .
4238	SetMachineProviderConfigs sets the provider configs for the cluster
4239	NewCluster creates a new Cluster .
4240	DeployControllerCmd returns the cobra command for deploy - controller
4241	NewRetrier creates a new Retrier
4242	RunRetry runs the retry loop .
4243	MustGenerateRandomBytes is like GenerateRandomBytes but panics on error .
4244	ExplainCmd implements the OpenShift cli explain command
4245	TimeOrderedUUID generates a time - ordered UUID .
4246	GetConfigCmd returns a cobra command for config command
4247	RunAnnotated runs an annotated task .
4248	ListCmd returns the list command
4249	NewUbuntuCluster creates a new ubuntu cluster
4250	EditCmd returns a new instance of the edit command
4251	RemoveKey removes a public key from the keyring .
4252	RemoveKeyUsingFile removes a key from the keyring using a file .
4253	Actual returns the actual state of the firewall
4254	Expected returns the actual state of the Firewall resource .
4255	Apply applies the firewall to the immutable cluster .
4256	Delete deletes the firewall resource
4257	DeleteCmd returns a cobra command for kubicorn delete
4258	NewStateStore creates a new state store based on the given options .
4259	Commit commits a cluster to the remote .
4260	ApplyCmd implements the OpenShift cli apply command
4261	ExpandPath expands a path to the current working directory .
4262	CompletionCmd returns the completion command
4263	AdoptCmd implements the OpenShift cli adopt command
4264	StrEnvDef returns the value of the specified environment variable or the default value .
4265	IntEnvDef returns an int from an environment variable . If not found returns def .
4266	BoolEnvDef returns the boolean value of the specified environment variable or the default value if the environment variable is not set .
4267	readFromFS reads the contents of a file from the local filesystem .
4268	VersionCmd implements the OpenShift cli version command
4269	NewSignalHandler creates a new signal handler .
4270	Register starts a goroutine to handle SIGINT SIGQUIT and SIGTERM .
4271	NewUbuntuCluster creates a new ubuntu cluster
4272	BeginningOfHour returns the beginning of the hour .
4273	BeginningOfDay returns the beginning of the current time .
4274	BeginningOfWeek returns the beginning of the current day of the week .
4275	BeginningOfMonth returns the beginning of the current month .
4276	BeginningOfQuarter returns the beginning of the current quarter .
4277	BeginningOfYear returns the beginning of the current year .
4278	EndOfMinute returns the end of the minute .
4279	EndOfHour returns the end of the hour .
4280	EndOfDay returns the end of the day of the current time .
4281	EndOfWeek returns the end of the week of the current time .
4282	EndOfMonth returns the end of the current month .
4283	EndOfQuarter returns the end of the current quarter .
4284	EndOfYear returns the end of the current year .
4285	MustParse is like Parse but panics on error .
4286	Between returns true if the current time is between begin and end time .
4287	ParseInLocation parses a time . Time in a given time . Location .
4288	MustParse is like Parse but panics on error .
4289	MustParseInLocation is like Parse but panics on error .
4290	Between returns true if time1 is between time2
4291	NewChannelMemoryBackend creates a new ChannelMemoryBackend .
4292	Start starts the memory backend .
4293	Flush sends a flush event .
4294	Stop stops the memory backend .
4295	Formatted returns the formatted string of the record .
4296	Message returns the message of the record .
4297	SetBackend sets the underlying LeveledBackend .
4298	MustGetLogger is like GetLogger but panics on error .
4299	Reset resets the log backend to the standard output .
4300	IsEnabledFor returns true if the logger is enabled for the given log level .
4301	Criticalf logs a message at critical level .
4302	Warningf logs with a WARNING level .
4303	Noticef logs with the NOTICE level .
4304	Infof logs with the INFO level .
4305	SetFormatter sets the default formatter .
4306	MustStringFormatter is like NewStringFormatter but panics on error .
4307	formatFuncName returns the name of a function .
4308	Log implements the Backend interface .
4309	LogLevel returns the log level for the given string .
4310	AddModuleLevel adds the given backend as a module leveled backend .
4311	GetLevel returns the level for the given module .
4312	SetLevel sets the level for the given module .
4313	IsEnabledFor returns true if the given level is enabled for the given module .
4314	MultiLogger creates a new instance of MultiLogger .
4315	Log implements the Logger interface .
4316	GetLevel returns the highest level for a given module .
4317	SetLevel implements the Logger interface .
4318	IsEnabledFor returns true if the given log level is enabled for the given module .
4319	ConvertColors converts a slice of colors to a slice of color strings .
4320	NewSyslogBackend creates a new syslog backend .
4321	NewSyslogBackendPriority creates a new syslog backend with the given priority .
4322	SetBackend sets the default logger backend .
4323	NewCommander creates a new commander
4324	Execute executes all commands in the command group .
4325	explain prints a human - readable description of the commands .
4326	explainGroup prints a human - readable description of a command group .
4327	explain prints the usage of the command to the given writer .
4328	dealias removes the alias from the command if it is an aliaser .
4329	Execute calls the default commander
4330	LoadFromData loads configuration from data .
4331	LoadFromReader loads a configuration from an io . Reader .
4332	ReloadData reloads the configuration from the given io . Reader .
4333	AppendFiles appends one or more files to the current configuration .
4334	GetKeyList returns the list of keys in the given section .
4335	SaveConfigData writes configuration data to out .
4336	SaveConfigFile saves the configuration to a file .
4337	Find finds the first element matching the selector . It returns a new Selection object containing the matched elements .
4338	FindByXPath gets the first element that matches the given XPath . It returns a new Selection object containing the matched elements .
4339	FindByLink selects the first element that matches the given link . It returns a new Selection object containing the matched elements .
4340	FindByLabel returns a new Selection object containing the matched elements .
4341	FindByName returns a new Selection object containing the matched elements .
4342	FindByClass gets the first element that matches the selector with the given class . It returns a new Selection object containing the matched elements .
4343	FindByID returns a new Selection object containing the matched elements .
4344	First gets the first element in the set of matched elements . It returns a new Selection object containing the matched elements .
4345	FirstByXPath gets the first element in the Selection filtered by a selector . It returns a new Selection object containing the matched elements .
4346	FirstByLink gets the first element in the Selection filtered by a link . It returns a new Selection object containing the matched elements .
4347	FirstByLabel gets the first element in the Selection filtered by a label . It returns a new Selection object containing the matched elements .
4348	FirstByName gets the first element that matches the selector with the given name . It returns a new Selection object containing the matched elements .
4349	All implements the SelectAll interface .
4350	AllByXPath returns all elements matching the given XPath .
4351	AllByLink implements the Selectable interface .
4352	AllByLabel implements the Selectable interface .
4353	AllByName implements the Selectable interface .
4354	AllByClass implements the Selectable interface .
4355	AllByID creates a new multi - selection that matches the given text .
4356	FindForAppium returns a new Selection object containing the matched elements .
4357	Timeout is an Option to set the timeout .
4358	ChromeOptions is a functional option on Config .
4359	JoinPage joins a page with the given URL .
4360	Destroy destroys the page s session .
4361	Reset resets the browser session and local storage .
4362	Navigate sets the current URL .
4363	GetCookies returns all cookies associated with the current session .
4364	SetCookie sets a cookie on the page .
4365	DeleteCookie deletes the cookie with the given name .
4366	ClearCookies removes all cookies from the session .
4367	URL returns the URL of the current page .
4368	Size sets the size of the page .
4369	Screenshot saves the page s screenshot to the given filename .
4370	Title returns the page title .
4371	HTML returns the HTML of the page .
4372	PopupText returns the text of the popup .
4373	EnterPopupText is used to enter a popup text .
4374	ConfirmPopup asks the user to confirm the popup .
4375	CancelPopup cancels the popup .
4376	SwitchToParentFrame switches to the parent frame of the current page .
4377	SwitchToRootFrame switches to the root frame of the page .
4378	NextWindow moves the current page to the next available window .
4379	CloseWindow closes the active window .
4380	WindowCount returns the number of available windows .
4381	LogTypes returns a list of log types .
4382	MoveMouseBy moves the mouse by the given offset .
4383	DoubleClick double clicks the page .
4384	Click sends a click event to the specified button .
4385	Click calls Click on each element in the Selection .
4386	DoubleClick double - clicks on all elements in the Selection .
4387	Fill fills the selected elements with the given text .
4388	Tap sends a tap event to all elements in the selection .
4389	Touch sends a touch event to all elements in the selection .
4390	FlickFinger selects the first selected element and touches the finger on it .
4391	ScrollFinger scrolls to the first element in the set of matched elements .
4392	NewCapabilities creates a new Capabilities with the given features .
4393	JSON returns the capabilities as a JSON string .
4394	HaveTitle matcher checks if the given title matches the expected title .
4395	HaveURL matcher for URLs
4396	HavePopupText matcher checks if the given text matches the popup text
4397	HaveLoggedError returns a matcher that matches when an error occurs .
4398	Text returns the text of the first element in the set of matched elements .
4399	Active returns true if the currently selected element is equal to the active element .
4400	Attribute gets the attribute of the first element in the set of matched elements .
4401	CSS gets the CSS property of the first element in the set of matched elements .
4402	Selected returns true if the element is currently selected .
4403	Visible returns whether the current matched element is visible .
4404	Enabled returns whether the current element is enabled .
4405	HaveCount returns a matcher that matches the number of elements .
4406	HaveAttribute returns a matcher that matches if the given attribute matches the given value .
4407	EdgeDriver creates a new EdgeDriver .
4408	Selendroid creates a new WebDriver using the given jar file path .
4409	SwitchToFrame switches to the frame of the first element in the set of matched elements .
4410	Count returns the number of matched elements .
4411	EqualsElement returns true if the selected element is equal to the other element .
4412	MouseToElement moves the mouse to the selected element .
4413	loggingMiddleware is a logging middleware .
4414	chainHandlers chains the middlewares in reverse order .
4415	HTTPReverseProxy starts a reverse proxy server .
4416	CheckInstallation checks that all installed binary versions are within the given range .
4417	CheckVersion checks if the given version is within the given semver range .
4418	GetVersionForBinary returns the version of the given binary
4419	getUser retrieves a user by ID .
4420	login authenticates the user with the given username and password .
4421	loginHandler handles the login request .
4422	logoutHandler is used to logout the user .
4423	viewHandler renders the login page .
4424	Run starts the user service .
4425	WithRequest adds the request to the Interaction .
4426	WillRespondWith sets the response for the Interaction .
4427	isJSONFormattedObject returns true if stringOrObject is a JSON formatted object .
4428	ByUsername returns the user with the given username or ErrNotFound if not found .
4429	ByID finds a user by ID . Returns ErrNotFound if not found .
4430	UserLogin logs a user in .
4431	newClient creates a new instance of PactClient
4432	NewClient creates a new PactClient .
4433	ListServers returns a list of mock servers
4434	UpdateMessagePact creates a pact message
4435	PublishPacts publishes pacts
4436	getPort returns the port for the given URL .
4437	getAddress returns the host part of the URL .
4438	sanitiseRubyResponse sanitises the response from a Ruby process
4439	Publish publishes pacts
4440	FindPortInRange searches for a port in a range
4441	EachLike returns a matcher that matches the given content .
4442	Term creates a new term matcher
4443	UnmarshalJSON implements the json . Unmarshaler interface .
4444	objectToString converts an object into a string .
4445	match returns a matcher for the given source type .
4446	AddMessage adds a new message to the pact
4447	AddInteraction adds a new interaction to the pact
4448	Teardown stops the pact server .
4449	Verify performs an integration test on the pact server .
4450	stateHandlerMiddleware returns a middleware that invokes each state handler in the stateHandlers map .
4451	VerifyMessageProviderRaw verifies a message using the provider and returns the response .
4452	VerifyMessageConsumerRaw is the same as VerifyMessageConsumer but accepts a raw message .
4453	VerifyProvider is a mock
4454	NewService creates a new service
4455	Setup sets up the service manager
4456	addServiceMonitor is a long lived goroutine that adds the service to the process map
4457	removeServiceMonitor is a long lived goroutine that removes the service monitor from the process map .
4458	List returns the list of services
4459	Command returns the command for the service manager
4460	call will make an HTTP request to the given URL with the given content .
4461	DeleteInteractions mock service delete interactions
4462	AddInteraction add interaction
4463	WritePact mock service write pact
4464	ExpectsToReceive sets the description of the message to be expected to receive .
4465	WithMetadata sets the metadata on the message
4466	AsType sets the type of the message .
4467	UserLogin handles the login request .
4468	Region returns the region of the S3 endpoint .
4469	New creates a new instance of S3 .
4470	Bucket creates a new bucket with the given name .
4471	PutWriter returns an io . WriteCloser that will write the contents of the file at the given path .
4472	url returns a URL for the bucket at the given path .
4473	SetLogger sets the logger .
4474	InstanceKeys returns a list of instance keys .
4475	EnvKeys returns the keys set in the environment .
4476	Sign sets the X - Amz - Security - Token on the request
4477	getAWSKeys returns the AWS keys .
4478	homeDir returns the home directory for the current user .
4479	ACL sets the x - amz - acl header .
4480	putPart performs a PUT request for the given part .
4481	abort aborts a multipart upload .
4482	growPartSize returns true if the size of a part is greater than the max object size .
4483	CheckDisallowed returns an error if any of the environment variables in the given spec are not allowed .
4484	Process parses the given spec and returns an error if an error occurs .
4485	MustProcess is like Process but panics on error .
4486	toTypeDescription returns a human - readable description of the given type .
4487	Usage prints usage information for the given spec .
4488	Usagef is the same as Usage but takes a format string .
4489	Usaget generates the info for the given spec and writes the result to out .
4490	Scan implements the sql . Scanner interface .
4491	Value implements the driver . Valuer interface
4492	NewTime creates a new Time .
4493	TimeFromPtr converts a time . Time pointer to a time . Time .
4494	ValueOrZero returns the time . Time value or zero if the time is invalid .
4495	MarshalJSON implements the json . Marshaler interface .
4496	SetValid sets time . Time to v and sets Valid to true .
4497	Ptr returns pointer to time . Time .
4498	NewBool creates a new Bool .
4499	BoolFromPtr converts a pointer to a bool
4500	UnmarshalJSON implements the json . Unmarshaler interface .
4501	UnmarshalText implements the encoding . TextUnmarshaler interface .
4502	MarshalJSON implements the json . Marshaler interface .
4503	SetValid sets the boolean to the given value .
4504	NewString creates a new String
4505	UnmarshalJSON implements the json . Unmarshaler interface for String .
4506	MarshalText implements the encoding . TextMarshaler interface .
4507	UnmarshalText implements the encoding . TextUnmarshaler interface .
4508	SetValid sets the Valid field s value .
4509	StringFromPtr creates a string from a pointer to a string .
4510	MarshalJSON implements the json . Marshaler interface .
4511	NewInt creates a new integer value .
4512	IntFromPtr creates a new Int from a pointer .
4513	UnmarshalJSON implements the json . Unmarshaler interface for Int .
4514	MarshalText implements the encoding . TextMarshaler interface .
4515	SetValid sets the value of the Int to the given value .
4516	UnmarshalText implements the encoding . TextUnmarshaler interface .
4517	MarshalText implements the encoding . TextMarshaler interface .
4518	SetValid sets the value of the Float .
4519	MarshalJSON implements the json . Marshaler interface for Time .
4520	UnmarshalJSON implements the json . Unmarshaler interface .
4521	UnmarshalText implements the encoding . TextUnmarshaler interface .
4522	MarshalJSON implements json . Marshaler for Float .
4523	newGossipChannel creates a new gossip channel .
4524	GossipUnicast sends an unicast message to dstPeerName .
4525	GossipBroadcast sends a gossip message to the peer .
4526	Send sends a GossipData to the peer .
4527	SendDown sends a down message to the given connection .
4528	gobEncode returns the gob encoding of the given items .
4529	newTokenBucket creates a new tokenBucket with the given capacity and token interval .
4530	wait waits until the earliest unspent token expires .
4531	capacityToken returns the current time of the token bucket s capacity .
4532	PrefixRangeEnd returns the end of a prefix range .
4533	newLocalPeer creates a new local peer .
4534	getConnections returns a set of connections in the local peer .
4535	createConnection creates a new connection to the remote peer .
4536	doAddConnection adds a connection to the remote peer .
4537	startLocalConnection starts a new local connection .
4538	SendProtocolMsg sends a protocol message .
4539	NewStatus creates a new Status from a Router .
4540	makePeerStatusSlice returns a slice of PeerStatus for each peer .
4541	makeUnicastRouteStatusSlice returns a slice of unicast route statuses .
4542	makeBroadcastRouteStatusSlice returns a slice of broadcastRouteStatus .
4543	makeLocalConnectionStatusSlice returns a slice of LocalConnectionStatus .
4544	makeTrustedSubnetsSlice converts a slice of net . IPNet to a slice of strings .
4545	Range implements the EtcdStore interface .
4546	Put is part of the EtcdStore interface .
4547	DeleteRange implements the etcdserverpb . Store interface .
4548	Txn is part of the EtcdStore interface .
4549	Compact is not implemented
4550	proposeInternalRaftRequest proposes an InternalRaftRequest .
4551	applyCompare applies a compare to a key .
4552	Descriptions returns a slice of peer descriptions .
4553	OnGC adds a callback to be called when a peer is garbage collected .
4554	OnInvalidateShortIDs adds a callback which is called when the peer is about to invalidate the short IDs .
4555	chooseShortID returns a random peer short ID .
4556	fetchWithDefault attempts to fetch a peer with the given name . If the peer already exists it is overwritten .
4557	Fetch returns the peer with the given name .
4558	fetchAndAddRef returns the peer with the given name and increments the localRefCount .
4559	FetchByShortID returns the peer with the given short ID .
4560	GarbageCollect sends a garbage collection notification to all connected peers .
4561	newRoutes creates a new routes object .
4562	OnChange adds a callback to be called when a route changes .
4563	Unicast returns the hop for the given peer name .
4564	UnicastAll returns the hop for the given peer name if any .
4565	Broadcast returns the broadcast peers for the given peer name .
4566	BroadcastAll returns the list of broadcast peers for the given peer name .
4567	NewPeer creates a new peer .
4568	Register adds a new gossip to the peer .
4569	ReadFrom implements net . PacketConn . ReadFrom .
4570	WriteTo implements the io . WriterTo interface .
4571	LocalAddr returns the local address of the peer .
4572	OnGossip implements peer . Peer . OnGossip .
4573	OnGossipBroadcast is invoked when a peer broadcasts a packet .
4574	OnGossipUnicast is called when a peer receives a gossip packet .
4575	NewDefaultServer creates a new server .
4576	PeerNameFromUserInput returns the peer name from the user input .
4577	bytes returns the bytes representation of the PeerName .
4578	NewRouter creates a new router .
4579	sendAllGossip sends all gossip messages to all channels .
4580	sendAllGossipDown sends all gossip down messages to all channels .
4581	broadcastTopologyUpdate broadcasts a list of peers to all connected peers .
4582	OnGossipUnicast is called when a peer receives a gossip unicast message
4583	OnGossipBroadcast is called when a peer broadcasts a gossip message
4584	Gossip returns a GossipData object representing the current topology of the router .
4585	OnGossip is called when a gossip message is received
4586	Encode returns the serialized representation of the GossipData .
4587	newState returns a new state with the given peer name .
4588	Merge merges the given GossipData into the current state and returns the complete state .
4589	mergeReceived takes a set of peers and returns a new state .
4590	mergeComplete returns a copy of the current set with the new set .
4591	OnGossipBroadcast implements GossipListener . OnGossipBroadcast
4592	OnGossip is called when a gossip message is received
4593	generateKeyPair generates a new key pair
4594	formSessionKey computes the session key from the remote public key and the local private key .
4595	newTCPCryptoState creates a new tcpCryptoState .
4596	Send sends a message .
4597	Send is part of the tcp . Sender interface .
4598	Send is part of the sender . Sender interface .
4599	Receive returns the next message from the stream .
4600	Receive reads a length prefix TCP message .
4601	Receive is part of the Receiver interface .
4602	newPeer creates a new peer .
4603	incr increases the number of members in the peer .
4604	Gossip returns the complete state of the peer .
4605	OnGossipUnicast is called when a peer broadcasts a gossip message .
4606	makeRaftPeer creates a raft . Peer from a net . Addr .
4607	String returns a string representation of a peer .
4608	forEachConnectedPeer calls f for each connected peer .
4609	parsePeerUID parses a string into a PeerUID
4610	Swap swaps the elements at the given indices .
4611	Less returns whether the peer with index i should sort before the peer with index j .
4612	doIntro executes the protocol intro .
4613	filterV1Features returns a copy of the input map with only the features that are not present in the input map .
4614	newConnectionMaker creates a new connectionMaker .
4615	connectionAborted is part of the ConnectionMaker interface .
4616	newGossipSender creates a new gossip sender .
4617	Send sends a gossip message .
4618	Broadcast adds a new GossipData to the list of broadcasts
4619	Flush returns true if the send queue is full false otherwise .
4620	Sender returns a gossip sender for the given channel . If the channel does not exist a new one is created .
4621	Flush calls Flush on all senders
4622	findMainPath finds main . main or testing . tRunner .
4623	Create creates a new channel .
4624	Send sends a message to a client .
4625	SendJSON sends a JSON - encoded message .
4626	remapError remaps an API error to the channel if it is an xmpp error .
4627	NamespacedContext returns a new context with the given namespace .
4628	protoToItem converts pb . MemcacheGetResponse_Item to Item .
4629	singleError returns the first error if it is a MultiError .
4630	Get returns the item with the given key . ErrCacheMiss is returned if the key is not in the cache .
4631	GetMulti returns a map of items for the given key .
4632	Delete removes the value for the given key .
4633	DeleteMulti deletes a set of keys .
4634	Increment increments the value stored at key by delta and returns the new value .
4635	IncrementExisting increments an existing value .
4636	set sets the item with the given value and policy .
4637	Get retrieves the item with the given key and stores the result in the value pointed to by v .
4638	Stats returns the memcache statistics .
4639	Flush calls memcache . FlushAll RPC .
4640	RunInBackground runs the function f in the background .
4641	List returns a list of all installed modules .
4642	SetNumInstances sets the number of instances in a module version .
4643	Versions returns a list of all versions of a module . If module is an empty string all versions are returned .
4644	DefaultVersion returns the default version for the given module .
4645	Start starts a module with the given module name and version .
4646	Stop stops the module with the given name and version .
4647	Ancestor sets the ancestor of the query .
4648	EventualConsistency sets the eventual field of the query .
4649	Project adds a projection field to the query .
4650	Distinct adds a DISTINCT clause to the query .
4651	DistinctOn adds a DISTINCT ON clause to the query .
4652	KeysOnly sets the keysOnly field to true .
4653	Limit sets the limit for the query .
4654	Offset sets the offset of the query .
4655	BatchSize sets the batch size of the query .
4656	Start sets the cursor to the start of the query .
4657	End sets the cursor to the end of the query .
4658	Count returns the number of results in the query .
4659	Run runs the query and returns an iterator .
4660	Next returns the next key in the iterator and loads it into dst if dst is not nil .
4661	Cursor returns the cursor for this iterator .
4662	String returns the string representation of the cursor .
4663	DecodeCursor decodes a cursor from a string .
4664	saveEntity saves a single entity .
4665	Namespace returns a new context with the given namespace . If the namespace is not valid an error is returned .
4666	typeof returns the type of a variable or function .
4667	dot returns the dot - delimited name of the field or method .
4668	joinFunc joins a function with a space .
4669	validPropertyName returns true if name is a valid property name .
4670	getStructCodec returns the structCodec for the given type .
4671	LoadStruct loads a struct into dst . dst must be a struct pointer .
4672	SaveStruct saves a struct .
4673	ServingURL returns the base URL for a blob .
4674	DeleteServingURL deletes the serving URL for the given blob .
4675	CurrentOAuth returns information about the currently logged in user using OAuth .
4676	OAuthConsumerKey returns the OAuth consumer key for the current user .
4677	String returns a string representation of the user .
4678	LoginURL returns the login URL .
4679	LoginURLFederated returns the login URL for the specified user . If identity is non - empty the login URL will be federated .
4680	LogoutURL creates a logout URL .
4681	insertContext inserts a context into a call expression .
4682	NewClient returns a new instance of Client .
4683	NewContext returns a new context that overrides the parent context .
4684	NewRemoteContext creates a new context for a remote server .
4685	Debugf logs a message at level = debug
4686	guestbookKey returns the default guestbook key .
4687	toRetryParameters converts RetryOptions to TaskQueueRetryParameters .
4688	NewPOSTTask creates a new task with a POST request .
4689	ParseRequestHeaders parses the request headers .
4690	Add adds a task to a task queue .
4691	AddMulti adds multiple tasks to a task queue .
4692	Delete deletes a task from the given queue .
4693	DeleteMulti deletes multiple tasks from a task queue .
4694	Lease returns a list of tasks for a given queue with the given lease time .
4695	LeaseByTag is like Lease but takes a tag .
4696	Purge removes all tasks from the specified queue .
4697	ModifyLease updates the task s ETA .
4698	QueueStats returns statistics about the specified queues .
4699	IsTimeoutError returns true if the error is a timeout .
4700	Func registers a function with the given key .
4701	Task returns a taskqueue task for the function .
4702	RequestHeaders returns the taskqueue . RequestHeaders associated with the context .
4703	WithContext returns a new context with the given parent and request .
4704	WithAPICallFunc returns a context with the given APICallFunc override .
4705	APICall calls the given method on the given service .
4706	ModuleHostname returns the hostname for the given module version and instance .
4707	AccessToken returns an access token and expiry time .
4708	PublicCertificates returns a list of all public certificates for the app .
4709	ServiceAccount returns the name of the service account .
4710	SignBytes signs the given bytes and returns the key name and signature .
4711	fetch fetches data from the blobstore .
4712	seek moves the reader to the given offset .
4713	multiKeyToProto converts a slice of Key to a slice of Reference .
4714	referenceValueToKey converts a reference value to a Key .
4715	keyToReferenceValue converts a key to a reference value .
4716	Put stores src into the database .
4717	PutMulti is a convenience wrapper around datastore . PutMulti .
4718	Delete deletes the record with the given key .
4719	DeleteMulti deletes a set of keys .
4720	deploy runs the deploy command .
4721	Next returns the next record in the result .
4722	protoToAppLogs converts a slice of LogLines to a slice of AppLog .
4723	protoToRecord converts a RequestLog to a Record .
4724	Run executes the query .
4725	run executes the log service call .
4726	Current returns the current user from the request headers .
4727	IsAdmin returns true if the current user is an admin .
4728	isErrFieldMismatch returns true if the given error is a datastore . ErrFieldMismatch
4729	Stat returns the blobInfo for the given blobKey .
4730	Send sets the X - AppEngine - BlobKey header .
4731	UploadURL creates a blobstore upload URL .
4732	Delete deletes a blob from storage .
4733	DeleteMulti deletes multiple blobs .
4734	NewReader returns a reader for the given blob .
4735	Handle registers a function to receive a chat message .
4736	Send sends the message .
4737	Invite sends an invite to the given JID . If from is non - empty send the user to that JID .
4738	Send sends the presence .
4739	GetPresence returns the presence with the given Jid . If the presence is not available an error is returned .
4740	GetPresenceMulti returns a list of presences for a given JID . If the JID is not available an error is returned .
4741	newStructFLS returns a FieldLoadSaver for a struct .
4742	SaveStruct saves a struct to a slice of fields .
4743	Namespaces returns a list of all namespaces .
4744	Kinds returns a list of all known kinds .
4745	RunInTransaction runs a function in a transaction .
4746	imports returns true if the given file imports the given path .
4747	importSpec returns the import spec for the given path .
4748	declImports returns true if the given import is in the given path .
4749	isPkgDot returns true if t is a top level dot expression .
4750	isTopName returns true if n is an identifier with the given name .
4751	isName returns true if n is an identifier with the given name .
4752	isCall returns true if t is a call expression .
4753	refersTo returns true if n refers to x .
4754	isEmptyString returns true if the literal is a string .
4755	countUses returns the number of uses in the given scope .
4756	assignsTo returns true if x is assigned to any of the scope .
4757	newPkgDot returns a dot expression for the given package and name .
4758	renameTop renames the top level module to the new one . It returns true if the rename was fixed .
4759	matchLen returns the length of the longest match between x and y .
4760	deleteImport deletes the import from the given file .
4761	rewriteImport returns true if the import was rewritten .
4762	DefaultTicket returns the default app ticket .
4763	flushLog is a thread - safe version of FlushLog .
4764	withDeadline returns a copy of parent with the deadline set to deadline . If deadline is zero the parent context is returned .
4765	KeepAlive is used to keep the connection alive .
4766	applyTransaction applies a transaction to a proto message .
4767	analyze takes a list of tags and returns a list of app files .
4768	buildContext returns the default build context .
4769	synthesizeMain writes the main . go file to the given tar writer .
4770	findInGopath finds a package in the given gopath .
4771	copyTree copies the contents of the given directory to the given destination directory .
4772	copyFile writes the contents of src to the tar writer .
4773	checkMain checks if the app s main package has been changed .
4774	isMain returns true if the function is a main function .
4775	readFile reads the given file and returns true if the file has a main function .
4776	initField returns the value of the field at the given index .
4777	loadEntity loads the entity from src into dst . If dst implements PropertyLoadSaver LoadStruct will be used instead .
4778	validIndexNameOrDocID returns true if s is a valid index or document ID .
4779	Open opens a search index .
4780	Put creates a new record with the given id and src . It returns the ID of the record .
4781	Get returns the document with the given id . If no document with the given id exists ErrNoSuchDocument is returned .
4782	Delete removes a document from the index .
4783	DeleteMulti deletes multiple documents .
4784	Search returns an iterator that searches the index for the given query .
4785	fetchMore fetches the next page of results .
4786	Next returns the next document from the iterator . If dst is non - nil it will be populated with the results . If dst is non - nil it will be populated with the results .
4787	Facets returns all the facets in the iterator .
4788	DefaultBucketName returns the default GCE bucket name .
4789	valid returns true if the Key is valid .
4790	Equal returns true if two Key objects are equal .
4791	root returns the root Key .
4792	marshal marshals a Key to a buffer .
4793	String returns a string representation of the key .
4794	Encode encodes the key to a base64 - encoded string .
4795	DecodeKey decodes a key from a base64 encoded string .
4796	NewIncompleteKey creates a new incomplete key .
4797	NewKey returns a new Key .
4798	AllocateIDs allocates n IDs for the given kind and parent .
4799	IsOverQuota returns true if the error is due to a quota quota error .
4800	ClassicContextFromContext returns an appengine . Context from a netcontext . Context .
4801	Send sends a message .
4802	SendToAdmins sends a message to all admins .
4803	Failures returns the number of failures in the report .
4804	decodeFieldNumberAndTyp3 decodes a field number and its type .
4805	checkTyp3 returns an error if the given type is not of the expected type .
4806	decodeTyp3 decodes a Typ3 from bz .
4807	NewPrefixBytes creates a new PrefixBytes from a byte slice .
4808	getLengthStr returns the length string for the given TypeInfo .
4809	collectImplementers_nolock collects all the implementers of the given TypeInfo .
4810	checkConflictsInPrio_nolock checks for conflicts in priority list .
4811	constructConcreteType returns the concrete type for the given TypeInfo .
4812	MarshalBinaryLengthPrefixedWriter implements the encoding . BinaryMarshaler interface .
4813	MarshalBinaryBare implements the encoding . BinaryMarshaler interface .
4814	UnmarshalBinaryLengthPrefixed implements the Codec interface .
4815	UnmarshalBinaryBare unmarshals bz into ptr . ptr must be a pointer to a struct .
4816	MustMarshalJSON marshals the given object and panics on error .
4817	MustUnmarshalJSON implements the Codec interface . It panics on error .
4818	MarshalJSONIndent implements the json . Marshaler interface .
4819	newDataReader returns a new internalDataReader .
4820	Read implements the io . Reader interface .
4821	ListenAndServeTLS is a wrapper around net . Listen with tls . Config .
4822	Produce is part of the Producer interface .
4823	PromoteHandlerFunc creates a PromotedHandlerFunc from a HandlerFunc .
4824	Serve runs the given handler on the given listener .
4825	Serve accepts incoming connections on the given listener and starts a goroutine to handle them .
4826	Fail prints an error message and exits with - 1 .
4827	WriteUsage writes the usage of the parser to the given writer .
4828	WriteHelp writes the help for the parser to the given writer .
4829	MustParse is like Parse but panics on error .
4830	Parse parses the configuration and stores the result in dest .
4831	walkFields walks all fields of a struct and calls visit for each .
4832	Parse parses the command - line arguments .
4833	setSlice parses a slice of strings into a slice of scalar values and appends them to dest .
4834	canParse returns true if the type can be parsed and false if the type cannot be parsed .
4835	isBoolean returns true if the given type implements the TextUnmarshaler interface .
4836	NewFromMap creates a new Tree from a map .
4837	Insert inserts a new value into the tree . Returns the old value and true if the value was inserted .
4838	Delete removes the node with the given prefix from the tree and returns the value and a bool indicating if the node was deleted .
4839	DeletePrefix removes the prefix s from the tree . Returns the number of elements removed .
4840	deletePrefix removes the given prefix from the tree and returns the number of removed nodes .
4841	Get returns the value associated with the given string .
4842	LongestPrefix returns the longest prefix of the given string .
4843	Minimum returns the key and value of the minimum node in the tree .
4844	WalkPrefix calls fn for every node that has a prefix .
4845	recursiveWalk recursively walks the tree and calls fn for each node in the tree .
4846	ToMap returns the tree as a map .
4847	checkip checks if the ip is a valid IPv4 or IPv6 address .
4848	readuint32 reads a uint32 from the file at the given position .
4849	readuint128 reads a 16 - bit unsigned integer from the file at the given position .
4850	loadmessage creates a new IP2Locationrecord from a mesg string
4851	Printrecord prints a location record
4852	Main is the main entry point .
4853	SaveToPdfFile saves a gofpdf . Fpdf object to a file
4854	CubicCurveTo adds a cubic curve to the current path .
4855	ArcTo adds an arc to the current path .
4856	String returns a string representation of the path .
4857	VerticalFlip reverses the vertical direction of the path .
4858	NewGlyphCache creates a new GlyphCacheImp .
4859	Fetch fetches a glyph from the cache .
4860	renderGlyph renders a rune as a glyph .
4861	Copy returns a copy of this glyph .
4862	Fill draws the glyph at the given position .
4863	Main is the main entry point .
4864	Draw draws a line between two points .
4865	Paint paints a set of spans .
4866	SetColor sets the color of the paint .
4867	NewPainter creates a new Painter .
4868	GetStringBounds returns the bounds of a string .
4869	recalc recalculates the current scale .
4870	SetFont sets the current font .
4871	ClearRect clears the given rectangle .
4872	drawString draws a string .
4873	newGroup creates a new group with the given drawType .
4874	newMask creates a new Mask SVG element .
4875	embedSvgFont embeds text as SVG font .
4876	TraceQuad trace a quad with flatteningThreshold .
4877	GetFontName returns the name of the current font .
4878	NewStackGraphicContext creates a new StackGraphicContext .
4879	NewFolderFontCache creates a new FolderFontCache .
4880	NewSyncFolderFontCache creates a new SyncFolderFontCache .
4881	Main is the main entry point .
4882	NewPdf creates a new gofpdf . Fpdf
4883	clearRect draws a rectangle .
4884	NewGraphicContext creates a new GraphicContext .
4885	Clear clears the current page .
4886	GetStringBounds returns the bounds of a string .
4887	CreateStringPath creates a string path
4888	FillStringAt draws a string at the given coordinates .
4889	SetStrokeColor sets the stroke color .
4890	SetFillColor sets the fill color .
4891	SetLineDash set line dash
4892	SetLineWidth sets the line width
4893	Main is the entry point for testing .
4894	Draw draws the given text to the given GraphicContext .
4895	SaveToPngFile save image to png file
4896	LoadFromPngFile loads an image from a png file .
4897	Resource returns the resource name for the given folder and filename .
4898	Output returns the output path for the given sample name and extension .
4899	Main is the entry point for testing .
4900	Draw draws the image at the given filename .
4901	Main is the main entry point .
4902	Bubble draws a bubble .
4903	Dash draws a dashed line between x and y .
4904	CubicCurve draws a cubic curve .
4905	FillStroke fills a stroke with the given width and height .
4906	FillStyle draws a rectangle with the given width and height .
4907	PathTransform draws a path .
4908	Star draws a circle of the given width and height .
4909	Draw draws a rectangle with the given width and height .
4910	ConvertPath converts a path to a PDF .
4911	Main is the main entry point .
4912	Draw draws a line between two points .
4913	DrawContour draws the given points on the given path .
4914	Flatten flattens the path using the given flattener .
4915	Clear clears the image .
4916	ClearRect clears the given rectangle .
4917	DrawImage draws src onto dest using the given transformation matrix .
4918	Main is the main entry point .
4919	Draw draws a png image to a GraphicContext .
4920	Draw draws the image at the given point .
4921	ChecksumString32S returns the checksum of s using the given seed .
4922	ChecksumString64S returns the checksum of s using the given seed .
4923	NewS32 returns a new instance of XXHash32 .
4924	NewS64 returns a new instance of XXHash64 .
4925	round64 rounds a 64 - bit value to the nearest power of 2 .
4926	Checksum32S returns the checksum of in using the given seed .
4927	Checksum64S returns the 64 - bit checksum of in using the given seed .
4928	getStage returns the current stage .
4929	New returns a new Glg instance .
4930	Get returns a new Glg instance .
4931	SetMode sets the mode of all loggers .
4932	SetPrefix sets the tag for the PRINT logger
4933	GetCurrentMode returns the current mode of the logger .
4934	InitWriter initializes the logger writer .
4935	SetWriter sets the logger s writer .
4936	SetLevelColor sets the color function for the given log level .
4937	SetLevelWriter sets the writer for the specified log level .
4938	AddStdLevel adds a new logger to the current logger .
4939	EnableColor enables all loggers with a color level .
4940	EnableLevelColor enables a level of color output .
4941	DisableLevelColor disables the color level of the current logger .
4942	RawString returns the string representation of data .
4943	TagStringToLevel returns the level of the given tag .
4944	Println is a convenience wrapper around fmt . Println .
4945	Fatal outputs a FATAL message and exits with exit code 1 .
4946	Fatalf prints a formatted error message and exits with exit code 1 .
4947	isModeEnable returns true if the current mode is enabled for the given LEVEL .
4948	CaptureMetrics is a wrapper around http . CaptureMetricsFn .
4949	get returns the value of the key at the given position .
4950	Save writes the Cedar to the io . Writer .
4951	SaveToFile saves the Cedar to a file .
4952	Load a Cedar from an io . Reader
4953	LoadFromFile loads data from a file .
4954	Key returns the Cedar key for the given id .
4955	Value returns the value of the given id or ErrNoValue if not found .
4956	Delete removes a key from the Cedar .
4957	Set parses a version string into a Version struct .
4958	Compare compares two versions in lexicographical order .
4959	Slice returns the version as a slice .
4960	BumpMajor increases the major number of the version .
4961	BumpMinor increases the minor number of the version .
4962	BumpPatch increments the patch number .
4963	validateIdentifier checks if the given string is a valid semver identifier .
4964	newStream creates a new stream .
4965	addSubscriber adds a new subscriber to the stream .
4966	New creates a new server .
4967	Close shuts down the server .
4968	CreateStream creates a new stream .
4969	RemoveStream removes a stream from the server .
4970	StreamExists returns true if a stream with given id exists .
4971	Publish sends an event to the server .
4972	NewClient creates a new Client .
4973	Subscribe sends a stream of events to the given handler .
4974	SubscribeChan subscribes to events on the given stream .
4975	SubscribeRaw subscribes to messages received from the server using the provided handler .
4976	Unsubscribe unsubscribes from the given channel .
4977	NewEventStreamReader creates a new EventStreamReader from an io . Reader .
4978	ReadEvent reads the next event from the stream .
4979	HTTPHandler is the HTTP handler for streaming events .
4980	Add adds a new event to the event log .
4981	Replay replays all events that are older than the eventid
4982	readKey reads a private key from the given path .
4983	writeKey writes the given private key to the given path .
4984	anyKey returns the first key found in the given filename or creates a new one if it doesn t exist .
4985	sameDir returns the path to the file in the same directory as existing .
4986	printAccount prints the account information to w .
4987	tmpl renders the given template with the given data and writes the result to w .
4988	printUsage prints the usage information to the given writer .
4989	FromRequest parses the X - Real - Ip and X - Forwarded - For headers .
4990	Do executes the clear command with the given parameters .
4991	Do performs the disable command .
4992	Do executes the RemoveDOMStorageItem command .
4993	Do executes the setDOMStorageItem command .
4994	Do executes the deliver push message command .
4995	Do executes a dispatch sync event .
4996	Do executes the inspect worker command .
4997	Do executes the SetForceUpdateOnPageLoad command .
4998	Do executes the SkipWaiting command with the given parameters .
4999	Do executes the start worker command .
5000	Do executes the StopAllWorkers command .
5001	Do stops the worker .
5002	Do executes the Unregister command .
5003	Do executes the update registration command .
5004	Do executes the bind command with the given parameters .
5005	Do executes the Unbind command with the given parameters .
5006	Error implements the error interface for ExceptionDetails .
5007	Do executes the release animations .
5008	Do executes the SeekAnimations command with the given parameters .
5009	Do executes the set - paused command .
5010	Do executes the SetPlaybackRate command with the given parameters .
5011	Do executes the set - timing command .
5012	Do executes the PrepareForLeakDetection command .
5013	Do executes the ForciblyPurgeJavaScriptMemory command .
5014	Do executes the set - pressure - notifications - suppressed command .
5015	Do performs a simulated pressure notification .
5016	WithSamplingInterval sets the SamplingInterval field .
5017	WithSuppressRandomness sets the SuppressRandomness field and returns a pointer to it .
5018	Do starts the sampling process .
5019	Do stops the sampling process .
5020	Do executes the clear - device - orientation - override command .
5021	Do executes the set device orientation override command .
5022	Do executes the start violations report .
5023	Do executes the stop violations report .
5024	String returns a string representation of the modifier .
5025	WithNodeID sets the NodeID field s value .
5026	WithBackendNodeID sets the BackendNodeID field .
5027	WithObjectID sets the ObjectID field of the GetPartialAXTreeParams
5028	WithFetchRelatives sets the FetchRelatives field and returns a new GetPartialAXTreeParams instance
5029	Do executes the set time domain command .
5030	WithClipRect returns a new ProfileSnapshotParams object with the given clipRect .
5031	Do executes the release snapshot command .
5032	Do executes a clear - object - store command .
5033	Do executes the delete database command .
5034	Do executes the delete object store entries command .
5035	WithKeyRange sets the KeyRange
5036	Do sets the sampling interval .
5037	Do executes the start command .
5038	WithCallCount sets the CallCount field .
5039	WithDetailed sets the Detailed field if it s set or not .
5040	Do executes the start precise coverage command .
5041	Do executes the start type profile command .
5042	Do stops precise code coverage .
5043	Do stops the profile .
5044	Do executes the set ignore certificate errors command .
5045	Do executes the add - inspected - heap - object command .
5046	Do executes the CollectGarbage command .
5047	WithSamplingInterval sets the SamplingInterval field .
5048	Do executes the start tracking heap objects command .
5049	WithReportProgress sets the ReportProgress field if you want to report progress .
5050	Do executes the StopTrackingHeapObjects command .
5051	WithReportProgress sets the ReportProgress field and returns a pointer to it .
5052	Do executes the take - heap snapshot command .
5053	WithBrowserContextID sets the BrowserContextID
5054	Do executes the grant permissions command .
5055	WithBrowserContextID sets the BrowserContextID on the reset permissions params
5056	Do executes a reset - permissions command .
5057	Do executes the crash command .
5058	Do executes a crash - cpu - process command .
5059	WithQuery sets the Query field and returns a pointer to it .
5060	WithTargetID sets the TargetID optional parameter .
5061	Do executes the set window bounds command .
5062	WithImage sets the Image field s value .
5063	Do executes the set dock tile command .
5064	Do executes the delete cache command .
5065	Do executes the delete entry command .
5066	WithPathFilter sets the PathFilter field .
5067	Do executes the discard search results command .
5068	Do executes the focus command with the given parameters .
5069	Do executes the MarkUndoableState command .
5070	WithIncludeUserAgentShadowDOM sets the IncludeUserAgentShadowDOM field .
5071	Do executes the redo command .
5072	Do executes the RemoveAttribute command .
5073	Do executes the RemoveNode command .
5074	Do executes the requestChildNodes command with the given parameters .
5075	WithNodeID sets the NodeID optional parameter .
5076	WithBackendNodeID sets the BackendNodeID field .
5077	WithExecutionContextID sets the ExecutionContextID
5078	Do executes the set attribute command .
5079	WithName sets the Name field of the SetAttributesAsTextParams instance
5080	Do performs the set attributes as text command .
5081	Do executes the set file input files command .
5082	Do executes the set - inspected - node command .
5083	Do executes the set - node - value command .
5084	Do executes the set - outer - html command .
5085	Do executes the undo command .
5086	Do executes a ForcePseudoState command with the given parameters .
5087	Do executes the setEffectivePropertyValueForNode command .
5088	Do executes the start rule usage tracking command .
5089	Do executes the close command with the given parameters .
5090	Do executes a clear - data - for - origin command .
5091	Do executes the TrackCacheStorageForOrigin command .
5092	Do executes the TrackIndexedDBForOrigin command .
5093	Do executes the UntrackCacheStorageForOrigin command .
5094	Do executes the UntrackIndexedDBForOrigin command .
5095	Do executes the hide highlight command .
5096	Do executes the highlight frame command .
5097	WithNodeID sets the NodeID optional parameter .
5098	WithBackendNodeID sets the BackendNodeID field .
5099	WithObjectID adds the ObjectID to the highlight node params
5100	WithSelector sets the Selector optional parameter .
5101	Do executes the highlight node command .
5102	Do executes the highlight quad command .
5103	Do runs the HighlightRect command with the given parameters .
5104	WithHighlightConfig sets the HighlightConfig field and returns a SetInspectModeParams instance
5105	Do executes the set - inspect - mode command .
5106	Do executes the set show ad highlights command .
5107	WithMessage sets the Message field s value .
5108	Do executes the SetPausedInDebuggerMessage command .
5109	Do executes the set show debug borders command .
5110	Do executes the SetShowFPSCounter command .
5111	Do executes the set show paint rectangles command .
5112	Do executes the set show scroll bottleneck rects command .
5113	Do executes the set show hit test borders command .
5114	Do executes the SetShowViewportSizeOnResize command .
5115	Do executes the clear - browser - cache command .
5116	Do executes the ClearBrowserCookies command .
5117	WithErrorReason sets the ErrorReason field .
5118	WithRawResponse sets the RawResponse field of the ContinueInterceptedRequestParams
5119	WithURL adds the URL to the continue intercepted request params
5120	WithMethod returns a new ContinueInterceptedRequestParams instance
5121	WithPostData sets the PostData field of a ContinueInterceptedRequestParams instance
5122	WithHeaders returns a new ContinueInterceptedRequestParams instance
5123	WithAuthChallengeResponse sets the AuthChallengeResponse field of the ContinueInterceptedRequestParams
5124	Do executes a ContinueInterceptedRequest command .
5125	WithURL sets the URL field and returns a DeleteCookiesParams instance
5126	WithDomain sets the Domain field if set .
5127	WithPath sets the Path optional parameter .
5128	Do executes the delete cookies command with the given parameters .
5129	WithConnectionType sets the ConnectionType field .
5130	Do executes the emulate network conditions command .
5131	Do performs the enable command with the given parameters .
5132	WithUrls returns a new GetCookiesParams instance
5133	Do executes a replayXHR command with the given parameters .
5134	Do executes the set - blocked - urls command .
5135	Do executes the set bypass service worker command .
5136	Do executes the set - cache - disabled command .
5137	WithURL sets the URL field .
5138	WithDomain sets the Domain field .
5139	WithPath sets the cookie path .
5140	WithSecure returns a new SetCookieParams instance
5141	WithHTTPOnly sets the HTTPOnly field .
5142	WithSameSite sets the SameSite field .
5143	WithExpires sets the Expires field and returns a pointer to it .
5144	Do executes the set cookies command .
5145	Do executes the set data size limits for a test .
5146	Do executes the set - extra - http - headers command .
5147	Do executes the set request interception command .
5148	Do executes the clear - device - metrics - override command .
5149	Do executes the ClearGeolocationOverride command .
5150	Do executes the ResetPageScaleFactor command .
5151	Do executes the SetFocusEmulationEnabled command .
5152	Do executes the SetCPUThrottlingRate command .
5153	WithColor sets the Color field of the SetDefaultBackgroundColorOverrideParams
5154	Do executes the set - default - background - color - override command .
5155	WithScale returns a new SetDeviceMetricsOverrideParams instance
5156	WithDontSetVisibleSize returns a new SetDeviceMetricsOverrideParams instance
5157	WithScreenOrientation returns a new SetDeviceMetricsOverrideParams instance
5158	Do executes the set - device - metrics - override command .
5159	Do executes the setscrollbarshidden command .
5160	Do executes the set document cookie disabled command .
5161	Do executes the SetEmitTouchEventsForMouse command .
5162	Do executes the set emulated media command .
5163	WithLatitude method of SetGeolocationOverrideParams
5164	WithLongitude method of SetGeolocationOverrideParams
5165	WithAccuracy sets the Accuracy field .
5166	Do executes the set geolocation override command
5167	Do executes the set page scale factor command .
5168	Do executes the set script execution disabled command .
5169	WithMaxTouchPoints returns a new SetTouchEmulationEnabledParams instance
5170	Do executes the SetTouchEmulationEnabled command .
5171	WithBudget sets the Budget parameter .
5172	WithMaxVirtualTimeTaskStarvationCount sets the MaxVirtualTimeTaskStarvationCount field .
5173	WithWaitForNavigation sets the WaitForNavigation field s value .
5174	WithAcceptLanguage sets the AcceptLanguage field s value .
5175	WithPlatform returns a new SetUserAgentOverrideParams instance
5176	Do executes the set - user - agent - override command .
5177	Do executes a dispatch key event .
5178	Do executes the insert text command with the given parameters .
5179	WithButtons sets the Buttons optional parameter .
5180	Do executes a mouse event .
5181	Do executes a touch event .
5182	Do executes the emulate touch from mouse event .
5183	Do executes the set ignore input events command .
5184	Do performs the synthesize pinch gesture .
5185	WithXOverscroll sets the XOverscroll parameter .
5186	WithYOverscroll sets the YOverscroll parameter .
5187	Do executes the synthesize scroll gesture command .
5188	Do executes a synthesize tap gesture .
5189	Domain returns the domain of the method type .
5190	WithDepth sets the Depth field .
5191	Do executes the RemoveDOMBreakpoint command .
5192	WithName sets the TargetName optional parameter .
5193	Do executes the RemoveEventListenerBreakpoint command .
5194	Do executes the RemoveInstrumentationBreakpoint command .
5195	Do executes the RemoveXHRBreakpoint command .
5196	Do executes the setDOMbreakpoint command .
5197	Do executes the SetEventListenerBreakpoint command with the given parameters .
5198	Do executes a set - instrumentation - breakpoint command .
5199	Do executes the SetXHRBreakpoint command with the given parameters .
5200	WithExecutor returns a context with the given executor set .
5201	Execute implements the Execute method of the context . Context interface .
5202	AttributeValue returns the value of the attribute with the given name .
5203	xpath returns the XPath representation of the node . If stopAtDocument is true it will return the document name . If stopAtID is false it will return an empty string .
5204	String returns a string representation of a NodeType .
5205	Do executes the set - sink - to - use command .
5206	Do starts the mirroring process .
5207	Do stops the casting process .
5208	Do executes the start - observing command .
5209	Do executes the StopObserving command .
5210	Do executes the set recording command .
5211	Do executes a clear - events command .
5212	WithObjectID sets the ObjectID field .
5213	WithArguments sets the Arguments field .
5214	WithExecutionContextID sets the ExecutionContextID optional parameter .
5215	WithObjectGroup sets the ObjectGroup optional parameter .
5216	Do executes the discard console entries command .
5217	WithContextID sets the ContextID field .
5218	WithOwnProperties sets the OwnProperties field .
5219	WithGeneratePreview sets the GeneratePreview field and returns a pointer to it .
5220	WithExecutionContextID sets the ExecutionContextID
5221	WithObjectGroup sets the ObjectGroup field .
5222	Do executes a release - object command .
5223	Do executes a release - object - group command .
5224	Do executes the RunIfWaitingForDebugger command .
5225	Do executes the set custom object formatter enabled command .
5226	Do executes the set - call - stack - size - to - capture command .
5227	Do executes a TerminateExecution command .
5228	Do executes the AddBinding command .
5229	Do executes the RemoveBinding command .
5230	Do executes the end command .
5231	Do executes the record clock sync marker command .
5232	WithBufferUsageReportingInterval sets the BufferUsageReportingInterval parameter .
5233	WithNoDisplayUpdates sets the NoDisplayUpdates field and returns a pointer to it .
5234	WithScreenshot sets the Screenshot field of a BeginFrameParams instance
5235	Do executes the bring - to - front command .
5236	WithClip sets the Clip field .
5237	WithFromSurface sets the FromSurface optional parameter .
5238	WithName sets the WorldName field s value .
5239	WithGrantUniveralAccess sets the GrantUniveralAccess optional parameter .
5240	Do executes the ResetNavigationHistory command .
5241	WithPromptText returns a pointer to a new HandleJavaScriptDialogParams instance
5242	Do executes the HandleJavaScriptDialog command .
5243	WithReferrer returns a new NavigateParams instance with the referrer set
5244	WithTransitionType returns a new NavigateParams instance with the transitionType set
5245	WithFrameID returns a new NavigateParams instance with the frameID set
5246	Do performs the NavigateToHistoryEntry command .
5247	WithLandscape sets the Landscape field .
5248	WithDisplayHeaderFooter sets the DisplayHeaderFooter field and returns a pointer to it .
5249	WithPrintBackground returns a new PrintToPDFParams instance
5250	WithScale returns a new PrintToPDFParams instance
5251	WithPaperWidth sets the PaperWidth field .
5252	WithPaperHeight sets the PaperHeight field .
5253	WithIgnoreInvalidPageRanges returns a new PrintToPDFParams instance
5254	WithFooterTemplate sets the FooterTemplate field .
5255	WithPreferCSSPageSize sets the PreferCSSPageSize field and returns a pointer to it .
5256	WithScriptToEvaluateOnLoad sets the ScriptToEvaluateOnLoad field and returns a reload params
5257	Do executes a reload command with the given parameters .
5258	Do executes the RemoveScriptToEvaluateOnNewDocument command .
5259	Do executes the screencast frame ack command .
5260	Do executes the set ad blocking enabled command .
5261	Do executes the set bypass - cSP command .
5262	Do executes the set font families command .
5263	Do executes the set font sizes command .
5264	Do executes the set document content command .
5265	WithDownloadPath sets the DownloadPath field .
5266	Do executes a set - download - behavior command .
5267	Do executes the set - lifecycle - events - enabled command .
5268	WithFormat returns a new StartScreencastParams instance
5269	WithMaxWidth returns a new StartScreencastParams instance
5270	WithMaxHeight returns a new StartScreencastParams instance
5271	WithEveryNthFrame sets the EveryNthFrame optional parameter .
5272	Do executes the start screencast command .
5273	Do stops the loading process .
5274	Do executes the set - web - lifecycle - state command .
5275	Do stops the screencast .
5276	Do executes the set produce compilation cache command .
5277	Do executes the AddCompilationCache command .
5278	Do executes the ClearCompilationCache command .
5279	WithGroup sets the Group optional parameter .
5280	Do executes the WaitForDebugger command .
5281	Do executes the ActivateTarget command .
5282	WithBindingName sets the BindingName field .
5283	Do executes the ExposeDevToolsProtocol command .
5284	WithBrowserContextID sets the BrowserContextID field .
5285	WithSessionID returns a new DetachFromTargetParams instance
5286	Do executes the detach - from - target command .
5287	Do executes the DisposeBrowserContext command .
5288	WithSessionID returns a new SendMessageToTargetParams instance
5289	Do executes the send message - to - target command .
5290	Do executes the set - auto - attach command .
5291	Do performs a set - discover - targets command .
5292	Do executes the set - remote - locations command .
5293	WithPatterns returns a new EnableParams instance with the given patterns .
5294	WithHandleAuthRequests sets the HandleAuthRequests field .
5295	Do executes the FailRequest command .
5296	WithBody sets the Body field of the fulfill request params
5297	WithResponsePhrase sets the ResponsePhrase field .
5298	Do executes the fulfill request .
5299	WithURL sets the URL field s value .
5300	WithMethod adds the method to the continue request params .
5301	WithPostData sets the PostData field of a ContinueRequestParams instance
5302	WithHeaders sets the Headers field of the ContinueRequestParams
5303	Do executes the ContinueRequest command .
5304	Do executes the ContinueWithAuth command with the given parameters .
5305	Do executes the ContinueToLocation command with the given parameters .
5306	WithIncludeCommandLineAPI sets the IncludeCommandLineAPI field of the EvaluateOnCallFrameParams instance
5307	Do executes the pause command with the given parameters .
5308	Do executes the pause on async call .
5309	Do executes the RemoveBreakpoint command .
5310	Do executes the resume command .
5311	Do executes the set - async - call - stack depth command .
5312	Do executes the set blackbox patterns command .
5313	Do performs the set blackboxed ranges command .
5314	WithURL adds the URL to the set breakpoint by URL params
5315	WithURLRegex adds the URLRegex to the SetBreakpointByURLParams instance
5316	WithScriptHash returns a new SetBreakpointByURLParams instance
5317	WithColumnNumber sets the ColumnNumber field .
5318	WithCondition returns a new SetBreakpointOnFunctionCallParams instance
5319	Do executes the set - breakpoints - active command .
5320	Do executes the set - pause - on - exceptions command .
5321	Do executes the set return value command .
5322	WithDryRun sets the DryRun field .
5323	Do performs the execution of SetSkipAllPauses .
5324	Do executes the set - variable - value command .
5325	WithBreakOnAsyncCall sets the BreakOnAsyncCall optional parameter .
5326	Do executes a step into command .
5327	Do executes the step - out command .
5328	Do executes the step - over command .
5329	Listen is part of the NotifyBundle interface .
5330	ListenClose calls the listener s ListenCloseF if not nil .
5331	Connected calls ConnectedF if not nil .
5332	Disconnected is part of the NotifyRouter interface .
5333	OpenedStream calls OpenedStreamF if not nil .
5334	ClosedStream is part of the NotifyBundle interface .
5335	WithNoDial returns a context with noDial set .
5336	GetNoDial returns the value of noDial in the context .
5337	WithDialPeerTimeout returns a context with the given timeout .
5338	Open implements the driver . Driver interface .
5339	Prevpos returns the index of the previous position in the ring buffer .
5340	Last returns the index of the last element in the buffer .
5341	DeleteMostRecentBytes removes n bytes from the buffer .
5342	NewFloat64RingBuf creates a new float64 ring buffer with at most maxViewItems items .
5343	TwoContig returns the two values in the ring buffer . If makeCopy is true two values are returned .
5344	Earliest returns the earliest value in the ring buffer .
5345	Values returns the two float64 values in the ring buffer .
5346	NewAtomicFixedSizeRingBuf creates a new AtomicFixedSizeRingBuf .
5347	Reset resets the buffer .
5348	NewPointerRingBuf creates a new pointer ring buffer .
5349	TwoContig returns two slices of the two slices .
5350	NumPage returns the number of pages .
5351	Font returns the font with the given name .
5352	Width returns the width of the code .
5353	Encoder returns an encoder for the font .
5354	Interpret parses a string and calls the do function for each token .
5355	Open opens a file and returns a Reader .
5356	NewReader returns a new Reader wrapping the given io . ReaderAt .
5357	NewReaderEncrypted returns a new reader wrapping the given io . ReaderAt .
5358	Trailer returns the reader s trailer .
5359	Kind returns the kind of the value .
5360	newBuffer returns a new buffer .
5361	Paginate paginate the result set .
5362	CascadeDelete cascade delete document
5363	cascadeDeleteWithConfig performs a cascade delete operation with the given config .
5364	cascadeSaveWithConfig saves the document with the given configuration .
5365	MapFromCascadeProperties creates a map from cascade properties
5366	Connect establishes a connection to the database .
5367	lowerInitial lowercases the first character of a string .
5368	Find returns a ResultSet for the given query .
5369	RawInformationQuery performs an XML - RPC query .
5370	NewClient creates a new client with the given options .
5371	Close closes the underlying TLS connection .
5372	startTLSIfRequired is used to start TLS if required .
5373	startStream is used to start streaming .
5374	IsEncrypted returns true if the connection is encrypted .
5375	Recv reads a chat message from the client .
5376	Send sends a chat message .
5377	SendOrg sends an org to the server .
5378	SendKeepAlive sends a keep - alive message to the server .
5379	SendHtml send html message
5380	nextStart returns the next start element .
5381	JoinProtectedMUC joins a protected user .
5382	LeaveMUC leaves a user as unavailable .
5383	AttachBuffer adds an attachment to the message .
5384	Attach attaches the message to the given file .
5385	Inline adds an inline file to the message .
5386	AddHeader adds a new header to the message .
5387	Tolist returns the list of recipients .
5388	Bytes returns a string representation of the message .
5389	Send sends a message to an email address .
5390	GetHeader returns the value of the header with the given name .
5391	GetHeaderValues returns the values of a header field .
5392	SetHeader sets a single header value
5393	AddHeader adds a header to the envelope
5394	DeleteHeader removes a header from the envelope
5395	AddressList returns the list of addresses associated with the given key .
5396	Clone returns a deep copy of the envelope .
5397	ReadEnvelope reads an envelope from an io . Reader
5398	EnvelopeFromPart creates an envelope from a Part .
5399	parseTextOnlyBody parses the body of a text part .
5400	parseMultiPartBody parses the body of a multipart message .
5401	matchHTMLBodyPart returns true if the Content - Type is HTML and Disposition is not attachment .
5402	ensureCommaDelimitedAddresses ensures that the given string contains a comma - delimited list of characters .
5403	Date sets the date of the email .
5404	From sets the from address of the mail message .
5405	Subject sets the subject of the message .
5406	To adds a new to address .
5407	ToAddrs sets the to addresses .
5408	CC adds a CC - based email address .
5409	CCAddrs sets the CC addresses .
5410	ReplyTo adds a reply - to address .
5411	Header adds a new MIME header to the message .
5412	AddAttachment adds an attachment to the mail message .
5413	AddFileAttachment adds a file attachment to the mail message .
5414	AddInline adds an inline part .
5415	Equals returns true if the two MailBuilders are equal .
5416	Encode writes the Part to the io . Writer .
5417	encodeHeader writes the part s header to the buffer .
5418	encodeContent encodes the content of a Part into a buffer .
5419	selectTransferEncoding returns the transfer encoding for the given content .
5420	setParamValue sets the value of a parameter .
5421	NewBase64Cleaner creates a new Base64Cleaner .
5422	decodeToUTF8Base64Header takes a string and converts it to UTF - 8 base64 .
5423	parseMediaType parses a media type string and returns the media type parameters and a list of invalid media types .
5424	fixMangledMediaType fixes the mangled media type .
5425	detectMultipartMessage returns true if the content type is multipart .
5426	detectBinaryBody returns true if the content type is binary .
5427	BreadthMatchFirst performs a breadth - first search of the given Part and returns the first element that matches the given PartMatcher .
5428	BreadthMatchAll performs a breadth - first search of the given Part and returns all the matches .
5429	DepthMatchFirst performs a depth - first search of the Part tree returning the first node that matches the given matcher .
5430	DepthMatchAll performs a depth - first search of the given PartMatcher until it returns true .
5431	ToASCII converts s to ASCII .
5432	NewPart creates a new Part .
5433	AddChild adds a child to a Part .
5434	TextContent returns true if the content type is text or multipart .
5435	setupHeaders reads the Content - Type and Content - Type headers from the reader .
5436	Setup Content - Disposition FileName Charset and FileModDate .
5437	convertFromDetectedCharset takes an io . Reader and attempts to detect the best charset in the content type . If no charset is detected an error is returned .
5438	Clone returns a deep copy of the Part .
5439	ReadParts reads a Part from the given io . Reader .
5440	parseParts parses the parts in the given reader .
5441	UUID returns a random UUID string .
5442	NewQPCleaner creates a new QPCleaner
5443	Error returns a string representation of the error .
5444	addError adds a new error to the Part .
5445	addWarning adds a warning to the Part .
5446	Wrap takes a maximum number of characters and appends them to a single string .
5447	ConvertToUTF8String converts textBytes to UTF - 8 .
5448	JoinAddress joins a list of mail . Address to a single string .
5449	Printf is a convenience wrapper around fmt . Printf .
5450	EnvelopeToMarkdown writes a markdown representation of an envelope to w .
5451	FormatPart formats a enmime . Part to a writer .
5452	newBoundaryReader returns a new boundaryReader .
5453	Read implements the io . Reader interface .
5454	Next advances the reader to the next boundary . It returns true if there are no more parts .
5455	Parse parses buf starting at offset and returns the parsed object .
5456	Assign assigns a value to a symbol .
5457	NewRClient creates a new RClient .
5458	NewRClientWithAuth creates a new RClient .
5459	Register registers a custom generator for the given identifier .
5460	Fuzz fuzzes the type of e .
5461	findFakeFunctionFor returns the function for the given fako .
5462	Apply applies the given options .
5463	ToOption returns an Option that can be used to create a new Options object .
5464	waitThenClose waits for the event channel to be closed and closes the event channel .
5465	send sends a QueryEvent to the event channel .
5466	NewMovingAverage creates a new moving average .
5467	Set sets the value of the variable .
5468	calcKeys50 calculates the keys for the given password salt and kdfCount .
5469	getKeys returns a list of keys in the archive .
5470	checkPassword checks if the password is valid .
5471	parseFileEncryptionRecord parses a file encryption record .
5472	parseEncryptionBlock parses the encryption block .
5473	newArchive50 creates a new archive50 reader .
5474	Read implements the io . Reader interface .
5475	ReadByte reads a single byte from the cipher block .
5476	newCipherBlockReader returns a new cipherBlockReader .
5477	newAesDecryptReader returns a new cipherBlockReader that decrypts data using AES .
5478	limitByteReader returns a limitedByteReader that reads from r until io . ErrUnexpectedEOF .
5479	Mode returns the mode bits of the file header .
5480	nextBlockInFile reads the next block in the file .
5481	next returns the next block in the file .
5482	Read implements the io . Reader interface .
5483	Read implements the io . Reader interface .
5484	Next returns the next file header .
5485	NewReader creates a new Reader from an io . Reader .
5486	OpenReader opens a volume and returns a ReadCloser .
5487	getV3Filter returns the v3 filter for the given code .
5488	init initializes the decoder29 .
5489	readBlockHeader reads the block header .
5490	readCodeLengthTable reads the code length table from the bit reader .
5491	shrinkStates shrinks the given slice of states to the given size .
5492	expandStates returns a slice of all the states in the context .
5493	pushByte is used to push a byte to the heap .
5494	succByte returns the succ byte for the given index .
5495	succContext returns the context at the given index . If the index is negative nil is returned .
5496	calcAes30Params calculates the AES30 parameters .
5497	parseDosTime parses a DOS time value .
5498	decodeName decodes a name from buf . It returns an empty string if there is no name .
5499	readExtTimes reads the modification time creation time and access times from the file block header .
5500	readBlockHeader reads the block header .
5501	newArchive15 returns a new archive15 block reader .
5502	readFilter5Data reads filter 5 data .
5503	writeByte writes a single byte to the buffer .
5504	copyBytes copies len bytes to the buffer starting at offset off .
5505	read copies the contents of the window into p .
5506	queueFilter queues a filter block for processing .
5507	processFilters reads filters from the stream and processes them .
5508	fill fills d . win with the next filter block .
5509	Read implements the io . Reader interface .
5510	readFull reads from r until io . EOF .
5511	findSig reads the file format version number from the reader .
5512	execute runs the given command on the VM .
5513	newVM creates a new VM from memory .
5514	limitBitReader returns a bitReader that is limited to n bits .
5515	readUint32 reads a uint32 from the stream .
5516	step3 returns true if the word is a step 3 .
5517	Stem stems a word .
5518	step6 step 6
5519	step5 checks if the word is a step 5 .
5520	step2a returns true if the word is a step of 2a .
5521	step4 checks if the word ends with a step 4 .
5522	Stem returns the stemmed version of word in the specified language .
5523	step1c will step 1c of the snowball word .
5524	step3 will step 3 of the snowball .
5525	isStopWord returns true if word is a stop word .
5526	capitalizeYUI capitalize YUI words
5527	step2 checks if there is a step 2 of the snowball word .
5528	step3 returns true if the word is a step 3 .
5529	step0 returns true if there is a step 0 .
5530	VnvSuffix returns the index of the last non - vowel in the word s RS slice .
5531	step1 returns true if there is a step 1 of the snowball word .
5532	step2a returns true if the step is a step .
5533	removePerfectiveGerundEnding removes the perfective gerund ending from a word .
5534	removeAdjectivalEnding removes the adjectival ending from the word .
5535	step2b returns true if the word is a step of the snowball .
5536	step4 step 4 .
5537	step5 returns true if we should step 5 .
5538	Stem returns a stemped version of word .
5539	Stem returns a stemped version of word .
5540	isStopWord returns true if word is a stop word .
5541	isStopWord returns true if word is a stop word .
5542	New creates a new word from a string
5543	RemoveLastNRunes removes the last n runes from the word .
5544	resetR1R2 resets the R1 and R2 start values .
5545	slice returns a slice of runes between start and stop .
5546	FitsInR1 returns true if x is in the R1 range .
5547	FitsInR2 returns true if x is in the R2 range .
5548	FitsInRV returns true if the word is in RV
5549	FirstPrefix returns the first prefix of the word
5550	HasSuffixRunes returns true if the word ends with any of the given runes .
5551	FirstSuffixIfIn returns the first suffix if it is in the list of suffixes . If it is not in the list it returns an empty string .
5552	RemoveFirstSuffixIfIn removes the first suffix from the word if it exists .
5553	RemoveFirstSuffix removes the first suffix from the word
5554	FirstSuffix returns the first suffix of the word .
5555	preprocess will normalize apostrophes trims left apostrophes and trims right apostrophes
5556	step0 returns true if there is a step of 0 .
5557	step1b returns true if there is a step 1b .
5558	step2b returns true if the word is a step2b .
5559	capitalizeYs returns the number of capitalizations in the word .
5560	uncapitalizeYs uncapitalize all Ys in the word
5561	stemSpecialWord returns the stemmed version of the word .
5562	isShortWord checks if the word is a short word .
5563	step1a returns true if there is a step 1a .
5564	Set sets the value for the given key .
5565	Get returns the value associated with the given key .
5566	Cleanup removes the current goroutine from the data map .
5567	getValues returns the current values for the current goroutine .
5568	linkGRs links the parent data to the current goroutine .
5569	unlinkGRs removes the current goroutine from the global data map .
5570	AppUri returns the URL for the given app .
5571	CurlAppWithTimeout is a wrapper around NewAppCurler and CurlAndWait .
5572	CurlApp sends a curl request to the given path and waits for the response .
5573	CurlAppRoot returns the root URL of an app .
5574	GetTags returns a slice of tags for the given prefix and string .
5575	GetTagsAsUniqueStrings returns a slice of tags as unique strings .
5576	isTerminator returns true if r is one of the given runes .
5577	uniquify removes empty strings from a slice .
5578	New creates a new location middleware .
5579	Get returns gin . Context data as url . URL .
5580	GenerateRSAKeyPair generates a new RSA private key and public key .
5581	Verify verifies that sig is a valid signature for data .
5582	Encrypt encrypts b with the public key .
5583	Sign signs a message with the private key .
5584	GetPublic returns the public key of the private key .
5585	Decrypt decrypts b using the private key sk .
5586	UnmarshalRsaPrivateKey unmarshals a PEM - encoded RSA private key .
5587	GenerateKeyPair generates a new keypair of the given type and number of bits .
5588	GenerateKeyPairWithReader generates a keypair of the given type with the given bits .
5589	GenerateEKeyPair generates an elliptic key pair using the given curve name .
5590	UnmarshalPublicKey unmarshals a public key from binary protobuf data .
5591	MarshalPublicKey marshals a public key to binary protobuf format .
5592	UnmarshalPrivateKey unmarshals a PrivateKey from binary protobuf data .
5593	MarshalPrivateKey marshals a private key .
5594	KeyEqual returns true if the two keys are equal .
5595	GenerateECDSAKeyPair generates a new private and public key pair using ECDSA .
5596	GenerateECDSAKeyPairWithCurve generates a new ECDSA private and public key pair using the given elliptic curve .
5597	ECDSAKeyPairFromKey creates a new private and public key from an ECDSA private key .
5598	UnmarshalECDSAPrivateKey unmarshals an ECDSA private key .
5599	UnmarshalECDSAPublicKey unmarshals an ECDSAPublicKey from the given data .
5600	Equals returns true if the two private keys are equal .
5601	Sign signs data with the ECDSA private key .
5602	Equals returns true if ePub is equal to o .
5603	Verify implements the Verify method of the ECDSA public key interface .
5604	GenerateSecp256k1Key generates a secp256k1 private key .
5605	UnmarshalSecp256k1PrivateKey unmarshals a secp256k1 private key from data .
5606	UnmarshalSecp256k1PublicKey unmarshals a secp256k1 public key from a byte slice .
5607	Equals returns true if the two private keys are equal .
5608	Sign implements the Sign method of the Secp256k1PrivateKey interface .
5609	Equals returns true if two public keys are equal .
5610	Verify implements the Verify method of the secp256k1 . PublicKey interface .
5611	Raw returns the Ed25519 private key as a byte slice .
5612	Sign signs msg with the private key k .
5613	Equals returns true if the two Ed25519 public keys are equal .
5614	Verify returns true if data is a valid signature of sig .
5615	UnmarshalEd25519PublicKey unmarshals an Ed25519 public key .
5616	UnmarshalEd25519PrivateKey unmarshals an Ed25519 private key .
5617	EditScriptForStrings returns the edit script for the given source and target .
5618	EditScriptForMatrix returns the edit script for the given matrix .
5619	WriteMatrix writes a matrix from source to target .
5620	New creates a new Lockfile with the given path .
5621	GetOwner returns the owner of the lockfile .
5622	TryLock tries to lock the lockfile . If the lockfile already exists it is overwritten .
5623	Unlock removes the lockfile if the owner of the lockfile is the same as the current process
5624	NewBase creates a new Base instance .
5625	SetFallbackLogger sets the fallback logger
5626	AddLogger adds a logger to the Base .
5627	LogWithTime sends a log message with a timestamp .
5628	Log logs a message at the specified level .
5629	Warnm logs a warning message .
5630	NewTemplateWithFuncMap creates a new template with the given template string and function map .
5631	Execute executes the template at the specified level .
5632	NewTemplateMsg creates a new TemplateMsg
5633	NewLogAdapterFor returns a new instance of LogAdapter .
5634	SetAttr sets the value of an attribute .
5635	LogWithTime is part of the LogAdapter interface .
5636	Log is part of the Logger interface .
5637	Dbgm is a convenience wrapper around Debugm
5638	NewAttrsFromMap creates a new Attrs object from a map of attributes .
5639	NewAttrsFromAttrs creates a new Attrs object from the given attributes .
5640	MergeAttrs merges the attributes in attrs into a .
5641	SetAttr sets the attribute with the given key and value .
5642	GetAttr returns the attribute with the given key .
5643	RemoveAttr removes the attribute with the given key .
5644	Attrs returns the attributes as a map .
5645	Debugm using the default logger
5646	Infom using the default logger
5647	Warningm using the default logger
5648	Errm is a convenience wrapper around Errorm .
5649	Errorm calls the default logger s Errorm function .
5650	Fatalm using the default logger
5651	Dief calls the Dief function of the default logger .
5652	Diem is the entry point for the default logger .
5653	ToLogLevel converts a string to a log level .
5654	CallErr executes a function and returns the result of the function .
5655	New creates a new StackdriverHook .
5656	Fire implements the logrus . Hook interface .
5657	Levels is a functional option for the Hook interface .
5658	ProjectID is an Option to set the project ID
5659	EntriesService is a functional option for the StackdriverHook interface .
5660	LoggingService is a functional option on StackdriverHook .
5661	ErrorService is an Option to set the error reporting service .
5662	HTTPClient returns an Option that configures the StackdriverHook with the given http . Client .
5663	MonitoredResource is a functional option on StackdriverHook .
5664	ErrorReportingLogName is an Option to set the name of the error reporting log .
5665	Labels is a functional option on StackdriverHook .
5666	PartialSuccess is a functional option on StackdriverHook .
5667	GoogleComputeCredentials is a functional option on StackdriverHook used to configure Google Compute Credentials
5668	NewEncoder returns a new encoder for the given io . Writer .
5669	NewDecoder returns a new Decoder that reads from r .
5670	NewStreamEncoder returns a new StreamEncoder .
5671	NewStreamDecoder creates a new StreamDecoder from an io . Reader .
5672	Register registers a Codec for the given mimetype .
5673	Unregister removes a mimetype from the registry .
5674	Lookup returns the codec for the given mimetype .
5675	Codecs returns a map of registered codecs .
5676	Type returns the type of the error .
5677	Install registers an adapter for the given type . Panics if the adapter is nil .
5678	AdapterOf returns the adapter for the given reflect . Type .
5679	AppendDuration appends a time . Duration to b .
5680	fmtInt formats v into buf and returns the number of bytes written .
5681	NewDecoder returns a new objconv . Decoder .
5682	NewStreamDecoder creates a new stream decoder from an io . Reader
5683	Unmarshal unmarshals the byte slice into the value pointed to by v .
5684	String returns a string representation of the type .
5685	zeroValueOf returns the zero value of the given type .
5686	NewValueParser creates a new ValueParser .
5687	ParseTag parses a tag from a string .
5688	NewEncoder returns a new objconv . Encoder .
5689	NewStreamEncoder creates a new stream encoder .
5690	NewPrettyEncoder returns a new objconv . Encoder that writes to the given io . Writer .
5691	NewPrettyStreamEncoder returns a new stream encoder that writes to w .
5692	Marshal marshals v to a byte slice .
5693	NewEncoder returns a new Encoder .
5694	EncodeArray writes an array of values to the Emitter .
5695	EncodeMap writes a map of n elements to the Emitter .
5696	NewStreamEncoder creates a new StreamEncoder .
5697	Open implements the Encoder interface .
5698	Close closes the encoder and emits an array end .
5699	Encode implements the Encoder interface .
5700	newStructType creates a structType from a reflect . Type .
5701	lookup returns a structType from the cache or creates a new one .
5702	clear removes all struct types from the cache .
5703	CheckUint64Bounds returns an error if the given uint64 is greater than the given max .
5704	CheckInt64Bounds returns an error if v is out of bounds .
5705	NewDecoder returns a new Decoder .
5706	Decode decodes the next value into the value pointed to by v .
5707	DecodeArray decodes an array of values .
5708	DecodeMap decodes a map value .
5709	NewStreamDecoder creates a new StreamDecoder .
5710	Len returns the number of bytes remaining in the stream .
5711	Err returns the first non - EOF error encountered .
5712	Decode reads the next value from the stream and stores the result in the value pointed to by v .
5713	Encoder creates a new StreamEncoder .
5714	init initializes the default flags .
5715	LevelFromString returns the level from a string .
5716	NewBackend returns a new instance of Backend .
5717	Callsite returns the filename and line number of the calling function .
5718	print writes a log entry to the underlying writer .
5719	Logger returns a logger for the backend .
5720	Trace implements the Logger interface .
5721	Tracef is part of the Logger interface .
5722	Debug is part of the Logger interface .
5723	Debugf is part of the Logger interface .
5724	Info is part of the Logger interface .
5725	Infof is part of the Logger interface .
5726	Warn implements the Logger interface .
5727	Warnf is part of the Logger interface .
5728	Error implements the Logger interface .
5729	Errorf implements the Logger interface .
5730	Critical implements the Logger interface .
5731	Criticalf is part of the Logger interface .
5732	Level returns the log level .
5733	SetLevel sets the log level .
5734	Concat concatenates two permissions into a single permission .
5735	HasPermission returns true if the permission is allowed for the given role .
5736	ConcatPermissioner concatenates multiple permissioners .
5737	HasPermission returns true if one of the permissioners has permission for the given roles .
5738	Register adds a Checker to the role .
5739	NewPermission creates a new permission for a role
5740	Get returns the Checker for the given name .
5741	isPtrFromHeap returns true if the address is a pointer from the heap
5742	IsPtr returns true if the address is a pointer to the process .
5743	FindObject finds the object with the given address .
5744	ForEachObject calls fn for each object in the process . If fn returns false iteration stops .
5745	ForEachRoot calls fn for each root in the process . If fn returns false iteration stops .
5746	Addr returns the address of the given object .
5747	Size returns the size of the object .
5748	Type returns the type and resource count of the given object .
5749	ForEachRootPtr calls fn for each pointer in the given root . If fn returns false iteration stops .
5750	edges1 calls fn for each edge of the given type . It returns false if fn returns false .
5751	setHeapPtr sets the heap ptr for the given address .
5752	findHeapInfo returns the heapInfo for the given address .
5753	allocHeapInfo allocates the heapInfo for the given address .
5754	runtimeName returns the name of the dwarf type .
5755	readRuntimeConstants reads the runtime constants .
5756	add adds a function to the function tab .
5757	sort sorts the entries in the funcTab .
5758	find returns the function for the given address .
5759	read reads all the entries in the pcTab .
5760	readVarint reads a varint value from the address .
5761	useLine returns the command s use line .
5762	commandPath returns the path to the command .
5763	readCore returns the core process and the gocore process .
5764	typeName returns the type name of the object .
5765	fieldName returns the field name for an object .
5766	typeFieldName returns the field name for a type .
5767	FindFunc returns the function with the given address .
5768	Core creates a new Process from a core . Process .
5769	Address returns the address of the region .
5770	Int returns the int value of the region . Panics if the region is not an int .
5771	Uintptr returns the uintptr value of the region . Panics if the region is not a uintptr .
5772	Cast casts the region to the given type .
5773	Deref will panic if the region is not a pointer .
5774	Uint64 returns the uint64 value of the region .
5775	Uint32 returns the uint32 value of the region .
5776	Int32 returns the int32 value of the region .
5777	Uint16 returns the uint16 value of the region .
5778	Uint8 returns the uint8 value in the region .
5779	String returns the string representation of the region .
5780	SlicePtr returns the region that is a pointer to a slice .
5781	SliceLen returns the length of the slice .
5782	Field returns the region with the given field .
5783	ReadUint8 returns the uint8 value at the given address . Panics if the address is not in the core file .
5784	ReadUint16 reads a 16 - bit unsigned integer from the core file at the given address .
5785	ReadUint32 reads a 32 - bit unsigned integer from the core file at the given address .
5786	ReadUint64 reads a 64 - bit unsigned integer from the core file .
5787	ReadInt8 reads an int8 from the specified address .
5788	ReadInt16 reads an int16 from the specified address .
5789	ReadInt32 reads an int32 from the specified address .
5790	ReadInt64 reads an int64 from the specified address .
5791	ReadUintptr reads a uint64 from the process s memory .
5792	ReadPtr reads a address from the process s memory .
5793	ReadCString reads a C string from the process .
5794	Source returns the name and offset of the source file .
5795	findMapping returns the mapping for the given address .
5796	Max returns the maximum of two addresses .
5797	Min returns the minimum of two addresses .
5798	Align returns the aligned address of x .
5799	initialize initializes the dom .
5800	calculate calculates the idom .
5801	eval returns the label for v .
5802	compress compresses the ancestor vName .
5803	link adds v to the ancestor map .
5804	reverse reverses the dominators .
5805	calcSize calculates the size of the dominators .
5806	objField returns the field name for an object .
5807	Readable returns true if the address is readable .
5808	ReadableN returns true if n bytes can be read from the address a .
5809	splitMappingsAt splits mappings at the given address .
5810	DynamicType returns the type of a dynamic type .
5811	Create implements the btrfs . Filesystem interface .
5812	Resolve returns the IP address for the given URL .
5813	Equal returns true if the two tokens are equal .
5814	newDefaultClassifier creates a default token classifier .
5815	Next returns the next word .
5816	NewTokenizer creates a new Tokenizer .
5817	Split splits a string into a slice of strings .
5818	Between returns the substring of s between left and right .
5819	BetweenF is a convenience wrapper around Between
5820	Camelize Camelcases a string .
5821	Capitalize capitalizes a string
5822	CharAt returns the character at the given index . If the index is out of range an empty string is returned .
5823	CharAtF is a convenience wrapper around CharAt .
5824	ChompLeft removes the prefix from the beginning of the string .
5825	ChompLeftF is a convenience wrapper around ChompLeft .
5826	ChompRight removes the suffix from s if it exists .
5827	ChompRightF is a convenience wrapper around ChompRight .
5828	ClassifyF is a convenience wrapper around Classify .
5829	Clean removes leading and trailing spaces from a string
5830	Dasherize removes all non - alphanumeric characters from a string .
5831	EscapeHTML is a wrapper around html . EscapeString .
5832	DecodeHTMLEntities is a wrapper around html . UnescapeString .
5833	EnsurePrefixF is a convenience wrapper around EnsurePrefix .
5834	EnsureSuffixF is a convenience wrapper around EnsureSuffix .
5835	Humanize returns a human - readable version of s .
5836	Iif returns truthy if condition is true otherwise falsey
5837	IndexOf returns the index of needle in s or - 1 if needle is not found .
5838	IsLower returns true if the string is lower case .
5839	IsUpper returns true if the string is uppercase .
5840	Left returns the left n characters of s .
5841	LeftF is a syntax for Left .
5842	Letters returns a slice of all letters in a string .
5843	Lines returns a slice of lines in a string .
5844	Map applies iterator to each item in arr and returns the result .
5845	Match returns true if the string matches the regular expression pattern
5846	tasks adds godocdown tasks .
5847	Pad pads a string with the given character .
5848	PadF is a convenience wrapper around Pad .
5849	PadLeft pads the left side of a string with a character c .
5850	PadLeftF is a convenience wrapper around PadLeft .
5851	PadRightF is a convenience wrapper around PadRight .
5852	Pipe applies a series of functions to a string and returns the result .
5853	QuoteItems quotes a slice of strings using strconv . Quote
5854	ReplaceF is a convenience wrapper around strings . Replace .
5855	ReplacePatternF is a convenience wrapper around ReplacePattern .
5856	Reverse reverses a string .
5857	RightF is a convenience wrapper around Right .
5858	Slice returns a slice of s starting at start and ending at end . If end is negative the slice is truncated to the length of s .
5859	SliceF is a convenience wrapper around Slice .
5860	SliceContains returns true if the slice contains the given value .
5861	SliceIndexOf returns the index of a string in a slice or - 1 if not found
5862	Slugify returns a slugified version of s .
5863	StripPunctuation removes punctuation from a string .
5864	StripTags removes tags from a string .
5865	Substr returns the substring at the given index . If the index is out of bounds an empty string is returned .
5866	SubstrF is a convenience wrapper around Substr .
5867	TemplateWithDelimiters returns a copy of the string s with the given opening and closing delimiters escaped .
5868	ToArgv converts a string to an array of arguments .
5869	ToBool converts a string to a boolean .
5870	ToBoolOr convert string to bool or return default value if error occurs
5871	ToIntOr convert string to int with default value if error occurs
5872	ToFloat32Or convert string to float32 or return default value if conversion fails
5873	ToFloat64Or convert string to float64 or return default value if conversion fails
5874	UnescapeHTML unescapes HTML entities in a string .
5875	WrapHTML wraps a string with HTML tags and attributes .
5876	WrapHTMLF is a convenience wrapper around WrapHTML .
5877	ReapChildren reaps the children of the process .
5878	SdNotify sends the given state to the notification socket .
5879	NewAuthenticator creates a new Authenticator .
5880	Endpoint implements the http . Handler interface .
5881	Unique returns a list of unique IDs .
5882	Contains returns true if the list contains the given id .
5883	Includes returns true if all contains all items in subset .
5884	Require adds the given flags to the model .
5885	Enqueue adds a job to the coal . SubStore
5886	A creates an Authorizer from a fire . Matcher and a handler .
5887	Run creates an authorizer that will run the given enforcers .
5888	And returns an authorizer that satisfies both a and b .
5889	Or returns an authorizer that checks to see if a or b is satisfied .
5890	Enqueue adds a new job to the queue .
5891	Callback adds a callback to the queue .
5892	NewWatcher creates a new Watcher .
5893	Add adds a stream to the collection .
5894	Action implements the fire . Action interface .
5895	Write returns whether the operation is a write operation .
5896	String returns the string representation of the operation .
5897	Query returns the query
5898	Respond writes the given value to the response .
5899	EnsureApplication ensures that there is exactly one application with the given name and key .
5900	EnsureFirstUser ensures that there is only one user in the store .
5901	Callback returns the callback for the strategy .
5902	OpenStream creates a new stream .
5903	Close closes the stream .
5904	AddTokenIndexes adds token indexes to the coal . Indexer .
5905	GetTokenData returns the token type scope expires_at application and user
5906	SetTokenData sets the token data
5907	ValidSecret returns true if the given secret is valid .
5908	HashSecret hashes the secret .
5909	ValidPassword returns true if the given password is valid .
5910	HashPassword hashes the user s password .
5911	MustCreateStore is like CreateStore but panics on error .
5912	CreateStore creates a new store with the given uri .
5913	C returns a collection of the model .
5914	NewAssetServer creates a new asset server
5915	DefaultGrantStrategy is the default grant strategy .
5916	DefaultTokenData returns the default token data .
5917	GenerateToken generates a new token
5918	ParseToken parses a token and checks if it is valid
5919	E is a convenience wrapper around fire . C .
5920	MustGet returns the value of the field with the given name . It panics if the field is not found .
5921	MustSet sets the value of the field with the given name . It panics if the field is not found .
5922	NewGroup creates a new group .
5923	Add adds controllers to the group . Panics if a controller with the same name already exists .
5924	Endpoint returns an endpoint handler for the group .
5925	Add adds a model to the index .
5926	AddRaw adds a raw index .
5927	Ensure ensures the indexes for the given store .
5928	NewCatalog creates a new catalog with the given models .
5929	Add adds a model to the catalog . Panics if a model with the same name already exists in the catalog .
5930	All returns all models in the catalog .
5931	Visualize returns a string representation of the catalog .
5932	NewErrorReporter returns an error reporter .
5933	EnsureIndexes ensures the indexes for the given store .
5934	E is a convenience wrapper around fmt . Errorf
5935	Compose composes a chain of http . Handlers . Panics if the last item is not a http . Handler .
5936	Includes returns true if all contains all items in subset .
5937	Intersect returns the intersection of listA and listB
5938	E creates a new error with the given reason and retry .
5939	RootTracer is a middleware that logs the request to the tracer .
5940	NewTracerFromRequest creates a new Tracer from the request context .
5941	NewTracer creates a new Tracer with the provided root span .
5942	Push adds a new span to the span stack .
5943	Last returns the last span .
5944	Tag sets a tag on the last trace
5945	Log adds a key - value pair to the last trace .
5946	Context is part of opentracing . Tracer interface .
5947	Pop removes the last trace from the stack .
5948	Finish implements the Tracer interface .
5949	NewPool creates a new pool .
5950	Add adds a task to the pool . It panics if a task with the same name already exists .
5951	Run starts all tasks in the pool
5952	NewBodyLimiter creates a new BodyLimiter .
5953	LimitBody limits the body of the request to n bytes .
5954	C returns a new callback that fires the given handler on the context .
5955	Only returns a matcher that matches only the given operations .
5956	BasicAuthorizer is a middleware that authenticates via Basic Auth .
5957	ModelValidator validates the model .
5958	TimestampValidator validates fire - created - timestamp and fire - updated - timestamp .
5959	RelationshipValidator validates the relationship of the given model .
5960	Inspect runs a number of workers on the seekret .
5961	NewRule creates a new rule .
5962	AddUnmatch adds a regular expression to the unmatch list
5963	Run returns a list of lines that match the rule .
5964	NewSecret creates a new secret
5965	NewObject creates a new Object .
5966	SetMetadata adds a new key - value pair to the object s metadata
5967	GetMetadata returns the value of a metadata key .
5968	GetMetadataAll returns all the object s metadata as a map .
5969	SetRule sets the exception s rule .
5970	SetObject sets the exception s object .
5971	SetNline sets the exception s Nline field .
5972	SetContent sets the exception s content .
5973	Run returns true if x matches s .
5974	AddRule adds a rule to the seekret
5975	LoadRulesFromFile loads rules from a file
5976	LoadRulesFromDir loads rules from a directory
5977	DefaultRulesPath returns the default rules path
5978	EnableRule enables a rule
5979	DisableRule disables a rule .
5980	EnableRuleByRegexp enables a rule by regexp
5981	DisableRuleByRegexp disables a rule by regexp
5982	LoadObjects loads all objects from the given source .
5983	GroupObjectsByMetadata groups objects by metadata
5984	GroupObjectsByPrimaryKeyHash returns a map of group keys to objects .
5985	AddException adds an exception to the seekret
5986	LoadExceptionsFromFile loads exceptions from a file
5987	printPlainResults prints the results as plain text .
5988	printJsonResults prints the results to stdout in JSON format .
5989	NewXor64Source returns a new Xor64Source .
5990	xor64 takes a 64 - bit value and returns the result .
5991	next returns the next value in the source .
5992	Seed sets the seed to the given value .
5993	NewFrameSet creates a new frame set from a frame range string .
5994	handleMatch parses a match and adds it to the FrameSet .
5995	Index returns the index of the frame in the frame set .
5996	Frame returns the frame at the given index .
5997	HasFrame returns true if the frame is in the set .
5998	FrameRangePadded returns a padded version of the frame range .
5999	Normalize returns a copy of the frame set with all elements normalized .
6000	FramesToFrameRange converts a slice of ints to a range of ints .
6001	frameRangeMatches returns a list of matches for the given frame range .
6002	toRange returns a slice of integers between [ start end + step ) .
6003	NewWorkManager creates a new workManager
6004	processSources processes the input files and output files .
6005	isInputDone returns true if the input is done .
6006	closeInputs closes the inDirs and inSeqs
6007	load loads the given paths into the workManager .
6008	loadRecursive loads all files and directories in the given paths .
6009	preparePaths takes a list of paths and returns a list of fileseq . FileSequences .
6010	PadFrameRange pads the number of digits in a frame range .
6011	zfillString returns a z - padded string with zeros .
6012	zfillInt returns a z - prefixed string of the given value .
6013	NewInclusiveRange creates a new InclusiveRange .
6014	String returns a string representation of the range .
6015	End returns the end of the range
6016	Len returns the length of the range .
6017	Min returns the minimum index in the range .
6018	Max returns the maximum index in the range .
6019	Contains returns true if the value is in the range .
6020	closestInRange returns the closest value in the range [ start end )
6021	Index returns the index of the closest value in the range .
6022	String returns a string representation of the inclusive ranges .
6023	Len returns the number of blocks in the range .
6024	Start returns the start position of the first block in the range .
6025	End returns the end of the range .
6026	Min returns the minimum value in the ranges .
6027	Max returns the maximum value in the ranges .
6028	numRanges returns the number of ranges .
6029	rangeAt returns the range at the given index or nil if the index is out of range .
6030	Append appends a new inclusive range to the end of the list .
6031	AppendUnique appends a unique range to the end of the range .
6032	Contains returns true if the range contains the given value .
6033	Index returns the index of the given value in the range or - 1 if not found .
6034	FrameRange returns the range of frames in the file .
6035	FrameRangePadded returns the frame range padded .
6036	Index returns the path of the frame at the given index .
6037	SetDirname sets the directory name .
6038	SetPadding sets the padding character .
6039	SetPaddingStyle sets the padding style .
6040	SetExt sets the file extension .
6041	SetFrameRange sets the frame range .
6042	Len returns the number of frames in the file .
6043	String returns a string representation of the file sequence .
6044	Copy returns a copy of this FileSequence .
6045	NewClient creates a new client
6046	UnmarshalXML implements xml . Unmarshaler . UnmarshalXML .
6047	UnmarshalXML implements the xml . Unmarshaler interface .
6048	Call makes a SOAP call to the server .
6049	JSONDoc loads a JSON document from the given path .
6050	AddLoader adds a loader function to the spec .
6051	JSONSpec returns the JSON document at the given path .
6052	Embedded creates a new document from an embedded JSON document .
6053	Spec loads the spec file at the given path .
6054	Analyzed parses a JSON document and returns it .
6055	Expanded returns a copy of the document that was expanded .
6056	ResetDefinitions resets the definitions of the document .
6057	Pristine returns a pristine representation of the document .
6058	OpenDb opens a GeoIP database from a list of files .
6059	GetOrg returns the organization of the given IP .
6060	GetRegion returns the country code and region code for the given IP address .
6061	GetRegionName returns the name of the region with the given country code .
6062	GetCountry returns the country code for the given IP address .
6063	NewRotatingFileHandler creates a new RotatingFileHandler .
6064	Close closes the file handle .
6065	String returns the string representation of the level .
6066	New creates a new logger .
6067	Close closes the logger .
6068	SetLevelByName sets the log level by name .
6069	Output writes a log message at the specified level .
6070	OutputJson outputs a log message in JSON format .
6071	Print calls Output to print to the standard logger .
6072	Println calls Output to print to the standard logger .
6073	Debug logs a message at level Debug .
6074	Debugln calls Output to print to the standard logger .
6075	Error logs a message at the Error level .
6076	Errorln calls Output to print to the standard logger .
6077	Info calls Output to print to the standard logger .
6078	Infoln calls Output to print to the standard logger .
6079	Warn calls Output to print to the standard logger .
6080	Warnln calls Output to print to the standard logger .
6081	NewStreamHandler creates a new StreamHandler .
6082	Right pads the length of the string to the right
6083	New creates a new rsapi . API .
6084	setupMetadata returns a map of resource names to resources .
6085	recordTypes records the type of an object or array data type .
6086	appendSorted appends a parameter to a list of params sorted by name .
6087	parseDataType returns the data type for an action parameter .
6088	parseParam creates a new ActionParam from the given path param and child .
6089	newParam creates a new action parameter .
6090	toGoReturnTypeName converts a Go type name to a Go type name .
6091	toGoTypeName returns the Go type name for the given name .
6092	prettify returns a string representation of the given object .
6093	isBuiltInType returns true if the given name is a built - in type .
6094	MatchHref returns true if the href matches the action s path pattern .
6095	Substitute returns the path pattern substituted with the given path variables .
6096	MarshalJSON implements the json . Marshaler interface .
6097	writeMultipartParams writes the payload as a multipart form section .
6098	PerformRequest performs the given request and returns the response .
6099	PerformRequestWithContext performs a request with a custom context
6100	LoadResponse loads the response body .
6101	ScheduleLocator creates a new ScheduleLocator .
6102	TemplateLocator creates a new TemplateLocator .
6103	fetchDetails fetches the environment details from cm15 .
6104	buildAliases builds an alias string from a list of SSHConfig
6105	serverArray returns all instances of the server array with the given name .
6106	server returns the instance with the given name
6107	toPackageName returns the package name for the given version .
6108	loadFile loads a JavaScript file .
6109	main is the main entry point for the RSC command .
6110	runCommand runs a command
6111	CreateJSONResponse creates a JSON response from a byte slice .
6112	AccountLocator creates an account locator
6113	AccountGroupLocator creates a new AccountGroupLocator .
6114	AlertLocator creates a new AlertLocator .
6115	AlertSpecLocator creates a new AlertSpecLocator .
6116	AuditEntryLocator creates a new AuditEntryLocator
6117	BackupLocator creates a new BackupLocator .
6118	ChildAccountLocator creates a new ChildAccountLocator .
6119	CloudLocator creates a new CloudLocator
6120	CloudAccountLocator creates a new CloudAccountLocator .
6121	CookbookLocator creates a new CookbookLocator
6122	CookbookAttachmentLocator creates a new CookbookAttachmentLocator .
6123	CredentialLocator creates a new CredentialLocator .
6124	DatacenterLocator creates a new DatacenterLocator
6125	DeploymentLocator creates a new DeploymentLocator .
6126	HealthCheckLocator creates a new health check locator .
6127	IdentityProviderLocator creates a new instance of the IdentityProviderLocator
6128	ImageLocator creates a new ImageLocator
6129	InputLocator creates a new input locator .
6130	InstanceLocator creates a new instance locator
6131	InstanceTypeLocator creates a new instance type locator .
6132	IpAddressLocator creates a new IpAddressLocator
6133	IpAddressBindingLocator creates a new IpAddressBindingLocator
6134	MonitoringMetricLocator creates a new MonitoringMetricLocator
6135	MultiCloudImageLocator creates a new instance of MultiCloudImageLocator
6136	MultiCloudImageMatcherLocator creates a new instance of MultiCloudImageMatcherLocator
6137	MultiCloudImageSettingLocator creates a new instance of MultiCloudImageSettingLocator
6138	NetworkLocator creates a new NetworkLocator
6139	NetworkGatewayLocator creates a new instance of NetworkGatewayLocator
6140	NetworkOptionGroupLocator creates a new NetworkOptionGroupLocator
6141	NetworkOptionGroupAttachmentLocator creates a new instance of NetworkOptionGroupAttachmentLocator
6142	Oauth2Locator creates a new Oauth2Locator
6143	PermissionLocator creates a new permission locator
6144	PlacementGroupLocator creates a new PlacementGroupLocator .
6145	PreferenceLocator creates a new PreferenceLocator .
6146	PublicationLocator creates a new PublicationLocator
6147	PublicationLineageLocator creates a new PublicationLineageLocator
6148	RecurringVolumeAttachmentLocator creates a new RecurringVolumeAttachmentLocator .
6149	RepositoryLocator creates a new RepositoryLocator .
6150	RepositoryAssetLocator creates a new repository asset locator .
6151	ResourceGroupLocator creates a new resource group locator
6152	RightScriptLocator creates a new RightScriptLocator .
6153	RightScriptAttachmentLocator creates a new instance of RightScriptAttachmentLocator .
6154	RouteLocator creates a new RouteLocator
6155	RouteTableLocator creates a new RouteTableLocator
6156	RunnableBindingLocator creates a new RunnableBindingLocator .
6157	SchedulerLocator returns a new instance of a SchedulerLocator
6158	SecurityGroupLocator creates a new SecurityGroupLocator with the specified href .
6159	SecurityGroupRuleLocator creates a new security group rule locator
6160	ServerLocator creates a new ServerLocator
6161	ServerArrayLocator creates a new ServerArrayLocator .
6162	ServerTemplateLocator creates a new ServerTemplateLocator .
6163	ServerTemplateMultiCloudImageLocator creates a new ServerTemplateMultiCloudImageLocator
6164	SessionLocator creates a new session locator
6165	SshKeyLocator creates a new SshKeyLocator .
6166	SubnetLocator creates a new SubnetLocator
6167	TagLocator creates a new TagLocator
6168	TaskLocator creates a new TaskLocator
6169	UserLocator creates a new UserLocator
6170	UserDataLocator creates a new UserDataLocator
6171	VolumeLocator creates a new VolumeLocator
6172	VolumeAttachmentLocator returns a pointer to a new VolumeAttachmentLocator .
6173	VolumeSnapshotLocator creates a new VolumeSnapshotLocator
6174	VolumeTypeLocator creates a new VolumeTypeLocator
6175	RegisterCommands registers the API commands .
6176	ShowCommandHelp shows the help for the specified command
6177	ShowAPIActions is a shortcut for ShowActions
6178	ShowHelp shows the help for the specified command .
6179	ParseCommandAndFlags parses a command and returns a CommandTarget and a list of flags .
6180	validateFlagValue returns an error if the given value is not a valid flag value .
6181	buildQuery builds a query string from a slice of APIParams .
6182	buildPayload builds a payload from a slice of APIParams .
6183	shortenPattern takes a resource pattern and a suffix and returns the shortened pattern .
6184	cleanDescription removes the required security scope from the description .
6185	fileExists returns true if the file exists
6186	AnalysisSnapshotLocator creates a new analysis snapshot locator
6187	BudgetAlertLocator creates a new BudgetAlertLocator .
6188	CloudBillLocator creates a new CloudBillLocator .
6189	CloudBillMetricLocator creates a new CloudBillMetricLocator .
6190	CurrentUserLocator creates an instance of CurrentUserLocator
6191	InstanceCombinationLocator creates a new InstanceCombinationLocator .
6192	InstanceMetricLocator creates a new InstanceMetricLocator
6193	InstanceUsagePeriodLocator creates a new InstanceUsagePeriodLocator .
6194	PatternLocator creates a new PatternLocator
6195	ReservedInstanceLocator creates a new ReservedInstanceLocator
6196	ReservedInstancePurchaseLocator creates a new instance of ReservedInstancePurchaseLocator
6197	ScenarioLocator creates a new scenario locator
6198	ScheduledReportLocator creates a new ScheduledReportLocator .
6199	TempInstancePriceLocator creates a new TempInstancePriceLocator .
6200	UserSettingLocator creates a new UserSettingLocator .
6201	readAllAsync reads all bytes from the given io . ReadCloser asynchronously .
6202	extractArg takes a name and a list of arguments and returns the value and the list of arguments .
6203	write writes b to the output file .
6204	AppliedPolicyLocator creates a new AppliedPolicyLocator
6205	ApprovalLocator creates a new ApprovalLocator
6206	IncidentLocator creates a new IncidentLocator .
6207	PolicyTemplateLocator creates a new PolicyTemplateLocator
6208	PublishedTemplateLocator creates a new PublishedTemplateLocator .
6209	DebugCookbookPathLocator creates a new DebugCookbookPathLocator .
6210	DockerControlLocator creates a new DockerControlLocator
6211	EnvLocator creates a new EnvLocator .
6212	LoginControlLocator creates a new LoginControlLocator
6213	ProcLocator creates a new ProcLocator
6214	Rl10Locator creates a new Rl10Locator
6215	TSSLocator creates a new TSSLocator
6216	TSSControlLocator creates a new TSSControlLocator
6217	TSSPluginLocator creates a new TSSPluginLocator
6218	NewAngularWriter creates a new AngularWriter
6219	WriteResource writes the given resource to the given writer .
6220	path returns the path of the action .
6221	mandatory returns true if the given param is mandatory .
6222	New creates a new API instance .
6223	FromCommandLine creates a client from a command line .
6224	CanAuthenticate returns true if the API can authenticate .
6225	Encrypt encrypts text using AES .
6226	Decrypt decrypts text using AES .
6227	guessType returns the type to use for the given resource .
6228	addType adds a new type to api . Types .
6229	extractCmdLineParams extracts command line parameters from an action parameter .
6230	NewMetadataWriter returns a new MetadataWriter .
6231	WriteHeader writes the metadata header to the writer .
6232	WriteMetadata writes metadata for the given APIDescriptor to the given writer .
6233	location returns the name of the location parameter .
6234	New creates a new rsapi . API .
6235	fromAPI creates an API from an rsapi . API .
6236	BuildRequest builds an HTTP request for the given resource action and href .
6237	setupMetadata returns a map of metadata . Resource names to resources .
6238	NewDisplayer creates a new Displayer from an HTTP response .
6239	ApplySingleExtract applies a single JSON selector to the Displayer .
6240	ApplyExtract extracts the results from the response body using the given selector .
6241	ApplyHeaderExtract extracts the raw output from the response header
6242	Output returns the output as a string .
6243	NewAPIAnalyzer returns a new API analyzer .
6244	Analyze analyzes the API definition .
6245	AnalyzeAliases analyze aliases
6246	LocatorFunc returns a function that can be used to locate the resource .
6247	ParseRoute takes a moniker and a list of routes and parses it into a list of path patterns .
6248	isDeprecated returns true if the given path is deprecated .
6249	isQueryParam returns true if n is a query parameter .
6250	isPathParam returns true if p is one of the path patterns .
6251	fetchAuditEntries fetches the audit entries for the given email .
6252	formatTime formats a time . Time as a string .
6253	printAudits prints audit entries .
6254	extractUnique returns a list of unique audit entries from oldEntries and newEntries .
6255	getHref returns the href of the audit entry .
6256	fail adds a new line to the format string if it doesn t end with a newline .
6257	parameters returns a comma - separated list of required parameters .
6258	paramsInitializer returns the initializer for the params of an action .
6259	commandLine returns the command line .
6260	toVerb converts a verb to a string .
6261	escapeBackticks escapes backticks .
6262	AccountPreferenceLocator creates an account preference locator .
6263	ApplicationLocator creates a new ApplicationLocator .
6264	EndUserLocator creates a new EndUserLocator
6265	NotificationRuleLocator creates a new NotificationRuleLocator .
6266	UserPreferenceLocator creates a new UserPreferenceLocator .
6267	UserPreferenceInfoLocator creates a new UserPreferenceInfoLocator .
6268	LoadConfig loads a config file from disk .
6269	CreateConfig creates a new config file at the given path
6270	fromAPI converts rsapi . API to rsapi . API
6271	HostFromLogin returns the host from the login URL .
6272	AnalyzeParam analyze a parameter
6273	AnalyzeAttribute takes a name query and an attribute and returns a gen . ActionParam .
6274	AnalyzeType analyze a type definition
6275	CreateType generates an inline type for the given query .
6276	Ref returns the definition for the given Ref .
6277	Type returns the type of the reference .
6278	Required returns the required fields of the Ref .
6279	ID returns the id of the definition .
6280	Service returns the service name of the endpoint .
6281	Method returns the method of the endpoint .
6282	NewTypeRegistry creates a new TypeRegistry .
6283	GetNamedType returns the type with the given name .
6284	CreateNamedType creates a new NamedType .
6285	CreateInlineType creates a new inline type .
6286	FinalizeTypeNames finalizes the type names in the registry .
6287	Merge merges other into this APIDescriptor .
6288	FinalizeTypeNames takes a map of raw types and generates a list of type names for each of them .
6289	uniqueTypeName returns a unique type name for the APIDescriptor .
6290	MandatoryParams returns the list of mandatory action parameters .
6291	HasOptionalParams returns true if the action has any optional parameters .
6292	MakeUniq creates a unique string from a base string and a list of taken strings
6293	NewClientWriter creates a new ClientWriter .
6294	WriteHeader writes the header to the writer .
6295	WriteResourceHeader writes the resource header to the given writer
6296	WriteType writes the object type to the writer .
6297	WriteResource writes a resource to the given writer .
6298	WithTrail adds a string to the trail of the evaluation context
6299	AnalyzeEndpoint analyze an endpoint .
6300	NetworkInterfaceLocator creates a new instance of NetworkInterfaceLocator
6301	NetworkInterfaceAttachmentLocator creates an instance of NetworkInterfaceAttachmentLocator
6302	UnmarshalJSON implements the json . Unmarshaler interface .
6303	ExecutionLocator creates a new ExecutionLocator
6304	NotificationLocator creates a new NotificationLocator .
6305	OperationLocator creates a new operation locator
6306	ScheduledActionLocator creates a new ScheduledActionLocator .
6307	NewBasicAuthenticator returns a basic authenticator .
6308	NewSSAuthenticator returns a new Authenticator that uses the given Authenticator to authenticate against an account .
6309	newCookieSigner returns a new Authenticator that authenticates with a cookie .
6310	Sign sets the X - Account header on the request .
6311	CanAuthenticate is part of the Signer interface .
6312	refresh refreshes the cookieSigner .
6313	Sign sets the Authorization header on the request .
6314	Sign sets the X - RLL - Secret header on the request .
6315	Sign authenticates the request .
6316	SetHost is part of the authenticator . Authenticator interface .
6317	CanAuthenticate is part of the authenticator . Authenticator interface .
6318	extractRedirectURL extracts the redirect URL from the response .
6319	buildURL builds a URL from host and path .
6320	GetAction returns the action with the given name or nil if not found
6321	HasLink returns true if the resource has a link with the given name
6322	findMatches returns a list of path patterns that match the href .
6323	NewPB creates a new dump client .
6324	newVariableDumpClient returns a new variable dump client .
6325	newRawClient returns a new raw http . Client .
6326	DoHidden implements the http . Client DoHidden method .
6327	Do implements the http . Client Do method .
6328	doImp sends the request to the dump server and returns the response .
6329	getClientWithoutTimeout returns a copy of the current http . Client with no timeout .
6330	dumpRequest dumps the request body
6331	writeHeaders writes the headers to the buffer .
6332	copyHiddenHeaders returns a copy of the given headers .
6333	validateCommandLine validates the command line .
6334	APIClient returns an API client for the specified command .
6335	RegisterClientCommands registers client commands
6336	Interactive sets the logger to run in interactive mode .
6337	toPattern converts a path string to a path pattern .
6338	WithClientIP returns a context with the given client IP set .
6339	ClientIP returns the client IP from the context .
6340	NewProducer creates a new instance of Producer .
6341	StartProducer creates a new producer and starts it .
6342	Start starts the producer .
6343	Stop stops the producer and waits for all requests to complete .
6344	Publish a message to the topic
6345	PublishTo sends a message to the given topic .
6346	NewLocalEngine creates a new LocalEngine .
6347	validate validates the consumer configuration .
6348	defaults sets the default values for the ConsumerConfig .
6349	NewConsumer creates a new consumer .
6350	StartConsumer starts a new consumer .
6351	Start starts the consumer .
6352	RateLimit takes a channel of messages and limits the number of messages to the specified limit .
6353	Write writes the raw response to the given writer .
6354	ReadResponse reads a response from the reader .
6355	backoff is a wrapper around jitteredBackoff that will panic if attempt < = 0 .
6356	String returns a string representation of the frame type .
6357	NewConsulEngine creates a new ConsulEngine .
6358	ParseMessageID parses a string into a MessageID .
6359	WriteTo writes the MessageID to the given io . Writer .
6360	NewMessage creates a new message .
6361	Finish marks the message as finished and requeues it .
6362	Requeue will requeue the message to the queue . If the message has already been completed this will panic .
6363	ReadCommand reads a single command from the reader .
6364	funcMapMaker returns the function map for this template .
6365	Funcs sets the template s function map .
6366	Execute renders the template and writes the result to the response .
6367	RegisterPath adds a path to the list of paths
6368	Asset returns the contents of the named asset .
6369	Glob implements the billy . Filesystem interface .
6370	NameSpace returns an instance of AssetFileSystem for the given nameSpace
6371	New creates a new Render .
6372	RegisterViewPath registers view paths
6373	SetAssetFS sets the asset filesystem
6374	Layout creates a new layout template .
6375	Funcs creates a new template with the given funcMap .
6376	Execute executes a template with the given context .
6377	RegisterFuncMap registers a function map .
6378	Asset returns the contents of the named asset .
6379	NewPlainClient returns a new instance of a plain client .
6380	Create creates a new uploader with the given URL headers and configuration .
6381	Open issues a GET request to the given URL and returns the response body .
6382	Sign signs the request with the given keys .
6383	Sign signs the request with the given keys .
6384	Readdir returns a slice of all the files in the directory .
6385	Find returns a list of nodes that match the given path expression .
6386	Lex returns a channel of XItems that match the given XPath .
6387	MustParseXML is like ParseXML but panics on error .
6388	ParseXML parses an XML document and returns a tree . Node .
6389	Call calls the wrapped function .
6390	Parse parses a string and returns an XPathExec .
6391	MustParse is like Parse but panics on error .
6392	Exec executes the XPathExec and returns the result .
6393	ExecBool is like Exec but returns the result as a boolean .
6394	ExecNum is like Exec but returns the result as a float64 .
6395	ExecNode executes an XPath expression and returns the result as a NodeSet .
6396	MustExec is like Exec but panics on error .
6397	ParseExec parses an XPath expression and executes it .
6398	CreateNode creates a new XMLNode with the given options .
6399	GetChildren returns the children of the XMLEle .
6400	GetAttrs returns the attributes of the element .
6401	ResValue returns the value of the current node .
6402	Parse parses xp and returns a Node .
6403	GetToken returns the current XML node s token .
6404	ResValue returns the value of the node .
6405	Exec executes an XPath expression .
6406	String returns a string representation of the number .
6407	Num converts a string to a Num .
6408	BuildNS builds a list of NS elements from an XML element .
6409	GetAttribute returns the first attribute with the given local and space .
6410	GetAttributeVal returns the value of an attribute in the given node .
6411	GetAttrValOrEmpty is like GetAttributeVal but returns an empty string if not found .
6412	FindNodeByPos finds the node with the given position . Returns nil if not found .
6413	Marshal marshals the given node to the given io . Writer .
6414	MarshalStr returns a string representation of the given node .
6415	NewLexer creates a new Lexer .
6416	NewLexerString creates a new Lexer from a string .
6417	Split splits a string into a slice of strings .
6418	Register adds an error to the registry .
6419	Get returns the error descriptor for the given code .
6420	GetAll returns all the descriptors in the registry .
6421	From converts an error from a grpc error .
6422	Descriptor returns an ErrDescriptor for the given error .
6423	GetAttributes returns the attributes of the given error .
6424	HTTPStatusCode returns the HTTP status code for the given type .
6425	HTTPStatusCode returns the HTTP status code of the error .
6426	HTTPStatusToType converts an HTTP status code to its corresponding type .
6427	ToHTTP converts an error to a JSON response .
6428	toImpl converts an error to an implementation .
6429	MetadataFromIncomingContext returns the metadata . MD from the context .
6430	MetadataFromOutgoingContext converts a context . Context into a metadata . MD
6431	TokenFromMetadata extracts the token from the metadata .
6432	TokenFromIncomingContext extracts a token from the incoming context .
6433	OutgoingContextWithToken returns a new context with the token set
6434	KeyFromMetadata extracts the key from the metadata .
6435	KeyFromIncomingContext extracts the key from the incoming context .
6436	OutgoingContextWithKey returns a copy of the given context with the given key merged .
6437	IDFromMetadata extracts the ID from the metadata .
6438	IDFromIncomingContext returns an ID from the context s metadata .
6439	OutgoingContextWithID returns a new context with the id set
6440	ServiceInfoFromMetadata extracts the service name service version and net address from the metadata .
6441	ServiceInfoFromIncomingContext extracts the service name version and network address from the incoming context .
6442	OutgoingContextWithServiceInfo returns an outgoing context with service - name service - version and net - address set .
6443	LimitFromMetadata extracts the limit from the metadata .
6444	OffsetFromMetadata extracts the offset from the metadata .
6445	LimitAndOffsetFromIncomingContext returns the limit and offset from the incoming context .
6446	OutgoingContextWithLimitAndOffset returns a new context with the given limit and offset set .
6447	before returns true if i is before j .
6448	New creates a new error with the given attributes .
6449	WithNamespace adds a namespace to a log . Interface
6450	Wrap wraps a log . Interface into a Namespaced .
6451	WithField returns a copy of the underlying logger with the given key and value .
6452	WithFields implements log . Interface .
6453	Format returns a formatted string with the given attributes .
6454	fix returns a string representation of the given value .
6455	GRPCCode returns the gRPC code for the type .
6456	GRPCCodeToType converts a gRPC code to a gRPC type .
6457	GRPCCode returns the gRPC code of the error .
6458	FromGRPC converts an error from a gRPC error .
6459	ToGRPC converts an error to a gRPC error .
6460	IsEnabled returns true if the namespace is enabled .
6461	Set sets the list of namespaces .
6462	Cause returns the cause of the given error if any .
6463	parseCode takes a string and returns a Code .
6464	UnaryServerInterceptor returns a new unary server interceptor .
6465	StreamServerInterceptor returns a new streaming server interceptor .
6466	UnaryClientInterceptor returns a new unary client interceptor .
6467	StreamClientInterceptor returns a new streaming client interceptor .
6468	Interceptor returns a new streaming client interceptor .
6469	Wrap wraps a logrus . Logger in a logrusEntryWrapper .
6470	NewCounter creates a new counter .
6471	NewRedisCounter creates a new Counter .
6472	NewLimiter creates a new Limiter .
6473	WithInsecure returns a copy of the credentials with the token set to a non - nil value .
6474	WithTokenFunc returns a pointer to a new TokenCredentials object wrapping the provided tokenFunc .
6475	GetRequestMetadata returns the request metadata .
6476	FieldsFromIncomingContext returns the fields from the incoming context .
6477	String returns a human - readable description of the type .
6478	UnmarshalText implements the encoding . TextUnmarshaler interface .
6479	fromString converts a string to an error type .
6480	Start starts the stats loop
6481	NewSimple creates a new Simple queue .
6482	Wrap wraps a log . Interface with a set of filters .
6483	WithFilters returns a new filtered instance with the given filters .
6484	WithField returns a new filtered log . Interface with the given key and value .
6485	WithFields returns a copy of the wrapped log . Interface with the given fields filtered .
6486	FilterSensitive returns a Filter that filters keys that are not in the list of sensitive strings .
6487	SliceFilter returns a Filter that filters a slice of values .
6488	MapFilter returns a Filter that filters map keys and values .
6489	RestrictFilter restricts the filter to the given field name .
6490	LowerCaseFilter adds a lower - cased filter to the query .
6491	newBatchPoints creates a new instance of influxdb . BatchPoints .
6492	NewSinglePointWriter creates a new SinglePointWriter
6493	Write implements the influxdb . Writer interface .
6494	WithScalingInterval is a functional option for the BatchingWriter interface .
6495	NewBatchingWriter creates a new BatchingWriter .
6496	Write writes a point to the batching writer .
6497	MustParseLevel implements the apex . Interface . MustParseLevel interface .
6498	New creates a new stream .
6499	SetLogger sets the stream s logger .
6500	CloseRecv closes the receive channel .
6501	Stats returns the number of sent and dropped packets .
6502	Run starts the streambuffer goroutine .
6503	ServerOptions returns gRPC server options
6504	ClientOptions returns gRPC client options .
6505	UnaryServerInterceptor returns a new unary server interceptor .
6506	StreamServerInterceptor returns a new streaming server interceptor .
6507	UnaryClientInterceptor returns a new unary RPC client interceptor .
6508	StreamClientInterceptor returns a new streaming client interceptor .
6509	defaults the config to the default values .
6510	Flush flushes the current batch .
6511	New creates a new handler .
6512	HandleLog implements the log . Handler interface .
6513	New creates a TTNRandom with the given seed .
6514	Names returns the names of the templates .
6515	String returns a string representation of a PerfDatum .
6516	RenderPerfdata renders a list of PerfDatums as a string .
6517	Exit prints the given status and message .
6518	NewCheckWithOptions creates a new check with the given options .
6519	AddResult adds a result to the check .
6520	AddResultf adds a result to the check .
6521	String returns a string representation of the check .
6522	Exitf is the same as Exit but takes a format string .
6523	Criticalf logs a message at critical level .
6524	Unknownf is a convenience wrapper around Exitf .
6525	NewDefaultStatusPolicy creates a default status policy .
6526	NewStatusPolicy creates a new status policy .
6527	ParseRange parses a range string into a Range .
6528	Check checks if a value is within the range .
6529	CheckInt returns true if the given int is within the range .
6530	CheckUint64 checks if the given uint64 is within the range .
6531	NewClient creates a new API client .
6532	GetKeyMeta returns the metadata for the key at path .
6533	GetKeysInDirMeta returns a list of all keys in a directory .
6534	GetKeyContent returns the content of a key .
6535	GetJobSummariesForProject returns a list of all jobs for a project
6536	GetJobsForProject returns a list of all jobs for a project
6537	GetJob returns a single job by ID .
6538	CreateJob creates a new job .
6539	CreateOrUpdateJob creates or updates a job .
6540	DeleteJob deletes a job .
6541	JobSummary returns the summary of the import result .
6542	GetSystemInfo returns the system information .
6543	DateTime returns the timestamp as a time . Time .
6544	GetAllProjects returns a list of all projects .
6545	GetProject returns a project by name .
6546	CreateProject creates a new project .
6547	DeleteProject deletes a project .
6548	SetProjectConfig sets the project s configuration .
6549	NewClient creates a new PB - RPC client .
6550	NewClientbyToken creates a new client using the provided token .
6551	SetDepth sets the depth of the client .
6552	ListDatacenters returns a list of all datacenters
6553	CreateDatacenter creates a new datacenter .
6554	GetDatacenter returns the datacenter with the given id .
6555	UpdateDataCenter updates the properties of a data center
6556	DeleteDatacenter deletes a datacenter .
6557	WaitTillProvisioned waits for the specified path to complete .
6558	ListFirewallRules returns a list of all the firewall rules for a given server and nic
6559	GetFirewallRule returns the details of a specific firewall rule
6560	CreateFirewallRule creates a new firewall rule on a virtual machine
6561	Updates an existing firewall rule
6562	DeleteFirewallRule deletes the specified firewall rule .
6563	ListLoadbalancers returns a list of all loadbalancers
6564	GetLoadbalancer returns a loadbalancer by DCID and lbalid .
6565	Updates a loadbalancer object
6566	DeleteLoadbalancer deletes a load balancer .
6567	ListBalancedNics returns a list of balanced nics
6568	AssociateNic associates a nic with a lbalid
6569	GetBalancedNic gets a balnic
6570	DeleteBalancedNic deletes a balnic
6571	ListLans returns a list of all lans for a given DC .
6572	GetLan gets a specific lan .
6573	DeleteLan deletes the specified lan .
6574	ListNics returns a list of all nics for a given SRV id .
6575	CreateNic creates a nic on a virtual machine
6576	GetNic gets a nic by its ID .
6577	UpdateNic updates an existing nic
6578	DeleteNic removes a nic from a DC .
6579	ListSnapshots returns a list of all snapshots
6580	GetSnapshot returns a single snapshot by ID .
6581	DeleteSnapshot deletes a snapshot .
6582	UpdateSnapshot updates an existing snapshot .
6583	ListIPBlocks returns a list of all IPBlocks
6584	ReserveIPBlock reserves a new IP block
6585	GetIPBlock returns a single IPBlock
6586	UpdateIPBlock updates an existing IP Block
6587	ReleaseIPBlock releases the specified IP Block
6588	ListVolumes returns a list of all volumes in a given DC .
6589	GetVolume retrieves a volume by ID .
6590	UpdateVolume updates a volume .
6591	CreateVolume creates a new volume .
6592	DeleteVolume deletes a volume .
6593	CreateSnapshot creates a new snapshot on a volume
6594	RestoreSnapshot restores a snapshot of a volume
6595	ListServers returns a list of all servers .
6596	GetServer returns information about a server .
6597	DeleteServer deletes a virtual server .
6598	ListAttachedCdroms returns a list of attached CDROM images .
6599	AttachCdrom attaches a cdrom image to a server .
6600	GetAttachedCdrom returns a cdrom image .
6601	DetachCdrom detaches a CDROM .
6602	ListAttachedVolumes returns a list of all attached volumes
6603	AttachVolume attaches a volume to a server .
6604	GetAttachedVolume returns information about a volume attached to a virtual disk .
6605	DetachVolume detaches a volume from a server .
6606	StartServer starts a server .
6607	ListLocations returns all the locations
6608	GetRegionalLocations returns a list of all the locations for a given region .
6609	GetLocation returns a Location object
6610	GetContractResources returns a list of contract resources .
6611	ListImages returns a list of all images .
6612	GetImage retrieves an image by ID .
6613	PrintHeaders prints response headers
6614	ListGroups returns a list of all groups
6615	GetGroup retrieves a group by ID .
6616	CreateGroup creates a new group
6617	UpdateGroup updates a group object
6618	DeleteGroup deletes a group .
6619	ListShares returns a list of all shares for a given group
6620	GetShare makes a GET request to UM resource share .
6621	Add a share to a resource .
6622	Update a share object .
6623	DeleteShare removes a resource from a group .
6624	ListGroupUsers returns a list of all users in a group
6625	AddUserToGroup adds a user to a group
6626	DeleteUserFromGroup deletes a user from a group
6627	ListUsers returns a list of all users
6628	GetUser retrieves a user by ID .
6629	CreateUser creates a new user
6630	UpdateUser updates a user object
6631	DeleteUser deletes a user .
6632	ListResources returns a list of all resources .
6633	GetResourceByType gets a resource by its resource type and resource id .
6634	ListResourcesByType lists all resources of the specified resource type .
6635	ListRequests returns a list of all requests
6636	GetRequest retrieves a request by ID .
6637	GetRequestStatus gets the status of a request .
6638	Close closes the underlying file .
6639	GetSerializableArgument returns the original value of the argument
6640	BoolVar implements the plugin . FlagSet interface .
6641	Bool is a convenience wrapper for EnvironmentFlags . Bool
6642	IntVar is a convenience wrapper for EnvironmentFlags . IntVar
6643	Int is a convenience wrapper for EnvironmentFlags . Int
6644	Int64Var is a convenience wrapper for EnvironmentFlags . Int64Var
6645	Int64 is a convenience wrapper for EnvironmentFlags . Int64
6646	UintVar implements the plugin . FlagSet interface .
6647	Uint is a convenience wrapper for EnvironmentFlags . Uint
6648	Uint64Var defines an uint64 flag with specified name default value and usage string . The argument p points to a uint64 variable in which to store the value of the flag .
6649	Uint64 is a convenience wrapper for EnvironmentFlags . Uint64
6650	StringVar implements the plugin . FlagSet interface .
6651	String defines a string flag with specified name default value and usage string .
6652	Float64Var is a convenience wrapper for EnvironmentFlags . Float64Var
6653	Float64 is a convenience wrapper for EnvironmentFlags . Float64
6654	DurationVar defines a time . Duration flag with specified name default value and usage string . The argument p points to a duration variable in which to store the value of the flag .
6655	Duration defines a time . Duration flag with specified name default value and usage string .
6656	Parse parses the environment flags .
6657	WriteStringToFile writes text to a file at path .
6658	ReadFileToString reads a file and converts it to a string .
6659	LineReader returns an io . Reader that reads lines from the given io . Reader .
6660	LineReaderFrom returns a line reader from the given path .
6661	FileExists checks if a file exists
6662	FileExistsInPath checks if a file exists in the path
6663	GetPathParts returns the dirPath fileName and absPath from the given path .
6664	GetThisPathParts returns the path parts of this executable .
6665	RandomString generates a random string of given length .
6666	ParseAddress returns the protocol and path of the given address .
6667	HomeDir returns the home directory .
6668	IsTCPPortAvailable returns true if the given port is available .
6669	RandomTCPPort returns a random TCP port number
6670	HashString returns the hash of a string .
6671	Context gets the current session from the context .
6672	Token returns an oauth2 . Token for the current session .
6673	NewDaemon creates a new daemon .
6674	Close shuts down the daemon .
6675	NewAccessTokenContext returns a new context with the given access token .
6676	AccessTokenFromContext extracts the access token from the context .
6677	RandomAccessToken generates a random access token
6678	Init creates a new zap logger based on the provided options .
6679	Load loads a dictionary from a zip file .
6680	Start starts a new session with the given access token and refresh token .
6681	Get retrieves a session from the database .
6682	List returns a list of all sessions
6683	Exists returns true if storage exists for the given access token .
6684	Abandon is part of the storage . Storage interface .
6685	SetValue sets the value for the given access token .
6686	Delete deletes the session with the given access token .
6687	Setup creates the storage tables .
6688	TearDown tears down the storage .
6689	initJaeger initializes a new Jaeger Tracer .
6690	Usage prints usage information .
6691	Build builds a DoubleArray from a list of keywords .
6692	Read reads a DoubleArray from an io . Reader .
6693	Get returns the node with the given key .
6694	ExternalNodes returns a list of nodes that are not listening on the cluster .
6695	GetOther returns the other node for the given access token .
6696	GoString returns a string representation of the cluster .
6697	Scan implements the sql . Scanner interface .
6698	Value implements the driver . Valuer interface .
6699	Has returns true if the bag contains the given key .
6700	WriteTo implements io . WriterTo interface . It serializes the table into the wire format .
6701	ReadIndexTable reads the index table from the given io . Reader
6702	New creates a new ActionBar instance
6703	RegisterAction adds an action to the action bar
6704	Actions creates a new ActionBar with the given actions .
6705	Render render action bar
6706	FuncMap returns the function map for rendering the edit button
6707	EditMode checks if the user is in edit mode .
6708	SwitchMode switch mode
6709	InlineEdit renders the inline edit page
6710	Error implements the error interface for Error .
6711	ParseFile parses a file and returns a slice of machines and macros .
6712	FindMachine returns the machine with the given name from the given filename . If no machine with the given name is found an error is returned .
6713	New creates a new Kace .
6714	Camel returns the camel case version of s .
6715	Pascal returns the PascalCase version of s .
6716	Snake returns a snake_case version of s .
6717	SnakeUpper is a convenience wrapper around snake_case .
6718	Kebab is a case - insensitive version of Kebab .
6719	KebabUpper is a case - insensitive version of Kebab .
6720	isPathSafe checks if the given string is a valid URL path .
6721	Start sets the start time of the request
6722	ParseAuthHeaders parses auth headers from request
6723	Tracer returns a ClientParam that configures the client to use a new Tracer .
6724	HTTPClient sets the http . Client to use .
6725	BasicAuth specifies the username and password to authenticate with .
6726	BearerAuth is a ClientParam to set the bearer auth token .
6727	CookieJar is a ClientParam to set the cookie jar .
6728	SanitizerEnabled is a ClientParam to set the sanitizer enabled .
6729	OpenFile returns a ReadSeekCloser for the given endpoint .
6730	RoundTrip is a wrapper around http . Client . RoundTrip .
6731	SetAuthHeader sets the Authorization header .
6732	FileName returns the filename part of the Content - Disposition header .
6733	newBuffersFromFiles creates a list of fileBuffers from a list of files .
6734	newFileBuffer creates a new fileBuffer from a File .
6735	rewind recalculates the underlying reader .
6736	ConvertResponse converts error to trace . Response
6737	Set implements the flag . Value interface .
6738	WriteAnswer implements the Option interface .
6739	String returns a string representation of the option .
6740	TriggerIncidentKey triggers an incident key event .
6741	TriggerWithDetails is like Trigger but takes a description and a map of details .
6742	TriggerIncidentKeyWithDetails is like TriggerIncidentKey but takes a description key and a map of details .
6743	Merge merges src into dst .
6744	setSource sets the Source field of v .
6745	convertString converts src to dst .
6746	Do executes f in a transaction . If f returns an error the transaction is rolled back .
6747	NewFile returns an io . Writer that writes to the given filename .
6748	internalRun runs the benchmark .
6749	String returns a string representation of the row .
6750	Tabulate converts a list of results into a list of rows .
6751	AmazonRequest sends an HTTP GET request to Amazon .
6752	WriteTabularData writes a tabular summary of the results to the writer .
6753	Reduce returns a slice of buckets sorted by timestamp .
6754	NewSemaphore creates a new Semaphore .
6755	Release releases the semaphore .
6756	Resize resizes the semaphore to the given capacity .
6757	AddOutput adds a new output to the benchmark .
6758	RunBenchmarks runs the benchmarks .
6759	parseBool parses a boolean from bytes .
6760	checkInteger checks that the given integer is minimally - encoded .
6761	parseInt64 parses a 64 - bit integer from bytes .
6762	parseInt32 parses bytes as an int32 and returns it .
6763	parseBigInt parses a big . Int from a byte slice .
6764	parseBitString parses a BIT STRING .
6765	parseObjectIdentifier parses an ASN . 1 OBJECT IDENTIFIER .
6766	parseBase128Int parses a base 128 integer .
6767	parseGeneralizedTime parses the given byte slice as a time . Time .
6768	parsePrintableString parses a printable string .
6769	isPrintable returns true if b is a printable character .
6770	parseSequenceOf parses an ASN . 1 sequence of the given type .
6771	invalidLength returns true if the offset + length is outside the slice length .
6772	setDefaultValue sets the default value if required .
6773	UnmarshalWithParams unmarshals the bytes into the value pointed to by val using the given parameters .
6774	parseFieldParameters parses a comma - separated list of field parameters .
6775	getUniversalType returns the universal tag for the given type .
6776	DecodeString decodes a base32 encoded string .
6777	MailNotifier returns the first MailNotifier from the database
6778	SaveMailNotifier save a mail notifier
6779	RegisterProvider registers a new auth provider .
6780	InitDb initializes the database
6781	Until will block until the stop channel is closed .
6782	logPanic logs a panic .
6783	User gets a user by username
6784	Users returns all users matching the given filter
6785	SaveUser saves a user to MongoDB
6786	DeleteUser removes a user from the database
6787	LoadCACertFile loads a CA Certificate from a file
6788	NewAuth creates a new Auth instance .
6789	ValidateRequest checks if the request is valid
6790	Process validates the request and returns an error if it fails .
6791	ValidateCN validates the CN of a certificate .
6792	ValidateOU validates that the certificate has a valid OU
6793	KeyLen returns the number of bits required to encode x .
6794	DefaultConfig returns the default configuration .
6795	New creates a new instance of CertSigner .
6796	New creates a new instance of VaultFactory .
6797	DefaultServiceConfig returns the default ServiceConfig .
6798	NewService returns a new instance of Vault Service .
6799	Delete unmounts the PKI mount for the given clusterID
6800	IsNoVaultHandlerDefined returns true if the given error indicates that no vault handler is defined .
6801	New creates a new Service .
6802	Create creates a role
6803	CreateJob creates a new job configuration .
6804	Run runs the config .
6805	newWatcher creates a new watcher
6806	Start starts the watcher and returns a channel that can be used to receive notifications .
6807	Stop stops the watcher .
6808	Active returns true if the watcher is active .
6809	Add adds paths to the list of paths to watch .
6810	watch is a long lived goroutine that watches for changes and sends them to the provided channel .
6811	Watching returns a list of all watched paths .
6812	State returns the current state of the watcher .
6813	Store stores an error in the request context .
6814	Get returns the error from the request context or nil if none was set .
6815	Catch returns a middleware that catches an error .
6816	Try returns a http . Handler that stores an error in the store .
6817	Recover returns a middleware that recovers from panics .
6818	This is the main entry point for testing .
6819	SyncHandler returns a http . Handler that syncs the gostruct .
6820	connect is used to establish a connection to the server .
6821	send sends an update to the server .
6822	NumConnections returns the number of active connections .
6823	Push is used to push to the push queue . It returns true if the queue was queued .
6824	gopush sends the state to the push queue .
6825	NewOutForward creates a new OutForward .
6826	Run starts the in - tail process .
6827	New creates a new Fluent connection .
6828	Close closes the Fluent connection .
6829	IsReconnecting returns true if the Fluent is reconnecting .
6830	connect establishes a connection to the Fluent server .
6831	Notification creates a new GNotifier .
6832	NullNotification creates a null notification .
6833	New creates a new identity .
6834	Issue creates a new identity with the given options .
6835	Subject is an Option to set the subject .
6836	PrivateKey is an Option to set the private key .
6837	NotBefore is an Option to set the notBefore value .
6838	NotAfter is a functional option that sets the notAfter value .
6839	IssuingCertificateURL is a functional option on Config .
6840	OCSPServer is a functional option on Config .
6841	New creates a new TelegramBotAPI .
6842	NewWithWebhook creates a new TelegramBotAPI with the given webhook URL and certificate .
6843	Close shuts down the TelegramBotAPI .
6844	GetMe returns the current user .
6845	RunBot runs a bot .
6846	RunBotOnWebhook runs a bot on a webhook .
6847	NewOutgoingMessage creates a new OutgoingMessage .
6848	NewOutgoingLocation creates a new OutgoingLocation .
6849	NewOutgoingVenue creates a new OutgoingVenue .
6850	NewOutgoingVideo creates a new OutgoingVideo .
6851	NewOutgoingVideoResend creates a new OutgoingVideo .
6852	NewOutgoingPhoto creates a new OutgoingPhoto .
6853	NewOutgoingPhotoResend creates a new OutgoingPhoto .
6854	NewOutgoingSticker creates a new OutgoingSticker .
6855	NewOutgoingStickerResend creates a new OutgoingSticker .
6856	NewOutgoingVoice creates a new OutgoingVoice
6857	NewOutgoingVoiceResend creates a new OutgoingVoice .
6858	NewOutgoingAudio creates a new OutgoingAudio .
6859	NewOutgoingAudioResend creates a new OutgoingAudio .
6860	NewOutgoingDocument creates a new OutgoingDocument .
6861	NewOutgoingDocumentResend creates a new OutgoingDocument with the given recipient and fileID .
6862	NewOutgoingForward creates a new OutgoingForward .
6863	NewOutgoingChatAction creates a new OutgoingChatAction .
6864	NewOutgoingUserProfilePhotosRequest creates a new OutgoingUserProfilePhotosRequest .
6865	NewOutgoingKickChatMember creates a new OutgoingKickChatMember .
6866	NewOutgoingUnbanChatMember creates a new OutgoingUnbanChatMember .
6867	NewOutgoingCallbackQueryResponse creates a new OutgoingCallbackQueryResponse .
6868	NewInlineQueryAnswer creates a new inline query answer .
6869	Type returns the message type .
6870	Type returns the update type .
6871	MarshalJSON implements the json . Marshaler interface .
6872	querystring returns a query string representation of the outgoingSetWebhook .
6873	getBaseQueryString returns a query string for the outgoing message .
6874	getBaseQueryString converts the outgoingMessageBase to a query string .
6875	querystring converts the OutgoingAudio to a query string .
6876	querystring returns the URL query string for the OutgoingPhoto .
6877	querystring converts the OutgoingUserProfilePhotosRequest to a query string .
6878	querystring converts the OutgoingVideo to a query string .
6879	querystring returns a query string for the OutgoingVoice object .
6880	NewInlineQueryResultArticle creates a new inline query article .
6881	NewInlineQueryResultPhoto creates a new inline query photo .
6882	NewInlineQueryResultGif creates a new inline query GIF .
6883	NewInlineQueryResultMpeg4Gif creates a new inline query mpeg4 GIF .
6884	NewInlineQueryResultVideo creates a new inline query video .
6885	Send sends the user profile photos for the current user .
6886	Send sends an OutgoingChatAction .
6887	Send sends an inline query answer .
6888	Send sends a kick message to the chat .
6889	Send sends the OutgoingUnbanChatMember to the bot .
6890	Send sends an OutgoingCallbackQueryResponse .
6891	NewAPIClient creates a new APIClient .
6892	BeforeInsert sets CreatedAt and UpdatedAt to now
6893	ColumnName returns the column name for a table .
6894	New creates a new DB with the given dialect and dsn .
6895	From creates a FROM clause from a struct .
6896	Where creates a where condition .
6897	OrderBy creates a ORDER BY condition .
6898	Limit creates LIMIT condition .
6899	Offset creates an OFFSET condition .
6900	Join creates a JoinCondition .
6901	Count function .
6902	Update updates the fields of struct .
6903	Delete deletes the given struct .
6904	Begin starts a new transaction .
6905	Commit commits the current transaction .
6906	Quote quotes a string .
6907	SetLogOutput sets the log output for the database .
6908	selectToSlice takes a sql . Rows and returns a slice of values .
6909	selectToValue returns the first row of rows as a reflect . Value .
6910	fieldIndexByName returns the index of the field with the given name .
6911	columns returns a comma - separated list of column names .
6912	tagsFromField returns a list of tags for a struct field .
6913	hasSkipTag checks if the field has the skip tag .
6914	hasPKTag returns true if the field has the pk tag .
6915	isAutoIncrementable returns true if the field is auto incrementable .
6916	collectFieldIndexes returns a slice of field indexes for the given type .
6917	findPKIndex returns the index of the primary key of the given type .
6918	sizeFromTag extracts the dbSizeTag from the field s tag .
6919	columnFromTag returns the column name for a struct field .
6920	defaultFromTag returns the default value for a struct field .
6921	Where adds a where condition to the query .
6922	And append an AND condition to the query .
6923	Or append a or condition to the query .
6924	Like is a syntax for Like .
6925	Between adds a BETWEEN condition to the query .
6926	OrderBy adds a ORDER BY clause to the query .
6927	Limit adds LIMIT clause to the query .
6928	Offset adds an OFFSET clause to the query .
6929	SetFormat sets the template format .
6930	Print executes the template and writes the result to the writer .
6931	Print does nothing
6932	Quote quotes a string .
6933	SQLType returns the SQL type for the given value .
6934	New creates a new tar archive from a file .
6935	Disconnect disconnects the host .
6936	nextNetworkAdapterID returns the next available network adapter ID .
6937	totalNetworkAdapters returns the total number of network adapters in vmx
6938	RemoveAllNetworkAdapters removes network adapters from the VM .
6939	RemoveNetworkAdapter removes the specified network adapter from the VM .
6940	NetworkAdapters returns a slice of all network adapters attached to the VM .
6941	newArchive creates a new 7z archive .
6942	GetFileReader returns an io . ReadCloser for the named file in the archive .
6943	ExtractToWriter extracts the contents of the named file to the given writer .
6944	ExtractToFile extracts the file from the archive to the given path .
6945	SharedFoldersParentDir returns the path to the parent directory of the guest s shared folders .
6946	Name returns the name of the snapshot .
6947	Description returns the description of the snapshot .
6948	cleanupSnapshot releases the snapshot handle .
6949	BusTypeFromID returns the bus type from a VMX ID .
6950	Read reads the VMXFile from disk .
6951	Write writes the model to a file .
6952	NewVirtualMachine creates a new VM instance
6953	Vcpus returns the number of vCPUs in the VM .
6954	VmxPath returns the path to the VM s virtual memory .
6955	MemorySize returns the memory size of the VM .
6956	ReadOnly returns true if the VM is read - only .
6957	InVMTeam returns true if the VM is in a team .
6958	PowerState returns the power state of the VM .
6959	ToolsState returns the current tools state of the VM .
6960	IsRunning returns true if the VM is running .
6961	GuestOS returns the operating system of the VM .
6962	cleanupVM releases the VM handle .
6963	updateVMX updates the vmx settings of the VM .
6964	SetMemorySize sets the memory size of the VM .
6965	SetNumberVcpus sets the number of vCPUs on the VM .
6966	SetDisplayName sets the display name of the VM .
6967	SetAnnotation sets the VM s annotation .
6968	SetVirtualHwVersion sets the virtual hardware version .
6969	Error returns a string representation of the error .
6970	Errorf wraps fmt . Errorf
6971	Error implements the error interface .
6972	string returns a string representation of the stack frame .
6973	newStackFrame creates a new stack frame for the given program counter .
6974	captureStack returns a slice of stack frames .
6975	parseFuncName parses function name into package path and signature .
6976	Stack prints the stack trace of the given error .
6977	StackWithCaller is a wrapper around runtime . Stack .
6978	Write implements the io . Writer interface .
6979	ResponseStatus returns the status code of the http . ResponseWriter .
6980	httpResponseStruct returns the value of the response writer field .
6981	SetDetectedContentType sets the Content - Type header .
6982	New creates a new server error .
6983	New creates a new DBError .
6984	New returns a new instance of ValidationError
6985	New creates a new NotFoundError .
6986	StrLength validate string length
6987	StrLenIn validate string length
6988	StrIn checks if a string is in a list of strings
6989	GetEmail validates email
6990	MostSpecificType returns the most specific type from a list of types .
6991	FullTypeHierarchy returns the type hierarchy of the highest level type .
6992	SortTypes sorts a list of types and returns the sorted list .
6993	Delete removes a key from the store .
6994	Set is part of the Provider interface
6995	refresh refreshes the session
6996	Get returns all values for a given session ID .
6997	Destroy removes a session from the pool .
6998	UpExpire expires the session with the given id .
6999	Use adds a router handler to the stack .
7000	ServeHTTP implements the http . Handler interface .
7001	Use adds middleware to the router group
7002	Group creates a new router group
7003	Run starts the server .
7004	create creates a new router group .
7005	Redirect redirects the request to the given URL with status code .
7006	Ok writes a response with status code 200 .
7007	Fail will fail the request with the given error .
7008	ResStatus writes the status code to the response .
7009	Next calls the next handler in the stack .
7010	GetSession returns the current session
7011	GetBodyJSON returns the request body as a JSON object .
7012	SetSession sets a new session
7013	FreshSession refreshes the session for the given key .
7014	DeleteSession removes the session from the context .
7015	Write is part of the http . ResponseWriter interface
7016	WriteHeader implements http . ResponseWriter .
7017	New creates a new Client .
7018	setAllowLargeResults sets whether or not to allow large results .
7019	connect attempts to connect to the bigquery service .
7020	InsertRow inserts a row into a table .
7021	AsyncQuery performs a paginated query and sends the results to dataChan .
7022	Query sends a query to the specified dataset and project .
7023	stdPagedQuery performs a query using the standard BigQuery API .
7024	largeDataPagedQuery performs a query for large data .
7025	pagedQuery performs a paginated query .
7026	pageOverJob will fetch the results of a job and send them to the result channel .
7027	Count returns the number of items in a dataset .
7028	work is a wrapper around Fetcher . Fetch .
7029	subworker runs a job in a separate goroutine .
7030	worker is the main worker loop .
7031	Supervisor runs in a separate goroutine .
7032	Run starts the pool .
7033	Add adds a new job to the pool
7034	Wait waits for the working pipe to be closed .
7035	Return a list of completed jobs .
7036	WaitForJob waits for a job to be executed
7037	Status returns the current status of the pool .
7038	WrapHTTPHandlerFunc wraps a http . HandlerFunc in a HandlerFunc .
7039	WebSocketHandlerFunc is a wrapper for websocket . Handler .
7040	StaticFile creates a new staticFile object .
7041	PreloadFile loads a file from disk .
7042	InitHtmlTemplates initializes htmlTemp . Template with html . ParseGlob
7043	InitTextTemplates initializes text templates
7044	Html creates a new HTML template .
7045	Text creates a text template .
7046	InitWatcher creates a new fsnotify . Watcher .
7047	CloseWatcher closes the watcher .
7048	Find returns the first route that matches the given path .
7049	Add adds a new route to the list .
7050	NewRouters creates a new set of routers .
7051	NewServerMux creates a new ServerMux .
7052	err calls ErrorHandle if set
7053	HandleFunc registers a new handler for the given router .
7054	handleError handles an error and sets the response status and data . Returns true if the error was handled .
7055	Redirect sets the response status and data
7056	InitPProf inits pprof routes
7057	StartSession starts a new session
7058	combinations returns a channel of combinations of the given list .
7059	repeated_combinations returns a channel of repeated combinations .
7060	permutations returns a channel of permutations of the given list .
7061	repeated_permutations returns a channel of repeated permutations .
7062	gformat takes a format string and a list of arguments and returns the formatted string and a list of arguments .
7063	Errorm wraps fmt . Errorf with gformat
7064	Fprintm formats according to a format specifier and writes the result to w .
7065	Printm is a convenience wrapper around fmt . Printf .
7066	Sprintm formats according to a format specifier and returns the result as a string .
7067	Validate validates the password strength requirements .
7068	MakeRequirements returns a PasswordStrengthRequirements struct .
7069	sanityCheck checks if the password strength requirements are valid .
7070	password returns a password based on the password strength requirements .
7071	NewPassword returns a cryptographically secure password .
7072	NewPasswords returns a slice of password passes .
7073	addNums adds a random number of digits to a string .
7074	punctuate randomize a number of punctuation characters
7075	deprecated_init is deprecated in favor of NewParamSet .
7076	Param adds a parameter to the param set .
7077	Parse parses the params in the ParamSet .
7078	Unmarshal implements the json . Unmarshaler interface .
7079	GetDefaultHTTPClient returns a default http client
7080	DeviceInfo returns information about a device .
7081	DevicePresence requests the presence of a device
7082	NotificationStatus returns the status of a push .
7083	DeleteNotification deletes a push notification
7084	NotifyDevice sends a notification request to Pushy .
7085	Assert asserts the test if b is false .
7086	CreateFile creates a file with the given size .
7087	AddError adds an error to the form
7088	AddFieldError adds an error to the FieldErrors map
7089	HasErrors returns true if the form has any errors .
7090	NewError creates a new form error with the given error message .
7091	NewFieldError creates a new error for a given field .
7092	ChainHandlers chains multiple http . Handlers in reverse order .
7093	FinalHandler returns a final http . Handler that wraps h .
7094	Hash returns the MD5 hash of reader .
7095	IsHash returns true if the string is a valid MD5 hash .
7096	WithBaseDir sets the base directory for the search .
7097	WithFileFindFunc sets a function that will be called when a file is found .
7098	WithTemplateFromFiles adds a template file to the options .
7099	WithTemplatesFromFiles adds templates to the options .
7100	WithTemplateFromStrings adds a template string to the template map .
7101	WithTemplatesFromStrings sets a map of template names to strings .
7102	WithFunction adds a function to the options .
7103	WithFunctions adds a map of template functions to the options .
7104	WithDelims sets the open and close delims .
7105	New creates a new Templates struct .
7106	RespondWithStatus renders the given template with the given data and status .
7107	RespondTemplate sends a response with status code 0 .
7108	Respond writes a response with status code 0 .
7109	RenderTemplate renders the given template with the given data .
7110	New creates a new h2quic server
7111	ServeUDP serves the given UDP connection .
7112	Shutdown shuts down the server .
7113	QuicHeadersHandler sets the quic headers on the response .
7114	GetRequestIPs returns the X - Forwarded - For and X - Real - Ip headers .
7115	DomainRedirectHandler returns a handler that redirects to the specified domain .
7116	New creates a new server .
7117	Add adds a new server to the list .
7118	TCPAddr returns the TCP address for the server with the given name .
7119	UDPAddr returns the UDP address for the server with the given name .
7120	Close shuts down all servers .
7121	Shutdown shuts down all servers .
7122	Accept implements the net . Listener interface .
7123	NewStaticFilesHandler returns a handler that serves static files .
7124	ServeHTTP implements the http . Handler interface .
7125	MarshalJSON returns the JSON encoding of the Options .
7126	UnmarshalJSON implements the json . Unmarshaler interface .
7127	MarshalYAML implements the yaml . Marshaler interface for Options
7128	UnmarshalYAML implements the yaml . Unmarshaler interface .
7129	NewHandler returns a new http . Handler that logs the response .
7130	WithPanicResponse sets the body and contentType of the panic response .
7131	WithPanicResponseHandler sets the http . Handler used to handle panics .
7132	New creates a new http . Handler .
7133	ServeHTTP implements the http . Handler interface .
7134	NewContextFunc returns a function that can be used to create a context from a map .
7135	NewMapErrorRegistry creates a new error registry
7136	AddError adds an error to the error registry .
7137	AddMessageError adds a message error to the error registry .
7138	MustAddError adds an error to the error registry and panics on error .
7139	MustAddMessageError is like AddMessageError but panics on error .
7140	AddHandler adds a handler function to the error registry . Returns ErrErrorAlreadyRegistered if the code is already registered .
7141	MustAddHandler adds a handler to the error registry and panics on error .
7142	Handler returns the error handler for the given HTTP status code .
7143	New returns a new instance of Client .
7144	Request is a wrapper around RequestContext . Request .
7145	JSONContext performs a JSON request with a custom context .
7146	StreamContext sends a request with a custom context .
7147	Stream is a convenience wrapper around StreamContext .
7148	JSONUnmarshal implements the json . Unmarshaler interface .
7149	ServeTCP implements the http . Server interface .
7150	ServeTCP implements the http . Server interface .
7151	Shutdown shuts down the server .
7152	HandleMethods calls the appropriate handler for the request method .
7153	NewSetHeadersHandler returns a new http . Handler that sets the given map of headers .
7154	New returns a new instance of Server .
7155	HashedPath returns the hashed path for the given path .
7156	New creates a new service .
7157	HTMLHandler returns an http . Handler that responds with the service unavailable status .
7158	Status returns the status of the service .
7159	StatusHandler returns the current maintenance status .
7160	OnHandler is the HTTP handler that is invoked when the service is enabled .
7161	OffHandler is the HTTP handler to turn off the maintenance service .
7162	MarshalJSON method of PostIRCMessageRequest
7163	MarshalJSON method of PostArtifactRequest
7164	MarshalJSON method of PostArtifactResponse
7165	MarshalJSON method of HookChangedMessage
7166	MarshalJSON method of TriggerHookRequest
7167	MarshalJSON method of TriggerHookResponse
7168	UnmarshalJSON implements the json . Unmarshaler interface .
7169	MarshalJSON method of LaunchInfo
7170	MarshalJSON implements json . Marshaler .
7171	MarshalJSON implements the json . Marshaler interface .
7172	MarshalJSON implements the json . Marshaler interface .
7173	MarshalJSON implements the json . Marshaler interface .
7174	UnmarshalJSON implements the json . Unmarshaler interface for Time .
7175	Write implements io . Writer .
7176	Seek implements the io . Seeker interface .
7177	Read implements io . ReadSeeker .
7178	MarshalJSON method of LaunchSpecsResponse
7179	MarshalJSON method of RegionLaunchSpec
7180	GenerateCode generates go code for each API definition .
7181	postPopulate adds the schemaURLs to the entry .
7182	CreateTemporaryCredentials wraps CreateNamedTemporaryCredentials in a wrapper around Credentials . CreateNamedTemporaryCredentials .
7183	setURL creates a new url . URL from the client s BaseURL .
7184	SignRequest signs a request with the client and access token .
7185	APICall performs an API call .
7186	SignedURL returns a signed URL for the given route and query .
7187	MarshalJSON method of HawkSignatureAuthenticationResponse
7188	bmw256 returns the BMW - 256 encoding of the input .
7189	NewCubeHash creates a new CubeHash .
7190	cubehash256 computes the 256 - bit cube hash of data .
7191	Sum calculates the BMW hash of data .
7192	squeeze squeezes the state into out .
7193	reducedSqueezeRow0 is used to reduce the number of bits in a row .
7194	reducedDuplexRow1 computes the duplex of nCols rows from rowIn to rowOut .
7195	NewReaderByteCodeLoader creates a new ReaderByteCodeLoader .
7196	LoadReader loads code from an io . Reader .
7197	NewV3 returns a new UUID based on the given namespace and name .
7198	txLiteral marks the current operation as a literal .
7199	txFetchSymbol fetches the symbol for the current operation .
7200	txMarkRaw marks the current value as a raw string .
7201	txUnmarkRaw removes the raw value from the state .
7202	txPrint prints the current value of the transaction .
7203	txPrintRaw prints the current state s sa as a string .
7204	NewLoopVar creates a new loop variable .
7205	txMakeArray makes the current stack stack as an array .
7206	txFunCallOmni is an implementation of txFunCall .
7207	DumpAST enables or disables the dumpAST flag .
7208	DumpByteCode enables or disables byte code dump .
7209	Optimize applies the NaiveOptimizer to the code .
7210	NewFuncDepot returns a new FuncDepot .
7211	Get implements FuncDepot . Get .
7212	Set implements FuncDepot . Set .
7213	NewFileTemplateFetcher creates a new FileTemplateFetcher .
7214	LastModified returns the last modification time of the source file .
7215	Reader returns an io . Reader for the source file .
7216	Bytes returns the contents of the source as a byte slice .
7217	NewState returns a new state .
7218	PushFrame adds a new frame to the stack .
7219	PopFrame removes the frame from the stack and returns it .
7220	CurrentFrame returns the current frame .
7221	Warnf logs a warning message .
7222	AppendOutputString appends a string to the output buffer .
7223	Popmark removes and returns the last mark on the stack .
7224	CurrentMark returns the current mark in the markstack .
7225	LoadByteCode returns the ByteCode for the given key .
7226	Reset resets the state to its initial state .
7227	DeclareVar declares a variable .
7228	GetLvar returns the local variable at the given index .
7229	SetLvar sets the Lvar at the given index .
7230	NewByteCode creates a new ByteCode .
7231	Append appends an op to the byte code .
7232	AppendOp appends a new Op to the code .
7233	String returns a string representation of this ByteCode .
7234	NewCachedByteCodeLoader creates a new CachedByteCodeLoader .
7235	Load loads a byte code from the cache .
7236	NewFileCache creates a new FileCache .
7237	GetCachePath returns the path to the cache file .
7238	Get returns the cache entity for the given key .
7239	Set stores the given entity in the FileCache .
7240	Delete removes a file from the cache
7241	Get returns the cache entity for the given key .
7242	Set adds a cache entity to the cache .
7243	Delete removes the key from the cache .
7244	NewStringLexer creates a new lexer for the given template .
7245	NewReaderLexer creates a new Lexer from an io . Reader .
7246	NewV4 creates a new V4 UUID .
7247	Parse parses the given template and returns the AST .
7248	ParseReader parses the given io . Reader into a Kolonish AST .
7249	Visit returns a channel of all nodes in the AST .
7250	String returns a string representation of the AST .
7251	Run runs the script with the given ByteCode version .
7252	DefaultParser is the default parser for sytanx .
7253	DefaultLoader is the default XSLate loader .
7254	DefaultVM sets the default Xslate VM .
7255	Get returns the value associated with the given key .
7256	NewHTTPSource creates a new HTTPSource from an HTTP response .
7257	NewStringByteCodeLoader creates a new StringByteCodeLoader .
7258	LoadString loads a template from a string .
7259	Get returns the value for the given key .
7260	NewOp creates a new Op .
7261	MarshalBinary returns the binary representation of the op .
7262	UnmarshalBinary implements the encoding . BinaryUnmarshaler interface for op .
7263	ArgInt returns the argument as an int .
7264	ArgString returns the argument as a string .
7265	AppendOp is a wrapper for vm . ByteCode . AppendOp
7266	Compile compiles the AST into a vm . ByteCode .
7267	NewV5 returns a new UUID with version 5 .
7268	Sort sorts the symbol list
7269	Less implements sort . Interface . Less
7270	Swap implements sort . Interface .
7271	Copy returns a copy of the LexSymbolSet .
7272	Set adds a new symbol to the set .
7273	GetSortedList return sorted list
7274	Top returns the top item on the stack .
7275	Resize resizes the stack to the given size .
7276	extendBy increases the size of the stack by the given number of elements .
7277	Grow increases the size of the stack to the given size . If the size of the stack is smaller than the given size then the size of the stack will be increased .
7278	Get returns the element at the given index or an error if the index is out of range
7279	Set sets the value at the given index .
7280	Push adds a value to the top of the stack .
7281	Pop removes and returns the last element of the stack .
7282	String returns a string representation of the stack .
7283	GetHostIPs returns the IP addresses of the host .
7284	GetPrivateHostIPs returns the host s private IPs .
7285	IsPrivate returns true if the given IP is a private IP .
7286	GetEnviron returns a list of environment variables .
7287	getenv returns the value of the named environment variable if it exists .
7288	flagAsEnv returns the name of the flag as a environment variable .
7289	NewPolicy returns a new Policy .
7290	CreateRandom returns a random slice of the given length .
7291	Shuffle randomizes the given byte slice .
7292	Generate generates a random password using the given policy .
7293	ExecutableFolder returns the path to the executable folder .
7294	Ignore is a functional option on Sentinel .
7295	Sigs is a functional option for NewSentinel .
7296	Logf is a functional option for NewSentinel .
7297	Errorf is a functional option for NewSentinel .
7298	New creates a new Sentinel .
7299	Run starts the sentinel .
7300	Shutdown shuts down the sentinel .
7301	ShutdownIgnore returns true if the error is ignored .
7302	Register registers the server and shutdown functions with the sentinel .
7303	Mux creates a new netmux . Netmux for the given listener .
7304	HTTP starts a new http server on the given listener .
7305	IgnoreError returns a function that ignores the given error .
7306	IgnoreNetOpError returns true if the error is due to a network error .
7307	convertAndAppendContextFuncs takes a list of functions and appends them to a list of functions .
7308	router returns a mux . Router for the given apiData and services .
7309	buildInfoHandler returns the build - info page .
7310	Encode implements the json . Encoder interface .
7311	Json returns a martini . Handler that validates the request body as JSON and stores the result in the given interface pointer .
7312	validateAndMap validates the given value and maps the result to the given context .
7313	Count returns the number of errors .
7314	Header returns a map of HTTP headers .
7315	PreflightHeader returns a map of allowed methods and allowed headers .
7316	IsOriginAllowed checks if an origin is allowed
7317	Allow returns a http . HandlerFunc that accepts OPTIONS requests .
7318	Renderer creates a new martini . Handler that renders the template .
7319	String returns a string representation of the AcceptLanguages .
7320	Languages returns a martini . Handler that maps Accept - Language headers to Accept - Language headers .
7321	Prefix removes the prefix from the URL path .
7322	Basic returns a basic authentication middleware .
7323	UpdateUser updates the user in the session .
7324	GetById gets a user by ID
7325	AddressToAccountId converts an address string to an xdr . AccountId .
7326	MutateChangeTrust implements xdr . Asset . MutateChangeTrust .
7327	MutateChangeTrust implements xdr . MutateChangeTrust interface .
7328	Trust creates a new ChangeTrustBuilder .
7329	RemoveTrust creates a ChangeTrustBuilder that removes trust for the given code and issuer .
7330	MutatePayment implements xdr . Operation . MutatePayment .
7331	MutatePayment implements xdr . Operation . MutatePayment .
7332	MutatePayment implements xdr . Operation . MutatePayment .
7333	MutatePayment implements xdr . Mutation . MutatePayment
7334	MutateAccountMerge is part of the AccountMergeBuilder interface .
7335	MustParse is like Parse but panics on error .
7336	Parse parses a string into an xdr . Int64 .
7337	String converts an xdr . Int64 to a string .
7338	CreateOffer creates a new ManageOfferBuilder .
7339	CreatePassiveOffer creates a new ManageOfferBuilder with a passive offer .
7340	UpdateOffer creates a new ManageOfferBuilder .
7341	DeleteOffer deletes an offer .
7342	ManageOffer creates a ManageOfferBuilder
7343	Mutate applies the given mutators to the ManageOfferBuilder .
7344	MutateManageOffer implements xdr . Operation . MutateManageOffer
7345	MutateManageOffer implements xdr . Mutation . MutateManageOffer .
7346	MutateManageOffer converts a ManageOfferOp to a ManageOfferOp .
7347	MutateOperation implements xdr . Mutation . MutateOperation .
7348	String returns a string representation of the price .
7349	Transaction creates a new transaction builder .
7350	Mutate applies the given transaction mutators to the current transaction .
7351	Hash returns the hash of the transaction .
7352	HashHex returns the transaction hash as a hex string .
7353	Sign adds signers to the transaction and returns the resulting TransactionEnvelopeBuilder
7354	MutateTransaction adds the allow trust operation to the transaction .
7355	MutateTransaction adds a change trust operation to the transaction .
7356	MutateTransaction adds the CreateAccountBuilder operation to the transaction .
7357	MutateTransaction sets the Tx . Fee and Tx . NetworkID .
7358	MutateTransaction adds the inflation operation to the transaction .
7359	MutateTransaction adds the manage data operation to the transaction .
7360	MutateTransaction adds the manage offer operation to the transaction .
7361	MutateTransaction adds a MemoHash to the transaction .
7362	MutateTransaction sets the Memo field of the transaction .
7363	MutateTransaction adds a MemoReturn to the transaction .
7364	MutateTransaction implements the Mutation interface for MemoText .
7365	MutateTransaction is part of the Network interface .
7366	MutateTransaction adds the payment to the transaction .
7367	MutateTransaction implements xdr . Builder . MutateTransaction .
7368	MutateTransaction adds the sequence number to the transaction .
7369	MutateTransaction adds the source account to the transaction .
7370	Scan implements xdr . Scanner interface .
7371	InitialState returns the initial ledger entry for the given key . If the entry does not exist an error is returned .
7372	Changes returns a list of changes to the given ledger .
7373	StateAfter implements the Ledger interface .
7374	changes returns a slice of LedgerEntryChanges for the given target . If maxOp is greater than 0 all changes are returned .
7375	MustDecode is like Decode but panics on error .
7376	Encode returns a base32 encoded version byte string .
7377	MustEncode is like Encode but panics on error .
7378	checkValidVersionByte checks if the given version byte is a valid version byte .
7379	Checksum returns the checksum of data .
7380	Validate checks if the checksum of data is equal to expected .
7381	LedgerKey returns the ledger key for the given change .
7382	checkPlausible checks that all characters in prefix are in the base32 alphabet .
7383	Address returns the string representation of the account id .
7384	Equals returns true if this AccountId is equal to the given AccountId .
7385	SetAddress sets the account ID to the given address .
7386	ToXdrObject converts an Asset to an XDR object .
7387	Through appends asset to pathSend . Path
7388	PayWith creates a new instance of PayWithPath
7389	continuedFraction returns the continued fraction of a price .
7390	Mutate calls MutateTransactionEnvelope for each mutator in the builder .
7391	MutateTX adds a transaction mutator to the transaction envelope .
7392	Bytes returns the bytes of the transaction envelope .
7393	Base64 returns the base64 encoding of the transaction envelope .
7394	MutateTransactionEnvelope updates the child of the transaction envelope .
7395	MutateSetOptions implements the Mutation interface for HomeDomain .
7396	MutateSetOptions implements xdr . MutateSetOptionsMutator .
7397	MutateSetOptions implements the MutateSetOptions interface for MasterWeight .
7398	MutateSetOptions implements xdr . MutateSetOptionsFunc .
7399	SetThresholds sets the threshold values .
7400	MutateSetOptions implements xdr . XDRMutator . MutateSetOptions .
7401	MutateSetOptions implements the xdr . Mutation interface for SetFlag .
7402	MutateSetOptions implements xdr . MutateSetOptionsFunc .
7403	MutateCreateAccount implements xdr . Mutation . MutateCreateAccount .
7404	MutateCreateAccount implements xdr . Marshaller . MutateCreateAccount .
7405	Random returns a random full seed .
7406	Master returns a cryptographically secure master key .
7407	Parse parses an address or seed string into a KP object .
7408	MustParse is like Parse but panics on error .
7409	MutateAllowTrust implements xdr . MutateAllowTrust interface .
7410	MutateAllowTrust implements the MutateAllowTrust interface for AllowTrustAsset .
7411	MutateAllowTrust implements xdr . Mutation . MutateAllowTrust .
7412	ToAsset converts a AllowTrustOpAsset to an Asset .
7413	SetNative sets the asset type to AssetTypeAssetTypeNative
7414	String returns a string representation of the asset .
7415	Equals returns true if two assets are equal .
7416	MustExtract is like Extract but panics on error .
7417	Unmarshal reads the XDR encoded data from r and stores the result in the value pointed to by v .
7418	Marshal writes the XDR encoding of v to w .
7419	ValidEnum returns whether v is a valid crypto key type .
7420	NewPublicKey creates a new public key
7421	MustEd25519 returns the arm Ed25519 value or panics if arm is not set .
7422	NewNodeId creates a new NodeId from a CryptoKeyType and value .
7423	NewAccountId creates a new AccountId from a type and value .
7424	ValidEnum returns true if v is a valid asset type .
7425	ArmForSwitch returns the arm for the given switch .
7426	NewAsset creates a new Asset
7427	MustAlphaNum4 returns the arm AlphaNum4 value or panics .
7428	GetAlphaNum4 returns the AlphaNum4 asset if available .
7429	MustAlphaNum12 returns the arm AlphaNum12 asset or panics .
7430	GetAlphaNum12 returns the AlphaNum12 asset if available .
7431	ValidEnum returns true if the given value is a valid threshold index .
7432	ValidEnum returns whether v is a valid value for the LedgerEntryType
7433	ValidEnum returns whether v is a valid enum value .
7434	NewAccountEntryExt creates a new AccountEntryExt .
7435	ValidEnum returns whether v is a valid value for the TrustLineFlags enum .
7436	NewTrustLineEntryExt creates a new trust line entry extension .
7437	ValidEnum returns whether v is a valid value for an OfferEntryFlags .
7438	NewOfferEntryExt creates a new OfferEntryExt .
7439	NewDataEntryExt creates a new DataEntryExt .
7440	NewLedgerEntryData creates a new LedgerEntryData
7441	NewLedgerEntryExt creates a new LedgerEntryExt
7442	ValidEnum returns whether v is a valid envelope type .
7443	ValidEnum returns whether v is a valid operation type .
7444	ArmForSwitch returns the arm for the given switch .
7445	NewAllowTrustOpAsset creates a new AllowTrustOpAsset
7446	MustAssetCode4 returns the arm asset code4 .
7447	GetAssetCode4 returns the asset code 4 of the switch .
7448	MustAssetCode12 returns the arm AssetCode12 . If not set this function panics .
7449	GetAssetCode12 returns the asset code 12 .
7450	NewOperationBody creates a new OperationBody .
7451	MustCreateAccountOp returns the arm CreateAccountOp if set or panics .
7452	GetCreateAccountOp returns the CreateAccountOp .
7453	MustPaymentOp will panic if arm is not set .
7454	GetPaymentOp returns the payment operation .
7455	MustPathPaymentOp returns the arm PathPaymentOp if set or panics .
7456	GetPathPaymentOp returns the path payment operation .
7457	MustManageOfferOp returns the arm ManageOfferOp if set or panics .
7458	GetManageOfferOp returns the ManageOfferOp .
7459	MustCreatePassiveOfferOp returns the arm CreatePassiveOfferOp if set or panics .
7460	GetCreatePassiveOfferOp returns the CreatePassiveOfferOp .
7461	MustSetOptionsOp returns the arm SetOptionsOp if set or panics .
7462	GetSetOptionsOp returns the SetOptionsOp .
7463	MustChangeTrustOp returns the arm ChangeTrustOp if set or panics .
7464	GetChangeTrustOp returns the ChangeTrustOp .
7465	MustAllowTrustOp returns the arm AllowTrustOp if set or panics .
7466	GetAllowTrustOp returns the AllowTrustOp field .
7467	MustDestination returns the destination of the operation body or panics if destination is not set .
7468	GetDestination returns the destination of the operation .
7469	MustManageDataOp returns the arm ManageDataOp if set or panics .
7470	GetManageDataOp returns the ManageDataOp .
7471	ValidEnum returns true if v is a valid memo type .
7472	ArmForSwitch returns the arm for the given switch .
7473	NewMemo creates a new Memo .
7474	MustText returns the current text of the Memo or panics if the text is not set .
7475	GetText returns the text of the Memo .
7476	MustId returns the Memo s id or panics if Id is not set .
7477	GetId returns the Memo s ID .
7478	MustHash returns the hash of the Memo or panics if it is not set .
7479	GetHash returns the hash of the Memo .
7480	MustRetHash panics if Memo s RetHash is not set .
7481	NewTransactionExt creates a new TransactionExt .
7482	ValidEnum returns whether v is a valid value for CreateAccountResultCode .
7483	ArmForSwitch returns the arm for the given switch .
7484	NewCreateAccountResult converts a CreateAccountResultCode to a CreateAccountResult .
7485	ValidEnum returns whether v is a valid payment result code .
7486	ArmForSwitch returns the arm for the given switch .
7487	NewPaymentResult creates a new payment result .
7488	ValidEnum returns whether the given value is a valid path payment result code .
7489	ArmForSwitch returns the arm for the given switch .
7490	NewPathPaymentResult creates a new PathPaymentResult from the given value .
7491	MustNoIssuer will panic if NoIssuer is not set .
7492	GetNoIssuer returns the NoIssuer asset .
7493	ValidEnum returns true if the given value is a valid ManageOfferResultCode .
7494	ValidEnum returns whether v is a valid value for ManageOfferEffect .
7495	ArmForSwitch returns the arm for the switch
7496	NewManageOfferSuccessResultOffer creates a new ManageOfferSuccessResultOffer
7497	ArmForSwitch returns the arm for the switch
7498	NewManageOfferResult creates a new ManageOfferResult .
7499	ValidEnum returns whether v is a valid enum for SetOptionsResultCode
7500	ArmForSwitch returns the arm for the switch .
7501	NewSetOptionsResult creates a new SetOptionsResult .
7502	ValidEnum returns whether v is a valid change trust result code .
7503	ArmForSwitch returns the arm for the switch .
7504	NewChangeTrustResult converts a ChangeTrustResultCode to a ChangeTrustResult .
7505	ValidEnum returns whether v is a valid value for AllowTrustResultCode .
7506	ArmForSwitch returns the arm for the switch .
7507	NewAllowTrustResult creates a new allow trust result .
7508	ValidEnum returns whether v is a valid value for AccountMergeResultCode .
7509	ArmForSwitch returns the arm for the switch .
7510	NewAccountMergeResult creates an AccountMergeResult from the given code and value .
7511	MustSourceAccountBalance panics if SourceAccountBalance is not set .
7512	GetSourceAccountBalance returns the source account balance .
7513	ValidEnum returns whether v is a valid inflation result code .
7514	ArmForSwitch returns the arm for the switch
7515	NewInflationResult creates a new inflation result .
7516	MustPayouts panics if arm Payouts is not set .
7517	GetPayouts returns the payouts in the switch .
7518	ValidEnum returns true if the given value is a valid ManageDataResultCode .
7519	ArmForSwitch returns the arm for the switch
7520	NewManageDataResult creates a new ManageDataResult .
7521	ValidEnum returns whether v is a valid operation result code .
7522	ArmForSwitch returns the arm for the switch .
7523	NewOperationResultTr creates a new OperationResultTr
7524	MustCreateAccountResult panics if arm CreateAccountResult is not set .
7525	GetCreateAccountResult gets CreateAccountResult from OperationResultTr .
7526	MustPaymentResult will panic if arm is not set .
7527	GetPaymentResult returns the payment result .
7528	MustPathPaymentResult panics if arm is not set .
7529	GetPathPaymentResult returns the path payment result .
7530	MustManageOfferResult panics if arm is not set .
7531	GetManageOfferResult returns the ManageOfferResult .
7532	MustCreatePassiveOfferResult panics if arm CreatePassiveOfferResult is not set .
7533	MustSetOptionsResult panics if GetSetOptionsResult is not set
7534	GetSetOptionsResult returns the SetOptionsResult .
7535	MustChangeTrustResult panics if arm is not set .
7536	GetChangeTrustResult returns the change trust result .
7537	MustAllowTrustResult panics if AllowTrustResult is not set .
7538	GetAllowTrustResult returns the allow trust result .
7539	MustAccountMergeResult panics if arm is not set .
7540	GetAccountMergeResult returns the account merge result .
7541	MustInflationResult panics if the operation result is not set .
7542	GetInflationResult returns the inflation result .
7543	MustManageDataResult panics if GetManageDataResult is not set
7544	GetManageDataResult returns the ManageDataResult .
7545	ArmForSwitch returns the arm for the switch .
7546	NewOperationResult creates a new OperationResult .
7547	MustTr returns the operation result tr or panics .
7548	GetTr returns the Tr field if it exists in the switch .
7549	ValidEnum returns whether v is a valid transaction result code .
7550	ArmForSwitch returns the arm for the switch .
7551	NewTransactionResultResult creates a new TransactionResultResult .
7552	MustResults panics if Results is not set .
7553	GetResults returns the results of the transaction .
7554	NewTransactionResultExt creates a new TransactionResultExt .
7555	NewStellarValueExt returns a new instance of StellarValueExt .
7556	NewLedgerHeaderExt creates a new LedgerHeaderExt
7557	ValidEnum returns whether v is a valid value for the LedgerUpgradeType .
7558	ArmForSwitch returns the arm for the given switch
7559	NewLedgerUpgrade creates a new LedgerUpgrade
7560	MustNewLedgerVersion implements the LedgerUpgrade interface .
7561	GetNewLedgerVersion returns the new ledger version
7562	MustNewBaseFee implements the Ledger interface .
7563	GetNewBaseFee returns the new base fee for the switch .
7564	MustNewMaxTxSetSize panics if NewMaxTxSetSize is not set .
7565	GetNewMaxTxSetSize returns the new max tx set size .
7566	ArmForSwitch returns the arm for the given switch .
7567	NewLedgerKey creates a new ledger key
7568	ValidEnum returns true if v is a valid enum value .
7569	ArmForSwitch returns the arm for the given switch .
7570	NewBucketEntry creates a new BucketEntry
7571	MustLiveEntry returns the live entry or panics if it is not set .
7572	GetLiveEntry returns the live entry .
7573	MustDeadEntry panics if DeadEntry is not set .
7574	GetDeadEntry returns the LedgerKey of the dead entry .
7575	NewTransactionHistoryEntryExt creates a new TransactionHistoryEntryExt .
7576	ArmForSwitch returns the arm for the given switch .
7577	NewTransactionHistoryResultEntryExt creates a new TransactionHistoryResultEntryExt .
7578	NewLedgerHeaderHistoryEntryExt creates a new LedgerHeaderHistoryEntryExt
7579	NewScpHistoryEntry creates a new ScpHistoryEntry
7580	ValidEnum returns whether v is a valid enum value for LedgerEntryChangeType .
7581	ArmForSwitch returns the arm for the given switch
7582	NewLedgerEntryChange creates a new LedgerEntryChange
7583	MustCreated implements the LedgerEntry interface for LedgerEntryChange .
7584	GetCreated returns the LedgerEntry that was created .
7585	MustUpdated implements the LedgerEntryChange interface .
7586	GetUpdated returns the updated ledger entry .
7587	MustRemoved panics if Removed is not set .
7588	GetRemoved returns the removed arm key .
7589	MustState implements the LedgerEntryChange interface .
7590	GetState returns the state of the ledger entry change .
7591	NewTransactionMeta creates a new TransactionMeta from the given value .
7592	MustOperations panics if arm Operations is not set .
7593	GetOperations returns the list of operations associated with this transaction .
7594	ValidEnum returns true if v is a valid enum code .
7595	ValidEnum returns whether v is a valid value for IpAddrType .
7596	ArmForSwitch returns the arm for the given switch .
7597	NewPeerAddressIp creates a new PeerAddressIp
7598	MustIpv4 returns the arm Ipv4
7599	GetIpv4 returns the IPv4 address of the peer .
7600	MustIpv6 returns the arm Ipv6
7601	GetIpv6 returns the IPv6 address
7602	ValidEnum returns true if v is a valid enum value .
7603	ArmForSwitch returns the arm for a switch message
7604	NewStellarMessage creates a new instance of StellarMessage
7605	MustError returns the arm Error if set or panics .
7606	GetError returns the error of the message .
7607	MustHello returns the arm Hello value or panics if it is not set .
7608	GetHello returns the message s Hello field if it exists .
7609	MustAuth returns the arm Auth field or panics if it is not set .
7610	GetAuth returns the Auth field of the message .
7611	MustDontHave returns the arm DontHave value or panics .
7612	GetDontHave returns the DontHave value .
7613	MustPeers will panic if armPeers is not set .
7614	GetPeers returns the list of peers associated with this message .
7615	MustTxSetHash returns the arm TxSetHash if set or panics .
7616	GetTxSetHash returns the TxSetHash of the message .
7617	MustTxSet returns the current transaction set or panics if it is not set .
7618	GetTxSet returns the transaction set for this message .
7619	MustTransaction will panic if the arm Transaction is not set .
7620	GetTransaction returns the StellarMessage s Transaction if it exists .
7621	MustQSetHash returns the arm QSetHash if set or panics .
7622	GetQSetHash returns the QSetHash of the message .
7623	MustQSet returns the arm QSet if set or panics .
7624	GetQSet returns the ScpQuorumSet for this message .
7625	MustEnvelope returns the arm envelope or panics if envelope is not set .
7626	GetEnvelope returns the message s envelope .
7627	MustGetScpLedgerSeq will panic if GetGetScpLedgerSeq is not set .
7628	GetGetScpLedgerSeq returns the GetScpLedgerSeq field of the message .
7629	ArmForSwitch returns the arm for the given switch .
7630	NewAuthenticatedMessage creates a new AuthenticatedMessage from a uint32 value .
7631	ValidEnum returns whether v is a valid SCPStatementType .
7632	ArmForSwitch returns the arm for the switch .
7633	NewScpStatementPledges creates a new ScpStatementPledges
7634	MustPrepare returns the arm Prepare value or panics .
7635	GetPrepare returns the prepare statement .
7636	MustConfirm will panic if arm Confirm is not set .
7637	GetConfirm returns the confirm value .
7638	MustExternalize returns the arm Externalize value or panics .
7639	GetExternalize returns the externalize of the switch .
7640	MustNominate returns the arm Nominate value or panics .
7641	GetNominate returns the nominate value .
7642	SafeUnmarshalBase64 decodes a base64 - encoded string into dest .
7643	SafeUnmarshal unmarshals data into dest . If data is not fully consumed an error is returned .
7644	SendAmount returns the total amount of the path payment result .
7645	LoadAccount loads an account by ID .
7646	SequenceForAccount returns the sequence number for an account .
7647	SubmitTransaction submits a transaction with the given envelope .
7648	Equals returns true if the given key is equal to the given key .
7649	SetAccount sets the account of the ledger key
7650	SetData sets the data field of the ledger key
7651	SetOffer sets an offer to the ledger key
7652	SetTrustline sets the trustline of the key
7653	Add adds a key and value to the CHDBuilder .
7654	tryHash returns true if there is a duplicate key in the bucket .
7655	HashIndexFromKey returns the hash index of the given key .
7656	ReadInt reads an int from the slice
7657	Read reads a CHD from the io . Reader .
7658	Get returns the value for the given key .
7659	Iterate returns an Iterator that will iterate over all the keys in the CHD .
7660	Write writes the CHD to the given io . Writer .
7661	RegisterDatasources registers the datasources at the given path .
7662	RegisterFonts registers the mapnik fonts at the given path .
7663	New creates a new Map object .
7664	NewSized creates a new map with given width and height .
7665	Load loads the map from a stylesheet .
7666	Resize changes the size of the map
7667	Free frees the map .
7668	RSS returns the SRS of the map .
7669	ZoomAll zooms the entire map .
7670	ZoomTo zooms the map to the given bounds .
7671	Render renders the map to a byte slice .
7672	RenderImage returns the image of the map .
7673	RenderToFile renders the map to a file .
7674	SetBufferSize sets the size of the map .
7675	Search sends a search request and returns a list of search responses .
7676	Get returns a connection from the pool or returns ErrClosed if the pool is closed .
7677	put puts a connection back to the pool . If the pool is empty ErrClosed is returned .
7678	MonoToStereoF32 converts a mono buffer to its stereo format .
7679	BitCrush applies a crusher factor to the audio . FloatBuffer .
7680	NormalizeMax will normalize the maximum value of a FloatBuffer .
7681	Gain multiplies the number of samples in the buffer by the given multiplier .
7682	MonoDownmix downmixes the audio . FloatBuffer to a single channel .
7683	Quantize quantizes the audio . FloatBuffer to the specified bitDepth .
7684	PCMScale scales the audio . FloatBuffer to the nearest power of 2 .
7685	StereoPan scales the buffer to the specified value . Pan must be between 0 and 1 inclusive . Pan must be between 0 and 1 inclusive . Pan must be between 0 and 1 inclusive .
7686	Leader returns the name of the current leader .
7687	IsLeader returns true if the candidate is the leader .
7688	NewResponse creates a new response .
7689	GetRequestID returns the request ID from the context .
7690	Log implements the Monitorable interface .
7691	SendMailSSL sends a mail using TLS .
7692	Send sends a message .
7693	WaitForIt waits for a connection to the given host and port .
7694	Get returns the configuration for the given environment
7695	initConfig reads in the config file .
7696	WritePluginResultsToDatabase writes plugin results to database
7697	NewAuthController creates a new AuthController .
7698	Authenticate authenticates the user
7699	NewOAuth2Controller creates a new OAuth2Controller .
7700	Refresh refreshes the access token .
7701	Token returns a JWT token for the given code
7702	Logging logs the request latency and status code .
7703	SingleFile returns a http . Handler that serves a single file .
7704	Write implements the http . ResponseWriter interface .
7705	Hijack implements http . Hijacker .
7706	NewMongo creates a new Mongo instance
7707	Disconnect disconnects the connection
7708	New creates a new table with the given fields .
7709	PrintTable prints a table
7710	PrintHorizontal prints a map as a horizontal table .
7711	PrintRow prints a row of data .
7712	AddRow adds a new row to the table
7713	Print prints the table
7714	String returns a string representation of the table .
7715	getHead returns a string representation of the table header .
7716	rowString returns a string representation of a row .
7717	fieldString returns a string representation of a field .
7718	stringTableDash returns a dash - separated table name .
7719	printMarkdownDash prints a markdown - separated row of the table .
7720	stringMarkdownDash returns the table as a markdown - formatted string .
7721	HashPassword hashes a password using scrypt .
7722	EncodeOAuth2Code encodes an OAuth2 code .
7723	DecodeOAuth2Code decodes the OAuth2 code .
7724	NewServer creates a new logging server .
7725	Start starts the Lunarc server .
7726	Stop stops the Lunarc server .
7727	NewLoggingServeMux creates a new LoggingServeMux .
7728	Handler implements the http . Handler interface .
7729	Handle implements the http . Handler interface for LoggingServeMux .
7730	HandleFunc adds a handler for the given pattern .
7731	Init initializes the database
7732	WaitForConnection waits for a connection to elasticsearch
7733	StoreFileInfo stores file info
7734	StorePluginResults stores the plugin results
7735	CamelCase returns the camel case version of src .
7736	Getopt returns the value of an environment variable . If not set the default value is returned .
7737	Getopts returns the value of the specified environment variable or the default value .
7738	GetSHA256 returns the SHA256 hash of a file
7739	RunCommand runs the command with the given arguments and returns the output of the command .
7740	RemoveDuplicates removes duplicates from a slice of strings .
7741	Unzip unzips the archive to the target directory .
7742	SliceContainsString checks if a string is in a slice of strings
7743	NewSMTP creates a new SMTP connection .
7744	SendMail sends an email
7745	GetEnvironment returns the configuration for the given environment
7746	GetSMTP returns the configuration for the SMTP environment .
7747	GetConfig returns the configuration for the specified environment .
7748	GetEnvironment returns the configuration for the given environment .
7749	GetMongo returns the mongo configuration for the specified environment .
7750	TokenHandler returns a handler that checks if the request has a valid JWT token .
7751	Receive reads the next message from the connection .
7752	Send sends an OutMsg to the GCM .
7753	allBoshReleaseNames returns a list of all bosh release names
7754	AddedProperty adds a property to the delta job
7755	RemovedProperty adds a RemovedProperty to the RemovedProperties map
7756	AddDeltaJob adds a delta job to the result .
7757	Concat concatenates two results .
7758	Read returns an io . ReadCloser for the local release at releaseLocation .
7759	Pull pulls a release from the local cache .
7760	BuildJob builds a bosh job and writes it to dest .
7761	LoadBoshRelease loads a bosh release from the given path .
7762	readBoshRelease reads a bosh release from rr .
7763	readBoshRelease reads a bosh release from rr .
7764	readBoshJob reads a bosh job manifest from the given io . Reader
7765	NewRequest creates a new http . Request .
7766	PushCloudConfig sends the given manifest to the BOSH .
7767	Generate generates an object from a job manifest .
7768	CreateNewRecord creates a new record
7769	NewShowCmd returns a new instance which can be used to issue a show JSON - RPC command .
7770	All prints all the bosh releases
7771	GetDefaultTaskImageResource returns the default task image
7772	AddRawJob adds a raw job to the pipeline
7773	AddGroup adds a group to the pipeline
7774	GetResourceByName returns the resource with the given name .
7775	AddRawResource adds a raw resource to the pipeline
7776	AddResource adds a resource to the pipeline
7777	AddGithubResource adds a new Github resource to the pipeline
7778	AddBoshIOResource adds a bosh - io resource to the pipeline
7779	AddBoshDeploymentResource adds a bosh deployment resource to the pipeline
7780	AddGitResource adds a git resource to the pipeline
7781	allJobNames returns a list of all job names .
7782	NewDeploymentManifestFromFile creates a new DeploymentManifest from a file .
7783	NewDeploymentManifest creates a new DeploymentManifest from a byte slice .
7784	AddRemoteRelease adds a remote release to the deployment manifest
7785	AddRemoteStemcell adds a remote stemcell to the manifest
7786	Tag returns the tag for the given key .
7787	RemoveTag removes a tag from the manifest
7788	LoadPivnetRelease loads a pivnet release from the given path .
7789	BoshReleaseOrEmpty returns the BoshRelease with the given name or an empty BoshRelease if it doesn t exist .
7790	readPivnetRelease reads the pivnet release from the given path
7791	decodeYaml decodes the YAML data in the given io . Reader into the value pointed to by v .
7792	NewZipWalker returns a new Walker that walks a zip file .
7793	NewDiffCmd returns a new instance which can be used to issue a diff JSON - RPC command .
7794	All prints the diff of the release1 and release2 .
7795	Job prints the diff of the given job to the given writer .
7796	New creates a new Differ .
7797	StructName returns the name of the struct .
7798	TypeName returns the type name of the element at the given index .
7799	NewTgzWalker returns a new tgz walker .
7800	NewBackoff creates a new Backoff .
7801	Reset resets the backoff to the initial state .
7802	NewExponential creates a new exponential backoff .
7803	NewExponentialFullJitter creates a new exponential full jitter backoff .
7804	NewLinear creates a new linear backoff .
7805	GetLineSize returns the size of a line .
7806	GetMaxSize returns the maximum line size .
7807	Compute the Sapin output .
7808	WithTimeout adds the timeout to the post apps params
7809	WithContext adds the context to the post apps params
7810	WithHTTPClient adds the HTTPClient to the post apps params
7811	WithBody adds the body to the post apps params
7812	WithTimeout adds the timeout to the get apps app params
7813	WithContext adds the context to the get apps app params
7814	WithHTTPClient adds the HTTPClient to the get apps app params
7815	WithApp adds the app to the get apps app params
7816	UnmarshalBinary unmarshals a raw byte slice into a RouteWrapper .
7817	WithTimeout adds the timeout to the get apps params
7818	WithContext adds the context to the get apps params
7819	WithHTTPClient adds the HTTPClient to the get apps params
7820	WithTimeout adds the timeout to the delete apps app params
7821	WithContext adds the context to the delete apps app params
7822	WithHTTPClient adds the HTTPClient to the delete apps app params
7823	WithApp adds the app to the delete apps app params
7824	WithTimeout adds the timeout to the patch apps app routes route params
7825	WithContext adds the context to the patch apps app routes route params
7826	WithHTTPClient adds the HTTPClient to the patch apps app routes route params
7827	WithApp adds the app to the patch apps app routes route params
7828	WithBody adds the body to the patch apps app routes route params
7829	WithRoute adds the route to the patch apps app routes route params
7830	WithTimeout adds the timeout to the post apps app routes params
7831	WithContext adds the context to the post apps app routes params
7832	WithHTTPClient adds the HTTPClient to the post apps app routes params
7833	WithApp adds the app to the post apps app routes params
7834	WithBody adds the body to the post apps app routes params
7835	WithTimeout adds the timeout to the put apps app routes route params
7836	WithContext adds the context to the put apps app routes route params
7837	WithApp adds the app to the put apps app routes route params
7838	WithBody adds the body to the put apps app routes route params
7839	WithRoute adds the route to the put apps app routes route params
7840	WithTimeout adds the timeout to the get apps app routes params
7841	WithContext adds the context to the get apps app routes params
7842	WithHTTPClient adds the HTTPClient to the get apps app routes params
7843	WithApp adds the app to the get apps app routes params
7844	WithTimeout adds the timeout to the patch apps app params
7845	WithContext adds the context to the patch apps app params
7846	WithHTTPClient adds the HTTPClient to the patch apps app params
7847	WithApp adds the app to the patch apps app params
7848	WithBody adds the body to the patch apps app params
7849	WithTimeout adds the timeout to the put apps app params
7850	WithContext adds the context to the put apps app params
7851	WithApp adds the app to the put apps app params
7852	WithBody adds the body to the put apps app params
7853	UnmarshalJSON implements the json . Unmarshaler interface .
7854	MarshalJSON marshals Task to JSON .
7855	Validate validates this task
7856	GetRanges returns a slice of IPv4 and IPv6 CIDRs
7857	WithTimeout adds the timeout to the get apps app routes route params
7858	WithContext adds the context to the get apps app routes route params
7859	WithHTTPClient adds the HTTPClient to the get apps app routes route params
7860	WithApp adds the app to the get apps app routes route params
7861	WithRoute adds the route to the get apps app routes route params
7862	New creates a new Functions client
7863	SetTransport sets the client transport
7864	WithTimeout adds the timeout to the delete apps app routes route params
7865	WithContext adds the context to the delete apps app routes route params
7866	WithHTTPClient adds the HTTPClient to the delete apps app routes route params
7867	WithApp adds the app to the delete apps app routes route params
7868	WithRoute adds the route to the delete apps app routes route params
7869	WithTimeout adds the timeout to the get tasks params
7870	WithContext adds the context to the get tasks params
7871	WithHTTPClient adds the HTTPClient to the get tasks params
7872	NewValueStore returns a new instance of ValueStore .
7873	Close shuts down the value store .
7874	SetBackend sets the OortService backend .
7875	Ring returns the underlying ring . Ring .
7876	GetLocalID returns the local server ID .
7877	GetListenAddr returns the address of the local node .
7878	Startup starts the ring server
7879	shutdownFinished waits for the shutdownComplete channel to be closed .
7880	Stop stops the service .
7881	Exit stops the server and waits for it to exit .
7882	SelfUpgrade upgrades the server to the specified version .
7883	SoftwareVersion returns the current software version .
7884	Shutdown is part of the StorageWriter interface .
7885	Rant returns a rant and a list of comments .
7886	Profile returns the profile for the specified user and its content .
7887	Search returns a list of RantModels that match the given term .
7888	Returns the current Surprise Rant
7889	WeeklyRants returns a list of weekly rants
7890	getUserId returns the user id for the given username .
7891	Shutdown shuts down all stores .
7892	FExists checks if a file exists
7893	outbound is a long lived goroutine that sends messages to the underlying connection .
7894	parse is a long lived goroutine that reads messages from the pool and parses them .
7895	Group creates a new Group with the given name and members .
7896	Groups returns a slice of all the groups in the domain .
7897	GetGroup retrieves a group from the domain .
7898	Reticence returns a string with a reticence of the given length .
7899	CheckPassword returns an error if the given string is not a valid password .
7900	CleanUrl checks if the given url is in the range [ min max ) . If the url is not in the range an error is returned .
7901	NewParameter creates a new parameter .
7902	MakeParams creates a new Params struct with the given number of parameters .
7903	Parse parses the parameters from a reflect . Value .
7904	Email returns the email address of the forwarder .
7905	Forwarder creates a new forwarder
7906	Forwarders returns a list of all forwarder in the domain .
7907	GetForwarder returns a new forwarder for the given domain .
7908	New creates a new CGP client
7909	EscapeCommaSeparated escapes a comma separated list of strings .
7910	Alias returns an alias for the given account .
7911	Email returns the alias s email .
7912	Aliases returns a list of all aliases for the account .
7913	RealName returns the real name of the account .
7914	Email returns the email address of the account .
7915	Account creates a new account with the given name .
7916	Accounts returns a list of all accounts in the domain .
7917	Exists returns true if the domain exists .
7918	Aliases returns the aliases of the domain .
7919	Domain returns a pointer to a new Domain .
7920	Domains returns a slice of all domains in the CGP instance .
7921	New creates a new error with the given info and publicMsg .
7922	Wrap wraps an error with the given info and publicMsg .
7923	mergeIn merges info and publicMsg into e . info .
7924	wrappedErrStr returns the wrapped error as a string .
7925	concatArgs concatenates the given arguments with a newline .
7926	MailingList creates a new mailing list
7927	Subscriber creates a new subscriber
7928	Subscribers returns a slice of all subscribers in the mailing list .
7929	MailingLists returns a slice of all mailing lists in the domain .
7930	NewByteKeyItem returns a pointer to a byte key item .
7931	CompareBytes compares two unsafe . Pointers .
7932	CompareInt compares two unsafe . Pointers for equality .
7933	Malloc allocates l bytes of memory .
7934	Free frees memory .
7935	Stats returns a human - readable summary of memory usage .
7936	FreeOSMemory frees system memory .
7937	Add adds an item to the segment .
7938	NewSegment creates a new segment .
7939	Assemble creates a new Skiplist from the given segments .
7940	CompareNodeTable compares two unsafe . Pointers .
7941	New creates a new NodeTable .
7942	Stats returns a string representation of the node statistics .
7943	MemoryInUse returns the number of items currently in use .
7944	Get returns the value associated with the given key or nil if not found .
7945	Update updates the node with the given key .
7946	Remove removes a key from the node table .
7947	Close closes the NodeTable .
7948	MemoryInUse returns the number of in - use nodes in the database .
7949	debugMarkFree marks the node as free .
7950	Seek moves the iterator to the given key .
7951	Next advances the iterator to the next element .
7952	Refresh refreshes the iterator .
7953	Close closes the iterator releasing any resources held by the iterator .
7954	NewIterator creates a new iterator from a snapshot .
7955	SeekFirst moves the iterator to the first item in the merge list .
7956	Next advances the merge iterator to the next item in the heap .
7957	Seek moves the iterator to the given item and returns true if it was found .
7958	Keys returns a list of all keys in the list .
7959	Remove removes the node with the given key from the list .
7960	Add adds a new node to the list .
7961	NewWithConfig creates a new Skiplist with the given config .
7962	FreeNode marks a node as free .
7963	MakeBuf creates a new ActionBuffer .
7964	Size returns the size of a node in the Skiplist .
7965	NewLevel returns a random level in the Skiplist .
7966	Insert inserts an item into the Skiplist .
7967	Insert2 inserts an item into the Skiplist .
7968	Insert3 inserts a new item into the Skiplist .
7969	Delete deletes an item from the Skiplist .
7970	DeleteNode deletes a node from the Skiplist
7971	GetRangeSplitItems returns a slice of nways items in the Skiplist .
7972	Bytes returns the contents of the item as a byte slice .
7973	ItemSize returns the size of the item in bytes .
7974	KVFromBytes extracts the key and value from the given byte slice .
7975	CompareKV compares two byte slices .
7976	Emit sends an event to all registered handlers .
7977	UnregisterHandler removes a handler from the event controller .
7978	IsHandlerRegistered returns true if the given handler is registered .
7979	CompareNitro compares two Nitro pointers .
7980	DefaultConfig returns a default configuration .
7981	Delete deletes bs from the underlying io . Writer .
7982	GetNode returns the node with the given key .
7983	SetKeyComparator implements the Config interface for Config .
7984	UseMemoryMgmt sets the useMemoryMgmt flag .
7985	NewWithConfig creates a new Nitro with the given config .
7986	MemoryInUse returns the number of bytes in use by the Nitro .
7987	Close shuts down the Nitro .
7988	NewWriter returns a new writer .
7989	SnapshotSize returns the size of the snapshot in bytes .
7990	Encode writes the snapshot to the given io . Writer .
7991	Decode reads the snapshot from the given io . Reader .
7992	Open returns true if the snapshot is open false otherwise .
7993	CompareSnapshot compares two unsafe . Pointers .
7994	GC is a thread - safe way of garbage collection .
7995	GetSnapshots returns a slice of all available snapshots .
7996	MemoryInUse returns the amount of memory in use in the Nitro database .
7997	CompareBS compares two barrier sessions .
7998	Acquire returns the current barrier session or nil if the barrier is not active .
7999	Release releases the given barrier session .
8000	FlushSession implements the AccessBarrier interface .
8001	Apply adds the stats to the report .
8002	AddInt64 adds an int64 value to the source .
8003	AddUint64 adds an uint64 to the source .
8004	Merge merges two Stats objects .
8005	GetStats returns the stats of the Skiplist .
8006	NewIterator returns a new Skiplist iterator .
8007	SeekFirst moves the iterator to the first element .
8008	SeekWithCmp seeks the iterator to the first item that matches the given compare function .
8009	Seek moves the iterator to the first non - nil pointer .
8010	Valid returns whether the iterator is valid .
8011	Delete removes the next element from the iterator .
8012	Next moves the iterator to the next item .
8013	Init registers SkuM1SmallBuilder to skurepo .
8014	FromURL returns a copy of the given URL .
8015	ToURL converts a folder name to a URL .
8016	Size returns the size of the tuple in bytes .
8017	WriteTo writes the header to the given writer . Returns the number of bytes written and any error encountered .
8018	Static returns a handler that serves static files in the given directory .
8019	Read reads the configuration file .
8020	Del removes the key from the given section .
8021	WriteTo writes the configuration to a file .
8022	checkSection checks if the line is a section .
8023	checkLine checks if the line is a key = value pair .
8024	checkComment returns true if the line is a comment .
8025	NewResponseWrapper creates a new ResponseWrapper
8026	Hijack implements the http . Hijacker interface .
8027	CloseNotify implements the http . CloseNotifier interface .
8028	DateFormat is an Option to set the date format .
8029	Logger returns a http . HandlerFunc that logs the request to the standard logger .
8030	GetAvailableInventory returns a map of available sku builders for the given task collection .
8031	Expiration sets the expiration time for the token .
8032	Claimer sets the claimer for the token .
8033	Issuer specifies the issuer of the token .
8034	User specifies the user to use for the token .
8035	Password specifies the password for the token .
8036	Extractor is a request . Extractor .
8037	TokenGenerator creates a JWT token handler .
8038	Token returns the token from the request context or an empty string .
8039	Claims returns the jwt . Claims from the request context .
8040	String returns a string representation of the token .
8041	NewLexer creates a new Lexer .
8042	run runs the lexing process .
8043	emit emits the given token to the handler .
8044	skipWhitespace skips white space characters .
8045	next returns the next rune from the input .
8046	LineNum returns the line number of the current line
8047	Offset returns the offset of the current line .
8048	errorf is the error token handler .
8049	lexText lexes text .
8050	lexComment scans a comment .
8051	New creates a new TupleType .
8052	AddVersion adds one or more fields to the tuple type .
8053	Contains returns true if the given field is in the tuple .
8054	Offset returns the offset for the given field .
8055	Versions returns the versions of the tuple .
8056	SetPrivateMeta sets the private metadata for the task
8057	SetPublicMeta sets the public meta data for the task
8058	GetRedactedVersion returns the redacted version of the task .
8059	Equal returns true if two tasks are equal .
8060	HTTP returns an http . Handler that checks if the request method is allowed for the given verb .
8061	PutUint8 adds an unsigned int8 to the buffer . Returns the number of bytes written and any error that occurred .
8062	PutInt8 adds an int8 to the tuple . Returns the number of bytes written and any error that occurred .
8063	PutUint16 adds an uint16 to the buffer . Returns the number of bytes written and any error encountered .
8064	PutInt16 adds an int16 to the buffer . Returns the number of bytes written and any error that occurred .
8065	PutUint32 adds an uint32 to the buffer . Returns the number of bytes written and any error encountered .
8066	PutInt32 adds an int32 to the buffer . Returns the number of bytes written and any error encountered .
8067	PutUint64 adds an unsigned 64 - bit unsigned integer to the buffer . Returns the number of bytes written and any error encountered .
8068	PutInt64 adds an int64 to the buffer . Returns the number of bytes written and any error encountered .
8069	NewPackageList creates a new PackageList .
8070	PutFloat32 adds a float32 to the buffer . Returns the number of bytes written and any error that occurs .
8071	Classic creates a new ClassicMartini instance .
8072	Languages is an Option to set the list of languages .
8073	Session is an Option to set the session handler .
8074	Data returns the data from the request context .
8075	URL adds the current context value to the URL .
8076	Size returns the size of the terminal .
8077	GetRequestIDFromTaskResponse gets the request ID from the task response
8078	PutString adds a string field to the buffer . Returns the number of bytes written and any error encountered .
8079	LoadDirectory loads all . ent files in a directory .
8080	LoadFile loads a package from a file .
8081	LoadPackage loads a package from a text file .
8082	NewDecoder returns a new Decoder .
8083	NewDecoderSize returns a new decoder with the given max size .
8084	Panic returns an http . Handler that logs panics .
8085	DeployVApp is a test - spy implementation of VCloudClient . DeployVApp
8086	UnDeployVApp is a test - spy implementation of VCloudClient UnDeployVApp .
8087	Auth is a test - spy implementation of VCDClient Auth
8088	QueryTemplate retrieves the FakeVAppTemplateRecord
8089	NewEncoder returns a new version 1 encoder .
8090	Getter returns an Option that sets the nonce getter .
8091	Setter returns an Option that sets the NonceSetter .
8092	Age is an Option to set the age .
8093	Nonce creates a new nonce middleware .
8094	NonceValueFromRequest retrieves the nonce value from the request context .
8095	StoreNonce stores the nonce in the request context .
8096	PutFloat32Array adds an array of float32 to the buffer . Returns the number of bytes written and any error that occurred .
8097	PutFloat64Array adds an array of float64 to the buffer . Returns the number of bytes written and any error encountered .
8098	Do implements ClientDoer . Do .
8099	NewLease creates a new lease
8100	Delete removes a task from the inventory .
8101	Post implements the http . Handler interface .
8102	ReStock is used to re - stock the lease
8103	Procurement processes the lease
8104	InitFromHTTPRequest initializes the Lease from an HTTP request .
8105	Is returns true if the tuple is of the given type .
8106	Offset returns the offset of the given field .
8107	WriteTo writes the tuple to the given io . Writer .
8108	PutTuple adds a tuple to the buffer . Returns the number of bytes written and any error encountered .
8109	WriteString writes content to ResponseWriter .
8110	NotFound writes a response with status code 404
8111	Run starts the agent .
8112	NewWaitGroup creates a new WaitGroup .
8113	Add increases the number of outstanding goroutines .
8114	Wait waits for the waitgroup to complete .
8115	Gzip returns a http . Handler that compresses the response .
8116	New creates a new innkeeper client
8117	Error writes a response with status code and message .
8118	Renderer returns a handler that renders the HTML template .
8119	NewClient creates a new PDClient
8120	GetTask gets a single task from Dispenser
8121	WriteImageToHTTP writes an image . Image to an HTTP response .
