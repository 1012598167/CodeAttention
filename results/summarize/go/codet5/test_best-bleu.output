0	NewSTM creates a new STM transaction .
1	first returns the first revision in the set .
2	cmps returns a slice of Cmp objects that are less than or equal to the given revision .
3	NewSTMRepeatable is a convenience wrapper around NewSTM .
4	NewSTMSerializable creates a new STM transaction .
5	NewSTMReadCommitted creates a new STM transaction .
6	NewCertPool creates a new x509 . CertPool from a list of CA files
7	NewCert creates a new tls . Certificate from a file .
8	Pause pauses the peer .
9	Resume is used to resume the peer .
10	pick picks a message from the pipeline .
11	post sends an HTTP POST request to the remote server .
12	newTxnResp creates a TxnResponse from a TxnRequest .
13	applyCompare applies a Compare to a ReadView .
14	OpCompact creates a new CompactOp .
15	NewPriorityQueue creates a new PriorityQueue .
16	Enqueue adds a new value to the queue .
17	NewLeaderStats creates a new LeaderStats .
18	Succ implements the Stats interface for FollowerStats .
19	Fail increments the number of times a follower failed .
20	delete removes the given watcher from the broadcasts .
21	startStreamWriter starts a new streamWriter .
22	checkStreamSupport checks if the given version is supported by the given stream type .
23	maybeUpdate returns whether or not the progress was updated .
24	IsPaused returns whether the progress is paused .
25	needSnapshotAbort returns true if we need to abort a snapshot .
26	add adds a new inflight to the buffer .
27	growBuf grows the buffer if necessary .
28	freeTo moves the inflight to the given value .
29	SaveDBFrom saves a snapshot to disk .
30	DBFilePath returns the path to the snapshot . snap . db file .
31	Set sets a unique string value .
32	NewUniqueStringsValue creates a new UniqueStringsValue .
33	UniqueStringsFromFlag returns a slice of unique strings from a flag . FlagSet .
34	UniqueStringsMapFromFlag returns a map from flag name to unique strings .
35	Percentiles converts a slice of float64s to a slice of percentiles .
36	VerifyBootstrap verifies that the bootstrap is valid .
37	VerifyJoinExisting returns an error if the server is not joining an existing cluster .
38	hasLocalMember returns an error if the server has no local member .
39	advertiseMatchesCluster returns nil if the server matches the cluster .
40	ReqTimeout returns the request timeout .
41	getStatus returns the status of the raft node .
42	GetDefaultHost returns the default host
43	getIfaceAddr returns the interface address for the given interface index .
44	getIfaceLink returns the link message for the given interface index .
45	lsCommandFunc handles the ls command .
46	printLs prints a list of nodes .
47	rPrint prints a node .
48	NewLeaseRenewerCommand returns a new cobra command for lease renewer
49	Read reads a snapshot from a file .
50	GetCipherSuite returns the cipher suite for the given string .
51	post is used to send a message to the Raft server .
52	send sends a message to the raft .
53	sendHeartbeat sends a heartbeat message .
54	bcastAppend is used to broadcast an append to the raft node .
55	bcastHeartbeat is used to broadcast a heartbeat to the raft server .
56	tickElection is used to tick the election .
57	tickHeartbeat is used to tick the heartbeat .
58	stepCandidate is used to step a candidate .
59	restore is used to restore a snapshot . It returns true if the snapshot was committed .
60	promotable returns true if this raft is promotable .
61	checkQuorumActive returns true if the raft quorum has been reached .
62	increaseUncommittedSize increases the size of uncommitted entries .
63	reduceUncommittedSize is used to reduce the size of uncommitted entries .
64	newPeriodic creates a new Periodic .
65	Pause pauses the periodic .
66	Resume resumes the periodic .
67	Lock locks the mutex .
68	NewLocker creates a new locker
69	NewFIFOScheduler creates a new scheduler .
70	Schedule adds a job to the fifo .
71	Stop stops the fifo .
72	NewServer creates a new server .
73	StartServe starts the gRPC server .
74	Stop stops the gRPC server .
75	Transport implements the rpc . TransportServer interface .
76	RegisterInterruptHandler registers a new interrupt handler .
77	HandleInterrupts handles SIGINT and SIGTERM signals .
78	OpGet creates a range operation .
79	OpDelete creates a delete operation .
80	OpPut creates a put operation .
81	OpTxn creates a new transaction operation .
82	WithFromKey sets the op s key and end to zero .
83	withTop creates a top - level operation .
84	Exist checks if a directory exists .
85	searchIndex finds the index of a WAL file in the names slice and returns the index of the WAL file .
86	isValidSeq returns true if the given names are valid .
87	NewListener creates a new net . Listener .
88	cafiles returns a list of trusted CA files .
89	ServerConfig returns the TLS configuration for the server .
90	ClientConfig returns a tls . Config based on the TLSInfo .
91	newTLSKeepaliveListener creates a new TLS keepalive listener .
92	applyV2Request applies the given request to the Etcd server .
93	NewRoleCommand returns a new cobra . Command for role subcommands
94	roleAddCommandFunc is the command handler for role add
95	roleGetCommandFunc handles the role get command .
96	roleGrantPermissionCommandFunc executes the role grant permission command .
97	roleRevokePermissionCommandFunc executes role revoke - permission command .
98	NewCluster creates a new cluster .
99	NewClusterByConfig creates a new cluster with the given configuration .
100	HTTPMembers returns the HTTP members of the cluster .
101	waitLeader waits for the leader of the given members to become the leader . It returns the number of times the leader was found .
102	waitNoLeader waits for all members to be leader .
103	isMembersEqual returns true if the given members are equal .
104	listenGRPC sets up the gRPC listener for the member .
105	NewClientV3 creates a new V3 client for the given member .
106	Clone returns a deep copy of the member .
107	Close shuts down the member .
108	Stop stops the member .
109	checkLeaderTransition checks if the leader transition is valid .
110	Restart restarts the member .
111	Terminate terminates the member .
112	Metric returns the metric name for the member .
113	InjectPartition injects a partition into the receiver .
114	RecoverPartition is used to recover a partition .
115	NewClusterV3 creates a new ClusterV3 .
116	ParseWithDefaults parses jwtOptions with default values .
117	Parse parses the options from a map .
118	Key returns the key for the signing method .
119	fill fills the response header .
120	add adds a watcher to the broadcast . Returns true if the watcher was added .
121	Watch adds a new watch to the stream .
122	newFileEncoder returns a new encoder for the given file .
123	purgeFile purges a file from the given directory . If stop is closed the purgec channel will be closed .
124	Set implements the flag . Value interface .
125	NewStringsValue creates a new StringsValue from a string .
126	StringsFromFlag returns a slice of strings from a flag . FlagSet .
127	Cluster returns the cluster name as a string .
128	NewPageWriter creates a new PageWriter .
129	watch adds a new watcher to the hub .
130	notify adds a new event to the event history .
131	clone returns a deep copy of the event history .
132	isHidden returns true if watchPath is less than keyPath .
133	createEtcdLogFile creates etcd log file
134	runEtcd starts the etcd server .
135	stopEtcd stops the etcd server .
136	handle_SIGQUIT_ETCD_AND_REMOVE_DATA_AND_STOP_AGENT stops the etcd and agent .
137	LimitListener returns a net . Listener that is limited to n connections .
138	allowMethod returns true if the given method is allowed .
139	NewWatchServer creates a new watch server .
140	FiltersFromRequest converts pb . WatchCreateRequest to mvcc . FilterFunc .
141	newPipelineHandler creates a new pipeline handler .
142	checkClusterCompatibilityFromHeader checks if the cluster version is compatible with the given header .
143	KeyExists returns true if the given key exists .
144	KeyMissing returns 0 if the key is missing
145	ValidateSecureEndpoints checks if the given endpoints are secure .
146	putNewKV adds a new key - value pair to the KV .
147	newUniqueEphemeralKey creates a new unique ephemeral key .
148	NewUpdateDirCommand defines the libcompose updatedir subcommand .
149	updatedirCommandFunc is the handler for the updatedir command .
150	handleBackup creates the backup snapshot dir
151	saveDB saves the data in srcDB to destDB .
152	NewWatchCommand returns a new cobra . Command for watch command
153	NewV3 creates a new v3 manager .
154	Save is part of the manager . Manager interface .
155	Status returns the status of the v3 manager .
156	Restore is part of the manager . Manager interface .
157	NewAuthStore creates a new authStore .
158	NewTokenProvider creates a new token provider .
159	MendPeer is used to resume a peer .
160	removePeer removes a remote peer from the transport .
161	ActivePeers returns the number of active peers .
162	resolveTCPAddrDefault resolves the given address using the default resolver .
163	resolveTCPAddrs takes a list of url . URL s and resolves them into a list of url . URL s .
164	urlsEqual returns true if a and b are equal .
165	URLStringsEqual returns true if a and b are equal .
166	NewLeaseCommand returns a new cobra command for lease sub command
167	NewLeaseGrantCommand returns a new cobra . Command for lease grant
168	leaseGrantCommandFunc executes the lease grant command .
169	NewLeaseRevokeCommand returns a new cobra command for lease revoke
170	leaseRevokeCommandFunc is the handler for lease revoke command
171	NewLeaseTimeToLiveCommand returns a new instance of lease time - to - live command
172	leaseTimeToLiveCommandFunc executes the time - to - live command .
173	NewLeaseListCommand returns a new cobra command for lease list
174	leaseListCommandFunc is the command handler for lease list
175	NewLeaseKeepAliveCommand returns a new cobra command for lease keep - alive
176	leaseKeepAliveCommandFunc is the command handler for lease keep - alive .
177	NewAlarmCommand returns a cobra command for alarm subcommands
178	alarmDisarmCommandFunc handles the alarm disarm command .
179	alarmListCommandFunc handles alarm list command .
180	Flags returns a slice of flags for all etcd fields .
181	EmbedConfig returns the config for the etcd server .
182	PProfHandlers returns a map of http . Handler for pprof .
183	NewBackendQuota returns a new Quota .
184	NewClusterProxy creates a new cluster proxy .
185	NewHandler creates a new lease handler .
186	TimeToLiveHTTP sends a time - to - live lease request .
187	newWatcherBatch creates a new watcherBatch .
188	add adds a new watcher to the group .
189	contains returns true if the group contains the given key .
190	delete removes a watcher from the group . Returns true if the watcher was removed .
191	choose returns a new watcherGroup that has at most maxWatchers watchers .
192	watcherSetByKey returns the set of watchers for the given key .
193	Compare compares two intervals .
194	successor returns the successor of x .
195	updateMax updates the max value of the interval node .
196	visit implements the NodeVisitor interface for intervalNode .
197	Delete removes an interval from the IntervalTree . Returns true if the interval was deleted .
198	Insert inserts a new value into the tree .
199	rotateLeft moves x to the left of the interval tree .
200	replaceParent replaces the parent of x with y .
201	MaxHeight returns the maximum height of the interval tree .
202	Visit implements the IntervalVisitor interface for IntervalTree .
203	find finds the node with the given interval .
204	Find returns the interval value for the given interval .
205	Intersects returns true if the interval is in the tree .
206	Contains returns true if the interval is contained in the tree .
207	Stab returns a slice of all intervals in the tree .
208	Union adds all intervals from inIvt to ivt .
209	NewExactReadCloser returns an io . ReadCloser that reads from rc .
210	NewElection creates a new election
211	ResumeElection creates a new election with the given key and revision .
212	Proclaim is used to proclaim a value to the leader .
213	Resign removes the leader from the session .
214	Leader returns the leader of the election .
215	Observe is part of the v3 . Election interface .
216	check checks if the quotaAlarmer is available .
217	NewExecWatchCommand defines the libcompose exec - watch subcommand .
218	execWatchCommandFunc executes a watch command .
219	NewListener creates a new net . Listener .
220	NewRoundTripper creates a new http . RoundTripper .
221	createPostRequest creates a new HTTP POST request .
222	checkPostResponse checks the response for a POST request .
223	serverVersion returns the version from the X - Server - Version header .
224	checkVersionCompatibility checks if the remote version is compatible with the local version .
225	setPeerURLsHeader sets the X - PeerURLs header .
226	addRemoteFromRequest adds remote information from the request .
227	NewKeysAPIWithPrefix returns a new KeysAPI with the specified prefix .
228	TTLDuration returns the TTL of the node .
229	SetPflagsFromEnv sets all pflags in the specified FlagSet from environment variables .
230	FlagToEnv converts a flag name to an environment variable name .
231	excerpt returns an excerpt of a string .
232	passConfChange returns whether or not the given entry is a config change .
233	printInternalRaftRequest prints an internal raft request .
234	listEntriesType lists all entries of the specified type .
235	newLog creates a new raft log .
236	newLogWithSize creates a new raft log with the given storage and logger .
237	findConflict returns the index of an entry that has a conflict .
238	nextEnts returns the next entries in the log or nil if there are no more entries .
239	allEntries returns all entries in the log .
240	slice returns a slice of entries from the log .
241	NewSession creates a new session .
242	Close closes the session .
243	WithTTL sets the TTL of the session .
244	WithLease sets the lease ID for the session .
245	addRequest adds a request to the read index queue .
246	recvAck adds an ack to the pending read index . Returns the number of acks received .
247	advance advances the read index queue .
248	lastPendingRequestCtx returns the last pending request context .
249	Start starts the etcd server .
250	start starts the etcd server .
251	Process is part of the raft . Server interface .
252	ReportSnapshot reports the status of a snapshot .
253	MoveLeader moves the leader to the given transferee .
254	TransferLeadership implements the Server interface for EtcdServer .
255	configure is part of the raft . Server interface .
256	sync sends a SYNC request to the server .
257	publish is used to publish the local member to the raft cluster .
258	applyEntryNormal applies an entry to the raft server .
259	applyConfChange applies a configuration change to the raft server .
260	monitorVersions is a long lived goroutine that monitors the cluster version .
261	goAttach starts a goroutine to attach to the etcd server .
262	NewRoundrobinBalanced creates a new roundrobin balanced Picker .
263	Pick is part of the balancer . Balancer interface .
264	NewTLSListener creates a new TLS listener .
265	acceptLoop is a long lived goroutine that handles incoming connections .
266	SetEndpoints sets the endpoints for the resolver group .
267	Target returns the target for the given endpoint .
268	Target returns the target URL for the given endpoint .
269	Build creates a new resolver for the given target .
270	Handle handles the request .
271	NewElectionCommand returns a new instance of an election command
272	nodeToMember converts a v2store . NodeExtern into a Member .
273	NewTmpBackend creates a new backend with the given batch interval and limit .
274	newRevision creates a new Revision .
275	Run starts the auto - revision compaction .
276	Pause marks the revision as paused .
277	Resume marks the revision as paused .
278	voteRespMsgType returns the message type for a vote response message .
279	DescribeMessage returns a human - readable description of a message .
280	DescribeEntry returns a human - readable description of an entry .
281	DescribeEntries returns a string representation of a slice of pb . Entry .
282	SetLogger sets the logger .
283	GetLogger returns the current logger .
284	maybeFirstIndex returns the index of the first snapshot .
285	maybeLastIndex returns the last index of the unstable snapshot .
286	maybeTerm returns the term for the index i .
287	shrinkEntriesArray shrinks the entries array if necessary .
288	SaveSnap saves a snapshot to the WAL .
289	New creates a new client with the given configuration .
290	NewCtxClient creates a new Client with the given context .
291	NewFromURL creates a new Client from a URL .
292	Close closes the client .
293	Endpoints returns the endpoints for the client .
294	SetEndpoints sets the endpoints for the client .
295	Sync updates the endpoints of the client .
296	dialSetupOpts returns a list of grpc . DialOptions for the client .
297	Dial connects to the given endpoint .
298	dialWithBalancer connects to the given endpoint using the provided balancer credentials .
299	dial establishes a connection to a remote server .
300	WithRequireLeader returns a new context with the required leader set .
301	roundRobinQuorumBackoff returns a backoffFunc that tries to backoff up to the given waitBetween .
302	isHaltErr returns true if the given error is a halt error .
303	NewLease creates a lease with the given prefix
304	IsCreate returns whether the event is a create event .
305	Err returns the error associated with the watch response .
306	IsProgressNotify returns true if the response is a progress notification .
307	RequestProgress is part of the watcher . Watcher interface .
308	nextResume returns the next resume stream .
309	dispatchEvent sends an event to the stream . Returns true if the event was sent .
310	broadcastResponse broadcasts a WatchResponse to all substreams .
311	unicastResponse unicasts a WatchResponse to the given watchId . Returns true if the response was sent .
312	joinSubstreams is used to join all substreams .
313	toPB converts the WatchRequest to a protobuf . WatchRequest .
314	toPB converts the progressRequest to a pb . WatchRequest .
315	Contains returns true if the set contains the given value .
316	ContainsAll returns true if the set contains all of the given strings .
317	Equals returns true if us is equal to other .
318	Values returns the values in this set .
319	Copy returns a copy of the set .
320	Sub removes all values from this set from the other set .
321	v2MembersURL adds the default V2 members prefix to the URL .
322	NewMigrateCommand returns a new instance of MigrateCommand
323	publishEntries publishes the given entries to the raft node .
324	openWAL opens a new WAL .
325	replayWAL is used to replay an existing WAL .
326	stop stops the raft node .
327	NewWatchCommand returns a new cobra . Command for watch
328	InitialState returns the initial state of the storage .
329	SetHardState sets the hard state of the storage .
330	Entries returns a slice of entries from the storage .
331	Term returns the term at index i .
332	LastIndex returns the last index in the storage .
333	FirstIndex returns the first index in the storage .
334	Snapshot implements storage . Storage . Snapshot .
335	ApplySnapshot applies a snapshot to the storage .
336	Compact removes the entry at the given index from the storage .
337	unreachable marks the URL as unreachable .
338	NewEndpointCommand returns a cobra command for endpoint subcommands
339	epHealthCommandFunc is the main entry point for epHealth .
340	NewElectCommand returns a new instance of an election command
341	NewDefragCommand returns a new instance of defrag command
342	RegisterBuilder registers a new balancer .
343	Build builds a new balancer .
344	recordTransition is used to record a transition between two states .
345	doSerialize is used to serialize an auth . AuthInfo
346	send sends a watch response to the client .
347	post sends a WatchResponse to the watchCh . Returns true if the WatchResponse was sent .
348	OriginAllowed returns true if the given origin is allowed
349	IsHostWhitelisted checks if a host is whitelisted
350	Valids returns a sorted list of valid values .
351	NewSelectiveStringsValue creates a new SelectiveStringsValue
352	NewKV creates a new clientv3 . KV .
353	NewURLsValue creates a new URLsValue from a string .
354	URLsFromFlag returns a slice of URLs from a flag . FlagSet .
355	servePeers is used to serve etcd peers .
356	NewStore creates a new store .
357	appendMarkTombstone appends a tombstone mark to b .
358	IsDirWriteable returns an error if the directory is not writeable .
359	TouchDirAll touch all files in the given directory .
360	CreateDirAll creates all directories in the given directory .
361	ZeroToEnd moves the file to the end of the file .
362	Open implements the FilePipeline interface .
363	NewRaftLoggerFromZapCore creates a new raft logger from a zapcore . Core .
364	NewConfig creates a new clientv3 . Config from a file .
365	RegisterElectionHandler registers the http handlers for service Election to mux . The handlers forward requests to the grpc endpoint over conn .
366	UpdateCapability updates the capabilities of the cluster .
367	NewLockCommand returns a new instance of lock command
368	tick is used to tick the raft node .
369	advanceTicks advances the raft node to the given number of ticks .
370	NewAuthCommand returns a new cobra command for auth subcommands
371	authEnableCommandFunc is the entry point for auth enable command
372	authDisableCommandFunc is the handler for auth disable command
373	RetryKVClient creates a new retryKVClient .
374	RetryLeaseClient returns a LeaseClient that retries a lease request .
375	RetryClusterClient returns a ClusterClient that will retry the cluster connection .
376	RetryMaintenanceClient creates a new MaintenanceClient .
377	RetryAuthClient creates a new AuthClient .
378	NewSetDirCommand defines the libcompose setdir subcommand .
379	Enter is used to enter the barrier .
380	Leave is used to leave the barrier .
381	HandleBasic handles basic HTTP requests .
382	WriteError writes an error to the response .
383	MemberByName returns the member with the given name .
384	PeerURLs returns a list of peer URLs .
385	ValidateConfigurationChange checks if a configuration change is valid .
386	AddMember adds a new member to the cluster .
387	RemoveMember removes a member from the cluster .
388	ValidateClusterAndAssignIDs validates the cluster and assigns the IDs of the members to the local cluster .
389	Keep returns a map of keys that are available for the given revision .
390	closeRequireLeader closes all keepAlives that require leader .
391	resetRecv returns a Lease_LeaseKeepAliveClient .
392	recvKeepAlive receives a LeaseKeepAliveResponse .
393	deadlineLoop is a long lived goroutine that will close all keepAlives that are older than the deadline .
394	sendKeepAliveLoop sends a LeaseKeepAliveRequest to the given stream .
395	NewKV creates a new leasingKV .
396	rescind is used to rescind a key in the leasingKV .
397	LeaseValue returns a Cmp that compares a lease value .
398	ValueBytes returns the value as a byte slice .
399	WithRange sets the range end
400	WithPrefix returns a new Cmp with the prefix set .
401	mustInt64 returns an int64 if the value is an int64 otherwise panics .
402	mustInt64orLeaseID returns an int64 if val is a LeaseID or panics if not .
403	Next returns the next update for the watcher .
404	getJournalWriteSyncer returns a new zapcore . WriteSyncer .
405	newKV creates a new KV node .
406	newDir creates a new directory node .
407	Read returns the value of the node .
408	Write writes the value to the node .
409	List returns a list of all the children .
410	GetChild returns a child node
411	Add adds a child node to the directory .
412	Remove removes the node from the store .
413	Compare compares the value and index of the node with the given value and index .
414	Clone returns a deep copy of the node .
415	isConnectedToQuorumSince returns true if self is connected to the quorum since since .
416	isConnectedSince returns true if the transport s active time is before the given time .
417	numConnectedSince returns the number of connected members since the given time .
418	longestConnected returns the longest ID in membs .
419	isTornEntry returns true if data is a torn entry .
420	StartMockServersOnNetwork starts mock servers on the specified network .
421	StartAt starts a mock server at the given index .
422	StopAt stops the server at the given index .
423	Stop stops the MockServers .
424	NewCheckCommand returns a cobra command for checking properties of the etcd cluster
425	NewCheckPerfCommand returns a new cobra . Command for check - performance
426	NewCheckDatascaleCommand returns a new cobra command for check - datascale
427	NewGetCommand returns a new cobra command for get command
428	NewGetCommand defines the libcompose get subcommand .
429	PickPeerURL picks a random peer url
430	HandleMetricsHealth registers the HTTP handlers for metrics and health .
431	NewRemoveCommand defines the libcompose rm subcommand .
432	rmCommandFunc deletes a key .
433	checkIntervals takes a list of request operations and checks if they are valid . If they are not valid an error is returned .
434	ReportEventReceived reports the number of events received .
435	RegisterKVHandler registers the http handlers for service KV to mux . The handlers forward requests to the grpc endpoint over conn .
436	RegisterWatchHandler registers the http handlers for service Watch to mux . The handlers forward requests to the grpc endpoint over conn .
437	RegisterLeaseHandler registers the http handlers for service Lease to mux . The handlers forward requests to the grpc endpoint over conn .
438	RegisterClusterHandler registers the http handlers for service Cluster to mux . The handlers forward requests to the grpc endpoint over conn .
439	RegisterMaintenanceHandler registers the http handlers for service Maintenance to mux . The handlers forward requests to the grpc endpoint over conn .
440	RegisterAuthHandler registers the http handlers for service Auth to mux . The handlers forward requests to the grpc endpoint over conn .
441	startEtcd starts the etcd server .
442	identifyDataDirOrDie verifies that the data directory is valid .
443	openLast opens the last file in the given directory .
444	gotLeader is called when a leader has been received .
445	lostNotify returns a channel that will be closed when the leader is lost .
446	newGRPCProxyCommand returns a new cobra . Command for grpc - proxy
447	NewMemberCommand returns a new cobra . Command for member sub command
448	NewMemberAddCommand returns a new cobra command for add member
449	NewMemberRemoveCommand returns a new cobra command for remove command
450	NewMemberUpdateCommand returns a new instance of an update command
451	NewMemberListCommand returns a new instance of the member list command
452	memberAddCommandFunc adds a new member to the cluster .
453	memberRemoveCommandFunc handles a member remove command .
454	memberUpdateCommandFunc executes a member update command .
455	memberListCommandFunc implements the member - list command .
456	Open opens a new WAL at the given path .
457	OpenForRead opens a WAL for reading .
458	Verify verifies that the given snapshot is valid .
459	Close closes the WAL .
460	notify sends an event to the event channel . Returns true if the event was sent .
461	Remove removes the watcher from the hub .
462	mkPathDepth returns a path with the given depth .
463	mkV2Node creates a v2 node from a mvccpb . KeyValue .
464	prevKeyFromPuts returns the previous key from Puts .
465	NewWeightedReport creates a new weighted report .
466	NewURLsMapFromStringMap creates a new URLsMap from a map .
467	String returns a string representation of the URLsMap .
468	URLs returns a sorted list of URLs .
469	parse parses a string into a map .
470	NewClientHandler creates a new HTTP client handler .
471	writeKeyEvent writes the key event to the response .
472	writeKeyError writes an error to the ResponseWriter .
473	getUint64 get uint64 from url . Values
474	getBool returns the bool value for a given key .
475	waitDeletes waits for a key to be deleted . If the key is not found an error is returned .
476	AddOutputPaths adds output paths and error paths to a zap . Config .
477	NewConfig returns a new Config .
478	PeerURLsMapAndToken returns the urlsmap and token for a peer .
479	GetDNSClusterNames returns a list of DNS cluster names .
480	checkBindURLs checks if the given URL is valid for binding .
481	GetCluster returns a list of cluster names for a given service .
482	GetClient returns a new SRVClients .
483	GetSRVService returns the SRV service name
484	ReadDir reads the contents of a directory .
485	compact is used to compact a revision .
486	defrag defrages an endpoint .
487	NewUserCommand returns a new cobra command for user subcommands
488	userAddCommandFunc is the command handler for user add command
489	userGetCommandFunc is the main entry point for user get command
490	userChangePasswordCommandFunc changes the password of a user .
491	addEvent adds a new event to the history .
492	scan scans the event history for the given key .
493	clone returns a copy of the event history .
494	openSnapshotBackend opens a snapshot backend .
495	openBackend opens and returns a new backend .
496	recoverSnapshotBackend attempts to recover a snapshot backend from the old backend .
497	NewUpdateCommand defines the libcompose update subcommand .
498	updateCommandFunc handles the update command .
499	frontAndBack returns the front and back of the queue .
500	Insert inserts a new RequestStats into the queue .
501	Rate returns the total number of requests in the queue .
502	Clear clears the stats queue .
503	UniqueStrings returns a slice of n unique strings .
504	RandomStrings returns n random strings
505	IsKeyNotFound returns true if the error is a KeyNotFound error .
506	IsRoleNotFound returns true if the error is a role not found error .
507	IsUserNotFound returns whether the given error is a user not found error .
508	JoinCluster joins a cluster .
509	GetCluster returns the cluster name .
510	newProxyFunc creates a new proxy function .
511	isSafeRetry returns true if the error is a safe retry .
512	withRetryPolicy sets the retry policy .
513	withAuthRetry sets the retryAuth flag .
514	withMax sets the maximum number of retries .
515	withBackoff returns a retryOption that sets the backoff function .
516	RecvAppendReq adds a new request to the server s request rate queue .
517	SendAppendReq adds a request to the send rate queue .
518	merge merges bbsrc into bb .
519	deleteRevKey deletes a key with the given revision .
520	isMemberBootstrapped returns true if the given member is bootstrapped .
521	GetClusterFromRemotePeers returns a Raft cluster from a list of remote peers .
522	getClusterFromRemotePeers returns a RaftCluster from a list of remote peers .
523	getRemotePeerURLs returns the peer URLs for the remote peer .
524	getVersions returns the versions of all members in the cluster .
525	decideClusterVersion attempts to determine the cluster version .
526	getVersion returns the versions for the given member .
527	NewTimeoutDetector creates a new TimeoutDetector .
528	Reset resets the timeout detector .
529	Observe returns whether or not the timeout has been reached .
530	NewPeerHandler returns a new http . Handler for the given etcd server .
531	put adds a new key to the index .
532	tombstone implements the KeyIndex interface for keyIndex .
533	get returns the modified and created revisions for the given revision . If the revision is not found ErrRevisionNotFound is returned .
534	since returns a list of revisions since the given revision .
535	keep is used to keep the key at the given revision .
536	findGeneration returns the generation for the given revision . If no generation is found nil is returned .
537	cancelWatcher cancels the given watcher .
538	syncWatchersLoop is a long lived goroutine that blocks until the store is unsynced .
539	syncVictimsLoop is a long lived goroutine that moves victims to the end of the store .
540	moveVictims moves victims to the unsynced list .
541	kvsToEvents converts a slice of bytes into a slice of mvccpb . Event .
542	notify is part of the Store interface .
543	isOpFuncCalled checks if a function is called .
544	UnsafePut implements the Tx interface for batchTx .
545	UnsafeSeqPut implements the Tx interface for batchTx .
546	UnsafeRange implements the BatchTx interface for batchTx .
547	UnsafeDelete implements the BatchTx interface for batchTx .
548	UnsafeForEach implements the BatchTx interface for batchTx .
549	Commit commits the transaction .
550	CommitAndStop commits and stops the transaction .
551	Renew attempts to renew a lease . If the lease is not found ErrLeaseNotFound is returned .
552	Attach adds items to the lease .
553	revokeExpiredLeases revokes expired leases .
554	checkpointScheduledLeases is used to checkpoint scheduled leases .
555	expireExists returns the lease if it exists .
556	findExpiredLeases returns a slice of leases that have expired .
557	refresh updates the expiry of the lease .
558	forever sets the lease expiry to forever .
559	Keys returns a list of all keys in the lease .
560	Remaining returns the amount of time remaining in the lease .
561	NewCompactionCommand returns a new cobra . Command for etcd compaction
562	compactionCommandFunc compactions a revision .
563	NewPutCommand returns a new instance of put command
564	putCommandFunc implements the put command function .
565	NewHandler creates a new http . Handler .
566	NewReadonlyHandler creates a new readonly handler .
567	NewSetCommand defines the libcompose set subcommand .
568	setCommandFunc handles the set command .
569	waitOnLastRev waits on the last revision of the lock and returns whether or not the lock was deleted .
570	GetDefaultInterfaces returns the default interfaces
571	NewSnapshotCommand returns a new cobra command for snapshot
572	NewMoveLeaderCommand returns a new cobra command for move - leader
573	transferLeadershipCommandFunc handles the transfer - leader command .
574	OpenDir opens a directory .
575	NewRemoveDirCommand defines the libcompose rmdir subcommand .
576	rmdirCommandFunc deletes a directory .
577	NewDelCommand returns a new instance of del command
578	delCommandFunc executes the del command .
579	NewExpect creates a new ExpectProcess .
580	NewExpectWithEnv creates a new ExpectProcess .
581	ExpectFunc waits until the function returns true .
582	Expect returns the first occurrence of the string s .
583	LineCount returns the number of lines in the process .
584	Signal sends a signal to the process .
585	keyFunc returns a string representation of a RangeRequest .
586	Add adds a new range to the cache .
587	Get returns a range response from the cache .
588	Invalidate removes the key from the cache .
589	Compact updates the cache with the given revision .
590	NewUniqueURLsWithExceptions creates a new UniqueURLs struct with the given value .
591	UniqueURLsFromFlag returns a list of unique URLs from a flag set .
592	UniqueURLsMapFromFlag returns a map of unique URLs from a flag set
593	Hold attempts to hold the barrier .
594	Release releases the barrier .
595	Wait waits for the barrier to complete .
596	NewLockRacerCommand returns a new instance of lock - racer command
597	ElectionTimeout returns the current election timeout .
598	DialEtcdGRPCServer establishes a gRPC connection to the etcd server .
599	CreateEtcdClientConfig creates a clientv3 . Config for the etcd client .
600	CreateEtcdClient creates a new etcd client .
601	CheckCompact checks the compact revision of the member .
602	Defrag is used to defragment a member .
603	RevHash returns the revision and hash of the member .
604	Rev returns the current revision of the member .
605	Compact is used to compact a single revision .
606	IsLeader returns true if the member is the leader of the cluster .
607	WriteHealthKey writes the health key to etcd .
608	SaveSnapshot saves a snapshot of the member .
609	RestoreSnapshot restores the snapshot of the member .
610	NewWatcher creates a new clientv3 . Watcher
611	NewRawNode creates a new RawNode .
612	Campaign sends a hup message to the raft node .
613	Propose is part of the raft . Node interface .
614	ProposeConfChange proposes a ConfChange to the raft node .
615	ApplyConfChange applies a ConfChange to the raft node .
616	Step is part of the raft . Node interface .
617	Ready implements the Node interface for RawNode .
618	WithProgress implements the Node interface for RawNode .
619	ReportUnreachable reports a unreachable message to raft .
620	ReportSnapshot reports the status of a snapshot .
621	TransferLeader is used to transfer the leader to another node .
622	ReadIndex reads the index from the raft node .
623	printcURL prints a curl command to stderr .
624	StartNode starts a new Raft node .
625	RestartNode starts a new Raft node .
626	Tick sends a tick to the node .
627	MustSync returns true if the given state must be synced with the previous state .
628	NewGRPC17Health creates a new GRPC17Health .
629	NeedUpdate returns true if the health check needs to be updated .
630	dflSignal sends a signal to the daemon .
631	New creates a new Store .
632	Index returns the current index .
633	Get returns an event for a given node .
634	Create is part of the Store interface .
635	Set sets the value of a node .
636	getCompareFailCause returns the comparison failure cause .
637	Delete removes a node from the store .
638	walk calls walkFunc for each node in the store .
639	internalGet returns the node for the given path .
640	DeleteExpiredKeys removes expired keys from the store .
641	checkDir checks if the given directory is a directory .
642	Save returns a copy of the store .
643	Recovery is used to recover the state of the store .
644	Next returns the next generated ID .
645	NewMakeMirrorCommand returns a new instance of make - mirror command
646	NewZapCoreLoggerBuilder creates a new zapcore logger builder .
647	NewSyncer creates a new Syncer .
648	DropPort removes the specified port from the system .
649	SetLatency sets the latency for all interfaces .
650	RemoveLatency removes latency latency from the default interfaces .
651	NewTxnCommand returns a new cobra . Command for txn sub command
652	txnCommandFunc executes a single transaction command .
653	New creates a new Compactor .
654	printResponseKey prints the response key .
655	RegisterLockHandler registers the http handlers for service Lock to mux . The handlers forward requests to the grpc endpoint over conn .
656	grpcHandlerFunc returns an http . Handler that serves to the given gRPC server . If the otherHandler is nil the default handler is used .
657	addCORSHeader adds CORS headers
658	fallback takes a list of operations and returns them as a slice of v3 . Ops . It returns a slice of v3 . Ops .
659	IDFromString creates a new ID from a string .
660	release releases the lock file .
661	EncodedSize returns the encoded size of the ValueStruct .
662	Decode decodes a ValueStruct from a byte slice .
663	NewMergeIterator creates a new MergeIterator .
664	initHeap initializes the heap .
665	Valid returns true if the iterator is valid .
666	Key returns the key of the first iterator .
667	Value returns the current value .
668	Next moves the iterator to the next key .
669	Seek seeks the iterator to the given key .
670	Close closes the merge iterator .
671	Encode encodes the valuePointer into b .
672	Decode decodes the header from buf .
673	encodeEntry encodes an Entry into the given buffer .
674	SetEntry is part of the WriteBatch interface .
675	Set is part of the WriteBatch interface .
676	SetWithTTL sets an entry with a TTL .
677	Delete is part of the WriteBatch interface .
678	commit commits the batch .
679	Flush is part of the WriteBatch interface .
680	Error implements the error interface for WriteBatch .
681	getMemTables returns the list of tables in memory .
682	writeRequests writes a batch of requests to the value log .
683	ensureRoomForWrite is used to ensure room for write operations .
684	writeLevel0Table writes the level 0 table .
685	handleFlushTask handles a flush task .
686	flushMemtable flushes the memtable to disk .
687	calculateSize calculates the size of the database .
688	Size returns the LSM and Vlog size .
689	Next returns the next value in the sequence .
690	Release releases the sequence .
691	KeySplits returns a list of key splits for the given prefix .
692	Flatten flattens all tables from the current level .
693	Mmap implements the syscall . Mmaper interface .
694	Madvise is a convenience function for madvise .
695	setDiscardTs sets the discard timestamp .
696	hasConflict returns true if the transaction has a conflict .
697	Set sets the value of a key in the transaction .
698	SetWithMeta is a convenience wrapper around SetEntry .
699	Delete deletes an entry .
700	Get retrieves an item from the database . If the key is not found ErrKeyNotFound is returned .
701	CommitWith commits the transaction with the given callback .
702	View implements the DB interface .
703	Update implements the DB interface .
704	Seek seeks the iterator to the given key . If the key is not found io . EOF is returned .
705	SeekToLast moves the iterator to the last block .
706	parseKV parses a key - value pair .
707	NewIterator creates a new iterator .
708	seekFrom seeks the iterator to the given key .
709	seekForPrev moves the iterator to the previous key .
710	Value returns the current value .
711	Seek seeks the iterator to the given key .
712	NewConcatIterator creates a new ConcatIterator .
713	Valid returns whether the current iterator is valid .
714	Next moves the iterator to the next element .
715	Close closes all the iterators .
716	OpenExistingFile opens an existing file .
717	Copy returns a copy of a .
718	KeyWithTs returns a copy of the given key with the given timestamp .
719	ParseTs returns the timestamp of the key .
720	ParseKey parses a key into a slice of bytes .
721	SameKey returns true if src and dst are the same .
722	FixedDuration converts a time . Duration to a string .
723	NewCloser creates a new Closer .
724	NewThrottle creates a new Throttle .
725	Do is a long lived goroutine that will be run in a separate goroutine .
726	Done implements the Throttle interface .
727	Finish stops the Throttle .
728	SetDiscardTs implements the DB interface for DB .
729	openReadOnly opens the log file as read - only .
730	iterate calls fn for each entry in the log .
731	sortedFids returns a sorted list of all files in the valueLog .
732	write writes to the value log file .
733	populateDiscardStats populates vlog . lfDiscardStats .
734	Backup writes a backup log to w .
735	ToList converts an iterator into a KVList .
736	produceRanges consumes all the key ranges from the database .
737	produceKVs is used to produce a list of key - value pairs .
738	Orchestrate starts orchestrating the stream .
739	NewStream creates a new Stream .
740	NewStreamAt creates a new stream at the given read timestamp .
741	DecrRef decreases the reference count of the table .
742	ParseFileID parses a file name and returns its ID .
743	PrintHistogram prints a histogram of key sizes .
744	newSizeHistogram creates a new sizeHistogram .
745	buildHistogram builds a sizeHistogram from the given prefix .
746	printHistogram prints the histogram data .
747	Init initializes the watermark .
748	Begin starts the water mark at the given index .
749	BeginMany starts a new water mark at the given indices .
750	Done marks the given index as done .
751	DoneMany marks the passed indices as done .
752	SetDoneUntil sets the doneUntil value .
753	WaitForMark blocks until the given index is reached .
754	Encode encodes the header into b .
755	Decode decodes the header from buf .
756	NewTableBuilder creates a new table builder .
757	keyDiff returns the difference of baseKey and newKey .
758	Add adds a key - value pair to the builder .
759	blockIndex returns the block index .
760	Finish returns the end of the block .
761	Errorf logs an error .
762	Infof logs with the Info level .
763	DecrRef decreases the reference count of the Skiplist .
764	NewSkiplist creates a new Skiplist .
765	Put adds a new value to the Skiplist .
766	Get returns the value for the given key .
767	Key returns the current key .
768	Value returns the current value .
769	Next moves the iterator to the next element .
770	Prev moves the iterator to the previous element .
771	Seek moves the iterator to the first occurrence of target .
772	SeekForPrev moves the iterator to the previous element .
773	NewUniIterator creates a new UniIterator .
774	Next moves the iterator to the next element .
775	Seek seeks the iterator to the given key .
776	asChanges returns a slice of ManifestChanges .
777	rewrite rewrites the manifest file .
778	validate checks if the level is valid .
779	acquireDirectoryLock acquires a lock on a directory .
780	release releases the lock guard .
781	AssertTruef asserts that b is true .
782	Wrapf is a convenience wrapper for errors . Wrapf .
783	initTables sets the tables for the level handler .
784	deleteTables deletes a set of tables .
785	tryAddLevel0Table adds a table to the list of tables . Returns true if the table was added .
786	getTableForKey returns the table for the given key .
787	get returns the value for the given key .
788	overlappingTables returns the number of overlapping tables and the number of overlapping tables .
789	String returns a string representation of the Item .
790	KeyCopy returns a copy of the key .
791	ValueSize returns the size of the value .
792	NewKeyIterator creates a new iterator for the given key .
793	Valid returns true if the iterator is valid .
794	ValidForPrefix returns true if the iterator is valid for the given prefix .
795	Close closes the iterator .
796	parseItem parses the next item from the iterator .
797	Seek moves the iterator to the given key .
798	GetMergeOperator creates a new MergeOperator .
799	Get returns an existing value from the database .
800	compareAndAdd implements the compactStatus interface for compactStatus .
801	newArena creates a new Arena .
802	putNode adds a new node to the Arena .
803	getNode returns the node at the given offset .
804	getKey returns the key from the buffer .
805	getVal returns the value at the given offset .
806	getNodeOffset returns the offset of the given node .
807	init initializes the badger variables .
808	revertToManifest reverts to the MANIFEST file .
809	dropTree removes all levels from the manifest .
810	dropPrefix drops a prefix from all levels .
811	isLevel0Compactable returns whether or not the first level is compactable .
812	doCompact is used to do a compaction .
813	get returns the value for the given key . If maxVs is non - nil it will be returned .
814	seekTotal is used to seek the total balance of all accounts .
815	findFirstInvalidTxn finds the first invalid transaction in the range [ lowTs highTs ) .
816	Create creates a new snapshot sink .
817	List returns a list of all snapshots .
818	Open opens the snapshot with the given id .
819	Write is part of the io . Writer interface .
820	NewFileSnapshotStoreWithLogger creates a new FileSnapshotStore
821	NewFileSnapshotStore creates a new FileSnapshotStore .
822	snapshotName returns the name of the snapshot .
823	Create creates a new snapshot .
824	List returns the list of snapshots in the file .
825	getSnapshots returns a slice of fileSnapshotMeta for each snapshot in the directory .
826	readMeta reads the fileSnapshotMeta from disk .
827	Open opens a snapshot with the given ID .
828	ReapSnapshots reaps all snapshots
829	Write is part of the io . Writer interface .
830	Close closes the FileSnapshotSink .
831	Cancel cancels the snapshot .
832	finalize implements the SnapshotSink interface for FileSnapshotSink .
833	writeMeta writes the snapshot meta to disk .
834	NewNetworkTransportWithConfig creates a new NetworkTransport with the given configuration .
835	setupStreamContext sets up the stream context .
836	getStreamContext returns the current stream context .
837	SetHeartbeatHandler sets the heartbeat handler for the transport .
838	CloseStreams cleans up all resources associated with the transport .
839	Close closes the transport .
840	getPooledConn returns a connection from the pool . If no connection is available nil is returned .
841	getConnFromAddressProvider is a convenience function to get a connection from an address provider .
842	getConn attempts to establish a connection to the target server . If no connection is established an error is returned .
843	returnConn returns a connection to the pool .
844	listen is used to listen for new connections .
845	handleConn handles incoming connections .
846	handleCommand handles a single command .
847	decodeResponse decodes the response from the connection .
848	sendRPC sends an RPC message .
849	newNetPipeline creates a new netPipeline .
850	decodeResponses decodes responses from the in - progress channel .
851	AppendEntries sends an AppendEntries RPC to the pipeline .
852	Close closes the netPipeline .
853	NewObserver creates a new Observer .
854	RegisterObserver registers an Observer .
855	DeregisterObserver removes an Observer from the Raft .
856	observe sends an observation to all registered observers .
857	NewInmemStore creates a new InmemStore .
858	FirstIndex returns the first index in the store .
859	LastIndex returns the last index in the store .
860	GetLog returns the log at the given index .
861	StoreLog stores a log in the InmemStore .
862	StoreLogs stores a slice of logs to the InmemStore
863	DeleteRange deletes all logs between min and max .
864	Set implements the InmemStore interface .
865	Get returns the value for the given key .
866	SetUint64 implements the InmemStore interface .
867	GetInt64 returns the uint64 value for the given key .
868	NewLogCache creates a new LogCache .
869	Connect adds a new transport to the InmemTransport .
870	Disconnect disconnects a peer from the InmemTransport .
871	DisconnectAll disconnects all in - memory connections .
872	Respond sends a response to the client .
873	Open implements the SnapshotFuture interface .
874	vote sends a vote to the notifyCh if leader is true .
875	notifyAll is used to notify all followers .
876	cleanNotify removes a verifyFuture from the notify map .
877	LastContact returns the last contact of the replication .
878	setLastContact updates the last contact time .
879	replicate is the main entry point for a follower replication .
880	pipelineReplicate is used to replicate a batch of entries to a peer .
881	pipelineSend is used to send an AppendEntries to a follower .
882	pipelineDecode is used to decode a pipeline .
883	setupAppendEntries sets up the AppendEntriesRequest .
884	setPreviousLog sets the previous log entry in the AppendEntriesRequest .
885	setNewLogs adds new logs to the AppendEntriesRequest .
886	appendStats updates the raft metrics for the given peer .
887	handleStaleTerm is called when a peer has a newer term .
888	AppendEntries is part of the raft . Transport interface .
889	RequestVote is part of the raft . Transport interface .
890	InstallSnapshot is part of the raft . Transport interface
891	EncodePeer encodes a peer .
892	DecodePeer decodes a peer from a byte slice .
893	AppendEntries is part of the raft . Pipeline interface .
894	ReadPeersJSON reads a configuration from a JSON file .
895	ReadConfigJSON reads a configuration from a JSON file .
896	NewTCPTransport creates a new TCP transport .
897	NewTCPTransportWithLogger creates a new TCP transport with a custom logger .
898	NewTCPTransportWithConfig creates a new TCP transport with the given configuration .
899	Dial establishes a connection to the given server address .
900	Accept is part of the StreamLayer interface .
901	Addr returns the address of the listener .
902	restoreSnapshot restores the configuration from a snapshot .
903	BootstrapCluster is used to bootstrap a Raft cluster .
904	Leader returns the leader of the Raft node .
905	Apply applies the given command to the Raft cluster .
906	Barrier sends a barrier log to the raft .
907	VerifyLeader is used to verify the leader of the Raft node .
908	AddVoter adds a voter to the raft cluster .
909	RemoveServer removes a server from the Raft cluster .
910	Shutdown is used to shutdown the Raft .
911	Snapshot returns a snapshot future .
912	Restore implements raft . Raft . Restore .
913	String returns a string representation of the Raft node .
914	LastContact returns the last contact time .
915	Logf implements the Logger interface .
916	containsNode returns true if the given node is in the given list .
917	LeaderPlus returns the last n nodes in the cluster .
918	WaitTilUptoDate waits for all nodes to reach the last applied index .
919	assertLogEntryEqual asserts that the log entry is equal to the given log entry .
920	runFSM runs the Raft FSM .
921	Clone returns a copy of the configuration .
922	Clone returns a copy of the configurations .
923	hasVote checks if a server has a vote .
924	checkConfiguration returns an error if the configuration is invalid .
925	nextConfiguration returns the next configuration based on the change .
926	encodePeers is used to encode a list of peers .
927	decodePeers decodes a list of peers from the given buffer .
928	encodeConfiguration encodes a configuration struct into a byte slice .
929	decodeConfiguration decodes a configuration message from buf .
930	goFunc adds a goroutine to the raftState s routinesGroup .
931	getLastIndex returns the last log index and snapshot index .
932	getLastEntry returns the index and term of the last log entry .
933	checkRPCHeader checks if the RPC command has a header .
934	setLeader sets the leader of the Raft node .
935	requestConfigChange is used to send a configuration change request to the Raft server .
936	run is the main loop for Raft .
937	runFollower runs the follower goroutine .
938	liveBootstrap is used to bootstrap the Raft cluster .
939	runCandidate is used to run a candidate state .
940	runLeader starts the raft leader .
941	startStopReplication starts the replication goroutine .
942	configurationChangeChIfStable returns the configuration change channel if it is stable or nil otherwise .
943	verifyLeader is used to verify the leader .
944	checkLeaderLease is used to check the leader lease .
945	restoreUserSnapshot is used to restore a user snapshot .
946	appendConfigurationEntry adds a new configuration entry to the raft configuration .
947	dispatchLogs is used to dispatch logs to the leader .
948	processLogs processes the logs at the given index .
949	processLog is used to process a log .
950	processRPC processes a single RPC .
951	processHeartbeat processes a heartbeat RPC .
952	setLastContact updates the last contact time .
953	persistVote updates the last vote term and candidate .
954	setCurrentTerm sets the current term .
955	setState sets the raft state to the given value .
956	getCommitIndex returns the current commit index .
957	recalculate recalculates the commitment index if necessary .
958	randomTimeout returns a channel that will be closed when the timeout is greater than minVal .
959	generateUUID generates a random UUID .
960	decodeMsgPack decodes a msgpack message .
961	encodeMsgPack encodes a struct into a msgpack message .
962	backoff takes a base duration and rounds up to the given number of times and returns the base duration .
963	newApplySource creates a new applySource .
964	reset resets the random number generator .
965	DefaultConfig returns a default configuration .
966	ValidateConfig checks that the given configuration is valid .
967	runSnapshots is a long lived goroutine that takes snapshots from the user s snapshot channel .
968	shouldSnapshot returns true if we should snapshot .
969	takeSnapshot is used to take a snapshot .
970	compactLogs is used to compact the logs from snapIdx to snapIdx .
971	WebpackCheck checks if the webpack . config . js file is different from the latest Buffalo template .
972	New creates a new genny generator .
973	UnixSocket creates a new listener on a unix socket .
974	Get returns an error handler for the given status .
975	PanicHandler adds a panic handler to the app s ErrorHandlers .
976	partialFeeder returns the name of a partial feeder .
977	New creates a new engine with the given options .
978	WriteTo implements io . WriterTo interface . It serializes the message to w .
979	Send sends a message to the SMTPSender
980	NewSMTPSender creates a new SMTPSender .
981	Param returns the value associated with the given key .
982	Set sets the value for the given key .
983	Value returns the value associated with the given key .
984	Redirect redirects to the given URL .
985	File returns a File binding .
986	MarshalJSON marshals the DefaultContext to JSON .
987	New creates a new genny group .
988	New creates a new app .
989	DeprecationsCheck checks for deprecations .
990	List is not implemented .
991	Render implements the Renderer interface .
992	Save saves the session .
993	GetOnce returns a value by name or nil if not found .
994	Set sets a value in the session
995	Clear removes all values from the session
996	getSession returns a new session
997	New creates a new generator with the given options .
998	New creates a new generator with the given options .
999	New creates a new generator .
1000	NewMessage creates a new Message .
1001	Reset removes all fields from the message .
1002	SetHeader sets the header field to the given value .
1003	SetHeaders sets the message s headers .
1004	SetAddressHeader adds an address header to the message .
1005	FormatAddress formats an address .
1006	SetDateHeader adds a date header to the message .
1007	FormatDate returns a string representation of a date .
1008	SetBody sets the body of the message .
1009	SetPartEncoding sets the encoding of the part .
1010	SetHeader sets the header of the file .
1011	SetCopyFunc sets the copy function for the file .
1012	AttachReader adds an io . Reader to the message .
1013	Attach adds a new attachment to the message .
1014	EmbedReader adds an embedded file to the message .
1015	Embed adds an embedded file to the message .
1016	ValidateTemplates validates a list of templates .
1017	PlushValidator checks if the given file is plush .
1018	Validate validates the options .
1019	LoadPlugins loads all plugins .
1020	WriteHeader implements the http . ResponseWriter interface .
1021	Write implements the http . ResponseWriter interface .
1022	Flush flushes the response .
1023	CloseNotify returns a channel that will be closed when the response is closed .
1024	Run runs the updater .
1025	onlyRelevantFiles returns an error if the file is not a file or a directory .
1026	GoTemplateEngine executes a Go template engine .
1027	GET registers a new GET route .
1028	Redirect redirects to the given URL .
1029	ANY registers a handler for the given route .
1030	buildRouteName builds a route name from a string .
1031	New creates a new generator .
1032	NewDialer creates a new Dialer .
1033	Dial implements the Dialer interface .
1034	DialAndSend dials and sends a message using the given Dialer .
1035	Set sets the values for a flash key .
1036	Add adds a key and value to the flash .
1037	persist writes the flash data to the session
1038	newFlash creates a new Flash object
1039	Get returns the value of a cookie .
1040	Set sets a cookie on the response .
1041	SetWithExpirationTime sets a cookie with an expiration time .
1042	Delete deletes a cookie .
1043	NewMessage creates a new message .
1044	NewFromData creates a new Message from a render . Data .
1045	New creates a new Message from a buffalo . Context
1046	CloseNotify returns a channel that will be closed when the event source is closed .
1047	NewEventSource returns a new EventSource .
1048	NewSimpleWithContext creates a new Simple with the given context .
1049	Register registers a handler for the given name .
1050	Start starts the background worker .
1051	Stop stops the Simple background worker .
1052	Perform performs the given job .
1053	PerformAt is a convenience wrapper around PerformIn .
1054	PerformIn runs the given job in the given duration .
1055	String returns a string representation of the RouteInfo .
1056	Alias adds one or more aliases to the route .
1057	Name sets the name of the route
1058	BuildPathHelper returns a RouteHelperFunc that renders the route path .
1059	New creates a new generator .
1060	New creates a new generator with the given options .
1061	RegisterCustomDecoder registers a custom type decoder .
1062	Replace replaces the middleware in the stack .
1063	Routes returns the routes of the application .
1064	WrapBuffaloHandler wraps an http . Handler .
1065	PackageJSONCheck checks if the package . json file is different from the latest Buffalo template
1066	match matches the importpath and returns the result .
1067	Send sends the given messages to the given sender .
1068	Last returns true if n is the last part of the options .
1069	Stop stops the app .
1070	DepEnsure runs the dep ensure command .
1071	String returns a string representation of the BuildInfo .
1072	New creates a new generator .
1073	AddBody adds a body to the message .
1074	AddBodies adds the given body to the message .
1075	AddAttachment adds an attachment to the message .
1076	AddEmbedded adds an embedded attachment to the message .
1077	SetHeader adds a header to the message .
1078	New creates a new genny group .
1079	New creates a new generator .
1080	New creates a new generator .
1081	Cleanup cleans up any temporary files .
1082	MDTemplateEngine renders a markdown template
1083	Update updates a configmap
1084	FilterChanges takes a list of pull request changes and filters them out .
1085	getLabelsFromREMatches returns a list of labels from a list of matches .
1086	getLabelsFromGenericMatches returns a list of labels from the generic matches
1087	Start starts the agent .
1088	Subscribe adds a new subscription to the agent .
1089	Config returns the configuration for the agent .
1090	Set sets the configuration for the agent .
1091	IsMember returns true if the user is a member of an org
1092	ListIssueComments returns a list of issue comments
1093	ListPullRequestComments is part of the github . Client interface .
1094	ListReviews is part of the github . Client interface .
1095	ListIssueEvents returns a list of issue events
1096	CreateComment adds a comment to the fake client
1097	CreateReview creates a review
1098	CreateCommentReaction adds a comment reaction
1099	CreateIssueReaction adds a reaction to an issue
1100	DeleteComment deletes an issue comment
1101	DeleteStaleComments deletes stale comments
1102	GetPullRequest returns a pull request by number
1103	GetPullRequestChanges returns a list of pull request changes
1104	GetRef is a mock
1105	DeleteRef is part of the Client interface .
1106	GetSingleCommit returns a single commit
1107	CreateStatus adds a status to the created statuses map .
1108	ListStatuses is part of the github . Client interface .
1109	GetCombinedStatus returns the CombinedStatus for the given ref
1110	GetRepoLabels returns a list of labels for a repository
1111	GetIssueLabels returns a list of labels for an issue
1112	AddLabel adds a label to the fake client
1113	RemoveLabel removes a label from the fake client
1114	FindIssues returns a fake list of issues
1115	AssignIssue adds a new issue to the FakeClient .
1116	GetFile returns the content of a file
1117	ListTeams is part of the github . Interface .
1118	ListTeamMembers is part of the github . Client interface .
1119	IsCollaborator returns true if the user is a collaborator
1120	ListCollaborators returns a list of collaborators
1121	ClearMilestone clears the milestone
1122	SetMilestone sets the milestone number
1123	ListMilestones returns a list of milestones
1124	ListPRCommits returns the list of commits for a given PR number .
1125	GetRepoProjects returns a list of projects for a repository .
1126	GetOrgProjects returns a list of projects for an org
1127	GetProjectColumns returns a list of ProjectColumns for the given project ID
1128	CreateProjectCard creates a new project card
1129	DeleteProjectCard deletes a project card
1130	MoveProjectCard moves a project card to a new column .
1131	CreateDatabaseClient creates a new InfluxDB client .
1132	Push adds a point to the influx database .
1133	NewProwJobWithAnnotation creates a new prow job with the given labels and annotations .
1134	NewProwJob creates a new prow job
1135	NewPresubmit creates a new presubmit job .
1136	PresubmitSpec creates a prowapi . ProwJobSpec from a config . Presubmit
1137	PostsubmitSpec returns a prowapi . ProwJobSpec for a postsubmit job .
1138	PeriodicSpec returns a prowapi . ProwJobSpec for a periodic job .
1139	BatchSpec creates a prowapi . ProwJobSpec from a config . Presubmit .
1140	PartitionActive takes a slice of prowapi . ProwJob and returns the pending and triggered channels .
1141	ProwJobFields returns a logrus . Fields for a prow job .
1142	ClusterToCtx converts kube . InClusterContext to kube . DefaultClusterAlias
1143	AddCommand adds a command to the plugin help
1144	Get takes name of the prowJob and returns the corresponding prowJob object and an error if there is any .
1145	Watch returns a watch . Interface that watches the requested prorowJobs .
1146	Delete takes name of the prowJob and deletes it . Returns an error if one occurs .
1147	Patch applies the patch and returns the patched prowJob .
1148	MergeMethod returns the merge method for the given repository .
1149	Query returns a string representation of the query .
1150	ForRepo returns true if the query is valid for the given repository .
1151	OrgExceptionsAndRepos returns the set of org exceptions and the set of repos .
1152	QueryMap creates a new QueryMap .
1153	ForRepo returns a list of queries for the given org and repo .
1154	Validate checks if the TideContextPolicy is valid .
1155	GetTideContextPolicy returns a TideContextPolicy
1156	IsOptional returns true if the given context is optional
1157	MissingRequiredContexts returns a list of contexts that are missing from the TideContextPolicy
1158	ValidateWebhook checks if the webhook is valid .
1159	HelpProvider provides a help provider for needs - rebase plugins .
1160	HandleEvent handles a pull request event .
1161	HandleAll checks all PRs for the external plugin .
1162	NewDryRunProwJobClient creates a new dryRunProwJobClient .
1163	Create creates a new ProwJob .
1164	Update is part of the prowapi . JobClient interface .
1165	UpdateStatus updates the status of a ProwJob .
1166	Delete is part of the JobClient interface .
1167	DeleteCollection is part of the ProwJobClient interface .
1168	Get is part of the ProwJobClient interface .
1169	List is part of the prowapi . ProwJobClient interface
1170	Watch returns a watch . Interface that watches for a dryRun job .
1171	Patch applies the patch and returns the patched prowjob .
1172	hasSynced returns true if the controller has been synced .
1173	Run starts the pipeline controller
1174	runWorker runs the reconcile worker .
1175	fromKey takes a key string and returns the first and second parts of the key .
1176	enqueueKey adds a key to the workqueue .
1177	finalState returns true if the given status is a final state .
1178	description returns the description of the condition or fallback if none is set .
1179	prowJobStatus returns the prow job state and description .
1180	pipelineMeta returns the meta for a pipeline .
1181	sourceURL returns the source URL for a prow job .
1182	makePipelineGitResource creates a PipelineResource from a ProwJob .
1183	makePipelineRun creates a PipelineRun from a prowjob .
1184	matchingConfigs returns a list of plugins . RequireMatchingLabel that match the given label .
1185	SuggestCodeChange returns the suggestion of the code change .
1186	ServeExternalPluginHelp serves external plugin help .
1187	protect protects the current state of the branch .
1188	UpdateOrg updates an org .
1189	UpdateRepo updates a repository .
1190	UpdateBranch updates the protection requirements for the given branch
1191	LoadConfig loads the options from a string .
1192	Run runs the artifact uploader .
1193	Start starts the agent .
1194	reloadSecret reloads the secret from disk .
1195	GetSecret returns the secret for the given path .
1196	setSecret sets the secret value for the given path .
1197	GetTokenGenerator returns a function that can be used to generate a token .
1198	New creates a new History .
1199	Record adds a new record to the history .
1200	ServeHTTP implements the http . Handler interface .
1201	Flush flushes the history to GCS .
1202	AllRecords returns all the records in the history .
1203	MakeCommand creates a new cobra . Command .
1204	CheckFlags checks the flags of the comment counter plugin .
1205	ReceiveComment returns a slice of points for the given comment .
1206	NewController creates a new Controller .
1207	Run starts the controller .
1208	runWorker runs the controller s worker .
1209	New creates a new LocalGit instance .
1210	MakeFakeRepo creates a fake repo
1211	AddCommit adds a new commit to the given repository .
1212	CheckoutNewBranch checkouts a new branch .
1213	Checkout will checkout the given commit like .
1214	RevParse runs git rev - parse .
1215	CleanAll cleans all resources
1216	optionsForRepo returns the Lgtm options for the given repository .
1217	getChangedFiles returns a list of files that have been changed .
1218	loadReviewers loads a list of reviewers from a repoowner .
1219	NewController creates a new Controller .
1220	SaveLastSync saves the last sync time .
1221	Sync updates the last sync time .
1222	AddFlags adds flags for event counter plugin
1223	CheckFlags implements the plugin . Plugin interface .
1224	ReceiveIssueEvent returns the points for an issue event .
1225	Upload uploads a set of files to the given bucket .
1226	FileUploadWithMetadata returns a UploadFunc that uploads a file using the given metadata .
1227	DataUploadWithMetadata returns a UploadFunc that uploads data from src to obj .
1228	HasLabel returns true if issueLabels contains the given label .
1229	ImageTooBig checks if the image is too large .
1230	LevelFromPermissions returns the level of the given permissions .
1231	PermissionsFromLevel converts a RepoPermissionLevel to a RepoPermissions .
1232	newProwJobs returns a ProwJobs
1233	GetApplicable returns all blockers for the given org repo and branch .
1234	serve serves jenkins metrics .
1235	NewCountPlugin returns a new instance of CountPlugin
1236	ReceiveComment is part of the CommentPlugin interface .
1237	updateMetrics updates the Prometheus metrics .
1238	LogStatus logs the current resources
1239	SyncConfig syncs the config to the storage .
1240	Metric returns a metric for a given resource type
1241	FormatURL formats a dog URL .
1242	runAndSkipJobs runs the requested jobs and skips the skipped jobs .
1243	validateContextOverlap returns an error if the contexts are triggered and skipped .
1244	RunRequested runs the presubmit jobs for the given pull request .
1245	skipRequested creates a status report for each skipped job .
1246	Match returns true if the event name matches the label .
1247	Match returns true if the given event name matches the given label .
1248	AddFlags adds flags related to GitHub to the specified FlagSet .
1249	AddFlagsWithoutDefaultGitHubTokenPath adds flags related to GitHub to the specified FlagSet .
1250	Validate validates the GitHubOptions .
1251	GitHubClientWithLogFields creates a new GitHub client using the provided fields .
1252	GitHubClient returns a new GitHub client
1253	GitClient creates a new git client using the given secret agent .
1254	toMap converts a CoverageList to a map .
1255	findChanges finds the changes between two coverage lists .
1256	CreateDatabase creates a new MySQL database .
1257	ShouldReport returns true if the prow job should be reported .
1258	Report sends a report to the Plank API .
1259	MarkComplete marks the set as complete . Returns the number of resources marked .
1260	NewJobAgent creates a new JobAgent .
1261	Start starts the job agent .
1262	Jobs returns a copy of the jobs .
1263	ProwJobs returns a copy of the prowJobs .
1264	GetProwJob returns the prowapi . ProwJob for the given job and id .
1265	GetJobLog returns the logs for the given job .
1266	unionStrings returns the union of parent and child .
1267	Apply applies a child policy to this policy .
1268	GetOrg returns the org with the given name
1269	GetRepo returns the repo with the given name
1270	GetBranch returns a branch by name .
1271	GetPolicy returns the policy for the given branch .
1272	UpdateIssueEvents updates issue - events .
1273	enqueueKey adds a key to the workqueue .
1274	prowJobStatus returns a prowjobv1 . ProwJobState based on the build status .
1275	buildEnv returns a map of environment variables for a prow job .
1276	defaultArguments adds default arguments to the template instantiation spec .
1277	defaultEnv adds default values to the container s environment .
1278	injectSource injects the build source into the build spec .
1279	injectedSteps injects a set of steps into a container and volume .
1280	determineTimeout returns the timeout for a build .
1281	makeBuild creates a build from a prowjob .
1282	newLabels returns a slice of labels for a given issue .
1283	newAssignees creates a list of assignees for a given issue .
1284	NewIssueComment creates a new issue comment .
1285	messageFilter returns a filter that is applied to all messages in the given change .
1286	IsSuccess returns true if the build was successful .
1287	IsFailure returns true if the build is a failure or unstable .
1288	IsAborted returns true if the build is aborted .
1289	ProwJobID returns the prow job ID
1290	BuildID returns the build ID
1291	CrumbRequest sends a crumb request to the client .
1292	measure measures the latency of a request .
1293	GetSkipMetrics returns metrics for the given path .
1294	Get performs a GET request .
1295	request performs a request with the given parameters .
1296	doRequest makes an HTTP request to the given path .
1297	getJobName returns the name of the job
1298	getBuildPath returns the path to the build job .
1299	GetJobInfo returns information about a job .
1300	JobParameterized returns true if the job is parameterized .
1301	EnsureBuildableJob ensures that a buildable job exists .
1302	LaunchBuild launches a build
1303	Build builds a prow job
1304	BuildFromSpec launches a build from a prow job spec
1305	GetEnqueuedBuilds returns a list of builds that have been enqueued .
1306	Abort aborts a build .
1307	PresubmitToJobSpec converts a config . Presubmit to a downwardapi . JobSpec
1308	PostsubmitToJobSpec converts a config . Postsubmit to a downwardapi . JobSpec
1309	PeriodicToJobSpec converts a config . Periodic to a downwardapi . JobSpec
1310	GetBuildID returns the build ID for a build .
1311	listGcsObjects lists all GCS objects in a given bucket .
1312	FindBaseProfile finds the base profile for a prow job .
1313	sortBuilds takes a slice of strings and sorts them by build number .
1314	GetAll returns all regions
1315	NewEventClient creates a new EventClient
1316	PruneComments removes all comments for the issue .
1317	FormatResponse returns a string representation of a response .
1318	FormatSimpleResponse formats a simple response .
1319	FormatICResponse formats an issue comment response .
1320	FormatResponseRaw formats a raw response .
1321	Validate validates the options .
1322	Encode encodes options to JSON .
1323	RegisterIssueHandler registers an issue handler for a plugin .
1324	RegisterIssueCommentHandler registers an issue comment handler .
1325	RegisterPullRequestHandler registers a pull request handler .
1326	RegisterStatusEventHandler registers a StatusEventHandler .
1327	RegisterPushEventHandler registers a PushEventHandler .
1328	RegisterReviewEventHandler registers a handler for review events .
1329	RegisterReviewCommentEventHandler registers a handler for review comment events .
1330	RegisterGenericCommentHandler registers a generic comment handler .
1331	NewAgent creates a new Agent
1332	InitializeCommentPruner initializes the comment pruner .
1333	CommentPruner returns the comment pruner client .
1334	Load loads the configuration from a file .
1335	Config returns the current configuration .
1336	Set sets the configuration for the agent .
1337	Start starts the config agent .
1338	GenericCommentHandlers returns the generic comment handlers for the given owner and repo .
1339	IssueHandlers returns a map of plugin names to issue handlers .
1340	IssueCommentHandlers returns a map of issue comment handlers .
1341	PullRequestHandlers returns a map of pull request handlers for each plugin .
1342	ReviewEventHandlers returns a map of plugin name to ReviewEventHandler .
1343	ReviewCommentEventHandlers returns a map of plugin name to ReviewCommentEventHandler .
1344	StatusEventHandlers returns a map of plugin names to StatusEventHandler .
1345	PushEventHandlers returns the push event handlers for the given owner and repo .
1346	EventsForPlugin returns a list of events for a plugin .
1347	insertLink inserts the viewURL into the metadata . links . resultstore .
1348	HelpProvider returns the help for cherrypick plugin .
1349	getPatch returns the patch for a pull request .
1350	releaseNoteFromParentPR returns the release - note from the parent PR .
1351	ValidatePayload returns true if the payload is valid .
1352	PayloadSignature returns the signature of the payload using the given key .
1353	updateString updates have to be equal to want .
1354	updateBool returns true if have is equal to want .
1355	configureOrgMeta updates the metadata of an org .
1356	configureTeamRepos is used to configure the repositories of a team .
1357	ShouldReport returns true if the prow job should be reported .
1358	Run runs the job with the given options .
1359	Format implements the logrus . Formatter interface .
1360	FindLabels returns all labels that match the given regular expression .
1361	AddFlags adds options to the given FlagSet .
1362	NewAgent creates a new GitHub OAuth Agent .
1363	HandleLogin returns a handler that redirects the user to the login URL .
1364	HandleLogout handles a logout request .
1365	serverError sends a 500 Internal server error .
1366	FromItem converts a common . Item into a ResourcesConfigObject .
1367	GetItems returns all the items in the collection .
1368	SetItems sets the items of the collection .
1369	UnmarshalText unmarshals a string into a RepoPermissionLevel .
1370	IsAssignee returns true if the issue is assigned to the given login .
1371	IsAuthor returns true if the issue is author of the given login .
1372	HasLabel returns true if the issue has the given label .
1373	Branch returns the branch of the push event .
1374	truncate truncates a string .
1375	reportStatus reports the status of a prowjob .
1376	parseIssueComments parses a list of issue comments .
1377	createComment creates a comment for a prow job .
1378	Config returns a lenses . LensConfig .
1379	Callback implements the Lens interface for Lens .
1380	FormatRecord returns a string representation of the given record .
1381	Namespace sets the namespace of the client .
1382	NewFakeClient creates a new fake client .
1383	NewClientInCluster creates a new client in the cluster .
1384	NewClientFromFile creates a new Client from a YAML file .
1385	NewClient creates a new Kubernetes client
1386	ReplaceConfigMap replaces a ConfigMap .
1387	GetDiskUsage returns the percentBlocksFree bytes free and bytes used for the given path .
1388	GetATime returns the atime for the given path . If the path does not exist defaultTime is returned .
1389	RegisterLens registers a viewer with Spyglass .
1390	GetLens returns the Lens with the given name .
1391	LastNLines returns the last n lines of the artifact .
1392	NewClient creates a new slack client
1393	WriteMessage sends a message to the specified channel .
1394	MarkAndSweep marks all NATGateways in the set .
1395	ListAll lists all NAT gateways
1396	NewClient creates a new Client .
1397	Acquire acquires a new resource .
1398	AcquireWait waits for a resource to be acquired and returns it . If the context is canceled an error is returned .
1399	AcquireByState acquires a list of resources from the given state .
1400	ReleaseAll releases all resources
1401	ReleaseOne releases a single resource .
1402	UpdateAll updates all resources with the given state .
1403	SyncAll syncs all resources
1404	UpdateOne updates a single resource .
1405	Metric returns the metric for the given type .
1406	HasResource returns true if there is at least one resource .
1407	DialContext implements the Dialer interface .
1408	NewDashboardAgent creates a new dashboard agent
1409	QueryPullRequests returns a list of pull requests for the given query .
1410	GetHeadContexts returns the contexts for the head of a pull request .
1411	ConstructSearchQuery returns a search query for the dashboard .
1412	NewBundledStates creates a new BundledStates
1413	ReceiveEvent sends an event to the state identified by ID . Returns true if the event was changed .
1414	ages returns the ages for all active states .
1415	Percentile takes a time . Time and returns a time . Duration that corresponds to the given percentile .
1416	NewMetrics creates a new Metrics object .
1417	NewDiskCache creates a new http . RoundTripper with a disk cache .
1418	NewMemCache creates a new http . RoundTripper with a memory cache .
1419	NewFromCache creates a new request coalescer using the given cache .
1420	ProwV1 retrieves the ProwV1Client
1421	Prow retrieves the ProwV1Client
1422	NewOwners creates a new Owners object .
1423	GetApprovers returns the list of owners to approve .
1424	GetAllPotentialApprovers returns a list of all potential approvers
1425	GetReverseMap returns a reverse map of owners to owners .
1426	temporaryUnapprovedFiles returns the unapproved files for the given approvers .
1427	KeepCoveringApprovers returns a list of known approvers that are not in the list of known approvers .
1428	GetSuggestedApprovers returns a set of approvers that match the given list of files .
1429	GetOwnersSet returns the set of owners that are currently approved .
1430	GetShuffledApprovers returns a list of shuffled approvers
1431	String returns a string representation of the Approval .
1432	IntersectSetsCase returns the intersection of two sets .
1433	NewApprovers creates a new Approvers .
1434	AddLGTMer adds a new LGTMer approval .
1435	RemoveApprover removes an approver from the list .
1436	AddAssignees adds a user to the list of assignees
1437	GetCurrentApproversSetCased returns the set of current approvers .
1438	GetFilesApprovers returns the list of files that are currently approved .
1439	NoIssueApprovers returns the approvers that have no issue .
1440	UnapprovedFiles returns a set of files that are not approved .
1441	GetFiles returns a list of files that are approved by the current user .
1442	IsApproved returns whether or not the Approver is approved .
1443	ListApprovals returns a list of current approvals .
1444	ListNoIssueApprovals returns a list of no issue approvals .
1445	GenerateTemplate generates a message template
1446	writeTemplate writes the given data to the given path .
1447	Labels returns all the labels in the configuration .
1448	LabelsForTarget returns a slice of labels that match the given target .
1449	LoadConfig loads a configuration from a file .
1450	loadLabels loads labels from a list of repositories .
1451	kill is used to kill a label .
1452	create creates a new update with the given label .
1453	classifyLabels returns the required archaic and dead labels .
1454	linkify takes a string and replaces spaces with dashes .
1455	NewCache creates a new Cache .
1456	KeyToPath returns the path to the given key .
1457	ensureDir creates a directory if it does not exist .
1458	Put stores the given content into the cache .
1459	Get returns a value from the cache .
1460	Delete removes the key from the cache .
1461	NewGCSArtifact creates a new GCS artifact .
1462	Size returns the size of the artifact .
1463	ReadAll reads all the data from the GCS artifact .
1464	ReadTail reads the last n bytes from the artifact .
1465	gzipped returns whether the artifact is gzipped .
1466	optionsForRepo returns the options for the given org and repo .
1467	List lists all ProwJobs in the indexer .
1468	ProwJobs returns an object that can list and get ProwJobs .
1469	List lists all ProwJobs in the indexer for a given namespace .
1470	RunsAgainstAllBranch returns true if the brancher runs against all branches .
1471	Intersects returns true if the given Brancher intersects the given Brancher .
1472	ShouldRun returns whether or not the RegexpChangeMatcher should run .
1473	RunsAgainstChanges returns true if the given changes match the RegexpChangeMatcher .
1474	CouldRun returns true if the brancher could run .
1475	ShouldRun returns whether or not the given changes should be run .
1476	CouldRun returns true if the brancher could run .
1477	ShouldRun returns true if the presubmit should run .
1478	GetPresubmit returns the presubmit for the given job
1479	SetPresubmits sets the Presubmits config
1480	SetPostsubmits sets the Postsubmits config
1481	AllPresubmits returns all presubmits
1482	AllPostsubmits returns all postsubmits
1483	AllPeriodics returns all Periodics .
1484	ClearCompiledRegexes clears all compiled regexes .
1485	Empty returns true if the config is empty .
1486	NewClient creates a new Client .
1487	ExpandAlias returns a set of aliases for the given alias .
1488	ExpandAliases expands the aliases for the given logins .
1489	ParseFullConfig parses a full config from a byte slice .
1490	ParseSimpleConfig parses a SimpleConfig from a byte slice .
1491	decodeOwnersMdConfig reads the metadata file and unmarshals it into a SimpleConfig .
1492	findOwnersForFile finds the owner of a file in the given path . If no owner is found an empty string is returned .
1493	FindApproverOwnersForFile finds all owners for a given file .
1494	FindReviewersOwnersForFile finds the owners for the given file .
1495	FindLabelsForFile returns the set of labels for the given file .
1496	IsNoParentOwners returns true if the given path has no parent owners .
1497	Ratio returns the ratio of the coverage .
1498	FromPayload unmarshals PeriodicProwJobEvent from JSON
1499	ToMessage converts PeriodicProwJobEvent to pubsub . Message
1500	UnmarshalText implements the encoding . TextUnmarshaler interface .
1501	compileApplicableBlockades takes a list of blockades and compiles them into a list of blockades .
1502	calculateBlocks takes a list of pull request changes and returns a summary .
1503	MergeMultipleProfiles merges multiple profiles into one .
1504	AddFlags adds flags related to the options to the specified FlagSet .
1505	processNextItem processes the next item in the queue
1506	handleErr is used to handle an error
1507	AggregateFilter returns a Filter that applies the given filters to the presubmit .
1508	FilterPresubmits filters a set of presubmits and runs them .
1509	MakeCommand creates a new cobra . Command .
1510	Push adds an issue event to the heap .
1511	Pop removes an element from the heap and returns it .
1512	NewFakeOpenPluginWrapper creates a new FakeOpenPluginWrapper .
1513	ReceiveIssue implements the OpenPlugin interface .
1514	Validate validates the options .
1515	Complete sets up the options .
1516	Set sets the org repo format .
1517	ensure checks if the given binary exists and if it does then returns an error .
1518	output executes a command and returns the output .
1519	projects returns a list of projects .
1520	selectProject selects a project from the GCP account .
1521	createCluster creates a new cluster
1522	createContext creates a new context .
1523	contextConfig returns a clientcmd . ClientConfigLoader and a clientcmdapi . Config .
1524	selectContext selects a context based on the given options .
1525	applyCreate creates a new rolebinding
1526	determineSkippedPresubmits determines which presubmits should be skipped .
1527	Dispatch dispatches a plugin to InfluxDB .
1528	CreateIssue creates a new issue .
1529	CreateStatus creates a repo status
1530	ForEachPR iterates over a list of PRs and munges them .
1531	GetCollaborators returns a list of collaborators for a repository .
1532	GetCombinedStatus returns the combined status for the given ref .
1533	GetIssues returns a list of issues from a repository .
1534	GetRepoLabels returns a list of labels for the given repository .
1535	GetUser returns a user by login .
1536	checkConfigValidity checks if the config is valid
1537	createSystemdLogfile creates a log file for the specified service .
1538	createFullSystemdLogfile creates the full systemd log file
1539	createSystemdLogfiles creates the log files for all systemd services .
1540	prepareLogfiles returns a list of logfiles relevant to this node
1541	writeSuccessMarkerFile writes the success marker file to GCS
1542	MakeCommand returns a cobra command for junit .
1543	warnDeprecated logs a warning if the last time is older than freq .
1544	Describe returns a human - readable description of the required label .
1545	TriggerFor returns the trigger for the given org and repo .
1546	EnabledReposForPlugin returns a list of enabled repositories for the given plugin .
1547	EnabledReposForExternalPlugin returns a list of enabled repositories for an external plugin
1548	SetDefaults sets the defaults for the updater .
1549	validatePlugins returns an error if any plugins are invalid .
1550	ShouldReport reports whether a ProwJob should be reported .
1551	Run runs a prowapi . Refs .
1552	PathForRefs returns the path for the given refs .
1553	gitCtxForRefs creates a gitCtx from a prowapi . Refs
1554	commandsForBaseRef returns a list of git commands for the base ref .
1555	gitTimestampEnvs returns a list of environment variables for the given timestamp .
1556	gitRevParse runs git rev - parse HEAD
1557	commandsForPullRefs returns a list of git commands for the given pull refs .
1558	ProduceCovList generates a CoverageList from a list of profiles .
1559	popRandom returns a random string from the set .
1560	resolve resolves the ExperimentalKubernetesOptions .
1561	ProwJobClientset returns the prow job clientset
1562	ProwJobClient returns a prowv1 . ProwJobInterface
1563	InfrastructureClusterClient returns the infrastructure client
1564	BuildClusterClients returns a map of kubernetes client to build clusters .
1565	Age returns the amount of time elapsed since the given time .
1566	ReceiveEvent is used to receive an event from the active state .
1567	ReceiveEvent returns an active state if the event matches the label .
1568	Active returns true if all states are active .
1569	Age returns the minimum age for a given time .
1570	ReceiveEvent implements the State interface .
1571	ProwJobs returns a ProwJobInformer .
1572	ItemToResourcesConfig converts an Item to a ResourcesConfig .
1573	Copy returns a copy of the TypeToResources .
1574	MakeCommand creates a new cobra . Command .
1575	incrementNumPendingJobs increments the number of pending jobs .
1576	setPreviousReportState updates the previous report state
1577	SyncMetrics is used to sync metrics for the controller .
1578	DumpProfile writes a profile to the given writer .
1579	blocksEqual returns whether two profile blocks are equal .
1580	NewProwJobInformer constructs a new informer for ProwJob type . Always prefer using an informer factory to get a shared informer instead of getting an independent one . This reduces memory footprint and number of connections to the server .
1581	NewFilteredProwJobInformer constructs a new informer for ProwJob type . Always prefer using an informer factory to get a shared informer instead of getting an independent one . This reduces memory footprint and number of connections to the server .
1582	New creates a new Spyglass .
1583	Lenses returns a slice of lenses . Lenses based on the matchCache
1584	JobPath returns the path to the job .
1585	RunPath returns the key for the given path .
1586	ExtraLinks returns a list of extra links for the given source .
1587	needDemux returns a list of plugins that need demuxing
1588	demuxExternal dispatches to external plugins .
1589	dispatch sends an HTTP POST request to the given endpoint .
1590	AddFlags adds flags for the state plugin
1591	CheckFlags implements the plugin . Plugin interface .
1592	ReceiveIssueEvent sends an issue event to the plugin .
1593	Load loads config from prowConfig and jobConfig .
1594	loadConfig takes a prowConfig and a jobConfig and returns a Config .
1595	yamlToConfig reads a YAML file and unmarshals it into the given struct .
1596	ReadFileMaybeGZIP returns the contents of a file or an error if it is not gzipped .
1597	finalizeJobConfig is used to finalize the job configuration .
1598	validateComponentConfig validates the component configuration .
1599	ConfigPath returns the path to the config file
1600	ValidateController checks if the controller is valid .
1601	defaultJobBase sets up the default job base
1602	SetPresubmitRegexes sets the regexes for the presubmit .
1603	setBrancherRegexes sets the regexes for the Brancher .
1604	SetPostsubmitRegexes sets the regexes for the postsubmit
1605	Body returns the body of the lens .
1606	NewBoskosHandler returns a new http . ServeMux .
1607	ErrorToStatus converts an error to an HTTP status code .
1608	DumpProfile dumps a profile to a file .
1609	LoadProfile loads a profile from a file or stdin if origin is - .
1610	NewClient creates a new Git client .
1611	SetCredentials sets the credentials for the client .
1612	Checkout checkouts the given commit like .
1613	CheckoutNewBranch checkouts a new branch .
1614	Merge merges the given commitlike into the repository . Returns true if the merge was successful .
1615	CheckoutPullRequest attempts to checkout a pull request .
1616	Config runs the git config command .
1617	retryCmd tries to execute a command and returns the output of the command .
1618	LabelsAndAnnotationsForSpec returns the labels and annotations for the given prow job spec .
1619	ProwJobToPod converts a prowjob to a pod .
1620	CloneLogPath returns the path to the clone log .
1621	cloneEnv creates a new set of environment variables from the given options .
1622	sshVolume returns a coreapi . Volume and coreapi . VolumeMount
1623	InjectEntrypoint injects an entrypoint into the container .
1624	PlaceEntrypoint creates a container with an entrypoint
1625	kubeEnv returns a list of environment variables
1626	Client returns a Kubernetes client based on the options .
1627	handle handles the event .
1628	SendHook sends a hook to the given address .
1629	janitorClean runs the janitor clean command .
1630	janitor is the main entry point for janitor .
1631	Run starts the pull server .
1632	specToStarted converts downwardapi . JobSpec to gcs . Started .
1633	Run runs the options .
1634	hasPRChanged returns true if the pull request has changed .
1635	UpdateIssues updates all issues in the database
1636	handleReviewEvent handles a review event .
1637	findAssociatedIssue returns the number of issues associated with the given organization .
1638	optionsForRepo returns the Approve options for the given repository .
1639	localOnlyMain is the main handler for the github - login endpoint .
1640	summarize summarizes the coverage list .
1641	Subset adds a subset of coverage to the list .
1642	ListDirectories returns a list of directories in the CoverageList .
1643	readRequest reads an admission request from r .
1644	handle handles the request and writes the response .
1645	writeResponse writes the response to the writer .
1646	onlyUpdateStatus returns an admission response if the request is a status update .
1647	convertSuiteMeta converts gcs . SuitesMeta to resultstore . Suite .
1648	NewHealth returns a new Health object .
1649	ServeReady registers the healthz ready handler .
1650	NewController creates a new Controller .
1651	newExpectedContext creates a new expected context .
1652	contextsToStrings converts a slice of contexts into a slice of strings .
1653	filterSubpools returns a slice of subpools that are filtered by the given number of goroutines .
1654	filterSubpool filters out subpool prs that are not in the subpool .
1655	poolPRMap returns a map of pull requests for each subpool in subpoolMap .
1656	unsuccessfulContexts returns a list of contexts that have failed .
1657	accumulate takes a list of presubmits and a list of presubmits and returns the successes pendings and nones .
1658	tryMerge tries to merge a PR into the Tide repo . It returns a boolean indicating whether the merge was successful .
1659	prChanges returns a config . ChangedFilesProvider that returns the changes for the given PR .
1660	prune removes all changed files from the change cache .
1661	dividePool divides a list of pull requests into a subpool .
1662	AggregateProfiles merges a set of profiles into a single profile .
1663	countToBoolean returns a copy of the profile with the count set to 1 .
1664	NewStorage creates a new storage .
1665	AddResource adds a resource to the storage .
1666	DeleteResource deletes a resource .
1667	UpdateResource updates a resource .
1668	GetResource returns the named resource .
1669	GetResources returns all the resources in the storage .
1670	SyncResources is used to sync a set of resources
1671	ParseConfig parses a Boskos config file into a list of resources .
1672	problemsInFiles returns a map of problems in the given files .
1673	NewPodLogArtifact creates a new PodLogArtifact .
1674	CanonicalLink returns the canonical URL of the artifact .
1675	ReadAt implements the io . ReaderAt interface .
1676	ReadAll returns the contents of the pod log file .
1677	ReadAtMost reads n bytes from the pod log artifact
1678	ReadTail reads the tail of the pod log artifact
1679	newProblems takes a list of review comments and parses them into a map of lint . Problem .
1680	problemsInFiles returns a map of problems in the given files .
1681	undoPreset undoes a preset .
1682	undoPresubmitPresets undos a set of presubmit presets .
1683	yamlBytesStripNulls strips any null values from yamlBytes .
1684	monitorDiskAndEvict monitors the disk cache and evicts any entries that are older than minPercentBlocksFree .
1685	difference returns a new orgRepoConfig with the difference of c and c2 .
1686	union returns the union of c and c2 .
1687	clearStaleComments removes stale comments for a pull request .
1688	determineReleaseNoteLabel returns the release note label for the given body .
1689	getReleaseNote returns the release note
1690	NewClient creates a new client
1691	Acquire acquires a resource
1692	ReleaseOne releases a single resource
1693	UpdateAll updates the state of all services .
1694	GetGitHubClient returns a new GitHub client .
1695	GetUsername returns the username of the user .
1696	CreateTokenHandler creates a TokenHandler from a token stream .
1697	CreateTokenHandlers creates a TokenHandler from a list of token files .
1698	String returns a string representation of the job indentifier .
1699	TerminateOlderPresubmitJobs kills old presubmit jobs .
1700	PushMetrics is a long running goroutine that will push metrics to the given endpoint .
1701	RateLimiter returns a rate limiter for the given controller name .
1702	checkExistingStatus checks the status of a pull request
1703	checkExistingLabels checks if there are any existing labels for an issue .
1704	handle handles a pull request .
1705	MarkdownSHAList returns a Markdown representation of a list of git commits .
1706	PathForSpec returns the path for the given job spec .
1707	AliasForSpec returns the alias for the given job spec .
1708	RootForSpec returns the root path for the given job spec .
1709	NewSingleDefaultRepoPathBuilder returns a RepoPathBuilder that uses the given default org and repo .
1710	NewExplicitRepoPathBuilder returns a RepoPathBuilder .
1711	RegisterSourceOrDie registers a IssueSource with the given name . If the name is already registered an error is returned .
1712	CreateAndSync creates and syncs issues from all sources .
1713	loadCache loads the issue creator cache
1714	setIntersect takes a and b and returns a filtered and removed elements .
1715	sync returns true if the issue was created and false if the issue was aborted .
1716	GetAWSCreds returns the AWS credentials for the given resource .
1717	stopper returns a channel that will be closed when the process exits .
1718	newPipelineConfig creates a new pipelineConfig .
1719	KubeClient returns a Kubernetes client
1720	ProwJobClient returns the ProwJobClient
1721	resolveSymLink attempts to resolve a symbolic link .
1722	readJSON reads a JSON object from storage .
1723	listSubDirs lists all sub - directories under a given prefix .
1724	listAll returns a list of all objects with the given prefix .
1725	listBuildIDs lists all build IDs in GCS .
1726	FilterProfilePaths filters profile by file name .
1727	LoadSecrets loads a list of secrets from disk .
1728	LoadSingleSecret loads a single secret from a file .
1729	Set implements the flag . Value interface .
1730	NewOpener creates a new GCP opener .
1731	IsNotExist returns true if the error is an os . ErrObjectNotExist .
1732	LogClose closes the given io . Closer .
1733	Writer returns an io . WriteCloser that writes to the given path .
1734	InitGitHubOAuthConfig initializes GitHubOAuthConfig
1735	deltaDisplayed returns a human - readable representation of the coverage change .
1736	makeTable generates a table from base and new coverage lists .
1737	ContentForGitHubPost returns the content for a GitHub post .
1738	AddFlags adds flags to the client
1739	CheckFlags checks if the client has valid flags .
1740	getGithubHubClient returns the github client
1741	limitsCheckAndWait checks the rate limits and waits for it to reach the token limit
1742	FetchIssues fetches all issues updated since the given time .
1743	hasID checks if an issue event has the given ID .
1744	FetchIssueEvents fetches issue events from GitHub .
1745	isPRChanged returns true if the pull request has changed .
1746	NewFetcher creates a new Fetcher .
1747	fetchRecentIssues fetches all issues updated after the last issue .
1748	fetchRecentEventsAndComments fetches the recent events and comments from the database .
1749	Fetch is part of the Fetcher interface .
1750	Issues returns a slice of issues for a flaky job .
1751	Title returns a human - readable description of the job .
1752	Labels returns a list of labels for this job .
1753	ReadHTTP reads the HTTP response from the given URL .
1754	String returns a string representation of the linesByTimestamp .
1755	NewJobSpec creates a new JobSpec from a ProwJobSpec .
1756	ResolveSpecFromEnv resolves the JobSpec from the environment variables .
1757	EnvForSpec returns the environment variables for the given job spec .
1758	EnvForType returns a list of environment variables for the given job type .
1759	getRevisionFromRef returns the SHA of the first pull or base ref .
1760	GetRevisionFromSpec returns the revision of the job .
1761	helpProvider returns the help for the merge commit blocker plugin .
1762	load loads a group from an io . Reader .
1763	loadPaths loads paths from r .
1764	Match returns true if the group matches the given path .
1765	CreateDatabase creates a new InfluxDB .
1766	mergeTags merges defaultTags and extraTags into a new map .
1767	tagsToWhere converts a map of tags to a WHERE clause .
1768	Push adds a point to the InfluxDB batch .
1769	artifact returns an artifact for the given job .
1770	serve is used to serve metrics .
1771	gather starts a goroutine to gather metrics from the controller .
1772	makeRequest creates a BranchProtectionRequest from a branch protection policy .
1773	makeReviews creates a required_pull_request_reviews struct from a review policy .
1774	Header returns the header for the given Lens .
1775	Callback is the callback function for the Lens API .
1776	logLinesAll returns a slice of log lines for the given artifact .
1777	executeTemplate executes a template
1778	DeepCopyObject returns a deep copy of the receiver .
1779	FromItem converts a common . Item into a ResourceObject
1780	SetItems sets a collection of ResourceObjects .
1781	DeepCopyObject is an autogenerated deepcopy function copying the receiver creating a new runtime . Object .
1782	useContext runs the use - context command .
1783	currentContext returns the current context
1784	command creates a command with the given arguments .
1785	describeCluster returns a description of a cluster .
1786	Set appends a string to the slice .
1787	parseXML parses an xml object into a gcsDir .
1788	Render renders the directory .
1789	Render renders the record to the response .
1790	Render writes the prefix to the response .
1791	Printf writes a log message to the standard logger .
1792	NewClient creates a new Gerrit client .
1793	SetReview implements gerrit . ChangeService . SetReview
1794	GetBranchRevision returns the revision of a branch .
1795	queryAllChanges queries all changes for all projects .
1796	NewTypeFilterWrapperPlugin creates a new TypeFilterWrapperPlugin
1797	AddFlags adds flags related to TypeFilterWrapperPlugin
1798	CheckFlags returns an error if both pull - requests and issues are set .
1799	AddFlags adds flags related to KubernetesClient to the specified FlagSet .
1800	Validate validates the KubernetesClientOptions .
1801	Client returns a Kubernetes client for the given type .
1802	newCRDClient creates a new CRD client
1803	createRESTConfig creates a REST config based on the given kubeconfig and type .
1804	registerResource registers a new CRD for the given type .
1805	newDummyClient creates a new dummyClient .
1806	Update updates an object .
1807	TrustedPullRequest checks if a pull request is trusted .
1808	buildAll runs all jobs in a pull request .
1809	Run runs the options .
1810	AddConfig adds a config to the storage .
1811	DeleteConfig deletes a configuration .
1812	UpdateConfig updates the resources config .
1813	GetConfig returns the resources config with the given name .
1814	GetConfigs returns all the configs in the storage .
1815	SyncConfigs updates the configs in the storage .
1816	addKnownTypes adds known types to the scheme .
1817	NewController creates a new Controller .
1818	Run runs the status - reconciler .
1819	addedBlockingPresubmits adds new blocking presubmits to old .
1820	removedBlockingPresubmits removes blocking presubmits from old and new .
1821	migratedBlockingPresubmits returns a map from repository name to presubmits .
1822	Load loads the configuration from the command line .
1823	canExecuteConcurrently checks if a job can be executed concurrently .
1824	getJenkinsJobs converts a list of prowapi . ProwJob to a list of BuildQueryParams .
1825	terminateDupes takes a list of prowapi . ProwJobs and returns an error if any .
1826	Throttle is used to throttle requests to the specified number of times .
1827	NewClientWithFields creates a new Client with the given fields .
1828	NewClient creates a new Client .
1829	NewDryRunClient creates a new DryRunClient .
1830	NewFakeClient creates a new fake client .
1831	request sends a request to the server and unmarshals the response into ret .
1832	requestRaw performs a raw HTTP request and returns the response code and body .
1833	getUserData gets the bot name and email
1834	readPaginatedResultsWithValues reads a paginated object from the given path using the given values .
1835	UpdatePullRequest updates a pull request .
1836	getLabels returns a list of labels from the given path .
1837	stateCannotBeChangedOrOriginalError returns the original error if the error is a StateCannotBeChanged error .
1838	IsMergeable checks if a pull request is mergeable .
1839	Token is part of the TokenSource interface .
1840	ListArtifacts returns a list of artifacts
1841	KeyToJob converts a key to a job name and build ID .
1842	prowToGCS converts a prow key to a GCS path .
1843	FetchArtifacts fetches artifacts from the Spyglass API .
1844	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new DecorationConfig .
1845	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new GCSConfiguration .
1846	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new JenkinsSpec .
1847	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new ProwJob .
1848	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new ProwJobList .
1849	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new ProwJobSpec .
1850	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new ProwJobStatus .
1851	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new Pull .
1852	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new Refs .
1853	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new UtilityImages .
1854	upload uploads an invocation to a target .
1855	ApplyDefault returns a new DecorationConfig with the default values .
1856	Validate checks that the DecorationConfig is valid .
1857	ApplyDefault returns a copy of u with the default values .
1858	ApplyDefault returns a copy of the GCSConfiguration with the default values .
1859	Validate validates GCS configuration .
1860	ClusterAlias returns the alias of the cluster
1861	NewResource creates a new Resource .
1862	NewResourcesFromConfig creates a list of resources from a ResourceEntry .
1863	UserDataFromMap creates a UserData from a UserDataMap
1864	Set sets the resTypes flag .
1865	UnmarshalJSON unmarshals UserData from JSON .
1866	Extract implements the UserData interface .
1867	Set implements the UserData interface .
1868	Update updates the user data .
1869	ToMap converts a UserData to a UserDataMap .
1870	FromMap populates a UserData from a UserDataMap .
1871	ItemToResource converts an Item to a Resource .
1872	Run runs the git clone command .
1873	addSSHKeys adds ssh keys at the given paths .
1874	Issues returns a list of issues from the TriageFiler .
1875	loadClusters loads a list of clusters from the TriageFiler
1876	parseTriageData parses triage data from json .
1877	topClusters returns the top count clusters .
1878	topJobsFailed returns the top count jobs that have failed .
1879	Title returns a human - readable description of the cluster .
1880	Labels returns a list of labels for the cluster .
1881	New returns a new Cron instance
1882	QueuedJobs returns a list of queued jobs .
1883	HasJob returns whether the Cron has a job with the given name .
1884	addJob adds a new job to the cron agent .
1885	removeJob removes a job from the cron agent .
1886	UpdateComments updates the comments for an issue .
1887	GatherProwJobMetrics collects metrics for prow jobs
1888	optionOrDefault returns the given option or the defaultValue if the option is zero .
1889	newGCSJobSource creates a new gcs job source .
1890	artifacts returns a list of artifacts for the given key .
1891	canonicalLink returns the canonical link for the job source .
1892	jobPath returns the path to the job .
1893	targetURL returns the target URL for the pull request .
1894	newBuildConfig creates a new buildConfig .
1895	NewClient creates a new Github client .
1896	retry is used to retry a call .
1897	depaginate calls the given function and returns the results .
1898	NewHelpAgent creates a new help agent .
1899	GeneratePluginHelp generates plugin help .
1900	getPullCommitHash returns the hash of the pull commit .
1901	listJobBuilds returns a list of builds for each of the given jobPrefixes .
1902	getPRBuildData returns a slice of build data for the given list of jobs .
1903	getGCSDirsForPR returns the GCS directories for the given PR .
1904	imageDeleteFromDisk deletes the image file from disk
1905	doNetworksCreate creates a new network .
1906	networkLoadByName loads a network by name .
1907	Transaction executes the given function in a transaction .
1908	ForLocalInspectionWithPreparedStmts creates a new cluster with prepared statements .
1909	SetDefaultTimeout sets the default timeout for the cluster
1910	Transaction calls the given function for each transaction in the cluster .
1911	EnterExclusive acquires an exclusive lock on the cluster db .
1912	ExitExclusive is part of the Cluster interface .
1913	Close closes the cluster .
1914	TxCommit commits the transaction .
1915	ParseRemote parses a remote from a string .
1916	GetContainerServer returns a container server
1917	GetImageServer returns a lxd . ImageServer
1918	initAppArmor initializes AppArmor support .
1919	appArmorCanStack returns true if apparmor can stack
1920	containerDeviceAdd adds a device to a container .
1921	profileDeviceAdd adds a device to the profile .
1922	ensureImageAliases creates the image aliases for the given fingerprint .
1923	GetExistingAliases returns a list of existing image aliases
1924	String returns the string representation of the StatusCode .
1925	ImagesGetExpired returns a list of images that have expired .
1926	ImageSourceInsert inserts an image source into the cluster .
1927	ImageSourceGet returns the ImageSource with the given ID .
1928	ImageExists returns true if the image with the given fingerprint exists .
1929	ImageGet returns a single image from a project .
1930	ImageGetFromAnyProject retrieves an image from any project
1931	imageFill fills an image .
1932	ImageLocate returns the local image address for the given fingerprint .
1933	ImageAssociateNode associates a node with an image .
1934	ImageDelete deletes an image from the cluster .
1935	ImageAliasesGet returns the image aliases for the given project .
1936	ImageAliasGet returns the id of an image alias .
1937	ImageAliasRename renames an image alias .
1938	ImageAliasDelete removes an image alias from the cluster .
1939	ImageAliasesMove moves image aliases from source to destination .
1940	ImageAliasAdd adds an image alias to the cluster .
1941	ImageAliasUpdate updates an image alias .
1942	ImageLastAccessUpdate updates the last access date of an image .
1943	ImageLastAccessInit sets cached = 1 and last_use_date = now
1944	ImageUpdate updates an image .
1945	ImageInsert inserts a new image into the cluster .
1946	ImageGetPools returns a list of storage pools for an image fingerprint .
1947	ImageGetPoolNamesFromIDs returns a list of pool names from a list of pool IDs .
1948	ImageUploadedAt updates the upload_date field of an image .
1949	ImagesGetOnCurrentNode returns all images on the current node
1950	ImagesGetByNodeID returns a map of image fingerprint and project names for the given node ID .
1951	ImageGetNodesWithImage returns all nodes with the given image fingerprint .
1952	ImageGetNodesWithoutImage returns a list of nodes with the given image fingerprint .
1953	Add adds a new task to the group .
1954	Start starts the group .
1955	zfsIsEnabled returns true if zfs is enabled
1956	zfsToolVersionGet returns the version of zfs tool .
1957	zfsModuleVersionGet returns the ZFS module version .
1958	zfsPoolVolumeCreate creates a new zfs pool volume .
1959	zfsPoolVolumeExists checks if a zfs pool volume exists .
1960	NetworkIDsNotPending is part of the Cluster interface .
1961	NetworkConfigAdd is part of the Cluster interface .
1962	NetworkNodeJoin is part of the Cluster interface .
1963	NetworkCreatePending is part of the Cluster interface .
1964	NetworkCreated is part of the Cluster interface .
1965	NetworkErrored is part of the Cluster interface .
1966	NetworkGet returns a network by name .
1967	networkNodes returns the names of all nodes in a network .
1968	NetworkGetInterface returns the network for the given interface .
1969	NetworkConfigGet returns the network configuration
1970	NetworkCreate creates a new network in the cluster .
1971	NetworkUpdate updates the description of a network .
1972	NetworkUpdateDescription updates the description of a network .
1973	NetworkConfigClear removes the network configuration from the database .
1974	NetworkDelete deletes a network from the cluster
1975	NetworkRename renames a network .
1976	GetContainers returns a list of containers
1977	GetContainersFull returns a list of all containers .
1978	GetContainer returns a container by name .
1979	CreateContainerFromBackup creates a container from a backup file .
1980	CreateContainer creates a new container .
1981	CreateContainerFromImage creates a container from an image .
1982	UpdateContainer updates an existing container .
1983	RenameContainer renames a container .
1984	ExecContainer executes a container .
1985	GetContainerFile returns the contents of a file in a container .
1986	CreateContainerFile creates a new file in a container .
1987	DeleteContainerFile deletes a file from a container
1988	GetContainerSnapshotNames returns the names of the snapshots for a container .
1989	GetContainerSnapshots returns a list of snapshots for a container
1990	GetContainerSnapshot returns a snapshot of a container .
1991	CreateContainerSnapshot creates a snapshot of a container .
1992	MigrateContainerSnapshot migrates a snapshot of a container .
1993	UpdateContainerSnapshot updates a container snapshot .
1994	GetContainerState returns the state of a container .
1995	UpdateContainerState updates the state of a container
1996	GetContainerLogfiles returns a list of logfiles for a container
1997	GetContainerLogfile returns the log file for a container .
1998	GetContainerMetadata returns the image metadata for a container .
1999	SetContainerMetadata sets the metadata for a container .
2000	GetContainerTemplateFiles returns the template files for a container .
2001	CreateContainerTemplateFile creates a new container template file
2002	DeleteContainerTemplateFile deletes a container template file
2003	ConsoleContainer creates a new console container .
2004	GetContainerConsoleLog returns the console log for a container .
2005	DeleteContainerConsoleLog deletes the console log for a container .
2006	GetContainerBackups returns the list of backups for a container
2007	GetContainerBackup returns a container backup
2008	CreateContainerBackup creates a container backup .
2009	RenameContainerBackup renames a container backup
2010	DeleteContainerBackup deletes a container backup .
2011	GetContainerBackupFile returns a backup file for a container .
2012	RsyncSend sends a rsync command to the given path .
2013	patchesGetNames returns the names of all patches .
2014	patchRenameCustomVolumeLVs changes the lvm volume name to the new name .
2015	patchLvmNodeSpecificConfigKeys is used to patch the lvm node specific config keys .
2016	GetHTTPClient returns the HTTP client
2017	do sends a request to the LXD server .
2018	RawQuery performs a raw query against the LXD API .
2019	RawWebsocket returns a websocket connection for the given path .
2020	RawOperation is a convenience wrapper around QueryOperation .
2021	ProfileToAPI converts a profile to an api . Profile .
2022	Profiles returns a list of profiles for the given project .
2023	ProfileGet returns a single profile by name .
2024	ProfilesGet returns a list of profiles for a given project .
2025	ProfileConfig returns the profile configuration for the given project and name .
2026	ProfileConfigClear deletes all profiles_config and profiles_devices_config .
2027	ProfileConfigAdd adds a new profile config to the database .
2028	ProfileContainersGet returns the containers for the specified profile .
2029	ProfileCleanupLeftover removes all profiles from the cluster .
2030	ProfilesExpandConfig expands the config from a list of profiles .
2031	ProfilesExpandDevices expands devices from a list of profiles .
2032	GetServer returns the current LXD server .
2033	UpdateServer updates an existing server .
2034	HasExtension returns true if the LXD server has the specified extension .
2035	GetServerResources returns the resources for the LXD server
2036	UseProject returns a container server that uses the specified project .
2037	sqliteOpen opens a sqlite database at the given path .
2038	Rebalance is used to rebalance a cluster .
2039	Promote promotes a node to a database node .
2040	Purge removes a node from the database .
2041	List returns a list of cluster members .
2042	Count returns the number of nodes in the cluster .
2043	Enabled returns true if the node is enabled .
2044	membershipCheckNodeStateForBootstrapOrJoin checks if the node is in a bootstrap or join state .
2045	membershipCheckClusterStateForBootstrapOrJoin checks that the cluster state is consistent .
2046	membershipCheckClusterStateForAccept returns an error if the cluster state is not valid .
2047	membershipCheckClusterStateForLeave checks if the given node is in the cluster .
2048	membershipCheckNoLeftoverClusterCert checks if there is no leftover cluster certificate .
2049	ConfigLoad loads the node config from the database .
2050	Replace updates the configuration with the given values .
2051	Patch updates the configuration with the given values .
2052	HTTPSAddress returns the HTTPS address of the node .
2053	CertificatesGet returns all the certificates in the cluster .
2054	CertificateGet returns the certificate with the given fingerprint
2055	CertSave saves a certificate in the cluster .
2056	CertDelete removes a certificate from the cluster .
2057	CertUpdate updates a certificate in the cluster .
2058	createDevLxdlListener creates a new devlxd listener .
2059	Servers is part of the Instance interface .
2060	Shutdown shuts down the raft instance .
2061	raftNetworkTransport returns a new raft . Transport and a raft . Handler and a raft . Layer .
2062	raftConfig returns a raft . Config with the given latency .
2063	raftMaybeBootstrap is used to bootstrap a raft cluster .
2064	CPUResource returns the current CPU resource .
2065	MemoryResource returns the memory usage of the process .
2066	GetOperationUUIDs returns a list of operation UUIDs
2067	GetOperations returns a list of operations
2068	GetOperation returns an operation by UUID .
2069	GetOperationWebsocket returns a websocket connection to an operation .
2070	tryMount tries to mount src to dst using syscall . Mount .
2071	lxdUsesPool returns whether or not the given on - disk pool is used .
2072	ProjectURIs returns the URIs of all projects that match the provided filter .
2073	ProjectList returns a list of projects that match the provided filter .
2074	ProjectGet returns the Project with the given name .
2075	ProjectExists is part of the Cluster interface .
2076	ProjectCreate creates a new project .
2077	ProjectUsedByRef returns the set of objects used by the given ref .
2078	ProjectRename renames a project .
2079	ProjectDelete deletes a project from the cluster .
2080	PasswordCheck checks if the provided password is valid .
2081	LoadCert loads a TLS certificate from a directory .
2082	WriteCert writes a certificate and key to the given directory .
2083	NewDaemon creates a new daemon .
2084	DefaultDaemon creates a default daemon .
2085	AllowProjectPermission allows the user to perform a specific permission on a project .
2086	checkTrustedClient checks if the client is trusted
2087	Authenticate checks if the request is valid .
2088	State returns a copy of the daemon s state .
2089	UnixSocket returns the path to the unix socket .
2090	Stop stops the daemon .
2091	setupExternalAuthentication sets up external authentication
2092	initializeDbObject initializes the database object .
2093	WriteJSON writes a JSON body to w .
2094	EtagHash returns the hash of the given data .
2095	EtagCheck returns an error if the ETag is not match .
2096	HTTPClient returns a new http . Client with the given certificate and proxy .
2097	IsRecursionRequest checks if the request is a recursion request .
2098	GetListeners returns a list of listeners starting at start .
2099	internalSQLGet returns the SQL dump for the given database .
2100	internalSQLPost executes an internal SQL query .
2101	PublicKey returns the public key of the certificate .
2102	PrivateKey returns the private key of the certificate .
2103	Fingerprint returns the fingerprint of the certificate .
2104	GenCert generates a new certificate and key file .
2105	PrintServerInfo prints information about a container server .
2106	LaunchContainers launches a batch of containers .
2107	CreateContainers creates a batch of containers .
2108	GetContainers returns all the containers in the container server
2109	StartContainers starts a batch of containers .
2110	setQueryParam sets a query parameter on the given URI .
2111	GetImages returns a list of LXD images .
2112	GetImageFile returns the image file for the given fingerprint .
2113	GetImageSecret returns the secret for an image
2114	GetPrivateImage returns a private image
2115	GetPrivateImageFile downloads a private image file .
2116	GetImageAliases returns a list of image aliases .
2117	tryCopyImage attempts to copy an image from the source server .
2118	CopyImage copies an image from the source to the target .
2119	UpdateImage updates an image .
2120	DeleteImage deletes an image .
2121	RefreshImage refreshes an image .
2122	CreateImageAlias creates an image alias
2123	UpdateImageAlias updates an image alias .
2124	RenameImageAlias renames an image alias .
2125	DeleteImageAlias deletes an image alias .
2126	Open opens the local database in the given directory .
2127	EnsureSchema ensures the local database schema exists in the given directory .
2128	FilesystemDetect returns the filesystem type for the given path .
2129	Schema returns a new schema . Schema .
2130	updateFromV37 updates cluster . https_address .
2131	ArchitectureGetLocal returns the architecture of the local machine .
2132	NewController creates a new MAAS controller .
2133	CreateContainer creates a new container
2134	DefinedContainer returns true if the container is defined .
2135	UpdateContainer updates a container
2136	RenameContainer renames a container
2137	DeleteContainer deletes a container
2138	Add adds an update to the schema .
2139	ensureSchemaTableExists ensures that the schema table exists .
2140	queryCurrentVersion is used to query the current version of the cluster .
2141	ensureUpdatesAreApplied ensures that the provided updates are applied .
2142	checkSchemaVersionsHaveNoHoles returns an error if the schema versions have no holes .
2143	checkAllUpdatesAreApplied checks that all the given updates are applied .
2144	formatSQL returns a string representation of the SQL statement .
2145	GetAllXattr returns a map of extended attribute names to their values .
2146	GetErrno returns the errno and whether or not the error is a syscall . Errno .
2147	Uname returns the current user s name .
2148	RegisterStmt registers a new statement .
2149	PrepareStmts returns a map of prepared statements .
2150	NewGateway creates a new DQLite gateway .
2151	DialFunc returns a DialFunc that can be used to dial the gateway .
2152	Shutdown shuts down the database gateway .
2153	Sync syncs the database to disk .
2154	Reset resets the gateway .
2155	LeaderAddress returns the leader address of the Raft node .
2156	waitLeadership returns an error if the raft node did not self - select .
2157	currentRaftNodes returns the current raft nodes .
2158	cachedRaftNodes fetches the raft nodes from the database .
2159	dqliteMemoryDial returns a DialFunc that connects to the given listener .
2160	DqliteLog logs a message based on the log level .
2161	MetadataAsMap returns the response metadata as a map .
2162	MetadataAsOperation returns the operation metadata as a struct .
2163	MetadataAsStringSlice returns the response metadata as a slice .
2164	MetadataAsStruct unmarshals the response metadata as a struct
2165	Load loads a CSV report from a file .
2166	Write writes the report to a file .
2167	AddRecord adds a new record to the report .
2168	LoadConfig loads the configuration from a file .
2169	SaveConfig saves the configuration to the given path .
2170	Get returns the contents of the file at the given path .
2171	ConfigPath returns the path to the configuration file .
2172	ServerCertPath returns the path to the certificate file for the given remote .
2173	NewConfig creates a new Config .
2174	checkForPreDumpSupport checks if pre - dump support is enabled .
2175	preDumpLoop is the main entry point for the pre - dump loop .
2176	newRoot returns a new cobra command for lxd - generate .
2177	APIExtensionsCount returns the number of API extensions
2178	SelectURIs runs a function f on each URI in the result set .
2179	SelectStrings is a convenience wrapper around sql . SelectStrings .
2180	scanSingleColumn scans a single column .
2181	LazyHandler returns a handler that evaluates lazy records .
2182	Calls returns a slice of runtime . Callers .
2183	name returns the name of the function .
2184	TrimBelow trims the trace up to and including pc .
2185	TrimAbove trims the trace up to and including pc .
2186	TrimBelowName removes all traces below the given name .
2187	TrimAboveName removes all traces above the given name .
2188	TrimRuntime trims runtime trace .
2189	GetCaps returns the security . capability value for the given path .
2190	SetCaps sets the capabilities of a namespace .
2191	Read implements the io . Reader interface .
2192	Supported returns whether quota is supported for the given path .
2193	GetProject returns the project id for the given path .
2194	SetProject sets the quota path to the given id .
2195	DeleteProject deletes a project .
2196	GetProjectUsage returns the consumption of a project .
2197	SetProjectQuota sets the quota for a project .
2198	backupLoadByName loads a backup from the database .
2199	backupCreate creates a new backup .
2200	Rename renames the backup .
2201	Delete deletes the backup .
2202	backupFixStoragePool is used to fix the storage pool
2203	Count returns the number of rows in a table .
2204	CountAll returns the number of rows in all tables .
2205	InitTLSConfig initializes the TLS configuration .
2206	copyContainerThinpool copies the contents of the source container to the target container .
2207	copyContainerLv copies a container from source to target .
2208	copyContainer copies a container from source to target .
2209	copyVolume copies the volume from source to target pool .
2210	GetPrivateImage is not supported by the simplestreams protocol
2211	GetPrivateImageFile is not supported by simplestreams protocol
2212	GetImageAliasNames returns a list of image aliases
2213	ProtoRecv reads a single message from a websocket . Conn .
2214	ProtoSend sends a message to the given websocket connection .
2215	ProtoSendControl sends a migration control message .
2216	Read reads from stdinMirror .
2217	doContainersGetFromNode returns a list of containers from a node .
2218	Retry tries to execute the given function . If the function returns an error it will retry .
2219	IsRetriableError returns true if the given error is a retryable error .
2220	AppArmorProfile returns the current armor profile
2221	StoragePoolVolumeCreate creates a new BTRFS storage volume .
2222	ContainerStorageReady returns true if the container is ready for storage .
2223	ContainerCreateFromImage creates a BTRFS container from an image .
2224	ContainerSnapshotRename renames the storage volume for a snapshot container .
2225	ContainerSnapshotCreateEmpty creates an empty BTRFS volume for a container snapshot .
2226	btrfsSubVolumesDelete deletes a subvolume
2227	isBtrfsSubVolume returns true if subvolPath is a btrfs subvolume
2228	SelectConfig is a convenience wrapper around sql . Tx . SelectConfig .
2229	UpdateConfig updates the values of a config table .
2230	deleteConfig deletes a config from a table .
2231	FormatSection formats a section of content .
2232	GetProjects returns a list of all projects
2233	GetProject returns a single project by name .
2234	CreateProject creates a new project .
2235	UpdateProject updates a project .
2236	RenameProject renames a project .
2237	Read implements the io . Reader interface .
2238	Write implements the io . Writer interface .
2239	NewCanceler creates a new Canceler .
2240	Cancelable returns whether the Canceler can be cancelled .
2241	Cancel cancels the Canceler .
2242	CancelableDownload can be used to cancel a download .
2243	clusterGet returns information about a cluster .
2244	clusterGetMemberConfig returns the cluster member configuration for all storage pools and networks .
2245	clusterPutDisable is used to disable the daemon .
2246	tryClusterRebalance attempts to rebalance the cluster .
2247	internalClusterPostRebalance is used to rebalance a cluster .
2248	internalClusterPostPromote promotes the daemon to the specified nodes .
2249	Filters returns a list of filters for the given entity .
2250	Parse parses a struct declaration .
2251	findStruct looks up a struct type by name . Returns nil if not found .
2252	parseStruct parses a struct .
2253	GetProfileNames returns a list of profile names
2254	GetProfiles returns a list of profiles
2255	GetProfile returns a single profile by name .
2256	CreateProfile creates a new profile .
2257	UpdateProfile updates an existing profile .
2258	RenameProfile renames a profile .
2259	Load loads a map from the given values .
2260	Dump returns the contents of the map as a map .
2261	GetRaw returns the raw value of a key .
2262	GetString returns the string value of a key .
2263	GetBool returns the boolean value of a key .
2264	GetInt64 returns the value of a key as int64 .
2265	update updates the map with the given values .
2266	set sets the value of a key .
2267	DoesSchemaTableExist returns true if the schema table exists .
2268	selectSchemaVersions selects all schema versions .
2269	selectTablesSQL returns the SQL statements for all tables in the database .
2270	createSchemaTable creates the schema table .
2271	insertSchemaVersion inserts a new schema version into the database .
2272	NewState creates a new State .
2273	containerLXCUnload unloads a containerLXC .
2274	containerLXCInstantiate creates a new containerLXC .
2275	initStorage initializes the storage pool for the container .
2276	OnNetworkUp implements the LXD interface for containerLXC .
2277	setupHostVethDevice sets up the host side veth device
2278	getLxcState returns the LXC state of the container .
2279	StorageStartSensitive is used to start the container s storage .
2280	deviceExistsInDevicesFolder checks if a device exists in the devices folder
2281	createDiskDevice creates a new disk device
2282	setNetworkRoutes sets the network routes for the given device
2283	Path returns the path to the container .
2284	maasInterfaces returns the maas interfaces for the container .
2285	getSystemHandler returns a handler for syslog .
2286	findNvidiaMinor returns the minor number of the Nvidia device
2287	GetLogger returns a new logger .
2288	SetLogger sets the logger .
2289	WaitRecord waits for a record from the given channel and returns it . If the channel is closed it returns nil .
2290	AddContext adds a context to a logger .
2291	NewDottedVersion creates a new DottedVersion from a string .
2292	Parse parses a version string into a DottedVersion .
2293	String returns a string representation of the version .
2294	Compare compares two dotted versions .
2295	projectCreateDefaultProfile creates a default profile for the given project .
2296	projectChange changes a project .
2297	projectIsEmpty returns true if the project is empty .
2298	GetCertificateFingerprints returns a list of certificate fingerprints
2299	GetCertificates returns a list of certificates
2300	GetCertificate returns the certificate for the given fingerprint .
2301	CreateCertificate creates a new LXD certificate .
2302	UpdateCertificate updates an existing certificate .
2303	DeleteCertificate deletes a certificate .
2304	containerMetadataTemplatesGet returns a list of templates for a container .
2305	containerMetadataTemplatesPostPut creates a template for a container .
2306	containerMetadataTemplatesDelete deletes the metadata templates for a container .
2307	getContainerTemplatePath returns the path to the template file in the container .
2308	Error returns a string representation of the error .
2309	Error implements the error interface for ErrorList .
2310	add adds an error to the ErrorList .
2311	UpdateSchema updates the database schema .
2312	doProfileUpdateCluster updates a profile in the cluster .
2313	doProfileUpdateContainer updates the profile of a container .
2314	getProfileContainersInfo returns information about the containers with the specified profile .
2315	GetNetworkNames returns a list of network names
2316	GetNetworks returns a list of networks
2317	GetNetwork returns a network by name .
2318	GetNetworkLeases returns a list of network leases
2319	GetNetworkState returns the network state
2320	CreateNetwork creates a new network .
2321	UpdateNetwork updates an existing network .
2322	RenameNetwork renames a network .
2323	Open opens a new cluster database .
2324	URLEncode encodes a URL path with query parameters .
2325	IsUnixSocket returns true if the file is a unix socket .
2326	HostPath returns the host path
2327	FileMove moves a file .
2328	DirCopy copies a directory from source to dest .
2329	StringMapHasStringKey returns true if a string map has at least one key .
2330	TextEditor is used to edit a text file .
2331	WriteTempFile writes content to a temporary file .
2332	RenderTemplate renders a pongo template
2333	Every returns a Schedule that runs every interval .
2334	StoragePoolMount is used to mount the storage pool
2335	Dump dumps the given schema to a string .
2336	dumpTable dumps a table into a string .
2337	ProjectHasProfiles is part of the Cluster interface .
2338	ProjectNames is part of the Cluster interface .
2339	ProjectMap is part of the Cluster interface .
2340	ProjectHasImages returns whether or not a project has images enabled .
2341	ProjectUpdate updates an existing project .
2342	GetCluster returns the current cluster .
2343	UpdateCluster updates a cluster
2344	GetClusterMemberNames returns a list of cluster member names
2345	GetClusterMembers returns a list of cluster members
2346	GetClusterMember returns a cluster member by name .
2347	RenameClusterMember renames a cluster member .
2348	Disconnect removes the listener from the list .
2349	CompareVersions compares two versions .
2350	HasClientCertificate returns true if the client . crt and client . key files exist .
2351	GenerateClientCertificate generates a client certificate if it does not already exist .
2352	LoadModule loads a module .
2353	Parse parses a Go package .
2354	PprofAddress returns the address of the pprof listener .
2355	PprofUpdateAddress is used to update the pprof address .
2356	NewMethod creates a new Method .
2357	Generate generates the method .
2358	fillSliceReferenceField is used to fill a slice reference field .
2359	StoragePoolID is part of the Cluster interface .
2360	StoragePoolIDsNotPending is part of the Cluster interface .
2361	StoragePoolNodeJoin is part of the Cluster interface .
2362	StoragePoolNodeJoinCeph is part of the Cluster interface .
2363	StoragePoolConfigAdd is part of the Cluster interface .
2364	StoragePoolCreatePending is part of the Cluster interface .
2365	StoragePoolCreated is part of the Cluster interface .
2366	StoragePoolErrored is part of the Cluster interface .
2367	StoragePoolNodeConfigs returns the storage pool configuration for each node in the cluster .
2368	StoragePoolsGetDrivers returns a list of all available storage drivers .
2369	StoragePoolGetID returns the ID of a storage pool .
2370	StoragePoolGet returns information about a storage pool .
2371	storagePoolNodes returns the names of all nodes in a storage pool .
2372	StoragePoolConfigGet returns the configuration for a storage pool .
2373	StoragePoolCreate creates a new storage pool .
2374	storagePoolConfigAdd adds a new storage pool config to the database .
2375	StoragePoolUpdate updates the description of a storage pool .
2376	StoragePoolConfigClear clears the storage pool configuration .
2377	StoragePoolDelete deletes a storage pool
2378	StoragePoolVolumesGetNames returns the names of all storage volumes in the specified pool .
2379	StoragePoolVolumesGet returns all storage volumes for a pool .
2380	StoragePoolNodeVolumesGet returns a list of storage volumes for a node .
2381	storagePoolVolumesGet returns a list of storage volumes for a node .
2382	StoragePoolVolumesGetType returns a list of storage volume types
2383	StoragePoolVolumeSnapshotsGetType returns a list of snapshots for a volume
2384	StoragePoolNodeVolumesGetType returns the volume types for a storage pool node
2385	StoragePoolVolumeGetType returns the storage volume type
2386	StoragePoolNodeVolumeGetType returns the volume type of a storage pool node
2387	StoragePoolNodeVolumeGetTypeByProject returns the volume type of a storage pool node
2388	StoragePoolVolumeUpdate updates a storage volume .
2389	StoragePoolVolumeDelete deletes a storage volume .
2390	StoragePoolVolumeRename renames a storage volume .
2391	storagePoolVolumeReplicateIfCeph applies the given function to each volume in the pool .
2392	StoragePoolVolumeCreate creates a new volume in a storage pool .
2393	StoragePoolVolumeGetTypeID returns the volume id of a storage pool volume .
2394	StoragePoolNodeVolumeGetTypeID returns the volume type of a storage pool node
2395	StoragePoolVolumeTypeToName converts a storage volume type to its name .
2396	DevicesAdd adds a new device to the database .
2397	Devices returns a list of devices for a given element .
2398	Patches returns a list of patches for the node .
2399	PatchesMarkApplied marks a patch as applied .
2400	entityType returns the entity type
2401	entityPost returns the post string for the given entity .
2402	stmtCodeVar returns the variable name for the given entity and kind .
2403	destFunc returns a string representation of a slice .
2404	CompareConfigs compares config1 and config2 .
2405	CopyConfig returns a copy of the given config .
2406	NewNotifier creates a new Notifier .
2407	Events returns a function that updates the list of listeners for the given endpoints .
2408	eventsConnect connects to an LXD server and returns the list of events .
2409	StoragePoolInit initializes the storage pool .
2410	getAAProfileContent returns the profile content for the container .
2411	AALoadProfile loads the apparmor profile .
2412	AADestroy removes the apparmor namespace from the container
2413	AAParseProfile parses the apparmor profile .
2414	getSystemHandler returns nil if syslog is not supported .
2415	NotifyUpgradeCompleted notifies the node that the database upgrade has completed .
2416	KeepUpdated returns a function that will update the given state .
2417	maybeUpdate checks if the node is up - to - date with respect to other cluster nodes .
2418	NewServer creates a new server .
2419	StartStatusCheck starts the status check .
2420	SyncProjects syncs the projects to the server .
2421	AddProject adds a project to the server .
2422	DeleteProject deletes a project .
2423	RenameProject renames a project .
2424	IsAdmin returns true if the user is an admin .
2425	HasPermission returns true if the user has the specified permission .
2426	rsyncSend sends a rsync command to the given path .
2427	rsyncSendSetup sends a rsync command to the given path .
2428	tlsClientConfig returns a tls . Config that can be used to connect to the server .
2429	tlsCheckCert checks if the TLS certificate is trusted .
2430	internalClusterContainerMovedPost creates a container mount point for a cluster container .
2431	containerPostCreateContainerMountPoint creates the mount point for the moved container .
2432	Contains checks if a device is present in the list .
2433	Update takes a list of Devices and updates them . Returns the old list and the new list .
2434	DeviceNames returns a list of device names .
2435	Infof logs an info message .
2436	Debugf logs a message at debug level
2437	Warnf logs a message at level Warn .
2438	Errorf logs an error message .
2439	Critf logs a message at level Crit .
2440	eventForward forwards an event to the node .
2441	StorageProgressReader returns a function that can be used to read progress from an io . ReadCloser .
2442	StorageProgressWriter returns an io . WriteCloser that writes progress to the given key .
2443	GetLSBRelease returns the LSB release
2444	Reset resets the server environment .
2445	Append appends a snippet to the given path .
2446	ContainerToArgs converts a container to a ContainerArgs struct .
2447	ContainerNames returns the names of all containers in a project .
2448	ContainerNodeAddress is part of the Cluster interface .
2449	ContainersListByNodeAddress returns the list of containers for a given project .
2450	ContainerListExpanded lists all containers and profiles expanded .
2451	ContainersByNodeName returns a map of containers name and node name for a given project .
2452	SnapshotIDsAndNames returns a map of snapshot IDs and names .
2453	ContainerNodeList returns a list of all containers in the cluster .
2454	ContainerNodeProjectList returns a list of containers for a given project .
2455	ContainerRemove removes a container from the cluster .
2456	ContainerProjectAndName returns the project and name of a container .
2457	ContainerConfigClear clears the config for a container .
2458	ContainerConfigGet returns the value of a container config .
2459	ContainerConfigRemove removes a container config from the cluster .
2460	ContainerSetStateful sets the stateful state of a container .
2461	ContainerProfilesInsert inserts a list of profiles to a container .
2462	ContainerProfiles returns the profiles for a container .
2463	ContainerConfig returns the config for a container .
2464	ContainerSetState sets the state of a container .
2465	ContainerUpdate updates a container .
2466	ContainerLastUsedUpdate updates the last_use_date field of a container .
2467	ContainerGetSnapshots returns a list of snapshots for a container .
2468	ContainerGetSnapshotsFull returns all snapshots of a container .
2469	ContainerNextSnapshot returns the index of the next snapshot
2470	ContainerPool is part of the Cluster interface .
2471	ContainerGetBackup returns the backup information for a container
2472	ContainerGetBackups returns a list of backups for a container
2473	ContainerBackupCreate creates a container backup .
2474	ContainerBackupRemove removes a container backup
2475	ContainerBackupRename rename a container backup
2476	ContainerBackupsGetExpired returns the list of backups that have expired .
2477	DefaultOS creates a new OS with default values .
2478	Init initializes the OS .
2479	GetWebsocket returns a websocket connection for the operation .
2480	Refresh updates the operation .
2481	CancelTarget cancels the target operation .
2482	GetTarget returns the target operation
2483	up sets up the endpoints .
2484	Down shuts down the endpoints .
2485	serveHTTP is used to serve HTTP endpoints .
2486	closeListener closes a listener .
2487	activatedListeners returns a map of listener kind to net . Listener .
2488	CandidServer returns the Candid server .
2489	RBACServer returns the RBAC server
2490	AutoUpdateInterval returns the auto update interval .
2491	MAASController returns the MAAS controller URL and key .
2492	OfflineThreshold returns the value of the cluster . offline_threshold
2493	ConfigGetString returns the string value for the given key .
2494	ConfigGetBool returns the boolean value for a given key .
2495	ConfigGetInt64 returns the int64 value for a given key .
2496	ClusterAddress returns the address of the cluster .
2497	Debug calls Log . Debug .
2498	RestServer returns a new http . Server .
2499	projectParam returns the project parameter from the request .
2500	queryParam returns the value of a query parameter
2501	newDb returns a new cobra command for the db sub command .
2502	Description returns the description of the operation .
2503	Permission returns the permission string for the operation type .
2504	OperationsUUIDs is part of the Cluster interface .
2505	OperationNodes is part of the Cluster interface .
2506	OperationByUUID returns the operation with the given UUID .
2507	OperationAdd adds an operation to the cluster .
2508	OperationRemove removes an operation from the cluster .
2509	operations returns all the operations in the cluster .
2510	expireLogsTask creates a task that will expire the logs in the cluster .
2511	absPath returns the absolute path of the LXD tree .
2512	Keys returns a sorted list of keys in the schema .
2513	Defaults returns the default values for the schema .
2514	mustGetKey panics if the key does not exist .
2515	assertKeyType panics if the key does not have the given type code .
2516	validate checks if the value is valid .
2517	GetStoragePoolVolumes returns a list of volumes for a storage pool
2518	GetStoragePoolVolume returns a volume from a storage pool .
2519	CreateStoragePoolVolume creates a new volume on a storage pool .
2520	CreateStoragePoolVolumeSnapshot creates a volume snapshot on a storage pool .
2521	GetStoragePoolVolumeSnapshots returns a list of storage snapshots for a volume .
2522	GetStoragePoolVolumeSnapshot returns a volume snapshot
2523	UpdateStoragePoolVolumeSnapshot updates a volume snapshot .
2524	MigrateStoragePoolVolume adds a new volume to a storage pool .
2525	MoveStoragePoolVolume moves a storage volume to the specified pool .
2526	UpdateStoragePoolVolume updates a storage pool volume .
2527	DeleteStoragePoolVolume deletes a volume from a storage pool .
2528	RenameStoragePoolVolume renames a storage volume .
2529	doStoragePoolCreateInternal creates a new storage pool .
2530	containerGetParentAndSnapshotName returns the parent and snapshot name of a container .
2531	containerLoadFromAllProjects loads containers from all projects .
2532	containerLoadNodeAll loads all containers from the cluster .
2533	containerLoadNodeProjectAll loads all containers for a node project .
2534	heartbeatNode sends a heartbeat request to the given address .
2535	dotPrefixMatch returns true if short and full prefix match .
2536	ContainerMount mounts a container .
2537	ContainerStorageReady returns true if the container is ready for storage .
2538	AskChoice asks the user for a choice .
2539	AskInt asks the user for an integer .
2540	AskString asks the user for a string
2541	AskPassword asks the user for a password .
2542	AskPasswordOnce asks the user for a password .
2543	askQuestion asks the user for a question and returns the answer .
2544	readAnswer reads an answer from stdin . If no answer is found defaultAnswer is returned .
2545	profilePost is used to create a new profile .
2546	profileDelete deletes a profile .
2547	IsRootDiskDevice returns true if the device is a root disk device
2548	GetRootDiskDevice returns the name of the root disk device
2549	ForwardedResponse returns a response that is forwarded to the container server .
2550	ForwardedResponseIfTargetIsRemote returns a forwarded response if the target is remote .
2551	ForwardedResponseIfContainerIsRemote returns a response if the container is remote .
2552	ForwardedOperationResponse returns a forwarded operation response .
2553	Done marks the progress bar as done .
2554	Update updates the progress bar .
2555	Warn implements the ProgressRenderer interface .
2556	UpdateProgress updates the progress bar .
2557	UpdateOp updates the progress of an operation .
2558	updateFromV6 updates the state of the zfs pool .
2559	localCreateListener creates a listener for the given path and group .
2560	NewStmt creates a new statement .
2561	Generate generates the statement .
2562	register adds a register statement to the file .
2563	httpsLXD returns a new LXD container server .
2564	IsActive returns true if the container is active .
2565	RaftNodeAddress returns the address of the Raft node with the given id .
2566	RaftNodeFirst is used to set the Raft node ID to 1 .
2567	RaftNodeAdd adds a new node to the raft_nodes table .
2568	RaftNodeDelete deletes an existing Raft node .
2569	RaftNodesReplace is part of the NodeStore interface .
2570	initCGroup initializes the CGroup flags .
2571	sqliteDirectAccess is a wrapper around sqlite3 . SQLiteConn .
2572	ContainerGet returns a single container by name .
2573	ContainerID is part of the Cluster interface .
2574	ContainerExists is part of the Cluster interface .
2575	ContainsFields returns true if the mapping contains the given fields .
2576	FieldByName returns the field with the given name or nil if not found
2577	FieldColumnName returns the column name of the field .
2578	FilterFieldByName returns the field with the given name .
2579	ColumnFields returns all column fields in the mapping .
2580	ScalarFields returns all scalar fields in the mapping .
2581	RefFields returns all the ref fields in the mapping .
2582	Column returns the column name of the field .
2583	ZeroValue returns the zero value of the field .
2584	FieldColumns returns a comma - separated list of column names .
2585	FieldArgs returns a string representation of the given fields .
2586	FieldParams returns a string representation of the given fields .
2587	FieldCriteria returns a string representation of the field criteria .
2588	initDataClusterApply applies the cluster configuration to the container server .
2589	JsonFormatEx returns a Format that formats a record as JSON .
2590	formatLogfmtValue returns a string representation of the given value .
2591	ResolveTarget returns the address of the target node .
2592	Write implements the io . Writer interface .
2593	updateNodeVersion updates the schema and api_extensions of a node .
2594	selectNodesVersions returns the versions of all nodes .
2595	GetArchitectures returns a list of available architectures .
2596	RuntimeLiblxcVersionAtLeast returns true if the runtime liblxc version is at least major . minor . micro .
2597	GetExecPath returns the executable path
2598	Connect connects to a LXD container .
2599	ConnectIfContainerIsRemote connects to the container server if the container is remote .
2600	ConnectIfVolumeIsRemote connects to a container server if the volume is remote .
2601	SetupTrust adds a client certificate to the trust store .
2602	GetStoragePools returns a list of available storage pools .
2603	GetStoragePool returns a storage pool by name .
2604	CreateStoragePool creates a new storage pool
2605	UpdateStoragePool updates a storage pool .
2606	DeleteStoragePool deletes a storage pool .
2607	GetStoragePoolResources returns the resources for a storage pool .
2608	initDirs initializes the directories for the OS .
2609	Config is part of the Node interface .
2610	UpdateConfig is part of the Node interface .
2611	Config is part of the Cluster interface .
2612	UpdateConfig is part of the Cluster interface .
2613	storagePoolClusterConfigForEtag returns the cluster config for the Etag .
2614	GetEvents returns a listener for receiving events from the LXD server .
2615	LogfmtFormat returns a log . Format that formats log records .
2616	StorageVolumeNodeAddresses returns a list of storage volume node addresses .
2617	StorageVolumeNodeGet returns the name of the storage volume node .
2618	StorageVolumeConfigGet returns the storage volume configuration .
2619	StorageVolumeDescriptionGet returns the description of a volume .
2620	StorageVolumeIsAvailable returns true if the given volume is available on the given storage pool .
2621	StorageVolumeDescriptionUpdate updates the description of a volume .
2622	StorageVolumeConfigAdd adds a new volume config to the storage volume .
2623	StorageVolumeConfigClear clears the storage volume configuration .
2624	storageVolumeIDsGet returns a slice of storage volume IDs .
2625	StorageVolumeCleanupImages deletes storage volumes with the given fingerprints .
2626	StorageVolumeMoveToLVMThinPoolNameKey moves volume . lvm . thinpool_name to lvm . thinpool_name
2627	L writes a string to the buffer .
2628	code returns the source code of the buffer .
2629	Pretty returns a string representation of the input .
2630	NetworkPublicKey returns the public key of the endpoint .
2631	NetworkPrivateKey returns the private key for the endpoints .
2632	NetworkCert returns the endpoint s network certificate .
2633	NetworkAddress returns the address of the endpoint .
2634	NetworkUpdateAddress updates the network address .
2635	NetworkUpdateCert updates the configuration of the endpoints .
2636	networkCreateListener creates a new net . Listener .
2637	Accept implements net . Listener . Accept .
2638	Config sets the TLS configuration for the listener .
2639	IsOffline returns true if the node is offline .
2640	NodeByAddress returns the node with the given address or ErrNoSuchObject if no such node is found .
2641	NodePendingByAddress is part of the Cluster interface .
2642	NodeByName returns the NodeInfo with the given name or ErrNoSuchObject if no such node exists .
2643	NodeName returns the name of the node in the cluster .
2644	NodeAddress is part of the Cluster interface .
2645	NodeIsOutdated returns whether or not the local node is outdated .
2646	NodesCount returns the number of nodes in the cluster .
2647	NodeRename is part of the Cluster interface .
2648	nodes is part of the Cluster interface .
2649	NodeAdd adds a new node to the cluster .
2650	NodePending is part of the Cluster interface .
2651	NodeUpdate is part of the Cluster interface .
2652	NodeRemove removes a node from the cluster .
2653	NodeHeartbeat is part of the Cluster interface .
2654	NodeIsEmpty checks if a node is empty .
2655	NodeClear removes all containers and images from a node .
2656	NodeOfflineThreshold implements the Cluster interface for ClusterTx .
2657	NodeUpdateVersion updates the schema and api_extensions of a node .
2658	Transaction is a convenience wrapper around sql . DB . Begin and sql . Tx .
2659	rollback rolls back the transaction after an error .
2660	ProfileURIs returns the URIs of all profiles that match the provided filter .
2661	ProfileGet returns a single profile by name .
2662	ProfileExists is part of the Cluster interface .
2663	ProfileConfigRef returns a map of key - value pairs for a profile config .
2664	ProfileUsedByRef returns the profile used by reference .
2665	ProfileCreate creates a new profile .
2666	ProfileRename renames a profile .
2667	ProfileDelete deletes a profile from the cluster .
2668	ServerTLSConfig returns the TLS configuration for the server .
2669	NetworkInterfaceAddress returns the IP address of the network interface .
2670	IsAddressCovered returns true if the two addresses are the same .
2671	SelectObjects is a convenience wrapper around sql . Stmt . SelectObjects .
2672	DeleteObject deletes an object from the database . Returns true if the object was deleted .
2673	loop is the main loop for the task .
2674	IsTerminal returns whether the given file descriptor is a terminal .
2675	socketUnixListen returns a listener for a unix socket at the given path .
2676	socketUnixRemoveStale removes stale unix socket if it exists .
2677	socketUnixSetPermissions sets the file permissions on the local socket .
2678	socketUnixSetOwnership sets the user and group of the local socket .
2679	cephOSDPoolExists checks if the given osd pool exists
2680	cephOSDPoolDestroy destroys an osd pool
2681	cephRBDVolumeExists checks if RBD volume exists
2682	cephRBDSnapshotProtect protects an RBD snapshot
2683	cephRBDCloneCreate creates a new rbd clone
2684	cephRBDSnapshotListClones returns a list of clones for a snapshot
2685	cephRBDVolumeMarkDeleted marks RBD volume as deleted
2686	cephRBDVolumeUnmarkDeleted unmarks a volume as deleted
2687	cephRBDVolumeRename renames RBD volume
2688	cephRBDVolumeSnapshotRename renames a volume snapshot
2689	cephRBDSnapshotDelete deletes a snapshot
2690	cephRBDVolumeCopy copy volume
2691	cephRBDVolumeListSnapshots returns a list of snapshots for a given volume
2692	getRDSize returns the RBD size in bytes .
2693	getRBFilesystem returns the filesystem to use .
2694	copyWithoutSnapshotsFull creates a non - sparse copy of RBD storage volume without snapshots .
2695	copyWithoutSnapshotsSparse makes a copy of RBD storage volume without snapshots .
2696	GetConfigCmd returns the Pachyderm s current auth configuration
2697	SetConfigCmd returns a cobra command for setting Pachyderm s current auth configuration
2698	NewSharder creates a new Sharder .
2699	NewRouter creates a new router .
2700	renewUserCredentials renews user credentials .
2701	NewLocalClient creates a new local client
2702	AddSpanToAnyExisting adds a span to an existing context
2703	InstallJaegerTracerFromEnv installs the Jaeger Tracer from environment variables .
2704	UnaryClientInterceptor returns a new UnaryClientInterceptor .
2705	StreamClientInterceptor returns a new StreamClientInterceptor .
2706	UnaryServerInterceptor returns a new UnaryServerInterceptor .
2707	StreamServerInterceptor returns a new StreamServerInterceptor .
2708	CloseAndReportTraces closes the tracer if it is an io . Closer .
2709	newWriter creates a new Writer .
2710	For sets the maximum elapsed time .
2711	Log logs a request and response .
2712	Format implements logrus . Formatter interface .
2713	NewGRPCLogWriter creates a new GRPCLogWriter
2714	Read reads the config file and writes it to disk .
2715	Write writes the config to disk .
2716	Read reads a proto . Message from the reader .
2717	Write writes val to the underlying io . Writer .
2718	NewReadWriter returns a new ReadWriter .
2719	RunGitHookServer runs a git hook server .
2720	newLoggingPipe creates a new loggingPipe .
2721	Read implements the io . Reader interface .
2722	Write implements the io . Writer interface .
2723	Accept implements the Listener interface .
2724	Close closes the listener .
2725	errorf returns a new hash tree error .
2726	InitWithKube creates a new ServiceEnv with the given configuration .
2727	GetEtcdClient returns the etcd client
2728	GetKubeClient returns the kubernetes client
2729	NewHasher creates a new Hasher .
2730	HashJob returns the hash of a job .
2731	HashPipeline returns the hash of the pipeline name .
2732	Status returns the status of all workers in a pipeline .
2733	Cancel cancels a job
2734	Conns returns a list of gRPC connections for the given pipeline rc .
2735	Clients returns a list of clients for the given pipeline .
2736	NewClient creates a new PPS client .
2737	RunFixedArgs returns a function that runs the run function with the given number of arguments .
2738	RunBoundedArgs returns a function that runs the run function with the given arguments .
2739	Run runs the command with the given arguments .
2740	ErrorAndExit prints an error to os . Stderr
2741	ParseCommit parses a commit string into a pfs . Commit
2742	ParseBranch parses a string into a pfs . Branch .
2743	ParseFile parses a string into a pfs . File .
2744	Set implements the flag . Value interface .
2745	SetDocsUsage sets the usage string for the docs command
2746	makeCronCommits creates the commits for a cron schedule .
2747	Writer implements the ObjectClient interface .
2748	Reader implements the ObjectClient interface .
2749	Delete implements the ObjectClient Delete method .
2750	Walk is part of the ObjectClient interface .
2751	Exists is part of the ObjectClient interface .
2752	GetBlock creates a new block from a hash .
2753	Health returns the health of the server .
2754	split splits a path into its directory and base .
2755	ValidatePath checks if the given path is valid .
2756	MatchDatum returns true if the input file matches the filter .
2757	NewCacheServer creates a new CacheServer .
2758	authorizePipelineOp is used to authorize a pipeline operation .
2759	sudo calls the given function with the superuser token .
2760	setPipelineDefaults sets the default values for the pipeline .
2761	incrementGCGeneration increments the GC generation .
2762	NewDebugServer creates a new debug server .
2763	Health is part of the APIClient interface .
2764	newObjBlockAPIServer creates a new instance of objBlockAPIServer .
2765	watchGC watches for changes to GC generation number .
2766	splitKey splits a key into its parts .
2767	NewWriter returns a new Writer that writes header to w .
2768	Write writes to the underlying io . Writer .
2769	PrintRepoHeader prints out the repo header .
2770	PrintRepoInfo prints the repo info to w .
2771	PrintDetailedRepoInfo prints information about a repository .
2772	PrintBranch prints out the branch name .
2773	PrintCommitInfo prints the commit info to w .
2774	PrintDetailedCommitInfo prints detailed information about the commit .
2775	PrintFileInfo prints a pfs . FileInfo to w .
2776	PrintDetailedFileInfo prints a detailed information about a file .
2777	Add returns a string with the given ancestors .
2778	RetryNotify retries an operation with a given back - off . If notify is non - nil it will be called .
2779	Get retrieves an item from the cache and writes it to w .
2780	Delete deletes an item from the cache .
2781	PrintJobInfo prints information about a job .
2782	PrintPipelineInfo prints the pipeline info to w .
2783	PrintWorkerStatus prints the worker status to w .
2784	PrintDetailedJobInfo prints information about a job .
2785	PrintDetailedPipelineInfo prints detailed information about a pipeline .
2786	PrintDatumInfo prints the datumInfo to w .
2787	PrintDetailedDatumInfo prints information about a datum .
2788	PrintFile prints a file to the given writer .
2789	ShorthandInput returns a string representation of the input .
2790	Retrieve fetches the credentials from the vault
2791	IsExpired returns true if the credential is expired .
2792	NewBranch creates a new branch .
2793	NewCommit creates a new commit .
2794	NewCommitProvenance creates a new CommitProvenance .
2795	NewFile creates a new pfs . File .
2796	CreateRepo creates a new repository .
2797	InspectRepo returns information about a repository .
2798	ListRepo is part of the APIClient interface .
2799	DeleteRepo deletes a repository .
2800	BuildCommit builds a new commit .
2801	StartCommitParent is part of the pfs . APIClient interface
2802	FinishCommit is part of the APIClient interface .
2803	InspectCommit returns information about a commit .
2804	BlockCommit returns information about a block commit .
2805	ListCommit returns a list of commits in a repository .
2806	ListCommitF is a convenience wrapper around ListCommitStream
2807	ListCommitByRepo lists all commits in a repository .
2808	CreateBranch creates a new branch in a repository .
2809	InspectBranch returns information about a branch .
2810	ListBranch is part of the pfs . APIClient interface
2811	SetBranch sets a branch on a repository .
2812	DeleteBranch deletes a branch from a repository .
2813	DeleteCommit deletes a commit from a repository .
2814	FlushCommit implements pfs . PFSClient . FlushCommit .
2815	FlushCommitF flushes the given commits to the given repositories .
2816	FlushCommitAll flushes all of the given commits to the given repositories .
2817	SubscribeCommit subscribes to a commit .
2818	SubscribeCommitF subscribes to a commit .
2819	PutObjectAsync creates a new PutObjectWriteCloserAsync .
2820	PutObject creates an object from an io . Reader .
2821	PutObjectSplit is part of the APIClient interface .
2822	GetObject is part of the ObjectAPIClient interface .
2823	GetObjectReader implements ObjectAPIClient . GetObjectReader .
2824	GetObjects is part of the ObjectAPIClient interface .
2825	TagObject tags an object .
2826	ListObject implements pfs . ObjectAPIClient . ListObjects .
2827	InspectObject returns information about an object .
2828	GetTag is part of the ObjectAPIClient interface .
2829	GetTagReader returns an io . ReadCloser for the specified tag .
2830	ListTag implements pfs . ObjectAPIClient .
2831	Compact calls ObjectAPIClient . Compact .
2832	NewPutFileClient creates a new PutFileClient .
2833	PutFileOverwrite implements the Client interface for PutFileClient .
2834	Close closes the client .
2835	CopyFile copies a file from one repository to another .
2836	GetFile reads a file from a repository .
2837	GetFileReader implements the GetFile method of the APIClient interface .
2838	GetFileReadSeeker returns an io . ReadSeeker for a file .
2839	InspectFile returns information about a file in a repository .
2840	ListFile returns a list of files in a repository .
2841	ListFileHistory lists the history of a file in a repository .
2842	ListFileF lists a file in a repository .
2843	Walk implements the pfs . APIClient interface .
2844	DeleteFile deletes a file from a repository .
2845	Write is part of the io . Writer interface
2846	Close is part of the PutObjectWriteCloser interface .
2847	PrettyPrintVersionNoAdditional prints a version without additional information .
2848	recursiveBlockQuoteExamples adds the block quote examples to the parent command .
2849	errMissingField returns an error if a required field is missing
2850	validateFields returns an error if any of the fields are unknown .
2851	putConfig writes the given configuration to the storage .
2852	getConfig retrieves the configuration from the storage .
2853	Serve accepts a set of server options and runs the server .
2854	NewPuller creates a new Puller .
2855	PullTree pulls a tree of hashes from the given root .
2856	Push pushes a commit to a repository .
2857	PushObj pushes an object to a repository .
2858	PushFile pushes a file to the remote repository .
2859	Dump is part of the DebugClient interface .
2860	Profile sends a profile to the given writer .
2861	Binary writes the binary data to the given writer .
2862	RegisterCacheStats registers prometheus metrics for a cache .
2863	wait blocks until n times .
2864	RunWorkload runs a workload .
2865	createRepo creates a new repo
2866	advanceCommit adds a new commit to the list of started commits .
2867	RandString returns a random string of length n .
2868	NewReader returns a new io . Reader
2869	iterDir iterates over a directory .
2870	FSSize returns the size of the tree in bytes .
2871	Diff implements the Diff method of the hashtree . HashTree interface .
2872	Serialize serializes the hash tree to the passed io . Writer .
2873	Deserialize decodes the hash tree from the given io . Reader .
2874	Copy returns a copy of the hash tree .
2875	Destroy destroys the hash tree .
2876	PutFileOverwrite implements the DBHashTree interface for dbHashTree .
2877	PutDirHeaderFooter adds a header and footer to a directory .
2878	PutFileHeaderFooter writes the header and footer of the given objects to the given path .
2879	deleteDir deletes a directory .
2880	NewReader creates a new Reader from an io . Reader .
2881	Read reads a MergeNode from the reader .
2882	NewWriter returns a new Writer that writes to w .
2883	Write writes a MergeNode to the underlying Writer .
2884	Copy reads from r and writes to w .
2885	Index returns the contents of the indexes .
2886	GetRangeFromIndex reads a range from an index .
2887	NewFilter returns a Filter that returns true if the key is in the given tree .
2888	PathToTree converts a path to a tree .
2889	Merge merges the contents of rs into w .
2890	Hash is part of the Database interface .
2891	IsGlob checks if a string is a glob pattern
2892	GlobLiteralPrefix returns the prefix of a glob pattern
2893	GetHashTreeObject returns a HashTree object .
2894	GetHashTreeTag returns the hash tree for the given tag .
2895	PutHashTree writes a hash tree to the specified pachClient .
2896	NewChildCursor returns a new ChildCursor .
2897	Next returns the next key and value .
2898	NewOrdered creates a new Ordered object .
2899	MkdirAll creates a directory
2900	PutDir adds a directory node to the order .
2901	Serialize serializes the Ordered into the passed io . Writer .
2902	NewUnordered creates a new Unordered node .
2903	Ordered returns an ordered copy of this Unordered .
2904	revokeUserCredentials revokes the user credentials .
2905	NewAPIServer creates a new API server .
2906	String returns a string representation of the version .
2907	getPipelineInfo returns information about a pipeline .
2908	removeStr removes a string from a slice . Returns true if the string was removed .
2909	PublicCertToPEM converts a tls . Certificate to PEM format
2910	GenerateSelfSignedCert generates a self - signed certificate .
2911	ActivateCmd returns a cobra . Command for Pachyderm s auth system
2912	DeactivateCmd is a command to deactivate Pachyderm auth system
2913	LoginCmd returns a command to login to Pachyderm
2914	LogoutCmd returns a command for logout
2915	WhoamiCmd returns a cobra command for whoami
2916	CheckCmd returns a cobra . Command for pachctl check
2917	GetCmd returns a cobra command for get
2918	SetScopeCmd returns a cobra command for set scope
2919	ListAdminsCmd returns the list - admins command
2920	ModifyAdminsCmd returns a cobra command for modify admins
2921	GetAuthTokenCmd returns a cobra command for get auth token
2922	UseAuthTokenCmd returns a command for use - auth - token
2923	Cmds returns a list of commands for Pachyderm
2924	ParseScope parses a scope string .
2925	IsErrNotActivated returns true if the error is an ErrNotActivated error .
2926	IsErrPartiallyActivated returns true if the error is partially activated .
2927	IsErrNotSignedIn returns true if the error is an ErrNotSignedIn error .
2928	IsErrBadToken returns true if the error is an ErrBadToken .
2929	IsErrNotAuthorized returns true if the error is not authorized
2930	IsErrInvalidPrincipal returns true if the error is an invalid principal .
2931	IsErrTooShortTTL returns true if the provided error is longer than the token s existing TTL
2932	NewDatumFactory creates a new DatumFactory .
2933	NewCollection creates a new collection
2934	Path returns the path to the given key .
2935	getIndexPath returns the index path for the given key .
2936	getMultiIndexPaths returns a list of paths for multiple indexes .
2937	Upsert adds a new value to the collection .
2938	get is part of the Collection interface .
2939	List implements Collection . List .
2940	Watch returns a new watcher for the collection .
2941	WatchByIndex returns a watch . Watcher that watches for changes to an index .
2942	WatchOne returns a watcher for the given key .
2943	WatchOneF watches the given key for changes and calls the given function .
2944	Get returns an io . ReadCloser for the given key .
2945	Keys returns a sorted list of keys in the cache .
2946	Clear removes all keys from the cache .
2947	NewHTTPServer creates a new HTTP server .
2948	NewDeployServer creates a new deploy server .
2949	Export exports a list of images to a writer .
2950	Import imports an image from an io . Reader .
2951	DatumTagPrefix returns the datum tag prefix .
2952	NewPFSInput creates a new PFSInput .
2953	NewPFSInputOpts creates a new PFSInput .
2954	NewJobInput creates a new job input .
2955	NewPipelineInput creates a new PipelineInput .
2956	CreateJob creates a new job
2957	ListJob lists all the jobs in a pipeline .
2958	ListJobF is a convenience wrapper around ListJobStream .
2959	FlushJob flushes a batch of commits to the specified pipelines .
2960	FlushJobAll flushes all the jobs in a list of commits .
2961	DeleteJob deletes a job .
2962	StopJob stops a job .
2963	RestartDatum restarts a datum .
2964	ListDatum returns a list of DatumInfos for a given job .
2965	ListDatumF implements pps . APIClient ListDatumF
2966	InspectDatum returns information about a single datum .
2967	Next moves the iterator to the next log message .
2968	InspectPipeline returns information about a pipeline .
2969	ListPipeline is part of the pps . APIClient interface
2970	DeletePipeline deletes a pipeline .
2971	StartPipeline starts a pipeline .
2972	StopPipeline stops a pipeline .
2973	RerunPipeline is part of the APIClient interface .
2974	CreatePipelineService creates a new pipeline service .
2975	GetDatumTotalTime returns the total time of a process .
2976	Mount mounts a file system to the specified path .
2977	NewBufPool creates a new BufPool with the given size .
2978	StorageRootFromEnv returns the PachRootEnvVar and StorageBackendEnvVar .
2979	BlockPathFromEnv returns the path to the block .
2980	NewGoogleClient creates a new Google Cloud Storage client .
2981	NewGoogleClientFromSecret creates a new Google client from a secret file .
2982	NewGoogleClientFromEnv creates a new Google client from environment variables .
2983	NewMicrosoftClientFromSecret creates a new client from a secret file
2984	NewMicrosoftClientFromEnv creates a new Microsoft client from environment variables .
2985	NewMinioClientFromSecret creates a new Minio client from a secret file .
2986	NewMinioClientFromEnv creates a new Minio client from environment variables .
2987	NewAmazonClientFromSecret creates a new Amazon client from a secret file .
2988	NewAmazonClientFromEnv creates a new Amazon client from environment variables .
2989	NewClientFromURLAndSecret creates a new client from an object store URL and secret .
2990	ParseURL parses a string into an ObjectStoreURL .
2991	NewClientFromEnv creates a new client from environment variables .
2992	NewExponentialBackOffConfig creates a new backoff . ExponentialBackOff .
2993	Close implements the BackoffReadCloser interface .
2994	Close is part of the BackoffWriter interface .
2995	IsRetryable returns whether or not the error is a retryable error .
2996	RunStdin runs the command with the given arguments .
2997	RunIODirPath runs a command in the given directory .
2998	NewAuthServer creates a new authclient . APIServer
2999	expiredClusterAdminCheck checks if the Pachyderm Enterprise token has expired .
3000	getOneTimePassword returns the authentication code for the given username and expiration time .
3001	hashToken returns the hash of the given token .
3002	getAuthToken returns the authentication token from the context .
3003	canonicalizeSubjects takes a list of subjects and returns the canonicalized subjects .
3004	Matches checks if the actual string matches the expected pattern .
3005	OneOfMatches checks if the given string matches one of the given strings .
3006	Equal checks if two values are equal .
3007	NotEqual tests if two values are not equal .
3008	oneOfEquals returns true if elem is a one of the given slices .
3009	NoneEquals checks if the given value is equal to one of the given values .
3010	NoError is a convenience wrapper around fatal .
3011	NoErrorWithinT is the same as NoErrorWithin but takes a time . Duration .
3012	NoErrorWithinTRetry is a convenience function for testing . NoErrorWithinTRetry .
3013	YesError is a helper function for testing . YesError .
3014	NotNil asserts that the given object is not nil .
3015	Nil asserts that the given object is nil .
3016	False asserts that the value is false .
3017	NewSTM creates a new STM transaction .
3018	NewDryrunSTM creates a new dryrun STM .
3019	newSTMRepeatable creates a new repeatable STM transaction .
3020	newSTMSerializable creates a new STMSerializable .
3021	newSTMReadCommitted creates a new STMReadCommitted transaction .
3022	commit is used to commit a read committed transaction .
3023	Pipelines returns a collection of pipelines .
3024	Jobs returns a collection of Jobs .
3025	NewTicker creates a new ticker .
3026	nodeToMap converts an etcd . Node into a map .
3027	ServiceAccount creates a ServiceAccount from an AssetOpts .
3028	ClusterRole returns a ClusterRole
3029	RoleBinding creates a new RoleBinding
3030	GetSecretEnvVars returns a list of environment variables that can be used to access the secret key .
3031	PachdService returns a Pachd service .
3032	GithookService returns the githook service .
3033	EtcdDeployment creates a Deployment from the given AssetOpts .
3034	EtcdStorageClass returns the default storage class for the given backend .
3035	EtcdVolume creates a PersistentVolume for an etcd volume .
3036	EtcdNodePortService returns an etcd node port service .
3037	EtcdHeadlessService returns a v1 . Service that can be used to create an etcd headless service .
3038	EtcdStatefulSet creates a new EtcdStatefulSet from the given AssetOpts .
3039	DashDeployment creates a dash deployment .
3040	DashService returns a v1 . Service for the dash service .
3041	WriteSecret writes a secret to disk .
3042	GoogleSecret returns a map of google - bucket and google - cred .
3043	WriteDashboardAssets writes dashboard assets .
3044	WriteLocalAssets writes local assets to disk .
3045	WriteCustomAssets writes custom assets to disk .
3046	WriteAmazonAssets writes the assets to the given encoder .
3047	WriteGoogleAssets writes Google assets to disk .
3048	WriteMicrosoftAssets writes the microsoft assets to disk .
3049	Images returns a list of available images .
3050	AddRegistry adds a registry to an image name
3051	withCanonicalRandomizationFactor sets the canonical randomization factor .
3052	Reset resets the backoff to the initial interval .
3053	incrementCurrentInterval increases the current interval .
3054	NewBlockAPIServer creates a new BlockAPIServer .
3055	LocalStorage creates a new local client and a storage .
3056	deleteJob deletes a job from the store .
3057	writeXML writes an XML response .
3058	clean1_7HashtreePath returns the path to the hashtree root .
3059	NewFromAddress creates a new APIClient from an address .
3060	getUserMachineAddrAndOpts returns the user machine address and options .
3061	NewInCluster creates a new API client in a cluster .
3062	Close closes the API client .
3063	DeleteAll deletes all PPS and PFS files .
3064	SetMaxConcurrentStreams sets the maximum number of concurrent streams
3065	WithCtx returns a copy of the APIClient with the given context .
3066	NewDLock creates a new DLock
3067	DatumID returns the datum ID
3068	runUserErrorHandlingCode runs the user error handling code .
3069	HashDatum returns the datum hash for a given input .
3070	HashDatum15 hashes a series of inputs .
3071	Status returns the status of the worker .
3072	Cancel cancels a job .
3073	mergeStats merges two process stats .
3074	mergeChunk merges a single chunk into the cache .
3075	IsCommitNotFoundErr returns whether the given error is a commit not found error .
3076	IsCommitDeletedErr returns whether the given error is a commit deleted error .
3077	IsCommitFinishedErr returns true if the given error is a commit finished error .
3078	IsRepoNotFoundErr returns true if the error is a repository not found error .
3079	IsBranchNotFoundErr returns true if the error is a branch not found error .
3080	IsFileNotFoundErr returns true if the error is a file not found error .
3081	Version returns the API version .
3082	validateRepoName validates the repository name .
3083	newDriver returns a new driver .
3084	inspectCommit is used to inspect a commit .
3085	scratchCommitPrefix returns the path to the scratch commit .
3086	scratchFilePrefix returns the path of the scratch file .
3087	getTreeForFile returns a hash tree for the given file .
3088	provenantOnInput returns true if a commit is provenant on input .
3089	nodeToFileInfo converts a hashtree . NodeProto to a FileInfo .
3090	fileHistory calls the given function for each FileInfo in the given file .
3091	upsertPutFileRecords adds new records to a file .
3092	ReadRow reads a single row from the reader .
3093	NewReporter creates a new Reporter .
3094	ReportUserAction reports a user action .
3095	FinishReportAndFlushUserAction returns a function that can be used to wait for a user action to finish .
3096	Read reads data from the underlying reader .
3097	ActivateCmd returns a cobra command for Pachyderm activation
3098	GetStateCmd returns a cobra . Command for pachyderm state
3099	Cmds returns a list of subcommands for Pachyderm
3100	NewConfiguration creates a new configuration object
3101	Repos returns a collection of repositories .
3102	PutFileRecords creates a collection of PutFileRecords .
3103	Commits returns a collection of commits for the given repository .
3104	Branches returns a collection of branches for a repository .
3105	OpenCommits returns a collection of open commits .
3106	NewDAG creates a new DAG
3107	NewNode adds a new node to the DAG .
3108	Sorted returns a sorted list of all nodes in the DAG .
3109	Leaves returns a list of all leaves in the DAG .
3110	Ancestors returns the ancestors of the given node .
3111	Descendants returns a list of all descendants in the DAG .
3112	Ghosts returns the Ghosts of the DAG .
3113	NewPortForwarder creates a new PortForwarder
3114	Run starts the port forwarding for the given app .
3115	RunForDaemon runs the pachd daemon
3116	RunForSAMLACS runs the pachd command for SAML ACS
3117	RunForDashUI runs the dash - ui command .
3118	RunForDashWebSocket runs the dash - websocket command .
3119	RunForPFS runs the pachd command for the given port .
3120	RunForS3Gateway runs the pachd command for S3 gateway
3121	Lock locks the port - forwarding process .
3122	Close shuts down the port forwarder .
3123	Unmarshal unmarshals the event into the given value .
3124	UnmarshalPrev unmarshals the previous event value .
3125	MakeWatcher creates a new watcher .
3126	CheckType returns an error if the given value is not of the expected type .
3127	NewPool creates a new Pool .
3128	Do calls the given function for each connection in the pool .
3129	Close closes the connection pool .
3130	buildImage builds a docker image
3131	pushImage is used to push a docker image
3132	newMinioClient creates a new minio client .
3133	newMinioClientV2 creates a new minio client .
3134	newMinioWriter creates a new minioWriter .
3135	Close closes the writer .
3136	PipelineRepo returns the repository for the given pipeline .
3137	PipelineRcName returns the pipeline name and version .
3138	GetRequestsResourceListFromPipeline creates a ResourceList from a PipelineInfo .
3139	GetLimitsResourceListFromPipeline returns the limits for the given pipeline .
3140	getNumNodes returns the number of nodes
3141	GetExpectedNumWorkers takes a ParallelismSpec and returns the expected number of workers .
3142	GetExpectedNumHashtrees returns the expected number of hashtrees
3143	FailPipeline is used to fail a pipeline .
3144	JobInput returns the job input for the given pipeline and output commit .
3145	PipelineReqFromInfo creates a CreatePipelineRequest from the given PipelineInfo .
3146	NewPipelineManifestReader creates a new PipelineManifestReader
3147	NextCreatePipelineRequest returns the next CreatePipelineRequest from the pipeline manifest .
3148	DescribeSyntaxError returns an error describing a syntax error .
3149	UpdateJobState updates the state of a job .
3150	New creates a new UUID .
3151	Code returns the HTTP status code .
3152	NewHTTPError creates a new HTTPError .
3153	NewStorage creates a new Storage object .
3154	DeleteAll deletes all objects in the storage .
3155	Chunk returns a chunk of data .
3156	ChunkReader reads from r and calls f for each chunk .
3157	NewStreamingBytesReader creates a new streaming bytes reader .
3158	WriteToStreamingBytesServer writes the contents of reader to streamingBytesServer .
3159	WriteFromStreamingBytesClient reads from streamingBytesClient and writes to writer .
3160	NewSidecarAPIServer creates a new sidecar API server .
3161	NewEnterpriseServer creates a new enterprise server .
3162	validateActivationCode validates that the activation code is valid .
3163	Activate is used to activate an account .
3164	Deactivate deactivates the enterprise token .
3165	lookExtensions looks for a file extension in the given directory .
3166	Start starts the process .
3167	CombinedOutput returns the combined output of the command .
3168	StdinPipe returns an io . WriteCloser that can be used to read from stdin .
3169	StdoutPipe returns an io . ReadCloser that can be used to read the output of the command .
3170	dedupEnvCase returns a copy of env with duplicates removed .
3171	InputName returns the name of the input .
3172	SortInput sorts inputs by their name .
3173	InputBranches returns a list of branches for the given input .
3174	ValidateGitCloneURL validates a git clone URL .
3175	containsEmpty checks if a slice contains an empty string .
3176	NewAPIServer creates a new API server .
3177	Ago returns a human - readable representation of the given timestamp .
3178	TimeDifference returns the difference between two timestamps .
3179	Duration returns a human - readable string representation of a duration .
3180	InspectCluster returns information about the cluster .
3181	Extract calls the given function for each op in the APIClient .
3182	ExtractAll returns all operations from the server .
3183	ExtractWriter writes the results to the given writer .
3184	ExtractURL attempts to extract the given URL .
3185	ExtractPipeline returns the pipeline with the given name
3186	Restore is part of the admin . APIClient interface .
3187	RestoreReader restores an image from a reader .
3188	RestoreFrom restores an object from another API client .
3189	RestoreURL restores the given URL .
3190	IgnoreTypes returns an option that will ignore the given types .
3191	AppendEllipsis appends ds to the end of the text list .
3192	IsType returns true if t is a function type .
3193	NameOf returns the name of the function .
3194	PointerOf returns a pointer to the value v .
3195	String returns a string representation of the edit script .
3196	stats returns statistics about the edit scripts .
3197	connect connects the path to the given point using the given EqualFunc .
3198	EquateNaNs returns an Option that filters out NaN values .
3199	Index returns the pathStep at index i .
3200	Key returns the key of the index or - 1 if the index is not valid .
3201	String implements the fmt . Stringer interface .
3202	FormatType formats a type .
3203	formatMapKey formats a map key .
3204	formatString takes a string and returns a formatted string .
3205	formatHex formats a uint64 as a hex string .
3206	formatPointer returns a human - readable representation of the pointer .
3207	Visit returns true if v has already been visited .
3208	retrieveUnexportedField retrieves an unexported field from v .
3209	insert inserts a sub - tree into the tree .
3210	matchPrefix returns true if the path matches .
3211	canonicalName returns the canonical names of a field .
3212	FilterPath returns an Option that can be used to filter paths .
3213	normalizeOption returns a copy of the given option or nil if there are no options .
3214	flattenOptions takes a list of Options and flattens them into Options .
3215	CanFormatDiffSlice returns true if the diff mode is supported .
3216	formatASCII formats a string into an ASCII string .
3217	coalesceAdjacentEdits coalesce adjacent edits .
3218	SortKeys sorts a slice of reflect . Value by key .
3219	FormatDiff formats a diff value .
3220	coalesceAdjacentRecords takes a list of reportRecords and coalesce them into a slice of diffStats .
3221	Diff returns the difference of x and y .
3222	statelessCompare performs a stateless compare .
3223	sanitizeValue is used to sanitize a reflect . Value .
3224	Check implements the Checker interface for recChecker .
3225	makeAddressable returns a pointer to an addressable value .
3226	Marshal serializes the field into the given visitor .
3227	String returns a string representation of the field .
3228	Set sets the tag on the span .
3229	Inject implements opentracing . TextMapPropagator . Inject
3230	Extract implements opentracing . TextMapPropagator .
3231	ToLogRecord converts the LogData to a LogRecord .
3232	New creates a new Tracer .
3233	StartSpan implements opentracing . Tracer . StartSpan .
3234	RegisterInjector registers an injector for a given format .
3235	RegisterExtractor registers an extractor for the given format .
3236	Inject implements opentracing . Tracer . Inject .
3237	Extract implements opentracing . Tracer . Extract
3238	ContextWithSpan returns a new context with the given span .
3239	Set sets the span s tag with the given value .
3240	Set sets the span s tag with the given value .
3241	Set sets the span tag with the given value .
3242	SetString sets the value of the tag .
3243	EmitString emits a string value to the mock .
3244	EmitLazyLogger implements the log . ValueEmitter interface .
3245	RunAPIChecks runs an API check suite .
3246	CheckBaggageValues specifies whether or not baggage values should be checked .
3247	CheckExtract is a APICheckOption that sets the check extract flag .
3248	CheckInject is a APICheckOption that sets the check injection flag .
3249	CheckEverything returns a APICheckOption that sets the default values for the baggage values .
3250	UseProbe returns an APICheckOption that sets the probe function for the APICheckSuite .
3251	WithBaggageItem adds a baggage item to the context .
3252	Tags returns the tags for this span .
3253	Tag returns the value of a tag
3254	Logs returns a copy of the logs .
3255	Context implements opentracing . Span . Context
3256	SetTag implements opentracing . Span . SetTag
3257	SetBaggageItem implements opentracing . Span . SetBaggageItem
3258	BaggageItem returns the value for the given key .
3259	Finish implements the Tracer interface .
3260	FinishWithOptions implements opentracing . Span . FinishWithOptions .
3261	String returns a string representation of the MockSpan .
3262	LogFields logs the given fields .
3263	logFieldsWithTimestamp adds one or more log fields to the span .
3264	LogKV logs a set of key - value pairs .
3265	LogEvent logs an event .
3266	LogEventWithPayload logs an event with a payload .
3267	SetOperationName sets the operation name .
3268	registriesDirPath returns the path to the registries directory .
3269	loadAndMergeConfig loads the configuration from the given path and merges it with the default - docker configuration .
3270	ParseReference parses an image reference string into an ImageReference .
3271	NewReference creates a new OpenShift image reference
3272	CheckAuth checks if the provided credentials are valid .
3273	doHTTP performs a HTTP request .
3274	detectPropertiesHelper is used to detect the properties of the docker client
3275	detectProperties detects properties
3276	getExtensionsSignatures returns the list of extensions signatures for the given manifest digest .
3277	NewTransport returns a new http . Transport .
3278	readRegistryConf reads the registry configuration file .
3279	GetRegistries returns a list of registry names .
3280	GetInsecureRegistries returns the list of insecure registries
3281	RegistriesConfPath returns the path to the registries configuration file .
3282	NewOptionalBool returns a new OptionalBool instance
3283	changeState changes the state of the PolicyContext .
3284	Destroy destroys the policy context .
3285	policyIdentityLogName returns the log name for the image reference .
3286	requirementsForImageRef returns the policy requirements for the given image reference
3287	ParseImageName parses an image name into a reference .
3288	BlobInfoFromOCI1Descriptor creates a BlobInfo from an OCI1 Descriptor .
3289	OCI1FromManifest returns an OCI1 object from a manifest
3290	OCI1FromComponents creates a new OCI1 instance from the given components .
3291	newReference creates a new reference .
3292	tagOrDigest returns the digest or tag of the reference .
3293	updateEmbeddedDockerReference updates the manifest updates .
3294	isTTY returns true if w is a terminal .
3295	copyUpdatedConfigAndManifest copies the updated config and manifest .
3296	createProgressBar creates a progress bar .
3297	copyConfig copies the config blob from src to dest .
3298	diffIDComputationGoroutine performs a diff ID computation .
3299	computeDiffID returns the diff ID of the given stream . If decompressor is not nil it will be used to decompress the stream .
3300	compressGoroutine compresses an io . Reader using pgzip .
3301	newDockerClient creates a new docker client .
3302	defaultPolicyPath returns the default policy path
3303	NewPolicyFromFile creates a new policy from a file .
3304	NewPolicyFromBytes creates a new Policy from a JSON string .
3305	newPolicyRequirementFromJSON creates a PolicyRequirement from JSON data .
3306	newPRSignedBy creates a new signedBy object .
3307	newPRSignedByKeyPath creates a new signed by key path .
3308	NewPRSignedByKeyPath creates a new signed key path policy requirement .
3309	newPRSignedByKeyData creates a new signedBy from key data .
3310	NewPRSignedByKeyData creates a new PolicyRequirement that is signed by the given key data .
3311	IsValid returns true if the SBKeyType is valid .
3312	newPRSignedBaseLayer creates a new signed base layer .
3313	newPolicyReferenceMatchFromJSON creates a new PolicyReferenceMatch from JSON data .
3314	newPRMExactReference creates a new prmExactReference .
3315	newPRMExactRepository creates a new prmExactRepository .
3316	newImageSource creates a new storageImageSource from an image reference .
3317	getBlobAndLayerID returns the blob and the layer ID .
3318	computeID returns the image ID for the given manifest .
3319	PutManifest implements storage . ImageDestination . PutManifest .
3320	PutSignatures sets the signatures for the image .
3321	newImage creates a new image from a storage reference .
3322	newImageSource creates a new image source from an image archive reference .
3323	LoadManifestDescriptor loads a manifest descriptor from an image reference .
3324	Close closes the image source .
3325	append appends a string to the end of the set .
3326	isMultiImage returns true if the image is a multi - image .
3327	lockPath is used to lock a path .
3328	unlockPath unlocks the lock for the given path .
3329	view is used to view the cache .
3330	update is used to update the cache .
3331	uncompressedDigest returns the uncompressed digest or an empty string if none was found .
3332	appendReplacementCandidates appends the replacement candidates to the list .
3333	indexExists returns true if the index exists .
3334	createSignature creates a signature for the given manifest .
3335	ParseReference parses a reference string into an ImageReference .
3336	NewReference creates a new reference to an image .
3337	getIndex returns the index for the reference .
3338	LoadManifestDescriptor loads the manifest descriptor from an image reference .
3339	blobPath returns the path to the blob for the given digest .
3340	SignDockerManifest signs a Docker manifest .
3341	VerifyDockerManifestSignature verifies the signature of a Docker manifest .
3342	newOpenshiftClient creates a new OpenShift client
3343	doRequest makes a request to the skopeo API .
3344	getImage returns the image for the given imageStreamImageName
3345	convertDockerImageReference converts a docker image reference to an image reference .
3346	ensureImageIsResolved checks if the image is resolved
3347	newImageDestination creates a new image destination
3348	newUntrustedSignature creates a new untrusted signature .
3349	MarshalJSON returns the JSON encoding of the untrusted signature .
3350	UnmarshalJSON implements the json . Unmarshaler interface .
3351	verifyAndExtractSignature verifies and extracts the signature from the given unverified signature .
3352	RewriteReference rewrites a reference to match the provided prefix .
3353	getV1Registries returns a list of V1 Registries from a toml config .
3354	getConfigPath returns the path to the system registries configuration file .
3355	GetRegistries returns a list of registries for the system .
3356	readRegistryConf reads the registry configuration file .
3357	Manifest implements the Image interface for sourcedImage .
3358	ConfigUpdate updates the reference s config and annotations .
3359	parseImageAndDockerReference takes an image and a string and returns a reference . Named and an error .
3360	parseDockerReferences parses two docker references .
3361	ListNames returns a sorted list of transport names .
3362	NewReference creates a new reference to an OSTree image .
3363	signaturePath returns the path to the signature at the given index .
3364	ValidateImageName checks if the given image name is valid .
3365	SplitPathAndImage splits reference into path and image .
3366	ValidateOCIPath checks if the given path is valid
3367	ValidateScope checks if the given scope is valid .
3368	BlobInfoFromSchema2Descriptor converts a Schema2Descriptor to a BlobInfo .
3369	Schema2FromManifest creates a Schema2 from a JSON manifest .
3370	Schema2FromComponents creates a new Schema2 from the given config and layers .
3371	SetAuthentication sets the authentication credentials for a registry .
3372	RemoveAuthentication removes the authentication from the docker config
3373	RemoveAllAuthentication removes all authentication from the docker config
3374	readJSONFile reads a JSON file and unmarshals it .
3375	modifyJSON updates the JSON file
3376	findAuthentication attempts to find an authentication from a JSON file . If no authentication is found an error is returned .
3377	NewDestination creates a new destination .
3378	AddRepoTags adds tags to the destination .
3379	writeLegacyLayerMetadata writes the legacy layer metadata to the destination .
3380	sendSymlink sends a symlink to the destination .
3381	sendBytes sends a byte slice to the destination .
3382	sendFile sends a file to the destination .
3383	Commit is part of the Destination interface .
3384	imageMatchesRepo returns true if the given image matches the given repository .
3385	resolveImage resolves the reference to an image . If no image is found an error is returned .
3386	Transport implements storage . Reference . Transport .
3387	StringWithinTransport returns a string representation of the storageReference .
3388	PolicyConfigurationNamespaces returns the namespaces for the policy configuration .
3389	GzipDecompressor is a convenience wrapper around pgzip . NewReader .
3390	Bzip2Decompressor returns an io . ReadCloser that can be used to decompress a Bzip2 file .
3391	XzDecompressor decompresses an io . Reader into an io . ReadCloser .
3392	DetectCompression returns a DecompressorFunc and an io . Reader that can be used to decompress the given input .
3393	newImageDestination creates a new docker image destination .
3394	mountBlob is used to mount a blob to a repository .
3395	bicTransportScope returns the BIC transport scope for the given reference .
3396	newBICLocationReference creates a new BICLocationReference .
3397	parseBICLocationReference parses a BIC location reference .
3398	NewSourceFromStream creates a new Source from an io . Reader .
3399	readTarComponent returns the contents of a tar component .
3400	ensureCachedDataIsPresent checks if the cache data is present .
3401	loadTarManifest loads the manifest . json from the tar manifest file .
3402	Close closes the source .
3403	newImageDestination creates a new image destination .
3404	imageLoadGoroutine loads an image from a pipe .
3405	NewReference creates a new reference to an image .
3406	createOCIRef creates an OCI reference for the given image .
3407	createUntarTempDir creates a temp directory from an oci archive reference .
3408	destructivelyPrioritizeReplacementCandidatesWithMax takes a slice of CandidateWithTime and returns a slice of BICReplacementCandidate .
3409	newImageDestination creates a new ImageDestination .
3410	resolveExistingPathToFullyExplicit resolves an existing path to a fully qualified path .
3411	newImageDestination creates a new ImageDestination .
3412	isDirEmpty returns true if the directory is empty .
3413	removeDirContents removes all the contents of a directory
3414	GetRepositoryTags returns a list of tags for a repository
3415	DefaultCache returns the default blob info cache .
3416	uncompressedDigestLocked returns the uncompressed digest or an empty string if none was found .
3417	Close closes the image destination .
3418	PutManifest is part of the ImageDestination interface .
3419	Commit is part of the ImageDestination interface .
3420	tarDirectory creates a tar file from a directory .
3421	ParseStoreReference parses a store reference .
3422	chooseDigestFromManifestList returns a digest from the manifest list .
3423	ChooseManifestInstanceFromManifestList selects a digest from a manifest - list .
3424	manifestSchema1FromComponents creates a schema1 manifest from a list of components .
3425	manifestDigest returns the digest of the manifest .
3426	deleteImage deletes an image from the registry .
3427	Schema1FromComponents creates a Schema1 object from the given components .
3428	initialize initializes the schema1 .
3429	ToSchema2Config converts a Schema1 to a Schema2 config .
3430	Digest returns the digest of the manifest .
3431	MatchesDigest returns whether the manifest matches the expected digest .
3432	NormalizedMIMEType returns the normalized MIME type
3433	FromBlob creates a manifest from a blob .
3434	NewReference returns a new image reference for the given path .
3435	layerPath returns the path to the layer with the given digest .
3436	signaturePath returns the path to the signature at the given index .
3437	New creates a new pool with the given constructor .
3438	NewFunc creates a new pool with a closure function .
3439	ProcessTimed is used to process a job with a given timeout .
3440	SetSize sets the size of the pool .
3441	GetSize returns the number of workers in the pool
3442	TL returns the top left corner of the rectangle .
3443	BR returns the top left corner of the rectangle .
3444	CVBox returns a C . CvBox2D .
3445	Points returns the points of the box .
3446	FOURCC returns the FOURCC value .
3447	Merge merges two images into one image .
3448	Split splits a IplImage .
3449	AddWeighted adds a weighted image .
3450	And takes two IplImage objects and performs a logical AND .
3451	AndWithMask takes two images and applies a mask to them .
3452	AndScalar applies a scalar to the image and stores the result in dst .
3453	AndScalarWithMask applies a scalar to an image .
3454	Or computes the bitwise OR of two images .
3455	OrWithMask computes the logical OR of two images .
3456	OrScalar applies a scalar to the image .
3457	OrScalarWithMask is like OrScalar but with a mask .
3458	AddWithMask adds two images .
3459	AddScalar adds a scalar to the image .
3460	AddScalarWithMask adds a scalar to an image .
3461	Subtract subtracts two images and returns the result .
3462	SubtractWithMask subtracts two images with a mask .
3463	SubScalar subtracts a scalar from src and dst .
3464	SubScalarWithMask subtracts a scalar from the image .
3465	SubScalarRev subtracts a scalar from src and dst .
3466	SubScalarWithMaskRev sub a scalar with a mask .
3467	AbsDiff calculates the absolute difference between two images .
3468	AbsDiffScalar calculates the absolute difference of two images .
3469	MeanStdDevWithMask returns the mean and standard deviation of the image .
3470	CreateSeq creates a new Seq .
3471	Push pushes an element to the end of the sequence .
3472	Pop removes an element from the sequence .
3473	PushFront appends an element to the front of the sequence .
3474	PopFront removes an element from the front of the sequence .
3475	GetElemAt returns the element at the given index .
3476	RemoveAt removes the element at the given index .
3477	Delay specifies the amount of time to wait before giving up .
3478	BackOffDelay returns the back - off delay for the given number of times .
3479	Error returns a string representation of the error .
3480	Arguments adds the arguments to the request .
3481	BodyString sets the request body to a string .
3482	BodyBytes sets the request body to the given bytes .
3483	Body sets the body of the request .
3484	Option adds an option to the request .
3485	Header adds a header to the request .
3486	Send sends a request to the shell .
3487	Exec sends the request and decodes the response into res .
3488	Next returns the next message from the subscription .
3489	Cancel cancels the subscription .
3490	FileList lists the contents of a file .
3491	Cat returns the contents of a file or directory .
3492	List returns a list of links for the given path .
3493	Pin adds a pin to the shell .
3494	Pins returns a map of pin keys and their values .
3495	Version returns the version and commit .
3496	SwarmPeers returns a list of Swarm peers .
3497	SwarmConnect connects to a swarm .
3498	DagPutOptions takes a list of DagPutOption and returns a DagPutSettings .
3499	Pin sets the pin for the DagPutSettings
3500	Kind is a DagPutOption that sets the DAG kind .
3501	Hash is a DagPutOption that sets the hash on the DagPutSettings
3502	AddDir adds a directory to the shell .
3503	Publish publishes a value to a node .
3504	PublishWithDetails publishes the given content hash with the given lifetime and ttl .
3505	ResolveValue is part of the PlanValue interface .
3506	GenerateQuery is part of the QueryParser interface .
3507	EncodeValue encodes a BindVariable .
3508	Lex scans the next token and stores it in lval .
3509	skipStatement moves to the next statement .
3510	reset resets the Tokenizer .
3511	Preview returns the statement type for the given sql string .
3512	NewPlanValue creates a new PlanValue from an expression .
3513	StringIn checks if a string is in a list of strings
3514	NewTrackedBuffer creates a new TrackedBuffer .
3515	NewStringArena creates a new StringArena .
3516	NewString returns a copy of b .
3517	SpaceLeft returns the number of spaces left .
3518	ParseStrictDDL parses a DDL statement .
3519	ParseNext parses the next statement .
3520	Append appends the SQLNode to the buffer .
3521	ExprFromValue converts a sqltypes . Value to an Expr .
3522	Backtick returns the backtick of a string .
3523	NewValue creates a new Value from a byte slice .
3524	String returns the string representation of the value .
3525	EncodeSQL encodes v into b .
3526	EncodeSQL encodes the InsertValues .
3527	EncodeSQL encodes the TupleEqualityList as SQL .
3528	WalkStatement walks a statement .
3529	WalkSelect walks a select statement .
3530	BindVariablesEqual returns true if x and y are equal .
3531	New creates a new JWT middleware .
3532	HandlerWithNext checks if the JWT is valid and calls the next handler .
3533	FromAuthHeader extracts the token from the Authorization header .
3534	FromParameter returns a TokenExtractor that extracts a token from a URL query parameter .
3535	FromFirst returns a TokenExtractor that extracts the first token from the request .
3536	getelloPacket returns the PUBSUB packet .
3537	NewFloodsubWithProtocols creates a new FloodSub router with the given protocols .
3538	NewFloodSub creates a new FloodSub PubSub .
3539	NewLRUBlacklist creates a Blacklist with the given capacity .
3540	NewRandomSub creates a new random sub router .
3541	NewGossipSub creates a new PubSub .
3542	NewPubSub creates a new PubSub .
3543	WithValidateThrottle sets the maximum number of messages that should be sent to the client .
3544	WithBlacklist sets the blacklist for the PubSub .
3545	handleRemoveSubscription is called when a subscription is removed from the PubSub .
3546	handleAddSubscription is used to add a subscription to a topic .
3547	announce sends an announce message to all peers .
3548	notifySubs sends a message to all subscribers .
3549	seenMessage returns whether or not a message has been seen .
3550	subscribedToMsg returns true if this PubSub is subscribed to the given message .
3551	msgID returns the message ID .
3552	pushMsg is used to push a message to the PubSub .
3553	validate validates a message .
3554	validateSingleTopic is used to validate a single topic
3555	getValidators returns the validators for the given message .
3556	Subscribe subscribes to a topic .
3557	SubscribeByTopicDescriptor subscribes to the given topic descriptor .
3558	GetTopics returns a list of topics
3559	Publish sends a message to the given topic .
3560	ListPeers lists all peers for a given topic .
3561	WithValidatorTimeout sets the timeout for the validator .
3562	WithValidatorConcurrency sets the number of concurrent validators to use .
3563	RegisterTopicValidator registers a validator for the given topic .
3564	UnregisterTopicValidator removes validator for given topic .
3565	DefaultMetricPrefix returns the default metric prefix .
3566	MetricWithPrefix returns a metric with the given prefix and name and tags .
3567	NewClient creates a new TChannel client .
3568	Call makes a call to the TChannel API .
3569	CallPeer sends a call to a TChannel peer .
3570	CallSC calls the given method on the given SubChannel .
3571	ReadResponse reads a response from a TChannel call .
3572	writeHeaders writes the response headers to the response .
3573	ResponseWriter creates a new TChanResponseWriter .
3574	ReadHeaders reads headers from an io . Reader .
3575	NewTCPRawRelay creates a Relay from a list of strings .
3576	NewClient creates a new TChannel client .
3577	Advertise advertises the client to the given services .
3578	Handle handles an incoming call .
3579	Start starts the server .
3580	Port returns the port of the server .
3581	SetStrategy sets the strategy for each peer in the list .
3582	Add adds a new peer to the list .
3583	GetNew returns a new peer from the list or returns ErrNoNewPeers if no peer is found .
3584	Get returns a peer from the list . If no peer is found an error is returned .
3585	Remove removes a peer from the list .
3586	Copy returns a copy of the peer list .
3587	Len returns the number of peers in the list .
3588	exists returns whether or not the peer with the given hostPort exists .
3589	getPeerScore returns the peer score and whether the peer was found .
3590	onPeerChange is called when a peer is changed .
3591	updatePeer updates the peer score .
3592	getConn returns the connection at index i .
3593	GetConnection returns a connection to the peer .
3594	getConnectionRelay returns the connection relay for the peer .
3595	canRemove returns whether or not the peer can be removed .
3596	addConnection adds a connection to the peer .
3597	removeConnection removes a connection from a peer . Returns true if the connection was removed .
3598	connectionCloseStateChange removes a connection from the peer s inbound and outbound connections .
3599	Connect is part of the Peer interface .
3600	BeginCall starts a new outbound call .
3601	NumConnections returns the number of inbound and outbound connections .
3602	NumPendingOutbound returns the number of pending outbound connections .
3603	isEphemeralHostPort returns true if the given hostPort is an ephemeral host .
3604	Get returns the value for the given key .
3605	Set sets the value for the given key .
3606	ClearAll clears all values .
3607	NewChannel creates a new channel .
3608	Serve is used to listen on the given listener .
3609	ListenAndServe is used to listen on the given host .
3610	Register registers a handler for the given method name .
3611	PeerInfo returns the local peer info .
3612	GetSubChannel returns the sub channel for the given service name .
3613	serve is a long lived goroutine that handles incoming connections .
3614	Ping is part of the Channel interface .
3615	StatsTags returns a map of common stats tags .
3616	Connect establishes a new connection to the remote host .
3617	exchangeUpdated is called when an exchange has been updated .
3618	updatePeer updates the state of the peer .
3619	addConnection adds a connection to the channel . Returns true if the connection was added .
3620	removeClosedConn removes a closed connection from the channel .
3621	connectionCloseStateChange updates the state of the connection .
3622	State returns the state of the channel .
3623	NewReader returns a new Reader .
3624	ReadUint16 reads a uint16 from the reader .
3625	ReadString reads a string from the reader .
3626	ReadLen16String reads a string of length 16 .
3627	Register registers the behavior with the given channel .
3628	Run runs the behavior .
3629	Get returns a new relayTimer from the pool or panics if the pool is empty .
3630	Put releases the relayTimer from the pool .
3631	Start starts the timer . It panics if the timer is already active .
3632	Release releases the relay timer .
3633	NewLogger creates a new logger .
3634	NewTCPFrameRelay creates a new Relay .
3635	tallyTags returns a map of tally tags .
3636	Isolated sets up the sub channel as isolated .
3637	Isolated returns whether the sub channel is isolated .
3638	Register registers a handler for the given method name .
3639	GetHandlers returns the handlers for this SubChannel .
3640	StatsTags returns the stats tags for this subchannel .
3641	registerNewSubChannel adds a new sub channel to the map .
3642	get returns the SubChannel for the given service name .
3643	getOrAdd returns an existing SubChannel or adds it if it doesn t exist .
3644	Discover returns a list of host ports for the given service name .
3645	Start starts the client .
3646	listen creates a new listener for the client .
3647	WriteRequest writes an HTTP request to an ArgWritable .
3648	ReadRequest reads a request from a tchannel . ArgReadable
3649	NewReadBufferWithSize returns a new ReadBuffer with the given size .
3650	ReadByte reads a single byte from the ReadBuffer .
3651	ReadBytes reads n bytes from the ReadBuffer .
3652	ReadString reads n bytes as a string .
3653	ReadUint16 reads a 16 - bit unsigned integer from the buffer .
3654	ReadUint32 reads a 32 - bit integer from the buffer .
3655	ReadUint64 reads a 64 - bit unsigned integer from the buffer .
3656	ReadUvarint reads a uint64 from the ReadBuffer .
3657	ReadLen8String reads a string of length 8 .
3658	ReadLen16String reads a length 16 string from the buffer
3659	FillFrom fills the ReadBuffer with n bytes from ior .
3660	Wrap implements the io . Reader interface for ReadBuffer .
3661	WriteSingleByte writes a single byte to the buffer .
3662	WriteBytes writes a slice of bytes to the buffer .
3663	WriteUint16 writes a uint16 to the buffer .
3664	WriteUint32 writes a uint32 to the buffer .
3665	WriteUint64 writes a uint64 to the buffer .
3666	WriteUvarint writes n to the buffer .
3667	WriteString writes a string to the buffer .
3668	WriteLen8String writes a string to the buffer .
3669	WriteLen16String writes a string to the buffer .
3670	DeferByte returns the next byte in the buffer .
3671	DeferBytes returns the number of bytes written to the buffer .
3672	FlushTo flushes the buffer to the given io . Writer
3673	Reset resets the write buffer .
3674	Wrap sets the write buffer to b .
3675	Update updates the value of a Uint16Ref .
3676	Update updates the value of the Uint32Ref .
3677	Update updates the value of the Uint64Ref .
3678	Update implements the BytesRef interface .
3679	UpdateString updates the BytesRef with the given string .
3680	ArgReader returns a new ArgReader .
3681	finish updates the checksum and flags of the fragment .
3682	newWritableChunk creates a new writableChunk .
3683	writeAsFits writes b to the chunk s contents . Returns the number of bytes written .
3684	newFragmentingWriter creates a new fragmentingWriter .
3685	ArgWriter returns a new ArgWriter .
3686	BeginArgument starts a new argument .
3687	Write is part of the io . Writer interface .
3688	Flush flushes the current chunk and fragment .
3689	Close implements the io . Writer Close interface .
3690	handleCallRes sends a call response frame to the remote peer .
3691	Arg2Reader returns an ArgReader from the OutboundCallResponse .
3692	handleError sends an error frame to the remote peer .
3693	doneReading implements the OutboundCallResponse interface for OutboundCallResponse .
3694	newFragment creates a new fragment .
3695	flushFragment sends a writableFragment to the response writer .
3696	failed is used to mark the writer as failed .
3697	arg1Reader returns an ArgReader for the first argument .
3698	arg2Reader returns a new ArgReader .
3699	arg3Reader returns an Arg3Reader .
3700	argReader returns an ArgReader .
3701	recvNextFragment reads the next fragment from the connection .
3702	releasePreviousFragment releases the previous fragment .
3703	failed is used to mark the reader as failed .
3704	parseInboundFragment parses an inbound fragment .
3705	NewContext creates a new context with the given timeout .
3706	WithHeaders returns a new context with the given headers .
3707	healthCheck performs a health check on the connection .
3708	SetTimeout sets the timeout for the context .
3709	AddHeader adds a header to the context .
3710	SetHeaders sets the headers for the request .
3711	SetConnectTimeout sets the connection timeout .
3712	SetRetryOptions sets the retry options .
3713	SetTimeoutPerAttempt sets the timeout per attempt .
3714	SetParentContext sets the parent context
3715	Build returns a new ContextWithHeaders and a cancel func .
3716	overrideHeaders overrides the given headers with values from the call options .
3717	Read reads from the ArgReadHelper .
3718	ReadJSON reads a JSON string from the input .
3719	NewArgWriter creates a new ArgWriteHelper .
3720	Write implements the ArgWriter interface .
3721	WriteJSON writes a JSON - encoded value to the output .
3722	Register registers an HTTP handler to the registrar .
3723	Count returns the number of items in the relay .
3724	Get returns the relayItem with the given id .
3725	Add adds an item to the list of relay items .
3726	Entomb adds a new relay item to the list of relay items . Returns the new relay item and whether or not it was added to the list .
3727	NewRelayer creates a new Relayer .
3728	Relay sends a frame to the Relayer .
3729	Receive sends a frame to the Relayer .
3730	handleNonCallReq handles a non - call request frame .
3731	addRelayItem adds a new relay item to the relay .
3732	failRelayItem attempts to fail a relay item .
3733	WriteStruct writes a struct to the given io . Writer .
3734	ReadStruct reads a struct from reader .
3735	EnsureEmpty checks if the reader is empty and returns an error if it is .
3736	NewServer returns a new thrift server .
3737	Advertise connects to the given hyperbahn hosts .
3738	handleCallReqContinue sends a call - req - continue frame to the remote peer .
3739	dispatchInbound is used to dispatch an inbound call .
3740	CallOptions returns the options for the inbound call .
3741	Response returns the response .
3742	SendSystemError sends a system error to the client .
3743	SetApplicationError sets the applicationError flag .
3744	Arg2Writer returns an ArgWriter .
3745	doneSending is called when the response is done sending .
3746	newState creates a new State from a Thrift struct .
3747	rootType returns the root type for the given thrift type .
3748	checkInclude returns the global state and the thrift type and the include .
3749	isResultPointer returns true if the given thriftType is a pointer to a result pointer .
3750	goType returns the Go type for the given thrift type .
3751	goTypePrefix returns the Go type name for the given thrift type .
3752	NewContext creates a new context with the given timeout .
3753	newIncomingContext creates a new context for the incoming call .
3754	CurrentCall returns the current call .
3755	New returns a new rand . Rand with the given seed .
3756	Health implements the meta . HealthHandler interface .
3757	Headers returns the request headers .
3758	ResponseHeaders returns the response headers .
3759	SetResponseHeaders sets the response headers
3760	Child returns a copy of this context .
3761	Wrap returns a new ContextWithHeaders with the given context .
3762	WrapWithHeaders returns a new ContextWithHeaders with the given headers .
3763	WithoutHeaders returns a context with no headers set .
3764	Notify implements the ErrorNotifier interface .
3765	forwardPeerFrame forwards the given frame to the remote peer .
3766	recvPeerFrame is used to receive a peer frame from the message exchange .
3767	recvPeerFrameOfType reads a single frame from the peer and returns it .
3768	shutdown shuts down the message exchange .
3769	newMessageExchangeSet creates a new message exchange set .
3770	addExchange adds a messageExchange to the messageExchangeSet .
3771	newExchange creates a new message exchange .
3772	deleteExchange deletes an exchange from the messageExchangeSet .
3773	removeExchange removes an exchange from the message exchange set .
3774	expireExchange removes an exchange from the set .
3775	forwardPeerFrame forwards the given frame to the message exchange .
3776	copyExchanges returns a copy of the exchanges in the messageExchangeSet .
3777	stopExchanges stops all exchanges in the message exchange set .
3778	NewFrame creates a new frame .
3779	ReadBody reads the frame body from the given io . Reader .
3780	WriteOut writes the frame to the given io . Writer .
3781	CanRetry returns whether or not the given error can be retried .
3782	HasRetries returns true if the request has retries .
3783	SinceStart returns the duration since the start of the request . If the request is nil then fallback is returned .
3784	AddSelectedPeer adds a selected peer to the request state .
3785	RunWithRetry runs the given function with a retryable error .
3786	ChecksumSize returns the size of the checksum .
3787	New returns a new Checksum .
3788	parseTemplates takes a list of template files and returns a list of templates .
3789	NewStringSliceFlag creates a new string slice flag .
3790	withStateFuncs adds state functions to the template .
3791	IntrospectOthers returns a map of services to their channel states .
3792	ReportInfo returns information about the channel .
3793	IntrospectState returns a map of peer names to runtime state .
3794	IntrospectState returns the runtime state for each subchannel .
3795	IntrospectState returns the runtime state of the peer .
3796	IntrospectState returns the runtime state of the connection .
3797	IntrospectState returns a RelayerRuntimeState .
3798	IntrospectState returns the RelayItemSetState for the given name .
3799	IntrospectState returns the runtime state of the exchange set .
3800	NewContext creates a new context with the given timeout .
3801	WriteResponse writes the response to the response .
3802	Wrap wraps a handler into a tchannel . Handler .
3803	initFromOpenTracing injects the zipkin span into the context .
3804	startOutboundSpan starts an outbound span .
3805	intToIP4 converts an integer to a net . IP .
3806	servicePeerToHostPort converts a service peer to a host - port string .
3807	NewStatsdReporter creates a new statsd reporter .
3808	UnmarshalText implements the encoding . TextUnmarshaler interface .
3809	Push adds a peer score to the heap .
3810	Pop removes the last peer from the heap .
3811	updatePeer updates the peer score in the heap .
3812	removePeer removes a peer from the heap .
3813	pushPeer adds a peer to the heap .
3814	addPeer adds a peer to the heap .
3815	NewClient creates a new TChanClient .
3816	Add adds a new peer to the list .
3817	Get returns the peer with the given hostPort .
3818	WithTimeout is an Option to set a timeout .
3819	Methods returns a list of methods for this service .
3820	InheritedMethods returns the list of methods inherited by this service .
3821	Arguments returns the arguments of the method .
3822	ArgList returns the list of arguments for the method .
3823	CallList returns a list of arguments for a method .
3824	RetType returns the return type of the method .
3825	WrapResult wraps the return value of the method .
3826	ReturnWith returns the response name and error name .
3827	Declaration returns a string representation of the field .
3828	startIdleSweep starts an idle sweep .
3829	start starts the idleSweep poller .
3830	Stop stops the idleSweep .
3831	ResolveWithGoPath resolves a file from the GOPATH .
3832	setExtends sets ExtendsService and ExtendsPrefix
3833	register registers a handler for the given method .
3834	NewClient creates a new client .
3835	ListenIP returns a net . IP that is listening on the network .
3836	Close closes the listener .
3837	ReadArgsV2 reads arguments from tchannel . ArgReadable .
3838	WriteArgs writes the arguments to an outbound call .
3839	Call starts a new TChannel RPC call .
3840	CallSC sends a call to a sub - channel .
3841	CallV2 sends a call to the TChannel .
3842	NewRealRelay creates a new relay .
3843	NewServer creates a new TChannel server .
3844	RegisterHealthHandler registers a health handler for the server .
3845	Handle handles an incoming call .
3846	MetricsKey returns the metrics key for the system error code .
3847	NewSystemError creates a new system error .
3848	NewWrappedSystemError creates a new SystemError from a wrapped error .
3849	Error implements the error interface for SystemError .
3850	GetContextError returns an error if the error is a context . DeadlineExceeded error .
3851	GetSystemErrorCode returns the system error code .
3852	ping sends a ping message to the server .
3853	handlePingRes is used to handle a ping response frame .
3854	handlePingReq handles a ping request .
3855	SendSystemError sends an error frame to the remote peer .
3856	connectionError is used to handle a connection error .
3857	withStateLock calls f with a lock on the connection s state .
3858	withStateRLock is used to lock the connection s state .
3859	readFrames reads frames from the connection .
3860	writeFrames sends frames to the connection .
3861	hasPendingCalls returns true if the connection has pending calls .
3862	checkExchanges checks if the connection has exchanges .
3863	closeNetwork closes the underlying network connection .
3864	getLastActivityTime returns the last activity time .
3865	Validate validates a service .
3866	logFailedRegistrationRetry logs an error if the registration failed .
3867	initialAdvertise sends an advertising message to the Hyperbahn server .
3868	Service returns the service name .
3869	TTL returns the TTL of the request .
3870	SetTTL sets the TTL of the request .
3871	finishesCall returns true if the frame ends with a call .
3872	Flat returns a flat list of platform strings .
3873	Map applies a function to each string in the PlatformStrings .
3874	MapSlice maps a slice of strings into a PlatformStrings .
3875	GetProtoConfig returns the proto config if it exists or nil otherwise .
3876	MapExprStrings maps strings to strings .
3877	FlattenExpr flattens an expression into a single expression .
3878	makePlatformStringsExpr creates a platform strings expression .
3879	String returns a string representation of the platform .
3880	Find finds the workspace file in the given directory .
3881	runGazelle runs gazelle .
3882	restoreBuildFilesInRepo restores all build files in the repo .
3883	FixLoads takes a rule . File and a list of LoadInfo and applies them to the given list of LoadInfo .
3884	fixLoad creates a new load based on the given kinds and known kinds .
3885	newLoadIndex returns the index of the first rule in after .
3886	removeLegacyGoRepository removes the legacy go_repository file .
3887	Compare compares two versions .
3888	ParseVersion parses a version string into a Version .
3889	EmptyFile creates a new empty file .
3890	LoadWorkspaceFile loads a workspace from a file .
3891	LoadMacroFile loads a macro from a file .
3892	EmptyMacroFile creates a new empty macro file .
3893	LoadData loads a file from a byte slice .
3894	LoadWorkspaceData loads workspace data from a file .
3895	LoadMacroData loads a macro from a file .
3896	ScanAST scans the AST for the given package .
3897	ScanASTBody scans the AST body of a file .
3898	MatchBuildFileName returns the full path to the build file .
3899	SyncMacroFile syncs the macro file .
3900	MacroName returns the name of the macro .
3901	Sync syncs the file .
3902	Format returns the bzl format of the file .
3903	Save writes the file to the given path .
3904	HasDefaultVisibility returns true if the file has a default visibility .
3905	NewLoad creates a new Load .
3906	Symbols returns a sorted list of symbols .
3907	Has returns true if the symbol exists .
3908	Add adds a symbol to the load .
3909	Remove removes a symbol from the load .
3910	Insert inserts the Load at the given index in the File .
3911	NewRule creates a new rule .
3912	SetKind sets the rule kind .
3913	AttrKeys returns a sorted list of attribute names .
3914	Attr returns the value of an attribute .
3915	AttrString returns the string value of an attribute .
3916	AttrStrings returns the value of an attribute as a slice of strings .
3917	DelAttr removes an attribute from the rule .
3918	SetAttr adds an attribute to the rule .
3919	PrivateAttrKeys returns a sorted list of private attribute keys .
3920	SetPrivateAttr sets a private attribute
3921	Insert inserts a rule into a file .
3922	IsEmpty returns true if the rule is empty .
3923	CheckInternalVisibility returns the visibility of an internal package .
3924	New creates a new Label .
3925	Rel returns the label relative to the given repository and package .
3926	Equal returns true if two labels are equal .
3927	Contains returns true if l contains other .
3928	generateFromPath generates a proto file from the given root path .
3929	shouldCall returns true if the update rel should be called .
3930	shouldUpdate returns true if the given rel should be updated .
3931	shouldVisit returns true if rel is in updateRels .
3932	SquashRules squashes rules from src to dst .
3933	runClient runs the gazelle server .
3934	UpdateRepo updates the git repository with the given import path .
3935	NewRemoteCache creates a new RemoteCache .
3936	Remote returns the remote and vcs for the given import path .
3937	get returns a value from the cache .
3938	ensure adds a new entry to the cache if it does not exist .
3939	RelBaseName returns the base name for the given relative path prefix and root .
3940	Clone returns a deep copy of the Config .
3941	IsValidBuildFileName returns true if the given build file name is valid .
3942	check returns true if the tagLine is valid .
3943	fileNameInfo returns information about the file name .
3944	otherFileInfo returns the file info for the given path .
3945	protoFileInfo returns a fileInfo from a proto . FileInfo .
3946	AddRule adds a rule to the index .
3947	Finish implements the Index interface for RuleIndex .
3948	buildImportIndex builds the import index .
3949	IsSelfImport returns true if the given label is a self import .
3950	applyKindMappings takes a list of MappedKinds and applies them to the given LoadInfo .
3951	appendOrMergeKindMapping appends or merges the given mapping into the given load info .
3952	RuleName returns the name of a rule .
3953	buildPackages builds a list of packages from protoFiles and genFiles .
3954	selectPackage selects a package from the given directory and rel .
3955	generateProto generates a proto_library rule .
3956	generateEmpty returns a list of empty rules for the given file .
3957	ImportRepoRules imports repo rules from a lock file .
3958	MergeRules merges genRules and existingRules into destFile .
3959	GenerateRule generates a go_repository rule .
3960	FindExternalRepo returns the full path to the external repo .
3961	ListRepositories returns a list of repositories in the given workspace .
3962	migrateLibraryEmbed migrates library embeds to embeds .
3963	migrateGrpcCompilers migrates go_grpc_library to go_proto_library .
3964	squashCgoLibrary squashes cgo_library and go_library rules .
3965	removeLegacyProto removes legacy go_proto_library . bzl from the given file .
3966	removeLegacyGazelle removes the legacy gazelle file .
3967	selectPackage returns the first package that is buildable in the given directory .
3968	AddBuiltin adds a builtin resolver to the metaResolver .
3969	MappedKind adds a new mapped kind to the resolver .
3970	Resolver returns the resolver for the given rule .
3971	sortExprLabels sorts a list of strings .
3972	checkRulesGoVersion checks that rules_go . go is compatible with the latest version of io_bazel_rules_go .
3973	preprocessTags adds the gc tag to the genericTags map
3974	setBuildTags sets build tags
3975	splitValue splits a string into a slice of strings .
3976	copyGoModToTemp copies the go . mod file to a temporary directory .
3977	findGoTool returns the path to the go tool .
3978	isBuildable returns true if the package is buildable .
3979	startServer starts the server .
3980	watchDir watches for changes to a directory .
3981	listDirs returns a list of all directories in the given directory .
3982	shouldIgnore returns true if p should be ignored .
3983	recordWrite is used to record a write to a directory .
3984	getAndClearWrittenDirs returns all written directories .
3985	CombineHandlers takes a list of http . HandlerFunc and applies them to the request .
3986	VerifyContentType verifies that the Content - Type header is equal to the given value .
3987	VerifyMimeType verifies the MIME type of the request .
3988	VerifyBasicAuth verifies that the given username and password are valid .
3989	VerifyJSONRepresenting verifies that the given object is a valid JSON representation .
3990	VerifyFormKV validates the form with the given key and values .
3991	RespondWithProto writes the given message to the response with the given status code .
3992	RegisterFailHandlerWithT registers a fail handler with the given TWithHelper .
3993	EventuallyWithOffset creates an eventually assertion with an optional offset .
3994	ConsistentlyWithOffset creates a new Consistently assertion .
3995	Expect creates a new Assertion .
3996	Eventually returns an AsyncAssertion that waits for an eventually assertion to complete .
3997	Consistently returns an AsyncAssertion that asserts that the actual value is consistent with the given intervals .
3998	TimeoutCloser returns an io . Closer that will block until the timeout expires .
3999	TimeoutReader returns an io . Reader that will block until the timeout is reached .
4000	TimeoutWriter wraps an io . Writer with a timeout .
4001	Nest returns a nested error for the given path .
4002	SetMockService sets the mock service
4003	FindMachineByIdOrAddress finds a machine by ID or address
4004	Write implements the http . ResponseWriter interface .
4005	Hijack implements the http . Hijacker interface .
4006	ListDeploys returns a slice of DeployData .
4007	AddAll adds a new route to the router .
4008	samlRequestTimeout returns the timeout in seconds .
4009	RegisterHandler registers a handler for the given path and method .
4010	RegisterHandlerVersion registers a new TsuruHandler .
4011	Check checks a set of checkers and returns the results .
4012	DiscoverRepositoryPath returns the path to the repository in the given directory .
4013	OpenRepository opens a repository from a path .
4014	RemoteURL returns the URL of a remote .
4015	List lists all Apps in the indexer .
4016	Apps returns an object that can list and get Apps .
4017	List lists all Apps in the indexer for a given namespace .
4018	StreamJSONResponse writes a JSON response to w .
4019	DropDatabase drop a database .
4020	Collection returns a collection
4021	SetLogger sets the logger for the target .
4022	Error logs an error .
4023	Errorf logs an error .
4024	Fatal implements the Target interface .
4025	Debugf logs a debug message .
4026	GetStdLogger returns the standard logger for the target .
4027	Namespace returns the tsuru namespace
4028	recreateContainers creates containers for the specified nodes .
4029	checkProvisioner checks if the provisioner is valid .
4030	checkDocker checks docker configuration .
4031	checkScheduler checks if the scheduler is valid .
4032	checkRouter checks if the default router is configured .
4033	Available returns true if the unit is available .
4034	Get returns a provisioner by name .
4035	Registry returns a list of provisioners
4036	Error returns the error as a string .
4037	validateVersion returns true if supported is greater than current .
4038	ReadTarget reads the tsuru target file .
4039	WriteTarget writes the target file .
4040	WriteOnTargetList writes a list of targets
4041	Conn returns a connection to the database .
4042	Apps returns a collection of apps .
4043	PoolsConstraints returns a collection of pool constraints .
4044	Users returns a collection of users .
4045	SAMLRequests returns a collection of SAML requests .
4046	AppLogCollection returns the log collection for an app .
4047	CreateAppLogCollection creates a log collection for an app .
4048	LogsCollections returns all the logs collections .
4049	ArchiveBuildCmds returns the command line arguments for the archive build command .
4050	ArchiveDeployCmds returns the command line arguments for the deploy command .
4051	DeployCmds returns the command line arguments for deploy - only .
4052	runWithAgentCmds runs tsuru_unit_agent
4053	newApps returns a Apps
4054	Commit commits the container
4055	processTags takes a slice of tags and returns a list of tags to be processed .
4056	aggregateContainersBy returns a map of host addresses to their count .
4057	chooseNodeToAdd choose a node to add to a container
4058	chooseContainerToRemove selects a node to remove a container from
4059	Get returns a router by name .
4060	Default returns the default router name .
4061	Store stores an app router and kind .
4062	TsuruV1 retrieves the TsuruV1Client
4063	Tsuru retrieves the TsuruV1Client
4064	NewAppInformer constructs a new informer for App type . Always prefer using an informer factory to get a shared informer instead of getting an independent one . This reduces memory footprint and number of connections to the server .
4065	NewFilteredAppInformer constructs a new informer for App type . Always prefer using an informer factory to get a shared informer instead of getting an independent one . This reduces memory footprint and number of connections to the server .
4066	Watch returns a watch . Interface that watches the requested apps .
4067	Patch applies the patch and returns the patched app .
4068	NewSharedInformerFactory returns a new SharedInformerFactory .
4069	NewFilteredSharedInformerFactory returns a new SharedInformerFactory .
4070	Proxy is not available for broker services
4071	UnbindUnit unbinds a unit from an instance
4072	Create creates a new plan .
4073	Remove removes a plan .
4074	ensureDefault adds a default plan to the storage .
4075	DeleteInstance deletes a service instance
4076	ToInfo converts a ServiceInstance to a ServiceInstanceWithInfo .
4077	Update updates a service instance .
4078	BindApp binds an app to the service instance .
4079	BindUnit binds a unit to a service instance .
4080	UnbindApp unbinds an app from the service instance
4081	Status returns the status of the service instance .
4082	ProxyInstance proxies an instance .
4083	Inc increments an application s quota .
4084	SetLimit sets the quota limit for an app .
4085	Set sets the quota for an app .
4086	Get returns the quota for an app .
4087	RemoveImage removes an image from the registry
4088	RemoveAppImages removes all images for an app .
4089	Create creates a new platform
4090	List returns all platforms .
4091	FindByName returns a platform by name .
4092	Update updates a platform .
4093	Remove removes a platform from the registry
4094	Rollback rolls back a platform .
4095	GetPoolByName returns a Pool by name .
4096	Manager returns the repository manager
4097	Register adds a repository manager to the registry .
4098	start starts the syncer .
4099	Shutdown shuts down the bind syncer .
4100	GetForProvisioner returns the builder for the provisioner
4101	get returns a builder by name .
4102	Registry returns a list of builders .
4103	RegisterQueueTask registers a task in a queue .
4104	Apps returns a AppInformer .
4105	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new App .
4106	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new AppList .
4107	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new AppSpec .
4108	Write implements the io . Writer interface .
4109	ResetPassword resets a user s password .
4110	addKnownTypes adds known types to the scheme .
4111	Register registers a Shutdownable .
4112	Do sends a shutdown message to the given writer .
4113	ListImagesOrDefault returns the list of images for the platform .
4114	MigrateAppsCRDs migrates CRDs for apps .
4115	Register registers a migration function .
4116	RegisterOptional registers an optional migration function .
4117	Run runs the command .
4118	Units returns the units of the app .
4119	MarshalJSON returns a JSON representation of the app .
4120	AcquireApplicationLockWait waits for an application lock to be acquired .
4121	ReleaseApplicationLock releases the application lock .
4122	GetByName returns an app by name
4123	AddUnits adds n units to the app .
4124	SetUnitStatus sets the status of a unit
4125	UpdateNodeStatus updates the node status
4126	available returns true if the app is available .
4127	Grant grants access to an app
4128	Revoke removes a team from the app
4129	GetTeams returns a list of teams
4130	setEnv sets the environment variable for the app .
4131	getEnv returns an environment variable by name .
4132	validateNew validates the app name .
4133	validate validates the app configuration .
4134	InstanceEnvs returns a map of environment variables for the specified instance .
4135	Run runs the specified command and writes the results to w .
4136	GetUnits returns a slice of bind . Unit
4137	GetUUID returns the UUID of the app .
4138	Envs returns a copy of the app s environment variables .
4139	SetEnvs sets the environment variables for the app .
4140	UnsetEnvs removes all environment variables from the app .
4141	AddCName adds cnames to the app .
4142	Log sends a log message to the app .
4143	LastLogs returns the last lines of logs .
4144	List returns all apps that match the given filter .
4145	Swap swaps two apps .
4146	Start starts the app .
4147	GetDbDriver returns a DbDriver by name .
4148	GetCurrentDbDriver returns the current database driver
4149	NewForConfig creates a new Clientset for the given config .
4150	GetAppFromUnitID returns the app for the given unit ID .
4151	NewPipeline creates a new Pipeline .
4152	Result returns the result of the last action .
4153	DecodeJsonPayload decodes the JSON payload of the request .
4154	UrlFor returns the URL for the given path and query params .
4155	GetCorsInfo returns the CORS information for the request .
4156	MiddlewareFunc returns a HandlerFunc that accepts CORS requests .
4157	MiddlewareFunc returns a HandlerFunc that wraps the given HandlerFunc .
4158	WriteHeader implements the http . ResponseWriter interface .
4159	MakeRouter creates a new router .
4160	AppFunc returns a handler for the given HTTP method and URL .
4161	escapedPath returns the escaped path from the request URI .
4162	escapedPathExp returns the escaped pathExp .
4163	start starts the router .
4164	ofFirstDefinedRoute returns the first defined route
4165	findRouteFromURL finds the route for the given HTTP method and URL .
4166	MiddlewareFunc returns a HandlerFunc that checks the Content - Type and charset .
4167	CloseNotify implements the http . CloseNotifier interface .
4168	MiddlewareFunc returns a middleware that will log the response to the client .
4169	executeTextTemplate executes the text template
4170	RemoteUser returns the remote user
4171	ApacheQueryString returns the query string
4172	StartTime returns the start time if set .
4173	ApacheRemoteAddr returns the IP address of the client .
4174	ResponseTime returns the response time if set .
4175	MiddlewareFunc returns a HandlerFunc that will indent the response .
4176	EncodeJson encodes v to JSON .
4177	WriteHeader implements the http . ResponseWriter interface .
4178	MakePath returns the route path with the given parameters .
4179	MiddlewareFunc returns a middleware that will recover from panics .
4180	WrapMiddlewares wraps a HandlerFunc with one or more middlewares .
4181	MiddlewareFunc returns a HandlerFunc that can be used as a middleware .
4182	WriteHeader implements the http . ResponseWriter interface .
4183	Hijack implements the http . Hijacker interface .
4184	Write implements the http . ResponseWriter interface .
4185	MiddlewareFunc returns a HandlerFunc that performs basic authentication .
4186	printDebug prints debug information about the node .
4187	AddRoute adds a route to the trie .
4188	printDebug prints debug information about the trie .
4189	FindRoutes returns a list of routes for the given HTTP method and path .
4190	FindRoutesAndPathMatched returns a list of routes that match the given HTTP method and path .
4191	FindRoutesForPath returns a list of routes matching the given path .
4192	Use adds middlewares to the API stack .
4193	MakeHandler returns a new http . Handler .
4194	MiddlewareFunc adds the X - Powered - By header to the given HandlerFunc .
4195	MiddlewareFunc returns a HandlerFunc that wraps the given HandlerFunc .
4196	GetStatus returns the status of the middleware
4197	MiddlewareFunc returns a HandlerFunc that will respond with a JSONP response .
4198	Flush flushes the response .
4199	MiddlewareFunc returns a middleware that prints the access log record as JSON .
4200	Fetch fetches the object from S3 .
4201	sanityCheck checks environment variables and returns true if they are valid .
4202	release is used to release the overseerListener .
4203	fetchLoop is a long lived routine that runs the master s fetch loop .
4204	forkLoop is the main loop for the master .
4205	Init initializes the File .
4206	Fetch returns the contents of the file or an error if the file does not exist .
4207	Fetch returns an io . Reader that reads from the given URL . If the URL is not found an error is returned .
4208	NewConfig creates a new Config .
4209	Validate validates the configuration .
4210	NewClient creates a new Sarama client .
4211	AsyncClose closes the partition consumer asynchronously .
4212	Close closes the partition consumer .
4213	MarkOffset updates the offset and metadata of the consumer .
4214	NewConsumer creates a new consumer .
4215	MarkOffsets marks all offsets in the stash .
4216	ResetOffset resets the offset for the given message .
4217	Close closes the consumer .
4218	hbLoop is a long lived goroutine that sends a heartbeat to the consumer . The stopped channel is closed when the consumer is dying .
4219	twLoop is a long running routine that periodically refreshes the consumer s topics .
4220	cmLoop is a long lived goroutine to commit offsets to the consumer .
4221	fetchOffsets fetches offsets from the consumer group .
4222	MarkOffset marks the offset for the given message .
4223	ResetOffset resets the offset for a given consumer message .
4224	Offsets returns a map of all the offsets in the stash .
4225	Actual returns the actual instance of the InstanceGroup .
4226	Expected returns the immutable cluster and the expected instance subnet .
4227	Delete removes the instance group from the cluster
4228	GetReconciler returns a reconciler for the given cluster .
4229	GetVersion returns the Kubicorn version
4230	GetVersionJSON returns the version as a JSON string
4231	Actual creates a new resource group .
4232	Expected returns an immutable copy of the resource group and a new resource .
4233	CreateCmd returns a cobra command for create subcommands
4234	NewUbuntuCluster creates a new ubuntu cluster
4235	ProviderConfig returns the ControlPlaneProviderConfig
4236	SetProviderConfig sets the ControlPlaneProviderConfig
4237	MachineProviderConfigs returns a list of MachineProviderConfigs
4238	SetMachineProviderConfigs sets the provider configs for the machine set
4239	NewCluster creates a new Cluster
4240	DeployControllerCmd returns a cobra command for deploy controller
4241	NewRetrier creates a new Retrier
4242	RunRetry runs the retryable function .
4243	MustGenerateRandomBytes is like GenerateRandomBytes but panics on error .
4244	ExplainCmd returns a cobra command for explain
4245	TimeOrderedUUID returns a random time ordered UUID .
4246	GetConfigCmd returns a cobra command for getconfig
4247	RunAnnotated runs a task with the specified description and symbol .
4248	ListCmd returns a new instance of ListCmd
4249	NewUbuntuCluster creates a new ubuntu cluster
4250	EditCmd returns a new instance of edit command
4251	RemoveKey removes a key from the keyring .
4252	RemoveKeyUsingFile removes a key from the keyring
4253	Actual returns the actual firewall
4254	Expected returns an immutable copy of the firewall and a cloud resource .
4255	Apply applies the firewall to the immutable cluster .
4256	Delete removes the firewall from the cluster .
4257	DeleteCmd returns a cobra command for delete subcommands
4258	NewStateStore creates a new state store
4259	Commit commits the given cluster .
4260	ApplyCmd returns a cobra command for kubicorn apply
4261	ExpandPath expands a path to the current working directory .
4262	CompletionCmd returns the completion command
4263	AdoptCmd returns a cobra command for admission
4264	StrEnvDef returns the value of an environment variable or the default value if not found .
4265	IntEnvDef returns the value of an environment variable or the default value if not found .
4266	BoolEnvDef returns the value of an environment variable or the default value if not found .
4267	readFromFS reads a file from the filesystem
4268	VersionCmd returns a cobra command for Kubicorn version
4269	NewSignalHandler creates a new Handler .
4270	Register registers the handler .
4271	NewUbuntuCluster creates a new ubuntu cluster
4272	BeginningOfHour returns the beginning of hour of the current time .
4273	BeginningOfDay returns the beginning of the day of the current time .
4274	BeginningOfWeek returns the beginning of the week of the current day .
4275	BeginningOfMonth returns the beginning of the month .
4276	BeginningOfQuarter returns the beginning of the quarter of the current time .
4277	BeginningOfYear returns the beginning of the year of the current time .
4278	EndOfMinute returns the end of the minute .
4279	EndOfHour returns the end of the hour .
4280	EndOfDay returns the end of the day of the current time .
4281	EndOfWeek returns the end of the week
4282	EndOfMonth returns the end of the month .
4283	EndOfQuarter returns the end of the quarter
4284	EndOfYear returns the end of the year .
4285	MustParse is like Parse but panics on error .
4286	Between returns true if the current time is between begin and end .
4287	ParseInLocation parses a string in the given location .
4288	MustParse is like Parse but panics on error .
4289	MustParseInLocation is like Parse but panics on error .
4290	Between returns true if the given time is between the current time .
4291	NewChannelMemoryBackend creates a new ChannelMemoryBackend .
4292	Start starts the memory backend .
4293	Flush sends a flush event to the backend .
4294	Stop stops the memory backend .
4295	Formatted returns the formatted version of the record .
4296	Message returns the message of the record .
4297	SetBackend sets the leveled backend .
4298	MustGetLogger is like GetLogger but panics on error .
4299	Reset resets the internal state .
4300	IsEnabledFor returns true if the logger is enabled for the given level .
4301	Criticalf logs a message at CRITICAL level .
4302	Warningf logs a warning message .
4303	Noticef logs a message at NOTICE level .
4304	Infof logs with the INFO level .
4305	SetFormatter sets the default formatter .
4306	MustStringFormatter is like NewStringFormatter but panics on error .
4307	formatFuncName returns the name of a function .
4308	Log implements the Backend interface .
4309	LogLevel returns the level of the given log level .
4310	AddModuleLevel adds a module level to the backend .
4311	GetLevel returns the level for the given module .
4312	SetLevel sets the level for the given module .
4313	IsEnabledFor returns true if the given level is enabled for the given module .
4314	MultiLogger creates a new MultiLogger with the given backends .
4315	Log implements the Logger interface .
4316	GetLevel returns the highest level for the given module .
4317	SetLevel implements the Logger interface for MultiLogger .
4318	IsEnabledFor returns true if the logger is enabled for the given level and module .
4319	ConvertColors converts a slice of colors to a slice of strings .
4320	NewSyslogBackend creates a new syslog backend
4321	NewSyslogBackendPriority creates a new syslog backend with the given prefix and priority .
4322	SetBackend sets the default backend .
4323	NewCommander creates a new Commander .
4324	Execute executes a command .
4325	explain prints the usage of the command .
4326	explainGroup prints a human - readable description of a command group .
4327	explain prints the usage of the command .
4328	dealias dealiases the given command .
4329	Execute calls DefaultCommander . Execute
4330	LoadFromData loads a configuration from a byte slice .
4331	LoadFromReader loads a configuration from an io . Reader .
4332	ReloadData loads the configuration from an io . Reader .
4333	AppendFiles appends one or more files to the configuration .
4334	GetKeyList returns the list of keys in the given section .
4335	SaveConfigData writes the config data to out .
4336	SaveConfigFile saves a configuration to a file .
4337	Find returns a new Selection object containing the first matched element .
4338	FindByXPath returns a new Selection object containing the first element that matches the given XPath .
4339	FindByLink returns a new Selection object containing the matched elements .
4340	FindByLabel returns a new Selection object containing the matched elements .
4341	FindByName returns a new Selection that matches the selector with the given name .
4342	FindByClass returns a new Selection object containing the elements whose class matches the given text .
4343	FindByID returns a new Selection object containing the matched elements .
4344	First returns the first element matched by the selector .
4345	FirstByXPath returns the first element that matches the given XPath .
4346	FirstByLink returns a new Selection object containing the first element with the given link text .
4347	FirstByLabel returns a new Selection object containing the first element with the given text .
4348	FirstByName returns a new Selection object containing the first element with the given name .
4349	All adds a selector to the multi - selection .
4350	AllByXPath returns a new MultiSelection that matches all elements matching the given XPath .
4351	AllByLink returns a new multi - selection with the given link text .
4352	AllByLabel returns a new multi - selection that matches all elements with the given label .
4353	AllByName returns a new multi - selection that matches all elements with the given name .
4354	AllByClass creates a new multi - selection that matches all elements with the given class .
4355	AllByID creates a new multi - selection with the given text .
4356	FindForAppium returns a new Selection object containing the matched elements .
4357	Timeout specifies the number of seconds to wait for the connection to be established .
4358	ChromeOptions is an Option to set Chrome options .
4359	JoinPage creates a new page from a URL .
4360	Destroy destroys the page session .
4361	Reset resets the session and local storage .
4362	Navigate will navigate to the given URL .
4363	GetCookies returns all the cookies in the current session .
4364	SetCookie sets a cookie on the page .
4365	DeleteCookie deletes a cookie .
4366	ClearCookies removes all cookies from the session .
4367	URL returns the URL of the page .
4368	Size sets the size of the page .
4369	Screenshot returns a screenshot of the page .
4370	Title returns the page title .
4371	HTML returns the HTML of the page .
4372	PopupText returns the text of the popup .
4373	EnterPopupText enter a popup text .
4374	ConfirmPopup confirms the popup .
4375	CancelPopup cancels the popup .
4376	SwitchToParentFrame switches the page to the parent frame .
4377	SwitchToRootFrame switches the page to the root frame .
4378	NextWindow moves the active window to the next window .
4379	CloseWindow closes the active window .
4380	WindowCount returns the number of windows .
4381	LogTypes returns a list of log types .
4382	MoveMouseBy moves the mouse by the given offset .
4383	DoubleClick double clicks the page .
4384	Click sends a click event to the page .
4385	Click calls Click on each element in the Selection .
4386	DoubleClick double - clicks on each element in the Selection .
4387	Fill fills the selected elements with the given text .
4388	Tap moves the selected elements to the specified event .
4389	Touch touches the elements of the Selection .
4390	FlickFinger flicks the finger on the selected element .
4391	ScrollFinger scrolls the finger on the first element in the selection .
4392	NewCapabilities creates a new Capabilities with the given features .
4393	JSON returns the capabilities as a JSON string .
4394	HaveTitle returns a matcher that matches the given title .
4395	HaveURL returns a GomegaMatcher that matches the given URL .
4396	HavePopupText returns a matcher that matches the popup text .
4397	HaveLoggedError returns a matcher that matches when the user has logged an error .
4398	Text returns the text of the first element in the Selection .
4399	Active returns true if the selected element is equal to the active element .
4400	Attribute returns the value of an attribute in the current set of matched elements .
4401	CSS returns the value of a CSS property .
4402	Selected returns whether the current element is selected .
4403	Visible returns whether the set of matched elements are visible .
4404	Enabled returns whether the current element is enabled or not .
4405	HaveCount returns a matcher that matches the number of elements .
4406	HaveAttribute returns a matcher that matches if the given attribute is equal to the given value .
4407	EdgeDriver creates a new WebDriver with the specified options .
4408	Selendroid creates a new WebDriver from a jar file .
4409	SwitchToFrame switches the current selection to the frame referred to by the element .
4410	Count returns the number of matched elements .
4411	EqualsElement returns true if the selected element is equal to the given element .
4412	MouseToElement moves the mouse to the selected element .
4413	loggingMiddleware logs the request to the log .
4414	chainHandlers returns a middleware that calls each middleware in order .
4415	HTTPReverseProxy starts a reverse proxy server .
4416	CheckInstallation checks if the installation is valid .
4417	CheckVersion checks if the given version is valid .
4418	GetVersionForBinary returns the version of the given binary
4419	getUser returns a user by ID .
4420	login attempts to login to the server .
4421	loginHandler is the handler for the login request .
4422	logoutHandler is the handler for the logout request .
4423	viewHandler renders the login page .
4424	Run starts the user svc client .
4425	WithRequest sets the Interaction s Request .
4426	WillRespondWith sets the response for the Interaction .
4427	isJSONFormattedObject returns true if stringOrObject is a JSON formatted object
4428	ByUsername returns a user by username
4429	ByID returns the user with the given ID .
4430	UserLogin is used to login a user .
4431	newClient creates a new PactClient
4432	NewClient creates a new PactClient .
4433	ListServers returns a list of servers
4434	UpdateMessagePact creates a new pact message
4435	PublishPacts publishes pacts
4436	getPort returns the port of the given URL .
4437	getAddress returns the host part of the URL
4438	sanitiseRubyResponse sanitizes the response from a Ruby process
4439	Publish publishes pacts
4440	FindPortInRange finds the first port in a range
4441	EachLike returns a Matcher that matches when the given value is a string .
4442	Term returns a matcher that matches a regular expression .
4443	UnmarshalJSON implements the json . Unmarshaler interface .
4444	objectToString converts an object into a string .
4445	match returns a matcher for the given type .
4446	AddMessage adds a new message to the pact
4447	AddInteraction adds a new interaction to the pact
4448	Teardown stops the Pact server .
4449	Verify performs an integration test on the Pact .
4450	stateHandlerMiddleware returns a middleware that handles state requests .
4451	VerifyMessageProviderRaw is used to verify a message provider .
4452	VerifyMessageConsumerRaw verifies that the given message is valid .
4453	VerifyProvider is a mock
4454	NewService creates a new service
4455	Setup sets up the service manager
4456	addServiceMonitor starts the service creation monitor .
4457	removeServiceMonitor stops the service removal monitor .
4458	List returns a list of services
4459	Command returns the command for the service manager .
4460	call sends a request to the mock service .
4461	DeleteInteractions deletes all interactions
4462	AddInteraction adds an interaction to the service
4463	WritePact writes a pact to the service .
4464	ExpectsToReceive sets the description of the expected message to receive .
4465	WithMetadata sets the metadata for the message .
4466	AsType sets the type of the message .
4467	UserLogin authenticates a user .
4468	Region returns the region of the S3 endpoint .
4469	New creates a new S3 object .
4470	Bucket creates a new bucket .
4471	PutWriter returns an io . WriteCloser that writes to the given path .
4472	url returns a URL for the given path .
4473	SetLogger sets the logger .
4474	InstanceKeys returns the instance keys .
4475	EnvKeys returns the access key and secret key from the environment .
4476	Sign is used to sign an http . Request .
4477	getAWSKeys returns the AWS keys
4478	homeDir returns the home directory for the current user .
4479	ACL sets the x - amz - acl header .
4480	putPart sends a new part to the upload .
4481	abort aborts a multipart upload .
4482	growPartSize returns true if partSize is greater than maxObjSize - putsz .
4483	CheckDisallowed returns an error if the given prefix is not allowed in the given spec .
4484	Process processes the given spec and returns an error if any .
4485	MustProcess is like Process but panics on error .
4486	toTypeDescription returns a human - readable description of a type .
4487	Usage prints a usage string .
4488	Usagef writes a usage string to out .
4489	Usaget executes the given template and writes the results to out .
4490	Scan implements the sql . Scanner interface .
4491	Value implements the driver . Valuer interface .
4492	NewTime creates a new Time .
4493	TimeFromPtr converts a pointer to a time . Time .
4494	ValueOrZero returns the time . Time value or zero if the value is invalid .
4495	MarshalJSON implements the json . Marshaler interface .
4496	SetValid sets the Valid field to true .
4497	Ptr returns a pointer to the time . Time .
4498	NewBool creates a new Bool .
4499	BoolFromPtr creates a Bool from a pointer to a bool .
4500	UnmarshalJSON unmarshals Bool from JSON .
4501	UnmarshalText implements the encoding . TextUnmarshaler interface .
4502	MarshalJSON implements json . Marshaler interface .
4503	SetValid sets the value of the bool .
4504	NewString creates a new String .
4505	UnmarshalJSON implements the json . Unmarshaler interface .
4506	MarshalText implements the encoding . TextMarshaler interface .
4507	UnmarshalText implements the encoding . TextUnmarshaler interface .
4508	SetValid sets the Valid field s value .
4509	StringFromPtr creates a new String from a pointer to a string
4510	MarshalJSON marshals a String to JSON .
4511	NewInt creates a new Int value .
4512	IntFromPtr creates a new Int from a pointer to an int64 .
4513	UnmarshalJSON unmarshals an Int from JSON .
4514	MarshalText implements the encoding . TextMarshaler interface .
4515	SetValid sets the value of the Int
4516	UnmarshalText implements the encoding . TextUnmarshaler interface .
4517	MarshalText implements the encoding . TextMarshaler interface .
4518	SetValid sets the value of the Float .
4519	MarshalJSON implements the json . Marshaler interface .
4520	UnmarshalJSON unmarshals Float from JSON .
4521	UnmarshalText implements the encoding . TextUnmarshaler interface .
4522	MarshalJSON implements json . Marshaler .
4523	newGossipChannel creates a new gossip channel .
4524	GossipUnicast sends an unicast message to the given destination peer .
4525	GossipBroadcast sends a gossip message to the peer .
4526	Send sends a gossip message to the peer .
4527	SendDown sends the given data down to the gossip channel .
4528	gobEncode encodes a slice of structs into a gob - encoded slice .
4529	newTokenBucket creates a new tokenBucket .
4530	wait waits until the earliest unspent token is less than the tokenInterval .
4531	capacityToken returns the next token in the bucket .
4532	PrefixRangeEnd returns the end of a prefix range .
4533	newLocalPeer creates a new local peer .
4534	getConnections returns a set of all connections in the local peer .
4535	createConnection creates a new connection to the remote peer .
4536	doAddConnection is used to add a connection to the remote peer .
4537	startLocalConnection starts a new local connection .
4538	SendProtocolMsg sends a protocol message to the remote peer .
4539	NewStatus creates a Status from a Router .
4540	makePeerStatusSlice returns a slice of peer status .
4541	makeUnicastRouteStatusSlice returns a slice of unicast route statuses .
4542	makeBroadcastRouteStatusSlice returns a slice of broadcast route statuses .
4543	makeLocalConnectionStatusSlice returns a slice of LocalConnectionStatus .
4544	makeTrustedSubnetsSlice converts a slice of net . IPNet to a slice of strings
4545	Range implements the etcdserverpb . Store interface .
4546	Put is part of the etcdserver . Store interface .
4547	DeleteRange is part of the etcdserver . Store interface .
4548	Txn is part of the Store interface .
4549	Compact is not implemented .
4550	proposeInternalRaftRequest is used to propose an internal Raft request .
4551	applyCompare applies an etcdserverpb . Compare to a kv .
4552	Descriptions returns a slice of peer descriptions .
4553	OnGC adds a callback to be called when a peer is garbage collected .
4554	OnInvalidateShortIDs adds a callback to be invoked when the peer is invalid .
4555	chooseShortID picks a random short ID from the list of peers .
4556	fetchWithDefault adds a new peer to the list of known peers or returns a new one if one does not exist .
4557	Fetch returns the peer with the given name .
4558	fetchAndAddRef returns the peer with the given name .
4559	FetchByShortID returns the peer with the given short ID .
4560	GarbageCollect is used to garbage collect all peers .
4561	newRoutes creates a new routes .
4562	OnChange adds a function to be called when a route changes .
4563	Unicast returns the unicast hop for the given peer name .
4564	UnicastAll returns the hop for the given peer name .
4565	Broadcast returns the broadcast peers for the given peer name .
4566	BroadcastAll is used to broadcast all peers .
4567	NewPeer creates a new peer .
4568	Register registers a gossip to the peer .
4569	ReadFrom implements io . ReaderFrom interface .
4570	WriteTo implements the io . WriterTo interface .
4571	LocalAddr returns the local address of the peer .
4572	OnGossip is called when a peer receives a gossip packet .
4573	OnGossipBroadcast is invoked when a gossip broadcast is received .
4574	OnGossipUnicast sends a gossip unicast packet to the peer .
4575	NewDefaultServer creates a new server .
4576	PeerNameFromUserInput creates a PeerName from a user input string .
4577	bytes returns the peer name as a byte slice .
4578	NewRouter creates a new router .
4579	sendAllGossip sends all gossip messages to all channels .
4580	sendAllGossipDown sends all gossip down messages to all channels .
4581	broadcastTopologyUpdate broadcasts a topology update to all peers .
4582	OnGossipUnicast is invoked when a gossip unicast message is received .
4583	OnGossipBroadcast is invoked when a gossip broadcast is received .
4584	Gossip returns a GossipData for the router .
4585	OnGossip is invoked when a gossip message is received .
4586	Encode encodes the topologyGossipData .
4587	newState creates a new state .
4588	Merge merges the current state with another .
4589	mergeReceived returns a new state with the given set .
4590	mergeComplete returns a new state with the given set .
4591	OnGossipBroadcast implements the GossipListener interface for surrogateGossiper .
4592	OnGossip is called when a gossip message is received .
4593	generateKeyPair generates a new key pair .
4594	formSessionKey computes the session key from the remote public key and private key .
4595	newTCPCryptoState creates a new tcpCryptoState .
4596	Send sends a message .
4597	Send sends a length prefixed TCP message .
4598	Send is part of the Sender interface .
4599	Receive returns the next message from the wire .
4600	Receive reads a length prefix TCP message and returns it .
4601	Receive is used to decrypt an encrypted TCP message .
4602	newPeer creates a new peer .
4603	incr increments the state of the peer .
4604	Gossip returns a copy of the peer s state .
4605	OnGossipUnicast is invoked when a peer receives a gossip unicast message .
4606	makeRaftPeer creates a raft . Peer from a net . Addr .
4607	String returns a string representation of the peer .
4608	forEachConnectedPeer calls f for each connected peer .
4609	parsePeerUID parses a string into a PeerUID .
4610	Swap implements the sort . Interface . Swap .
4611	Less returns whether the element with index i should sort before the element with index j .
4612	doIntro implements the protocol . Intro interface .
4613	filterV1Features returns a copy of the input map .
4614	newConnectionMaker creates a new connectionMaker .
4615	connectionAborted is part of the ConnectionMaker interface .
4616	newGossipSender creates a new gossip sender .
4617	Send sends a GossipData to the sender .
4618	Broadcast adds a new GossipData to the list of broadcasts .
4619	Flush returns true if the gossip sender has been flushed .
4620	Sender returns a gossip sender for the given channel name .
4621	Flush flushes all senders and returns true if all senders have been flushed
4622	findMainPath returns the path to the main file .
4623	Create creates a new channel .
4624	Send sends a message to an application .
4625	SendJSON sends a JSON - encoded message .
4626	remapError converts an APIError to a channel error .
4627	NamespacedContext returns a netcontext with the given namespace .
4628	protoToItem converts MemcacheGetResponse_Item to Item .
4629	singleError returns the first error .
4630	Get retrieves an item from the cache .
4631	GetMulti returns a map of items for a given key .
4632	Delete removes a key from the cache .
4633	DeleteMulti deletes multiple keys .
4634	Increment increments the value of a key .
4635	IncrementExisting increments an existing value .
4636	set sets the value of an item .
4637	Get implements the Codec . Get method .
4638	Stats returns statistics about the cache .
4639	Flush flushes all cache entries .
4640	RunInBackground runs the given function in the background .
4641	List returns a list of all modules .
4642	SetNumInstances sets the number of instances for a module version .
4643	Versions returns the versions of a module .
4644	DefaultVersion returns the default version of the module .
4645	Start starts a module .
4646	Stop stops a module .
4647	Ancestor sets the ancestor of the query .
4648	EventualConsistency sets the eventual consistency flag .
4649	Project adds a projection field to the query .
4650	Distinct sets the distinct flag for the query .
4651	DistinctOn sets the distinct on field names .
4652	KeysOnly sets the keysOnly flag .
4653	Limit sets the limit for the query .
4654	Offset sets the offset for the query .
4655	BatchSize sets the batch size of the query .
4656	Start sets the cursor to the start of the query .
4657	End sets the cursor to the end of the query .
4658	Count returns the number of rows in the query .
4659	Run runs the query .
4660	Next returns the next key in the iterator . If dst is non - nil it will be populated .
4661	Cursor returns the current cursor .
4662	String returns the string representation of the cursor .
4663	DecodeCursor decodes a cursor from a string .
4664	saveEntity saves a single entity .
4665	Namespace returns a new context with the given namespace .
4666	typeof returns the type of a variable or function .
4667	dot returns the dot - notation of the given field or method .
4668	joinFunc returns a string that can be used to execute a function .
4669	validPropertyName returns true if the given property name is valid .
4670	getStructCodec returns the structCodec for the given type .
4671	LoadStruct loads a struct from disk .
4672	SaveStruct saves a struct as a property .
4673	ServingURL returns the URL for the given image key .
4674	DeleteServingURL deletes a serving URL .
4675	CurrentOAuth returns the current OAuth user .
4676	OAuthConsumerKey returns the OAuth consumer key .
4677	String returns the string representation of the user .
4678	LoginURL returns the login URL .
4679	LoginURLFederated creates a login URL for a user .
4680	LogoutURL returns the logout URL for a user .
4681	insertContext adds a context to a call expression .
4682	NewClient creates a new Client .
4683	NewContext returns a new context for the client .
4684	NewRemoteContext creates a new context with the given host and client .
4685	Debugf logs a message at level Debug .
4686	guestbookKey returns the default guestbook key .
4687	toRetryParameters converts RetryOptions to TaskQueueRetryParameters .
4688	NewPOSTTask creates a new task with the given parameters .
4689	ParseRequestHeaders parses the X - AppEngine - Request - Headers
4690	Add adds a task to a task queue .
4691	AddMulti adds multiple tasks to a task queue .
4692	Delete deletes a task from a queue .
4693	DeleteMulti deletes multiple tasks from a task queue .
4694	Lease adds a lease to a queue .
4695	LeaseByTag adds a lease to a queue .
4696	Purge purges a queue .
4697	ModifyLease updates the lease time of a task .
4698	QueueStats returns statistics about the specified queues .
4699	IsTimeoutError returns true if the error is a timeout error .
4700	Func adds a function to the global map .
4701	Task returns a taskqueue . Task for the function .
4702	RequestHeaders returns the request headers from the context .
4703	WithContext returns a new context with the given request .
4704	WithAPICallFunc returns a context that overrides the given APICallFunc .
4705	APICall calls the given method on the given service .
4706	ModuleHostname returns the hostname of a module .
4707	AccessToken returns an access token and expiry time .
4708	PublicCertificates returns a list of public certificates for an app .
4709	ServiceAccount returns the service account name .
4710	SignBytes signs the given bytes using the app identity service .
4711	fetch reads data from the blobstore .
4712	seek moves the reader to the given offset .
4713	multiKeyToProto converts a slice of Key to a proto . Reference .
4714	referenceValueToKey converts a reference value to a Key .
4715	keyToReferenceValue converts a Key to a PropertyValue_ReferenceValue
4716	Put is a convenience wrapper around PutMulti .
4717	PutMulti inserts multiple entities into the datastore .
4718	Delete deletes a key from the database .
4719	DeleteMulti deletes multiple keys .
4720	deploy runs the deploy command .
4721	Next returns the next record in the result .
4722	protoToAppLogs converts a slice of LogLine to AppLog .
4723	protoToRecord converts a RequestLog to a Record .
4724	Run executes the query .
4725	run runs the log service .
4726	Current returns the current user .
4727	IsAdmin returns true if the user is an admin
4728	isErrFieldMismatch returns true if the given error is an ErrFieldMismatch .
4729	Stat returns information about a blob .
4730	Send adds the X - AppEngine - BlobKey header to the response .
4731	UploadURL creates a new upload URL .
4732	Delete deletes a blob .
4733	DeleteMulti deletes multiple blobs .
4734	NewReader returns a new reader for the given blob key .
4735	Handle registers a handler for a message .
4736	Send sends a message to the given JID .
4737	Invite sends an invite to the given JID .
4738	Send sends the presence .
4739	GetPresence returns the presence for the given JID .
4740	GetPresenceMulti returns all the presence for the given JIDs .
4741	newStructFLS creates a FieldLoadSaver for a struct .
4742	SaveStruct saves a struct .
4743	Namespaces returns a list of all namespaces .
4744	Kinds returns a list of all kind names .
4745	RunInTransaction runs a function in a single transaction .
4746	imports returns true if the given file imports the given path .
4747	importSpec returns the import spec for the given path or nil if not found .
4748	declImports returns true if the given import is in the given path .
4749	isPkgDot returns true if t is a dot expression .
4750	isTopName returns true if the given expression is a top - level identifier .
4751	isName returns true if the given expression is an identifier .
4752	isCall returns true if t is a call expression .
4753	refersTo returns true if n refers to x .
4754	isEmptyString returns true if the expression is an empty string .
4755	countUses returns the number of uses in the given scope .
4756	assignsTo returns true if x refers to any variable in scope .
4757	newPkgDot creates a new package dot expression .
4758	renameTop renames the top level declaration of a file .
4759	matchLen returns the index of the first occurrence of x and y .
4760	deleteImport deletes an import from the given file . Returns true if the import was deleted .
4761	rewriteImport rewrites an import from oldPath to newPath .
4762	DefaultTicket returns the default ticket
4763	flushLog flushes the log .
4764	withDeadline returns a new context with the given deadline . If the deadline is zero the parent context is returned .
4765	KeepAlive is part of the Conn interface .
4766	applyTransaction applies a transaction to a proto . Message .
4767	analyze takes a list of tags and returns an app .
4768	buildContext returns a copy of the default context .
4769	synthesizeMain writes the main file to the tar writer .
4770	findInGopath finds a package in the given gopath
4771	copyTree copies all files from srcDir to dstDir .
4772	copyFile copies a file from src to dst .
4773	checkMain checks if the app s main package is valid .
4774	isMain returns true if the function is a main function .
4775	readFile reads a file and checks if it is a main function .
4776	initField returns the value of the field at the given index .
4777	loadEntity loads an entity from a protobuf . EntityProto .
4778	validIndexNameOrDocID returns true if the given string is a valid index name or document ID .
4779	Open opens a new index .
4780	Put adds a single document to the index .
4781	Get returns a single document from the index .
4782	Delete removes an entry from the index .
4783	DeleteMulti deletes multiple documents .
4784	Search returns an iterator for the given query .
4785	fetchMore is used to fetch more items from the iterator .
4786	Next returns the next document in the iterator .
4787	Facets returns a slice of facets .
4788	DefaultBucketName returns the default bucket name .
4789	valid returns true if the key is valid .
4790	Equal returns true if two Key objects are equal .
4791	root returns the root key .
4792	marshal marshals the Key into a bytes . Buffer .
4793	String returns the string representation of the key .
4794	Encode encodes the Key to a base64 encoded string .
4795	DecodeKey decodes a key from a base64 encoded string
4796	NewIncompleteKey creates a new incomplete key .
4797	NewKey creates a new Key .
4798	AllocateIDs allocates n IDs for the given kind and parent .
4799	IsOverQuota returns true if the error is an over quota error .
4800	ClassicContextFromContext creates an appengine . Context from a netcontext . Context .
4801	Send sends a message .
4802	SendToAdmins sends a message to all admins .
4803	Failures returns the number of failures in the report .
4804	decodeFieldNumberAndTyp3 decodes a field number and its type .
4805	checkTyp3 returns an error if typ is not a valid Typ3 .
4806	decodeTyp3 decodes a typ3 byte .
4807	NewPrefixBytes creates a new PrefixBytes from a byte slice .
4808	getLengthStr returns the length string for the given TypeInfo .
4809	collectImplementers_nolock collects all implementers for the given TypeInfo .
4810	checkConflictsInPrio_nolock checks for conflicts in priority list .
4811	constructConcreteType creates a concrete type from the given TypeInfo .
4812	MarshalBinaryLengthPrefixedWriter implements the encoding . BinaryMarshaler interface .
4813	MarshalBinaryBare implements the encoding . BinaryMarshaler interface .
4814	UnmarshalBinaryLengthPrefixed implements the encoding . BinaryUnmarshaler interface .
4815	UnmarshalBinaryBare unmarshals bz into ptr .
4816	MustMarshalJSON is a convenience wrapper around json . Marshaler . MustMarshalJSON .
4817	MustUnmarshalJSON marshals bz into ptr . It panics on error .
4818	MarshalJSONIndent implements the json . Marshaler interface .
4819	newDataReader returns a new internalDataReader .
4820	Read implements the io . Reader interface .
4821	ListenAndServeTLS listens on the given address using TLS .
4822	Produce is a convenience wrapper around ProducerFunc .
4823	PromoteHandlerFunc returns a PromotedHandlerFunc .
4824	Serve runs the given handler on the given listener .
4825	Serve is the main entry point for the server .
4826	Fail prints an error message and exits .
4827	WriteUsage writes the usage information to w .
4828	WriteHelp writes the help for the parser .
4829	MustParse is like Parse but panics on error .
4830	Parse parses the command line flags into dest .
4831	walkFields calls visit for each struct field in v .
4832	Parse parses the command line arguments .
4833	setSlice sets a slice of strings into dest .
4834	canParse returns whether or not the given type can be parsed .
4835	isBoolean returns true if the given type is a boolean .
4836	NewFromMap creates a new Tree from a map .
4837	Insert inserts a new value into the tree . Returns the old value and whether the new value was inserted .
4838	Delete deletes an edge from the tree .
4839	DeletePrefix removes the prefix s from the tree .
4840	deletePrefix deletes a prefix from the tree . Returns the number of nodes deleted .
4841	Get returns the value associated with the given string .
4842	LongestPrefix returns the key and value of the longest prefix in the tree .
4843	Minimum returns the key and value of the minimum node .
4844	WalkPrefix calls fn for each node in the tree starting with the given prefix .
4845	recursiveWalk recursively calls fn for each node in the tree . Returns true if fn returns false .
4846	ToMap returns the tree as a map .
4847	checkip returns the ip type and ipnum and ipindex .
4848	readuint32 reads a uint32 from a file .
4849	readuint128 reads a 64 - bit unsigned integer from the file .
4850	loadmessage loads an IP2Locationrecord from a string
4851	Printrecord prints the IP2Locationrecord .
4852	Main is the main entry point .
4853	SaveToPdfFile writes the given file to the given path .
4854	CubicCurveTo adds a cubic curve to the path .
4855	ArcTo adds an arc to the current path .
4856	String returns a string representation of the path .
4857	VerticalFlip flips the path .
4858	NewGlyphCache creates a new GlyphCacheImp .
4859	Fetch fetches a glyph from the cache .
4860	renderGlyph renders a glyph .
4861	Copy returns a copy of this glyph .
4862	Fill draws the glyph at the given position .
4863	Main is the main entry point .
4864	Draw draws two points .
4865	Paint paints a slice of raster . Span .
4866	SetColor sets the current color .
4867	NewPainter creates a new Painter .
4868	GetStringBounds returns the bounds of a string .
4869	recalc recalculates the current scale .
4870	SetFont sets the current font .
4871	ClearRect clears the given rectangle .
4872	drawString draws a string .
4873	newGroup creates a new group .
4874	newMask creates a new SVG mask .
4875	embedSvgFont embeds a SVG font .
4876	TraceQuad trace a quad .
4877	GetFontName returns the current font name
4878	NewStackGraphicContext creates a new StackGraphicContext
4879	NewFolderFontCache creates a new FolderFontCache .
4880	NewSyncFolderFontCache creates a new SyncFolderFontCache .
4881	Main is the main entry point .
4882	NewPdf creates a new gofpdf object
4883	clearRect draws a rectangle .
4884	NewGraphicContext creates a new GraphicContext .
4885	Clear clears the current page .
4886	GetStringBounds returns the bounds of a string .
4887	CreateStringPath creates a string path .
4888	FillStringAt fills a string at the given position .
4889	SetStrokeColor sets the stroke color .
4890	SetFillColor sets the fill color .
4891	SetLineDash sets the line dash pattern .
4892	SetLineWidth sets the line width .
4893	Main is the main entry point .
4894	Draw draws the given string in the given GraphicContext .
4895	SaveToPngFile saves an image to a png file .
4896	LoadFromPngFile loads an image from a png file .
4897	Resource returns the path to a resource file .
4898	Output returns the output path for a sample .
4899	Main draws a tiger image .
4900	Draw writes a file to the specified GraphicContext .
4901	Main is the main entry point .
4902	Bubble draws a rectangle of the specified width and height .
4903	Dash draws a dashed line .
4904	CubicCurve draws a cubic curve .
4905	FillStroke draws a stroke with the given width and height .
4906	FillStyle draws a rectangle with the given width and height .
4907	PathTransform draws a path .
4908	Star draws a rectangle with the given width and height .
4909	Draw draws a rectangle with the given width and height .
4910	ConvertPath converts a path to a PDF .
4911	Main is the main entry point .
4912	Draw draws two points on the screen .
4913	DrawContour draws a path from the given points .
4914	Flatten flattens a path into the given Flattener .
4915	Clear clears the current image .
4916	ClearRect clears the given rectangle .
4917	DrawImage draws the given image using the given transformation matrix .
4918	Main is the main entry point .
4919	Draw draws an image from a png file .
4920	Draw draws a rectangle .
4921	ChecksumString32S returns a 32 - bit checksum of a string .
4922	ChecksumString64S returns a 64 - bit checksum of a string .
4923	NewS32 creates a new XXHash32 .
4924	NewS64 returns a new instance of XXHash64 .
4925	round64 rounds a 64 - bit value to the nearest power of 2 .
4926	Checksum32S returns a 32 - bit checksum of the input .
4927	Checksum64S returns the 64 - bit checksum of the input .
4928	getStage returns the current stage
4929	New returns a new Glg instance .
4930	Get returns a new Glg instance .
4931	SetMode sets the mode of the logger .
4932	SetPrefix sets the prefix for the logger .
4933	GetCurrentMode returns the current mode for the given level .
4934	InitWriter initializes the logger writer .
4935	SetWriter sets the writer for the logger .
4936	SetLevelColor sets the color function for the log level .
4937	SetLevelWriter sets the writer for the given level .
4938	AddStdLevel adds a new level to the logger .
4939	EnableColor enables the logger s color .
4940	EnableLevelColor enables or disables the given log level .
4941	DisableLevelColor disables the color level of the logger .
4942	RawString returns the string representation of data .
4943	TagStringToLevel returns the level of the given tag .
4944	Println prints a string .
4945	Fatal prints an error and exits the program .
4946	Fatalf prints an error message and exits the program .
4947	isModeEnable returns true if the current mode is enabled .
4948	CaptureMetrics is a convenience function to capture metrics from a http . Handler .
4949	get returns the value at the given position .
4950	Save writes the Cedar to an io . Writer .
4951	SaveToFile saves the Cedar to a file .
4952	Load a Cedar from an io . Reader
4953	LoadFromFile loads a Cedar from a file .
4954	Key returns the key for the given id .
4955	Value returns the value for the given id .
4956	Delete removes a key from the Cedar .
4957	Set sets the version from a string .
4958	Compare compares two versions .
4959	Slice returns a slice of major minor and patch numbers .
4960	BumpMajor increments the major number of the version .
4961	BumpMinor increments the minor number of the version .
4962	BumpPatch increments the patch number .
4963	validateIdentifier checks that the given identifier is a valid semver identifier .
4964	newStream creates a new Stream .
4965	addSubscriber adds a subscriber to the stream .
4966	New creates a new server .
4967	Close closes the server .
4968	CreateStream creates a new stream .
4969	RemoveStream removes a stream from the server .
4970	StreamExists returns true if a stream with the given id exists .
4971	Publish sends an event to the server .
4972	NewClient creates a new Client .
4973	Subscribe subscribes to the given stream .
4974	SubscribeChan subscribes to the given channel .
4975	SubscribeRaw subscribes to a raw message .
4976	Unsubscribe unsubscribes from a channel .
4977	NewEventStreamReader returns a new EventStreamReader .
4978	ReadEvent reads the next event from the stream .
4979	HTTPHandler implements the http . Handler interface .
4980	Add adds an event to the event log .
4981	Replay replays the event
4982	readKey reads a PEM - encoded private key from the given path .
4983	writeKey writes a private key to a file .
4984	anyKey returns a crypto . Signer or an error if the file does not exist .
4985	sameDir returns the same directory as existing .
4986	printAccount prints an acme . Account to w .
4987	tmpl executes a template and writes the result to w .
4988	printUsage prints the usage information to w .
4989	FromRequest returns the real IP address from the request .
4990	Do executes a clear command .
4991	Do performs the disable command .
4992	Do executes the RemoveDOMStorageItem command .
4993	Do executes the setDOMStorageItem command .
4994	Do executes the deliver push message command .
4995	Do executes the dispatch sync event .
4996	Do executes the InspectWorker command .
4997	Do executes the set force update on page load command .
4998	Do executes the SkipWaiting command .
4999	Do executes the start worker command .
5000	Do executes the StopAllWorkers command .
5001	Do executes the StopWorker command .
5002	Do executes the Unregister command .
5003	Do executes the update registration command .
5004	Do executes the bind command .
5005	Do executes the unbind command .
5006	Error implements the error interface for ExceptionDetails .
5007	Do executes the release animations command .
5008	Do executes the SeekAnimations command .
5009	Do executes the setpaused command .
5010	Do executes the SetPlaybackRate command .
5011	Do executes the set timing command .
5012	Do executes the PrepareForLeakDetection command .
5013	Do executes the ForciblyPurgeJavaScriptMemory command .
5014	Do executes the set pressure notifications suppressed command .
5015	Do performs a simulate pressure notification .
5016	WithSamplingInterval sets the SamplingInterval field s value .
5017	You should always use this function to get a new StartSamplingParams instance as then you are sure you have configured all required params
5018	Do executes the start sampling command .
5019	Do executes the StopSampling command .
5020	Do executes the ClearDeviceOrientationOverride command .
5021	Do executes the set device orientation override command .
5022	Do executes the start violations report command .
5023	Do executes the stop violations report command .
5024	String returns a string representation of the modifier .
5025	WithNodeID sets the NodeID optional argument .
5026	WithBackendNodeID sets the BackendNodeID optional parameter .
5027	WithObjectID adds the ObjectID to the get partial AXTree params
5028	You should always use this function to get a new GetPartialAXTreeParams instance as then you are sure you have configured all required params
5029	Do executes the set time domain command .
5030	WithClipRect sets the ClipRect optional parameter .
5031	Do executes a release snapshot command .
5032	Do executes the ClearObjectStore command .
5033	Do executes the delete database command .
5034	Do executes the delete object store entries command .
5035	WithKeyRange sets the KeyRange optional parameter .
5036	Do sets the sampling interval .
5037	Do executes the start command .
5038	WithCallCount sets the CallCount optional parameter .
5039	WithDetailed sets the Detailed field of the StartPreciseCoverageParams instance
5040	Do executes the StartPreciseCoverage command .
5041	Do executes StartTypeProfile command .
5042	Do executes the StopPreciseCoverage command .
5043	Do executes the stop type profile command .
5044	Do executes the set ignore certificate errors command .
5045	Do executes the AddInspectedHeapObject command .
5046	Do executes the CollectGarbage command .
5047	WithSamplingInterval sets the SamplingInterval field s value .
5048	Do executes the start tracking heap objects command .
5049	WithReportProgress sets the ReportProgress optional parameter .
5050	Do executes the stop tracking heap objects command .
5051	WithReportProgress sets the ReportProgress optional parameter .
5052	Do executes the take heap snapshot command .
5053	WithBrowserContextID sets the BrowserContextID for this request
5054	Do executes the grant permissions command .
5055	WithBrowserContextID sets the BrowserContextID for this request
5056	Do executes the ResetPermissions command .
5057	Do executes the crash command .
5058	Do executes the CrashGpuProcess command .
5059	WithQuery sets the Query field s value .
5060	WithTargetID sets the TargetID optional argument .
5061	Do executes the set window bounds command .
5062	WithImage sets the Image field s value .
5063	Do executes the set dock tile command
5064	Do executes the delete cache command .
5065	Do executes the delete entry command .
5066	WithPathFilter sets the pathFilter for this request entries .
5067	Do executes the discard search results command .
5068	Do executes the focus command .
5069	Do executes the MarkUndoableState command .
5070	WithIncludeUserAgentShadowDOM sets the IncludeUserAgentShadowDOM optional parameter .
5071	Do executes the redo command .
5072	Do executes the RemoveAttribute command .
5073	Do executes the RemoveNode command .
5074	Do executes the requestChildNodes command .
5075	WithNodeID sets the NodeID optional parameter .
5076	WithBackendNodeID sets the BackendNodeID optional parameter .
5077	WithExecutionContextID adds the executionContextID to the resolve node params
5078	Do executes the set attribute command .
5079	WithName sets the Name field s value .
5080	Do executes the SetAttributesAsText command .
5081	Do executes the set file input files command .
5082	Do executes the set inspected node command .
5083	Do executes the set node value command .
5084	Do executes the set outer html command .
5085	Do executes the undo command .
5086	Do executes the force pseudo - state command .
5087	Do executes the setEffectivePropertyValueForNode command .
5088	Do executes the start rule usage tracking command .
5089	Do executes a close command .
5090	Do executes the ClearDataForOrigin command .
5091	Do executes the TrackCacheStorageForOrigin command .
5092	Do executes the TrackIndexedDBForOrigin command .
5093	Do executes the UntrackCacheStorageForOrigin command .
5094	Do executes the UntrackIndexedDBForOrigin command .
5095	Do executes the hide highlight command .
5096	Do executes the highlight frame command .
5097	WithNodeID sets the NodeID optional parameter .
5098	WithBackendNodeID sets the BackendNodeID optional parameter .
5099	WithObjectID sets the ObjectID for this highlight node .
5100	WithSelector sets the Selector optional parameter .
5101	Do executes the highlight node command .
5102	Do highlights a quad .
5103	Do highlights the rectangles .
5104	WithHighlightConfig sets the HighlightConfig field s value .
5105	Do executes the set inspect mode command .
5106	Do executes the set show ad highlights command .
5107	WithMessage sets the Message field s value .
5108	Do executes the SetPausedInDebuggerMessage command .
5109	Do executes the set show debug borders command .
5110	Do executes the set show fpscounter command .
5111	Do executes the set show paint rectangles command .
5112	Do executes the set show scroll bottleneck rectangles command .
5113	Do executes the set show hit test borders command .
5114	Do executes the set show viewport size on resize command .
5115	Do clears the browser cache .
5116	Do clears the browser cookies .
5117	You should always use this function to get a new ContinueInterceptedRequestParams instance as then you are sure you have configured all required params
5118	WithRawResponse sets the RawResponse optional parameter .
5119	WithURL sets the URL for this request
5120	WithMethod sets the method for this request .
5121	WithPostData sets the PostData optional parameter .
5122	WithHeaders sets the headers for this request .
5123	WithAuthChallengeResponse sets the AuthChallengeResponse optional parameter .
5124	Do executes a ContinueInterceptedRequest command .
5125	WithURL sets the URL for the delete cookies request
5126	WithDomain sets the domain for the delete cookies request
5127	WithPath sets the path for the delete cookies request
5128	Do executes the delete cookies command .
5129	WithConnectionType adds the connectionType to the emulate network conditions params
5130	Do executes the emulate network conditions command
5131	Do executes the enable command .
5132	WithUrls adds the urls to the get cookies params
5133	Do executes a replayXHR command .
5134	Do executes the SetBlockedURLS command .
5135	Do executes the set bypass service worker command .
5136	Do executes the set cache disabled command .
5137	WithURL sets the URL for this cookie .
5138	WithDomain adds the domain to the set cookie params
5139	WithPath sets the Path field s value .
5140	WithSecure sets the Secure field s value .
5141	WithHTTPOnly sets the HTTPOnly field s value .
5142	WithSameSite sets the SameSite field s value .
5143	WithExpires sets the Expires field s value .
5144	Do executes the set cookies command .
5145	Do executes the SetDataSizeLimitsForTest command .
5146	Do executes the SetExtraHTTPHeaders command .
5147	Do executes a SetRequestInterception command .
5148	Do executes the ClearDeviceMetricsOverride command .
5149	Do executes the ClearGeolocationOverride command .
5150	Do executes the ResetPageScaleFactor command .
5151	Do executes the SetFocusEmulationEnabled command .
5152	Do executes the setCPUThrottlingRate command .
5153	WithColor sets the Color optional parameter .
5154	Do executes the set default background color override command .
5155	WithScale sets the Scale field s value .
5156	WithDontSetVisibleSize sets the DontSetVisibleSize optional parameter .
5157	WithScreenOrientation sets the ScreenOrientation field s value .
5158	Do executes the set device metrics override command .
5159	Do executes the set scrollbars hidden command .
5160	Do executes the set document cookie disabled command .
5161	Do executes the SetEmitTouchEventsForMouse command .
5162	Do executes the set emulated media command .
5163	WithLatitude sets the latitude for the geolocation override .
5164	WithLongitude sets the Longitude field s value .
5165	WithAccuracy sets the Accuracy field s value .
5166	Do executes the set geolocation override command .
5167	Do executes the set page scale factor command .
5168	Do executes the set script execution disabled command .
5169	WithMaxTouchPoints sets the MaxTouchPoints optional parameter .
5170	Do executes the set touch emulation enabled command .
5171	WithBudget sets the Budget field s value .
5172	WithMaxVirtualTimeTaskStarvationCount sets the MaxVirtualTimeTaskStarvationCount optional parameter .
5173	WithWaitForNavigation adds the waitForNavigation parameter to the set virtual time policy params
5174	WithAcceptLanguage sets the AcceptLanguage field s value .
5175	WithPlatform sets the platform for the user agent override .
5176	Do executes the set user agent override command .
5177	Do executes the dispatch key event command .
5178	Do executes the insert text command .
5179	WithButtons sets the Buttons optional argument .
5180	Do executes the dispatch mouse event command .
5181	Do executes a TouchEvent command .
5182	Do emulate touch from mouse event
5183	Do executes the set ignore input events command .
5184	Do executes the synthesize pinch gesture command
5185	WithXOverscroll sets the XOverscroll parameter .
5186	WithYOverscroll sets the YOverscroll parameter .
5187	Do executes the synthesize scroll gesture command .
5188	Do executes the synthesize tap gesture command
5189	Domain returns the domain of the method type .
5190	WithDepth sets the Depth optional argument .
5191	Do executes the RemoveDOMBreakpoint command .
5192	WithTargetName sets the TargetName field s value .
5193	Do executes the RemoveEventListenerBreakpoint command .
5194	Do executes RemoveInstrumentationBreakpoint command .
5195	Do executes the RemoveXHRBreakpoint command .
5196	Do sets the DOM breakpoint .
5197	Do executes the SetEventListenerBreakpoint command .
5198	Do executes the set instrumentation breakpoint command .
5199	Do executes the SetXHRBreakpoint command .
5200	WithExecutor returns a context with the given executor .
5201	Execute executes the given method on the given context .
5202	AttributeValue returns the value of an attribute .
5203	xpath returns the xpath of the node .
5204	String returns a string representation of a NodeType .
5205	Do executes the set sinkToUse command .
5206	Do executes StartTabMirroring command .
5207	Do executes the StopCasting command .
5208	Do executes StartObserving command .
5209	Do executes the StopObserving command .
5210	Do executes the set recording command .
5211	Do executes the ClearEvents command .
5212	WithObjectID sets the ObjectID field s value .
5213	WithArguments sets the Arguments field s value .
5214	WithExecutionContextID sets the ExecutionContextID for this call function on params
5215	WithObjectGroup sets the ObjectGroup field s value .
5216	Do discards console entries .
5217	You should always use this function to get a new EvaluateParams instance as then you are sure you have configured all required params
5218	You should always use this function to get a new GetPropertiesParams instance as then you are sure you have configured all required params
5219	WithGeneratePreview sets the GeneratePreview field s value .
5220	WithExecutionContextID sets the ExecutionContextID for this request
5221	WithObjectGroup sets the ObjectGroup field s value .
5222	Do executes a release object command .
5223	Do executes release object group command .
5224	Do executes the run if waiting for debugger .
5225	Do executes the set custom object formatter enabled command .
5226	Do executes the SetMaxCallStackSizeToCapture command .
5227	Do executes a TerminateExecution command .
5228	Do executes the AddBinding command .
5229	Do executes the RemoveBinding command .
5230	Do executes the end command .
5231	Do executes the record clock sync marker command .
5232	WithBufferUsageReportingInterval sets the BufferUsageReportingInterval optional parameter .
5233	WithNoDisplayUpdates sets the NoDisplayUpdates optional parameter .
5234	You should always use this function to get a new BeginFrameParams instance as then you are sure you have configured all required params
5235	Do executes the BringToFront command .
5236	WithClip sets the Clip optional parameter .
5237	WithFromSurface sets the FromSurface optional parameter .
5238	WithWorldName sets the worldName optional parameter .
5239	WithGrantUniveralAccess adds the grantUniveralAccess to the create isolated world params
5240	Do executes the reset navigation history command .
5241	WithPromptText sets the PromptText optional argument .
5242	Do executes a JavaScript dialog .
5243	WithReferrer sets the Referrer field if set .
5244	WithTransitionType sets the TransitionType field s value .
5245	WithFrameID sets the FrameID optional parameter .
5246	Do executes the NavigateToHistoryEntry command .
5247	WithLandscape sets the landscape parameter if it s set otherwise .
5248	WithDisplayHeaderFooter sets the DisplayHeaderFooter optional parameter .
5249	WithPrintBackground sets the PrintBackground optional parameter .
5250	WithScale sets the Scale optional parameter .
5251	WithPaperWidth sets the PaperWidth optional argument .
5252	WithPaperHeight sets the PaperHeight optional argument .
5253	WithIgnoreInvalidPageRanges sets the IgnoreInvalidPageRanges optional parameter .
5254	WithFooterTemplate sets the FooterTemplate optional parameter .
5255	WithPreferCSSPageSize sets the PreferCSSPageSize optional parameter .
5256	You should always use this function to get a new ReloadParams instance as then you are sure you have configured all required params
5257	Do executes the reload command .
5258	Do executes the RemoveScriptToEvaluateOnNewDocument command .
5259	Do executes the screencast frame ack command .
5260	Do executes the set ad blocking enabled command .
5261	Do executes the SetBypassCSP command .
5262	Do executes the set font families command .
5263	Do executes the set font sizes command .
5264	Do executes the set document content command .
5265	WithDownloadPath sets the DownloadPath field s value .
5266	Do executes the set download behavior command .
5267	Do executes the set lifecycle events enabled command .
5268	WithFormat sets the Format field s value .
5269	WithMaxWidth sets the MaxWidth optional argument .
5270	WithMaxHeight sets the MaxHeight optional parameter .
5271	You should always use this function to get a new StartScreencastParams instance as then you are sure you have configured all required params
5272	Do executes StartScreencast command .
5273	Do executes the StopLoading command .
5274	Do executes the set web lifecycle state command .
5275	Do stops the screencast .
5276	Do executes the setProduceCompilationCache command .
5277	Do executes the AddCompilationCache command .
5278	Do executes the ClearCompilationCache command .
5279	WithGroup sets the Group optional argument .
5280	Do executes the WaitForDebugger command .
5281	Do executes the activate target command .
5282	WithBindingName sets the BindingName optional argument .
5283	Do executes the exposeDevToolsProtocol command .
5284	WithBrowserContextID sets the BrowserContextID field s value .
5285	WithSessionID sets the SessionID for this detach request .
5286	Do executes the detach from target command .
5287	Do executes the DisposeBrowserContext command .
5288	WithSessionID adds the SessionID to the SendMessageToTargetParams instance
5289	Do executes the SendMessageToTarget command .
5290	Do executes the set auto attach command .
5291	Do executes the set discover targets command .
5292	Do executes the set remote locations command .
5293	WithPatterns sets the Patterns optional parameter .
5294	WithHandleAuthRequests sets the HandleAuthRequests optional parameter .
5295	Do executes the FailRequest command .
5296	WithBody sets the Body field s value .
5297	WithResponsePhrase sets the responsePhrase optional parameter .
5298	Do executes a FulfillRequest command .
5299	WithURL sets the URL for this request .
5300	WithMethod sets the method for this request .
5301	WithPostData sets the PostData field s value .
5302	WithHeaders sets the headers for the continue request .
5303	Do executes a ContinueRequest command .
5304	Do executes the ContinueWithAuth command .
5305	Do executes the ContinueToLocation command .
5306	WithIncludeCommandLineAPI sets the IncludeCommandLineAPI field if you want to include command line API .
5307	Do executes the Pause command .
5308	Do executes a PauseOnAsyncCall command .
5309	Do executes the RemoveBreakpoint command .
5310	Do executes the resume command .
5311	Do executes the setAsyncCallStackDepth command .
5312	Do executes the set blackbox patterns command .
5313	Do executes the set blackboxed ranges command .
5314	WithURL adds the URL to the set breakpoint by URL params
5315	WithURLRegex sets the URLRegex field s value .
5316	WithScriptHash adds the scriptHash to the set breakpoint by URL params
5317	WithColumnNumber sets the ColumnNumber field s value .
5318	WithCondition adds the condition to the set breakpoint on function call params
5319	Do executes the set breakpoints active command .
5320	Do executes the set pause on exceptions command .
5321	Do executes the set return value command .
5322	WithDryRun sets the DryRun field s value .
5323	Do executes the SetSkipAllPauses command .
5324	Do executes the set variable value command .
5325	WithBreakOnAsyncCall sets the BreakOnAsyncCall parameter
5326	Do executes a StepInto command .
5327	Do executes the step out command .
5328	Do executes the step over command .
5329	Listen is part of the NotifyBundle interface .
5330	ListenClose is part of the NotifyBundle interface .
5331	Connected implements the NotifyListener interface for NotifyBundle .
5332	Disconnected implements the NotifyListener interface for NotifyBundle .
5333	OpenedStream implements the NotifyStream interface for NotifyBundle .
5334	ClosedStream implements the NotifyStream interface for NotifyBundle .
5335	WithNoDial returns a context with the given reason .
5336	GetNoDial returns the value of noDial if set .
5337	WithDialPeerTimeout returns a context with the given timeout .
5338	Open implements the driver . Driver interface .
5339	Prevpos returns the index of the previous position in the ring buffer .
5340	Last returns the last index in the ring buffer .
5341	DeleteMostRecentBytes removes n bytes from the buffer .
5342	NewFloat64RingBuf creates a new ring buffer of float64 values .
5343	TwoContig returns the first and second values of the ring buffer .
5344	Earliest returns the lowest value in the ring buffer .
5345	Values returns all the values in the ring buffer .
5346	NewAtomicFixedSizeRingBuf creates a new AtomicFixedSizeRingBuf .
5347	Reset resets the buffer .
5348	NewPointerRingBuf creates a new pointer ring buffer .
5349	TwoContig returns the first and second elements of the ring buffer
5350	NumPage returns the number of pages .
5351	Font returns the font with the given name .
5352	Width returns the width of the given code .
5353	Encoder returns an encoder for the font .
5354	Interpret parses a string and invokes the given function for each token .
5355	Open opens a file and returns a new Reader .
5356	NewReader creates a new reader from an io . ReaderAt .
5357	NewReaderEncrypted returns a new reader with encrypted data .
5358	Trailer returns the reader s trailer .
5359	Kind returns the kind of the value .
5360	newBuffer returns a new buffer .
5361	Paginate returns a PaginationInfo object that can be used to paginate the results .
5362	CascadeDelete cascade delete
5363	cascadeDeleteWithConfig cascade a delete operation with the given configuration .
5364	cascadeSaveWithConfig saves the document with the given configuration .
5365	MapFromCascadeProperties creates a map from cascade properties
5366	Connect establishes a connection to the database .
5367	lowerInitial returns the first letter of a string .
5368	Find returns a ResultSet that matches the given query .
5369	RawInformationQuery sends a raw information query to the server .
5370	NewClient creates a new client with the given options .
5371	Close closes the underlying connection .
5372	startTLSIfRequired is used to start TLS if required .
5373	startStream is used to start a stream .
5374	IsEncrypted returns true if the client is encrypted .
5375	Recv returns the next stanza from the client .
5376	Send sends a chat .
5377	SendOrg sends an org to the client .
5378	SendKeepAlive sends a keep - alive message .
5379	SendHtml sends a html message .
5380	nextStart returns the next start element .
5381	JoinProtectedMUC joins a protected MUC presence .
5382	LeaveMUC is used to leave a MUC .
5383	AttachBuffer adds a new attachment to the message .
5384	Attach attaches a file to the message .
5385	Inline adds an inline file to the message .
5386	AddHeader adds a new header to the message .
5387	Tolist returns the list of recipients .
5388	Bytes returns a string representation of the message .
5389	Send sends a message to the given address .
5390	GetHeader returns the header value for the given name .
5391	GetHeaderValues returns the values for the given header name .
5392	SetHeader adds a header to the envelope .
5393	AddHeader adds a header to the envelope .
5394	DeleteHeader removes a header from the envelope
5395	AddressList returns a list of addresses from an envelope .
5396	Clone returns a deep copy of the envelope .
5397	ReadEnvelope reads an envelope from an io . Reader .
5398	EnvelopeFromPart creates an envelope from a Part .
5399	parseTextOnlyBody parses the body of a text part .
5400	parseMultiPartBody parses a multipart body .
5401	matchHTMLBodyPart returns true if the given Part is an HTML body part .
5402	ensureCommaDelimitedAddresses ensures that the given string contains a comma delimited list of addresses .
5403	Date sets the date of the message .
5404	From sets the From field of the MailBuilder .
5405	Subject sets the subject of the message .
5406	To adds a new to address .
5407	ToAddrs sets the to addresses .
5408	CC adds a new CC address .
5409	CCAddrs sets the CC addresses .
5410	ReplyTo adds a reply to address .
5411	Header adds a header to the message .
5412	AddAttachment adds a new attachment to the builder .
5413	AddFileAttachment adds a file attachment to the mail .
5414	AddInline adds a new inline part .
5415	Equals returns true if two MailBuilders are equal .
5416	Encode writes the part to the given writer .
5417	encodeHeader writes the header to b .
5418	encodeContent encodes the content of the Part .
5419	selectTransferEncoding returns the transfer encoding for the given content .
5420	setParamValue sets the value of a parameter .
5421	NewBase64Cleaner creates a new Base64Cleaner
5422	decodeToUTF8Base64Header decodes a header string into a base64 encoded string .
5423	parseMediaType parses a media type and its parameters .
5424	fixMangledMediaType fixes mangled media type .
5425	detectMultipartMessage returns true if this part is a multipart message .
5426	detectBinaryBody returns true if the part is a binary part .
5427	BreadthMatchFirst returns the first part that matches the given matcher . Returns nil if no match was found .
5428	BreadthMatchAll returns all the parts that match the given matcher .
5429	DepthMatchFirst returns the first part that matches the given matcher .
5430	DepthMatchAll returns a slice of Part objects that match the given matcher .
5431	ToASCII converts a string to an ASCII string .
5432	NewPart creates a new Part .
5433	AddChild adds a child to a Part .
5434	TextContent returns true if the content type is text or multipart .
5435	setupHeaders reads the Content - Type and Content - Type headers from r .
5436	setupContentHeaders sets up the Content - Disposition FileName Charset and File - Mod - Date .
5437	convertFromDetectedCharset takes an io . Reader and attempts to convert it to the specified charset . If the charset is not found an error is returned .
5438	Clone returns a deep copy of this Part .
5439	ReadParts reads a single Part from r .
5440	parseParts parses the parts from reader into parent .
5441	UUID returns a random UUID string .
5442	NewQPCleaner returns a new QPCleaner .
5443	Error returns a string representation of the error .
5444	addError adds a new error to the Part .
5445	addWarning adds a warning to the Part .
5446	Wrap wraps a slice of strings with a maximum length .
5447	ConvertToUTF8String converts textBytes to a UTF - 8 string .
5448	JoinAddress joins an array of mail . Address into a single string .
5449	Printf implements the fmt . Printfer interface .
5450	EnvelopeToMarkdown writes a markdown representation of an envelope to w .
5451	FormatPart writes an enmime . Part to w .
5452	newBoundaryReader returns a new boundaryReader .
5453	Read implements the io . Reader interface .
5454	Next advances the reader to the next boundary . It returns whether or not the next boundary was consumed .
5455	Parse returns an object from a slice of bytes starting at offset .
5456	Assign assigns a value to a symbol .
5457	NewRClient creates a new RClient .
5458	NewRClientWithAuth creates a new RClient
5459	Register registers a custom generator for the given identifier .
5460	Fuzz fuzzes the value of a struct
5461	findFakeFunctionFor returns the function for the given fako .
5462	Apply applies the given options to the options .
5463	ToOption returns an Option that sets the options .
5464	waitThenClose blocks until the event channel is closed .
5465	send sends an event to the event channel .
5466	NewMovingAverage creates a new moving average .
5467	Set sets the value of the variable .
5468	calcKeys50 calculates the keys for the given password and salt .
5469	getKeys returns the keys in the archive .
5470	checkPassword checks if the password is valid .
5471	parseFileEncryptionRecord parses a file encryption record .
5472	parseEncryptionBlock parses the encryption block .
5473	newArchive50 creates a new archive50 reader .
5474	Read implements the io . Reader interface .
5475	ReadByte reads a single byte from the cipherBlockReader .
5476	newCipherBlockReader returns a new cipherBlockReader .
5477	newAesDecryptReader returns a new cipherBlockReader using AES - CBC decryption .
5478	limitByteReader returns a new limitedByteReader that reads n bytes from r .
5479	Mode returns the file s mode .
5480	nextBlockInFile reads the next block in the file .
5481	next returns the next block in the file .
5482	Read implements the io . Reader interface for packedFileReader .
5483	Read implements the io . Reader interface .
5484	Next returns the next file header .
5485	NewReader creates a new Reader from an io . Reader .
5486	OpenReader opens a volume and returns a ReadCloser .
5487	getV3Filter returns the v3 filter for the given code .
5488	init initializes the decoder29 .
5489	readBlockHeader reads the block header .
5490	readCodeLengthTable reads the code length table from the bitReader .
5491	shrinkStates is used to shrink a set of states .
5492	expandStates returns a copy of the current set of states .
5493	pushByte is used to push a byte to the heap .
5494	succByte returns the succ byte at index i .
5495	succContext returns the context at the given index . If the index is negative nil is returned .
5496	calcAes30Params calculates the AES30 parameters .
5497	parseDosTime parses a DOS time from a uint32 .
5498	decodeName decodes a name from buf .
5499	readExtTimes reads the modification time creation time and access times from the file block header .
5500	readBlockHeader reads the block header from the archive .
5501	newArchive15 creates a new archive15 block reader .
5502	readFilter5Data reads the filter5 data .
5503	writeByte writes a byte to the window .
5504	copyBytes copies len bytes to the window .
5505	read reads from the window .
5506	queueFilter queues a filter block for decoding .
5507	processFilters is used to process filters .
5508	fill implements the decoder . DecodeReader interface .
5509	Read implements the io . Reader interface .
5510	readFull reads the entire contents of r into buf .
5511	findSig reads the file format version and returns the file format version .
5512	execute executes the given command .
5513	newVM creates a new VM .
5514	limitBitReader returns a bitReader that is limited to n bytes .
5515	readUint32 reads a 32 - bit unsigned integer from the reader .
5516	step3 returns true if the word is step3 .
5517	Stem stems a word
5518	step6 step 6
5519	step5 returns true if the word is a step 5
5520	step2a returns true if the word is a step 2a .
5521	step4 returns true if the word is a step 4 .
5522	Stem takes a word and returns a stemmed string .
5523	step1c step 1c
5524	step3 returns true if there is a step 3 .
5525	isStopWord returns true if the word is a stop word
5526	capitalizeYUI capitalize YUI words
5527	step2 returns true if the word is a step 2 .
5528	step3 returns true if the word is a step 3 .
5529	step0 returns true if the word is a step 0 .
5530	VnvSuffix returns the suffix of a vowel .
5531	step1 returns true if the step is 1 .
5532	step2a returns true if the word is a step 2a .
5533	removePerfectiveGerundEnding removes the perfective gerund ending
5534	removeAdjectivalEnding removes the adjectival ending
5535	step2b returns true if the word is a step2b word .
5536	step4 step 4
5537	step5 returns true if we should step 5 .
5538	Stem stems a word
5539	Stem stems a word
5540	isStopWord returns true if word is a stop word .
5541	isStopWord returns true if word is a stop word .
5542	New creates a new SnowballWord
5543	RemoveLastNRunes removes the last n runs from the word .
5544	resetR1R2 resets the R1 and R2 start values .
5545	slice returns a slice of runes from start to stop .
5546	FitsInR1 returns true if x is in the R1 range .
5547	FitsInR2 returns true if x is in the R2 range .
5548	FitsInRV returns true if x is in the RV
5549	FirstPrefix finds the first prefix in the word
5550	HasSuffixRunes returns true if the word ends with any of the given runes .
5551	FirstSuffixIfIn returns the first suffix if it is in the given range .
5552	RemoveFirstSuffixIfIn removes the first suffix from the word
5553	RemoveFirstSuffix removes the first suffix from the word
5554	FirstSuffix returns the first suffix of the word
5555	preprocess normalizes the given snowball word .
5556	step0 returns true if the step is 0 .
5557	step1b returns true if there is a step 1b .
5558	step2b returns true if the word is a step2b word .
5559	capitalizeYs capitalize Ys
5560	uncapitalizeYs uncapitalizes Ys
5561	stemSpecialWord returns the stemmed string for a special word .
5562	isShortWord checks if the word is a short word .
5563	step1a returns true if there is a step 1a .
5564	Set sets the value for the given key .
5565	Get returns the value for the given key .
5566	Cleanup removes the current goroutine from the data map
5567	getValues returns the values for the current goroutine .
5568	linkGRs links the parent values to the current goroutine .
5569	unlinkGRs removes the current goroutine from the data map .
5570	AppUri returns the URL for an app .
5571	CurlAppWithTimeout is like Curl but with a timeout .
5572	CurlApp sends a curl request to an app .
5573	CurlAppRoot returns the root URL of an app .
5574	GetTags returns a slice of tags from a string .
5575	GetTagsAsUniqueStrings returns a list of tags as unique strings .
5576	isTerminator returns true if the given rune is a terminator .
5577	uniquify takes a slice of strings and returns a new slice of strings .
5578	New creates a new location middleware .
5579	Get returns a url . URL from gin . Context
5580	GenerateRSAKeyPair generates a new RSA private key and public key .
5581	Verify verifies data against sig .
5582	Encrypt wraps rsa . EncryptPKCS1v15
5583	Sign signs the given message with the private key .
5584	GetPublic returns the public key of the private key .
5585	Decrypt decrypts data from the private key .
5586	UnmarshalRsaPrivateKey unmarshals a PEM - encoded Rsa private key .
5587	GenerateKeyPair generates a new keypair for the given type and number of bits .
5588	GenerateKeyPairWithReader generates a key pair from an io . Reader .
5589	GenerateEKeyPair generates an E - key pair using the given curve name .
5590	UnmarshalPublicKey unmarshals a public key from binary protobuf data .
5591	MarshalPublicKey marshals a PubKey to a byte slice .
5592	UnmarshalPrivateKey unmarshals a private key from a byte slice .
5593	MarshalPrivateKey marshals a private key .
5594	KeyEqual returns true if two keys are equal .
5595	GenerateECDSAKeyPair generates a new ECDSA key pair from an io . Reader .
5596	GenerateECDSAKeyPairWithCurve generates a new private and public key pair using the given elliptic curve .
5597	ECDSAKeyPairFromKey creates a new private and public key pair from an ecdsa . PrivateKey .
5598	UnmarshalECDSAPrivateKey unmarshals an ECDSA private key .
5599	UnmarshalECDSAPublicKey unmarshals an ECDSAPublicKey from a byte slice .
5600	Equals returns true if two private keys are equal .
5601	Sign signs data using the ECDSA private key .
5602	Equals checks if two ECDSAPublicKey objects are equal .
5603	Verify verifies the signature of data against the public key .
5604	GenerateSecp256k1Key generates a secp256k1 private key and public key .
5605	UnmarshalSecp256k1PrivateKey unmarshals a secp256k1 private key from a byte slice .
5606	UnmarshalSecp256k1PublicKey unmarshals a secp256k1 public key from a byte slice .
5607	Equals returns true if two secp256k1 private keys are equal .
5608	Sign signs data with the secp256k1 private key .
5609	Equals returns true if two secp256k1 public keys are equal .
5610	Verify verifies the signature of data against the secp256k1 public key
5611	Raw returns the raw bytes of the private key .
5612	Sign signs msg with the private key k .
5613	Equals returns true if k is equal to o .
5614	Verify verifies that data is a valid signature .
5615	UnmarshalEd25519PublicKey unmarshals an Ed25519 public key .
5616	UnmarshalEd25519PrivateKey unmarshals an Ed25519 private key from a byte slice .
5617	EditScriptForStrings returns a new edit script for strings .
5618	EditScriptForMatrix returns the edit script for the given matrix .
5619	WriteMatrix writes the matrix to writer .
5620	New creates a new Lockfile .
5621	GetOwner returns the owner of the lock file .
5622	TryLock attempts to lock the lockfile .
5623	Unlock unlocks the lockfile
5624	NewBase creates a new Base instance .
5625	SetFallbackLogger sets the fallback logger
5626	AddLogger adds a logger to the Base .
5627	LogWithTime logs a message at the given level with the given timestamp .
5628	Log logs a message at the specified level .
5629	Warnm logs a warning message .
5630	NewTemplateWithFuncMap creates a new template with the given function map .
5631	Execute executes the template at the specified level .
5632	NewTemplateMsg creates a new TemplateMsg
5633	NewLogAdapterFor creates a new LogAdapter for a WrappableLogger .
5634	SetAttr sets an attribute .
5635	LogWithTime implements the Logger interface .
5636	Log calls base . Log .
5637	Dbgm is a convenience wrapper for Debugm
5638	NewAttrsFromMap creates a new Attrs from a map .
5639	NewAttrsFromAttrs creates a new Attrs object from the given arguments .
5640	MergeAttrs merges a set of attributes into this one .
5641	SetAttr sets an attribute .
5642	GetAttr returns the attribute with the given key .
5643	RemoveAttr removes an attribute from the map .
5644	Attrs returns the attributes as a map .
5645	Debugm is a convenience wrapper for the default Debugm function .
5646	Infom calls the default Infom function .
5647	Warningm implements the Logger interface for curDefault .
5648	Errm is a convenience wrapper for Errorm .
5649	Errorm implements the Logger interface for curDefault .
5650	Fatalm calls the default logger s Fatalm function .
5651	Dief calls the default function .
5652	Diem implements the Logger interface for curDefault .
5653	ToLogLevel converts a string to a LogLevel .
5654	CallErr calls the given function and returns the result of the function .
5655	New creates a new StackdriverHook .
5656	Fire sends a log entry to the Stackdriver API .
5657	Levels is a functional option for StackdriverHook .
5658	ProjectID is a functional option for StackdriverHook .
5659	EntriesService is a functional option for StackdriverHook .
5660	LoggingService is an Option to set the logging service .
5661	ErrorService is an Option to set the error reporting service .
5662	HTTPClient returns an Option that sets the HTTP client for the Stackdriver hook .
5663	MonitoredResource is a functional option for StackdriverHook .
5664	ErrorReportingLogName sets the name of the error reporting log .
5665	Labels is a functional option for StackdriverHook .
5666	PartialSuccess is an Option to set the partial success flag .
5667	GoogleComputeCredentials adds Google Compute Credentials to StackdriverHook .
5668	NewEncoder returns a new encoder that writes to w .
5669	NewDecoder creates a new decoder from an io . Reader .
5670	NewStreamEncoder returns a new StreamEncoder .
5671	NewStreamDecoder creates a new StreamDecoder from an io . Reader
5672	Register registers a Codec for the given mimetype .
5673	Unregister removes a mimetype from the registry .
5674	Lookup returns the Codec for the given mimetype .
5675	Codecs returns the registered codecs .
5676	Type returns the type of the error .
5677	Install adds a new adapter for the given type .
5678	AdapterOf returns the Adapter for the given type .
5679	AppendDuration appends a time . Duration to b .
5680	fmtInt formats an integer into buf .
5681	NewDecoder creates a new decoder from an io . Reader .
5682	NewStreamDecoder creates a new decoder from an io . Reader .
5683	Unmarshal unmarshals a byte slice into a struct .
5684	String returns the string representation of the type .
5685	zeroValueOf returns the zero value of the given type .
5686	NewValueParser creates a new ValueParser .
5687	ParseTag parses a string and returns a Tag .
5688	NewEncoder returns a new encoder that writes to w .
5689	NewStreamEncoder returns a new objconv . StreamEncoder .
5690	NewPrettyEncoder returns a new encoder that writes to w .
5691	NewPrettyStreamEncoder returns a new objconv . StreamEncoder that writes to w .
5692	Marshal marshals v into a byte slice .
5693	NewEncoder creates a new Encoder .
5694	EncodeArray implements the Encoder interface .
5695	EncodeMap implements the Encoder interface .
5696	NewStreamEncoder creates a new StreamEncoder
5697	Open implements the Encoder interface .
5698	Close closes the encoder .
5699	Encode encodes v to the stream .
5700	newStructType creates a structType from a reflect . Type .
5701	lookup returns the structType for the given type or creates it if it does not exist .
5702	clear removes all struct types from the cache .
5703	CheckUint64Bounds returns an error if the given value is out of bounds .
5704	CheckInt64Bounds checks the bounds of an int64 .
5705	NewDecoder creates a new Decoder .
5706	Decode decodes the value pointed to by v .
5707	DecodeArray decodes an array .
5708	DecodeMap decodes a map .
5709	NewStreamDecoder creates a new StreamDecoder
5710	Len returns the number of bytes consumed by the decoder .
5711	Err returns the error of the decoder .
5712	Decode decodes the next value from the stream .
5713	Encoder returns an encoder for the decoder .
5714	init initializes the default flags .
5715	LevelFromString returns a Level from a string .
5716	NewBackend creates a new Backend .
5717	callsite returns the file and line number of the calling function .
5718	print writes a log entry to the backend .
5719	Logger returns a new logger for the backend .
5720	Trace logs a message at the TRACE level .
5721	Tracef logs a message at TRACE level .
5722	Debug logs a message at level Debug .
5723	Debugf logs a debug message .
5724	Info logs a message at the INFO level .
5725	Infof logs a message at the INFO level .
5726	Warn logs a message at the WARN level .
5727	Warnf logs a message at the WARN level .
5728	Error logs a message at the ERROR level .
5729	Errorf logs an error .
5730	Critical logs a message at critical level .
5731	Criticalf logs a message at critical level .
5732	Level returns the current log level .
5733	SetLevel sets the log level .
5734	Concat returns a copy of the permission with a new permission .
5735	HasPermission returns true if the permission has the given permission mode .
5736	ConcatPermissioner takes a list of Permissioners and returns a new Permissioner .
5737	HasPermission returns true if any of the permissioners have the given permission mode and roles .
5738	Register adds a Checker to the role .
5739	NewPermission creates a new Permission
5740	Get returns the Checker for the given name .
5741	isPtrFromHeap returns true if the address is a pointer from the heap
5742	IsPtr returns true if the address is a pointer .
5743	FindObject finds the object with the given address .
5744	ForEachObject calls the given function for each object in the process .
5745	ForEachRoot calls the given function for each root in the process .
5746	Addr returns the address of the object .
5747	Size returns the size of the object .
5748	Type returns the type of the given object .
5749	ForEachRootPtr iterates over all the edges of the given root and calls the given function for each edge .
5750	edges1 calls fn for each edge in r . It returns true if fn returns false .
5751	setHeapPtr sets the heap pointer for the given address .
5752	findHeapInfo returns the heapInfo for the given address or nil if not found .
5753	allocHeapInfo allocates the heapInfo for the given address .
5754	runtimeName returns the name of the runtime type .
5755	readRuntimeConstants reads runtime constants .
5756	add adds a function to the function tab .
5757	sort sorts the funcTab .
5758	find returns the function with the given address or nil if not found .
5759	read reads the pcTab entry from the given address .
5760	readVarint reads a varint value from core .
5761	useLine returns the command s usage line .
5762	commandPath returns the path to the command
5763	readCore returns the core process and gocore process .
5764	typeName returns the name of the object .
5765	fieldName returns the field name for an object .
5766	typeFieldName returns the field name for the given offset .
5767	FindFunc finds a function by address .
5768	Core returns a new core . Process .
5769	Address returns the address of the region .
5770	Int returns the int value of the region .
5771	Uintptr returns the uintptr value of the region .
5772	Cast casts the region to the given type .
5773	Deref returns a copy of the region .
5774	Uint64 returns the uint64 value in the region .
5775	Uint32 returns the uint32 value in the region .
5776	Int32 returns the int32 value in the region .
5777	Uint16 returns the uint16 value in the region .
5778	Uint8 returns the uint8 value in the region .
5779	String returns the string representation of the region .
5780	SlicePtr returns a pointer region .
5781	SliceLen returns the length of the slice .
5782	Field returns the region with the given field .
5783	ReadUint8 reads a uint8 from the core file .
5784	ReadUint16 reads a 16 - bit unsigned integer from the core file .
5785	ReadUint32 reads a 32 - bit integer from the core file .
5786	ReadUint64 reads a 64 - bit unsigned integer from the core file .
5787	ReadInt8 reads an int8 from the process s memory .
5788	ReadInt16 reads an int16 from the given address .
5789	ReadInt32 reads an int32 from the process s memory .
5790	ReadInt64 reads an int64 from the process s memory .
5791	ReadUintptr reads a uintptr from the process .
5792	ReadPtr reads an address from the process s memory .
5793	ReadCString reads a C string from the process .
5794	Source returns the name and offset of the mapping .
5795	findMapping returns the mapping for the given address .
5796	Max returns the maximum address
5797	Min returns the minimum of two addresses .
5798	Align returns the aligned address of x .
5799	initialize initializes the dom .
5800	calculate calculates the idom and semis .
5801	eval returns the value of v .
5802	compress takes a vName and compresses it .
5803	link adds an ancestor to the dom .
5804	reverse reverses the dominators .
5805	calcSize calculates the size of the dominators .
5806	objField returns the field name for an object .
5807	Readable returns true if the address is readable .
5808	ReadableN returns true if n is less than or equal to or equal to a .
5809	splitMappingsAt splits the mappings at the given address into two mappings .
5810	DynamicType returns the dynamic type of the given type .
5811	Create is part of the Filesystem interface .
5812	Resolve resolves an IP address from a URL .
5813	Equal returns true if two tokens are equal .
5814	newDefaultClassifier returns a new token classifier .
5815	Next returns the next word or comment token .
5816	NewTokenizer creates a new Tokenizer .
5817	Split splits a string into words .
5818	Between returns the substring between left and right .
5819	BetweenF returns a function that accepts two strings .
5820	Camelize Camelizes a string .
5821	Capitalize capitalizes a string
5822	CharAt returns the character at the given index .
5823	CharAtF returns a function that returns the character at the specified index .
5824	ChompLeft removes the prefix from the beginning of the string .
5825	ChompLeftF is a convenience wrapper around ChompLeft .
5826	ChompRight returns a copy of s with suffix removed .
5827	ChompRightF is a convenience wrapper around ChompRight .
5828	ClassifyF returns a function that will classify a string .
5829	Clean removes leading and trailing spaces from a string .
5830	Dasherize converts a string to a dasherized string .
5831	EscapeHTML escapes an HTML string .
5832	DecodeHTMLEntities decodes HTML entities in a string .
5833	EnsurePrefixF returns a function that adds a prefix to a string .
5834	EnsureSuffixF returns a function that adds a suffix to a string .
5835	Humanize converts a string to a human - readable string .
5836	Iif returns truthy if condition is true otherwise falsey
5837	IndexOf returns the index of needle in s or - 1 if needle is empty .
5838	IsLower returns true if the string is a lower case string .
5839	IsUpper returns true if the string is uppercase .
5840	Left returns the left n characters of s .
5841	LeftF is a convenience wrapper around Left .
5842	Letters converts a string to a slice of letters .
5843	Lines returns a slice of lines from a string .
5844	Map maps an array of strings to a slice of strings .
5845	Match returns true if the string matches the regular expression pattern
5846	tasks creates tasks for godocdown .
5847	Pad pads s with c with n characters .
5848	PadF returns a function that pads c with n characters .
5849	PadLeft pads a string to the first n characters .
5850	PadLeftF is a convenience wrapper around PadLeft .
5851	PadRightF is a convenience wrapper around PadRight .
5852	Pipe takes a string and applies one or more functions to it .
5853	QuoteItems quotes a slice of strings using strconv . Quote .
5854	ReplaceF returns a function that replaces all occurrences of old with new .
5855	ReplacePatternF returns a function that replaces all occurrences of pattern with repl .
5856	Reverse reverses a string .
5857	RightF is a convenience wrapper around Right .
5858	Slice returns a slice of the given string .
5859	SliceF returns a function that returns a slice of strings .
5860	SliceContains returns true if a slice contains the given value .
5861	SliceIndexOf returns the index of a string in a slice or - 1 if not found
5862	Slugify returns the slug of a string .
5863	StripPunctuation removes punctuation from a string .
5864	StripTags removes tags from a string .
5865	Substr returns the substring at the given index . If the index is out of range Substr returns empty string .
5866	SubstrF is a convenience wrapper around Substr .
5867	TemplateWithDelimiters renders a template with delimiters .
5868	ToArgv converts a string to a slice of arguments .
5869	ToBool converts a string to a boolean .
5870	ToBoolOr converts a string to a bool or returns defaultValue if conversion fails .
5871	ToIntOr converts a string to an int or returns defaultValue if conversion fails .
5872	ToFloat32Or convert string to float32
5873	ToFloat64Or converts string to float64 or returns defaultValue if conversion fails .
5874	UnescapeHTML unescapes an HTML string .
5875	WrapHTML wraps an HTML string with the given tag and attributes .
5876	WrapHTMLF wraps a string with the given HTML tag with the given attributes .
5877	ReapChildren is a long running routine that will reap child processes .
5878	SdNotify sends a state to SdNotify .
5879	NewAuthenticator creates a new Authenticator .
5880	Endpoint returns an http . Handler that serves requests to the specified prefix .
5881	Unique returns a list of unique ids
5882	Contains returns true if the list contains the given id .
5883	Includes returns true if all contains all in subset .
5884	Require adds the given flags to the model .
5885	Enqueue adds a new job to the coal . SubStore
5886	A creates an Authorizer with the given matcher and handler .
5887	Run creates an Authorizer that will run the given enforcers .
5888	And adds a and b to an Authorizer .
5889	Or adds an authorizer to the list of enforcers
5890	Enqueue adds a new job to the queue .
5891	Callback adds a callback to the queue .
5892	NewWatcher creates a new Watcher .
5893	Add adds a stream to the watcher .
5894	Action returns the action for the watcher .
5895	Write returns true if the operation is a write operation .
5896	String returns the string representation of the operation .
5897	Query returns the query
5898	Respond writes the given value to the response .
5899	EnsureApplication creates a new application in the store .
5900	EnsureFirstUser ensures that there is at least one user in the store .
5901	Callback returns a callback for the strategy .
5902	OpenStream opens a new stream .
5903	Close closes the stream .
5904	AddTokenIndexes adds token indexes to the coal . Indexer .
5905	GetTokenData returns the token type scope expires_at application and user
5906	SetTokenData sets the token data .
5907	ValidSecret checks if the given secret is valid .
5908	HashSecret hashes the application secret .
5909	ValidPassword returns true if the given password is valid .
5910	HashPassword hashes the user s password .
5911	MustCreateStore is like CreateStore but panics on error .
5912	CreateStore creates a new store
5913	C returns a collection for the given model .
5914	NewAssetServer creates a new asset server .
5915	DefaultGrantStrategy is the default grant strategy .
5916	DefaultTokenData returns the default token data
5917	GenerateToken generates a token
5918	ParseToken parses a token string into a TokenClaims .
5919	E is a convenience method for creating a new Enforcer .
5920	MustGet returns the value of a field or panics if the field is not found .
5921	MustSet sets the value of a field . It panics if the field is not found .
5922	NewGroup creates a new group .
5923	Add adds controllers to the group .
5924	Endpoint returns a handler for the group endpoint
5925	Add adds a new index to the database .
5926	AddRaw adds a raw index to the indexer .
5927	Ensure adds all the indexes to the given store .
5928	NewCatalog creates a new catalog .
5929	Add adds a new model to the catalog .
5930	All returns all models in the catalog .
5931	Visualize returns a string representation of the catalog .
5932	NewErrorReporter returns a function that prints an error to the given writer .
5933	EnsureIndexes ensures all indexes in the coal . Store .
5934	E returns an error .
5935	Compose creates a new http . Handler from a chain .
5936	Includes returns true if all contains all in subset .
5937	Intersect returns the intersection of lists A and B .
5938	E creates a new error .
5939	RootTracer creates a new tracer for the root request .
5940	NewTracerFromRequest creates a new Tracer from an http . Request .
5941	NewTracer creates a new Tracer .
5942	Push adds a new span to the stack .
5943	Last returns the last span .
5944	Tag sets a tag on the last trace .
5945	Log logs a key - value pair .
5946	Context implements opentracing . Tracer . Context .
5947	Pop removes the last span from the tracer .
5948	Finish implements Tracer . Finish .
5949	NewPool creates a new Pool .
5950	Add adds a task to the pool
5951	Run starts the pool .
5952	NewBodyLimiter returns a new BodyLimiter .
5953	LimitBody limits the body of the request to n bytes .
5954	C creates a new callback with the given name and matcher and handler
5955	Only returns a matcher that matches only the given operations .
5956	BasicAuthorizer returns a callback that checks if the request is authenticated with the given credentials .
5957	ModelValidator returns a callback that validates the model .
5958	TimestampValidator returns a callback that validates the fire - created - timestamp or fire - updated - timestamp .
5959	RelationshipValidator returns a callback that will be called when a relationship is valid .
5960	Inspect is used to inspect the seekret .
5961	NewRule creates a new rule
5962	AddUnmatch adds an unmatch regexp to the rule
5963	Run runs the rule against the given content .
5964	NewSecret creates a new Secret .
5965	NewObject creates a new Object .
5966	SetMetadata sets the metadata for an object .
5967	GetMetadata returns the value of a metadata key .
5968	GetMetadataAll returns all the metadata
5969	SetRule sets the exception rule
5970	SetObject sets the object of the exception .
5971	SetNline sets the number of lines in the exception .
5972	SetContent sets the exception s content .
5973	Run returns true if x matches s .
5974	AddRule adds a rule to the seekret .
5975	LoadRulesFromFile loads rules from a file
5976	LoadRulesFromDir loads rules from a directory
5977	DefaultRulesPath returns the default rules path
5978	EnableRule enables a rule .
5979	DisableRule disables a rule .
5980	EnableRuleByRegexp enables a rule by regexp
5981	DisableRuleByRegexp disables a rule by regexp
5982	LoadObjects loads objects from a file .
5983	GroupObjectsByMetadata group objects by metadata key
5984	GroupObjectsByPrimaryKeyHash group objects by primary key hash
5985	AddException adds an exception to the seekret .
5986	LoadExceptionsFromFile loads exceptions from a file
5987	printPlainResults prints the results to stdout .
5988	printJsonResults prints the results to stdout .
5989	NewXor64Source returns a new Xor64Source instance
5990	xor64 takes a 64 - bit value and returns the result .
5991	next returns the next value in the source .
5992	Seed sets the source s seed to the given value .
5993	NewFrameSet creates a new FrameSet .
5994	handleMatch parses a match and adds it to the FrameSet
5995	Index returns the index of the frame in the set .
5996	Frame returns the frame at the given index .
5997	HasFrame returns true if the set contains the given frame .
5998	FrameRangePadded returns a string representation of the frame range .
5999	Normalize returns a copy of the set .
6000	FramesToFrameRange converts a slice of int to a frame range .
6001	frameRangeMatches returns a slice of matches for the given frame range .
6002	toRange returns a slice of integers between start and end .
6003	NewWorkManager creates a new work manager .
6004	processSources processes the input files and outputs them to the output .
6005	isInputDone returns whether or not the input is done .
6006	closeInputs closes the inDirs and inSeqs .
6007	load loads a set of paths into the workManager .
6008	loadRecursive loads a set of files and directories recursively .
6009	preparePaths takes a list of paths and returns a list of paths and fileseq . FileSequences .
6010	PadFrameRange pads a frame range
6011	zfillString returns a copy of src with z padding .
6012	zfillInt converts an integer to a z - based string .
6013	NewInclusiveRange creates a new InclusiveRange .
6014	String returns a string representation of the range .
6015	End returns the end of the range .
6016	Len returns the length of the range .
6017	Min returns the minimum index in the range .
6018	Max returns the maximum index in the range .
6019	Contains returns true if the range contains the given value .
6020	closestInRange returns the closest value in the range between start and end .
6021	Index returns the index of the value in the range .
6022	String returns a string representation of the inclusive ranges .
6023	Len returns the number of blocks in the range .
6024	Start returns the start index of the first block in the range .
6025	End returns the end of the range .
6026	Min returns the minimum value in the ranges .
6027	Max returns the maximum value in the range .
6028	numRanges returns the number of ranges in the range .
6029	rangeAt returns the range at the given index or nil if the index is out of range .
6030	Append appends an inclusive range to the end of the list .
6031	AppendUnique appends a range to the InclusiveRanges .
6032	Contains returns true if the range contains the given value .
6033	Index returns the index of the value in the range .
6034	FrameRange returns the frame range of the file sequence .
6035	FrameRangePadded returns the padded range of frames .
6036	Index returns the path of the frame at the given index .
6037	SetDirname sets the directory name .
6038	SetPadding sets the padding character .
6039	SetPaddingStyle sets the padding style .
6040	SetExt sets the file extension .
6041	SetFrameRange sets the frame range .
6042	Len returns the number of frames in the file sequence .
6043	String returns a string representation of the file sequence .
6044	Copy returns a copy of the file sequence .
6045	NewClient creates a new Client .
6046	UnmarshalXML unmarshals a header from an xml . Decoder .
6047	UnmarshalXML unmarshals a SOAP body from an XML string .
6048	Call sends a SOAP request to the server .
6049	JSONDoc loads a swag document from the given path .
6050	AddLoader adds a loader to the spec .
6051	JSONSpec returns an Analyzed Document from a JSON file .
6052	Embedded creates a new Swagger document from a json . RawMessage .
6053	Spec loads the spec file at the given path .
6054	Analyzed returns an Analyzed Document from a json . RawMessage .
6055	Expanded returns a copy of the document .
6056	ResetDefinitions resets the definitions of the document .
6057	Pristine returns a Pristine representation of the document .
6058	OpenDb opens a GeoIP database .
6059	GetOrg returns the org name for an IP
6060	GetRegion returns the country and region code for the given IP address .
6061	GetRegionName returns the name of the region with the given country code .
6062	GetCountry returns the country code and netmask .
6063	NewRotatingFileHandler creates a new RotatingFileHandler .
6064	Close closes the file handle .
6065	String returns the string representation of the level .
6066	New creates a new Logger .
6067	Close closes the logger .
6068	SetLevelByName sets the log level by name .
6069	Output logs a message at the specified level .
6070	OutputJson outputs a JSON - formatted log message .
6071	Print prints to the standard logger .
6072	Println prints to the standard logger .
6073	Debug logs a message at level Debug .
6074	Debugln outputs a debug log . Arguments are handled in the manner of fmt . Println .
6075	Error logs a message at level Error .
6076	Errorln logs a message at level Error .
6077	Info logs a message at level Info .
6078	Infoln logs a message at level Info .
6079	Warn logs a message at level Warn .
6080	Warnln logs a message at level Warn on the standard logger .
6081	NewStreamHandler creates a new StreamHandler .
6082	Right appends pad to the end of a string .
6083	New creates a new API .
6084	setupMetadata creates a map of metadata . Resource objects .
6085	recordTypes records the type of an object or array .
6086	appendSorted appends an ActionParam to a slice .
6087	parseDataType returns the data type for the given path .
6088	parseParam parses an ActionParam and returns a new ActionParam .
6089	newParam creates a new ActionParam .
6090	toGoReturnTypeName returns a Go type name .
6091	toGoTypeName returns the Go type name for the given name .
6092	prettify returns a string representation of an object .
6093	isBuiltInType returns true if the given name is a built - in type .
6094	MatchHref returns true if the href matches any of the path patterns .
6095	Substitute substitutes the pattern with the given path variables .
6096	MarshalJSON implements the json . Marshaler interface .
6097	writeMultipartParams writes the parameters for a multipart form section .
6098	PerformRequest sends a request to the API .
6099	PerformRequestWithContext performs a request with the given context .
6100	LoadResponse loads the response body
6101	ScheduleLocator creates a new ScheduleLocator
6102	TemplateLocator creates a new TemplateLocator
6103	fetchDetails fetches the details for an environment .
6104	buildAliases builds the aliases for the given SSH configs .
6105	serverArray returns the instances of the named server array .
6106	server returns the instance with the given name .
6107	toPackageName converts a version string to a package name .
6108	loadFile reads a JavaScript file and returns it .
6109	main is the main entry point for RightScale .
6110	runCommand executes a command .
6111	CreateJSONResponse creates a JSON response from a byte slice .
6112	AccountLocator creates a new AccountLocator
6113	AccountGroupLocator returns a new AccountGroupLocator
6114	AlertLocator creates a new AlertLocator
6115	AlertSpecLocator creates a new AlertSpecLocator
6116	AuditEntryLocator creates a new AuditEntryLocator
6117	BackupLocator creates a new BackupLocator
6118	ChildAccountLocator creates a new ChildAccountLocator
6119	CloudLocator creates a new CloudLocator
6120	CloudAccountLocator creates a new CloudAccountLocator
6121	CookbookLocator creates a new CookbookLocator
6122	CookbookAttachmentLocator creates a new CookbookAttachmentLocator
6123	CredentialLocator creates a new CredentialLocator
6124	DatacenterLocator creates a new DatacenterLocator
6125	DeploymentLocator creates a new DeploymentLocator
6126	HealthCheckLocator creates a new HealthCheckLocator
6127	IdentityProviderLocator creates a new IdentityProviderLocator
6128	ImageLocator creates a new ImageLocator
6129	InputLocator creates a new InputLocator
6130	InstanceLocator creates a new instance locator
6131	InstanceTypeLocator creates a new instance type locator
6132	IpAddressLocator creates a new IpAddressLocator
6133	IpAddressBindingLocator creates a new IpAddressBindingLocator
6134	MonitoringMetricLocator creates a new MonitoringMetricLocator
6135	MultiCloudImageLocator creates a new MultiCloudImageLocator
6136	MultiCloudImageMatcherLocator returns a new MultiCloudImageMatcherLocator .
6137	MultiCloudImageSettingLocator creates a new MultiCloudImageSettingLocator
6138	NetworkLocator creates a new NetworkLocator
6139	NetworkGatewayLocator returns a new NetworkGatewayLocator
6140	NetworkOptionGroupLocator creates a new NetworkOptionGroupLocator
6141	NetworkOptionGroupAttachmentLocator returns a new NetworkOptionGroupAttachmentLocator
6142	Oauth2Locator creates a new Oauth2Locator
6143	PermissionLocator creates a new PermissionLocator
6144	PlacementGroupLocator returns a PlacementGroupLocator
6145	PreferenceLocator creates a new PreferenceLocator .
6146	PublicationLocator creates a new PublicationLocator
6147	PublicationLineageLocator creates a new PublicationLineageLocator
6148	RecurringVolumeAttachmentLocator creates a new RecurringVolumeAttachmentLocator
6149	RepositoryLocator creates a new RepositoryLocator
6150	RepositoryAssetLocator creates a new repository asset locator
6151	ResourceGroupLocator creates a new ResourceGroupLocator
6152	RightScriptLocator creates a new RightScriptLocator .
6153	RightScriptAttachmentLocator creates a new RightScriptAttachmentLocator .
6154	RouteLocator creates a new RouteLocator
6155	RouteTableLocator creates a new RouteTableLocator
6156	RunnableBindingLocator creates a new RunnableBindingLocator
6157	SchedulerLocator returns a new SchedulerLocator .
6158	SecurityGroupLocator creates a new SecurityGroupLocator
6159	SecurityGroupRuleLocator creates a new SecurityGroupRuleLocator
6160	ServerLocator creates a new server locator
6161	ServerArrayLocator creates a new ServerArrayLocator
6162	ServerTemplateLocator creates a new ServerTemplateLocator
6163	ServerTemplateMultiCloudImageLocator creates a new ServerTemplateMultiCloudImageLocator
6164	SessionLocator creates a new session locator
6165	SshKeyLocator creates a new SshKeyLocator .
6166	SubnetLocator creates a new SubnetLocator
6167	TagLocator creates a new TagLocator
6168	TaskLocator creates a new TaskLocator
6169	UserLocator creates a new UserLocator
6170	UserDataLocator creates a UserDataLocator
6171	VolumeLocator creates a new VolumeLocator
6172	VolumeAttachmentLocator creates a new VolumeAttachmentLocator
6173	VolumeSnapshotLocator returns a VolumeSnapshotLocator
6174	VolumeTypeLocator creates a new VolumeTypeLocator
6175	RegisterCommands registers an API command registrar .
6176	ShowCommandHelp shows the help for a command .
6177	ShowAPIActions shows the actions for the API .
6178	ShowHelp prints the help for the specified command .
6179	ParseCommandAndFlags parses a command and returns a CommandTarget and a list of arguments .
6180	validateFlagValue returns an error if the value is not valid
6181	buildQuery builds an APIParams from a slice of APIParams .
6182	buildPayload builds an APIParams from a slice of APIParams .
6183	shortenPattern takes a pattern and suffix and returns the shortened pattern .
6184	cleanDescription removes the required security scope from the description .
6185	fileExists checks if a file exists .
6186	AnalysisSnapshotLocator returns a new AnalysisSnapshotLocator
6187	BudgetAlertLocator creates a new BudgetAlertLocator
6188	CloudBillLocator creates a new CloudBillLocator
6189	CloudBillMetricLocator creates a new CloudBillMetricLocator
6190	CurrentUserLocator creates a new CurrentUserLocator
6191	InstanceCombinationLocator creates a new instance combination locator .
6192	InstanceMetricLocator creates a new instance metric locator
6193	InstanceUsagePeriodLocator creates a new InstanceUsagePeriodLocator
6194	PatternLocator creates a new PatternLocator
6195	ReservedInstanceLocator creates a new ReservedInstanceLocator
6196	ReservedInstancePurchaseLocator creates a new ReservedInstancePurchaseLocator
6197	ScenarioLocator creates a new scenario locator
6198	ScheduledReportLocator creates a new ScheduledReportLocator
6199	TempInstancePriceLocator creates a new TempInstancePriceLocator
6200	UserSettingLocator creates a new UserSettingLocator
6201	readAllAsync reads all bytes from the given io . ReadCloser asynchronously .
6202	extractArg extracts an argument from a list of arguments .
6203	write writes b to the output file .
6204	AppliedPolicyLocator creates a new AppliedPolicyLocator
6205	ApprovalLocator creates a new ApprovalLocator
6206	IncidentLocator creates a new IncidentLocator
6207	PolicyTemplateLocator creates a new PolicyTemplateLocator
6208	PublishedTemplateLocator returns a new PublishedTemplateLocator .
6209	DebugCookbookPathLocator returns a DebugCookbookPathLocator .
6210	DockerControlLocator returns a new DockerControlLocator
6211	EnvLocator creates a new EnvLocator .
6212	LoginControlLocator creates a new LoginControlLocator
6213	ProcLocator creates a new ProcLocator
6214	Rl10Locator creates a new Rl10Locator
6215	TSSLocator creates a new TSSLocator
6216	TSSControlLocator creates a new TSSControlLocator
6217	TSSPluginLocator creates a new TSSPluginLocator
6218	NewAngularWriter creates a new AngularWriter .
6219	WriteResource writes the given resource to the given writer .
6220	path returns the path of the action .
6221	mandatory returns true if the given parameter is mandatory .
6222	New creates a new API instance
6223	FromCommandLine creates a new client from a command line .
6224	CanAuthenticate checks if the API can authenticate .
6225	Encrypt encrypts text using AES encryption .
6226	Decrypt decrypts an encrypted string .
6227	guessType returns the type for the given reference .
6228	addType adds a new type to the API analyzer .
6229	extractCmdLineParams extracts command line parameters from an ActionParam .
6230	NewMetadataWriter returns a new MetadataWriter .
6231	WriteHeader writes the metadata header to the given writer .
6232	WriteMetadata writes the metadata for the given APIDescriptor .
6233	location returns the location of the action parameter .
6234	New creates a new API .
6235	fromAPI converts rsapi . API to rsapi . API .
6236	BuildRequest builds an HTTP request for the given resource action and href .
6237	setupMetadata creates a map of metadata . Resource .
6238	NewDisplayer returns a new Displayer .
6239	ApplySingleExtract applies a single JSON selector to the Displayer .
6240	ApplyExtract extracts the results from the given selector .
6241	ApplyHeaderExtract extracts the header from the response .
6242	Output returns the output of the displayer .
6243	NewAPIAnalyzer creates a new API analyzer .
6244	Analyze an API descriptor .
6245	AnalyzeAliases is used to analyze aliases
6246	LocatorFunc returns a function that returns the Locator for the given name .
6247	ParseRoute returns a list of path patterns for the given moniker .
6248	isDeprecated returns true if the given path is deprecated .
6249	isQueryParam returns true if a is a query parameter .
6250	isPathParam returns true if the given parameter is a path parameter .
6251	fetchAuditEntries returns a list of audit entries for the given email .
6252	formatTime formats a time . Time as a string .
6253	printAudits prints the audit entries .
6254	extractUnique returns a list of unique entries from oldEntries and newEntries .
6255	getHref returns the href of the audit entry .
6256	fail adds a newline if it does not end with a newline .
6257	parameters returns a comma - separated list of required parameters .
6258	paramsInitializer returns the initializer for the params of an action .
6259	commandLine returns the command line .
6260	toVerb converts a string to a verb .
6261	escapeBackticks escapes backticks in a string .
6262	AccountPreferenceLocator creates a new AccountPreferenceLocator
6263	ApplicationLocator creates a new ApplicationLocator
6264	EndUserLocator returns a new EndUserLocator
6265	NotificationRuleLocator creates a new NotificationRuleLocator
6266	UserPreferenceLocator creates a new UserPreferenceLocator
6267	UserPreferenceInfoLocator creates a new UserPreferenceInfoLocator
6268	LoadConfig loads the config from a file .
6269	CreateConfig creates a new configuration file .
6270	fromAPI converts rsapi . API to rsapi . API .
6271	HostFromLogin returns the host from the login URL
6272	AnalyzeParam returns an ActionParam for the given parameter .
6273	AnalyzeAttribute is used to analyze an attribute .
6274	AnalyzeType returns a DataType for a given type definition .
6275	CreateType creates a struct type
6276	Ref returns the definition for the given reference or nil if not found .
6277	Type returns the type of the reference .
6278	Required returns the required fields of the Ref .
6279	ID returns the ID of the reference .
6280	Service returns the service name of the endpoint .
6281	Method returns the method of the endpoint
6282	NewTypeRegistry creates a new TypeRegistry .
6283	GetNamedType returns a NamedType by name .
6284	CreateNamedType adds a named type to the registry .
6285	CreateInlineType adds an inline type to the registry
6286	FinalizeTypeNames implements gen . APIDescriptor . FinalizeTypeNames
6287	Merge merges two APIDescriptor .
6288	FinalizeTypeNames is used to finalize the type names for the APIDescriptor .
6289	uniqueTypeName returns a unique type name
6290	MandatoryParams returns the mandatory params of the action .
6291	HasOptionalParams returns true if the action has any optional parameters .
6292	MakeUniq creates a unique string from a list of strings .
6293	NewClientWriter returns a new ClientWriter .
6294	WriteHeader writes a header to w .
6295	WriteResourceHeader writes the header for a resource .
6296	WriteType writes the object data type to the writer .
6297	WriteResource writes the given resource to the given writer .
6298	WithTrail adds a new trail to the EvalCtx .
6299	AnalyzeEndpoint is used to analyze an endpoint .
6300	NetworkInterfaceLocator returns a new NetworkInterfaceLocator
6301	NetworkInterfaceAttachmentLocator returns a new NetworkInterfaceAttachmentLocator
6302	UnmarshalJSON implements the json . Unmarshaler interface .
6303	ExecutionLocator creates a new ExecutionLocator
6304	NotificationLocator creates a new NotificationLocator
6305	OperationLocator creates a new operation locator
6306	ScheduledActionLocator creates a new ScheduledActionLocator
6307	NewBasicAuthenticator creates a new Authenticator that authenticates with the given username and password .
6308	NewSSAuthenticator returns a new Authenticator that uses the given Authenticator and accountID .
6309	newCookieSigner creates a new Authenticator .
6310	Sign sets the X - Account header to the account ID .
6311	CanAuthenticate returns an error if the signer cannot authenticate .
6312	refresh refreshes the cookie signer .
6313	Sign sets the Authorization header for the request .
6314	Sign sets the X - RLL - Secret header .
6315	Sign authenticates the request and returns an error if it fails .
6316	SetHost sets the host for the authenticator .
6317	CanAuthenticate returns an error if the authentication fails .
6318	extractRedirectURL extracts the redirect URL from the response .
6319	buildURL builds a URL from host and path .
6320	GetAction returns the Action with the given name or nil if not found
6321	HasLink returns true if the resource has a link with the given name
6322	findMatches returns the path patterns that match the given href .
6323	NewPB creates a new dump client .
6324	newVariableDumpClient creates a new variable dump client .
6325	newRawClient creates a new http . Client .
6326	DoHidden implements the http . Client Do method .
6327	Do implements the http . Client Do method .
6328	doImp implements the http . Client Do method .
6329	getClientWithoutTimeout returns a copy of the dump client .
6330	dumpRequest is used to dump a request .
6331	writeHeaders writes the headers to the given buffer .
6332	copyHiddenHeaders copies the hidden headers from from to to .
6333	validateCommandLine validates the command line options .
6334	APIClient returns a command client for the given name and command line .
6335	RegisterClientCommands registers client commands .
6336	Interactive sets the logger to the interactive mode .
6337	toPattern creates a PathPattern from the given verb and path .
6338	WithClientIP returns a context with the client IP set .
6339	ClientIP returns the client IP from the context .
6340	NewProducer creates a new producer .
6341	StartProducer starts a new producer .
6342	Start starts the producer .
6343	Stop stops the producer .
6344	Publish a message to the given topic .
6345	PublishTo publishes a message to a given topic .
6346	NewLocalEngine creates a new LocalEngine .
6347	validate validates the consumer configuration .
6348	defaults sets default values .
6349	NewConsumer creates a new consumer .
6350	StartConsumer starts a new consumer .
6351	Start starts the consumer .
6352	RateLimit sends a limited number of messages to the given channel .
6353	Write writes the raw response to w .
6354	ReadResponse reads a response from the reader .
6355	backoff is a convenience wrapper around jitteredBackoff .
6356	String returns a string representation of the frame type .
6357	NewConsulEngine creates a new ConsulEngine .
6358	ParseMessageID parses a string into a MessageID .
6359	WriteTo implements io . WriterTo interface . It serializes the MessageID .
6360	NewMessage creates a new Message .
6361	Finish implements the Message interface .
6362	Requeue is used to re - queue a message .
6363	ReadCommand reads a command from r .
6364	funcMapMaker returns the funcMap for this template .
6365	Funcs sets the function map for the template .
6366	Execute executes a template with the given parameters .
6367	RegisterPath adds a path to the list of paths
6368	Asset returns the contents of an asset
6369	Glob returns a list of paths that match the given pattern .
6370	NameSpace returns an AssetFileSystem for the given nameSpace .
6371	New creates a new Render .
6372	RegisterViewPath registers the view paths
6373	SetAssetFS sets the AssetFileSystem
6374	Layout creates a new template with the given name .
6375	Funcs returns a new Template with the given FuncMap .
6376	Execute executes a template with the given name and context .
6377	RegisterFuncMap registers a function map
6378	Asset returns the contents of the named asset .
6379	NewPlainClient creates a new plain client .
6380	Create creates a new uploader .
6381	Open opens a URL and returns an io . ReadCloser .
6382	Sign signs the request with the given keys .
6383	Sign signs the request with the given keys .
6384	Readdir returns the next n directories in the file .
6385	Find returns a list of nodes that match the given path expression .
6386	Lex returns a channel that will be closed when an element is found .
6387	MustParseXML is like ParseXML but panics on error .
6388	ParseXML parses an XML document into a tree . Node .
6389	Call calls the wrapped function .
6390	Parse parses a string and returns an XPathExec .
6391	MustParse is like Parse but panics on error .
6392	Exec executes an XPath expression .
6393	ExecBool executes an XPath expression and returns the boolean result .
6394	ExecNum is like Exec but returns a float64 .
6395	ExecNode executes an XPath expression and returns the result as a NodeSet .
6396	MustExec is like Exec but panics on error .
6397	ParseExec parses an expression and executes it .
6398	CreateNode creates a new XMLEle node .
6399	GetChildren returns the children of this element .
6400	GetAttrs returns the attributes of the element .
6401	ResValue returns the value of the element .
6402	Parse parses a string and returns a Node .
6403	GetToken returns the token of the node .
6404	ResValue returns the value of the node .
6405	Exec executes an expression in the given tree .
6406	String returns a string representation of the number .
6407	Num converts a string to a Num .
6408	BuildNS builds a list of NS elements from an XML element .
6409	GetAttribute returns an attribute from an element .
6410	GetAttributeVal returns the value of an attribute .
6411	GetAttrValOrEmpty returns the value of an attribute or an empty string if not found .
6412	FindNodeByPos returns the node with the given position or nil if not found .
6413	Marshal marshals a tree . Node to an io . Writer .
6414	MarshalStr marshals a tree . Node into a string .
6415	NewLexer creates a new Lexer .
6416	NewLexerString creates a new Lexer from a string .
6417	Split splits a string into a slice of strings .
6418	Register adds an error to the registry .
6419	Get returns the error descriptor for the given code .
6420	GetAll returns all registered errors .
6421	From creates an Error from an error .
6422	Descriptor returns an ErrDescriptor for the given error .
6423	GetAttributes returns the attributes of an error .
6424	HTTPStatusCode returns the HTTP status code for the given type .
6425	HTTPStatusCode returns the HTTP status code of the given error .
6426	HTTPStatusToType converts an HTTP status code to a Type .
6427	ToHTTP converts an error to an HTTP response .
6428	toImpl converts an error to an implementation .
6429	MetadataFromIncomingContext returns the metadata . MD from the incoming context .
6430	MetadataFromOutgoingContext converts a context . Context into a metadata . MD .
6431	TokenFromMetadata returns the token from a metadata . MD .
6432	TokenFromIncomingContext returns the token from the incoming context .
6433	OutgoingContextWithToken returns a new context with the given token set .
6434	KeyFromMetadata extracts the key from a metadata . MD .
6435	KeyFromIncomingContext returns the key from the incoming context .
6436	OutgoingContextWithKey returns a copy of the given context with the given key .
6437	IDFromMetadata returns the ID from a metadata . MD .
6438	IDFromIncomingContext returns the ID from the incoming context .
6439	OutgoingContextWithID returns a new context with the given id .
6440	ServiceInfoFromMetadata returns the service name version and net address from the metadata .
6441	ServiceInfoFromIncomingContext returns the service name version and net address from the incoming context .
6442	OutgoingContextWithServiceInfo returns a new context with the given service - name service - version and net - address .
6443	LimitFromMetadata extracts the limit from the metadata .
6444	OffsetFromMetadata extracts the offset from the metadata .
6445	LimitAndOffsetFromIncomingContext returns the limit and offset from the incoming context .
6446	OutgoingContextWithLimitAndOffset returns a new context with limit and offset set .
6447	before returns true if i is before j .
6448	New returns a new Error instance .
6449	WithNamespace adds a namespace to the given context .
6450	Wrap returns a new Namespaced instance
6451	WithField returns a new logger with the given key and value .
6452	WithFields returns a copy of this Namespaced .
6453	Format formats a message according to the given attributes .
6454	fix returns a string representation of the given value .
6455	GRPCCode returns the gRPC code for the given type .
6456	GRPCCodeToType returns the GRPC type corresponding to the given code .
6457	GRPCCode returns the gRPC code of the given error .
6458	FromGRPC creates a new Error from a gRPC error .
6459	ToGRPC converts an error to a gRPC error .
6460	IsEnabled returns true if the namespace is enabled .
6461	Set sets the list of namespaces .
6462	Cause returns the cause of the given error .
6463	parseCode parses a string into a Code .
6464	UnaryServerInterceptor returns a new UnaryServerInterceptor that wraps a function in a grpc . UnaryServer .
6465	StreamServerInterceptor wraps a ConvertFunc into a grpc . StreamServerInterceptor .
6466	UnaryClientInterceptor wraps a ConvertFunc into a grpc . UnaryClientInterceptor .
6467	StreamClientInterceptor returns a new stream client interceptor .
6468	Interceptor returns a new stream client interceptor .
6469	Wrap wraps a logrus . Logger .
6470	NewCounter creates a new counter .
6471	NewRedisCounter creates a new Counter .
6472	NewLimiter creates a new Limiter .
6473	WithInsecure returns a copy of the TokenCredentials with the insecure flag set .
6474	WithTokenFunc creates a new TokenCredentials with the given token function .
6475	GetRequestMetadata returns the request metadata
6476	FieldsFromIncomingContext returns the fields from the incoming context .
6477	String returns the string representation of the type .
6478	UnmarshalText implements the encoding . TextUnmarshaler interface .
6479	fromString returns an error type from a string .
6480	Start starts the stats loop .
6481	NewSimple creates a new Simple queue .
6482	Wrap returns a new Filtered
6483	WithFilters creates a new Filtered with the given filters .
6484	WithField adds a new field to the log . Interface .
6485	WithFields returns a new Filtered object with the given fields .
6486	FilterSensitive returns a Filter that filters keys that are not in the list of sensitive strings .
6487	SliceFilter returns a Filter that filters the elements of a slice .
6488	MapFilter returns a Filter that filters the values of a map .
6489	RestrictFilter returns a Filter that applies the filter to the given field name .
6490	LowerCaseFilter returns a Filter that matches keys with lower case values .
6491	newBatchPoints creates a new batch point .
6492	NewSinglePointWriter creates a new SinglePointWriter .
6493	Write implements the Writer interface for SinglePointWriter .
6494	WithScalingInterval is a functional option for BatchingWriter .
6495	NewBatchingWriter creates a new BatchingWriter .
6496	Write writes a point to the batching writer .
6497	MustParseLevel parses a log level string and panics on error .
6498	New creates a new Stream .
6499	SetLogger sets the logger for the stream .
6500	CloseRecv closes the receive channel .
6501	Stats returns the number of bytes sent and dropped .
6502	Run starts the streambuffer .
6503	ServerOptions returns a list of grpc . ServerOption .
6504	ClientOptions returns a list of grpc . DialOption that can be used to configure the client .
6505	UnaryServerInterceptor returns a new UnaryServerInterceptor .
6506	StreamServerInterceptor returns a new StreamServerInterceptor .
6507	UnaryClientInterceptor returns a new UnaryClientInterceptor .
6508	StreamClientInterceptor returns a new StreamClientInterceptor .
6509	defaults sets default values .
6510	Flush flushes the current batch .
6511	New returns a new Handler .
6512	HandleLog implements the log . Handler interface .
6513	New returns a new TTNRandom .
6514	Names returns the names of this template .
6515	String returns a string representation of a PerfDatum .
6516	RenderPerfdata renders a list of PerfDatum as a string .
6517	Exit prints the given status and message .
6518	NewCheckWithOptions creates a new Check with the given options .
6519	AddResult adds a new result to the check .
6520	AddResultf adds a result to the check .
6521	String returns a string representation of the check .
6522	Exitf is a convenience method to add a result to the check .
6523	Criticalf calls Exitf with a critical level .
6524	Unknownf exits the check with the UNKNOWN exit code .
6525	NewDefaultStatusPolicy returns a default status policy .
6526	NewStatusPolicy creates a new status policy
6527	ParseRange parses a range string into a Range .
6528	Check checks if the given value is within the range .
6529	CheckInt returns true if the given int is within the range .
6530	CheckUint64 checks if the given uint64 is within the range .
6531	NewClient creates a new client with the given configuration .
6532	GetKeyMeta returns the metadata for a key .
6533	GetKeysInDirMeta returns the list of keys in a directory .
6534	GetKeyContent returns the content of a key .
6535	GetJobSummariesForProject returns a list of Jobs for a project .
6536	GetJobsForProject returns a list of Jobs for a project
6537	GetJob returns the details of a job .
6538	CreateJob creates a new job .
6539	CreateOrUpdateJob creates or updates a job .
6540	DeleteJob deletes a job .
6541	JobSummary returns the summary of the import job .
6542	GetSystemInfo returns information about the system .
6543	DateTime returns the timestamp as a time . Time .
6544	GetAllProjects returns a list of all projects .
6545	GetProject returns information about a project .
6546	CreateProject creates a new project .
6547	DeleteProject deletes a project .
6548	SetProjectConfig sets the configuration for a project .
6549	NewClient creates a new Client .
6550	NewClientbyToken creates a new client by token .
6551	SetDepth sets the depth of the client .
6552	ListDatacenters returns a list of all datacenters
6553	CreateDatacenter creates a new datacenter .
6554	GetDatacenter returns information about a datacenter .
6555	UpdateDataCenter updates a data center .
6556	DeleteDatacenter deletes a datacenter .
6557	WaitTillProvisioned waits for a request to complete .
6558	ListFirewallRules returns a list of firewall rules .
6559	GetFirewallRule returns the specified firewall rule .
6560	CreateFirewallRule creates a new firewall rule .
6561	UpdateFirewallRule updates an existing firewall rule .
6562	DeleteFirewallRule deletes a firewall rule .
6563	ListLoadbalancers returns a list of loadbalancers .
6564	GetLoadbalancer returns information about a loadbalancer .
6565	UpdateLoadbalancer updates a loadbalancer
6566	DeleteLoadbalancer deletes a load balancer
6567	ListBalancedNics returns a list of balanced nics
6568	AssociateNic associates a nic with a lbalid
6569	GetBalancedNic returns the balanced NIC
6570	DeleteBalancedNic deletes a balanced NIC .
6571	ListLans lists all the LANs for a DC .
6572	GetLan returns a single lan .
6573	DeleteLan deletes a lan .
6574	ListNics returns a list of nics .
6575	CreateNic creates a new nic .
6576	GetNic returns information about a nic .
6577	UpdateNic updates a nic .
6578	DeleteNic deletes a nic .
6579	ListSnapshots returns a list of all snapshots .
6580	GetSnapshot returns a snapshot by ID .
6581	DeleteSnapshot deletes a snapshot .
6582	UpdateSnapshot updates a snapshot .
6583	ListIPBlocks returns a list of all IP blocks .
6584	ReserveIPBlock reserves an IP block .
6585	GetIPBlock returns the IPBlock with the given id .
6586	UpdateIPBlock updates an existing IP block .
6587	ReleaseIPBlock releases an IP block .
6588	ListVolumes returns a list of volumes .
6589	GetVolume returns information about a volume .
6590	UpdateVolume updates a volume .
6591	CreateVolume creates a new volume .
6592	DeleteVolume deletes a volume .
6593	CreateSnapshot creates a new snapshot .
6594	RestoreSnapshot restores a snapshot
6595	ListServers returns a list of all servers .
6596	GetServer returns information about a single server .
6597	DeleteServer deletes a server .
6598	ListAttachedCdroms lists all attached CDROMs .
6599	AttachCdrom attaches a CDROM image to a server .
6600	GetAttachedCdrom returns the attached CDROM image .
6601	DetachCdrom detaches a CDROM from a server .
6602	ListAttachedVolumes returns a list of volumes attached to a server .
6603	AttachVolume attaches a volume to a server .
6604	GetAttachedVolume returns information about an attached volume .
6605	DetachVolume detaches a volume from a server .
6606	StartServer starts a server .
6607	ListLocations returns a list of all locations .
6608	GetRegionalLocations returns a list of regional locations .
6609	GetLocation returns information about a location .
6610	GetContractResources returns a list of contract resources .
6611	ListImages returns a list of all images .
6612	GetImage returns a single image by ID .
6613	PrintHeaders prints the response headers .
6614	ListGroups returns a list of all groups .
6615	GetGroup returns a group by ID .
6616	CreateGroup creates a new group .
6617	UpdateGroup updates a group .
6618	DeleteGroup deletes a group .
6619	ListShares lists all shares for a group .
6620	GetShare returns the details of a share .
6621	AddShare adds a new share to a group .
6622	UpdateShare updates an existing share .
6623	DeleteShare deletes a share .
6624	ListGroupUsers lists all users in a group .
6625	AddUserToGroup adds a user to a group
6626	DeleteUserFromGroup deletes a user from a group .
6627	ListUsers returns a list of all users .
6628	GetUser returns information about a user .
6629	CreateUser creates a new user .
6630	UpdateUser updates a user .
6631	DeleteUser deletes a user .
6632	ListResources returns a list of all resources .
6633	GetResourceByType returns the resource with the given id .
6634	ListResourcesByType lists all resources of a given resource type .
6635	ListRequests returns a list of all requests .
6636	GetRequest returns a single request by ID .
6637	GetRequestStatus returns the status of a request .
6638	Close closes the underlying file .
6639	GetSerializableArgument returns the original value or serialized value
6640	BoolVar defines a boolean flag .
6641	Bool defines a boolean flag .
6642	IntVar adds an int flag to the given pointer .
6643	Int is a convenience wrapper for EnvironmentFlags . Int
6644	Int64Var adds an int64 flag to the given pointer .
6645	Int64 defines an int64 flag .
6646	UintVar adds an integer flag to the given pointer .
6647	Uint is a convenience wrapper for EnvironmentFlags . Uint .
6648	Uint64Var sets a uint64 flag with specified name default value and usage string .
6649	Uint64 is a convenience wrapper for EnvironmentFlags . Uint64
6650	StringVar is a convenience wrapper around EnvironmentFlags . StringVar
6651	String defines a string flag .
6652	Float64Var sets an environment variable with specified name default value and usage string .
6653	Float64 defines a float64 flag .
6654	DurationVar defines a time . Duration variable .
6655	Duration is a convenience wrapper for EnvironmentFlags . Duration .
6656	Parse parses the environment flags .
6657	WriteStringToFile writes a string to a file .
6658	ReadFileToString reads a file and returns it as a string .
6659	LineReader returns a channel that will read lines from r .
6660	LineReaderFrom returns a line reader that reads from the given path .
6661	FileExists checks if a file exists .
6662	FileExistsInPath checks if a file exists in the path
6663	GetPathParts returns the dirPath fileName and absPath parts of a path .
6664	GetThisPathParts returns the path parts of this executable .
6665	RandomString returns a random string .
6666	ParseAddress parses an address string into a proto and path .
6667	HomeDir returns the home directory .
6668	IsTCPPortAvailable returns true if the given port is available .
6669	RandomTCPPort returns a random TCP port
6670	HashString returns the hash of a string .
6671	Context is part of the sessionmanager . Manager interface
6672	Token returns an oauth2 . Token for the session .
6673	NewDaemon creates a new daemon .
6674	Close closes the daemon .
6675	NewAccessTokenContext returns a new context with the given access token .
6676	AccessTokenFromContext returns the access token from the given context .
6677	RandomAccessToken returns a random access token .
6678	Init creates a new logger with the given options .
6679	Load loads a Dic from a zip file .
6680	Start starts a new session .
6681	Get returns the session for the given access token .
6682	List returns a list of sessions .
6683	Exists returns whether or not the given access token exists .
6684	Abandon abandons the session .
6685	SetValue is part of the storage . Storage interface .
6686	Delete deletes a session .
6687	Setup creates the storage table .
6688	TearDown removes the schema from the database .
6689	initJaeger creates an opentracing . Tracer and io . Closer .
6690	Usage prints the usage of the japanese morphological analyzer
6691	Build builds a DoubleArray from a list of keywords .
6692	Read reads a DoubleArray from r .
6693	Get returns the node with the given key .
6694	ExternalNodes returns a list of nodes that have the same address as the listen address .
6695	GetOther returns the other node from the cluster .
6696	GoString returns a string representation of the cluster .
6697	Scan implements the sql . Scanner interface .
6698	Value returns the Bag as a driver . Value
6699	Has returns true if the bag contains the given key .
6700	WriteTo writes the index table to the writer .
6701	ReadIndexTable reads an index table from r .
6702	New creates a new ActionBar instance
6703	RegisterAction registers an ActionInterface to the ActionBar
6704	Actions creates a new ActionBar with the given actions .
6705	Render renders the action bar .
6706	FuncMap returns a template . FuncMap that renders the edit button .
6707	EditMode returns true if the user is in edit mode .
6708	SwitchMode changes the mode of the action bar
6709	InlineEdit renders the inline edit page .
6710	Error returns a string representation of the error .
6711	ParseFile parses a machine from a file .
6712	FindMachine looks up a machine by name .
6713	New creates a new kace .
6714	Camel returns a camel - case version of s .
6715	Pascal returns the pascal version of s .
6716	Snake returns a snake - case version of s .
6717	SnakeUpper returns a snake - case version of s .
6718	Kebab returns the kebab version of s .
6719	KebabUpper returns the upper case version of s .
6720	isPathSafe checks if the given string is a safe path .
6721	Start starts the tracer for the given request .
6722	ParseAuthHeaders parses the Authorization header from the request .
6723	Tracer is a ClientParam that sets the new tracer for the client .
6724	HTTPClient is a ClientParam .
6725	BasicAuth specifies the username and password of the client .
6726	BearerAuth is a ClientParam that sets the client s bearer token .
6727	CookieJar is a ClientParam that sets the cookie jar .
6728	SanitizerEnabled specifies whether or not sanitizer should be enabled .
6729	OpenFile opens a file from the given endpoint .
6730	RoundTrip wraps a RoundTripFn and returns a Response .
6731	SetAuthHeader sets the Authorization header .
6732	FileName returns the filename of the file .
6733	newBuffersFromFiles creates a new slice of fileBuffers from a slice of files .
6734	newFileBuffer returns a new fileBuffer .
6735	rewind resets the buffer to the beginning of the file .
6736	ConvertResponse converts response to trace . Response
6737	Set implements the flag . Value interface .
6738	WriteAnswer implements the Option interface .
6739	String returns the string representation of the option .
6740	TriggerIncidentKey triggers an incident key .
6741	TriggerWithDetails creates a new incident with the given description and details .
6742	TriggerIncidentKeyWithDetails triggers an incident key with the given details .
6743	Merge merges two structs into dst .
6744	setSource sets the source for the merger .
6745	convertString converts a string to a struct .
6746	Do executes a function f in a transaction .
6747	NewFile creates a new file
6748	internalRun runs the benchmark .
6749	String returns a string representation of the row .
6750	Tabulate converts a list of results into a list of rows .
6751	AmazonRequest makes a request to Amazon .
6752	WriteTabularData writes a tabular representation of the result set to the writer .
6753	Reduce returns a list of buckets that have been reduced by the given interval .
6754	NewSemaphore creates a new Semaphore .
6755	Release releases the semaphore .
6756	Resize resizes the semaphore to the given capacity .
6757	AddOutput adds a new output to the benchmark .
6758	RunBenchmarks runs the benchmark .
6759	parseBool parses an ASN . 1 boolean value .
6760	checkInteger returns an error if the input is not an integer .
6761	parseInt64 converts a slice of bytes into an int64 .
6762	parseInt32 parses an int32 from a slice of bytes .
6763	parseBigInt parses a byte slice into a big . Int .
6764	parseBitString parses a BIT STRING .
6765	parseObjectIdentifier parses an object identifier .
6766	parseBase128Int parses a base 128 integer .
6767	parseGeneralizedTime parses a string into a time . Time .
6768	parsePrintableString parses a printable string .
6769	isPrintable returns true if b is a printable character .
6770	parseSequenceOf parses a sequence of elements .
6771	invalidLength returns true if offset + length is out of range .
6772	setDefaultValue sets the default value for the field .
6773	UnmarshalWithParams unmarshals a struct into the value pointed to by val .
6774	parseFieldParameters parses a comma - separated string into a fieldParameters struct .
6775	getUniversalType returns the tag number and whether the type is a compound or not .
6776	DecodeString decodes a base32 encoded string .
6777	MailNotifier returns the first MailNotifier from the database
6778	SaveMailNotifier save a mail notifier
6779	RegisterProvider registers a new auth provider .
6780	InitDb initializes the database
6781	Until calls the function f until stopCh is closed .
6782	logPanic logs a panic .
6783	User returns the user with the given username
6784	Users returns all users matching the given filter .
6785	SaveUser saves a user to the database
6786	DeleteUser deletes a user from the database
6787	LoadCACertFile loads a CA Certificate from a file .
6788	NewAuth creates a new Auth instance .
6789	ValidateRequest checks if the request is valid .
6790	Process checks if the request is valid .
6791	ValidateCN returns an error if the CN is not allowed .
6792	ValidateOU returns an error if the OU is not allowed .
6793	KeyLen returns the number of bytes in x .
6794	DefaultConfig returns a new Vault client configuration .
6795	New creates a new CertSigner .
6796	New creates a new VaultFactory .
6797	DefaultServiceConfig returns the default ServiceConfig .
6798	NewService creates a new Vault service .
6799	Delete unmounts the PKI for the given clusterID
6800	IsNoVaultHandlerDefined returns true if the given error is caused by no vault handler defined .
6801	New creates a new Vault service .
6802	Create creates a role
6803	CreateJob creates a new job configuration .
6804	Run runs the config .
6805	newWatcher creates a new watcher .
6806	Start starts the watcher .
6807	Stop stops the watcher .
6808	Active returns whether or not the watcher is active .
6809	Add adds paths to the watcher .
6810	watch is a long lived goroutine that will watch for changes and send them to the given channel .
6811	Watching returns a list of paths that have been watched .
6812	State returns the current state of the watcher .
6813	Store stores an error in the request context .
6814	Get returns the error from the request context or nil if not set .
6815	Catch adds an error handler to the request context .
6816	Try returns an http . Handler that will store an error in the store .
6817	Recover returns a middleware that will recover from a panic .
6818	This is the main entry point .
6819	SyncHandler returns an http . Handler that syncs the gostruct .
6820	connect is used to establish a connection to the server .
6821	send sends an update to the server .
6822	NumConnections returns the number of active connections .
6823	Push is used to push to the state . Returns true if the state has been pushed .
6824	gopush pushes the state to the push queue .
6825	NewOutForward creates a new OutForward
6826	Run starts the in - tail process .
6827	New creates a new Fluent instance .
6828	Close closes the connection .
6829	IsReconnecting returns whether or not the server is reconnecting .
6830	connect establishes a connection to the Fluent server .
6831	Notification creates a new GNotifier .
6832	NullNotification creates a new null notification .
6833	New creates a new identity .
6834	Issue creates a new identity with the given options .
6835	Subject is an Option to set the subject .
6836	PrivateKey is an Option to set the private key .
6837	NotBefore is an Option to set the notBefore value .
6838	NotAfter is an Option to set the notAfter value .
6839	IssuingCertificateURL is an Option to set the issuing certificate URL .
6840	OCSPServer specifies the OCSP server to use .
6841	New creates a new TelegramBotAPI .
6842	NewWithWebhook creates a new TelegramBotAPI with the given webhook URL and certificate .
6843	Close closes the TelegramBotAPI .
6844	GetMe returns the current user .
6845	RunBot runs a bot .
6846	RunBotOnWebhook runs a bot on a webhook .
6847	NewOutgoingMessage creates a new OutgoingMessage .
6848	NewOutgoingLocation creates a new OutgoingLocation
6849	NewOutgoingVenue creates a new OutgoingVenue .
6850	NewOutgoingVideo creates a new OutgoingVideo
6851	NewOutgoingVideoResend creates a new OutgoingVideo .
6852	NewOutgoingPhoto creates a new OutgoingPhoto
6853	NewOutgoingPhotoResend creates a new OutgoingPhoto .
6854	NewOutgoingSticker creates a new OutgoingSticker
6855	NewOutgoingStickerResend creates a new OutgoingSticker .
6856	NewOutgoingVoice creates a new OutgoingVoice
6857	NewOutgoingVoiceResend creates a new OutgoingVoice .
6858	NewOutgoingAudio creates a new OutgoingAudio
6859	NewOutgoingAudioResend creates a new OutgoingAudio .
6860	NewOutgoingDocument creates a new OutgoingDocument .
6861	NewOutgoingDocumentResend creates a new OutgoingDocument .
6862	NewOutgoingForward creates a new OutgoingForward .
6863	NewOutgoingChatAction creates a new OutgoingChatAction .
6864	NewOutgoingUserProfilePhotosRequest creates a new OutgoingUserProfilePhotosRequest .
6865	NewOutgoingKickChatMember creates a new OutgoingKickChatMember .
6866	NewOutgoingUnbanChatMember creates a new OutgoingUnbanChatMember .
6867	NewOutgoingCallbackQueryResponse creates a new OutgoingCallbackQueryResponse .
6868	NewInlineQueryAnswer creates a new inline query answer .
6869	Type returns the message type .
6870	Type returns the update type .
6871	MarshalJSON method of Recipient
6872	querystring returns a string representation of the outgoing set webhook .
6873	getBaseQueryString returns the base query string for the outgoing request .
6874	getBaseQueryString returns the base query string for the outgoing message .
6875	querystring returns a string representation of the OutgoingAudio .
6876	querystring returns a string representation of the OutgoingPhoto .
6877	querystring returns a string representation of the OutgoingUserProfilePhotosRequest .
6878	querystring returns a string representation of the OutgoingVideo .
6879	querystring returns a string representation of the OutgoingVoice .
6880	NewInlineQueryResultArticle creates a new inline query article
6881	NewInlineQueryResultPhoto creates a new inline query photo .
6882	NewInlineQueryResultGif creates a new inline query gif .
6883	NewInlineQueryResultMpeg4Gif creates a new inline query mpeg4 gif .
6884	NewInlineQueryResultVideo creates a new inline query video .
6885	Send sends the user profile photos .
6886	Send sends an OutgoingChatAction .
6887	Send sends an inline query answer .
6888	Send sends a kick chat member .
6889	Send sends an unbanned chat member .
6890	Send sends a callback query response .
6891	NewAPIClient creates a new API client .
6892	BeforeInsert sets the CreatedAt and UpdatedAt fields .
6893	ColumnName returns the column name for a table .
6894	New creates a new DB with the given dialect and dsn .
6895	From creates a new From struct .
6896	Where adds a WHERE condition to the query .
6897	OrderBy creates a ORDER BY condition .
6898	Limit creates a LIMIT condition .
6899	Offset adds an OFFSET condition to the query .
6900	Join creates a new JoinCondition .
6901	Count returns the number of rows .
6902	Update updates a struct .
6903	Delete deletes the given object .
6904	Begin starts a new transaction .
6905	Commit commits the current transaction .
6906	Quote quotes a string .
6907	SetLogOutput sets the log output .
6908	selectToSlice takes a sql . Rows and returns a slice of values .
6909	selectToValue takes a sql . Rows and returns a reflect . Value .
6910	fieldIndexByName returns the index of the field with the given name or nil if the field is not found .
6911	columns returns a comma - separated list of column names .
6912	tagsFromField returns a slice of tags from a struct field .
6913	hasSkipTag returns true if the field has the skip tag .
6914	hasPKTag returns true if the given field has the pk tag .
6915	isAutoIncrementable returns true if the field is auto incrementable .
6916	collectFieldIndexes returns a slice of indexes for each field in the given type .
6917	findPKIndex finds the primary key index for the given type .
6918	sizeFromTag extracts the dbSizeTag value from the field s tag .
6919	columnFromTag returns the column name from the field tag .
6920	defaultFromTag returns the default value for a struct field .
6921	Where adds a WHERE condition to the query .
6922	And adds a AND condition to the query .
6923	Or adds a WHERE condition to the query .
6924	Like adds a LIKE condition to the query .
6925	Between adds a BETWEEN condition to the query .
6926	OrderBy adds a ORDER BY clause to the query .
6927	Limit adds a LIMIT clause to the query .
6928	Offset appends an OFFSET clause to the query .
6929	SetFormat sets the logger s format .
6930	Print writes a formatted query to the writer .
6931	Print implements the Logger interface .
6932	Quote quotes a string .
6933	SQLType returns the SQL type for the given value .
6934	New creates a new archive from a file .
6935	Disconnect disconnects the host .
6936	nextNetworkAdapterID returns the next network adapter ID
6937	totalNetworkAdapters returns the number of network adapters in vmx
6938	RemoveAllNetworkAdapters removes all network adapters from the VM .
6939	RemoveNetworkAdapter removes the network adapter from the VM .
6940	NetworkAdapters returns a list of network adapters for the VM .
6941	newArchive creates a new Archive .
6942	GetFileReader returns an io . ReadCloser for the named file .
6943	ExtractToWriter extracts a file from the archive and writes it to dst .
6944	ExtractToFile extracts the contents of the archive to dstPath .
6945	SharedFoldersParentDir returns the parent directory of the guest s shared folders .
6946	Name returns the name of the snapshot .
6947	Description returns the description of the snapshot .
6948	cleanupSnapshot cleans up a snapshot .
6949	BusTypeFromID returns the bus type for the given ID .
6950	Read reads the vmx file from disk .
6951	Write writes the model to disk .
6952	NewVirtualMachine creates a new virtual machine .
6953	Vcpus returns the number of vCPUs in the VM .
6954	VmxPath returns the path to the VM .
6955	MemorySize returns the memory size of the VM .
6956	ReadOnly returns true if the VM is read - only .
6957	InVMTeam returns true if the VM is in the VM team .
6958	PowerState returns the power state of the VM .
6959	ToolsState returns the tools state of the guest .
6960	IsRunning returns true if the VM is running .
6961	GuestOS returns the guest OS .
6962	cleanupVM cleans up a VM .
6963	updateVMX updates the vmx file .
6964	SetMemorySize sets the memory size of the VM .
6965	SetNumberVcpus sets the number of vCPUs on the VM .
6966	SetDisplayName sets the display name of the VM .
6967	SetAnnotation sets the annotation of the VM .
6968	SetVirtualHwVersion sets the virtual hardware version .
6969	Error returns a string representation of the error .
6970	Errorf is a convenience wrapper around fmt . Errorf
6971	Error implements the error interface .
6972	string returns a string representation of the stack frame .
6973	newStackFrame creates a new stackFrame .
6974	captureStack returns a slice of stack frames .
6975	parseFuncName parses a function name and returns the package path and signature .
6976	Stack prints the stack trace of an error .
6977	StackWithCaller prints the stack of the given error .
6978	Write implements the io . Writer interface .
6979	ResponseStatus returns the HTTP response status .
6980	httpResponseStruct returns a pointer to an http . response struct .
6981	SetDetectedContentType sets the Content - Type header if not set .
6982	New creates a new server error .
6983	New creates a new DBError .
6984	New creates a new ValidationError .
6985	New creates a new NotFoundError .
6986	StrLength validate string length
6987	StrLenIn returns the length of a string in l .
6988	StrIn returns a string from a slice of strings .
6989	GetEmail get email
6990	MostSpecificType returns the most specific type
6991	FullTypeHierarchy returns the type hierarchy of the highest level type .
6992	SortTypes sorts a list of types .
6993	Delete removes a value from the store .
6994	Set sets the value for the given key .
6995	refresh refreshes the session store
6996	Get returns the values for the given session ID .
6997	Destroy removes a session from the pool .
6998	UpExpire expires a session .
6999	Use adds a router handler to the stack .
7000	ServeHTTP implements the http . Handler interface .
7001	Use adds middleware to the router group .
7002	Group creates a new router group
7003	Run starts the server .
7004	create creates a new engine .
7005	Redirect redirects the request to the given URL .
7006	Ok writes a response to the client .
7007	Fail sends an error to the client .
7008	ResStatus writes a response with the given status code .
7009	Next calls the next handler in the stack .
7010	GetSession returns the session
7011	GetBodyJSON returns the request body as a map .
7012	SetSession adds a new session to the context
7013	FreshSession is used to refresh the session
7014	DeleteSession deletes the session
7015	Write implements the http . ResponseWriter interface .
7016	WriteHeader implements the http . ResponseWriter interface .
7017	New creates a new Client .
7018	setAllowLargeResults sets allowLargeResults and tempTableName
7019	connect attempts to connect to the bigquery service .
7020	InsertRow inserts a row into a table .
7021	AsyncQuery is a convenience wrapper around pagedQuery .
7022	Query takes a query string and returns a list of results .
7023	stdPagedQuery runs a query on the bigquery service .
7024	largeDataPagedQuery performs a large data paginated query .
7025	pagedQuery performs a paginated query .
7026	pageOverJob is used to page over a single job .
7027	Count returns the number of rows in a dataset .
7028	work takes two arguments and returns a crawlResult .
7029	subworker runs a job in a separate goroutine .
7030	worker starts a new worker .
7031	supervisor is the main loop for the supervisor .
7032	Run starts the pool .
7033	Add adds a job to the pool .
7034	Wait waits for the pool to complete .
7035	Results returns the results of the pool .
7036	WaitForJob waits for a job to complete and returns it .
7037	Status returns the current status of the pool .
7038	WrapHTTPHandlerFunc wraps a http . HandlerFunc .
7039	WebSocketHandlerFunc returns a HandlerFunc that wraps f in a websocket . Handler .
7040	StaticFile returns a static file .
7041	PreloadFile loads a file from disk .
7042	InitHtmlTemplates creates a template from a glob pattern .
7043	InitTextTemplates initializes text templates
7044	Html creates a new HTML template .
7045	Text creates a new text template .
7046	InitWatcher creates a new fsnotify . Watcher .
7047	CloseWatcher closes the watcher .
7048	Find finds a route by path .
7049	Add adds a new router to the list .
7050	NewRouters creates a new router .
7051	NewServerMux creates a new ServerMux .
7052	err sends an error to the error handler .
7053	HandleFunc registers a new handler for the given router .
7054	handleError is used to handle an error .
7055	Redirect sets the response status and data .
7056	InitPProf inits the pprof handler
7057	StartSession starts a new session .
7058	combinations returns a channel of combinations .
7059	repeated_combinations returns a channel of repeated combinations .
7060	permutations takes a list of integers and returns a channel of permutations .
7061	repeated_permutations returns a channel of repeated permutations .
7062	gformat converts a format string into a format string and a list of arguments .
7063	Errorm returns an error .
7064	Fprintm writes a formatted string to w .
7065	Printm prints to stdout .
7066	Sprintm returns a formatted string .
7067	Validate checks if the password is valid .
7068	MakeRequirements creates a PasswordStrengthRequirements from a string .
7069	sanityCheck checks that the password strength requirements are valid .
7070	password returns a password based on the password strength requirements .
7071	NewPassword returns a new password .
7072	NewPasswords returns a slice of password passes .
7073	addNums adds numDigits numbers to a string .
7074	punctuate returns a random punctuated string
7075	deprecated_init implements the init function .
7076	Param adds a new parameter to the set .
7077	Parse parses the params from the reader .
7078	Unmarshal unmarshals the ParamSet into the given value .
7079	GetDefaultHTTPClient returns a default HTTP client .
7080	DeviceInfo returns information about a device .
7081	DevicePresence returns the presence of a device .
7082	NotificationStatus returns the status of a notification .
7083	DeleteNotification deletes a notification .
7084	NotifyDevice sends a notification to Pushy .
7085	Assert asserts if b is false .
7086	CreateFile creates a file with the given size .
7087	AddError adds an error to the form errors
7088	AddFieldError adds a field error to the form errors
7089	HasErrors returns true if the form has any errors .
7090	NewError creates a new FormErrors object .
7091	NewFieldError creates a new FormErrors with the given field and error .
7092	ChainHandlers returns a chain of http . Handlers .
7093	FinalHandler returns a function that returns the final handler .
7094	Hash returns the MD5 hash of the given reader .
7095	IsHash returns whether the given string is a valid MD5 hash .
7096	WithBaseDir sets the base directory
7097	WithFileFindFunc sets a function that will be called when a file is found .
7098	WithTemplateFromFiles adds a template file to the options .
7099	WithTemplatesFromFiles sets the templates from files .
7100	WithTemplateFromStrings adds a template to the options .
7101	WithTemplatesFromStrings sets the templates from strings .
7102	WithFunction adds a function to the options .
7103	WithFunctions adds a function map to the options .
7104	WithDelims sets the open and close delims .
7105	New creates a new templates object .
7106	RespondWithStatus implements the http . ResponseWriter interface .
7107	RespondTemplate writes a response with status code 0 .
7108	Respond writes a response with status code 0 .
7109	RenderTemplate renders a template
7110	New creates a new server .
7111	ServeUDP serves the given UDP connection .
7112	Shutdown shuts down the server .
7113	QuicHeadersHandler sets the QuicHeaders field of the http . Handler .
7114	GetRequestIPs returns the IP addresses of the request .
7115	DomainRedirectHandler returns a handler that redirects to the given domain .
7116	New creates a new server .
7117	Add adds a new server to the list .
7118	TCPAddr returns the TCP address for the named server or nil if not found .
7119	UDPAddr returns the UDP address for the named server or nil if not found .
7120	Close closes all servers .
7121	Shutdown shuts down all servers .
7122	Accept accepts a TCP connection from the listener .
7123	NewStaticFilesHandler returns a new http . Handler that serves static files .
7124	ServeHTTP implements the http . Handler interface .
7125	MarshalJSON marshals Options to JSON .
7126	UnmarshalJSON unmarshals Options from JSON .
7127	MarshalYAML marshals Options to JSON .
7128	UnmarshalYAML unmarshals Options from YAML .
7129	NewHandler returns a new http . Handler .
7130	WithPanicResponse sets the response body and contentType .
7131	WithPanicResponseHandler sets the http . Handler to be called when a panic occurs .
7132	New creates a new Handler .
7133	ServeHTTP implements the http . Handler interface .
7134	NewContextFunc returns a function that can be used to create a context from a map .
7135	NewMapErrorRegistry creates a new error registry
7136	AddError adds an error to the registry .
7137	AddMessageError adds a message error to the registry .
7138	MustAddError adds an error to the registry and panics on error .
7139	MustAddMessageError is like AddMessageError but panics on error .
7140	AddHandler adds a handler for the given error code .
7141	MustAddHandler adds a handler to the registry . It panics if the handler returns an error .
7142	Handler returns an error handler for the given error code .
7143	New creates a new Client .
7144	Request implements the http . Client interface .
7145	JSONContext sends a request with a custom context .
7146	StreamContext is like Stream but with a context .
7147	Stream implements the http . Client interface .
7148	JSONUnmarshal unmarshals JSON data into v .
7149	ServeTCP implements http . Server . ServeTCP .
7150	ServeTCP implements the http . Server interface .
7151	Shutdown shuts down the server .
7152	HandleMethods is used to handle HTTP methods .
7153	NewSetHeadersHandler returns a new http . Handler that sets the given headers .
7154	New creates a new server .
7155	HashedPath returns the path to the file with the given hash .
7156	New creates a new service .
7157	HTMLHandler returns an http . Handler that serves the service s HTML response .
7158	Status returns the status of the service .
7159	StatusHandler returns the current maintenance status .
7160	OnHandler is the HTTP handler for the service .
7161	OffHandler is the HTTP handler for the maintenance off event .
7162	MarshalJSON method of PostIRCMessageRequest
7163	MarshalJSON method of PostArtifactRequest
7164	MarshalJSON method of PostArtifactResponse
7165	MarshalJSON method of HookChangedMessage
7166	MarshalJSON method of TriggerHookRequest
7167	MarshalJSON method of TriggerHookResponse
7168	UnmarshalJSON is defined on the json . Unmarshaler interface .
7169	MarshalJSON method of LaunchInfo
7170	MarshalJSON implements the json . Marshaler interface .
7171	MarshalJSON marshals Var1 to JSON .
7172	MarshalJSON marshals Var3 to JSON .
7173	MarshalJSON implements the json . Marshaler interface .
7174	UnmarshalJSON implements the json . Unmarshaler interface .
7175	Write writes to the underlying io . Writer .
7176	Seek implements the io . Seeker interface .
7177	Read implements the io . Reader interface .
7178	MarshalJSON method of LaunchSpecsResponse
7179	MarshalJSON method of RegionLaunchSpec
7180	GenerateCode generates go code for each api definition .
7181	postPopulate adds the input and output schema to the APIEntry .
7182	CreateTemporaryCredentials creates a temporary credentials .
7183	setURL sets the client s BaseURL .
7184	SignRequest signs a request with the client and access token .
7185	APICall performs an API call .
7186	SignedURL returns a signed URL for the given route and query .
7187	MarshalJSON method of HawkSignatureAuthenticationResponse
7188	bmw256 computes the BMW - 256 checksum .
7189	NewCubeHash returns a new CubeHash .
7190	cubehash256 computes a 256 - bit cube hash .
7191	Sum returns the hash of the given data .
7192	squeeze takes a slice of uint64s and writes them to out .
7193	reducedSqueezeRow0 is a helper function for reducedSqueezeRow .
7194	reducedDuplexRow1 performs a duplex operation on the row in and out .
7195	NewReaderByteCodeLoader creates a new ReaderByteCodeLoader .
7196	LoadReader loads a byte code from an io . Reader .
7197	NewV3 creates a new UUID with the given namespace and name .
7198	txLiteral sets the sa field of the current operation .
7199	txFetchSymbol fetches the symbol for the current operation .
7200	txMarkRaw marks the state as raw .
7201	txUnmarkRaw unmarks the raw value from the state .
7202	txPrint prints the value of st . sa .
7203	txPrintRaw prints a raw value to the output .
7204	NewLoopVar creates a new loop variable .
7205	txMakeArray creates a new array .
7206	txFunCallOmni executes an Omni function call .
7207	DumpAST enables or disables the dumpAST flag .
7208	DumpByteCode enables or disables byte code dump .
7209	Optimize implements the Optimizer interface for NaiveOptimizer .
7210	NewFuncDepot creates a new function depot
7211	Get returns the value for the given key .
7212	Set sets a value for a given key .
7213	NewFileTemplateFetcher creates a new FileTemplateFetcher
7214	LastModified returns the last modified time of the file .
7215	Reader returns an io . Reader for the source .
7216	Bytes returns the contents of the source .
7217	NewState creates a new state .
7218	PushFrame adds a new frame to the stack .
7219	PopFrame removes the frame from the stack and returns it .
7220	CurrentFrame returns the current frame .
7221	Warnf prints a warning message .
7222	AppendOutputString appends a string to the output .
7223	Popmark removes the current mark from the stack and returns it .
7224	CurrentMark returns the current mark .
7225	LoadByteCode loads a ByteCode from the state .
7226	Reset resets the state .
7227	DeclareVar declares a variable .
7228	GetLvar returns the local variable at the given index .
7229	SetLvar sets the Lvar at the given index .
7230	NewByteCode creates a new byte code .
7231	Append appends an op to the byte code .
7232	AppendOp appends a new operation to the byte code .
7233	String returns a string representation of the byte code .
7234	NewCachedByteCodeLoader creates a new CachedByteCodeLoader .
7235	Load loads a byte code from the cache .
7236	NewFileCache creates a new FileCache .
7237	GetCachePath returns the cache path for the given key
7238	Get retrieves an entity from the cache .
7239	Set stores the entity in the cache .
7240	Delete removes a file from the cache
7241	Get returns the cache entity for the given key
7242	Set implements the Cache interface .
7243	Delete removes the key from the cache .
7244	NewStringLexer creates a new lexer from a string .
7245	NewReaderLexer creates a new lexer from an io . Reader .
7246	NewV4 returns a new UUID .
7247	Parse parses a Kolonish template .
7248	ParseReader parses an AST from an io . Reader .
7249	Visit returns a channel that will be closed when the AST is closed .
7250	String returns a string representation of the AST .
7251	Run runs the script with the given parameters .
7252	DefaultParser is the default parser for sytanx .
7253	DefaultLoader sets the default loader for the given transaction .
7254	DefaultVM sets the default VM .
7255	Get returns the value for a given key .
7256	NewHTTPSource returns a new HTTPSource .
7257	NewStringByteCodeLoader creates a new StringByteCodeLoader .
7258	LoadString loads a string into a vm . ByteCode .
7259	Get returns the value for a given key .
7260	NewOp creates a new Op .
7261	MarshalBinary marshals the op into a byte slice .
7262	UnmarshalBinary unmarshals an op from binary data .
7263	ArgInt returns the argument as an int .
7264	ArgString returns the argument as a string .
7265	AppendOp appends a new operation to the context .
7266	Compile compiles the AST into a vm . ByteCode .
7267	NewV5 creates a new UUID with the given namespace UUID and name .
7268	Sort sorts the LexSymbolList .
7269	Less returns true if i should sort before j .
7270	Swap implements sort . Interface .
7271	Copy returns a copy of the set .
7272	Set adds a symbol to the set .
7273	GetSortedList returns a sorted list of symbols .
7274	Top returns the top element of the stack .
7275	Resize resizes the stack to the given size .
7276	Extend resizes the stack by the given number of elements .
7277	Grow grows the stack to the given minimum size .
7278	Get returns the element at index i .
7279	Set sets the element at index i in the stack .
7280	Push appends a value to the top of the stack .
7281	Pop removes an element from the stack and returns it .
7282	String returns a string representation of the stack .
7283	GetHostIPs returns the IP addresses of the host
7284	GetPrivateHostIPs returns a list of private host IPs
7285	IsPrivate returns true if the given IP is a private IP .
7286	GetEnviron returns a list of environment variables .
7287	getenv returns the value of an environment variable
7288	flagAsEnv converts a flag name into an environment variable name .
7289	NewPolicy creates a new Policy .
7290	CreateRandom returns a random slice of length bytes .
7291	Shuffle shuffles a slice of bytes
7292	Generate generates a random password .
7293	ExecutableFolder returns the path to the executable folder .
7294	Ignore adds a function to be called when the sentinel is not started .
7295	Sigs sets the shutdown signals .
7296	Logf is a functional option for Sentinel .
7297	Errorf returns an Option that sets the error function for the sentinel .
7298	New creates a new Sentinel .
7299	Run starts the sentinel .
7300	Shutdown shuts down the sentinel .
7301	ShutdownIgnore returns true if the error should be ignored .
7302	Register registers a new sentinel .
7303	Mux creates a new netmux . Netmux
7304	HTTP adds a new HTTP server to the sentinel .
7305	IgnoreError returns a function that returns true if err is the same as err .
7306	IgnoreNetOpError returns true if the error is a net . OpError .
7307	convertAndAppendContextFuncs converts a slice of functions into a slice of functions .
7308	router returns a new mux . Router .
7309	buildInfoHandler returns the build - info response .
7310	Encode encodes a slice of values into JSON .
7311	Json returns a handler that validates the given JSON struct and maps it to the given interface pointer .
7312	validateAndMap validates the given value and maps it to the given interface pointer .
7313	Count returns the number of errors .
7314	Header returns a map of HTTP headers for the given origin .
7315	PreflightHeader returns a map of HTTP headers to be sent to the client .
7316	IsOriginAllowed checks if an origin is allowed
7317	Allow returns an http . HandlerFunc that accepts OPTIONS requests .
7318	Renderer creates a new martini . Handler that renders a template with the given options .
7319	String returns a string representation of the AcceptLanguages .
7320	Languages returns a handler that sorts the Accept - Language headers from the Accept - Language header .
7321	Prefix returns a handler that removes the prefix from the URL .
7322	Basic sets the WWW - Authenticate header if necessary .
7323	UpdateUser updates a user in the session .
7324	GetById get user by id
7325	AddressToAccountId converts a string to an xdr . AccountId .
7326	MutateChangeTrust implements the Asset interface for Asset .
7327	MutateChangeTrust sets the limit for a change trust operation .
7328	Trust creates a new ChangeTrustBuilder .
7329	RemoveTrust returns a ChangeTrustBuilder that removes a trust .
7330	MutatePayment mutates a CreditAmount .
7331	MutatePayment mutates the payment operation .
7332	MutatePayment mutates a PaymentOp .
7333	MutatePayment mutates the payment operation .
7334	MutateAccountMerge is part of the AccountMerge interface .
7335	MustParse parses a string and panics on error .
7336	Parse parses a string into an xdr . Int64 .
7337	String returns a string representation of an int64 .
7338	CreateOffer creates a new ManageOfferBuilder .
7339	CreatePassiveOffer creates a new passive offer .
7340	UpdateOffer updates an offer .
7341	DeleteOffer deletes an offer .
7342	ManageOffer creates a ManageOfferBuilder .
7343	Mutate mutates the ManageOfferBuilder .
7344	MutateManageOffer mutates a ManageOffer operation .
7345	MutateManageOffer mutates the manage offer operation .
7346	MutateManageOffer mutates a manage offer operation .
7347	MutateOperation sets the SourceAccount field of the operation .
7348	String returns a string representation of the price .
7349	Transaction creates a new transaction builder .
7350	Mutate calls the Mutate method on the transaction builder .
7351	Hash returns the hash of the transaction .
7352	HashHex returns the transaction hash as a hex string .
7353	Sign signs the transaction with the given signers .
7354	MutateTransaction adds the allow trust operation to the transaction builder .
7355	MutateTransaction adds the change trust operation to the transaction .
7356	MutateTransaction adds a CreateAccount operation to the transaction .
7357	MutateTransaction sets the default values for the transaction .
7358	MutateTransaction adds an inflation operation to the transaction .
7359	MutateTransaction adds the manage data operation to the transaction .
7360	MutateTransaction adds an operation to the transaction builder .
7361	MutateTransaction adds a MemoHash to the transaction .
7362	MutateTransaction adds a Memo to the transaction .
7363	MutateTransaction adds a MemoReturn to the transaction .
7364	MutateTransaction implements the Mutation interface for MemoText .
7365	MutateTransaction is part of the Network interface .
7366	MutateTransaction adds the payment to the transaction .
7367	MutateTransaction adds the set options to the transaction .
7368	MutateTransaction adds the sequence number to the transaction .
7369	MutateTransaction sets the SourceAccount field of the transaction .
7370	Scan implements the xdr . Scanner interface .
7371	InitialState returns the initial state for the given key . If the key does not exist an error is returned .
7372	Changes returns a slice of xdr . LedgerEntryChange for the given key .
7373	StateAfter returns the last LedgerEntry for the given key after the given opidx .
7374	changes returns a slice of LedgerEntryChange that corresponds to the given target .
7375	MustDecode decodes a string and panics if decoding fails .
7376	Encode encodes src with the given version .
7377	MustEncode is like Encode but panics on error .
7378	checkValidVersionByte checks that the given version byte is valid .
7379	Checksum returns the checksum of the given data .
7380	Validate checks if the checksum of the data is equal to the expected checksum .
7381	LedgerKey implements the LedgerEntryChange interface .
7382	checkPlausible checks if the prefix is in the base32 alphabet
7383	Address returns the string representation of the account id .
7384	Equals returns whether this AccountId is equal to the given AccountId .
7385	SetAddress sets the Account Id s address .
7386	ToXdrObject converts an Asset to an XDR object .
7387	Through adds an asset to the end of the path
7388	PayWith creates a new PayWithPath .
7389	continuedFraction returns the continued fraction of the given price .
7390	Mutate calls the Mutate method on the TransactionEnvelopeBuilder .
7391	MutateTX adds a transaction mutation to the envelope .
7392	Bytes returns the bytes of the transaction envelope .
7393	Base64 returns the base64 encoding of the transaction envelope .
7394	MutateTransactionEnvelope updates the transaction envelope .
7395	MutateSetOptions mutates SetOptionsOp .
7396	MutateSetOptions implements xdr . OperationMutator . MutateSetOptions .
7397	MutateSetOptions sets the MasterWeight field of a SetOptionsOp .
7398	MutateSetOptions mutates SetOptionsOp .
7399	SetThresholds sets the threshold values .
7400	MutateSetOptions mutates a SetOptionsOp .
7401	MutateSetOptions mutates SetOptionsOp .
7402	MutateSetOptions mutates SetOptionsOp .
7403	MutateCreateAccount mutates CreateAccountOp .
7404	MutateCreateAccount mutates CreateAccountOp .
7405	Random returns a new full seed .
7406	Master returns a new master key .
7407	Parse creates a new KP from the given string .
7408	MustParse is like Parse but panics on error .
7409	MutateAllowTrust mutates AllowTrustOp .
7410	MutateAllowTrust mutates AllowTrustOp .
7411	MutateAllowTrust is defined on the Trustor interface .
7412	ToAsset converts a AllowTrustOpAsset to an Asset .
7413	SetNative sets the asset type to Native .
7414	String returns a string representation of the asset .
7415	Equals returns true if two assets are equal .
7416	MustExtract is like Extract but panics on error .
7417	Unmarshal unmarshals the XDR data from r into v .
7418	Marshal marshals v to w .
7419	ValidEnum returns true if the enum value is valid .
7420	NewPublicKey creates a new public key
7421	MustEd25519 returns the arm Ed25519 value or panics if not set .
7422	NewNodeId creates a new NodeId from a CryptoKeyType and value .
7423	NewAccountId creates a new AccountId from a CryptoKeyType and value .
7424	ValidEnum returns true if v is a valid asset type .
7425	ArmForSwitch returns the arm for the switch
7426	NewAsset creates a new Asset .
7427	MustAlphaNum4 returns the arm AlphaNum4 value or panics .
7428	GetAlphaNum4 returns the AlphaNum4 asset
7429	MustAlphaNum12 returns the arm AlphaNum12 value or panics .
7430	GetAlphaNum12 returns the AlphaNum12 asset
7431	ValidEnum returns true if the value is a valid threshold index .
7432	ValidEnum returns true if the given enum value is valid .
7433	ValidEnum returns true if the enum value is valid .
7434	NewAccountEntryExt creates a new AccountEntryExt .
7435	ValidEnum returns true if the value is valid .
7436	NewTrustLineEntryExt creates a new trust line entry extension .
7437	ValidEnum returns true if v is a valid offer entry flags .
7438	NewOfferEntryExt creates a new OfferEntryExt .
7439	NewDataEntryExt creates a new DataEntryExt .
7440	NewLedgerEntryData creates a new LedgerEntryData
7441	NewLedgerEntryExt creates a new LedgerEntryExt .
7442	ValidEnum returns true if the envelope type is valid .
7443	ValidEnum returns true if the operation type is valid .
7444	ArmForSwitch returns the arm for the switch
7445	NewAllowTrustOpAsset creates a new AllowTrustOpAsset
7446	MustAssetCode4 returns the arm AssetCode4 .
7447	GetAssetCode4 returns the asset code 4
7448	MustAssetCode12 returns the arm AssetCode12 .
7449	GetAssetCode12 returns the asset code 12
7450	NewOperationBody creates a new OperationBody
7451	MustCreateAccountOp panics if arm CreateAccountOp is not set .
7452	GetCreateAccountOp returns the CreateAccountOp .
7453	MustPaymentOp panics if the arm PaymentOp is not set .
7454	GetPaymentOp returns the payment operation .
7455	MustPathPaymentOp panics if arm PathPaymentOp is not set .
7456	GetPathPaymentOp returns the path payment operation .
7457	MustManageOfferOp panics if arm ManageOfferOp is not set .
7458	GetManageOfferOp returns the manage offer operation .
7459	MustCreatePassiveOfferOp panics if arm CreatePassiveOfferOp is not set .
7460	GetCreatePassiveOfferOp returns the CreatePassiveOfferOp .
7461	MustSetOptionsOp panics if SetOptionsOp is not set .
7462	GetSetOptionsOp returns the SetOptionsOp
7463	MustChangeTrustOp panics if arm ChangeTrustOp is not set .
7464	GetChangeTrustOp returns the ChangeTrustOp
7465	MustAllowTrustOp panics if the arm AllowTrustOp is not set .
7466	GetAllowTrustOp returns the AllowTrustOp field .
7467	MustDestination panics if the arm Destination is not set .
7468	GetDestination returns the destination of the operation .
7469	MustManageDataOp panics if the arm ManageDataOp is not set .
7470	GetManageDataOp returns the ManageDataOp
7471	ValidEnum returns true if the given value is a valid memo type .
7472	ArmForSwitch returns the arm for the given switch .
7473	NewMemo creates a new Memo .
7474	MustText returns the arm text .
7475	GetText returns the text of the Memo .
7476	MustId panics if the Memo s Id is not set .
7477	GetId returns the ID of the Memo .
7478	MustHash panics if the Memo s Hash is not set .
7479	GetHash returns the hash of the Memo .
7480	MustRetHash panics if Memo . RetHash is not set .
7481	NewTransactionExt creates a new TransactionExt .
7482	ValidEnum returns true if the enum value is a valid enum value .
7483	ArmForSwitch returns the arm for the switch .
7484	NewCreateAccountResult creates a new CreateAccountResult .
7485	ValidEnum returns whether v is a valid payment result code .
7486	ArmForSwitch returns the arm for the switch .
7487	NewPaymentResult creates a new payment result .
7488	ValidEnum returns true if the value is a valid enum value .
7489	ArmForSwitch returns the arm for the switch .
7490	NewPathPaymentResult creates a new PathPaymentResult .
7491	MustNoIssuer panics if NoIssuer is not set .
7492	GetNoIssuer returns the NoIssuer asset
7493	ValidEnum returns true if the given value is a valid ManageOfferResultCode .
7494	ValidEnum returns true if the given value is a valid ManageOfferEffect .
7495	ArmForSwitch returns the arm for the switch
7496	NewManageOfferSuccessResultOffer creates a new ManageOfferSuccessResultOffer
7497	ArmForSwitch returns the arm for the switch .
7498	NewManageOfferResult creates a new ManageOfferResult .
7499	ValidEnum returns true if the enum value is valid .
7500	ArmForSwitch returns the arm for the switch
7501	NewSetOptionsResult creates a new SetOptionsResult .
7502	ValidEnum returns whether v is a valid ChangeTrustResultCode enum value .
7503	ArmForSwitch returns the arm for the switch .
7504	NewChangeTrustResult creates a new ChangeTrustResult .
7505	ValidEnum returns true if the given value is a valid AllowTrustResultCode .
7506	ArmForSwitch returns the arm for the switch .
7507	NewAllowTrustResult creates a new AllowTrustResult .
7508	ValidEnum returns true if the enum value is valid .
7509	ArmForSwitch returns the arm for the switch .
7510	NewAccountMergeResult creates a new AccountMergeResult .
7511	MustSourceAccountBalance panics if arm SourceAccountBalance is not set .
7512	GetSourceAccountBalance returns the balance of the source account .
7513	ValidEnum returns whether v is a valid inflation result code .
7514	ArmForSwitch returns the arm for the switch .
7515	NewInflationResult creates a new inflation result .
7516	MustPayouts panics if arm Payouts is not set .
7517	GetPayouts returns the payouts for the switch .
7518	ValidEnum returns true if the given value is a valid ManageDataResultCode .
7519	ArmForSwitch returns the arm for the switch
7520	NewManageDataResult creates a new ManageDataResult .
7521	ValidEnum returns true if the value is a valid operation result code .
7522	ArmForSwitch returns the arm for the switch
7523	NewOperationResultTr creates a new OperationResultTr
7524	MustCreateAccountResult panics if arm CreateAccountResult is not set .
7525	GetCreateAccountResult returns the CreateAccountResult
7526	MustPaymentResult panics if the arm PaymentResult is not set .
7527	GetPaymentResult returns the payment result
7528	MustPathPaymentResult panics if PathPaymentResult is not set .
7529	GetPathPaymentResult returns the PathPaymentResult
7530	MustManageOfferResult panics if arm ManageOfferResult is not set .
7531	GetManageOfferResult returns the manage offer result
7532	MustCreatePassiveOfferResult panics if arm CreatePassiveOfferResult is not set .
7533	MustSetOptionsResult panics if SetOptionsResult is not set .
7534	GetSetOptionsResult returns the SetOptionsResult
7535	MustChangeTrustResult panics if ChangeTrustResult is not set .
7536	GetChangeTrustResult returns the ChangeTrustResult
7537	MustAllowTrustResult panics if AllowTrustResult is not set .
7538	GetAllowTrustResult returns the allow trust result
7539	MustAccountMergeResult panics if arm AccountMergeResult is not set .
7540	GetAccountMergeResult returns the account merge result .
7541	MustInflationResult panics if InflationResult is not set .
7542	GetInflationResult returns the inflation result
7543	MustManageDataResult panics if arm ManageDataResult is not set .
7544	GetManageDataResult returns the ManageDataResult
7545	ArmForSwitch returns the arm for the switch .
7546	NewOperationResult creates a new OperationResult .
7547	MustTr panics if the arm Tr is not set .
7548	GetTr returns the operation result tr .
7549	ValidEnum returns whether v is a valid transaction result code .
7550	ArmForSwitch returns the arm for the switch .
7551	NewTransactionResultResult creates a new TransactionResultResult .
7552	MustResults panics if the transaction results are not set .
7553	GetResults returns the results of the transaction .
7554	NewTransactionResultExt creates a new TransactionResultExt .
7555	NewStellarValueExt creates a new StellarValueExt .
7556	NewLedgerHeaderExt creates a new LedgerHeaderExt .
7557	ValidEnum returns true if the given value is a valid ledger upgrade type .
7558	ArmForSwitch returns the arm for the given switch .
7559	NewLedgerUpgrade creates a new ledger upgrade
7560	MustNewLedgerVersion panics if NewLedgerVersion is not set .
7561	GetNewLedgerVersion returns the new ledger version
7562	MustNewBaseFee panics if the arm NewBaseFee is not set .
7563	GetNewBaseFee returns the new base fee
7564	MustNewMaxTxSetSize panics if NewMaxTxSetSize is not set .
7565	GetNewMaxTxSetSize returns the new max tx set size .
7566	ArmForSwitch returns the arm for the given switch .
7567	NewLedgerKey creates a new ledger key
7568	ValidEnum returns true if the enum value is valid .
7569	ArmForSwitch returns the arm for the given switch .
7570	NewBucketEntry creates a new bucket entry
7571	MustLiveEntry panics if LiveEntry is not set .
7572	GetLiveEntry returns the live entry
7573	MustDeadEntry panics if DeadEntry is not set .
7574	GetDeadEntry returns the LedgerKey associated with the bucket entry .
7575	NewTransactionHistoryEntryExt creates a new TransactionHistoryEntryExt .
7576	ArmForSwitch returns the arm for the switch .
7577	NewTransactionHistoryResultEntryExt creates a new TransactionHistoryResultEntryExt .
7578	NewLedgerHeaderHistoryEntryExt creates a new LedgerHeaderHistoryEntryExt
7579	NewScpHistoryEntry creates a new ScpHistoryEntry
7580	ValidEnum returns true if the given enum value is valid .
7581	ArmForSwitch returns the arm for the switch
7582	NewLedgerEntryChange creates a new LedgerEntryChange
7583	MustCreated panics if LedgerEntryChange . Created is not set .
7584	GetCreated returns the LedgerEntry that was created .
7585	MustUpdated panics if LedgerEntryChange . Updated is not set .
7586	GetUpdated returns the LedgerEntry that was updated .
7587	MustRemoved implements the LedgerEntryChange interface for LedgerEntryChange .
7588	GetRemoved implements the LedgerEntry interface for LedgerEntryChange
7589	MustState panics if the LedgerEntryChange s State is not set .
7590	GetState implements the LedgerEntryChange interface .
7591	NewTransactionMeta creates a new transaction meta .
7592	MustOperations panics if ArmOperations is not set .
7593	GetOperations returns the Operations field of the transaction .
7594	ValidEnum returns true if the value is a valid enum .
7595	ValidEnum returns true if the value is a valid enum value .
7596	ArmForSwitch returns the Arm for the given switch .
7597	NewPeerAddressIp creates a new PeerAddressIp
7598	MustIpv4 panics if the arm Ipv4 is not set .
7599	GetIpv4 returns the IPv4 address
7600	MustIpv6 panics if the arm Ipv6 is not set .
7601	GetIpv6 returns the IPv6 address
7602	ValidEnum returns true if the enum value is valid .
7603	ArmForSwitch returns the arm for the given switch .
7604	NewStellarMessage creates a new StellarMessage
7605	MustError panics if the arm Error is not set .
7606	GetError returns the error of the message .
7607	MustHello panics if the arm Hello is not set .
7608	GetHello returns the hello of the message .
7609	MustAuth panics if the arm Auth is not set .
7610	GetAuth returns the Auth field of the message .
7611	MustDontHave panics if arm DontHave is not set .
7612	GetDontHave returns the DontHave value .
7613	MustPeers panics if arm Peers is not set .
7614	GetPeers returns the list of peers for this message .
7615	MustTxSetHash panics if the arm TxSetHash is not set .
7616	GetTxSetHash returns the transaction set hash .
7617	MustTxSet panics if the arm TxSet is not set .
7618	GetTxSet returns the transaction set for this message .
7619	MustTransaction panics if the arm Transaction is not set .
7620	GetTransaction returns the transaction envelope for this message .
7621	MustQSetHash panics if the arm QSetHash is not set .
7622	GetQSetHash returns the QSetHash of the message .
7623	MustQSet panics if QSet is not set .
7624	GetQSet returns the QuorumSet for this message .
7625	MustEnvelope panics if the arm envelope is not set .
7626	GetEnvelope returns the envelope of the message .
7627	MustGetScpLedgerSeq panics if GetGetScpLedgerSeq is not set .
7628	GetGetScpLedgerSeq returns the value of GetScpLedgerSeq
7629	ArmForSwitch returns the arm for the switch .
7630	NewAuthenticatedMessage creates an AuthenticatedMessage from a uint32 value
7631	ValidEnum returns whether v is a valid ScpStatementType enum value .
7632	ArmForSwitch returns the arm for a switch statement .
7633	NewScpStatementPledges creates a new ScpStatementPledges
7634	MustPrepare panics if arm Prepare is not set .
7635	GetPrepare returns the Prepare statement .
7636	MustConfirm panics if arm Confirm is not set .
7637	GetConfirm returns the confirm statement .
7638	MustExternalize panics if arm externalize is not set .
7639	GetExternalize returns the externalize statement .
7640	MustNominate panics if arm Nominate is not set .
7641	GetNominate returns the nominate value .
7642	SafeUnmarshalBase64 unmarshals a base64 encoded string into dest .
7643	SafeUnmarshal unmarshals data into dest .
7644	SendAmount returns the amount of the payment .
7645	LoadAccount loads an account from the API .
7646	SequenceForAccount returns the sequence number for an account .
7647	SubmitTransaction sends a transaction to the server .
7648	Equals returns true if two ledger keys are equal .
7649	SetAccount sets the account of the ledger key .
7650	SetData sets the data for the ledger key .
7651	SetOffer adds an offer to the ledger key .
7652	SetTrustline sets the trust line for the ledger key .
7653	Add adds a new key - value pair to the builder .
7654	tryHash attempts to hash the given value . It returns true if the hash was successful .
7655	HashIndexFromKey returns the hash index of the given key .
7656	ReadInt reads an int from the slice .
7657	Read reads a CHD from r .
7658	Get returns the value for the given key . Returns nil if the key is not found .
7659	Iterate returns an iterator that iterates over all the keys in the CHD .
7660	Write writes the CHD to the given io . Writer .
7661	RegisterDatasources registers the datasources at the given path .
7662	RegisterFonts registers the mapnik fonts at the given path .
7663	New creates a new map .
7664	NewSized creates a new map with the specified width and height .
7665	Load loads the map from a stylesheet .
7666	Resize changes the size of the map .
7667	Free frees the map .
7668	SRS returns the SRS of the map .
7669	ZoomAll zooms all tiles in the map .
7670	ZoomTo zooms the map to the specified coordinates .
7671	Render renders the map to a blob .
7672	RenderImage renders the map into an image . NRGBA .
7673	RenderToFile renders the map to a file .
7674	SetBufferSize sets the buffer size of the map .
7675	Search sends a search request and returns the results .
7676	Get returns a connection from the pool or returns ErrClosed if the pool is closed .
7677	put is used to put a connection to the pool .
7678	MonoToStereoF32 converts from mono to stereo .
7679	BitCrush applies a crusher factor to the audio . FloatBuffer .
7680	NormalizeMax normalizes the maximum value of a FloatBuffer .
7681	Gain calculates the gain of the audio . FloatBuffer .
7682	MonoDownmix implements audio . FloatBuffer . MonoDownmix .
7683	Quantize quantizes the audio . FloatBuffer with the given bit depth .
7684	PCMScale applies the PCMScale factor to the audio . FloatBuffer .
7685	StereoPan scales the audio . FloatBuffer to the specified value . Pan must be between 0 and 1 .
7686	Leader returns the leader of the follower
7687	IsLeader returns true if the candidate is the leader .
7688	NewResponse creates a new Response .
7689	GetRequestID returns the request ID from the context .
7690	Log writes a message to the monitorableWriter .
7691	SendMailSSL sends an email using TLS .
7692	Send a message
7693	WaitForIt waits for a connection to be established .
7694	Get returns the configuration for the given environment .
7695	initConfig initializes the Viper config file
7696	WritePluginResultsToDatabase writes the plugin results to the database
7697	NewAuthController creates a new AuthController .
7698	Authenticate authenticates a user
7699	NewOAuth2Controller creates a new OAuth2Controller .
7700	Refresh refresh token
7701	Token returns a token from an OAuth2 code .
7702	Logging logs the request to the given log .
7703	SingleFile returns a handler that serves a single file .
7704	Write implements the http . ResponseWriter interface .
7705	Hijack implements the http . Hijacker interface .
7706	NewMongo creates a new Mongo instance
7707	Disconnect disconnects the connection
7708	New creates a new table .
7709	PrintTable prints a table .
7710	PrintHorizontal prints a table of key - value pairs .
7711	PrintRow prints a single row .
7712	AddRow adds a new row to the table
7713	Print prints the table .
7714	String returns a string representation of the table .
7715	getHead returns the head of the table .
7716	rowString returns a string representation of a row .
7717	fieldString returns a string representation of a field .
7718	stringTableDash returns a dash - separated string .
7719	printMarkdownDash prints a markdown - formatted table .
7720	stringMarkdownDash returns a markdown - formatted string of the table .
7721	HashPassword hashes a password using scrypt .
7722	EncodeOAuth2Code encodes an OAuth2 code .
7723	DecodeOAuth2Code decodes an OAuth2 code .
7724	NewServer creates a new server .
7725	Start starts the Lunarc server .
7726	Stop stops the Lunarc server .
7727	NewLoggingServeMux creates a new LoggingServeMux .
7728	Handler implements the http . Handler interface .
7729	Handle implements the http . Handler interface .
7730	HandleFunc registers a handler for the given pattern .
7731	Init initializes the database .
7732	WaitForConnection waits for a connection to elasticsearch
7733	StoreFileInfo stores a file in the database .
7734	StorePluginResults stores the plugin results .
7735	CamelCase converts a string to a camel case string .
7736	Getopt returns the value of an environment variable or dfault if not set .
7737	Getopts returns the value of an environment variable or the default value .
7738	GetSHA256 returns the SHA256 hash of a file .
7739	RunCommand runs a command and returns its output .
7740	RemoveDuplicates removes duplicate elements from a slice .
7741	Unzip unzips the given archive into the target directory .
7742	SliceContainsString returns true if a is contained in the list .
7743	NewSMTP creates a new SMTP instance
7744	SendMail sends an email .
7745	GetEnvironment returns the configuration for the given environment
7746	GetSMTP gets the SMTP configuration from the given source .
7747	GetConfig returns a Config from the given source and environment .
7748	GetEnvironment returns the configuration for the given environment
7749	GetMongo gets the mongo configuration from the given source and environment .
7750	TokenHandler returns an http . Handler that checks if the request is a valid JWT token .
7751	Receive returns the next message from the connection .
7752	Send sends an out - of - band message .
7753	allBoshReleaseNames returns a list of all bosh release names .
7754	AddedProperty adds a new property to the delta job
7755	RemovedProperty adds a RemovedProperty to the DeltaJob .
7756	AddDeltaJob adds a delta job to the result .
7757	Concat merges two Result objects together .
7758	Read reads the contents of a release from the given location .
7759	Pull pulls a release from the local cache .
7760	BuildJob builds a job from a BoshJobMeta .
7761	LoadBoshRelease loads a bosh release from the given path .
7762	readBoshRelease reads a BoshRelease from rr .
7763	readBoshRelease reads a bosh release from rr .
7764	readBoshJob reads a bosh job from an io . Reader .
7765	NewRequest creates a new http . Request .
7766	PushCloudConfig pushes the given cloud config to the BOSH .
7767	Generate generates a job manifest file .
7768	CreateNewRecord creates a new record
7769	NewShowCmd returns a new instance which can be used to issue a show JSON - RPC command .
7770	All prints all the bosh releases
7771	GetDefaultTaskImageResource returns the default task image resource
7772	AddRawJob adds a raw job to the pipeline
7773	AddGroup adds a group to the pipeline
7774	GetResourceByName returns the resource by name or nil if not found .
7775	AddRawResource adds a raw resource to the pipeline
7776	AddResource adds a new resource to the pipeline
7777	AddGithubResource adds a Github resource to the pipeline
7778	AddBoshIOResource adds a BoshIO resource to the pipeline
7779	AddBoshDeploymentResource adds a Bosh deployment resource to the pipeline
7780	AddGitResource adds a git resource to the pipeline
7781	allJobNames returns a list of all job names .
7782	NewDeploymentManifestFromFile creates a new DeploymentManifest from a file .
7783	NewDeploymentManifest creates a new DeploymentManifest from a byte slice .
7784	AddRemoteRelease adds a remote release to the deployment manifest
7785	AddRemoteStemcell adds a stemcell to the manifest
7786	Tag returns the tag value for the given key .
7787	RemoveTag removes a tag from the manifest
7788	LoadPivnetRelease loads a PivnetRelease from the given path .
7789	BoshReleaseOrEmpty returns the BoshRelease with the given name or an empty BoshRelease if it does not exist .
7790	readPivnetRelease reads a PivnetRelease from the given path .
7791	decodeYaml decodes the YAML data from r into v .
7792	NewZipWalker returns a Walker that walks a zip file .
7793	NewDiffCmd returns a new instance which can be used to issue a diff .
7794	All prints the result of the diff .
7795	Job prints the diff for the given job .
7796	New returns a new Differ .
7797	StructName returns the struct name
7798	TypeName returns the type name of the element at index i .
7799	NewTgzWalker returns a new Walker that walks tgz files .
7800	NewBackoff returns a new Backoff .
7801	Reset resets the backoff .
7802	NewExponential creates a new exponential backoff .
7803	NewExponentialFullJitter creates a new Backoff with an exponential backoff .
7804	NewLinear creates a new Backoff .
7805	GetLineSize returns the size of a line .
7806	GetMaxSize returns the maximum line size .
7807	Compute the Sapin output .
7808	WithTimeout adds the timeout to the post apps params
7809	WithContext adds the context to the post apps params
7810	WithHTTPClient adds the HTTPClient to the post apps params
7811	WithBody adds the body to the post apps params
7812	WithTimeout adds the timeout to the get apps app params
7813	WithContext adds the context to the get apps app params
7814	WithHTTPClient adds the HTTPClient to the get apps app params
7815	WithApp adds the app to the get apps app params
7816	UnmarshalBinary unmarshals a raw byte array into a RouteWrapper .
7817	WithTimeout adds the timeout to the get apps params
7818	WithContext adds the context to the get apps params
7819	WithHTTPClient adds the HTTPClient to the get apps params
7820	WithTimeout adds the timeout to the delete apps app params
7821	WithContext adds the context to the delete apps app params
7822	WithHTTPClient adds the HTTPClient to the delete apps app params
7823	WithApp adds the app to the delete apps app params
7824	WithTimeout adds the timeout to the patch apps app routes route params
7825	WithContext adds the context to the patch apps app routes route params
7826	WithHTTPClient adds the HTTPClient to the patch apps app routes route params
7827	WithApp adds the app to the patch apps app routes route params
7828	WithBody adds the body to the patch apps app routes route params
7829	WithRoute adds the route to the patch apps app routes route params
7830	WithTimeout adds the timeout to the post apps app routes params
7831	WithContext adds the context to the post apps app routes params
7832	WithHTTPClient adds the HTTPClient to the post apps app routes params
7833	WithApp adds the app to the post apps app routes params
7834	WithBody adds the body to the post apps app routes params
7835	WithTimeout adds the timeout to the put apps app routes route params
7836	WithContext adds the context to the put apps app routes route params
7837	WithApp adds the app to the put apps app routes route params
7838	WithBody adds the body to the put apps app routes route params
7839	WithRoute adds the route to the put apps app routes route params
7840	WithTimeout adds the timeout to the get apps app routes params
7841	WithContext adds the context to the get apps app routes params
7842	WithHTTPClient adds the HTTPClient to the get apps app routes params
7843	WithApp adds the app to the get apps app routes params
7844	WithTimeout adds the timeout to the patch apps app params
7845	WithContext adds the context to the patch apps app params
7846	WithHTTPClient adds the HTTPClient to the patch apps app params
7847	WithApp adds the app to the patch apps app params
7848	WithBody adds the body to the patch apps app params
7849	WithTimeout adds the timeout to the put apps app params
7850	WithContext adds the context to the put apps app params
7851	WithApp adds the app to the put apps app params
7852	WithBody adds the body to the put apps app params
7853	UnmarshalJSON implements the json . Unmarshaler interface
7854	MarshalJSON implements the json . Marshaler interface .
7855	Validate validates this task
7856	GetRanges takes a list of IP addresses and returns a list of IP ranges .
7857	WithTimeout adds the timeout to the get apps app routes route params
7858	WithContext adds the context to the get apps app routes route params
7859	WithHTTPClient adds the HTTPClient to the get apps app routes route params
7860	WithApp adds the app to the get apps app routes route params
7861	WithRoute adds the route to the get apps app routes route params
7862	New returns a new instance of Functions
7863	SetTransport sets the client transport
7864	WithTimeout adds the timeout to the delete apps app routes route params
7865	WithContext adds the context to the delete apps app routes route params
7866	WithHTTPClient adds the HTTPClient to the delete apps app routes route params
7867	WithApp adds the app to the delete apps app routes route params
7868	WithRoute adds the route to the delete apps app routes route params
7869	WithTimeout adds the timeout to the get tasks params
7870	WithContext adds the context to the get tasks params
7871	WithHTTPClient adds the HTTPClient to the get tasks params
7872	NewValueStore creates a new value store .
7873	Close shuts down the value store .
7874	SetBackend sets the OortService
7875	Ring returns the server s ring .
7876	GetLocalID returns the local ID of the server .
7877	GetListenAddr returns the server s listen address .
7878	Startup starts the group store .
7879	shutdownFinished waits for the server to shutdown .
7880	Stop stops the service .
7881	Exit stops the server and waits for it to exit .
7882	SelfUpgrade is part of the Server interface .
7883	SoftwareVersion returns the current software version .
7884	Shutdown is part of the Store interface .
7885	Rant returns a RantModel and a list of Comments .
7886	Profile returns the profile for the given user .
7887	Search returns a list of Rants that match the given term .
7888	Surprise returns the Surprise Model
7889	WeeklyRants returns a list of weekly rants
7890	getUserId returns the user id for the given username .
7891	Shutdown shuts down the value store .
7892	FExists checks if a file exists
7893	outbound is a long lived goroutine that sends messages to the underlying connection .
7894	parse is a long lived goroutine that reads messages from the pool and sends them to the inbound channel
7895	Group creates a new Group
7896	Groups returns a list of all groups in the domain .
7897	GetGroup returns a group by name .
7898	Reticence returns a Reticence string .
7899	CheckPassword checks if a password is valid .
7900	CleanUrl is a helper function to clean a URL
7901	NewParameter creates a new Parameter
7902	MakeParams creates a new Params struct .
7903	Parse parses the parameters from a reflect . Value .
7904	Email returns the email address of the forwarding .
7905	Forwarder creates a new forwarder
7906	Forwarders returns a list of Forwarders for the domain .
7907	GetForwarder returns a Forwarder by name .
7908	New creates a new CGP instance
7909	EscapeCommaSeparated escapes a comma separated string .
7910	Alias creates a new alias for an account .
7911	Email returns the email address of the alias
7912	Aliases returns a list of aliases for the account .
7913	RealName returns the real name of the account .
7914	Email returns the email address of the account .
7915	Account creates a new account
7916	Accounts returns a list of all accounts in the domain .
7917	Exists returns true if the domain exists .
7918	Aliases returns the aliases for the domain .
7919	Domain creates a new domain
7920	Domains returns a list of domains .
7921	New creates a new error .
7922	Wrap wraps an error and returns it .
7923	mergeIn merges info and publicMsg into the error .
7924	wrappedErrStr returns the wrapped error as a string .
7925	concatArgs returns a concatenated string .
7926	MailingList creates a new MailingList
7927	Subscriber creates a new subscriber .
7928	Subscribers returns a list of Subscribers for this MailingList .
7929	MailingLists returns the list of mailing lists for the domain .
7930	NewByteKeyItem creates a new byte key item .
7931	CompareBytes returns 0 if this is equal to that .
7932	CompareInt compares two int values .
7933	Malloc allocates l bytes of memory .
7934	Free frees memory .
7935	Stats returns the number of mallocs and frees .
7936	FreeOSMemory frees the OS memory .
7937	Add adds an item to the segment .
7938	NewSegment creates a new Segment .
7939	Assemble builds a Skiplist from the given segments .
7940	CompareNodeTable compares two node table pointers .
7941	New creates a new NodeTable .
7942	Stats returns a string representation of the node table .
7943	MemoryInUse returns the amount of memory in use .
7944	Get returns the value associated with the given key or nil if not found .
7945	Update updates the node with the given key .
7946	Remove removes a key from the node table .
7947	Close closes the node table .
7948	MemoryInUse returns the number of bytes in use .
7949	debugMarkFree marks the node as free .
7950	Seek moves the iterator to the next item in the database .
7951	Next moves the iterator to the next item .
7952	Refresh refreshes the iterator .
7953	Close closes the iterator .
7954	NewIterator creates a new iterator from a snapshot .
7955	SeekFirst moves the iterator to the first item in the merge iterator .
7956	Next moves the iterator to the next item .
7957	Seek moves the iterator to the given item and returns true if it was found .
7958	Keys returns all the keys in the list .
7959	Remove removes a key from the list . Returns nil if the key is not found .
7960	Add adds a new node to the list .
7961	NewWithConfig creates a new Skiplist with the given configuration .
7962	FreeNode is used to free a node .
7963	MakeBuf returns a new ActionBuffer .
7964	Size returns the number of bytes in the Skiplist
7965	NewLevel creates a new Skiplist level
7966	Insert inserts an item into the list .
7967	Insert2 inserts a new item into the list .
7968	Insert3 inserts a new item into the list .
7969	Delete deletes an item from the Skiplist .
7970	DeleteNode deletes a node from the Skiplist .
7971	GetRangeSplitItems returns a slice of items in the range [ 0 nways ) .
7972	Bytes returns the contents of the item as a byte slice .
7973	ItemSize returns the size of an Item .
7974	KVFromBytes extracts the key and value from a byte slice .
7975	CompareKV compares two byte slices .
7976	Emit sends an event to all registered handlers .
7977	UnregisterHandler removes a handler from the event controller
7978	IsHandlerRegistered returns true if the given handler is registered .
7979	CompareNitro compares two Nitro objects .
7980	DefaultConfig returns the default configuration .
7981	Delete deletes the contents of bs .
7982	GetNode returns a node from the store .
7983	SetKeyComparator sets the key comparator .
7984	UseMemoryMgmt implements the Config interface for useMemoryMgmt .
7985	NewWithConfig creates a new Nitro instance with the given configuration .
7986	MemoryInUse returns the number of bytes in use .
7987	Close shuts down the Nitro .
7988	NewWriter returns a new writer .
7989	SnapshotSize returns the size of the snapshot .
7990	Encode writes the snapshot to the given io . Writer .
7991	Decode decodes the snapshot from r .
7992	Open returns true if the snapshot has been opened .
7993	CompareSnapshot compares two Snapshots .
7994	GC is used to clean up the Nitro .
7995	GetSnapshots returns all the snapshots in the Nitro .
7996	MemoryInUse returns the number of bytes in use .
7997	CompareBS compares two barrier sessions .
7998	Acquire returns the barrier session if it is active or returns nil if it is not active .
7999	Release implements the AccessBarrier interface .
8000	FlushSession implements the AccessBarrier interface .
8001	Apply updates the stats report .
8002	AddInt64 adds an int64 to the stats .
8003	AddUint64 adds a uint64 to the stats .
8004	Merge takes a Stats struct and merges it into s .
8005	GetStats returns the stats of the Skiplist .
8006	NewIterator creates a new iterator .
8007	SeekFirst moves the iterator to the first element .
8008	SeekWithCmp seeks to the first item with the given comparison function and returns true if the item was found and false otherwise .
8009	Seek moves the iterator to the next element and returns whether it was found .
8010	Valid returns whether or not the iterator is valid .
8011	Delete deletes the current element from the iterator .
8012	Next moves the iterator to the next item .
8013	Init initializes SkuM1SmallBuilder
8014	FromURL returns a copy of the given URL .
8015	ToURL converts a folder name to a URL .
8016	Size returns the size of the tuple .
8017	WriteTo implements io . WriterTo interface . It serializes the header into w .
8018	Static returns a handler that serves static files in the given directory .
8019	Read reads the configuration from a file .
8020	Del removes a key from the given section .
8021	WriteTo writes the config to a file .
8022	checkSection checks if the given line is a section .
8023	checkLine parses a single line and returns the key and value .
8024	checkComment checks if the given line is a comment .
8025	NewResponseWrapper creates a new ResponseWrapper
8026	Hijack implements the http . Hijacker interface .
8027	CloseNotify returns a channel that will be closed when the response is closed .
8028	DateFormat returns an Option that sets the date format .
8029	Logger returns a middleware that prints the response to stdout .
8030	GetAvailableInventory returns the available sku builders for the given integrations collection .
8031	Expiration sets the expiration time for the token .
8032	Claimer is a TokenOpt that sets the claimer function .
8033	Issuer specifies the issuer of the token .
8034	User is a functional option for TokenOpt .
8035	Password is a TokenOpt that sets the token s password .
8036	Extractor is a functional option for TokenOpt .
8037	TokenGenerator returns a token generator .
8038	Token returns the token from the request context .
8039	Claims returns the jwt . Claims from the request context .
8040	String returns a string representation of the token .
8041	NewLexer creates a new Lexer .
8042	run runs the Lexer .
8043	emit sends a token to the handler .
8044	skipWhitespace skips whitespace .
8045	next returns the next rune .
8046	LineNum returns the line number .
8047	Offset returns the offset of the current line .
8048	errorf implements the Lexer interface .
8049	lexText lexes text .
8050	lexComment lexes a comment .
8051	New creates a new TupleType .
8052	AddVersion adds one or more fields to the tuple type .
8053	Contains returns true if the TupleType contains the given field .
8054	Offset returns the offset for the given field .
8055	Versions returns the versions of the tuple type .
8056	SetPrivateMeta sets the private metadata for the task .
8057	SetPublicMeta sets the public metadata for the task .
8058	GetRedactedVersion returns the redacted version of the task .
8059	Equal returns true if two tasks are equal .
8060	HTTP returns an http . Handler that handles requests with the given verb .
8061	PutUint8 writes an unsigned int8 value to the tuple .
8062	PutInt8 writes an int8 value to the tuple .
8063	PutUint16 writes an unsigned 16 - bit unsigned integer to the buffer .
8064	PutInt16 adds an int16 to the tuple .
8065	PutUint32 writes an unsigned 32 - bit integer to the buffer .
8066	PutInt32 writes an int32 to the buffer .
8067	PutUint64 appends an unsigned 64 - bit unsigned integer to the buffer .
8068	PutInt64 writes an int64 value to the buffer .
8069	NewPackageList creates a new PackageList .
8070	PutFloat32 writes a float32 value to the buffer .
8071	Classic creates a new ClassicMartini .
8072	Languages returns an Option that sets the list of languages to use .
8073	Session returns an Option that sets the session handler .
8074	Data returns the data from the request context .
8075	URL adds the current URL to the context .
8076	Size returns the size of the terminal .
8077	GetRequestIDFromTaskResponse returns the request id from the task response
8078	PutString adds a string to the tuple .
8079	LoadDirectory loads files from a directory .
8080	LoadFile loads a package from a file .
8081	LoadPackage loads a package from a string .
8082	NewDecoder returns a new decoder that reads from r .
8083	NewDecoderSize creates a new decoder with the given maxSize and reader .
8084	Panic wraps an http . Handler with a panic handler .
8085	DeployVApp is a mock
8086	UnDeployVApp undeploy a vapp
8087	Auth implements VCDClient . Auth .
8088	QueryTemplate is part of the VCDClient interface
8089	NewEncoder returns a new encoder that writes to w .
8090	Getter returns an Option that sets the nonce getter .
8091	Setter returns an Option that sets the nonce setter .
8092	Age returns an Option that sets the age of the server .
8093	Nonce returns an http . Handler that will generate and store a new nonce .
8094	NonceValueFromRequest returns the nonce value from the request context .
8095	StoreNonce stores the nonce in the request context .
8096	PutFloat32Array writes a float32 array to the buffer .
8097	PutFloat64Array adds an array of float64 to the tuple .
8098	Do implements the Doer interface .
8099	NewLease creates a new lease .
8100	Delete removes a Lease from the inventory .
8101	Post sends a POST request to the lease .
8102	ReStock is used to re - stock the lease
8103	Procurement is used to process the lease
8104	InitFromHTTPRequest initializes Lease from HTTP request body .
8105	Is returns true if the tuple is of the given type .
8106	Offset returns the offset of the given field .
8107	WriteTo writes the tuple to the given io . Writer .
8108	PutTuple adds a tuple to the builder .
8109	WriteString writes a string to the response .
8110	NotFound writes a response with status code 404 .
8111	Run starts the agent .
8112	NewWaitGroup creates a new waiter .
8113	Add implements the WaitGroup interface .
8114	Wait blocks until all goroutines have completed .
8115	Gzip returns an http . Handler that compresses requests using gzip .
8116	New creates a new Innkeeper client
8117	Error writes an error response .
8118	Renderer returns a Handler that renders a template with the given options .
8119	NewClient creates a new PDClient .
8120	GetTask returns a task by ID .
8121	WriteImageToHTTP writes an image to an http . ResponseWriter .
