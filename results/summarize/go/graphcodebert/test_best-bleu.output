0	NewSTM creates a new STM transaction .
1	first returns the first revision in rs .
2	cmps returns a slice of keys that are equal to the given revision .
3	NewSTMRepeatable creates a new Txn with the given apply function .
4	NewSTMSerializable creates a new STM with the given apply function .
5	NewSTMReadCommitted creates a new Txn .
6	NewCertPool creates a CertPool from CAFiles
7	NewCert creates a new tls . Certificate
8	Pause disables the peer .
9	Resume is used to resume the peer .
10	pick picks a writec message from the pipeline .
11	post sends the request to the remote server .
12	newTxnResp creates a TxnResponse from a TxnRequest
13	applyCompare returns true if the key value matches c .
14	OpCompact creates a CompactOp .
15	NewPriorityQueue creates a PriorityQueue
16	Enqueue adds the given value to the queue .
17	NewLeaderStats initializes a LeaderStats struct .
18	Succ updates the number of successes
19	Fail increments the fail counter .
20	delete removes a watcher from the list of broadcasts
21	startStreamWriter starts a new streamWriter .
22	checkStreamSupport returns true if the version is supported .
23	maybeUpdate updates the current state of the match to n . If n is greater than n or equal to n then it returns true .
24	IsPaused returns true if the progress is paused .
25	needSnapshotAbort returns true if the progress is a snapshot .
26	add adds an inflight to the buffer .
27	growBuf grows the buffer if needed .
28	freeTo removes all instances from the buffer .
29	SaveDBFrom saves the snapshot to disk .
30	DBFilePath returns the file path for a snapshot
31	Set parses a comma separated string into a UniqueStringsValue
32	NewUniqueStringsValue creates a new UniqueStringsValue object
33	UniqueStringsFromFlag returns the unique strings value for a given flag .
34	UniqueStringsMapFromFlag returns a map of unique strings for a given flag .
35	Percentiles takes a slice of float64 and returns a slice of percentiles and data slice of percentiles .
36	VerifyBootstrap checks that the initial cluster is valid .
37	VerifyJoinExisting checks if the initial cluster is valid
38	hasLocalMember checks if the initial peer is in the initial list
39	advertiseMatchesCluster checks if the initial peer URLs are equal .
40	ReqTimeout returns the timeout for a request
41	getStatus returns the current status of the raft .
42	GetDefaultHost returns the default host for the default router .
43	getIfaceAddr gets an interface address from the interface family .
44	getIfaceLink gets the interface associated with the interface index .
45	lsCommandFunc is a wrapper for lsCommand .
46	printLs prints a list of nodes
47	rPrint prints a node
48	NewLeaseRenewerCommand returns a new lease renewer command
49	Read reads a snapfile from disk
50	GetCipherSuite returns the cipherSuite given a string
51	post sends the given data to the cluster .
52	send sends message to raft .
53	sendHeartbeat sends a heartbeat message to the raft log .
54	bcastAppend sends any pending progress updates to the cluster .
55	bcastHeartbeat sends a heartbeat to the Raft cluster .
56	tickElection is invoked when a leader election is elected .
57	tickHeartbeat is used to send heartbeats to the leader .
58	stepCandidate processes a candidate message .
59	restore is used to restore a snapshot
60	promotable returns true if Raft is active .
61	checkQuorumActive checks if the current quorum is active .
62	increaseUncommittedSize increases the max uncommitted size for the given entries .
63	reduceUncommittedSize reduces the number of unmitted entries to zero if needed .
64	newPeriodic creates a new Periodic .
65	Pause disables the periodic .
66	Resume disables the periodic .
67	Lock locks m .
68	NewLocker returns a new Locker .
69	NewFIFOScheduler returns a new fifo scheduler .
70	Schedule adds a job to the fifo .
71	Stop stops the fifo .
72	NewServer returns a new Server .
73	StartServe starts the server .
74	Stop stops the gRPC server .
75	Transport implements the transport . Transport interface .
76	RegisterInterruptHandler registers a new interrupt handler
77	HandleInterrupts is a goroutine that handles SIGINT SIGTERM .
78	OpGet returns a new range operation .
79	OpDelete creates a delete operation .
80	OpPut creates a put operation .
81	OpTxn creates a new transaction .
82	WithFromKey returns an option that sets the key .
83	withTop returns op options for top - level operation .
84	Exist checks if a directory exists .
85	searchIndex returns the index of a WAL file .
86	isValidSeq returns true if any of the names are valid .
87	NewListener creates a net . Listener
88	cafiles returns the list of trusted CA files
89	ServerConfig returns the TLS configuration for the server .
90	ClientConfig returns a TLS configuration for the client .
91	newTLSKeepaliveListener creates a new TLSKeepaliveListener
92	applyV2Request applies the given request to etcd .
93	NewRoleCommand returns the cobra command for role subcommands
94	RoleAddCommandFunc adds a role add command
95	RoleGetCommandFunc runs a role get command
96	Role grant permissions
97	Role revoke - permission command
98	NewCluster creates a new cluster .
99	NewClusterByConfig creates a new cluster with the given config .
100	HTTPMembers implements the HTTPClient interface .
101	waitLeader waits for all members to become leader .
102	waitNoLeader waits until the leader is elected .
103	isMembersEqual checks if two slice of members are equal
104	listenGRPC initializes the grpc listener
105	NewClientV3 returns a new client for the given member .
106	Clone returns a shallow copy of the member .
107	Close closes the member .
108	Stop closes the member .
109	checkLeaderTransition checks if the current leader transition is valid and returns the current leader
110	Restart restarts a member .
111	Terminate terminates the node .
112	Metric returns the metric for a given metric name
113	InjectPartition injects the given members into this member .
114	RecoverPartition moves the peer to the given members .
115	NewClusterV3 creates a new ClusterV3 .
116	Parse with defaults
117	Parse parses the options from optMap
118	Key returns the JWT key used for signing
119	fill fills the header fields in the response header
120	add adds a watcher to the broadcast broadcast . Returns true if the watcher was added .
121	Watch starts a new watch for the given key and revokes the given filter function . It returns the ID of the WatchID that matches the given key .
122	newFileEncoder creates a new encoder for the given file .
123	purgeFile removes files from the given directory .
124	Set implements the flag . Value interface .
125	NewStringsValue creates a new StringsValue object .
126	StringsFromFlag returns the flag value for a given flag .
127	Cluster returns the version of a string
128	NewPageWriter creates a new PageWriter .
129	Returns a Watcher for the given key .
130	notify sends the event to all registered watchers .
131	clone returns a deep copy of the watcherHub .
132	isHidden returns true if a path is hidden
133	createEtcdLogFile creates the etcd log file
134	runEtcd runs the etcd command .
135	stopEtcd stops the etcd server .
136	handleSIGIT_ETCD_DATA_START_DATA_START_REMOVE_REMOVERENT .
137	LimitListener returns a listener that forwards requests to the given listener .
138	allowMethod sets the Allow header and status code
139	NewWatchServer returns a new WatchServer
140	FiltersFromRequest converts a WatchCreateRequest to mvcc . FilterFunc .
141	newPipelineHandler returns a new http . Handler .
142	checkClusterCompatibilityFromHeader checks that the headers are compatible with the X - Server - From header .
143	KeyExists checks if the given key exists
144	KeyMissing checks if the given key is missing
145	ValidateSecureEndpoints validates a set of endpoints
146	putNewKV creates a new key - value pair
147	newUniqueEphemeralKey creates a new ephemeral key .
148	NewUpdateDirCommand handles the update - dir command .
149	updatedirCommandFunc is used to update a directory
150	handleBackup is used to create a snapshot
151	saveDB saves the contents of srcDB to destDB .
152	NewWatchCommand creates a new watch command
153	NewV3 creates a new v3 manager .
154	Save saves a snapshot of v3 .
155	Status returns the status of a snapshot .
156	Restore is part of the v3 . Manager interface .
157	NewAuthStore creates a new authStore
158	NewTokenProvider creates a new TokenProvider .
159	resumePeer resumes all pending requests .
160	removePeer removes a peer from the transport map .
161	ActivePeers returns the number of active peers .
162	resolveTCPAddrDefault attempts to resolve the address in the default resolver .
163	resolveTCPAddrs attempts to resolve TCP addresses from a list of urls
164	urlsEqual returns true if two URLs are equal .
165	URLStringsEqual returns true if two URLs are equal .
166	NewLeaseCommand returns the cobra command for lease subcommands
167	NewLeaseGrantCommand returns a new lease grant command
168	leaseGrantCommandFunc handles a lease grant command
169	NewLeaseRevokeCommand returns the revoke command
170	leaseRevokeCommandFunc is used to revoke a lease
171	NewLeaseTimeToLiveCommand returns a new instance of the timestore command
172	leaseTimeToLiveCommandFunc is a wrapper for leaseTimeToLiveCommand
173	NewLeaseListCommand returns a new lease list command
174	leaseListCommandFunc is a wrapper for leaseListCommand
175	NewLeaseKeepAliveCommand returns a new lease keep - alive command
176	leaseKeepAliveCommandFunc runs the lease keep - alive command
177	NewAlarmCommand returns the cobra command for the ALY command
178	alarmDisarmCommandFunc runs the alarm disconnect command
179	alarmListCommandFunc runs the alarm list command
180	Flags returns flags as a slice of strings .
181	EmbedConfig returns an embed . Config for the Etcd instance .
182	PProfHandlers returns a map of HTTP handlers to serve HTTP requests
183	NewBackendQuota creates a new Quota
184	NewClusterProxy creates a new proxy server
185	NewHandler returns a new http . Handler .
186	TimeToLiveHTTP sends the lease request to the given URL .
187	newWatcherBatch creates a watcherBatch from the list of watchers .
188	add adds a new watcher to the group
189	contains returns true if the given key exists in the group .
190	delete removes a watcher from the interval list
191	choose returns a new watcherGroup that matches maxWatchers .
192	WatcherSetByKey returns the set that matches the given key .
193	Compare implements the Comparable interface .
194	successor returns the node successor of x .
195	updateMax updates the max value of x .
196	visit recursively visits the intervals in the tree .
197	Delete removes an interval from the tree . Returns true if the interval was deleted .
198	Insert inserts an entry into the tree .
199	rotateLeft rotates the left of the left atomically .
200	replaceParent sets the parent of x to the parent node .
201	MaxHeight returns the height of the interval tree .
202	Visit visits the interval at the given interval .
203	find returns the first interval in the tree .
204	Find returns the value for the given interval .
205	Intersects reports whether the given interval intersects the given interval .
206	Contains returns true if the interval is contiguous .
207	Aband returns all the intervals in the tree .
208	Union adds an interval to the tree .
209	NewExactReadCloser creates an exact ReadCloser .
210	NewElection creates a new election
211	ResumeElection resumes a leader election .
212	Propclaim tells the election to claim the given value .
213	Resign resets the current leader .
214	Leader returns the leader of the election .
215	Observe returns a channel on which events will be sent .
216	check checks if r is available
217	NewExecWatchCommand creates a new exec command
218	Execute watch command
219	NewListener creates a new listener .
220	NewRoundTripper creates a new RoundTripper
221	createPostRequest creates a new http request
222	checkPostResponse checks the status of a POST request
223	serverVersion parses the X - Server - Version header .
224	checkVersionCompatibility returns the local version of the local cluster and local version .
225	setPeerURLsHeader sets the X - PeerURLs header .
226	addRemoteFromRequest adds a remote from the HTTP request
227	NewKeysAPIWithPrefix creates a new keysAPI .
228	TTLDuration returns the TTL of the node .
229	SetPflagsFromEnv sets all flags in the specified environment .
230	FlagToEnv converts a flag name to a string
231	extract returns a string that is prefixed to the given string .
232	passConfChange returns true if the entry is a ConfChange
233	printInternalRaftRequest prints the internal Raft request .
234	listEntriesType is used to list the entries for a given entrytype .
235	newLog returns a new log instance .
236	newLogWithSize returns a new raftLog instance .
237	findConflict finds the index of entries in the log .
238	nextEnts returns the next available entries .
239	allEntries returns all entries in the log .
240	slice returns a slice of entries from the storage .
241	NewSession creates a new session .
242	Close closes the session .
243	WithTTL sets the TTL of the session
244	WithLease sets the lease ID
245	addRequest adds a request to the readonly queue
246	recvAck returns the number of pending messages .
247	advance scans all pending state transitions and returns them .
248	lastPendingRequestCtx returns the context of the last request context
249	Start starts the etcd server
250	start starts the etcd server
251	Process implements the EtcdServer interface .
252	ReportSnapshot reports the status of a snapshot .
253	MoveLeader moves the current leader to the current leader
254	TransferLeadership transfers leadership to etcd .
255	configure applies a config change to the raft cluster
256	sync sends a SYNC request to etcd .
257	publish publishes the local node to the cluster
258	applyEntryNormal applies the raft entry to the raft log .
259	applyConfChange applies a ConfChange to the raft cluster .
260	monitorVersions is a long running version of the etcd server .
261	goAttach runs f in a separate goroutine .
262	NewRoundrobinBalanced returns a round robin balancer .
263	Pick returns the next available subconn .
264	NewTLSListener wraps l . Listener .
265	acceptLoop is the main entry point for accepting connections
266	SetEndpoints sets the endpoints of the resolver group .
267	Target returns the target of the endpoint group .
268	Target returns a URL for the given endpoint .
269	Build builds a Resolver .
270	Handle handles request
271	NewElectionCommand returns a new instance of the election command
272	nodeToMember converts a NodeExtern to a Member .
273	NewTmpBackend creates a new instance of a temporary backend with a temporary directory .
274	newRevision creates a new Revision object .
275	Run starts the auto compaction .
276	Pause disables the revision .
277	Resume resumes the revision .
278	VoteRespMsgType converts a message type to a vote response .
279	DescribeMessage returns a human - readable representation of a message .
280	DescribeEntry formats a log entry
281	DescribeEntries returns a string representation of the entries
282	SetLogger sets the logger
283	GetLogger returns the logger
284	maybeFirstIndex returns the first index of the snapshot if available .
285	maybeLastIndex returns the last index of the last entry .
286	maybeTerm returns the term for a given index .
287	shrinkEntriesArray resize the entries array if needed .
288	SaveSnap saves snapshot to the WAL .
289	New creates a new Client .
290	NewCtxClient creates a new Client .
291	NewFromURL creates a new client from the given URL .
292	Close closes the client .
293	Endpoints returns a copy of the client endpoints .
294	SetEndpoints configures the client s endpoints .
295	Sync updates the endpoints of the cluster
296	dialSetupOpts returns gRPC dial options .
297	Dial establishes a connection to the given endpoint .
298	dialWithBalancer establishes a GRPC connection to the given endpoint .
299	dial creates a new gRPC connection .
300	WithRequireLeader is used to configure a context that includes a leader .
301	roundRobinQuorumBackoff returns a backoffFunc that retries the given quorum .
302	isHaltErr returns true if the context is still available .
303	NewLease returns a new Lease
304	IsCreate returns true if the event is a create event .
305	Err returns an error describing the WatchResponse .
306	IsProgressNotify returns true if the WatchResponse is a progress notification .
307	RequestProgress requests progress for the watcher .
308	nextResume gets the next stream from the list of pending channels .
309	dispatchEvent is used to dispatch an event to the given watch stream and broadcast the response to the channel . It returns true if the watch was successful .
310	broadcastResponse sends the given WatchResponse to all registered clients .
311	unicastResponse sends the given watch response to the server .
312	joinSubstreams joins all subsuming and resuming channels .
313	toPB converts the watchRequest to a protobuf message .
314	toPB converts a progress request to a watch request .
315	Contains implements the unsafeSet interface .
316	ContainsAll implements the unsafeSet interface .
317	Equals returns true if this set is equal to other .
318	Values returns a copy of the set .
319	Copy returns a copy of this set .
320	Sub returns a new set that contains all elements in this set .
321	v2MembersURL returns a copy of the given endpoint URL .
322	NewMigrateCommand returns a new cobra command
323	publishEntries applies the given entries to the raft node .
324	openWAL opens and returns a WAL object if it doesn t exist
325	replayWAL reads the WAL and writes it to disk .
326	stop shuts down the node .
327	NewWatchCommand creates a new watch command
328	InitialState is part of the storage . Storage interface .
329	SetHardState sets the hard state
330	Entries implements the storage . StorageReader interface .
331	Term returns the term at index i .
332	LastIndex returns the storage index .
333	FirstIndex returns the first index .
334	Snapshot returns a snapshot of the storage .
335	ApplySnapshot applies the given snapshot to the storage .
336	Compact implements the storage . Storage interface .
337	unachable marks the given URL as unreachable .
338	NewEndpointCommand returns the cobra command for endpoint subcommands
339	epHealthCommandFunc is the main function for the health check
340	NewElectCommand returns a new election command
341	NewDefragCommand returns a new cobra command
342	RegisterBuilder registers a builder .
343	Build builds a new balancer .
344	recordTransition records the state of the given state to Connecting .
345	doSerialize gets the current auth info from chk
346	send sends events to the watch server .
347	post sends the given watch response to the watcher .
348	OriginAllowed checks if origin is allowed for the origin
349	IsHostWhitelisted checks if the host is whitelisted
350	Valids returns the set of valid values .
351	NewSelectiveStringsValue creates a new SelectiveStringsValue .
352	NewKV creates a new client - side prefix
353	NewURLsValue creates a new URLsValue from a string
354	URLSFromFlag returns the flag set for a flagset .
355	servePeers is used to serve all the peers
356	NewStore returns a new lease store .
357	appendMarkTombstone appends a mark to b .
358	IsDirWriteable checks if dir is writable
359	TouchDirAll is a wrapper around MkdirAll .
360	CreateDirAll is like CreateDirAll but does nothing .
361	ZeroToEnd moves the file to the end of the file .
362	Open implements the FilePipeline interface .
363	NewRaftLoggerFromZapCore creates a raft . Logger that implements zapcore . Core .
364	NewConfig creates a new config from a yaml file
365	RegisterElectionHandler registers the http handlers for service V3 election to mux . The handlers forward requests to the grpc endpoint over conn .
366	UpdateCapability updates capabilities for the current version .
367	NewLockCommand creates a new lock command
368	tick is part of the raft . Node interface .
369	advanceTicks forwards ticks to the ticker .
370	NewAuthCommand returns the OpenShift cli auth command
371	authEnableCommandFunc is the auth enable command
372	authDisableCommandFunc is used to disable authentication
373	RetryKVClient returns retry KV client
374	RetryLeaseClient returns a new Lease client
375	RetryClusterClient creates a new client for retries
376	RetryMaintenanceClient creates a new MaintenanceClient
377	RetryAuthClient returns a new auth client
378	NewSetDirCommand creates a new setdir command .
379	Enter implements the barrier .
380	Leave the barrier
381	HandleBasic is the same as HandleBasic .
382	WriteError writes an error to the http . ResponseWriter .
383	MemberByName returns a copy of the member with the given name .
384	PeerURLs returns the list of remote peers .
385	ValidateConfigurationChange validates a configuration change .
386	AddMember adds a new member to the cluster
387	RemoveMember removes a member from the cluster .
388	ValidateClusterAndAssignIDs is the same as ValidateClusterAndAssignIDs
389	Keep returns a set of pointers for the given revision .
390	closeRequireLeader closes all holders in the keepalives set .
391	resetRecv starts a new LeaseKeepAliveClient .
392	recvKeepAlive processes a Lease keepalive response .
393	deadlineLoop is a long running goroutine that closes keepalives .
394	sendKeepAliveLoop is a long running goroutine that sends new Lease keep alive requests .
395	NewKV returns a new lease .
396	reroll removes a lease
397	LeaseValue produces a compare to a string
398	ValueBytes returns the value as bytes .
399	WithRange adds the range end to the query .
400	WithPrefix adds the prefix to the query .
401	mustInt64 converts the given interface to an int64 or panics .
402	mustInt64orLeaseID converts the given interface to an int64 if it is not a LeaseID .
403	Next returns the next update .
404	getJournalWriteSyncer returns a writeSyncer for the journal
405	newKV creates a new node .
406	newDir creates a new directory
407	Read returns the current value .
408	Write implements the Node interface .
409	List returns the children of the node .
410	GetChild returns a child node
411	Add adds a node to the tree .
412	Remove removes the node .
413	Compare returns true if the node matches the previous index .
414	Clone returns a deep copy of the node .
415	isConnectedToQuorumSince returns true if the given time is connected to the given members .
416	isConnectedSince returns true if the given time is connected since the given time .
417	numConnectedSince returns the number of connected peers
418	longestConnected returns the longest matching ID for the given list of IDs .
419	isTornEntry checks if the given data is valid .
420	StartMockServersOnNetwork starts a mock server on the specified network .
421	StartAt starts the server at the specified index .
422	StopAt stops the server at the specified index .
423	Stop stops all servers .
424	NewCheckCommand returns the cobra command for the etcd cluster
425	NewCheckPerfCommand returns a new instance of EtcdCheckPerf command
426	NewCheckDatascaleCommand returns a new datascale command
427	NewGetCommand creates a new get command
428	NewGetCommand creates a new get command
429	PickPeerURL picks a random peer URL
430	HandleMetricsHealth registers the metrics handler for the etcd server .
431	NewRemoveCommand creates a new rm command .
432	rmCommandFunc handles a rm command
433	checkIntervals verifies that all the request operations are valid .
434	ReportEventReceived reports the number of received bytes .
435	RegisterKVHandler registers the http handlers for service etcd server to mux . The handlers forward requests to the grpc endpoint over conn .
436	RegisterWatchHandler registers the http handlers for service watch to mux . The handlers forward requests to the grpc endpoint over conn .
437	RegisterLeaseHandler registers the http handlers for service Lease to mux . The handlers forward requests to the grpc endpoint over conn .
438	RegisterClusterHandler registers the http handlers for service Cluster to mux . The handlers forward requests to the grpc endpoint over conn .
439	RegisterMaintenanceHandler registers the http handlers for service Maintenance to mux . The handlers forward requests to the grpc endpoint over conn .
440	RegisterAuthHandler registers the http handlers for service auth to mux . The handlers forward requests to the grpc endpoint over conn .
441	startEtcd starts the ETCD server .
442	identifyDataDirOrDie checks if the given directory is a member of the given directory
443	openLast opens the last wal entries in dirpath .
444	gotLeader is called when we got our leader .
445	ossNotify returns a channel that is closed when the leader is lost .
446	newGRPCProxyCommand returns the cli - proxy command
447	NewMemberCommand returns the command for member subcommands
448	NewMemberAddCommand returns a new instance of the member add command
449	NewMemberRemoveCommand implements the OpenShift cli remove command
450	NewMemberUpdateCommand returns a new instance of the update command
451	NewMemberListCommand returns a command for member lists
452	memberAddCommandFunc executes a member add command
453	memberRemoveCommandFunc handles a member remove command
454	memberUpdateCommandFunc is used to update a member update
455	memberListCommandFunc is a wrapper for memberlist
456	Open opens and returns a WAL object .
457	OpenForRead opens the WAL for reading from the given wal .
458	Verify verifies the given wal file against the given wal directory .
459	Close closes the WAL .
460	notify sends an event to the event channel .
461	Remove stops the watcher .
462	mkPathDepth creates a path with depth + depth
463	mkV2Node creates a v2 node for the given key value
464	prevKeyFromPuts gets the prevKv from the put request
465	NewWeightedReport creates a new weighted report .
466	NewURLsMapFromStringMap creates a new URLsMap from a map of strings
467	String returns a string representation of the URLs map .
468	URLs returns a sorted list of strings .
469	parse returns a map of key = value pairs
470	NewClientHandler returns a new http . Handler .
471	writeKeyEvent writes the response header to the client
472	writeKeyError writes the error to the client .
473	get uint64 from form
474	get bool from form
475	waitDeletes waits for deletes to complete
476	AddOutputPaths adds output paths and error output paths .
477	NewConfig returns a new Config with default values .
478	PeerURLsMapAndToken returns the URLsMap and token for the etcd - server
479	GetDNSClusterNames returns a list of DNS cluster names
480	checkBindURLs checks if the given URLs are valid .
481	GetCluster returns a list of cluster nodes
482	GetClient returns a DNS client for the given domain and service name
483	Get SRV service name
484	ReadDir reads the contents of the given directory .
485	compact compacts the given revision .
486	defrag is a wrapper around v3 .
487	NewUserCommand returns the cobra command for user subcommands
488	userAddCommandFunc adds a user add command
489	userGetCommandFunc executes a user get command
490	User change password
491	addEvent adds an event to the history
492	scan returns the next event matching the given key .
493	clone creates a new event history
494	openSnapshotBackend opens a snapshot backend .
495	openBackend opens the etcd backend .
496	recoverSnapshotBackend attempts to recover a snapshot from a raft snapshot .
497	NewUpdateCommand handles the update command
498	UpdateCommandFunc updates a single key value
499	frontAndBack returns the front and the front of the queue .
500	Insert adds a request stats to the queue .
501	Rate implements the statsQueue interface .
502	Clear clears the statsQueue
503	UniqueStrings returns a slice of n random strings .
504	RandomStrings returns a slice of n random strings .
505	IsKeyNotFound returns true if the error is a key not found error .
506	IsRoleNotFound returns true if the error is a role not found error .
507	IsUserNotFound returns true if the error is a user not found error .
508	JoinCluster is used to join the cluster
509	GetCluster is used to get the cluster
510	newProxyFunc returns a proxy func that will use the given proxy address .
511	isSafeRetry returns true if the error is retryable .
512	withRetryPolicy returns a retry option that configures the retry policy .
513	withAuthRetry returns a retry option that configures the retry option .
514	withMax returns a retry option that sets the maximum number of retries to retry .
515	withBackoff returns a retry option that applies backoffFunc to the retry strategy .
516	RecvAppendReq records the size of a request .
517	SendAppendReq records the size of the given request .
518	merge merges two bucket buffers into bb .
519	deleteRevKey deletes the record with the given revision .
520	isMemberBootstrapped checks if a member is bootstrapped
521	GetClusterFromRemotePeers retrieves a Raft cluster from the specified addresses .
522	getClusterFromRemotePeers retrieves a RaftCluster from the remote peers .
523	getRemotePeerURLs returns a list of remote peer URLs .
524	getVersions returns the versions for the local node .
525	determineClusterVersion determines the version of a cluster member .
526	getVersion retrieves the version information for a member .
527	NewTimeoutDetector creates a new TimeoutDetector .
528	Reset resets the detected timer .
529	Observe returns whether or not the specified time has been recorded .
530	NewPeerHandler returns a new http . Handler for the etcd server .
531	put adds a new entry to the key index .
532	tombstone inserts a tombstone into the key index .
533	get returns the modified revision of the key index .
534	since returns the last revision of the key index .
535	keep removes the object at the given revision .
536	findGeneration returns the most recent generation for the given rev .
537	cancelWatcher removes a watcher from the store .
538	syncWatchersLoop is a long running goroutine that periodically syncs all watchers .
539	syncVictimsLoop is a long - lived goroutine that sends victims to the store .
540	moveVictims moves the victims to the list of victims that have changed .
541	kvsToEvents converts a set of key values to a list of events .
542	notify sends events to the store .
543	isOpFuncCalled returns true if the op argument is a function that invokes opFunc .
544	UnsafePut is a wrapper around unsafe . UnsafePut
545	UnsafeSeqPut is the same as unsafe . UnsafeSeqPut except that it is safe for concurrent use .
546	UnsafeRange is a wrapper around unsafe . UnsafeRange .
547	UnsafeDelete deletes the given key and key from the transaction .
548	UnsafeForEach iterates over all keys and calls visitor for each key - value pair .
549	Commit is part of the Transaction interface .
550	CommitAndStop is part of the Transaction interface .
551	Renew implements the Lessor interface .
552	Attach implements the Lessor interface .
553	revokeExpiredLeases is used to remove expired lease entries .
554	checkScheduledLeases is a thread - safe way of checking if we are eligible to be scheduled .
555	expireExists checks if the lease has expired .
556	findExpiredLeases returns a list of leases that have expired .
557	refresh is used to update the expiry time
558	forever .
559	Keys returns the list of all keys in the lease .
560	Remaining returns the duration until the lease has expired .
561	NewCompactionCommand returns a new instance of the compaction command
562	compactionCommandFunc runs compaction command
563	NewPutCommand creates a new put command
564	putCommandFunc is a wrapper for put operations
565	NewHandler creates a new proxy handler
566	NewReadonlyHandler returns a new readonly handler .
567	NewSetCommand creates a new set command
568	setCommandFunc handles a set command
569	waitOnLastRev waits for the last revision of the last revision . Returns true on success .
570	GetDefaultInterfaces returns a map of default interfaces .
571	NewSnapshotCommand returns the cobra command for the snapshot subcommands
572	NewMove leader command
573	transferLeadershipCommandFunc is used to move - leader - leader to target leader .
574	OpenDir opens a directory at the specified path .
575	NewRemoveDirCommand returns the command to remove a directory
576	rmdirCommandFunc implements the rmir command .
577	NewDelCommand creates a new delete command
578	delCommandFunc is a wrapper for delCommand
579	NewExpect creates a new ExpectProcess .
580	NewExpectWithEnv starts a new ExpectProcess with the given arguments .
581	ExpectFunc waits until the given function returns true .
582	Expect returns the string that matches the given string .
583	LineCount returns the number of lines reported .
584	Signal sends a signal to the process .
585	keyFunc encodes a RangeRequest .
586	Add adds a new entry to the cache .
587	Get implements the Cache interface .
588	Invalidate invalidates the given key and endkey .
589	Compact implements the Cache interface .
590	NewUniqueURLsWithExceptions creates a new unique URLs object
591	UniqueURLsFromFlag retrieves the unique URLs from the flagSet .
592	UniqueURLsMapFromFlag returns a map of unique urls for the specified flag .
593	Hold the barrier .
594	Release releases the barrier
595	Wait waits for the barrier to finish .
596	NewLockRacerCommand returns a new instance of LockRacerCommand
597	election timeout
598	DialEtcdGRPCServer returns a gRPC client connection to the etcd cluster
599	CreateEtcdClientConfig is used to create etcd client configs
600	CreateEtcdClient creates a new etcd client
601	CheckCompact checks if the compact revision matches the given revision .
602	Defrag flushes the etcd cluster to etcd .
603	RevHash returns the revision and hash of the member .
604	Rev returns the revision of the member .
605	Compact is used to compact the entry .
606	IsLeader returns true if this node is the leader .
607	WriteHealthKey writes the health key to etcd .
608	SaveSnapshot saves the snapshot to etcd .
609	RestoreSnapshot is used to restore a snapshot
610	NewWatcher returns a new watcher based on a prefix
611	NewRawNode creates a new RawNode .
612	Campaign implements the raft . Node interface .
613	Propose implements the raft . Node interface .
614	ProposeConfChange is part of the raft . Node interface .
615	ApplyConfChange applies the given ConfChange to the Raft node .
616	Step implements the raft . Node interface .
617	Ready returns a new ready object .
618	WithProgress implements the node interface .
619	ReportUnreachable implements the raft . Node interface .
620	ReportSnapshot reports the status of a snapshot .
621	TransferLeader moves the raft leader to the given destination .
622	ReadIndex implements the raft . Node interface .
623	printcURL prints the curl command
624	StartNode starts a raft node .
625	RestartNode starts a new raft node .
626	Tick stops the ticker .
627	MustSync returns true if the two changes are equal .
628	NewGRPC17Health returns a new instance of GRPC17Health .
629	NeedUpdate returns true if the health is updated .
630	dflSignal sends a signal to dflink .
631	New creates a new Store
632	Index returns the current index .
633	Get implements the Etcd interface .
634	Create is part of the Etcd interface .
635	Set implements the Store interface .
636	getCompareFailCause returns the cause for the comparison of the node and previous index .
637	Delete implements the Etcd interface .
638	walk walks the tree rooted at the given path .
639	internalGet is used to get a node
640	DeleteExpiredKeys removes keys from the store .
641	checkDir checks if dirName is a directory
642	Save persists the contents of the store to disk .
643	Recovery is used to restore the state of the store
644	Next generates a new unique identifier .
645	NewMakeMirrorCommand returns a new cobra command
646	NewZapCoreLoggerBuilder is a functional option for NewConfig .
647	NewSyncer creates a new syncer .
648	DropPort drops the specified port
649	SetLatency sets the latency delay for all available interfaces
650	RemoveLatency removes latency from all available interfaces
651	NewTxnCommand returns a new cobra command for txn
652	txnCommandFunc is a wrapper around txn
653	New returns a compactor based on the given mode .
654	printResponseKey prints the value of the given response .
655	RegisterLockHandler registers the http handlers for service Lock to mux . The handlers forward requests to the grpc endpoint over conn .
656	gpcHandlerFunc returns a handler that handles gRPC requests
657	addCORSHeader add CORS headers
658	fallback applies a set of operations to the l3 backend .
659	IDFromString creates an ID from a string .
660	release closes the file and removes it from the filesystem .
661	EncodedSize returns the encoded size of the encoded value .
662	Decode decodes a value from b .
663	NewMergeIterator returns a new MergeIterator .
664	initHeap initializes the heap .
665	Valid returns true if the iterator is valid .
666	Key returns the key of the iterator .
667	Value returns the value of the iterator .
668	Next moves the iterator to the next item .
669	Seek moves the iterator to the given key .
670	Close closes the iterator .
671	Encode encodes the valuePointer into b .
672	Decode decodes the header from buf .
673	encodeEntry returns the number of bytes written to buf .
674	SetEntry adds an entry to the batch .
675	Set adds a new entry to the batch .
676	SetWithTTL adds a new entry to the batch
677	Delete adds a key to the batch .
678	Commit commits the current transaction if any .
679	Flush flushes any buffered data to the batch .
680	Error returns the error of the batch .
681	getMemTables returns a list of all known tables .
682	writeRequests writes the request to vlog .
683	ensureRoomForWrite flushes the memtable to disk .
684	writeLevel0Table writes the table to the given io . Writer .
685	handleFlushTask handles a flushTask .
686	flushMemtable flushes all memtable tasks to disk .
687	calculateSize calculates the total size of the database .
688	Size returns the lsm and vlog size of the database .
689	Next returns the next value in the sequence .
690	Release releases the next item .
691	KeySplits returns the keys of the table with the given prefix .
692	Flatten packs all tables in the database .
693	Mmap is a wrapper around mmap . Mmap
694	Madvise implements the madvise interface .
695	setDiscardTs sets the most recent timestamp for the Oracle .
696	hasConflict returns true if the transaction has already been committed .
697	Set sets the given key to the given value .
698	SetWithMeta adds the given key - value pair to the database .
699	Delete is used to delete an entry
700	Get returns the item with the given key .
701	CommitWith commits the contents of the transaction to the database . If the callback is nil the callback is invoked .
702	View is a part of the DB interface .
703	Update runs the given function in the managed transaction .
704	Seek moves the iterator to the next key .
705	SeekToLast moves the iterator to the next block .
706	parseKV parses the next key from the header .
707	NewIterator creates a new iterator
708	seekFrom positions the iterator at the given key .
709	seekForPrev moves the iterator to the next key if it exists .
710	Value returns the next value .
711	Seek moves the iterator to the next key .
712	NewConcatIterator returns a new ConcatIterator .
713	Valid returns true if the iterator is valid .
714	Next moves the cursor to the next item .
715	Close closes the iterator .
716	OpenExistingFile opens an existing file .
717	Copy returns a copy of a .
718	KeyWithTs appends ts to BigEndian .
719	ParseTs parses the timestamp .
720	ParseKey returns the key portion of the given key .
721	SameKey returns true if src and dst are the same .
722	FixedDuration returns a fixed duration .
723	NewCloser creates a new Closer
724	NewThrottle creates a new Throttle
725	Do runs the throttler .
726	Done notifies the Throttle Do function .
727	Finish closes the Throttle .
728	SetDiscardTs sets the timestamp of the transaction .
729	openReadOnly opens the log file .
730	iterate calls fn for each entry in the log file .
731	sortedFids returns a sorted list of files to be deleted .
732	write writes requests to disk .
733	populateDiscardStats fetches the lfdiscard stats from disk .
734	Backup is part of the DB . Backup interface .
735	ToList converts a key to a KV list .
736	produceRanges generates all the keys in the database .
737	produceKVs produces a list of KV values .
738	Gorstrate is used to create kvstore
739	NewStream creates a new stream .
740	NewStreamAt creates a new stream with the given readTs .
741	DecrRef decrements the reference count for this table .
742	ParseFileID returns the id of the given file
743	PrintHistogram prints the histogram for key prefix .
744	newSizeHistogram creates a new sizeHistogram .
745	buildHistogram returns a sizeHistogram for the given key prefix .
746	printHistogram prints histogram data
747	Init initializes the watermark
748	Begin marks the given index .
749	BeginMany marks the given indices as many times .
750	Done marks the given index as done .
751	DoneMany marks the given indices as done .
752	SetDoneUntil sets the amount of time to wait until it is closed .
753	WaitForMark blocks until the index is reached .
754	Encode encodes the header into b .
755	Decode decodes the header from buf .
756	NewTableBuilder creates a new table builder .
757	keyDiff returns the base - encoded version of the baseKey that matches the baseKey .
758	Add adds a key value to the buffer .
759	blockIndex returns the next block index .
760	Finish finishes the current block and returns its JSON representation .
761	Errorf logs to the underlying logger .
762	Infof logs to the underlying logger .
763	DecrRef decrements the ref count to 0 .
764	NewSkiplist creates a new skiplist .
765	Put adds the given key to the list .
766	Get returns the value for a given key .
767	Key returns the current key .
768	Value returns the current value .
769	Next advances the iterator .
770	Prev moves the iterator to the next item in the list .
771	Seek moves the iterator to the next item in the list .
772	SeekForPrev sets the next item in the list .
773	NewUniIterator creates a new ui iterator
774	Next advances the iterator .
775	Seek moves the iterator to the next key .
776	asChanges returns the protobuf representation of this manifest .
777	rewrite rewrites the manifest file
778	validate validates the current level .
779	acquireDirectoryLock acquires a lock for the given directory and pidFileName .
780	release closes the lock .
781	AssertTruef checks whether the boolean is true or not .
782	Wrapf wraps an error with a format string .
783	initTables initializes the tables .
784	deleteTables deletes all tables .
785	tryAddLevel0Table tries to add a table to the list of tables . If the level level is greater than 0 it returns false .
786	getTableForKey returns the table for the given key .
787	get returns the highest value for the given key .
788	over overlapping tables .
789	String returns the string representation of the item
790	KeyCopy copies the key to dst .
791	ValueSize returns the size of the value in bytes .
792	NewKeyIterator creates an iterator for the given key .
793	Valid returns true if the iterator is valid .
794	ValidForPrefix returns true if the iterator starts with the given prefix .
795	Close closes the iterator .
796	parseItem parses the item .
797	Seek moves the iterator to the next key .
798	GetMergeOperator returns a MergeOperator .
799	Get returns the contents of the database .
800	compareAndAdd returns true if the passed in cd is equal to cd .
801	newArena creates a new empty Arena .
802	putNode adds a new node to the buffer .
803	getNode returns the node at the given offset .
804	getKey returns the key at the given offset .
805	getVal returns the value at offset .
806	getNodeOffset returns the offset of the node .
807	Initialize the number of badger statistics
808	revertToManifest attempts to revert the manifest to the given ID
809	dropTree drops all entries in the tree .
810	dropPrefix drops all tables with prefix .
811	isLevel0Compactable returns true if the level is compactable .
812	doCompact runs the compaction .
813	get returns the value for the given key .
814	seekTotal is used to get the balances for each account .
815	findFirstInvalidTxn is used to find the first violation of the transaction at the given point .
816	Create creates a new snapshot
817	List returns all metadata about the snapshot
818	Open opens the snapshot with the given ID .
819	Write implements io . Writer
820	NewFileSnapshotStoreWithLogger creates a new instance of FileSnapshotStore .
821	NewFileSnapshotStore creates a new instance of a FileSnapshotStore .
822	snapshotName returns a unique identifier for a snapshot .
823	Create creates a new file snapshot
824	List returns all snapshot metadata
825	getSnapshots returns a list of all the files in the store
826	readMeta reads the metadata for a snapshot .
827	Open opens the state file for the given ID .
828	ReapSnapshots deletes all snapshots for the snapshot
829	Write implements the io . Writer interface .
830	Close closes the snapshot .
831	Cancel finalizes the sink .
832	finalize flushes the state of the snapshot to disk .
833	writeMeta writes the meta file to disk .
834	NewNetworkTransportWithConfig creates a new TCP transport .
835	setupStreamContext sets up the stream context
836	getStreamContext returns the current context .
837	SetHeartbeatHandler is used to set the heartbeat handler .
838	CloseStreams closes all active streams .
839	Close closes the transport .
840	getPooledConn returns the connection pool for the given target
841	getConnFromAddressProvider attempts to get a connection for the given server id and target . If no provider is found a new one is returned .
842	getConn returns a connection to the given target
843	returnConn returns the connection to the pool .
844	listen starts accepting connections from the stream .
845	handleConn is used to handle a single raft command
846	handleCommand handles a single command
847	decodeResponse is used to decode the response body into resp
848	sendRPC sends an RPC message to the given conn .
849	newNetPipeline creates a new netPipeline .
850	decodeResponses is used to decode responses from the client
851	AppendEntries sends a request to append entries to the server .
852	Close closes the netPipeline
853	NewObserver returns a new observer
854	RegisterObserver registers an observer .
855	DeregisterObserver removes an observer from the Raft state .
856	Observe implements observer . Observer .
857	NewInmemStore creates a new in - memory store .
858	FirstIndex returns the lowest index .
859	LastIndex returns the highest index .
860	GetLog retrieves the log at the given index .
861	StoreLog stores a log entry
862	StoreLogs stores logs
863	DeleteRange deletes the logs from the given range .
864	Set sets the value for the given key .
865	Get returns the value for the given key
866	SetUint64 sets a uint64 value .
867	GetUint64 returns the uint64 value .
868	NewLogCache creates a new log cache
869	Connect adds a new transport to the transport
870	Disconnect disconnects from the transport .
871	DisconnectAll disconnects all peers
872	Respond sends the given response to the response channel .
873	Open returns the snapshot meta and any error .
874	Vote adds the vote to the verify channel .
875	notifyAll is called when a follower is elected .
876	cleanNotify removes a verifyFuture from the list .
877	LastContact is part of the ReplicationReplicationReplication interface .
878	setLastContact sets last contact .
879	replicate implements the raft . ReplicationHandler interface .
880	pipeReplicate is a part of the raft protocol .
881	appendSend is used to send an append request to the remote peer .
882	decodeDecode is a long - running goroutine that processes the pipeline .
883	setupAppendEntries is used to setup append entries for a given raft replica .
884	setPreviousLog sets the previous log entry for the log .
885	setNewLogs adds new log entries to the Raft log .
886	appendStats records metrics for the given peer .
887	handleStaleTerm is used to stop a follower replication .
888	AppendEntries implements the Transport interface .
889	RequestVote implements raft . Transport .
890	InstallSnapshot is part of raft . Transport .
891	EncodePeer implements transport . Transport .
892	DecodePeer implements raft . Transport .
893	AppendEntries implements the ApplyEntries interface .
894	ReadPeersJSON reads peers JSON from a JSON file .
895	ReadConfigJSON loads the configuration from a json file
896	NewTCPTransport creates a new TCPTransport
897	NewTCPTransportWithLogger creates a new TCPTransport .
898	NewTCPTransportWithConfig creates a new TCPTransport with the given configuration .
899	Dial implements StreamLayer .
900	Accept implements the net . Listener interface .
901	Addr implements the net . Listener interface .
902	restoreSnapshot is used to restore a snapshot from a snapshot .
903	BootstrapCluster is used to start a bootstrap cluster .
904	Leader returns the current leader address .
905	Apply is used to apply a command to the Raft log .
906	Barrier returns a Future that can be used to schedule a log barrier .
907	VerifyLeader verifies that the current leader is valid .
908	AddVoter adds a new Raft node to the raft cluster .
909	RemoveServer removes a server from the raft cluster .
910	Shutdown shuts down the Raft state .
911	Snapshot is used to get a snapshot of the raft cluster .
912	Restore is used to restore a snapshot from a reader
913	String returns the string representation of this node .
914	LastContact returns the last time of the last contact .
915	Logf logs a message
916	containsNode checks if a node is in the slice of nodes .
917	LeaderPlus returns a list of n leader nodes .
918	WaitTilUptoDate blocks until the lastUpdateSuccess is reached .
919	assertLogEntryEqual asserts that all log entries are equal .
920	runFSM is a part of the raft . FSM interface .
921	Clone returns a copy of the configuration
922	Clone returns a deep copy of the configurations .
923	hasVote returns true if the given server has a vote .
924	checkConfiguration returns an error if the configuration is invalid .
925	nextConfiguration returns the next configuration based on the change request .
926	encode peers
927	decodePeers decodes peers into a configuration structure .
928	encodeConfiguration is used to encode a Configuration struct
929	decodeConfiguration is used to decode a configuration object
930	goFunc runs f in a separate goroutine .
931	getLastIndex returns the last log index .
932	getLastEntry returns the last log entry and term .
933	checkRPCHeader returns an error if the RPC is not supported .
934	setLeader sets the current leader .
935	requestConfigChange sends a request to the Raft configuration change .
936	run is the main entry point for raft .
937	runFollower is the main entry point for the Raft protocol .
938	liveBootstrap is a part of the raft . Raft interface .
939	runCandidate is the main entry point of raft .
940	runLeader is used to start the raft leader .
941	startStopReplication starts a follower replication .
942	ConfigurationChangeChIfStable returns a channel that can be used to determine if the current configuration change is valid .
943	verifyLeader is called when the leader is elected .
944	checkLeaderLease tries to contact the last contact in the raft cluster .
945	restoreUserSnapshot is used to restore a user snapshot
946	appendConfigurationEntry adds a configuration entry to the raft cluster .
947	dispatchLogs is used to dispatch logs to the Raft log .
948	processLogs is used to process log entries .
949	processLog handles a log entry .
950	processRPC processes an RPC command
951	processHeartbeat processes a heartbeat command .
952	setLastContact sets the last contact time .
953	persistVote is used to persist a vote .
954	setCurrentTerm sets the current term .
955	setState sets the state of the raft cluster .
956	getCommitIndex returns the current commit index .
957	recalculate attempts to recalculate the current state of the current state .
958	randomTimeout returns a channel that will be closed when a timeout occurs .
959	generateUUID returns a random UUID
960	decodeMsgPack is used to decode a message
961	encodeMsgPack is used to encode a message .
962	backoff returns the backoff exponential backoff for a given round .
963	newApplySource returns a new applySource .
964	reset resets the internal state .
965	DefaultConfig returns the default config
966	ValidateConfig validates the configuration .
967	runSnapshots is a long running goroutine that attempts to open a snapshot .
968	shouldSnapshot returns true if we should use the last snapshot .
969	takeSnapshot is used to start a new snapshot .
970	compactLogs is used to compact the log entries for a snap .
971	WebpackCheck checks if the webpack . config . js file has the same configuration .
972	New creates a new generator
973	UnixSocket creates a Listener for unix socket .
974	Get returns the error handler for the given status .
975	PanicHandler is a middleware that handles panics .
976	partialFeeder returns the content type for the given content type .
977	New creates a new engine .
978	WriteTo writes m to w .
979	Send a message
980	NewSMTPSender creates a new SMTP sender
981	Param returns the url query parameter
982	Set a key to the context
983	Value returns a value
984	Redirect redirects the given URL to the given URL .
985	File returns a file from the request
986	MarshalJSON implements json . Marshaler
987	New creates a new group
988	New creates a new app instance
989	DeprecrationsCheck checks for deprecations that are deprecated .
990	List is not implemented .
991	Render calls the Render function .
992	Save the session
993	GetOnce gets value from session
994	Set value to session
995	Clear removes all values from the session
996	getSession returns the session for the given request .
997	New creates a generator
998	New generates a new package
999	New creates a new generator
1000	NewMessage creates a new message with default settings .
1001	Reset clears all parts of the message .
1002	SetHeader sets the header field .
1003	SetHeaders sets the headers of the message .
1004	SetAddressHeader sets the address header for the given field .
1005	FormatAddress formats an address .
1006	SetDateHeader sets a date header field .
1007	FormatDate formats a date .
1008	SetBody sets the body of the message .
1009	SetPartEncoding sets the encoding of the part .
1010	SetHeader sets the header for a file
1011	SetCopyFunc sets the CopyFunc for copying files .
1012	AttachReader adds a file to the message .
1013	Attach adds a file to the message .
1014	EmbedReader adds an embedded file to the message .
1015	Embed adds a file to the email .
1016	ValidateTemplates runs each of the given template validators
1017	PlushValidator checks plush .
1018	Validate validates the options .
1019	LoadPlugins loads all plugins
1020	WriteHeader wraps http . ResponseWriter
1021	Write implements the http . ResponseWriter interface .
1022	Flush implements the http . Flusher interface .
1023	CloseNotify implements the http . ResponseWriter interface .
1024	Run the updater
1025	onlyRelevantFiles is used to filter out files that need to be included in a file
1026	GoTemplateEngine renders the given input as a template
1027	GET adds a route to the router with the GET HTTP method .
1028	Redirect redirects the user to the given status .
1029	ANY is a shortcut for ANY .
1030	buildRouteName builds a route name for the given path
1031	New generates mailers .
1032	NewDialer creates a new Dialer
1033	Dial establishes a connection to the SMTP server .
1034	DialAndSend dials the given message using the specified options .
1035	Set sets the data for the given key .
1036	Add a string to flash
1037	persist saves the flash data to the session .
1038	newFlash loads flash from the session .
1039	Get get cookie by name
1040	Set sets a cookie
1041	SetWithExpirationTime sets a cookie with the given name and value .
1042	Delete a cookie
1043	NewMessage creates a new message
1044	NewFromData creates a new message with the given data
1045	New creates a new message from buffalo .
1046	CloseNotify implements the notifyListener interface .
1047	NewEventSource creates a new EventSource
1048	NewSimpleWithContext creates a simple logger with a context
1049	Register a new handler
1050	Start starts the background worker
1051	Stop stops the Simple background worker
1052	Perform a job
1053	PerformAt runs the given job until t .
1054	PerformIn performs the specified job in the specified duration .
1055	String returns a json representation of RouteInfo .
1056	Alias adds aliases to the router .
1057	Name sets the route name
1058	BuildPathHelper builds a RouteHelperFunc from the RouteInfo
1059	New creates a newci generator
1060	New creates a new generator
1061	RegisterCustomDecoder registers a custom decoder .
1062	Replace replaces the middleware in the stack
1063	Routes returns the route list .
1064	WrapBuffaloHandler returns a http . Handler that wraps the given handler .
1065	PackageJSONCheck checks if the package .
1066	match matches the given importpath and returns the transformed import path
1067	Send sends multiple messages .
1068	Last returns true if the last identifier is the last name .
1069	Stop stops the app
1070	DepEnsure runs the depEnsure command
1071	String returns the string representation of the build info .
1072	New creates a new generator
1073	AddBody adds a body to the message .
1074	AddBodies adds a body to the message .
1075	AddAttachment adds an attachment to the message .
1076	AddEmbedded adds an attachment to the message .
1077	SetHeader adds a header to the message .
1078	New creates a new genny group
1079	New creates a new template generator
1080	New generates a new packr generator .
1081	Cleanup cleans up a jam files
1082	MDTemplateEngine renders a Markdown template .
1083	Update updates a configmap
1084	FilterChanges takes a set of changes and returns a map of configMapUpdate objects .
1085	getLabelsFromREMatches extracts labels from a list of regexes
1086	getLabelsFromGenericMatches returns the list of labels that match the args passed in
1087	Start starts a goroutine that reloads the job config
1088	Subscribe adds a new DeltaChan to the agent .
1089	Config returns the agent config .
1090	Set sets the current configuration .
1091	IsMember returns true if the given user is a member of the org
1092	ListIssueComments returns the list of all issue comments .
1093	ListPullRequestComments returns the comments for a pull request .
1094	ListReviews returns a list of review objects .
1095	ListIssueEvents returns the listed issue events .
1096	CreateComment creates a new issue comment
1097	CreateReview adds a review .
1098	CreateCommentReaction creates a new comment reaction
1099	CreateIssueReaction creates a new issue reaction
1100	DeleteComment deletes an issue comment
1101	DeleteStaleComments deletes issue comments
1102	GetPullRequest returns a pull request for a given number .
1103	GetPullRequestChanges returns the pull request changes for a given number .
1104	GetRef returns a fake ref
1105	DeleteRef adds a ref to the fake client .
1106	GetSingleCommit returns a single commit
1107	CreateStatus adds a new status to the FakeClient .
1108	ListStatuses returns the statuses for the given ref
1109	GetCombinedStatus returns the combined status for the given ref .
1110	GetRepoLabels returns the set of labels for the given repository .
1111	GetIssueLabels returns the list of issue labels
1112	AddLabel adds a label to the fake client .
1113	RemoveLabel removes a label from the FakeClient
1114	FindIssues returns fake issues
1115	AssignIssue adds an issue to the fake client .
1116	GetFile returns the contents of a file
1117	ListTeams returns a list of teams
1118	ListTeamMembers lists all members of a team
1119	IsCollaborator returns true if the login is in the list of collaborators .
1120	ListCollaborators lists all collaborators
1121	ClearMilestone clears the milestone
1122	SetMilestone sets the milestone
1123	ListMilestones returns a list of milestones
1124	ListPRCommits returns the list of commits for the given organization .
1125	GetRepoProjects returns the projects for the given repository .
1126	GetOrgProjects returns all the projects for the given org
1127	GetProjectColumns returns the project columns for the given project ID
1128	CreateProjectCard creates a project card
1129	DeleteProjectCard deletes the project card with the given id .
1130	MoveProjectCard moves a project card to the fake client .
1131	CreateDatabaseClient creates a influxdb client
1132	Push sends a point to influxdb .
1133	NewProwJobWithAnnotation creates a new ProwJob with the given labels and annotations
1134	NewProwJob creates a new Prow job .
1135	NewPresubmit creates a new ProwJob based on the given config .
1136	PresubmitSpec creates a ProwJobSpec from a config . Presubmit struct .
1137	PostsubmitSpec creates a ProwJobSpec from a config .
1138	PeriodicSpec creates a ProwJobSpec from a config . Periodic .
1139	BatchSpec creates a PatchJobSpec from a config .
1140	PartitionActive takes a slice of Prow jobs and triggers them .
1141	ProwJobFields returns logrus fields from the Prow API
1142	ClusterToCtx returns the alias for the cluster
1143	AddCommand adds a command to the help list
1144	Get takes name of therowJob and returns the corresponding prowJob object and an error if there is any .
1145	Watch returns a watch . Interface that watches the requested row .
1146	Delete takes name of the prowJob and deletes it . Returns an error if one occurs .
1147	Patch applies the patch and returns the patched prowJob .
1148	MergeMethod returns the merge method for the given org and repository name .
1149	Query returns the query string .
1150	ForRepo returns true if the given org and repo is in the excluded repository .
1151	OrgExceptionsAndRepos returns a map of org exceptions and repos .
1152	QueryMap returns a new QueryMap .
1153	ForRepo returns all queries for the given organization .
1154	Validate validates the context policy
1155	GetTideContextPolicy gets the context policy
1156	IsOptional returns true if the context has the specified context
1157	MissingRequiredContexts returns the list of contexts that are present in the context
1158	ValidateWebhook validates the webhook
1159	HelpProvider provides the help for the needsRebase
1160	HandleEvent handles a pull request event .
1161	HandleAll is the main entry point for GitHub .
1162	NewDryRunProwJobClient creates a new ProwJobClient
1163	Create a dry run
1164	Update does nothing
1165	UpdateStatus does nothing
1166	Delete does nothing
1167	DeleteCollection is a mock
1168	Get does nothing
1169	List requests all dryRun jobs .
1170	Watch is part of the dryRunJobClient interface .
1171	Patch patch job
1172	hasSynced returns true if the informer is synced .
1173	Run starts the controller .
1174	runWorker pulls items from the workqueue .
1175	fromKey splits a key into its components .
1176	enqueueKey is used to enqueue a task
1177	finalState returns true if the status is considered empty .
1178	description returns the description of the condition
1179	prowJobStatus extracts the Prow status from the pipeline run status
1180	pipelineMeta returns meta for a ProwJob .
1181	sourceURL returns the source URL if any .
1182	makePipelineGitResource creates a pipeline resource .
1183	makePipelineRun creates a new PipelineRun object
1184	matchingConfigs removes all configs from all configs .
1185	SuggestCodeChange computes the code change for a given problem .
1186	ServeExternalPluginHelp serves the external plugin help .
1187	protect runs the protection function .
1188	UpdateOrg updates all repositories in the given org .
1189	UpdateRepo updates an existing repository .
1190	UpdateBranch implements the UpdateBranch interface .
1191	LoadConfig loads config from config file
1192	Run starts the provisioner .
1193	Start is used to start the agent
1194	reloadSecret reloads a secret file
1195	GetSecret returns the contents of a secret
1196	setSecret is used to set a secret
1197	GetTokenGenerator is used to generate a token generator
1198	New returns a new History instance .
1199	Record records a history record .
1200	ServeHTTP implements the http . Handler interface .
1201	Flush writes the history to GCS .
1202	AllRecords returns a map of all recorded records .
1203	MakeCommand creates a new cobra command
1204	CheckFlags checks that all registered patterns match .
1205	ReceiveComment returns a set of points for a given comment .
1206	NewController creates a new controller
1207	Run starts the controller .
1208	runWorker is a long running goroutine .
1209	New returns a new LocalGit object
1210	MakeFakeRepo makes a fake repo in the local directory
1211	AddCommit adds the given files to the current repository
1212	CheckoutNewBranch checks out new branch
1213	Checkout checkout a branch
1214	RevParse returns revision information for given commit string .
1215	CleanAll cleans all resources in the given region
1216	optionsForRepo returns the lgtm configuration for the given org and repository
1217	getChangedFiles retrieves the list of file descriptors for the given repository .
1218	loadReviewers loads reviewers from filenames .
1219	NewController creates a new controller
1220	SaveLastSync saves the last sync timestamp
1221	Sync processes the last sync of the controller .
1222	AddFlags adds flags related to the command
1223	CheckFlags checks all registered flags
1224	ReceiveIssueEvent returns points to the issue counter for the issue .
1225	Upload a set of uploads to the specified destination .
1226	FileUploadWithMetadata returns a UploadFunc that uploads a file to the specified metadata
1227	DataUploadWithMetadata returns a UploadFunc that uploads data to the specified object
1228	HasLabel returns true if the given label is in the list of labels .
1229	ImageTooBig returns true if the image size is larger than 100ms
1230	LevelFromPermissions returns the permission level for the given permissions
1231	PermissionsFromLevel converts the given permission level to a permission set .
1232	newProwJobs returns a ProwJobs
1233	GetApplicable returns a list of blockers that are available in the given repository .
1234	serve runs the jenkins server
1235	NewCountPlugin creates a cobra command
1236	ReceiveComment is part of the Plugin interface .
1237	updateMetrics updates disk usage metrics
1238	LogStatus shows current status
1239	SyncConfig synchronizes the resource with the given config .
1240	Metric returns a metric for the given type
1241	FormatURL formats a dog image .
1242	runAndSkipJobs runs the given list of requested jobs and skips them if any .
1243	validateContextOverlap returns an error if there are any conflicts
1244	RunRequested starts a new Prow job .
1245	skipRequested adds skippedJobs to the pull request .
1246	Match returns true if the event matches the event .
1247	Match returns true if the event matches the label
1248	AddFlags adds flags to the given FlagSet .
1249	AddFlagsWithoutDefaultGitHubTokenPath adds default flags to the specified FlagSet .
1250	Validate validates the options .
1251	GithubClientWithLogFields returns a GitHub client using the provided secret agent .
1252	GithubClient returns a GitHub client .
1253	GitClient returns a GitHub API client .
1254	toMap converts a CoverageList to a map .
1255	findChanges returns a list of coverage changes that cover the coverage .
1256	CreateDatabase creates a new MySQL database if it doesn t already exist .
1257	ShouldReport returns whether the given ProwJob should report .
1258	Report returns a ProwReporter .
1259	MarkComplete returns the number of keys in the set .
1260	NewJobAgent creates a new job agent
1261	Start the job agent .
1262	Jobs returns a copy of the jobs .
1263	ProwJobs returns a copy of the list of pointers
1264	GetProwJob gets the prow job id
1265	GetJobLog gets the logs for a given job id .
1266	unionStrings returns the union of two sets .
1267	Apply merges two policies into the given policy .
1268	GetOrg returns the org with the given name
1269	GetRepo gets a repository by name .
1270	GetBranch returns a branch with the given name .
1271	GetPolicy returns the policy for the given branch .
1272	UpdateIssueEvents updates issue events for given issue
1273	enqueueKey is used to enqueue a given object
1274	prowJobStatus extracts the Prow status from the build status .
1275	buildEnv returns a map of environment variables for a pod
1276	defaultArguments adds default arguments to the templateInstantiation spec
1277	defaultEnv adds the provided environment variables to the container .
1278	injectSource injects the source for the build
1279	in injected steps
1280	determineTimeout returns the timeout for the build
1281	makeBuild creates a new build
1282	newLabels creates new labels from given issue ID and repository .
1283	newAssignees creates a list of assignees from a Github issue .
1284	NewIssueComment creates a new issue comment
1285	messageFilter returns a filter that matches messages that match the given conditions .
1286	IsSuccess returns true if the build succeeded .
1287	IsFailure returns true if this build is a failure .
1288	IsAborted returns true if the build was aborted .
1289	ProwJobID returns the job id for the job
1290	BuildID returns the build id for the job
1291	CrumbRequest sends the crumb request to the client .
1292	measure records the request and status code .
1293	GetSkipMetrics retrieves metrics from given path .
1294	Get issues a GET request .
1295	request performs an HTTP request .
1296	doRequest performs the actual request
1297	getJobName returns a unique identifier for a job .
1298	getBuildPath returns the path to the Jenkins build
1299	GetJobInfo gets the job info for the given job spec .
1300	JobParameterized returns true if the job is marked as parameterized
1301	EnsureBuildableJob ensures that the given spec can be created .
1302	LaunchBuild launches a new build
1303	Build pulls a build from a ProwJob .
1304	BuildFromSpec creates a build from a given spec
1305	GetEnqueuedBuilds retrieves all the queued builds for the given jobs .
1306	Abort stops the build .
1307	PresubmitToJobSpec converts a Presubmit job to a JobSpec
1308	PostsubmitToJobSpec creates a JobSpec from a config . PostsubmitJob
1309	PeriodicToJobSpec creates a downward api . JobSpec from a config . Periodic
1310	GetBuildID returns the build ID for the given name
1311	listGcsObjects lists all objects matching a prefix
1312	FindBaseProfile finds the base profile of a job
1313	sortBuilds sorts a slice of build numbers
1314	GetAll returns all the known regions
1315	NewEventClient returns a new EventClient
1316	PruneComments deletes all the issues that are marked as deleted .
1317	FormatResponse returns a human readable representation of the response
1318	FormatSimpleResponse formats a human - readable message
1319	FormatICResponse returns the response as a string
1320	FormatResponseRaw formats the response body .
1321	Validate validates the options .
1322	Encode options to json string
1323	RegisterIssueHandler registers an issue handler
1324	RegisterIssueCommentHandler registers an IssueCommentHandler for a given name .
1325	RegisterPullRequestHandler registers a pull request handler .
1326	RegisterStatusEventHandler registers a new status event handler .
1327	RegisterPushEventHandler registers a push event handler .
1328	RegisterReviewEventHandler registers a new review event handler
1329	RegisterReviewCommentEventHandler registers a handler for reviewCommentEvent events .
1330	RegisterGenericCommentHandler registers a generic comment handler
1331	NewAgent creates a new Agent
1332	InitializeCommentPruner is used to initialize the comment pruner
1333	CommentPruner is part of the agent . Agent interface .
1334	Load loads a configuration from a file
1335	Config returns the agent configuration .
1336	Set sets the current configuration .
1337	Start starts the agent config .
1338	GenericCommentHandlers returns a map of GenericCommentHandlers .
1339	IssueHandlers returns a map of all available issue handlers .
1340	IssueCommentHandlers returns a map of all incoming issue comment handlers for the specified repository .
1341	PullRequestHandlers returns a map of pull request handlers .
1342	ReviewEventHandlers returns a map of all review event handlers for the given repository .
1343	ReviewCommentEventHandlers returns a map of all review comments for the given repository .
1344	StatusEventHandlers returns all status event handlers for the given repository .
1345	PushEventHandlers returns a map of push event handlers for the given repository .
1346	EventsForPlugin returns a list of all registered events for a plugin .
1347	insertLink adds the viewURL to the viewstore .
1348	HelpProvider returns the ParserHelp plugin .
1349	getPatch gets the patch for the specified branch .
1350	releaseNoteFromParentPR extracts a release note from a parent body
1351	ValidatePayload returns true if the payload is valid .
1352	PayloadSignature returns the SHA - 1 encoded signature of the payload .
1353	updateString is used to update the contents of a string
1354	updateBool returns true if both have and want are equal .
1355	configureOrgMeta configures the org metadata .
1356	configureTeamRepos configures the repos for the given team .
1357	ShouldReport reports whether the given prow job should report .
1358	Run uploads the specified job to GCS .
1359	Format implements the logrus . Formatter interface .
1360	FindLabels returns all labels that match a given regular expression .
1361	AddFlags adds flags to the given flagset .
1362	NewAgent creates a new Agent
1363	HandleLogin returns an http . HandlerFunc
1364	HandleLogout returns an http . HandlerFunc that redirects the session to the server .
1365	serverError logs 500 errors
1366	FromItem populates resourcesConfigObject from a given item .
1367	GetItems returns the ItemsConfigCollection
1368	SetItems sets the items in the ResourcesConfigCollection
1369	UnmarshalText implements the encoding . TextUnmarshaler interface .
1370	IsAssignee returns true if the given login is a member of the issue .
1371	IsAuthor returns true if the given login is the given user .
1372	HasLabel returns true if the given label can be found .
1373	Branch returns the branch of the push event .
1374	truncate truncates the given string .
1375	reportStatus creates the status for the given prow job .
1376	Parse issue comments
1377	createComment generates a comment for a test .
1378	Config returns the lens .LensConfig struct .
1379	Callback returns an empty string
1380	FormatRecord formats a record .
1381	Namespace returns a shallow copy of the namespace .
1382	NewFakeClient returns a Client that uses the deck URL .
1383	NewClientInCluster returns a client that connects to the kubernetes cluster
1384	NewClientFromFile creates a new client from a given cluster .
1385	NewClient returns a new client
1386	ReplaceConfigMap replaces a ConfigMap
1387	GetDiskUsage returns the number of bytes in the specified path
1388	GetATime returns the atime file at path
1389	RegisterLens registers a new view .
1390	GetLens returns a pointer to a lens by name .
1391	LastNLines retrieves the last N lines of a artifact
1392	NewClient returns a new slack client
1393	WriteMessage write a message to a channel
1394	MarkAndSweep marks the NATGateway as marked as mark .
1395	ListAll returns all NATGateways for the given account .
1396	NewClient creates a new client .
1397	Acquire is used to acquire a resource
1398	AcquireWait is a long running goroutine that acquires a resource
1399	AcquireByState acquires a set of resources with the given names and names .
1400	ReleaseAll releases all resources held by the client .
1401	ReleaseOne releases a resource
1402	UpdateAll updates the state of all resources
1403	SyncAll syncs all resources
1404	UpdateOne updates a single resource
1405	Metric sends a metric to the server .
1406	HasResource returns true if there is any available resources
1407	DialContext implements the Dialer interface .
1408	NewDashboardAgent creates a new dashboard agent
1409	QueryPullRequests queries the GitHub API for GitHub .
1410	GetHeadContexts returns the context information for the pull request .
1411	ConstructSearchQuery constructs a query for the search query
1412	NewBundledStates initializes a new BundledStates struct
1413	ReceiveEvent is used to receive an event
1414	age returns a map of age for all states .
1415	Percentile returns the age at the given percentage .
1416	NewMetrics initializes a new Metrics struct
1417	NewDiskCache creates a new http . RoundTripper that uses a cache .
1418	NewMemCache returns a new RoundTripper that uses a cache .
1419	NewFromCache creates a new http . RoundTripper that wraps an httpcache . Cache .
1420	ProwV1 retrieves the ProwV1Client
1421	Prow retrieves the ProwV1Client
1422	NewOwners creates a new Owners struct
1423	GetApprovers returns the set of approval IDs for the owner
1424	GetAllPotentialApprovers returns a list of potential approver IDs
1425	GetReverseMap returns the set of owners files
1426	tempUnapprovedFiles returns the set of unapproved files
1427	KeepCoveringApprovers returns the set of apps that were found in the current repo .
1428	GetSuggestedApprovers returns the set of approver names that can be found in the list of approved files
1429	GetOwnersSet returns a set of owner owners
1430	GetShuffledApprovers returns a slice of random peers
1431	String returns a string representing an approval .
1432	IntersectSetsCase returns the intersection of two sets .
1433	NewApprovers returns a new Approvers
1434	AddLGTMer adds a new license for a given login and reference
1435	RemoveApprover removes a user from the list of Approvers map
1436	AddAssignees adds the user to the approval list
1437	GetCurrentApproversSetCased returns the current approval set
1438	GetFilesApprovers returns a map of all the files and their IDs .
1439	NoIssueApprovers returns a set of Approvers that has no issue .
1440	UnapprovedFiles returns the set of unapproved files
1441	GetFiles returns a list of all approved files .
1442	IsApproved returns true if there is an approval
1443	ListApprovals returns a list of Approvals
1444	ListNoIssueApprovals returns a list of Approvals
1445	GenerateTemplate is used to generate a new message
1446	writeTemplate writes the given template to outputPath .
1447	Labels returns a slice of all the labels in the configuration .
1448	LabelsForTarget returns labels that match target .
1449	LoadConfig loads a configuration file
1450	loadLabels loads all the labels for the specified repositories .
1451	kill kills a label
1452	create creates a new update .
1453	classifyLabels takes a list of labels and a list of required labels and returns a map of the required labels .
1454	linkify converts a text string to a lower case .
1455	NewCache creates a new cache
1456	KeyToPath returns the path to the cache
1457	ensureDir ensures dir exists
1458	Put writes content to the cache
1459	Get retrieves the file with the given key from the cache .
1460	Delete removes the key from the cache
1461	NewGCSArtifact creates a new artifact
1462	Size returns the size of the artifact .
1463	ReadAll reads the contents of the artifact .
1464	ReadTail reads the last n bytes of the artifact
1465	gzipped returns true if the artifact is gzip encoded
1466	optionsForRepo returns a list of options for the given org and repository .
1467	List lists all ProwJobs in the indexer .
1468	ProwJobs returns an object that can list and get ProwJobs .
1469	List lists all ProwJobs in the indexer for a given namespace .
1470	RunsAgainstAllBranch returns true if all the branches are run
1471	Intersects returns true if the two branches intersects the other branch .
1472	ShouldRun determines whether the RegexpChangeMatcher should be determined by the RegexpChangeMatcher
1473	RunsAgainstChanges returns true if a RegexpChangeMatcher matches any of the given changes .
1474	CouldRun checks if a post submission can be found
1475	ShouldRun determines whether the post submission should be run or not .
1476	CouldRun returns true if the plugin can be found
1477	ShouldRun checks whether the given changes should be run or not
1478	GetPresubmit returns the Presubmit for the given repo and job name
1479	SetPresubmits sets the jobs for the job config
1480	SetPostsubmits sets the job s postsubmits regexes
1481	AllPresubmits returns all Presubmits that are in the given repos .
1482	AllPostsubmits returns all postsubmits for the given repo .
1483	AllPeriodics returns all the periodic configurations
1484	ClearCompiledRegexes clears all compiled Regexes for all compiled Regexes .
1485	Empty returns true if the SimpleConfig is empty .
1486	NewClient creates a new client
1487	ExpandAlias expands all existing user aliases
1488	ExpandAliases expands aliases in the given set of aliases
1489	ParseFullConfig parses the given YAML bytes into a FullConfig instance .
1490	ParseSimpleConfig parses and returns a SimpleConfig object .
1491	decodeOwnersMdConfig decodes the metadata from the metadata file .
1492	findOwnersForFile returns the most recent owner of the given path .
1493	FindApproverOwnersForFile returns the last owner of the given file
1494	FindReviewersOwnersForFile returns the name of the repository owned by the given file .
1495	FindLabelsForFile returns the set of labels for the given file .
1496	IsNoParentOwners returns true if repo owner is no parent owners .
1497	Ratio returns the ratio of all stmtts .
1498	FromPayload populates PeriodicProwJobEvent from payload
1499	ToMessage converts the periodic prow job event to a pubsub message .
1500	UnmarshalText implements the encoding . TextUnmarshaler interface .
1501	compileApplicableBlockades compiles the given blockades into a list of blocked blocks .
1502	calculateBlocks calculates the summary of all blocks in the given set of blocks .
1503	MergeMultipleProfiles merges multiple profiles into one .
1504	AddFlags adds flags related to the specified FlagSet .
1505	processNextItem gets the next item from the queue
1506	handleErr is called when an error is returned
1507	AggregateFilter takes a list of filters and returns a single Filter .
1508	FilterPresubmits evaluates the presubmit conditions against the given filter .
1509	MakeCommand creates a new cobra command
1510	Push implements the Push method of the heap . Interface .
1511	Pop implements heap . Interface .
1512	NewFakeOpenPluginWrapper creates a new FakeOpenPluginWrapper
1513	ReceiveIssue is a mock
1514	Validate validates the given options .
1515	Complete populates the options from the command line
1516	Set parses the given value into the format .
1517	ensure ensures that the specified binary is installed
1518	output returns the stdout of the command
1519	projects returns a list of all available projects .
1520	selectProject asks the user to select a project .
1521	createCluster creates a new cluster
1522	createContext creates a new GKE cluster
1523	contextConfig returns a ConfigLoader and a ConfigLoader
1524	selectContext selects an existing context
1525	applyCreate runs kubectl create command
1526	determineSkippedPresubmits returns a set of presubmitted presubmitted presubmitted jobs
1527	Sends points to InfluxDB
1528	CreateIssue creates a new issue
1529	CreateStatus creates a status for the specified ref .
1530	ForEachPR iterates over all commits in the given repository .
1531	GetCollaborators returns the list of collaborators for the given organization .
1532	GetCombinedStatus gets the combined status for a given ref .
1533	GetIssues returns all issues for the given organization .
1534	GetRepoLabels retrieves all valid labels for a given organization .
1535	GetUser returns the user with the given username .
1536	checkConfigValidity checks if the passed flag is valid
1537	createSystemdLogfile creates a log file to the given outputDir
1538	createFullSystemdLogfile writes the log file to the given directory
1539	createSystemdLogfiles creates all systemd log files
1540	prepareLogfiles prepares the logfiles for the node
1541	writeSuccessMarkerFile writes a marker file to GCS
1542	MakeCommand creates a new cobra command
1543	warnDeprecated checks if the warning is older than freq .
1544	Describe returns a description of the requirement .
1545	TriggerFor returns a trigger for the given org and repository
1546	EnabledReposForPlugin returns the repositories and repositories for a given plugin
1547	EnabledReposForExternalPlugin returns a list of repositories that are enabled for the given plugin .
1548	SetDefaults sets defaults for the ConfigUpdater
1549	validatePlugins returns an error if all plugins are found .
1550	ShouldReport reports whether a Prow job should be printed .
1551	Run clones the given refs and returns a record .
1552	PathForRefs returns the full path for the given refs .
1553	gitCtxForRefs returns a gitCtx object for the given refs .
1554	commandsForBaseRef returns the git - refs for the given refs .
1555	gitTimestampEnvs returns a set of environment variables for the given timestamp
1556	gitRevParse runs git rev - parse
1557	commandsForPullRefs returns the commands for the given refs .
1558	ProduceCovList creates a CoverageList from a list of profiles .
1559	popRandom returns a random string from the set
1560	resolve attempts to resolve the necessary kubeconfig from the options .
1561	ProwJobClientset returns a clientset for the specified namespace .
1562	ProwJobClient returns a client for the kubernetes api
1563	InfrastructureClusterClient returns a kubernetes client
1564	BuildClusterClients returns a map of kubernetes pods for the specified namespace
1565	Age returns the duration for a given time .
1566	ReceiveEvent returns the active state for the given event .
1567	ReceiveEvent returns the active state for the given event .
1568	Active returns true if all states are active .
1569	Age returns the minimum age for a given time .
1570	ReceiveEvent implements Recorder .
1571	ProwJobs returns a ProwJobInformer .
1572	ItemToResourcesConfig converts an item to ResourcesConfig .
1573	Copy returns a copy of this TypeToResources object
1574	MakeCommand creates a new cobra command
1575	incrementNumPendingJobs increments the number of pending jobs for the given job .
1576	Set previous report states
1577	SyncMetrics gets the current metrics for the controller .
1578	DumpProfile writes profile data to io . Writer
1579	blocksEqual checks whether two profiles are equal .
1580	NewProwJobInformer constructs a new informer for ProwJob type . Always prefer using an informer factory to get a shared informer instead of getting an independent one . This reduces memory footprint and number of connections to the server .
1581	NewFilteredProwJobInformer constructs a new informer for ProwJob type . Always prefer using an informer factory to get a shared informer instead of getting an independent one . This reduces memory footprint and number of connections to the server .
1582	New creates a new spyglass .
1583	Lenses returns a list of all possible images
1584	JobPath returns the path of the job .
1585	RunPath takes the src string and tries to translate it into a path .
1586	ExtraLinks returns a list of extra links
1587	needDemux returns a list of plugins that need to be run .
1588	DemuxExternal dispatches event to external plugins .
1589	dispatch sends a POST request .
1590	AddFlags adds flags related to the command
1591	CheckFlags checks that the plugin is running .
1592	ReceiveIssueEvent returns a slice of points to the issue event .
1593	Load config from disk
1594	loadConfig loads the configuration and merges them into a Config object .
1595	yamlToConfig attempts to unmarshal a job configuration file .
1596	ReadFileMaybeGZIP checks if the file is gzip .
1597	finalizeJobConfig checks that the configuration is valid .
1598	validateComponentConfig checks that the Planks configuration is valid
1599	ConfigPath returns the config path
1600	ValidateController validates the controller configuration .
1601	defaultJobBase sets the default values for the job .
1602	SetPresubmitRegexes sets rerun regexes for all jobs in the list
1603	setBrancherRegexes compiles the regexes for each branch .
1604	SetPostsubmitRegexes sets the RegexpRegexes for each post submission
1605	Body takes a set of artifacts and returns the JSON - encoded string
1606	NewBoskosHandler returns a new http . ServeMux
1607	ErrorToStatus convert error to http status code
1608	DumpProfile dumps profile to destination
1609	LoadProfile loads profiles from stdin
1610	NewClient returns a new Client .
1611	SetCredentials sets the user and token generator .
1612	Checkout checkout out the current branch .
1613	CheckoutNewBranch creates a new branch from the given branch .
1614	Merge merges the given commit with the given commit
1615	CheckoutPullRequest checks the pull request for a pull .
1616	Config runs the git config command
1617	retryCmd runs the command with the given arguments .
1618	LabelsAndAnnotationsForSpec returns labels and annotations for a given pod .
1619	ProwJobToPod converts a job to a pod .
1620	CloneLogPath returns the path to the log file
1621	cloneEnv returns a copy of the Kubernetes cli environment variables .
1622	sshVolume creates a new volume mount for the given secret
1623	InjectEntrypoint injects an entrypoint into the container
1624	PlaceEntrypoint creates a container that contains an entrypoint
1625	kubeEnv returns a list of environment variables .
1626	Client returns a Kubernetes client for the given namespace
1627	handle handles a github event .
1628	SendHook sends a webhook event to the specified address
1629	janitorClean runs the janitor command .
1630	janitor
1631	Run starts the pull server
1632	specToStarted converts a job spec to a gcs . Started struct .
1633	Run clones the given options .
1634	hasPRChanged returns true if the pull request has changed .
1635	UpdateIssues updates all existing issues
1636	handleReviewEvent is used to handle review events .
1637	findAssociatedIssue returns the number of associated issues in the given body
1638	optionsForRepo returns a set of Approve options for the given org and repository .
1639	localOnlyMain is a middleware that serves HTTP requests .
1640	summarize summarizes the coverage list
1641	Subset returns the CoverageList with the specified prefix .
1642	ListDirectories lists all directories
1643	readRequest reads an admission request from r .
1644	handle handles a request
1645	writeResponse writes the response to the io . Writer
1646	onlyUpdateStatus is used to filter status update status updates
1647	convertSuiteMeta converts gcs . SuitesMeta to resultstore .
1648	NewHealth returns a new instance of Health
1649	ServeReady serves the healthz endpoint .
1650	NewController creates a new status controller
1651	newExpectedContext creates a new context for githubql
1652	contextsToStrings converts a list of contexts to a string slice
1653	filterSubpools takes a set of subpools and returns a map of subpools .
1654	filterSubpool removes pulls from the subpool and returns the updated subpool .
1655	poolPRMap returns a map that maps pull requests to PullRequest .
1656	unsuccessfulContexts returns a list of contexts that are missing in the context .
1657	accumulate takes a set of pull requests and accumulates the results .
1658	tryMerge tries to merge the given mergeFunc . If the mergeFunc fails the error is returned .
1659	prChanges returns a config . ChangedFilesProvider for the pull request .
1660	prune is used to prune the agent .
1661	DividePool divides a pull request into a subpool
1662	AggregateProfiles aggregates profiles into one or more profiles
1663	countToBoolean returns the set of profiles that have at least 1
1664	NewStorage creates a new storage layer
1665	AddResource adds the given resource to the storage .
1666	DeleteResource removes the named resource .
1667	UpdateResource updates the given resource .
1668	GetResource retrieves a single resource .
1669	GetResources returns all the resources in the storage .
1670	SyncResources synchronizes the resources with the given data
1671	ParseConfig parses the given YAML configuration file .
1672	problemsInFiles returns a map of files that are not in the given files .
1673	NewPodLogArtifact creates a new PodLogArtifact
1674	CanonicalLink returns the canonical link for the PodLogArtifact
1675	ReadAt implements io . ReaderAt interface
1676	ReadAll reads all the pod logs from the artifact .
1677	ReadAtMostBytes reads n bytes of the pod log .
1678	ReadTail returns the last n bytes of the pod log .
1679	newProblems creates a new set of problems from a set of comments .
1680	problemsInFiles returns a map of lints to lint .
1681	undoPreset removes all environment variables from a preset .
1682	undoPresubmitPresets undo a set ofPresubmitPresets
1683	yamlBytesStripNulls removes null comments from yaml bytes .
1684	monitorDiskAndEvict periodically checks disk usage for disk usage .
1685	difference removes duplicates from c2 .
1686	union returns the union of two repo configs .
1687	clearStaleComments removes stale comments for a pull request .
1688	determineReleaseNoteLabel extracts the release notes from the body .
1689	getReleaseNote extracts the release note from the given body .
1690	NewClient creates a new Client instance .
1691	Acquire acquires a resource
1692	ReleaseOne releases a resource
1693	UpdateAll updates all fields of the client .
1694	GetGitHubClient returns a github client for the given token .
1695	GetUsername returns the user s username .
1696	CreateTokenHandler creates a token handler
1697	CreateTokenHandlers creates an array of TokenHandlers
1698	String implements the Stringer interface .
1699	TerminateOlderPresubmitJobs cancels jobs that have completed jobs .
1700	PushMetrics pushes metrics to the specified endpoint .
1701	RateLimiter creates a rate limiter for the given controller name .
1702	checkExistingStatus checks if the status of the given pull request is present in the given repository .
1703	checkExistingLabels checks if the pull request labels are present in the pull request
1704	handle checks the status of the given PR .
1705	MarkdownSHAList renders a list of github commits .
1706	PathForSpec returns the full path for a given job spec
1707	AliasForSpec returns the alias for the given job spec
1708	RootForSpec returns the root directory for a given job spec
1709	NewSingleDefaultRepoPathBuilder creates a new repo path builder .
1710	NewExplicitRepoPathBuilder returns a repository path builder .
1711	RegisterSourceOrDie registers an IssueSource with the given name .
1712	CreateAndSync creates all the issues from all sources
1713	loadCache loads the internal cache of the issueCreator
1714	Filters out all the elements in a and removed array
1715	sync syncs the given issue if any .
1716	GetAWSCreds extracts the credentials from the given resource .
1717	Stops a channel that will be closed when SIGTERM is received .
1718	newPipelineConfig creates a new pipeline config
1719	KubeClient returns a kubernetes client
1720	ProwJobClient returns a Kubernetes API client .
1721	resolveSymLink returns the full path of a given symLink
1722	read json from a bucket
1723	List all subdirectories
1724	List all keys with prefix
1725	List build IDs
1726	FilterProfilePaths takes a set of paths and returns the profiles that match the include flag .
1727	LoadSecrets loads secrets from a list of paths .
1728	LoadSingleSecret loads a single secret from a file
1729	Set sets the boolean value
1730	NewOpener creates a new gcp client
1731	IsNotExist checks if the given error is a NotExist
1732	LogClose closes the connection
1733	Writer opens a GCS file .
1734	InitGitHubOAuthConfig initializes the GitHubOAuthConfig
1735	DeltaDisplayed returns a human - readable representation of the coverage change .
1736	makeTable returns a table describing the coverage .
1737	ContentForGitHubPost returns the content of a coverage report for the given profiles .
1738	AddFlags adds flags related to the command
1739	CheckFlags checks flags
1740	getGitHubClient returns the GitHub client if set .
1741	limitCheckAndWait checks if the current user limits are available .
1742	FetchIssues fetches the commits from the GitHub API
1743	hasID returns true if the event has the given id .
1744	FetchIssueEvents fetches issue events from given issueID
1745	isPRChanged returns true if the pull request has changed .
1746	NewFetcher creates a new Fetcher .
1747	Fetch recent issues
1748	fetchRecentEventsAndComments fetches issue - events and comments
1749	Fetch fetches the latest events and comments
1750	Issues returns the set of issues for the flaky job .
1751	Title returns a human - readable version of the FlakyJob .
1752	Labels returns a slice of labels for the test .
1753	ReadHTTP is a wrapper around http . ReadHTTP
1754	String returns the log as a string .
1755	NewJobSpec creates a JobSpec from a Prow API .
1756	ResolveSpecFromEnv loads JobSpec from the environment
1757	EnvForSpec returns a map of environment variables for the job spec
1758	EnvForType returns a slice of environment variables for the given job type .
1759	getRevisionFromRef get revision from refs
1760	GetRevisionFromSpec returns the revision of a job spec
1761	helpProvider provides the help for the merge commit .
1762	load parses the contents of r into a Group .
1763	loadPaths loads the paths for the given io . Reader .
1764	Match returns true if the given path matches any of the paths .
1765	CreateDatabase creates a new instance of InfluxDB .
1766	mergeTags merges the default tags .
1767	tagsToWhere converts a set of tags to a WHERE clause .
1768	Push adds a point to the influxdb .
1769	artifact fetches a PodLogArtifact from the given source .
1770	serve serves Prometheus metrics
1771	gather is a long running goroutine that collects metrics from the controller .
1772	makeRequest creates a github . BranchProtectionRequest from the given policy .
1773	makeReviews creates a requiredPullRequestReviews from a review policy .
1774	Header returns the header for the specified artifact
1775	Callback is the entry point for lens .
1776	logLinesAll returns the log lines of the given artifact .
1777	executeTemplate parses the specified template and executes the template
1778	DeepCopyObject returns a deep copy of the receiver .
1779	FromItem converts a common . Item into a ResourceObject
1780	SetItems sets the Items field of the ResourceCollection .
1781	DeepCopyObject returns a deep copy of the resource collection .
1782	useContext configures kubectl with context
1783	currentContext returns the current context
1784	command returns an exec . Cmd and an error
1785	describeCluster returns information about the current cluster
1786	Set appends the value to the slice .
1787	parseXML takes an XML body and returns a gcsDir object .
1788	Render render page
1789	Render renders the record .
1790	Render is used to render an HTMLGrid
1791	Printf implements the Logger interface
1792	NewClient creates a new gRPC client .
1793	SetReview sets a review comment to a Gerrit instance .
1794	GetBranchRevision returns the revision of a branch .
1795	queryAllChanges queries the GCE API for all projects .
1796	NewTypeFilterWrapperPlugin creates a new TypeFilterWrapperPlugin
1797	AddFlags adds flags
1798	CheckFlags returns an error if any flags are not supported
1799	AddFlags adds flags related to client to the specified FlagSet .
1800	Validate validates the client options
1801	Client returns a new client for the given type .
1802	newCRDClient creates a new CRD client .
1803	createRESTConfig creates a rest . Config for a kubeconfig .
1804	registerResource creates a CustomResourceDefinition
1805	newDummyClient creates a new client with the given type .
1806	Update updates an object
1807	TrustedPullRequest checks if the pull request is trusted and if it is trusted .
1808	buildAll builds all pending presubmitted jobs .
1809	Run runs the options .
1810	AddConfig adds a configuration to the storage .
1811	DeleteConfig removes a config from storage .
1812	UpdateConfig updates the configuration .
1813	GetConfig retrieves a configuration from storage .
1814	GetConfigs retrieves all known resources .
1815	SyncConfigs syncs configs with newConfigs
1816	addKnownTypes adds all known types to the scheme .
1817	NewController creates a new Controller .
1818	Run is the main entry point for reconciler .
1819	addedBlockingPresubmits adds a new blocking presubmit to the list of presubmitted plugins .
1820	removedBlockingPresubmits removes any non - blocking presubmitted entries that are not in the old repo .
1821	migratedBlockingPresubmits migrates a set of blocking presubmit errors .
1822	Load loads configuration from environment variables
1823	canExecuteConcurrently returns true if the Prow job can be executed .
1824	getJenkinsJobs converts a slice of Prow jobs to buildQueryParams .
1825	terminateDupes removes any duplicate jobs that need to be cancelled .
1826	Throttle will throttle the specified amount of hourly tokens .
1827	NewClientWithFields returns a new GitHub API client .
1828	NewClient returns a new GraphQL client
1829	NewDryRunClient creates a new dry run - run client
1830	NewFakeClient returns a new GitHub API client .
1831	request makes a request and unmarshals ret into ret
1832	requestRaw sends an HTTP request to the server .
1833	getUserData fetches the current user data
1834	readPaginatedResultsWithValues retrieves all the results from the given path .
1835	UpdatePullRequest updates a pull request .
1836	getLabels returns a list of labels at the specified path .
1837	stateCannotBeChangedOrOriginalError returns the original error if any .
1838	IsMergeable checks if a pull request has been merged .
1839	Token gets an oauth2 . Token
1840	ListArtifacts returns a list of artifact names
1841	KeyToJob returns the job name and buildID and buildID
1842	prowToGCS returns the GCS URL that should be retrieved from the survey .
1843	FetchArtifacts fetches and returns a list of artifact objects
1844	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new DecorationConfig .
1845	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new GCSConfiguration .
1846	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new JenkinsSpec .
1847	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new ProwJob .
1848	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new ProwJobList .
1849	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new ProwJobSpec .
1850	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new ProwJobStatus .
1851	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new Pull .
1852	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new Refs .
1853	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new UtilityImages .
1854	upload uploads the specified invocation to the remote server .
1855	ApplyDefault applies the default values to the given DecorationConfig .
1856	Validate validates the decryption configuration .
1857	ApplyDefault applies default values to u .
1858	ApplyDefault applies defaults to the given GCSConfiguration .
1859	Validate validates the configuration .
1860	ClusterAlias returns the cluster alias for the job .
1861	NewResource creates a new Resource
1862	NewResourcesFromConfig creates a list of Resource objects from a ConfigEntry
1863	UserDataFromMap creates a UserData from a map
1864	Set implements the flag . Value interface
1865	UnmarshalJSON populates UserData from JSON
1866	Extract loads the specified id from the config file
1867	Set stores an object in the YAML format
1868	Update merges all elements in new UserData with empty values .
1869	Convert a UserData to a UserDataMap
1870	FromMap creates a UserData from a map
1871	ItemToResource converts an item into a Resource .
1872	Runs the given options
1873	addSSHKeys adds ssh keys to the specified paths
1874	Issues returns the issues for the triage .
1875	loadClusters loads the clusters from the JSON data .
1876	parseTriageData parses triage data
1877	topClusters returns a slice of clusters sorted by total builds .
1878	topJobsFailed returns a slice of failed jobs .
1879	Title returns a human - readable summary of the cluster .
1880	Labels returns a list of labels that can be used to identify the cluster .
1881	New creates a new Cron
1882	QueuedJobs returns the list of scheduled jobs
1883	HasJob checks if a job exists
1884	addJob adds a job to the list .
1885	removeJob removes a job from the list .
1886	UpdateComments updates the latest comments for an issue .
1887	GatherProwJobMetrics collects prometheus metrics for a job
1888	OptionOrDefault returns the option or the default value if the option is zero .
1889	newGCSJobSource creates a new job source .
1890	artifacts retrieves the artifacts for a job
1891	canonicalLink returns the canonical link of the source .
1892	jobPath returns the path to the job .
1893	targetURL returns a link to pull requests .
1894	newBuildConfig creates a new buildConfig .
1895	NewClient returns a new GitHub API client .
1896	retry calls the call function with the specified number of retries
1897	depaginate performs a depaginate of the specified action .
1898	NewHelpAgent creates a new HelpAgent
1899	GeneratePluginHelp generates the help for the plugin
1900	getPullCommitHash returns the commit hash of a pull .
1901	listJobBuilds returns a list of all builds for a given job prefix .
1902	getPRBuildData retrieves the build data for the given jobs .
1903	getGCSDirsForPR returns a set of GCSDirs for the given repository and prubmitted images .
1904	imageDeleteFromDisk removes the image from disk
1905	doNetworksCreate creates a network .
1906	networkLoadByName loads a network by name .
1907	Transaction starts a transaction with the given function .
1908	ForLocalInspectionWithPreparedStmts creates a new cluster based on the local state .
1909	SetDefaultTimeout sets default context timeout
1910	Transaction runs the given function in a transaction .
1911	EnterExclusive enters the exclusive lock on the cluster .
1912	ExitExclusive releases the exclusive lock on the cluster .
1913	Close closes the cluster .
1914	TxCommit commits a transaction .
1915	ParseRemote parses a remote string and returns the corresponding remote or an error
1916	GetContainerServer returns the LXD server for the given remote name .
1917	GetImageServer returns an lxd . ImageServer for the specified remote name .
1918	initAppArmor checks if apparmor is enabled
1919	appArmorCanStack returns true if the apparmor version is supported .
1920	containerDeviceAdd adds a device to a container
1921	profileDeviceAdd adds a device to a profile
1922	ensureImageAliases ensures that all images exist .
1923	GetExistingAliases returns a list of existing aliases
1924	String returns the string representation of the status code .
1925	ImagesGetExpired gets all the images that have expired .
1926	ImageSourceInsert inserts a new image source into the database .
1927	ImageSourceGet returns the image with the given ID .
1928	ImageExists checks if the image exists in the cluster
1929	ImageGet returns the specified image .
1930	ImageGetFromAnyProject gets a single image by fingerprint
1931	imageFill fills the given image with the given id .
1932	ImageLocate returns the ID of the image with the given fingerprint .
1933	ImageAssociatesNode associates a node with the specified image .
1934	ImageDelete deletes an image .
1935	ImageAliasesGet returns the list of images for the given project
1936	ImageAliasGet returns the ID of an image .
1937	ImageAliasRename renames an existing image .
1938	ImageAliasDelete deletes an image alias for the given project and name
1939	ImageAliasesMove moves an image to another .
1940	ImageAliasAdd adds an image to the database .
1941	ImageAliasUpdate updates an existing alias .
1942	ImageLastAccessUpdate updates the last access_date of the image .
1943	ImageLastAccessInit initializes the cache with the given fingerprint .
1944	ImageUpdate updates an existing image .
1945	ImageInsert inserts an image .
1946	ImageGetPools returns a list of pools for a given node
1947	ImageGetPoolNamesFromIDs returns the name of the pool
1948	ImageUploadedAt updates the image with the given id .
1949	ImagesGetOnCurrentNode returns the images for the current node .
1950	ImagesGetByNodeID returns a map of images for the given node ID
1951	ImageGetNodesWithImage returns a list of nodes with the given fingerprint .
1952	ImageGetNodesWithoutImage returns all nodes with the given fingerprint .
1953	Add adds a new task to the group
1954	Start starts the tasks in the group .
1955	zfsIsEnabled returns true if zfs is enabled .
1956	Get version information
1957	zfsModuleVersionGet returns the zfs module version
1958	zfsPoolVolumeCreate creates a new zfs pool
1959	zfsPoolVolumeExists checks if a given dataset exists
1960	NetworkIDsNotPending returns a map of network IDs to IDs .
1961	NetworkConfigAdd adds a config to a given network .
1962	NetworkNodeJoin joins the given network to the cluster .
1963	NetworkCreatePending creates a new network in the cluster .
1964	NetworkCreated sets the state of a network .
1965	NetworkErrored sets the failed state of a network .
1966	NetworkGet returns the network with the given name .
1967	networkNodes returns a list of all nodes in a given network .
1968	NetworkGetInterface gets the network interface information .
1969	NetworkConfigGet returns the network configuration for a given network id .
1970	NetworkCreate creates a new network .
1971	NetworkUpdate updates the network configuration with the given name and configuration .
1972	NetworkUpdateDescription updates the network s description .
1973	NetworkConfigClear clears the config for a given network .
1974	NetworkDelete deletes a network .
1975	NetworkRename renames a network .
1976	GetContainers returns a list of all containers
1977	GetContainersFull returns a list of all containers in the cluster .
1978	GetContainer retrieves a container by name .
1979	CreateContainerFromBackup creates a container from a backup file
1980	CreateContainer creates a container
1981	CreateContainerFromImage creates a new container from an image server .
1982	UpdateContainer updates a container
1983	RenameContainer renames a container
1984	ExecContainer execs the specified container
1985	GetContainerFile returns a reader for a single file
1986	CreateContainerFile creates a file at the specified path
1987	DeleteContainerFile deletes a file at the specified path
1988	GetContainerSnapshotNames queries the list of snapshots for a container
1989	GetContainerSnapshots returns all snapshots of a container
1990	GetContainerSnapshot retrieves a single snapshot
1991	CreateContainerSnapshot creates a snapshot of a container
1992	MigrateContainerSnapshot will migrate a snapshot to a container
1993	UpdateContainerSnapshot updates a snapshot of a container
1994	GetContainerState retrieves the container state
1995	UpdateContainerState updates container state
1996	GetContainerLogfiles returns the container logs for the specified container
1997	GetContainerLogfile gets the logs of a container
1998	GetContainerMetadata retrieves the metadata for a container
1999	SetContainerMetadata updates the metadata of a container
2000	GetContainerTemplateFiles returns a list of files for a container
2001	CreateContainerTemplateFile creates a template file
2002	DeleteContainerTemplateFile deletes a template file
2003	ConsoleContainer sends the console to the specified container .
2004	GetContainerConsoleLog retrieves the logs of a container
2005	DeleteContainerConsoleLog removes the console log from the container .
2006	GetContainerBackups returns the containers backups for the specified container
2007	GetContainerBackup returns the backup for the specified container
2008	CreateContainerBackup creates a backup of a container
2009	RenameContainerBackup renames a container backup
2010	DeleteContainerBackup removes a backup of a container
2011	GetContainerBackupFile gets a backup file for a given container
2012	RsyncSend is a wrapper around rsyncSend .
2013	patchesGetNames returns the names of all registered patches .
2014	patchRenameCustomVolumeLVs renames any existing vg volumes to the new name .
2015	patchLvmNodeSpecificConfigKeys patches the lvm node s vvm pool config keys
2016	GetHTTPClient returns the HTTP client
2017	do sends the request to the server .
2018	RawQuery performs a raw query
2019	RawWebsocket creates a websocket connection
2020	RawOperation is a convenience method to create a new operation .
2021	ProfileToAPI converts a profile into an api . Profile struct .
2022	Profiles returns the list of profiles for the given project
2023	ProfileGet gets a profile by name and name
2024	ProfilesGet returns a list of profiles for a given project
2025	ProfileConfig returns the profile configuration for a given project and name
2026	ProfileConfigClear removes the configuration from the database .
2027	ProfileConfigAdd inserts a profile config into the database .
2028	ProfileContainersGet returns the profile information for a given project .
2029	ProfileCleanupLeftover removes all profiles from the cluster .
2030	ProfilesExpandConfig takes a list of profiles and merges them into a single map
2031	ProfilesExpandDevices takes a list of devices and converts them into a list of Devices
2032	GetServer retrieves the current server .
2033	UpdateServer updates a server
2034	HasExtension checks if the given extension exists
2035	GetServerResources retrieves the resources for the server .
2036	UseProject creates a new container server with the given name .
2037	sqliteOpen opens a database at the specified path .
2038	Rebalance balances the current raft cluster .
2039	Promote promotes the database to the given nodes .
2040	Purge removes a node from the cluster .
2041	List returns a list of all known nodes .
2042	Count returns the number of nodes in the cluster .
2043	Enabled returns true if the Raft node is enabled .
2044	MembershipCheckNodeStateForBootstrapOrJoin returns an error if the node is not bootstrap or if the cluster is not bootstrap .
2045	membership of the cluster .
2046	membershipCheckClusterStateForAccept checks if the cluster state is accepted .
2047	membership of the cluster .
2048	membershipCheckNoLeftoverClusterCert checks if the leftover cluster certificate is left in the given directory
2049	ConfigLoad loads the node config .
2050	Replace replaces the configuration with the given values .
2051	Patch returns a new configuration with the given values .
2052	HTTPSAddress returns the HTTPS address for the given node .
2053	CertificatesGet returns all known certificates .
2054	CertificateGet returns a certificate by fingerprint
2055	CertSave stores a certificate in the cluster .
2056	CertDelete deletes a certificate .
2057	CertUpdate updates a certificate .
2058	createDevLxdlListener creates a net . Listener
2059	Servers implements the Instance interface .
2060	Shutdown shuts down the instance
2061	raftNetworkTransport returns a raft transport layer for the given node .
2062	raftConfig returns a new raft config with sane defaults .
2063	raftMaybeBootstrap checks if raft has a bootstrap cluster
2064	CPUResource returns api . ResourcesCPU .
2065	MemoryResource returns the api . ResourcesMemory struct .
2066	GetOperationUUIDs returns the UUIDs of the cluster
2067	GetOperations returns a list of all operations
2068	GetOperation retrieves a single operation
2069	GetOperationWebsocket returns a websocket connection for an operation
2070	tryMount tries to try to mount a syscall .
2071	lxdUsesPool returns true if the cluster uses onDiskPool
2072	ProjectURIs returns the list of URIs for a given filter .
2073	ProjectList returns a list of projects matching the given filter .
2074	ProjectGet returns a single project by name
2075	ProjectExists checks if a project exists
2076	ProjectCreate creates a project .
2077	ProjectUsedByRef returns the projects used by the given filter
2078	ProjectRename renames a project .
2079	ProjectDelete deletes a project .
2080	PasswordCheck returns nil if the secret is valid
2081	LoadCert loads a TLS certificate from the given directory
2082	WriteCert writes certificate to dir .
2083	NewDaemon returns a new Daemon
2084	DefaultDaemon is the default implementation of the Daemon interface .
2085	AllowProjectPermission checks if the user has permission to access the user .
2086	checkTrustedClient returns an error if the client is not authenticated
2087	Authenticate checks if the request is authenticated
2088	State returns a new daemon state .
2089	UnixSocket returns the path to the unix socket
2090	Stop shuts down the cluster
2091	setupExternalAuthentication is used to setup external authentication
2092	initializeDbObject initializes the lxd . Dump object .
2093	WriteJSON writes the body to the http . ResponseWriter
2094	EtagHash returns the etag of data
2095	EtagCheck checks if the request matches the ETag
2096	HTTPClient returns a new http . Client with the given certificate .
2097	IsRecursionRequest returns true if the request is recursion parameter .
2098	GetListeners returns a list of net . Listener with the pid and fds
2099	internalSQLGet handles the actual SQL request .
2100	internalSQLPost posts all SQL queries
2101	PublicKey returns the certificate s public key .
2102	PrivateKey returns the private key
2103	Fingerprint returns the certificate fingerprint .
2104	GenCert generates a cert and key
2105	PrintServerInfo prints the server information .
2106	Launch containers
2107	CreateContainers creates containers with specified fingerprint .
2108	GetContainers returns a list of all containers in lxd .
2109	StartContainers starts the specified containers .
2110	setQueryParam appends a query parameter to the URL query .
2111	GetImages returns a list of all images
2112	GetImageFile issues a GetImageFile request to retrieve a file
2113	GetImageSecret retrieves the secret associated with the given fingerprint .
2114	GetPrivateImage retrieves a private image
2115	GetPrivateImageFile gets the private image file for the given fingerprint .
2116	GetImageAliases returns a list of all image aliases
2117	tryCopyImage tries to copy the specified urls if necessary .
2118	CopyImage copies an image to another server .
2119	Update an image
2120	DeleteImage deletes an image .
2121	RefreshImage refreshes the specified image .
2122	CreateImageAlias creates a new image alias
2123	Update an existing alias
2124	Rename an image alias
2125	Delete an image alias
2126	Open opens a connection to a node .
2127	EnsureSchema is the same as EnsureSchema but ensures that version is - 1 .
2128	FilesystemDetect returns the backing filesystem type .
2129	Schema creates a new schema .
2130	updateFromV37 is used to update the Raft configuration .
2131	ArchiveLocal returns the architecture specific architecture .
2132	NewController returns a new Controller .
2133	CreateContainer creates a container with the specified interfaces .
2134	DefinedContainer returns true if the container with the specified name exists .
2135	UpdateContainer updates the container with the specified interfaces .
2136	RenameContainer renames a container
2137	DeleteContainer deletes a container
2138	Add adds an update to the schema .
2139	ensureSchemaTableExists creates the schema table if it does not exist .
2140	queryCurrentVersion retrieves the current version of the cluster .
2141	ensureUpdatesAreApplied applies the given updates to the current version .
2142	checkSchemaVersionsHaveNoHoles returns an error if any missing updates are missing .
2143	checkAllUpdatesAreApplied returns an error if all the migrations are applied .
2144	formatSQL is used to convert SQL statements to SQL
2145	GetAllXattr gets extended attributes for a given path .
2146	GetErrno returns errno if err iserrno
2147	Uname returns the uname name of the process .
2148	RegisterStmt registers the given SQL statement .
2149	PrepareStmts returns a map of prepared statements indexed with code .
2150	NewGateway creates a new dqlite gateway
2151	DialFunc implements dqlite . DialFunc
2152	Shutdown shuts down the database gateway
2153	Sync writes the database to disk .
2154	Reset shuts down the Raft node .
2155	LeaderAddress returns the leader address .
2156	waitLeadership blocks until the gateway is elected .
2157	currentRaftNodes returns the list of raft nodes .
2158	cachedRaftNodes returns the cached raft node addresses .
2159	dqliteMemoryDial implements dqlite . DialFunc
2160	DqliteLog implements Dqlite .
2161	MetadataAsMap returns the metadata as a map
2162	MetadataAsOperation returns the metadata as an Operation .
2163	MetadataAsStringSlice returns the metadata as a slice of strings
2164	MetadataAsStruct unmarshals the response body into a struct
2165	Load the given file
2166	Write writes the CSV report to a file
2167	AddRecord adds a record to the report
2168	LoadConfig loads the configuration from the given path .
2169	SaveConfig saves the configuration to the given path .
2170	Get implements the Loader interface .
2171	ConfigPath returns the config path for the given paths .
2172	ServerCertPath returns the path to the server certificate .
2173	NewConfig creates a new config with default remotes
2174	checkForPreDumpSupport checks whether pre - dump is enabled .
2175	preDumpLoop is the main entry point for pre - dump .
2176	newRoot returns the root command for lxd - generate
2177	APIExtensionsCount returns the number of API extensions .
2178	SelectURIs returns the URIs for the given function .
2179	SelectStrings using the given query .
2180	scanSingleColumn is an alias for scan .
2181	LazyHandler is a wrapper around Lazy .
2182	Callers returns a trace from the pool .
2183	name returns the function name
2184	TrimBelow returns a slice of trace elements that are below pc .
2185	TrimAbove returns a slice of trace that contains at least pc .
2186	TrimBelowName returns a slice of trace elements whose name matches name .
2187	TrimAboveName returns a slice of trace elements removed .
2188	TrimRuntime returns the trace entries removed from the runtime .
2189	GetCaps returns the capabilities for the given path
2190	SetCaps applies the capabilities to the specified path .
2191	Read implements io . Reader interface .
2192	Supported checks if the given path is supported .
2193	GetProject returns the project ID of the given path
2194	SetProject sets the project id for the given path
2195	DeleteProject deletes a project .
2196	GetProjectUsage returns the project usage for the specified id .
2197	SetProjectQuota sets the quota for the specified path .
2198	backupLoadByName loads a backup by name .
2199	backupCreate creates a backup of a container
2200	Rename renames the backup file
2201	Delete deletes a backup .
2202	backupFixStoragePool fixes the storage pool .
2203	Count returns the number of rows that match the given conditions .
2204	CountAll returns a map of all tables in the database .
2205	InitTLSConfig returns a TLS config with default values .
2206	copyContainerThinpool creates a copy of the container to the specified container .
2207	copyContainerLV copies the source container to the target container .
2208	copyContainer copies the source container to target container
2209	copyVolume copies the contents of a volume to the target pool
2210	GetPrivateImage is unsupported
2211	GetPrivateImageFile is unsupported
2212	GetImageAliasNames returns a list of all image aliases
2213	ProtoRecv reads a message from the websocket .
2214	ProtoSend sends a proto message to the websocket .
2215	ProtoSendControl send a migration control message
2216	Read implements the io . Reader interface .
2217	doContainersGetFromNode get containers from node
2218	Retry retries the given function if any
2219	IsRetriableError returns true if the given error is retried .
2220	AppArmorProfile returns the apparmor profile .
2221	StoragePoolVolumeCreate creates a new storage volume
2222	ContainerStorageReady implements btrfs . btrfs .
2223	ContainerCreateFromImage creates a new storage volume from an image
2224	ContainerSnapshotRename renames the snapshot container to newName
2225	ContainerSnapshotCreateEmpty creates a new empty snapshot of a snapshot
2226	btrfsSubVolumesDelete deletes all blobs in the given directory .
2227	isBtrfsSubVolume returns true if the given path is a btrfs
2228	SelectConfig returns a map of key - value pairs from a transaction .
2229	UpdateConfig updates a config .
2230	deleteConfig removes keys from a table .
2231	FormatSection formats a section
2232	GetProjects returns a list of all projects .
2233	GetProject retrieves a project with the given name .
2234	CreateProject creates a new project .
2235	UpdateProject updates a project .
2236	RenameProject renames a project .
2237	Read implements io . Reader .
2238	Write implements io . Writer
2239	NewCanceler returns a new canceller
2240	Cancelable returns true if the canceller is active .
2241	Cancel cancels the operation .
2242	CancelableDownload is used to cancel a request
2243	Get the status of the cluster
2244	clusterGetMemberConfig retrieves all storage - pools configuration keys for a given cluster
2245	clusterPutDisable disables the cluster
2246	tryClusterRebalance attempts to rebalance of the cluster
2247	rebalance the cluster .
2248	internalClusterPostPromote is used to promote a Raft node .
2249	Filters returns a list of filters that can be used for filtering
2250	Parse returns a mapping for the given name .
2251	findStruct looks up a struct type by name
2252	parseStruct parses a struct .
2253	GetProfileNames returns a list of all profiles
2254	GetProfiles returns a list of all profiles
2255	GetProfile retrieves a profile by name .
2256	CreateProfile creates a new profile
2257	UpdateProfile updates a profile .
2258	RenameProfile renames a profile
2259	Load loads a map from the given schema .
2260	Dump returns a copy of the schema
2261	GetRaw gets the value for a given key
2262	GetString returns the string value for a given key .
2263	GetBool returns the value of a key as bool .
2264	GetInt64 returns the value at key as an int64 . Panics if the value does not exist .
2265	update updates the map with the given values .
2266	set sets the value of the named key to the given value . If the value is not set the initial value is set .
2267	DoesSchemaTableExist checks if a schema table exists .
2268	selectSchemaVersions returns a slice of all schema versions .
2269	selectTablesSQL retrieves all tables from a database .
2270	createSchemaTable creates a table for the schema .
2271	insertSchemaVersion adds a new version to the database .
2272	NewState creates a new State object .
2273	containerLXCUnload removes the LXC object .
2274	containerLXCInstantiate creates a new LXC instance .
2275	initStorage initializes the storage .
2276	OnNetworkUp is called when a device is created
2277	setupHostVethDevice sets the host_name for the given device
2278	getLxcState returns the LXC state of the container .
2279	StorageStartSensitive returns true if the container is sensitive
2280	check if device exists
2281	createDiskDevice creates a disk device
2282	setNetworkRoutes sets the network routes
2283	Path returns the full path of the container .
2284	maasInterfaces returns a list of maas . Interface .
2285	getSystemHandler returns a system handler based on syslog string
2286	findNvidiaMinor attempts to find the device minor version of the GPU .
2287	GetLogger returns a logger based on syslog options
2288	SetLogger sets the logger
2289	WaitRecord blocks until the channel is closed .
2290	AddContext adds a log15 context to the logger
2291	NewDottedVersion creates a new DottedVersion
2292	Parse parses a version string
2293	String returns a string representation of the version .
2294	Compare returns an integer indicating whether this version is greater than or equal to other .
2295	projectCreateDefaultProfile creates a default profile for a project .
2296	projectChange updates the features of a project .
2297	projectIsEmpty returns true if project is empty
2298	GetCertificateFingerprints retrieves a list of certificate fingerprints
2299	GetCertificates returns a list of certificates
2300	GetCertificate retrieves a certificate .
2301	CreateCertificate creates a new certificate
2302	UpdateCertificate updates a certificate with the given fingerprint .
2303	DeleteCertificate deletes a certificate
2304	Container metadata templates
2305	containerMetadataTemplatesPostPut PUTs the metadata for a container
2306	remove metadata templates
2307	getContainerTemplatePath returns the full path of a template file
2308	Error returns the string representation of the error .
2309	Error implements the error interface .
2310	add adds an error to the list
2311	UpdateSchema updates the global schema .
2312	doProfileUpdateCluster updates the profile information .
2313	doProfileUpdateContainer updates the profile with the specified parameters .
2314	getProfileContainersInfo returns the container info for a given profile .
2315	GetNetworkNames returns a list of all network names
2316	GetNetworks returns a list of all the networks
2317	GetNetwork retrieves a network by name .
2318	GetNetworkLeases returns a list of all network leases for the specified network .
2319	GetNetworkState retrieves the network state for the given name .
2320	CreateNetwork creates a new network .
2321	UpdateNetwork updates a network .
2322	RenameNetwork renames a network .
2323	Open opens a connection to a cluster .
2324	URLEncode is used to encode a URL path
2325	IsUnixSocket returns true if path is a socket
2326	HostPath returns the hostpath for the given path
2327	FileMove moves a file
2328	DirCopy copies the contents of source directory to dest .
2329	StringMapHasStringKey returns true if a map contains the specified keys
2330	TextEditor sets the contents of the given inPath to the local editor
2331	WriteTempFile writes a temp file to a temporary file
2332	RenderTemplate renders a template using the given context .
2333	Every returns a schedule of every interval
2334	StoragePoolMount returns whether or not the storage layer is mounted .
2335	Dump dumps a schema .
2336	dumpTable dumps the given schema into a string .
2337	ProjectHasProfiles returns true if the project with the given name exists .
2338	ProjectNames returns a list of all projects .
2339	ProjectMap returns a map of all projects .
2340	ProjectHasImages checks if a project has images enabled .
2341	ProjectUpdate updates a project .
2342	GetCluster retrieves the current cluster .
2343	UpdateCluster updates a cluster .
2344	GetClusterMemberNames returns a list of all members of the cluster .
2345	GetClusterMembers returns a list of all cluster members .
2346	GetClusterMember retrieves a single member by name .
2347	RenameClusterMember renames a member .
2348	Disconnect disconnects the listener
2349	CompareVersions returns an integer indicating whether the version is greater than or equal to the version .
2350	HasClientCertificate returns true if the client cert and key
2351	GenerateClientCertificate is used to generate a client certificate
2352	LoadModule load module
2353	Parse go package
2354	PprofAddress returns the address of the pprof endpoint .
2355	PprofUpdateAddress updates the pprof address .
2356	NewMethod creates a new Method
2357	Generate writes generated code to buf .
2358	fillSliceReferenceField generates a reference field for the given field .
2359	StoragePoolID returns the id of a given storage pool
2360	StoragePoolIDsNotPending returns a map of all storage pools that are not pending .
2361	StoragePoolNodeJoin adds a node to a storage pool
2362	StoragePoolNodeJoinCeph adds the given ceph volume to the specified node .
2363	StoragePoolConfigAdd adds a storage config to an existing storage pool .
2364	StoragePoolCreatePending creates a new storage pool
2365	StoragePoolCreated sets the state of a storage pool
2366	StoragePoolErrored sets the state of a storage pool .
2367	StoragePoolNodeConfigs returns the storage configs for a given pool
2368	StoragePoolsGetDrivers returns the list of registered drivers
2369	StoragePoolGetID returns the id of a given storage_pool
2370	StoragePoolGet returns the state of a given storage pool .
2371	storagePoolNodes returns the names of all nodes in a given storage pool .
2372	StoragePoolConfigGet returns the storage pool configuration for a given pool
2373	StoragePoolCreate creates a new storage pool
2374	storagePoolConfigAdd adds a storage pool config to the database .
2375	StoragePoolUpdate updates a storage pool
2376	StoragePoolConfigClear removes the storage config data for a given pool .
2377	StoragePoolDelete deletes a storage pool
2378	StoragePoolVolumesGetNames returns the volume names for a given pool
2379	StoragePoolVolumesGet returns a list of all storage volumes for a given pool .
2380	StoragePoolNodeVolumesGet returns the list of storage volumes for a specified node .
2381	storagePoolVolumesGet gets all the volumes for a given pool and node ID
2382	StoragePoolVolumesGetType gets the type of storage volumes for a given pool and node ID
2383	StoragePoolVolumeSnapshotsGetType gets the list of snapshots for a volume
2384	StoragePoolNodeVolumesGetType gets the volume type of a node .
2385	StoragePoolVolumeGetType gets the type of a storage volume .
2386	StoragePoolNodeVolumeGetType gets the type of the specified volume .
2387	StoragePoolNodeVolumeGetTypeByProject returns the type of a volume with the given name and poolID
2388	StoragePoolVolumeUpdate updates a storage volume .
2389	StoragePoolVolumeDelete deletes a storage volume .
2390	StoragePoolVolumeRename renames an existing storage volume .
2391	storagePoolVolumeReplicateIfCeph replaces any existing volumes with the given volumeID .
2392	StoragePoolVolumeCreate creates a new storage pool volume .
2393	StoragePoolVolumeGetTypeID returns the ID of a volume .
2394	StoragePoolNodeVolumeGetTypeID returns the ID of a volume
2395	StoragePoolVolumeTypeToName converts a volume type to a name
2396	DevicesAdd adds devices to the database .
2397	Devices returns the devices for the specified project .
2398	Patches returns a list of all patches .
2399	PatchesMarkApplied marks the given patch as applied .
2400	entityType returns the name of the entity
2401	entityPost returns the plural form of an entity
2402	stmtCodeVar returns a variable name for a statement
2403	destFunc returns the generated code for a slice of fields .
2404	CompareConfigs compares two configs and returns an error if they differ .
2405	CopyConfig returns a shallow copy of the given config
2406	NewNotifier returns a new Notifier
2407	Events is a function that updates events for a given cluster .
2408	eventsConnect connects to the lxd server
2409	StoragePoolInit initializes the storage pool .
2410	getAAProfileContent returns the profile s profile content .
2411	AALoadProfile reload the profile .
2412	AADestroy removes the apparmor .
2413	AAParseProfile parses an apparmor profile .
2414	getSystemHandler returns nil if syslog is set .
2415	NotifyUpgradeCompleted notifies the database upgrade status .
2416	KeepUpdated returns a function that periodically updates the state .
2417	maybeUpdate checks if we should update the cluster if it is in the current cluster .
2418	NewServer creates a new server
2419	StartStatusCheck starts a goroutine that checks if the status changes .
2420	SyncProjects syncs all projects from the server .
2421	AddProject adds a project to the server .
2422	DeleteProject deletes a project .
2423	RenameProject renames an existing project .
2424	IsAdmin returns true if username is admin
2425	HasPermission returns true if the user has permission for the specified project .
2426	rsyncSend is the same as rsyncSend with rsync
2427	rsyncSendSetup is used to setup the rsync send setup
2428	tlsClientConfig is used to generate a client TLS configuration
2429	tlsCheckCert checks if the TLS certificate is valid
2430	Internal implementation of internalClusterContainerMoved
2431	containerPostCreateContainerMountPoint creates the mount point for the container and snapshot of the container
2432	Contains checks if a device is in the list
2433	Update updates the list of devices
2434	DeviceNames returns a sorted list of device names .
2435	Infof log message
2436	Debugf log message
2437	Warnf log message
2438	Errorf log message
2439	Critf logs a critical message
2440	eventForward forwards the given event to the node .
2441	StorageProgressReader returns an io . ReadCloser that writes progress information to the given operation .
2442	StorageProgressWriter returns a progress writer that writes progress information to the given operation .
2443	GetLSBRelease returns a map of OS - release
2444	Reset resets the global environment
2445	Append a snippet to target file
2446	ContainerToArgs creates a ContainerArgs from a Container .
2447	ContainerNames returns a list of containers for the given project .
2448	ContainerNodeAddress returns the node address for a container
2449	ContainersListByNodeAddress returns a map of all containers for the given project .
2450	ContainerListExpanded returns a list of all containers in the cluster .
2451	ContainersByNodeName returns a map of containers for a given project .
2452	SnapshotIDsAndNames returns a map of all container IDs and their ID .
2453	ContainerNodeList returns a list of all containers .
2454	ContainerNodeProjectList lists all containers for the given project .
2455	ContainerRemove removes a container .
2456	ContainerProjectAndName returns the project and name of the given container .
2457	ContainerConfigClear clears the config for the given container .
2458	ContainerConfigGet gets the value of a container .
2459	ContainerConfigRemove removes a container s config .
2460	ContainerSetStateful sets the stateful for a container
2461	ContainerProfilesInsert inserts the specified profiles into the database .
2462	ContainerProfiles returns the list of profiles for a container
2463	ContainerConfig returns the container s config .
2464	ContainerSetState sets the state of a container
2465	ContainerUpdate updates the details of a container .
2466	ContainerLastUsedUpdate updates the last_use_date of a container .
2467	ContainerGetSnapshots returns a list of all snapshots of a container
2468	ContainerGetSnapshotsFull gets all snapshots of a project .
2469	ContainerNextSnapshot returns the next snapshot of a container
2470	ContainerPool returns the name of a storage pool .
2471	ContainerGetBackup gets the backups for a given container .
2472	ContainerGetBackups returns the backups for a given project and name
2473	ContainerBackupCreate creates a new container backup .
2474	ContainerBackupRemove removes a backup from the cluster .
2475	ContainerBackupRename renames a container backup
2476	ContainerBackupsGetExpired returns a list of all backups stored in the cluster .
2477	DefaultOS returns the default OS
2478	Init initializes the OS
2479	GetWebsocket returns a websocket connection for the operation .
2480	Refresh refreshes the contents of the operation .
2481	CancelTarget cancels the operation .
2482	GetTarget returns the target operation api .
2483	up sets up the endpoints for each endpoint .
2484	Down shuts down all endpoints
2485	serveHTTP starts the HTTP server for the given kind .
2486	closeListener removes the listener for the given kind .
2487	activatedListeners takes a list of systemdListeners and returns a map of net . Listeners .
2488	CandidServer returns the URL for the candid server
2489	RBACServer returns the current role
2490	AutoUpdateInterval returns the auto update interval
2491	MAASController returns the MAAS controller and key
2492	OfflineThreshold returns the threshold for offline connections .
2493	ConfigGetString gets a string value from a cluster .
2494	ConfigGetBool gets a bool value .
2495	ConfigGetInt64 gets an int64 from a cluster .
2496	ClusterAddress returns the address of the listener .
2497	Debug log message
2498	RestServer returns an http . Server for all api routes .
2499	projectParam returns the project parameter from the query parameter or default if the query param is empty .
2500	queryParam parses a query string and returns it as a string
2501	newDb creates a new database command
2502	Description returns a human - readable description of the operation type .
2503	Permission returns the permission for the operation
2504	OperationsUUIDs returns the UUIDs of a node .
2505	OperationNodes returns a slice of all nodes in the given project .
2506	OperationByUUID returns a single operation by UUID .
2507	OperationAdd adds a new node to the database .
2508	OperationRemove deletes the given operation .
2509	operations fetches all operations from the database .
2510	expireLogsTask is used to expire log files .
2511	absPath returns the absolute path of a file
2512	Keys returns the keys of the schema .
2513	Defaults returns a map of default values .
2514	mustGetKey will panic if the key does not exist .
2515	assertKeyType panics if the key has the given type .
2516	validate validates the given value .
2517	GetStoragePoolVolumes queries the list of volumes for a given pool
2518	GetStoragePoolVolume retrieves a specific storage volume .
2519	CreateStoragePoolVolume creates a new storage volume
2520	Create a volume snapshot
2521	GetStoragePoolVolumeSnapshots returns a list of snapshots for the specified volume type
2522	Get storage volume snapshot
2523	Update the snapshot of a volume
2524	MigrateStoragePoolVolume migrates a volume to the specified volume .
2525	MoveStoragePoolVolume moves a volume to the specified source pool .
2526	UpdateStoragePoolVolume updates a storage pool
2527	Delete a storage pool volume
2528	Rename a volume
2529	doStoragePoolCreateInternal is used to create a new storage pool
2530	containerGetParentAndSnapshotName gets parent parent and snapshot name from container name
2531	containerLoadFromAllProjects loads containers from state .
2532	containerLoadNodeAll loads all containers from the cluster .
2533	containerLoadNodeProjectAll loads all containers for the given project .
2534	heartbeatNode sends the given Raft nodes to the given address .
2535	dotPrefixMatch returns true if the short string matches the full .
2536	ContainerMount mounts a container .
2537	ContainerStorageReady implements zfs . Storage .
2538	AskChoice asks the question to ask for a set of choices .
2539	AskInt asks the question to wait for a given number between min and max
2540	AskString asks the question to ask for a string
2541	AskPassword asks for a given question .
2542	AskPasswordOnce asks the user to get a password from the terminal
2543	askQuestion asks the question with the default answer
2544	read answer from stdin
2545	profilePost posts a profile .
2546	profileDelete deletes a profile
2547	IsRootDiskDevice checks if the device is a root disk device
2548	GetRootDiskDevice tries to find the root device if one is found
2549	ForwardedResponse returns a response for the given request .
2550	ForwardedResponseIfTargetIsRemote will return a response if the target node is remote
2551	ForwardedResponseIfContainerIsRemote returns the response if the request is remote
2552	ForwardedOperationResponse returns a response for the operation .
2553	Done marks the given message as done .
2554	Update updates the progress bar
2555	Warn is part of the interface .
2556	UpdateProgress updates the progress bar .
2557	UpdateOp is part of the op . Metadata interface .
2558	updateFromV6 updates the current version of the current storage config .
2559	localCreateListener creates a local listener at the specified path
2560	NewStmt creates a new stmt
2561	Generate writes the statement to buf .
2562	register writes the statement to buf .
2563	httpsLXD creates a new LXD server
2564	IsActive returns true if the container is active .
2565	RaftNodeAddress returns the address of a raft node .
2566	RaftNodeFirst sets the first node ID to 1 .
2567	RaftNodeAdd adds a new raft node to the raft .
2568	RaftNodeDelete deletes the Raft node with the given ID .
2569	RaftNodesReplace removes the given Raft nodes .
2570	initCGroup initializes the cgroup flags
2571	sqliteDirectAccess implements the sqlite . Conn interface
2572	ContainerGet returns a container by name
2573	ContainerID returns the container id for the given name .
2574	ContainerExists checks if a container exists .
2575	ContainsFields returns true if any of the fields in m .
2576	FieldByName returns a field by its name
2577	FieldColumnName returns the field name for a given field name .
2578	FilterFieldByName returns a field by name .
2579	ColumnFields returns a list of fields that match the given names .
2580	ScalarFields returns all fields for a mapping .
2581	RefFields returns the fields of the mapping .
2582	Column returns the name of the field .
2583	ZeroValue returns the zero value for a field .
2584	FieldColumns returns a comma separated list of fields
2585	FieldArgs returns a comma separated string of fields
2586	FieldParams builds a comma separated list of fields for each field .
2587	FieldCriteria returns the query criteria for the given fields
2588	initDataClusterApply applies the config to the container server .
2589	JsonFormatEx returns a Format for json records
2590	Format logfmt value
2591	ResolveTarget returns the address of a member .
2592	Write implements io . Writer
2593	updateNodeVersion updates the node version for the given address .
2594	selectNodesVersions fetches version information from node versions .
2595	GetArchitectures returns a slice of architecture architectures .
2596	RuntimeLiblxcVersionAtLeast returns true if the runtime lxc version is at least min .
2597	GetExecPath returns the executable path of the executable executable
2598	Connect connects to the given address .
2599	ConnectIfContainerIsRemote attempts to connect to a container with the given name . If the host is not remote it will return nil .
2600	ConnectIfVolumeIsRemote tries to connect to the given volume with the given volumeName and returns a container server .
2601	SetupTrust sets up the TLS certificate to the target address
2602	GetStoragePools returns a list of all available storage pools .
2603	Get a specific storage pool
2604	CreateStoragePool creates a new storage pool
2605	Update a storage pool
2606	Delete a named storage pool
2607	GetStoragePoolResources retrieves the resources associated with the given name .
2608	initDirs initializes the necessary directories
2609	Config returns the node config .
2610	UpdateConfig updates the configuration of a node .
2611	Config returns the cluster config .
2612	UpdateConfig updates the config with the given values .
2613	storagePoolClusterConfigForEtag returns a copy of the etag config with etag keys removed .
2614	GetEvents retrieves a list of events from the server
2615	LogfmtFormat returns a format for logfmt .
2616	StorageVolumeNodeAddresses returns the list of node addresses for a given pool .
2617	StorageVolumeNodeGet returns the node name for a given volumeID .
2618	StorageVolumeConfigGet returns the volume config for a given volume .
2619	StorageVolumeDescriptionGet returns the description of a given volume .
2620	StorageVolumeIsAvailable checks if a storage volume is available
2621	StorageVolumeDescriptionUpdate updates the description of a volume .
2622	StorageVolumeConfigAdd inserts a new storage volume config into the database .
2623	StorageVolumeConfigClear clears the config data for a given volume .
2624	storageVolumeIDsGet returns the IDs of all storage volumes for a given project type .
2625	StorageVolumeCleanupImages deletes all images with the specified fingerprints .
2626	StorageVolumeMoveToLVMThinPoolName moves the thin pool_name to the thin pool_name .
2627	L prints to the buffer .
2628	code returns the source code
2629	Pretty marshals input to JSON
2630	NetworkPublicKey returns the public key for this endpoint .
2631	NetworkPrivateKey returns the private key for the endpoint .
2632	NetworkCert returns the network certificate .
2633	NetworkAddress returns the address of the listener .
2634	NetworkUpdateAddress updates the network address for the given address .
2635	NetworkUpdateCert updates the listener s cert .
2636	networkCreateListener creates a new HTTPS listener
2637	Accept implements the net . Listener interface .
2638	Config updates the listener s TLS configuration .
2639	IsOffline returns true if the given threshold is offline .
2640	NodeByAddress returns a node by address
2641	NodePendingByAddress returns the node with the given address .
2642	NodeByName returns a node by name
2643	NodeName returns the name of the node .
2644	NodeAddress returns the node address for the given node ID .
2645	NodeIsOutdated checks if the local node is in the cluster
2646	NodesCount returns the number of nodes in the cluster .
2647	NodeRename renames a node .
2648	nodes returns a list of nodes in the cluster .
2649	NodeAdd inserts a node into the cluster .
2650	NodePending updates the status of a node .
2651	NodeUpdate updates a node .
2652	NodeRemove removes a node .
2653	NodeHeartbeat sets the heartbeat of a node .
2654	NodeIsEmpty returns if the node is empty .
2655	NodeClear clears all containers in a given node .
2656	NodeOfflineThreshold returns the number of offline nodes .
2657	NodeUpdateVersion updates the node s version .
2658	Transaction runs f in a transaction .
2659	rollback rolls back a transaction .
2660	ProfileURIs returns the URIs for a profile .
2661	ProfileGet gets a profile by name
2662	ProfileExists checks if a profile exists .
2663	ProfileConfigRef returns the profile config for a given filter .
2664	ProfileUsedByRef returns the list of projects used by the given filter .
2665	ProfileCreate creates a new profile .
2666	ProfileRename renames a profile .
2667	ProfileDelete deletes a profile .
2668	ServerTLSConfig creates a TLS config for the server .
2669	NetworkInterfaceAddress returns the IPv6 address of a loopback interface .
2670	IsAddressCovered returns true if the two addresses are the same .
2671	SelectObjects executes the given statement using the given arguments .
2672	DeleteObject removes an object from the table . Returns true if the object was deleted .
2673	loop runs the task .
2674	IsTerminal returns true if the given file descriptor is a terminal
2675	socketUnixListen creates a unix socket at the given path
2676	socketUnixRemoveStale removes the unix socket from the given path
2677	socketUnixSetPermissions sets the permissions on a local socket
2678	socketUnixSetOwnership sets the ownership of the local socket to the given path
2679	cephOSDPoolExists checks if the oph pool exists
2680	cephOSDPoolDestroy destroys the specified pool
2681	cephRBDVolumeExists checks if the specified volume exists
2682	cephRBDSnapshotProtect is used to remove a volume from the cluster
2683	cephRBDCloneCreate performs a clone of the specified volume to the cluster
2684	cephRBDSnapshotListClones returns the list of created snapshots for the specified volume type .
2685	cephRBDVolumeMarkDeleted marks a volume as deleted .
2686	cephRBDVolumeUnmarkDeleted marks the volume as marked as deleted .
2687	cephRBDVolumeRename renames the volume name to new volume name
2688	cephRBD volume snapshot
2689	cephRBDSnapshotDelete deletes a snapshot
2690	cephRBDVolumeCopy copies the rbd volume to the new volume
2691	cephRBDVolumeListSnapshots returns a list of snapshots for the specified volume type
2692	getRBDSize returns the size of the RBDS storage .
2693	getRBDFilesystem returns the filesystem filesystem for the block filesystem
2694	copyWithoutSnapshotsFull copies the contents of the container to the target container .
2695	copyWithoutSnapshotsSparse creates a sparse copy of the source container .
2696	GetConfigCmd returns the getconfig configuration command
2697	SetConfigCmd returns a cobra command for setting config
2698	NewSharder creates a new Sharder .
2699	NewRouter returns a new router
2700	renewUserCredentials renews user credentials
2701	NewLocalClient returns a client that connects to the given root .
2702	AddSpanToAnyExisting is like AddSpanToAnyExisting but returns a new span .
2703	InstallJaegerTracerFromEnv installs jaeger tracing from environment variables
2704	UnaryClientInterceptor returns a new unary client interceptor for OpenTracing
2705	StreamClientInterceptor returns a new streaming client interceptor for OpenTracing
2706	UnaryServerInterceptor returns a new unary server interceptor for OpenTracing
2707	StreamServerInterceptor returns a new stream server interceptor for OpenTracing
2708	CloseAndReportTraces closes all traces of the global tracing
2709	newWriter creates a new Writer
2710	For sets the maximum elapsed time
2711	Log implements the Logger interface
2712	Format implements the Formatter interface .
2713	NewGRPCLogWriter creates a new logger
2714	Read reads the configuration from the config file .
2715	Write writes the configuration to disk
2716	Read implements the io . Reader interface .
2717	Write writes val to the stream .
2718	NewReadWriter returns a new ReadWriter .
2719	RunGitHookServer runs the git hook server
2720	newLoggingPipe creates a new loggingPipe .
2721	Read implements the io . Reader interface .
2722	Write implements the io . Writer interface .
2723	Accept returns the next connection .
2724	Close closes the listener .
2725	errorf creates a new hash tree error .
2726	InitWithKube initializes a ServiceEnv with the given configuration .
2727	GetEtcdClient returns a new etcd client
2728	GetKubeClient returns a kubernetes client
2729	NewHasher creates a new hasher with the given parameters
2730	HashJob hashes a job ID .
2731	HashPipeline returns the hash of a pipeline name .
2732	Status returns the status of all workers
2733	Cancel a job
2734	Conns returns the grpc client connections
2735	Clients returns a list of registered clients
2736	NewClient returns a new Client .
2737	RunFixedArgs returns a function that runs numArgs .
2738	RunBoundedArgs checks if min and max arguments are equal to min and max
2739	Run a cobra command
2740	ErrorAndExit is similar to fmt . ErrorAndExit except that it exits .
2741	ParseCommit parses a git commit object
2742	ParseBranch parses a branch from a git branch .
2743	ParseFile parses a file
2744	Set implements the flag . Value interface .
2745	SetDocsUsage sets the documentation for the command
2746	makeCronCommits creates new commits for cron .
2747	Writer returns writer
2748	Reader returns a reader
2749	Delete is used to delete a named object
2750	Walk invokes the Trace method .
2751	Exists checks if the object exists
2752	GetBlock returns a Block with the given hash .
2753	Health implements the health . Health interface .
2754	split returns the root directory and the base directory
2755	ValidatePath returns an error if the given path is invalid .
2756	MatchDatum returns true if data matches the filter
2757	NewCacheServer creates a new cache server
2758	authorizePipelineOp authorizes the pipeline operation .
2759	sudo runs the given function .
2760	setPipelineDefaults sets default values for the pipeline
2761	incrementGCGeneration increments the new GC generation for the environment
2762	NewDebugServer creates a new debug server
2763	Health returns the status of the cluster
2764	newObjBlockAPIServer creates a new instance of BlockAPI .
2765	watchGC starts watching the generation number
2766	splitKey splits a key into a unique identifier .
2767	NewWriter creates a new tabwriter .
2768	Write writes buf to the underlying writer .
2769	PrintRepoHeader prints the repo header
2770	PrintRepoInfo prints RepoInfo to w .
2771	PrintDetailedRepoInfo prints a repo info
2772	PrintBranch prints the branch to the given io . Writer
2773	PrintCommitInfo prints the commit info to w .
2774	PrintDetailedCommitInfo returns a printable commit info
2775	PrintFileInfo prints the file info to w .
2776	PrintDetailedFileInfo prints the file info to stdout
2777	Add adds a string to a string
2778	RetryNotify is the same as Retry but calls notify function .
2779	Get retrieves the entry from the cache .
2780	Delete deletes an entry from the cache .
2781	PrintJobInfo prints information about a job .
2782	PrintPipelineInfo prints the pipeline info to w .
2783	PrintWorkerStatus prints the worker status
2784	PrintDetailedJobInfo prints information about a job .
2785	PrintDetailedPipelineInfo prints information about the pipeline
2786	PrintDatumInfo prints datum info .
2787	PrintDetailedDatumInfo prints detailed information about a datum .
2788	PrintFile prints a single file
2789	ShorthandInput returns a human - readable version of the input
2790	Retrieve retrieves the credentials from the vault .
2791	IsExpired checks if the credentials has expired .
2792	NewBranch creates a new branch with the given name and repository name .
2793	NewCommit creates a new Commit with the given name and ID .
2794	NewCommitProvenance creates a CommitProvenance
2795	NewFile returns a new File object
2796	CreateRepo creates a new repository
2797	InspectRepo returns information about a repository .
2798	ListRepo returns a list of all repositories
2799	DeleteRepo deletes a repository
2800	BuildCommit creates a new commit object
2801	StartCommitParent starts a new commit with the parentCommit
2802	FinishCommit creates a new commit
2803	InspectCommit returns information about a commit
2804	BlockCommit returns the commit information for the given commit ID .
2805	ListCommit lists all commits in the given repository .
2806	ListCommitF is a wrapper for ListCommit
2807	ListCommitByRepo lists all commits for a given repository
2808	CreateBranch creates a new branch
2809	InspectBranch returns information about a branch .
2810	ListBranch returns a list of all branches .
2811	SetBranch creates a new branch .
2812	DeleteBranch deletes a branch
2813	DeleteCommit deletes a commit
2814	FlushCommit invokes the pfs . FlushCommit API .
2815	FlushCommitF invokes the given function with the given function .
2816	FlushCommitAll invokes the FlushCommit function .
2817	SubscribeCommit sends a subscription to the PFS API
2818	SubscribeCommitF subscribes to the given function and passes the given function to the given function .
2819	PutObjectAsync returns a pointer to a PutObjectWriteCloserAsync object .
2820	PutObject implements the APIClient interface .
2821	PutObjectSplit is a part of the APIClient interface .
2822	GetObject retrieves the object with the given hash .
2823	GetObjectReader returns a reader for the object with the given hash .
2824	GetObjects returns the objects for the given hashes .
2825	TagObject tags an object with the given hash .
2826	ListObject calls f on all objects in the cluster
2827	InspectObject returns the ObjectInfo for the given hash .
2828	GetTag retrieves the tagged tag .
2829	GetTagReader returns a reader for a tag
2830	ListTag calls the function f for all tags
2831	Compact compacts an empty object
2832	NewPutFileClient creates a new PFSClient .
2833	PutFileOverwrite is a wrapper for PutFileOverwrite .
2834	Close is part of the Client interface .
2835	CopyFile copies a file
2836	GetFile retrieves the contents of a file .
2837	GetFileReader returns a reader for a single file
2838	GetFileReadSeeker returns an io . ReadSeeker
2839	InspectFile returns information about a file in the current repository .
2840	ListFile lists all files in a repository .
2841	ListFileHistory lists file history for a given commit ID
2842	ListFileF calls f for each file in the PFS
2843	Walk calls the given function for each file in the PFS
2844	DeleteFile deletes a file
2845	Write implements the PutObjectWriteCloser interface .
2846	Close closes the PutObjectWriteCloser interface .
2847	PrettyPrintVersionNoAdditional returns pretty print version information
2848	Recursive block comments
2849	errMissingField is used to create a missing field
2850	validateFields returns an error if the request is invalid .
2851	putConfig is used to write the configuration to the backend .
2852	getConfig retrieves the configuration from the storage .
2853	Serve serves the given server options
2854	NewPuller creates a new Puller
2855	PullTree pulls all objects from a hash tree
2856	Push pushes the contents of a commit to the given commit .
2857	PushObj pushes an object to the given commit
2858	PushFile pushes a file to osFile
2859	Dump dumps the grpc data to the io . Writer
2860	Profile sends a profile to the given io . Writer
2861	Binary returns a binary representation of the binary .
2862	RegisterCacheStats registers the cache stats
2863	wait waits for n times .
2864	RunWorkload runs the workers
2865	createRepo creates a new repo .
2866	advanceCommit will advance the cursor to the next commit .
2867	RandString generates a random string
2868	NewReader returns an io . Reader that reads bytes from the specified number of bytes .
2869	iterDir iterates over a directory at the given path .
2870	FSize returns the size of the hash tree .
2871	Diff performs a diff of a hash tree
2872	Serialize writes the hash tree to the given io . Writer .
2873	Deserialize takes an io . Reader and populates the bucket header .
2874	Copy copies the current hash tree to disk .
2875	Destroy closes the database hash tree .
2876	PutFileOverwrite is a shortcut for PutFile .
2877	PutDirHeaderFooter adds a header and footer to the hash tree .
2878	PutFileHeaderFooter implements the PutFileHeader interface .
2879	deleteDir is used to delete a directory
2880	NewReader returns a new Reader .
2881	Read returns the next merge node .
2882	NewWriter returns a new Writer writing to w .
2883	Write writes a merge node .
2884	Copy reads from r and writes to w .
2885	Index returns the serialized index entries .
2886	GetRangeFromIndex returns the lower and upper bound of the given index .
2887	NewFilter returns a set of keys that match numTrees .
2888	PathToTree returns the number of nodes in the given path .
2889	Merge merges rs into w .
2890	Hash hashes the contents of the hash .
2891	IsGlob returns true if the given string is a regular expression .
2892	GlobLiteralPrefix returns the literal prefix of the given pattern .
2893	GetHashTreeObject gets the hash tree for the given treeRef .
2894	GetHashTreeTag gets the hash tree tag for the given tag .
2895	PutHashTree creates a hash tree with the given tags .
2896	NewChildCursor returns a new child cursor
2897	Next moves the cursor to the next node .
2898	NewOrdered creates a new ordered tree .
2899	MkdirAll creates a directory recursively
2900	PutDir adds a directory to the ordered list .
2901	Serialize writes the sorted tree to the given io . Writer .
2902	NewUnordered creates a new unordered tree .
2903	Ordered returns a new ordered set of sorted entries .
2904	revokeUserCredentials revoke user credentials
2905	NewAPIServer returns a new APIServer
2906	String returns a string representation of the version
2907	getPipelineInfo fetches the pipeline info
2908	removeStr removes s from ss .
2909	PublicCertToPEM returns a PEM - encoded certificate
2910	GenerateSelfSignedCert generates a self signed certificate
2911	ActivateCmd returns the activate command
2912	DeactivateCmd returns the deactivate command
2913	LoginCmd returns the login command
2914	LogoutCmd returns the logout command
2915	WhoamiCmd returns the ocii command
2916	CheckCmd returns the command for check
2917	GetCmd returns the get command
2918	SetScopeCmd returns the set scope command
2919	ListAdminsCmd returns the list admins command
2920	ModifyAdminsCmd returns the cobra admin admins command
2921	GetAuthTokenCmd returns the oauth token command
2922	UseAuthTokenCmd returns the cobra command for use - auth token
2923	Cmds returns the cobra command for auth
2924	ParseScope parses a string into Scope .
2925	IsErrNotActivated checks if the error is a NotActivated error
2926	IsErrPartialActivated returns true if the error is a partial activation error .
2927	IsErrNotSignedIn returns true if the error is a NotSignedIn error .
2928	IsErrBadToken returns true if the error is a bad token error .
2929	IsErrNotAuthorized checks if the given error is due to an error message .
2930	IsErrInvalidPrincipal returns true if the error is a valid principal error .
2931	IsErrTooShortTTL returns true if the given error is longer than the TTL of the token .
2932	NewDatumFactory creates a DatumFactory
2933	NewCollection creates a new collection
2934	Path returns the full path of a key .
2935	getIndexPath returns the path to the given value .
2936	getMultiIndexPaths returns the index paths for the given value and key .
2937	Upsert adds a new value to the collection . If the value already exists it is overwritten .
2938	get returns the value for the given key .
2939	List implements the Collection interface .
2940	Watch returns a watcher for the collection .
2941	WatchByIndex returns a watcher for the given index .
2942	WatchOne returns a watcher for the given key
2943	WatchOneF starts a watcher for the given key
2944	Get returns a reader for the given key .
2945	Keys returns the keys of the cache .
2946	Clear removes all keys from the cache .
2947	NewHTTPServer returns a new HTTP server
2948	NewDeployServer returns a new deploy server
2949	Export exports images to the specified writer
2950	Import imports from an io . Reader
2951	DatumTagPrefix returns the prefix of a datum tag
2952	NewPFSInput returns a pointer to a new Input struct
2953	NewPFSInputOpts creates a new input struct with default options
2954	NewJobInput creates a new JobInput struct
2955	NewPipelineInput creates a new pipeline input .
2956	CreateJob creates a new job
2957	ListJob returns a list of all jobs in the pipeline
2958	ListJobF calls f for each job in the pipeline
2959	FlushJob invokes the given function and then calls the given function .
2960	FlushJobAll invokes FlushJobAll . FlushJobAll
2961	DeleteJob deletes a job
2962	StopJob stops a running job
2963	RestartDatum restarts the datumata
2964	ListDatum is part of the APIClient interface .
2965	ListDatumF calls the function f for each datum in the given job .
2966	InspectDatum is part of the APIClient interface .
2967	Next moves the cursor to the next message . It returns true if there was an error .
2968	InspectPipeline retrieves information about a pipeline
2969	ListPipeline returns the list of all pipelines
2970	DeletePipeline deletes a pipeline
2971	StartPipeline creates a new pipeline
2972	StopPipeline stops a pipeline
2973	RerunPipeline unregisters a pipeline
2974	CreatePipelineService creates a service
2975	GetDatumTotalTime returns the total time in bytes .
2976	Mount mounts the given mountPoint using the given options .
2977	NewBufPool creates a new pool .
2978	StorageRootFromEnv returns the storage root of the environment variable .
2979	BlockPathFromEnv returns the path to the block under the given block .
2980	NewGoogleClient creates a new Google Cloud Storage Client .
2981	NewGoogleClientFromSecret creates a new Google client from a secret file .
2982	NewGoogleClientFromEnv creates a new Google client from the environment .
2983	NewMicrosoftClientFromSecret creates a Microsoft client from a secret file
2984	NewMicrosoftClientFromEnv creates a new Microsoft client from the environment .
2985	NewMinioClientFromSecret creates minio client from secret file .
2986	NewMinioClientFromEnv creates a new minio client from the environment variables .
2987	NewAmazonClientFromSecret creates a new client from a secret file
2988	NewAmazonClientFromEnv creates a client from environment variables .
2989	NewClientFromURLAndSecret creates a new Client based on the given SecretStoreURL .
2990	ParseURL parses an object store URL .
2991	NewClientFromEnv creates a new client based on the environment variable
2992	NewExponentialBackOffConfig returns an exponential backoff .
2993	Close closes the underlying reader
2994	Close closes the underlying writer .
2995	IsRetryable checks if the error is retryable
2996	RunStdin runs the command with the given reader .
2997	RunIODirPath runs the specified command with the given ioObj .
2998	NewAuthServer creates a new auth server
2999	expiredClusterAdminCheck checks if the given user is in the current cluster .
3000	getOneTimePassword gets the OTP token for the given username and expiration time
3001	Hash a token
3002	getAuthToken extracts the token from the context
3003	canonicalizeSubjects ensures that all subjects are canonicalized .
3004	Matches tests if the actual string matches the regular expression .
3005	OneOfMatches tests if the actual strings match the regexp match .
3006	Equal asserts that two values are equal .
3007	NotEqual checks if two values are equal .
3008	oneOfEquals returns true if the two slices are equal
3009	NoneEquals fails if any of the expected values are equal .
3010	NoError fails if err ! = nil
3011	NoErrorWithinT is a utility function that runs f when the given function returns true .
3012	NoErrorWithinTRetry is the same as NoError except that it executes the given function .
3013	YesError fails if err == nil .
3014	NotNil asserts that the given object is nil .
3015	Nil checks if the given object is nil .
3016	False checks if the given value is false .
3017	NewSTM creates a new STM using the given function .
3018	NewDryrunSTM creates a new STM with the given apply function .
3019	newSTMRepeatable is a helper function that creates a new Txn .
3020	newSTMSerializable creates a new STM serializable object .
3021	newSTMReadCommitted creates a new STM read committed .
3022	commit is part of the stmt . Statement interface .
3023	Pipelines returns a collection of pipelines
3024	Jobs returns a collection of Etcd jobs
3025	NewTicker returns a new ticker
3026	nodeToMap converts an etcd node to a map .
3027	ServiceAccount returns the ServiceAccount object
3028	ClusterRole returns a ClusterRole object
3029	RoleBinding returns the RoleBinding object
3030	GetSecretEnvVars returns a list of environment variables
3031	PachdService returns a Service for the pachd service
3032	GithookService returns a Service object
3033	EtcdDeployment creates an etcd deployment for the given environment
3034	EtcdStorageClass returns the type of etcd storage class .
3035	EtcdVolume returns a PersistentVolume object
3036	EtcdNodePortService returns a Service for the etcd node port .
3037	EtcdHeadlessService returns a service that is responsible for managing the etcd cluster
3038	EtcdStatefulSet creates an instance of Etcd
3039	DashDeployment creates a Deployment
3040	DashService returns the service for the dashboard
3041	WriteSecret writes a secret object .
3042	GoogleSecret creates a GoogleSecret from a bucket and cred string .
3043	WriteDashboardAssets writes the AssetOpts to the Encoder .
3044	WriteLocalAssets writes the local assets to the given path .
3045	Write custom assets
3046	WriteAmazonAssets writes the assets to the given encoder .
3047	WriteGoogleAssets - encodes Google Cloud Storage assets .
3048	WriteMicrosoftAssets writes the manifest to the container
3049	Images returns the list of available images
3050	AddRegistry adds a registry to the registry
3051	withCanonicalRandomizationFactor sets the RandomizationFactor on the backoff .
3052	Reset resets the state to the initial interval .
3053	incrementCurrentInterval increments the current interval based on the configured MaxInterval .
3054	NewBlockAPIServer returns a new BlockAPIServer
3055	LocalStorage creates a local storage .
3056	Delete a job
3057	writeXML is used to write an XML response
3058	clean1_7HashtreePath cleans up the given path
3059	NewFromAddress creates a new APIClient from the given address .
3060	getUserMachineAddrAndOpts returns the address and options for the user agent
3061	NewInCluster creates a new APIClient from the given options
3062	Close closes the API connection .
3063	DeleteAll deletes all services
3064	SetMaxConcurrentStreams sets the maximum number of concurrent streams to use .
3065	WithCtx returns a shallow copy of the APIClient with the provided context
3066	NewDLock creates a new locker
3067	DatumID returns the SHA256 hash of the input data .
3068	runUserErrorHandlingCode runs the user error handling code
3069	HashDatum returns the sha256 hash of the data
3070	HashDatum15 returns the SHA256 hash of the data .
3071	Status returns the current status of the job .
3072	Cancel cancels a job .
3073	mergeStats merges two process stats .
3074	mergeChunk merges chunk data into chunk cache .
3075	IsCommitNotFoundErr returns true if the error is a commit not found error
3076	IsCommitDeletedErr returns true if the error is a commit deleted error
3077	IsCommitFinishedErr returns true if the error is a commit finished .
3078	IsRepoNotFoundErr returns true if the error is a repository error .
3079	IsBranchNotFoundErr returns true if the error is a branch not found error .
3080	IsFileNotFoundErr returns true if the error is a file not found error .
3081	Version returns the version
3082	validateRepoName returns an error if the name is invalid .
3083	newDriver creates a new driver
3084	inspectCommit returns CommitInfo for the given commit
3085	scratchCommitPrefix returns the prefix of a commit .
3086	scratch file prefix
3087	getTreeForFile returns the hash tree for the given file
3088	providerOnInput returns true if the list of provenance in the list of provenance .
3089	nodeToFileInfo converts a node into a FileInfo struct .
3090	fileHistory iterates over a file and calls f for each file in the given file .
3091	upsertPutFileRecords upserts records for given file .
3092	ReadRow reads a single row
3093	NewReporter creates a new Reporter
3094	ReportUserAction is used to report a user action .
3095	FinishReportAndFlushUserAction is a helper function that returns a function that can be used to flush the user action .
3096	Read implements io . Reader interface .
3097	ActivateCmd returns the activate command
3098	GetStateCmd returns the getstate command
3099	Cmds returns the cobra command for the enterprise
3100	NewConfiguration creates a new Configuration object
3101	Repos returns a collection of repositories
3102	PutFileRecords returns a collection of PutFileRecords
3103	Commits returns a collection of commits
3104	Returns a collection of branches
3105	Returns a collection of open commits
3106	NewDAG returns a new DAG .
3107	NewNode adds a new node to the DAG .
3108	Sorted returns the DAG of the DAG .
3109	Leaves returns the list of all the nodes in the DAG .
3110	Ancestors returns the list of ancestor nodes that are from from .
3111	Descendants returns the IDs of all nodes in the DAG .
3112	Gather returns all the children of this DAG .
3113	NewPortForwarder creates a new instance of PortForwarder
3114	Run starts a portforward for an app .
3115	RunForDaemon starts the port forwarder for the given localPort and remotePort .
3116	RunForSAMLACS is the same as RunForSAMLACS .
3117	RunForDashUI starts the dash UI for the given port .
3118	RunForDashWebSocket starts the dash web socket for the given port .
3119	RunForPFS starts the pfs process for the given port .
3120	RunForS3Gateway starts the port forwarder for S3 gateway .
3121	Lock locks the PID file
3122	Close shuts down the port forwarder
3123	Unmarshal unmarshals the event into val .
3124	UnmarshalPrev unmarshals the previous key and value into val .
3125	MakeWatcher creates a new watcher
3126	CheckType returns an error if the value of template is not valid
3127	NewPool creates a new endpoint
3128	Do will try to connect to the pool
3129	Close closes the pool
3130	buildImage builds a docker image
3131	pushImage is used to tag an image
3132	newMinioClient creates minio client .
3133	newMinioClientV2 - instantiates minio client .
3134	newMinioWriter creates a new minioWriter .
3135	Close closes the writer
3136	PipelineRepo returns the repository for a pipeline
3137	PipelineRcName returns the pipeline rc name
3138	GetRequestsResourceListFromPipeline gets the resource requests from the pipeline
3139	GetLimitsResourceListFromPipeline gets a resource list from a pipeline
3140	getNumNodes returns the number of parallelism
3141	GetExpectedNumWorkers returns the expected number of expected num workers
3142	GetExpectedNumHashtrees parses the hashtree spec as expected .
3143	FailPipeline deletes a pipeline
3144	JobInput creates a set of inputs from a pipeline
3145	PipelineReqFromInfo creates a CreatePipelineRequest from a PipelineInfo .
3146	NewPipelineManifestReader returns a new PipelineManifestReader
3147	NextCreatePipelineRequest returns the next CreatePipelineRequest .
3148	DescribeSyntaxError returns the original error if any .
3149	UpdateJobState updates the state of a job
3150	New returns a new UUID
3151	Code returns the HTTP status code .
3152	NewHTTPError creates a new HTTPError
3153	NewStorage creates a new Storage
3154	DeleteAll removes all objects from the storage .
3155	Chunk splits data into chunks .
3156	ChunkReader reads bytes from r and calls f for each chunk .
3157	NewStreamingBytesReader creates a new streaming bytes reader
3158	WriteToStreamingBytesServer writes data to the streamingBytesServer
3159	WriteFromStreamingBytesClient reads bytes from a StreamingBytesClient
3160	NewSidecarAPIServer returns a new api server
3161	NewEnterpriseServer creates a new enterprise server
3162	validateActivationCode validates the activation code
3163	Activate activates the given activation code .
3164	Deactivate is used to deactivate a user
3165	lookExtensions returns the full path extension for the given path and dir
3166	Start starts the process .
3167	CombinedOutput runs the command and returns stdout and stderr
3168	StdinPipe returns an io . WriteCloser that can be used to read from the process .
3169	StdoutPipe returns a pipe that will be connected to the process .
3170	dedupEnvCase removes duplicate keys from environment variables .
3171	InputName returns the name of the input .
3172	SortInput sorts the inputs by the input .
3173	InputBranches returns a slice of all the branches of the input .
3174	ValidateGitCloneURL checks if the given URL is valid .
3175	containsEmpty returns true if the slice contains empty strings
3176	NewAPIServer returns a new API server
3177	Ago converts a timestamp into a human - readable string .
3178	TimeDifference returns the difference between two timestamps
3179	Duration converts a proto . Duration to a human - readable string .
3180	InspectCluster returns information about the cluster
3181	Extract calls the function f on the Admin API
3182	ExtractAll returns all operations of the cluster .
3183	ExtractWriter is a convenience method to write objects to io . Writer
3184	ExtractURL extracts information from a given URL
3185	ExtractPipeline is part of the Admin API
3186	Restore restarts operations
3187	RestoreReader restores data from a given io . Reader
3188	RestoreFrom is part of the adminC interface .
3189	RestoreURL restarts the restore server
3190	IgnoreTypes is an option that accepts a list of types .
3191	AppendEllipsis implements the textList interface .
3192	IsType returns true if t is a function .
3193	NameOf returns the name of the function .
3194	PointerOf returns a pointer to a Pointer
3195	String returns the string representation of the EditScript .
3196	stats returns the stats of the EditScript .
3197	connect applies the path to the given destination point .
3198	EquateNaNs returns an option that can be used to filter NaNs
3199	Index returns the portion of the path .
3200	Key returns the key of the index .
3201	String returns a human - readable representation of the diff .
3202	FormatType formats the given type .
3203	formatMapKey returns a string representation of v .
3204	formatString converts a string into a quoted string .
3205	formatHex converts a uint64 to a hex string .
3206	formatPointer formats a pointer to a human - readable string .
3207	Visit adds the value to the map
3208	retrieveUnexportedField returns a reflect . Value at the field f .
3209	insert adds the given cname to the fieldTree .
3210	matchPrefix returns true if the field tree matches the given prefix .
3211	canonicalName returns the canonical name of a field .
3212	FilterPath returns an Option that applies the given function to filter entries .
3213	normalizeOption is used to normalize a single Option
3214	flattenOptions recursively flattens src into a slice of options
3215	CanFormatDiffSlice returns true if the value is valid .
3216	formatASCII converts a string to an ASCII string .
3217	coalesceAdjacentEdits takes a set of edits and returns a list of groups that match the edits .
3218	SortKeys sorts the keys in vs .
3219	FormatDiff returns a text representation of v .
3220	coalesceAdjacentRecords takes a reportRecord and returns the last statistics for each reportRecord .
3221	Diff returns the difference of two values .
3222	statelessCompare implements stateless . StatelessCompare .
3223	sanitizeValue returns a new reflect . Value if v is non - nil .
3224	Check checks if the given path is a recursive transform .
3225	makeAddressable returns a reflect . Value of v .
3226	Marshal implements the Visitor interface for Field .
3227	String returns a string representation of the field .
3228	Set sets the tag s value .
3229	Inject implements opentracing . TextMapPropagator
3230	Extract implements opentracing . TextMapPropagator
3231	ToLogRecord converts LogData to a LogRecord .
3232	New returns a new MockTracer
3233	StartSpan is a mock
3234	RegisterInjector registers an injector for a given format .
3235	RegisterExtractor registers an extractor for a given format .
3236	Inject injects a carrier into the mock
3237	Extract is a mock
3238	ContextWithSpan returns a new context with the given span .
3239	Set adds a tag to the span .
3240	Set adds a tag to the span .
3241	Set sets a bool tag
3242	SetString adds a string tag to the span .
3243	EmitString emits a string value
3244	EmitLazyLogger implements the MockKeyValue interface
3245	RunAPIChecks runs the test suite
3246	CheckBaggageValues returns an APICheckOption that sets the baggage values for the request .
3247	CheckExtract specifies whether or not to extract a certificate from the server .
3248	CheckInject specifies whether the check should be injected .
3249	CheckEverything returns an APICheckOption that can be used to check whether there are any baggage
3250	UseProbe configures the APICheckSuite .
3251	WithBaggageItem adds a baggage item to the span context
3252	Tags returns a copy of the span tags
3253	Tag returns the value associated with a key
3254	Logs returns a copy of the log records
3255	Context returns the span context
3256	SetTag sets a tag
3257	SetBaggageItem updates the span context
3258	BaggageItem returns the value for the given key
3259	Finish records the span .
3260	FinishWithOptions implements opentracing . Span . FinishWithOptions
3261	String returns a string representation of the MockSpan
3262	LogFields is part of the span . Span interface .
3263	logFieldsWithTimestamp adds a log entry to the log record
3264	LogKV logs a span
3265	LogEvent logs an event
3266	LogEventWithPayload logs an event with a custom payload
3267	SetOperationName sets the operation name
3268	registersDirPath returns the path to the registries directory
3269	loadAndMergeConfig loads a registryConfiguration from a given directory
3270	ParseReference parses a string into an ImageReference
3271	NewReference creates a new OpenShift reference
3272	CheckAuth checks if auth is valid
3273	doHTTP performs a HTTP request
3274	detectPropertiesHelper tries to detect the properties of the docker client .
3275	detectProperties returns true if docker is detected .
3276	getExtensionsSignatures retrieves the list of extensions for the given manifest .
3277	NewTransport creates a new http . Transport
3278	readRegistryConf reads the config file
3279	GetRegistries returns the registry s registries
3280	GetInsecureRegistries returns all insecure registries
3281	RegistryConfPath returns the system registries conf path
3282	NewOptionalBool returns an OptionalBool
3283	changeState changes the state of this policy context .
3284	Destroy destroys the policy context .
3285	policyIdentityLogName returns the log name for the image reference
3286	RequirementsForImageRef returns the requirements for the given image reference
3287	ParseImageName parses an image name into an ImageReference
3288	BlobInfoFromOCI1Descriptor creates a BlobInfo from OCI . Descriptor
3289	OCI1FromManifest returns an OCI1 struct
3290	OCI1FromComponents creates OCI1 from the OCI spec
3291	newReference creates a DockerReference from a reference .
3292	tagOrDigest returns the digest of a reference
3293	updateEmbeddedDockerReference ensures that the source image is present in the source manifest .
3294	isTTY returns true if w is a TTY .
3295	copyUpdatedConfigAndManifest copies the contents of the source to the updated image .
3296	createProgressBar creates a progress bar .
3297	copyConfig copies the image config to the local filesystem .
3298	diffIDComputationGoroutine computes the DiffID for the layerStream .
3299	computeDiffID computes the digest for the given stream .
3300	compressGoroutine is a wrapper around gzip . PipeWriter
3301	newDockerClient returns a new docker client .
3302	defaultPolicyPath returns the path to the default policy .
3303	NewPolicyFromFile creates a policy from a file
3304	NewPolicyFromBytes creates a policy from JSON data .
3305	newPolicyRequirementFromJSON creates a PolicyRequirement from JSON data .
3306	newPRSignedBy creates a new instance of PRSignedBy .
3307	newPRSignedByKeyPath creates a new PRSignedBy object .
3308	NewPRSignedByKeyPath creates a new PolicyRequirement based on the given key path .
3309	newPRSignedByKeyData creates a new PRSignedBy object .
3310	NewPRSignedByKeyData creates a new PolicyRequirement based on the provided key data .
3311	IsValid returns true if the key type is valid
3312	newPRSignedBaseLayer creates a new instance of a PRSignedBaseLayer .
3313	newPolicyReferenceMatchFromJSON creates a PolicyReferenceMatch from JSON data .
3314	newPRMExactReference creates a new PRMExactReference .
3315	newPRMExactRepository creates a new prmExactRepository .
3316	newImageSource creates a new storage image source .
3317	getBlobAndLayerID returns a ReadCloser for the given blob info .
3318	computeID computes the ID for a manifest
3319	PutManifest adds the manifest to the storage
3320	PutSignatures stores the signatures in the storage .
3321	newImage creates a new image
3322	newImageSource creates a new image source
3323	LoadManifestDescriptor loads the manifest for the given image reference
3324	Close cleans up the temporary directory
3325	append adds a string to the set .
3326	isMultiImage checks if the given image is multi - image
3327	lockPath locks the given path .
3328	unlockPath unlocks the given path .
3329	view opens a read - only view of the cache
3330	update is used to update a cache entry
3331	uncompressedDigest returns the most recent digest for the given digest .
3332	appendReplacementCandidates appends replacement candidates to candidates .
3333	indexExists checks if the index exists
3334	createSignature creates a signature from a manifest
3335	ParseReference parses a string into an ImageReference
3336	NewReference creates a new image reference
3337	getIndex returns the image s index
3338	LoadManifestDescriptor loads the manifest descriptor
3339	blobPath returns the full path to the blob directory
3340	SignDockerManifest signs the manifest with the specified mechanism
3341	VerifyDockerManifestSignature verifies the signature of the unverified manifest against the expected signature .
3342	newOpenshiftClient creates a new openshift client for the specified reference .
3343	doRequest performs a request
3344	getImage retrieves a single image
3345	convertDockerImageReference converts a docker reference to a string
3346	ensureImageIsResolved ensures that the image stream is resolved
3347	newImageDestination creates a new OpenShift image destination
3348	newUntrustedSignature creates a new untrustedSignature object .
3349	MarshalJSON returns the JSON encoding of the untrustedSignature .
3350	UnmarshalJSON implements json . Unmarshaler
3351	verifyAndExtractSignature verifies that the signature was signed by the given mechanism .
3352	RewriteReference attempts to rewrite the given reference to the Endpoint if it matches the given prefix
3353	getV1Registries creates a list of registry entries from the config file
3354	getConfigPath returns the system config path
3355	GetRegistries returns the configured registry entries
3356	readRegistryConf reads the config from disk
3357	Manifest implements ImageManifest .
3358	ConfigUpdate updates the config of the tarball reference
3359	parseImageAndDockerReference parses the given image and s2 and s2 and s2 and s2 and returns the reference .
3360	parseDockerReferences parses two docker images and returns them .
3361	ListNames returns the names of all registered transports .
3362	NewReference creates a new ImageReference .
3363	signaturePath returns the path to the manifest
3364	ValidateImageName validates the given image name .
3365	SplitPathAndImage splits a path and returns the original image
3366	ValidateOCIPath validates the OCI path
3367	ValidateScope returns an error if the scope is invalid .
3368	BlobInfoFromSchema2Descriptor converts a schema2Descriptor to a BlobInfo .
3369	Schema2FromManifest creates a Schema2 from a manifest
3370	Schema2FromComponents creates a new Schema2 from a list of components .
3371	SetAuthentication sets the authentication credentials for a docker client
3372	RemoveAuthentication removes authentication from the context
3373	RemoveAllAuthentication removes all authentication settings from the docker daemon
3374	readJSONFile reads a JSON file from a JSON file
3375	modifyJSON modifies the docker config file
3376	findAuthentication is a helper function to find the auth credentials for a given docker file .
3377	NewDestination creates a new Destination .
3378	AddRepoTags adds a list of repository tags to the destination .
3379	writeLegacyLayerMetadata writes the layer metadata to the destination .
3380	sendSymlink sends a symlink to the destination .
3381	sendBytes sends the given bytes to the destination .
3382	sendFile copies the contents of the given stream to the destination .
3383	Commit closes the destination .
3384	imageMatchesRepo returns true if the image matches the repository name .
3385	resolveImage attempts to resolve the image referenced by this reference .
3386	Transport returns the transport for the image reference .
3387	StringWithinTransport returns a string representation of the storage reference
3388	PolicyConfigurationNamespaces returns a list of namespaces that can be used to store the policy configuration .
3389	GzipDecompressor returns a gzip . ReadCloser that reads from r .
3390	Bzip2Decompressor returns an io . ReadCloser that reads from r .
3391	XzDecompressor returns an io . ReadCloser that decompresses r .
3392	DetectCompression returns the decompressor for the input .
3393	newImageDestination creates a new ImageDestination for the given docker reference .
3394	mountBlob attempts to mount a blob from a repository
3395	bicTransportScope creates a BICTransportScope from a DockerReference .
3396	newBICLocationReference creates a BICLocationReference from a dockerReference .
3397	parseBICLocationReference parses a BICLocationReference from a BICLocationReference .
3398	NewSourceFromStream creates a new source from a tar stream
3399	readTarComponent reads a tar component
3400	ensureCachedDataIsPresent checks if the manifest is present in the source .
3401	loadTarManifest loads the manifest from the source
3402	Close removes the tar file .
3403	newImageDestination creates a new ImageDestination object .
3404	imageLoadGoroutine is a thread - safe version of imageLoad
3405	NewReference creates a new image reference
3406	createOCIRef creates a reference to an OCI reference
3407	createUntarTempDir unpacks the temp directory at the specified image reference .
3408	restructivelyPrioritizeReplacementCandidatesWithMax takes a slice of candidates and inserts them into a slice of BICReplicates that are less than maxCandidates .
3409	newImageDestination creates a new ImageDestination object .
3410	resolveExistingPathToFullyExplicit is used to resolve an absolute path to the given path
3411	newImageDestination creates a new imageDestination .
3412	isDirEmpty returns true if the given directory is empty .
3413	removeDirContents removes all the contents of the given directory
3414	GetRepositoryTags fetches the tags for the given image reference .
3415	DefaultCache returns a BlobInfoCache for the given context .
3416	uncompressedDigestLocked returns the digest for the given digest or nil if noDigest is found .
3417	Close closes the temporary directory .
3418	PutManifest writes the manifest to the destination
3419	Commit writes the unpacked image to disk .
3420	tarDirectory copies files from src to dst .
3421	ParseStoreReference converts a reference to a storage reference .
3422	chooseDigestFromManifestList returns the digest for the given image .
3423	ChooseManifestInstanceFromManifestList selects an image from the manifest list
3424	manifestSchema1FromComponents creates a generic manifest schema for the given components .
3425	manifestDigest returns the digest of the image referenced by the reference . If instanceDigest is nil the instanceDigest is returned .
3426	deleteImage deletes an image .
3427	Schema1FromComponents creates a Schema1 from a list of components .
3428	initialize initializes the Schema1 structure
3429	ToSchema2Config converts the schema1 configuration to a Schema2Config
3430	Digest returns the digest of the manifest .
3431	MatchesDigest returns true if the digest matches the expected digest .
3432	NormalizedMIMEType returns the normalized MIMEType normalized media type .
3433	FromBlob creates a manifest from a manifest
3434	NewReference returns a new ImageReference for the given path
3435	layerPath returns the path to the layer path for the given digest .
3436	signaturePath returns the full path to the signature file .
3437	New creates a new pool
3438	NewFunc creates a new pool with a closure .
3439	ProcessTimed adds a job to the pool if it has timed out
3440	SetSize sets n workers to n .
3441	GetSize returns the number of workers in the pool
3442	TL returns the left corner of the rectangle .
3443	BR returns the bottom of the rectangle .
3444	CVBox returns the box s CvBox2D .
3445	Points returns the points of the box .
3446	FOURCC computes the FOURCC color .
3447	Merge merges two images into dst .
3448	Split takes a copy of the image and produces a copy of it .
3449	AddWeighted adds the src to the dst image .
3450	And computes the union of two images .
3451	AndWithMask computes the difference between two images .
3452	AndScalar adds a scalar value to the destination image .
3453	AndScalarWithMask adds a scalar value to the destination image .
3454	Or computes the union of two images
3455	OrWithMask computes the union of two images .
3456	OrScalar performs the OrScalar operation .
3457	OrScalarWithMask performs a linear comparison between the value and dst mask .
3458	AddWithMask adds the src to the destination .
3459	AddScalar adds a scalar value to the image
3460	AddScalarWithMask adds a scalar value to the dst image .
3461	Subtract performs a subtract between two images
3462	SubtractWithMask subtracts from src to dst .
3463	SubScalar subscall scalar
3464	SubScalarWithMask subtracts value from src to dst .
3465	SubScalarRev subtracts a scalar value from src to dst
3466	SubScalarWithMaskRev subtracts the value from src to dst .
3467	AbsDiff computes the difference between two images .
3468	AbsDiffScalar computes the absolute difference between src and dst .
3469	MeanStdDevWithMask returns the mean and standard deviation of src .
3470	CreateSeq creates a new sequence .
3471	Push pushes an element onto the queue .
3472	Pop removes an element from the queue .
3473	PushFront inserts a new element at the front of the queue .
3474	PopFront removes the first element from the queue .
3475	GetElemAt returns the element at the given index .
3476	RemoveAt removes the value at index from seq .
3477	Delay sets the amount of time to wait before .
3478	BackOffDelay returns the delay for n bytes .
3479	Error implements the error interface .
3480	Arguments adds arguments to the request
3481	BodyString is a syntax for the request .
3482	BodyBytes is a syntax for the request .
3483	Body sets the request body .
3484	Option adds an option to the request
3485	Header adds a header to the request .
3486	Send sends the request
3487	Exec sends the request to res . If res is nil the response will be decoded .
3488	Next returns the next message
3489	Cancel closes the subscription .
3490	FileList lists all objects in a shell
3491	Cat returns the stdout of a command
3492	List returns a list of links
3493	Pin pins a directory
3494	Pins returns a map of pinned pins
3495	Version returns the version and commit string .
3496	SwarmPeers returns the list of connected peers
3497	SwarmConnect attempts to connect to a remote address
3498	DagPutOptions creates a DagPutSettings with the given options .
3499	Pin specifies the pin to use .
3500	Kind sets the DagPut option .
3501	Hash sets the hash of the dag .
3502	AddDir adds a new directory to the shell
3503	Publish publishes a node to the shell
3504	PublishWithDetails publishes a new content with the specified content hash
3505	ResolveValue resolves the value for the PlanValue .
3506	GenerateQuery generates a query based on the given bind variables .
3507	EncodeValue encodes a value to a buffer .
3508	Lex scans the next token .
3509	skipStatement skips statements
3510	reset resets the tokenizer to zero .
3511	Preview returns the selected statement .
3512	NewPlanValue builds a PlanValue from an Expr .
3513	StringIn checks if a string is in a list of strings
3514	NewTrackedBuffer creates a new TrackedBuffer .
3515	NewStringArena returns a new instance of StringArena .
3516	NewString returns a new string appended to the buffer .
3517	SpaceLeft returns the number of space left in the buffer
3518	ParseStrictDDL parses a DDL statement .
3519	ParseNext parses the next token .
3520	Append writes the SQLNode to buf .
3521	ExprFromValue creates an Expr from a sql . Value .
3522	Backtick converts a string into a backtick .
3523	NewValue creates a new Value .
3524	String returns a string representation of v .
3525	EncodeSQL encodes the Value into a SQL statement .
3526	EncodeSQL generates the SQL for InsertValues .
3527	EncodeSQL generates the SQL for the tupleEqualityList .
3528	WalkStatement normalizes the statement .
3529	WalkSelect normalizes the SQLNode
3530	BindVariablesEqual compares two maps of bind variables .
3531	New creates a new JWTMiddleware
3532	HandlerWithNext checks if the request is valid
3533	FromAuthHeader extracts the token from the authorization header
3534	FromParameter returns a TokenExtractor that extracts token from the query
3535	FromFirst returns a TokenExtractor that extracts token from the request
3536	getHelloPacket returns the rpc packet for all topics
3537	NewFloodsubWithProtocols creates a new instance of the FloodSub router .
3538	NewFloodSub creates a new instance of PubSub .
3539	NewLRUBlacklist creates a Blacklist with the specified capacity .
3540	NewRandomSub returns a new PubSub router
3541	NewGossipSub creates a new GossipSub router
3542	NewPubSub creates a new PubSub server .
3543	WithValidateThrottle is a functional option for Option .
3544	WithBlacklist sets the blacklist for all messages
3545	handleRemoveSubscription is used to cancel a subscription
3546	handleAddSubscription adds a new subscription .
3547	announce sends an announce message to all peers .
3548	notifySubs sends a message to all subscribed subscribers .
3549	seenMessage returns true if we ve seen a message .
3550	subscribedToMsg checks if the given message is subscribed to .
3551	msgID returns a unique identifier for a message
3552	pushMsg propagates a message to the peer .
3553	validate checks that the topicVal is valid .
3554	validateSingleTopic is used to validate a single message
3555	getValidators returns the set of topics validators for this message
3556	Subscribe to given topic
3557	SubscribeByTopicDescriptor creates a subscription for the given topic descriptor .
3558	GetTopics returns a list of all topics .
3559	Publish a message to the host
3560	ListPeers returns a list of all known peers .
3561	WithValidatorTimeout sets the timeout for validator
3562	WithValidatorConcurrency is a functional option for Validator .
3563	RegisterTopicValidator registers a validator .
3564	UnregisterTopicValidator unregisters topic validator
3565	DefaultMetricPrefix returns the default metric prefix for the given name and tags .
3566	MetricWithPrefix generates a metric with the given prefix and tags
3567	NewClient creates a new client
3568	Call makes an RPC call .
3569	CallPeer makes a call to a remote peer
3570	CallSC makes a RPC call .
3571	ReadResponse creates an http . Response from an ArgReadable .
3572	write headers
3573	ResponseWriter creates a http . ResponseWriter from a response .
3574	ReadHeaders reads headers from the given reader .
3575	NewTCPRawRelay creates a new TCP Relay .
3576	NewClient creates a new hyperbahn client
3577	Advertise advertises the client .
3578	Handle handles an InboundCall .
3579	Start starts the tchannel server
3580	Port returns the port of the server
3581	SetStrategy sets the score for each peer .
3582	Add adds a new peer to the list of peers with the given hostPort . If the peer is already in the list it returns the newly added peer .
3583	GetNew returns a new peer from the peer list .
3584	Get returns the next available peer .
3585	Remove removes peer from the list .
3586	Copy returns a copy of the peer list
3587	Len returns the number of peers in the heap .
3588	exists returns the score for the given hostPort
3589	getPeerScore returns the score for the given peer
3590	onPeerChange is called when a peer is updated .
3591	updatePeer updates the peer s score .
3592	getConn returns the connection at index i .
3593	GetConnection is used to get a new connection
3594	getConnectionRelay returns the active connection . If no active conn is available it will be retried .
3595	canRemove returns whether or not the peer has been removed .
3596	addConnection adds a connection to the peer .
3597	removeConnection removes the given connection from the list
3598	connectionCloseStateChange is called when a connection is closed
3599	Connect to the remote peer
3600	BeginCall starts a new outbound call .
3601	NumConnections returns the number of inbound connections
3602	NumPendingOutbound returns the number of outbound connections .
3603	isEphemeralHostPort returns true if the given hostPort is ephemeral .
3604	Get returns the value for the given key .
3605	Set sets a single key .
3606	ClearAll clears all keys .
3607	NewChannel creates a new channel .
3608	Serve starts the ChannelClient .
3609	ListenAndServe starts listening on the given port .
3610	Register adds a handler to the channel
3611	PeerInfo returns the LocalPeerInfo for this channel .
3612	GetSubChannel returns a channel for the given service name .
3613	serve accepts connections from the l . l . l . l . l . l . l . mu .
3614	Ping sends a ping to the channel
3615	StatsTags returns a map of common stats tags
3616	Connect creates a new connection to the channel .
3617	ExchangeUpdated is called when the connection was updated
3618	updatePeer is called when a peer is updated .
3619	addConnection adds a connection to the channel . Returns true if the connection is active .
3620	removeClosedConn removes the given connection .
3621	connectionCloseStateChange is called when a connection is closed .
3622	State returns the state of the channel .
3623	NewReader returns a new Reader .
3624	ReadUint16 reads a uint16 from the reader
3625	ReadString reads n bytes from the reader
3626	ReadLen16String from the reader
3627	Register implements the TChannel interface .
3628	Run sets up the behavior for testing .
3629	Get returns a new relayTimer from the pool
3630	Put adds a timer to the pool .
3631	Start starts the timer with the given duration .
3632	Release adds the timer to the pool .
3633	NewLogger returns a Logger that writes to the given writer .
3634	NewTCPFrameRelay creates a TCP frame with the given destination and modifier .
3635	tallyTags returns a map of known tags to tally .
3636	Isolated is used to start the isolated process
3637	Isolated returns true if the subchannel is isolated
3638	Register registers a handler for the given method name .
3639	GetHandlers returns all registered handlers
3640	StatsTags returns the tags for this SubChannel .
3641	registerNewSubChannel registers a new SubChannel with the given serviceName .
3642	get a SubChannel from the map
3643	getOrAdd returns a SubChannel if it already exists in the map
3644	Discover returns the host ports for a given service name .
3645	Start starts the server .
3646	listen initializes the listener
3647	WriteRequest writes the http . Request to an argument .
3648	ReadRequest creates an http . Request from an argument .
3649	NewReadBufferWithSize returns a new ReadBuffer with the specified size .
3650	ReadByte implements the io . ByteReader interface .
3651	ReadBytes reads n bytes from the buffer .
3652	ReadString reads n bytes from the buffer
3653	ReadUint16 reads a uint16 from the buffer
3654	ReadUint32 reads a uint32 from the buffer
3655	ReadUint64 reads a uint64 from the buffer
3656	ReadUvarint reads a varint from the buffer
3657	ReadLen8String from the buffer
3658	ReadLen16String from the buffer
3659	FillFrom fills the buffer with n bytes from the buffer .
3660	Wrap implements the ReadBuffer interface .
3661	WriteSingleByte implements the io . Writer interface .
3662	WriteBytes writes the given bytes to the buffer .
3663	WriteUint16 writes a uint16 to the buffer .
3664	WriteUint32 writes n bytes to the buffer .
3665	WriteUint64 writes n bytes to the buffer .
3666	WriteUvarint writes a uint64 to the buffer .
3667	WriteString writes s to the buffer .
3668	WriteLen8String writes a string to the buffer .
3669	WriteLen16String writes a string to the buffer .
3670	DeferByte returns a byte that can be used to defer the next call to the buffer .
3671	DeferBytes returns a byte slice which will be written to the buffer .
3672	FlushTo flushes the buffer to the given io . Writer .
3673	Reset resets the contents of the buffer .
3674	Wrap implements the io . Writer interface .
3675	Update updates the value of the uint16 reference
3676	Update adds n to the uint32 value .
3677	Update adds n to the uint64 value .
3678	Update the contents of b into b
3679	UpdateString updates the contents of a string
3680	ArgReader returns an argument reader .
3681	finish updates the checksum .
3682	newWritableChunk creates a new writable chunk .
3683	writeAsFits returns the number of bytes written to the chunk .
3684	newFragmentingWriter returns a new fragmentingWriter .
3685	ArgWriter implements the ArgWriter interface .
3686	BeginArgument is part of the Writer interface .
3687	Write implements the io . Writer interface .
3688	Flush flushes the current chunk .
3689	Close implements the io . Writer interface .
3690	handleCallRes handles the call res frame .
3691	Arg2Reader returns an argument reader .
3692	handleError processes an error frame
3693	doneReading is called when the request is finished .
3694	newFragment creates a new fragment .
3695	flushFragment sends the given fragment to the server .
3696	failed is used to mark the error as failed .
3697	arg1Reader returns an argReader that can be used as an argument .
3698	arg2Reader returns an argument reader .
3699	arg3Reader returns an arg3 reader that can be used to parse arguments .
3700	argReader returns an argument reader .
3701	recvNextFragment gets the next fragment from the server .
3702	releasePreviousFragment releases the previous fragment .
3703	failed marks the reader as failed .
3704	parseInboundFragment parses an inbound fragment .
3705	NewContext creates a new TChannel context .
3706	WithHeaders returns a context with the given headers
3707	healthCheck is a long running routine that runs the given connection .
3708	SetTimeout sets the timeout
3709	AddHeader adds a new header to the context .
3710	SetHeaders sets the headers of the request
3711	SetConnectTimeout sets the connection timeout
3712	SetRetryOptions sets retry options
3713	SetTimeoutPerAttempt sets the timeoutPerAttempt
3714	SetParentContext sets the parent context
3715	Build constructs a ContextWithHeaders .
3716	overrideHeaders overrides the headers from the call options .
3717	Read reads data from the reader .
3718	ReadJSON reads a JSON value from the input .
3719	NewArgWriter returns a new ArgWriteHelper
3720	Write implements the io . Writer interface .
3721	WriteJSON writes JSON data to the writer .
3722	Register registers a new PPP - RPC handler .
3723	Count returns the total number of items
3724	Get returns the relay item identified by id .
3725	Add adds a relay item to the list .
3726	Entomb adds a new relay item to the list of items identified by id .
3727	NewRelayer creates a new Relayer
3728	Relay sends a frame to the peer .
3729	Receive sends a frame to the server .
3730	handleNonCallReq handles a single non - call frame
3731	addRelayItem creates a new relay item
3732	failRelayItem attempts to fail the given relay item .
3733	WriteStruct writes a Thrift . TStruct to the given writer .
3734	ReadStruct reads a Thrift . TStruct from the reader .
3735	EnsureEmpty returns nil if r is empty .
3736	NewServer creates a new server
3737	Advertise advertise node
3738	handleCallReqContinue is used to forward a call request to the peer
3739	dispatchInbound processes incoming incoming frames
3740	CallOptions converts InboundCall to CallOptions .
3741	Response returns the response .
3742	SendSystemError sends an error to the connection .
3743	SetApplicationError sets the application error state .
3744	Arg2Writer returns an ArgWriter
3745	doneSending is called when a response is sent .
3746	newState creates a new state .
3747	rootType returns the root type for the given thrift type .
3748	checkInclude returns the state of the given thrift type .
3749	isResultPointer returns true if the type is a pointer to a result pointer .
3750	goType returns the Go type name for the given thrift type .
3751	goTypePrefix returns the Go type prefix for the given thrift type .
3752	NewContext creates a new context . Context .
3753	newIncomingContext creates a new context . Context .
3754	CurrentCall returns the current call .
3755	New returns a new rand . Rand using the given seed .
3756	Health implements meta . Health .
3757	Headers returns the request headers
3758	ResponseHeaders returns the response headers
3759	SetResponseHeaders sets the response headers on the context .
3760	Child returns a copy of the context ctx .
3761	Wrap wraps ctx into a ContextWithHeaders .
3762	WrapWithHeaders returns a new ContextWithHeaders with the given map
3763	WithoutHeaders returns a new context with all headers removed .
3764	Notify implements notify . Notify .
3765	Forward a frame
3766	Retrieve a single frame from the exchange .
3767	RecvPeerFrameOfType gets a single frame from the server .
3768	Shutdown the message exchange .
3769	newMessageExchangeSet creates a new messageExchangeSet .
3770	addExchange adds a new exchange to the set .
3771	newExchange creates a new messageExchange for the set
3772	deleteExchange deletes an existing exchange from the set .
3773	removeExchange removes an existing exchange from the set .
3774	expireExchange removes a exchange from the set .
3775	Forward peer frame
3776	copyExchanges returns a copy of all of the exchanges in the set .
3777	stopExchanges stops all exchanges .
3778	NewFrame creates a new frame
3779	ReadBody reads the body from the given header .
3780	WriteOut writes the frame to w .
3781	CanRetry returns true if the given error is retryable .
3782	HasRetries returns true if the given error is retried
3783	SinceStart returns the duration since the last request .
3784	AddSelectedPeer adds the selected peer to the list of selected peers
3785	RunWithRetry runs the given function with the retry options
3786	ChecksumSize returns the size of the checksum type .
3787	New returns a new Checksum instance .
3788	parseTemplates parses tchannel templates
3789	NewStringSliceFlag returns a new string slice flag .
3790	withStateFuncs returns a copy of the template s global state
3791	IntrospectOthers returns the state of all channels in the channel .
3792	ReportInfo returns information about the channel .
3793	IntrospectState returns a map of PeerRuntimeState
3794	IntrospectState returns the runtime runtime information for all sub channels .
3795	IntrospectState returns the runtime runtime information .
3796	IntrospectState returns information about the connection .
3797	IntrospectState introspects the Relayer runtime state .
3798	IntrospectState returns the RelayItemSetState for the given name .
3799	IntrospectState returns the runtime information for this messageExchangeSet .
3800	NewContext creates a new TChannel context .
3801	WriteResponse converts an InboundCallResponse into a Response .
3802	Wrap wraps an InboundHandler with an InboundCall
3803	initFromOpenTracing injects a span into the span
3804	startOutboundSpan starts a new span .
3805	intToIP4 converts an IPv4 address to a net . IP
3806	servicePeerToHostPort converts a ServicePeer to a HostPort
3807	NewStatsdReporter creates a new statsdStatsd reporter .
3808	UnmarshalText implements the Unmarshaler interface for ToS .
3809	Push implements the heap . Interface .
3810	Pop implements heap . Interface .
3811	updatePeer adds the given peerScore to the heap .
3812	removePeer removes a peer from the heap .
3813	pushPeer adds a new peerScore to the heap .
3814	addPeer adds a new peer to the heap .
3815	NewClient creates a new TChanClient
3816	Add adds a new peer to the list
3817	Get returns the peer with the given hostPort
3818	WithTimeout sets the timeout
3819	Methods returns all methods registered with the service .
3820	InheritedMethods returns the list of methods inherited from this service .
3821	Arguments returns all the arguments for this method .
3822	ArgList returns a comma separated list of arguments
3823	CallList returns call list of arguments
3824	RetType returns the return type of the method .
3825	WrapResult adds a result to the result if the return mode is set
3826	ReturnWith returns the result with the given response name and error
3827	Declaration returns the string representation of the field
3828	startIdleSweep starts an inactiveSweep .
3829	start starts the idleSweep .
3830	Stop stops the sweep .
3831	ResolveWithGoPath returns the path to the given filename or an error if it is not found .
3832	setExtends sets the extends service .
3833	register a handler
3834	NewClient creates a new Client .
3835	ListenIP returns the IPv6 address of the listener .
3836	Close closes the listener .
3837	ReadArgsV2 reads the arguments from the ArgReadable .
3838	WriteArgs writes the arguments to the OutboundCall .
3839	Call sends an RPC call to the TChannel .
3840	CallSC sends an RPC call to the subchannel .
3841	CallV2 performs a V2 API call .
3842	NewRealRelay creates a new Relay
3843	NewServer creates a new server
3844	RegisterHealthHandler registers a health handler .
3845	Handle handles a request .
3846	MetricsKey returns the metric key for the error
3847	NewSystemError creates a new system error
3848	NewWrappedSystemError creates a new system error with the wrapped error
3849	Error returns the string representation of the error
3850	GetContextError converts error to ErrTimeout .
3851	GetSystemErrorCode returns the system error code if any
3852	ping sends a ping to the server .
3853	handlePingRes handles a ping frame
3854	handlePingReq processes a ping frame
3855	SendSystemError sends an error frame .
3856	connectionError logs the error from the server .
3857	withStateLock runs f in a goroutine .
3858	withStateRLock runs the given function with the state lock
3859	Read frames from the server
3860	Write frames to the network .
3861	hasPendingCalls returns true if any calls are pending .
3862	checkExchanges updates the state of the connection .
3863	closeNetwork closes the network connection .
3864	getLastActivityTime returns the last time of the connection .
3865	Validate validates the given service .
3866	logFailedRegistrationRetry logs the registration failure .
3867	initialAdvertise attempts to connect to the hyperbahn .
3868	Service returns the service name .
3869	TTL returns the duration of the request .
3870	SetTTL adds the given duration to the request .
3871	finishesCall returns true if f is an error .
3872	Flat returns a sorted list of unique strings .
3873	Map applies the provided function to each platformStrings .
3874	MapSlice applies the provided function to the map of platform strings .
3875	GetProtoConfig returns the proto configuration from the given config .
3876	MapExprStrings applies the given expression to the given bazel expression .
3877	FlattenExpr takes a bzl . Expr and returns the original expression .
3878	makePlatformStringsExpr returns a bzl . Expr for the platforms .
3879	String returns the string representation of the platform .
3880	Find returns the path to the workspace directory .
3881	runGazelle runs the gzel regression
3882	restoreBuildFilesInRepo restores all build files in the current directory .
3883	FixLoads fixes all known loads in the given file .
3884	fixLoad returns a new load that is not known to the given file .
3885	newLoadIndex returns the index of the first rule in the rules .
3886	removeLegacyGoRepository removes a go_repository file
3887	Compare compares two versions .
3888	ParseVersion parses a version string .
3889	EmptyFile creates a new empty file
3890	LoadWorkspaceFile loads the workspace data from the specified path .
3891	LoadMacroFile loads macros from a file .
3892	EmptyMacroFile creates a new empty file with the given path .
3893	LoadData loads and returns a parsed file .
3894	LoadWorkspaceData loads workspace data .
3895	LoadMacroData loads macros from the given data .
3896	ScanAST returns the AST for the given package .
3897	ScanASTBody scans the body of a file and returns the AST .
3898	MatchBuildFileName returns the name of the build file in the given directory
3899	SyncMacroFile syncs from a file
3900	macro name .
3901	Sync syncs all the files in the file .
3902	Format formats the given file .
3903	Save writes the file to the given path .
3904	HasDefaultVisibility returns true if all package rules have default_visibility set .
3905	NewLoad returns a Load object .
3906	Symbols returns the list of loaded symbols .
3907	Has returns true if symbol exists .
3908	Add adds symbol to the loader .
3909	Remove removes the symbol from the loader .
3910	Insert adds a load to the file at the given index .
3911	NewRule creates a new rule .
3912	SetKind sets the kind of the rule .
3913	AttrKeys returns a sorted list of attribute keys .
3914	Attr returns the RHS attribute for the given key
3915	AttrString returns the string value for the given key
3916	AttrStrings returns the string values for the given key .
3917	DelAttr deletes an attribute
3918	SetAttr sets an attribute on the rule
3919	PrivateAttrKeys returns a list of all private keys
3920	SetPrivateAttr sets a private attribute
3921	Insert adds a rule to a file .
3922	IsEmpty returns true if the rule is empty .
3923	CheckInternalVisibility returns the sanitized version of the internal package
3924	New creates a new label
3925	Rel returns a new label based on the provided repo and pkg .
3926	Equal returns true if this label equals other .
3927	Contains returns true if l is equal to other .
3928	generateFromPath generates a Go package from a given path .
3929	shouldCall returns true if the given rel is an update
3930	shouldUpdate returns whether or not the given rel should be updated
3931	shouldVisit returns true if we should visit the given rel .
3932	SquashRules squashes all rules in src to dst .
3933	runClient tries to connect to the given unix socket
3934	UpdateRepo returns a Repo for the given importPath .
3935	NewRemoteCache creates a new RemoteCache .
3936	Remote returns the remote and vcs for the given root .
3937	get returns the value for the given key
3938	ensure returns the value for the given key if it doesn t already exist .
3939	RelBaseName returns the base name for the given rel .
3940	Clone returns a deep copy of c .
3941	IsValidBuildFileName returns true if name is a valid build file name .
3942	check checks if the tagLine is valid .
3943	fileNameInfo returns the fileInfo for the given path .
3944	otherFileInfo returns information about the given file .
3945	protoFileInfo returns fileInfo for the given proto file .
3946	AddRule adds a rule to the index .
3947	Finish collects all the rules in the index .
3948	buildImportIndex populates the index map of importedAs .
3949	IsSelfImport returns true if the label is a self import
3950	applyKindMappings applies Kinds to load load .
3951	appendOrMergeKindMapping adds the given kind to the list of loadedKinds if it already exists .
3952	RuleName returns the name of the given names .
3953	buildPackages builds the list of packages from the given proto files .
3954	selectPackage returns the proto_library for the given map .
3955	generateProto creates a rule for the package .
3956	generateEmpty returns a slice of proto_library rules that match the regular files .
3957	ImportRepoRules imports repo rules into a set of rules .
3958	MergeRules merges generated rules into existing rules .
3959	GenerateRule generates a rule based on the repo .
3960	FindExternalRepo returns the path to the external repository for the given repository .
3961	ListRepositories returns a list of repositories for a rule
3962	migrateLibraryEmbed migrates the library attribute to embed a library attribute .
3963	migrateGrpcCompilers moves gRPC compiler rules to gRPC_library rules .
3964	squashCgoLibrary ensures that cgo_library rule has a default library rule
3965	removeLegacyProto removes any proto rules that are deprecated .
3966	removeLegacyGazlement removes a gazel library from a rule .
3967	selectPackage returns a single package from the given directory . If no package is found it returns the first error .
3968	AddBuiltin adds a custom resolver for the given kind .
3969	MappedKind adds the given kind to the resource resolver .
3970	Resolver returns the Resolver for the given rule .
3971	sortExprLabels sorts the labels of the Expr .
3972	checkRulesGoVersion checks if the rules_go version is compatible with the rules_go
3973	preprocessTags preprocess the generic tags
3974	setBuildTags validates build tags
3975	splitValue splits the given value into a slice of strings
3976	copyGoModToTemp copies the GoMod file to a temporary directory
3977	findGoTool returns the path to the go tool
3978	isBuildable returns true if the package is buildable .
3979	startServer starts the server
3980	watchDir starts a new directory and returns a cancel function .
3981	listDirs recursively walks the given directory and returns a list of all directories .
3982	shouldIgnore returns true if the given path should be ignored .
3983	recordWrite records whether the given path exists .
3984	getAndClearWrittenDirs returns all written dirs
3985	CombineHandlers combines multiple http handlers into one
3986	VerifyContentType returns a handler that matches the Content - Type header .
3987	VerifyMimeType returns a handler that matches the given MIME type .
3988	VerifyBasicAuth returns an http . HandlerFunc that verifies the given username and password .
3989	VerifyJSONRepresenting returns a http . HandlerFunc that handles JSON marshalling .
3990	Verify form params
3991	RespondWithProto returns an http . HandlerFunc that responds with a protobuf message .
3992	RegisterFailHandlerWithT registers a GomegaFailHandler .
3993	EventuallyWithOffset creates an AsyncAssertion with the specified offset .
3994	ConsistentlyWithOffset is a part of the Assertion interface .
3995	Expect returns an Assertion .
3996	Eventually is the same as AsyncAssertion .
3997	Consistently asserts that the actual value is consistent .
3998	TimeoutCloser wraps the given io . Closer with the given timeout .
3999	TimeoutReader returns an io . Reader that reads from r .
4000	TimeoutWriter returns an io . Writer that writes to w .
4001	Nested returns a nested error
4002	SetMockService sets the service
4003	FindMachineByIdOrAddress finds a machine by id and address
4004	Write implements the http . Flusher interface .
4005	Hijack implements the http . Hijacker interface .
4006	ListDeploys returns DeployData for given filter .
4007	AddAll adds all routes to the router .
4008	samlRequestTimeout extracts the timeout from the SAML request_timeout
4009	RegisterHandler registers a handler for the given path and method .
4010	RegisterHandlerVersion registers a new http . Handler
4011	Check runs all registered checkers .
4012	DiscoverRepositoryPath returns the repository path to the given directory
4013	OpenRepository opens a repository at the given path
4014	RemoteURL returns the URL for the named remote
4015	List lists all apps in the indexer .
4016	Apps returns an object that can list and get Apps .
4017	List lists all apps in the indexer for a given namespace .
4018	StreamJSONResponse streams JSON messages from a http . Response
4019	DropDatabase drops a database .
4020	Collection returns a collection
4021	SetLogger sets the logger .
4022	Error logs an error .
4023	Errorf logs a message
4024	Fatal logs a message .
4025	Debugf logs to target .
4026	GetStdLogger returns the target logger
4027	Namespace returns the name of the cluster
4028	recreateContainers is used to create containers with the specified nodes .
4029	checkProvisioner checks if the provisioner is valid
4030	checkDocker validates docker configuration
4031	checkScheduler returns an error if the scheduler is invalid .
4032	checkRouter validates the default router configuration
4033	Available returns true if the unit is available .
4034	Get returns the provisioner with the given name .
4035	Registry returns registered provisioners .
4036	Error implements the error interface .
4037	validateVersion returns true if the supported version is supported
4038	ReadTarget reads target file
4039	WriteTarget writes target to target file
4040	WriteOnTargetList writes a label to targets file
4041	Conn creates a new storage connection
4042	Apps returns the storage collection .
4043	PoolsConstraints returns the storage collection of pool_constraints .
4044	Users returns the storage collection of users .
4045	SAMLRequests returns a storage . Collection that stores SAML requests .
4046	AppLogCollection returns a storage collection for an app .
4047	CreateAppLogCollection creates the app log collection for the given app name .
4048	LogsCollections returns the collection of logs .
4049	ArchiveBuildCmds returns the build cmds for the specified archive
4050	ArchiveDeployCmds returns the command to deploy the given archive
4051	DeployCmds returns the command to deploy the unit agent
4052	runWithAgentCmds runs tsURU_unit_agent
4053	newApps returns a Apps
4054	Commit commits the container .
4055	processTags returns a slice of tags that are used in the given list of tags .
4056	aggregateContainersBy aggregates containers by matcher
4057	chooseNodeToAdd returns the node to be added to the list of nodes
4058	chooseContainerToRemove returns the id of the container to remove a container .
4059	Get returns a registered router by name .
4060	Default returns the router name .
4061	Store stores a router app
4062	TsuruV1 retrieves the TsuruV1Client
4063	Tsuru retrieves the TsuruV1Client
4064	NewAppInformer constructs a new informer for App type . Always prefer using an informer factory to get a shared informer instead of getting an independent one . This reduces memory footprint and number of connections to the server .
4065	NewFilteredAppInformer constructs a new informer for App type . Always prefer using an informer factory to get a shared informer instead of getting an independent one . This reduces memory footprint and number of connections to the server .
4066	Watch returns a watch . Interface that watches the requested apps .
4067	Patch applies the patch and returns the patched app .
4068	NewSharedInformerFactory creates a new instance of a sharedInformerFactory .
4069	NewFilteredSharedInformerFactory creates a new sharedInformerFactory .
4070	Proxy is not implemented
4071	UnbindUnit is used to unbind a unit
4072	Create creates a new plan .
4073	Remove a plan .
4074	ensureDefault adds default plans to the storage .
4075	DeleteInstance removes a service instance .
4076	ToInfo returns a description of the service instance .
4077	Update updates a service instance .
4078	BindApp binds an app to the service instance .
4079	BindUnit binds a unit to the service instance
4080	UnbindApp removes the application from the service instance .
4081	Status returns the status of the service instance .
4082	ProxyInstance proxies an instance to the production endpoint
4083	Inc increments an app s quota .
4084	SetLimit sets the limit for an app
4085	Set sets the inUse for an app
4086	Get returns the quota for an app
4087	RemoveImage removes an image from the registry
4088	RemoveAppImages removes the app s images
4089	Create creates a new platform
4090	List all platforms
4091	FindByName returns a platform by name
4092	Update updates a platform
4093	Remove a platform
4094	Rollback a platform image
4095	GetPoolByName gets a pool by name
4096	Manager returns the repository manager
4097	Register registers a repository manager .
4098	start starts the sync loop .
4099	Shutdown implements the bindSyncer interface .
4100	GetForProvisioner returns the builder for the given provisioner
4101	get returns a builder by name .
4102	Registry returns all registered builders .
4103	RegisterQueueTask adds a task to the queue .
4104	Apps returns a AppInformer .
4105	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new App .
4106	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new AppList .
4107	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new AppSpec .
4108	Write implements the io . Writer interface .
4109	ResetPassword resets the password for a user .
4110	addKnownTypes adds all known types to the scheme .
4111	Register a Shutdownable .
4112	Do invokes all registered shutdown handlers .
4113	ListImagesOrDefault gets the default images for a platform .
4114	MigrateAppsCRDs moves CRDs to CRD .
4115	Register registers a migration .
4116	RegisterOptional is a RegisterFunc that can be used to register a migration .
4117	Run runs the given args and returns an error if any .
4118	Units returns the units for the app
4119	MarshalJSON returns the JSON representation of App
4120	AcquireApplicationLockWait waits for an app to be locked .
4121	ReleaseApplicationLock attempts to release an application lock
4122	GetByName returns an app by name
4123	AddUnits adds n units to the app .
4124	SetUnitStatus sets the status of the given unit .
4125	UpdateNodeStatus updates node status
4126	available returns true if the application is available .
4127	Grant adds the app to the app
4128	Revoke revokes an app .
4129	GetTeams returns all teams
4130	setEnv sets the environment variable
4131	getEnv retrieves an environment variable from the app .
4132	Validate new app
4133	validate app
4134	InstanceEnvs returns all environment variables for the given service instance
4135	Run runs the given command .
4136	GetUnits returns the units of the application .
4137	GetUUID gets app UUID
4138	Envs returns a map of environment variables .
4139	SetEnvs sets new environment variables .
4140	UnsetEnvs unsets an app s environment variables .
4141	AddCName adds cnames to the app
4142	Log adds a log entry to the database .
4143	LastLogs gets last log lines
4144	List returns all apps matching the filter .
4145	Swap is used to swap two routes .
4146	Start starts an app .
4147	GetDbDriver returns a database driver by name .
4148	GetCurrentDbDriver returns the current database driver
4149	NewForConfig creates a new client for the given config
4150	GetAppFromUnitID returns the app with the given unitID
4151	NewPipeline creates a new pipeline
4152	Result returns the next action .
4153	Decode Json payload
4154	UrlFor returns the base url for the given path
4155	GetCorsInfo returns CorsInfo for the origin
4156	MiddlewareFunc adds CORS headers
4157	MiddlewareFunc is a middleware that wraps the http . HandlerFunc .
4158	WriteHeader implements http . ResponseWriter .
4159	MakeRouter creates a new Revel instance .
4160	AppFunc returns a handler function that matches the request URL
4161	Escape the escaped path
4162	Escape escaped path string
4163	start initializes the router .
4164	ofFirstDefinedRoute returns the first match of a set of matched routes .
4165	findRouteFromURL finds the first route matching the given url
4166	MiddlewareFunc adds ContentTypeCheckerMiddleware to the request .
4167	CloseNotify implements the http . ResponseWriter interface .
4168	MiddlewareFunc adds a middleware to the request log .
4169	executeTextTemplate renders the text template .
4170	RemoteUser returns the remote user
4171	ApacheQueryString returns the url query string
4172	StartTime returns the start time .
4173	ApacheRemoteAddr returns the remote address
4174	ResponseTime returns the time elapsed time if set .
4175	MiddlewareFunc adds middleware to the middleware .
4176	EncodeJson encodes v to JSON
4177	WriteHeader implements the http . ResponseWriter interface .
4178	MakePath returns a string representation of the route
4179	MiddlewareFunc is a middleware that recovers from panics
4180	WrapMiddlewares wraps a slice of middlewares
4181	MiddlewareFunc adds a gzip header to the request .
4182	WriteHeader writes the response header
4183	Hijack implements the http . Hijacker interface .
4184	Write writes b to the underlying http . ResponseWriter .
4185	MiddlewareFunc adds basic auth header to the request
4186	printDebug recursively prints all the children of the node .
4187	AddRoute adds a new route
4188	printDebug prints the tree of the tree .
4189	FindRoutes returns a list of matched routes
4190	FindRoutesAndPathMatched finds all routes matching the given httpMethod and path
4191	FindRoutesForPath returns a list of matches for the given path
4192	Use adds middlewares to the stack
4193	MakeHandler returns an http . Handler for the API .
4194	MiddlewareFunc adds X - powered - by header to the handler .
4195	MiddlewareFunc is a middleware that wraps the status middlewares
4196	GetStatus returns the current status
4197	MiddlewareFunc adds Jsonp middleware
4198	Flush implements the http . Flusher interface .
4199	MiddlewareFunc adds an AccessLogJson middleware to the request .
4200	Fetch returns an object from S3 .
4201	sanityCheck is used to check if the token is valid
4202	release closes the listener .
4203	fetchLoop is a long - running goroutine that periodically updates the master .
4204	This is a long running routine .
4205	Init the hash
4206	Fetch reads the contents of the file .
4207	Fetch performs a HEAD request .
4208	NewConfig creates a new config with default values .
4209	Validate validates this Config
4210	NewClient creates a new Client .
4211	AsyncClose is part of the partitionConsumer interface .
4212	Close implements the Consumer interface .
4213	MarkOffset sets the offset for the given offset .
4214	NewConsumer creates a new consumer
4215	MarkOffsets updates the set of offsets for all topics .
4216	ResetOffset resets the offset for a given message
4217	Close closes the Consumer .
4218	hbLoop is a long running goroutine that runs on the given interval .
4219	twLoop is a long - running goroutine that periodically refreshes the topics .
4220	mLoop is a long lived goroutine that commits offsets to the consumer .
4221	fetchOffsets fetches offsets for a given topic and partition .
4222	MarkOffset sets the offset for a given consumer message
4223	ResetOffset resets the offset for a given message
4224	Offsets returns a map of offset values .
4225	Actual returns the actual resource for the instance group
4226	Expected returns the expected instance group with the expected configuration
4227	Delete deletes the instance group
4228	GetReconciler returns a Reconciler for the given cluster .
4229	GetVersion returns version information
4230	GetVersionJSON returns version information
4231	Actual returns the actual resource group and the resource group
4232	Expected returns the expected resource group and resource groups
4233	CreateCmd returns the cobra command for create command
4234	NewUbuntuCluster creates a new Ubuntu cluster .
4235	ProviderConfig returns the control plane provider configuration
4236	SetProviderConfig sets the provider configuration
4237	MachineProviderConfigs returns the list of machine provider configs
4238	SetMachineProviderConfigs sets the specified provider configs .
4239	NewCluster creates a new cluster
4240	DeployControllerCmd returns the cobra command for DeployController
4241	NewRetrier creates a new Retrier
4242	RunRetry runs the retry logic
4243	MustGenerateRandomBytes generates random bytes
4244	ExplainCmd returns the cobra command
4245	TimeOrderedUUID generates a random UUID
4246	GetConfigCmd returns the cobra command for getconfig
4247	RunAnnotated runs the task with the given symbol and symbol .
4248	ListCmd returns the list command
4249	NewUbuntuCluster creates a new Ubuntu cluster
4250	EditCmd returns the edit command
4251	RemoveKey removes the given public key .
4252	RemoveKeyUsingFile removes a key from the keyring
4253	Actual gets the firewall details
4254	Expected returns the expected resource and the expected resource
4255	Apply performs the actual validation of the cloud resource
4256	Delete a firewall
4257	DeleteCmd returns the Kubernetes cli delete command
4258	NewStateStore returns the state store for the given options
4259	Commit persists the cluster
4260	ApplyCmd returns the Kubernetes apply command
4261	ExpandPath expands a path
4262	CompletionCmd returns the completion command
4263	AdoptCmd returns the cobra command
4264	StrEnvDef returns a string from an environment variable
4265	IntEnvDef retrieves an int from the given environment variable
4266	BoolEnvDef returns the boolean value of the given environment variable or the default if not found
4267	readFromFS reads the contents of a source file
4268	VersionCmd returns the cobra command for version
4269	NewSignalHandler creates a new handler
4270	Register the handler
4271	NewUbuntuCluster returns a new Ubuntu cluster .
4272	BeginningOfHour returns the beginning of the current time .
4273	BeginningOfDay returns the beginning of the current time .
4274	BeginningOfWeek returns the time for the beginning of the current week .
4275	BeginningOfMonth returns the beginning of the current month .
4276	BeginningOfQuarter returns the time for the beginning of the current quarter .
4277	BeginningOfYear returns the beginning of the current year .
4278	EndOfMinute returns the end of the current time .
4279	EndOfHour returns the end of the end of the current time
4280	EndOfDay returns the end of the current time .
4281	EndOfWeek returns the end of the week
4282	EndOfMonth returns the end of the month of the current month
4283	EndOfQuarter returns the end of the current time .
4284	EndOfYear returns the end of the current time .
4285	MustParse is like Parse except it panics on error
4286	Between returns true if the current time is before the time .
4287	ParseInLocation takes a set of strings and parses them in UTC .
4288	MustParse is like New except it parses the given strings .
4289	MustParseInLocation is like Parse except it panics if the time is invalid .
4290	Between tests if the current time is between the current time
4291	NewChannelMemoryBackend creates a new instance of ChannelMemoryBackend .
4292	Start starts the memory backend .
4293	Flush empties the memory backend .
4294	Stop stops the memory backend .
4295	Formatted returns the formatted record s formatted string .
4296	Message returns the message of the record .
4297	SetBackend sets the backend used for logging purposes .
4298	MustGetLogger is same as GetLogger but panics if error
4299	Reset resets the log backend to standard logger .
4300	IsEnabledFor implements the DefaultBackend interface .
4301	Criticalf log
4302	Warningf logs with WARNING level
4303	Noticef logs with the NOTICE level .
4304	Infof logs with INFO level .
4305	SetFormatter sets the formatter
4306	MustStringFormatter is like NewStringFormatter but panics if an error occurs .
4307	formatFuncName returns the function name that should be used for debugging .
4308	Log implements the backend . Formatter interface .
4309	LogLevel converts a string to a log level .
4310	AddModuleLevel adds a module - level backend to the backend .
4311	GetLevel returns the log level for the given module
4312	SetLevel sets the log level for a module .
4313	IsEnabledFor returns if the given log level is enabled for the given module .
4314	MultiLogger creates a new instance of MultiLogger
4315	Log implements Backend .
4316	GetLevel implements Backend .
4317	SetLevel sets the log level of all backends
4318	IsEnabledFor implements Backend .
4319	ConvertColors converts a slice of integers to a slice of strings
4320	NewSyslogBackend creates a new syslog backend
4321	NewSyslogBackendPriority creates a new syslog backend
4322	SetBackend sets the default backend used for logging .
4323	NewCommander returns a new instance of a Command
4324	Execute executes the command with the given arguments .
4325	explain prints the usage of the command .
4326	explainGroup prints a human - readable description of a group .
4327	explain prints the command line flags to w .
4328	Deal with aliases
4329	Execute calls DefaultCommander .
4330	LoadFromData loads a configuration from a byte slice .
4331	LoadFromReader loads a configuration from a reader .
4332	ReloadData reloads the configuration from in - memory
4333	AppendFiles appends the given files to the config file .
4334	GetKeyList returns a list of all the keys in the given section
4335	SaveConfigData writes configuration data to out .
4336	SaveConfigFile saves the given configuration file .
4337	Find returns a new Selection object containing the matched elements .
4338	FindByXPath returns a new Selection object containing the matched elements .
4339	FindByLink returns a new Selection object containing the matched elements .
4340	FindByLabel returns a set of elements that match the specified label .
4341	FindByName returns a set of matched elements .
4342	FindByClass returns a set of matched elements with the specified text .
4343	FindByID returns a new Selection object that matches the specified id .
4344	First gets the first element matched by the selector .
4345	FirstByXPath returns the first element matched by the selector .
4346	FirstByLink returns a new Selection object with the specified text .
4347	FirstByLabel returns a new Selection object containing the matched elements .
4348	FirstByName returns a new Selection object with the specified name .
4349	All returns a new MultiSelection that matches elements with the specified selector .
4350	AllByXPath returns a new MultiSelection based on the selector string .
4351	AllByLink returns a new MultiSelection that matches the given text .
4352	AllByLabel returns a new MultiSelection that matches the specified label .
4353	AllByName returns a MultiSelection with the specified name .
4354	AllByClass returns a new MultiSelection that matches the specified classes .
4355	AllByID returns a new MultiSelection that matches the given text .
4356	FindForAppium returns a new Selection object containing the matched elements .
4357	Timeout is an Option to set the timeout .
4358	ChromeOptions adds a new option to the server
4359	JoinPage joins an existing page .
4360	Destroy destroys the session .
4361	Reset clears the current page .
4362	Navigate sets the current URL to the given URL .
4363	GetCookies returns the cookies for the current page .
4364	SetCookie sets the cookie for the current page .
4365	DeleteCookie deletes a cookie by name .
4366	ClearCookies deletes all session cookies .
4367	URL returns the URL of the page .
4368	Size sets the size of the page .
4369	Screenshot gets a screenshot of the page .
4370	Title returns the page s title
4371	HTML returns the page s HTML .
4372	PopupText returns the popup text .
4373	EnterPopupText sets the popup text .
4374	ConfirmPopup accepts a popup .
4375	CancelPopup cancels the popup .
4376	SwitchToParentFrame moves the current frame to the parent frame .
4377	SwitchToRootFrame changes the current frame to the original frame
4378	NextWindow moves the next available window
4379	CloseWindow closes the active window .
4380	WindowCount returns the number of available windows .
4381	LogTypes returns all log types .
4382	MoveMouseBy moves the cursor to the given XOffset .
4383	DoubleClick performs a double click on the page .
4384	Click handles a click event .
4385	Click requests the click on each element in the set of matched elements .
4386	DoubleClick performs the double click on each element .
4387	Fill sets the elements of each element in the set of matched elements .
4388	Tap sets the tap event on each element .
4389	Touch sets the elements of each element in the Selection .
4390	FlickFinger touches the current element at the specified position .
4391	ScrollFinger scrolls the current element .
4392	NewCapabilities returns a new Capabilities object with the given features .
4393	JSON returns the capability as a JSON string .
4394	HaveTitle returns a matcher that matches the title
4395	HaveURL matchers for a Gomega URL
4396	HavePopupText matcher checks if thePopupText is set .
4397	HaveLoggedError matcher checks to see if the given messages are logged .
4398	Text gets the text of each element in the Selection .
4399	Active returns true if the current element matches the current element .
4400	Attribute gets the first element of the set of matched elements .
4401	CSS gets the first element of the set of matched elements .
4402	Selected returns true if each element is selected .
4403	Visible returns true if each element is visible .
4404	Enabled returns true if each element is enabled .
4405	HaveCount returns a matcher that matches the number of elements .
4406	HaveAttribute returns a matcher that matches the expected attribute
4407	EdgeDriver returns a new WebDriver instance .
4408	Selendroid returns a new WebDriver using the given jar file .
4409	SwitchToFrame changes the current frame to the current frame .
4410	Count returns the number of matched elements .
4411	EqualsElement returns true if the two elements are equal .
4412	MouseToElement moves the cursor to the current element .
4413	loggingMiddleware is a middleware that logs messages from the request .
4414	chainHandlers chains multiple middlewares
4415	HTTPReverseProxy starts a reverse proxy server
4416	CheckInstallation checks if the current version is available
4417	CheckVersion checks if the version is within the given version
4418	GetVersionForBinary gets the version for the given binary
4419	getUser gets information about a user
4420	login takes a username and password and password and returns a User object .
4421	loginHandler is the main entry point for the user .
4422	logoutHandler is used to clear the authenticated user .
4423	viewHandler returns the login page
4424	Run starts the user service
4425	WithRequest sets the request body .
4426	WillRespondWith sets the response to the specified response .
4427	isJSONFormattedObject returns true if the passed string is a JSON formatted object .
4428	ByUsername returns a user by its username
4429	ByID returns a user by ID .
4430	UserLogin handles the login request
4431	newClient creates a new PactClient
4432	NewClient returns a new PactClient
4433	List servers
4434	UpdateMessagePact adds a push message to the swarm
4435	PublishPacts publishes a set of pacts to a service
4436	getPort returns the port for the given URL
4437	getAddress returns the address from a raw URL
4438	sanitise RubyResponse sanitizes the response to sanitise the response .
4439	Publish a push request
4440	FindPortInRange finds a port in a range
4441	EachLike returns a matcher that matches the given content .
4442	Term returns a matcher that matches a random string
4443	UnmarshalJSON implements the json . Unmarshaler interface .
4444	Convert an object to a string
4445	match returns a matcher for the src type .
4446	AddMessage add a new message
4447	AddInteraction add a new interaction
4448	Teardown shuts down the Pact server
4449	Verify verifies that all interactions have been signed
4450	stateHandlerMiddleware returns a state handler that invokes the given state handlers .
4451	VerifyMessageProviderRaw is the same as VerifyMessageProvider but accepts a request
4452	VerifyMessage consumer
4453	VerifyProvider is a mock
4454	NewService returns a mock service
4455	Setup initializes the service manager
4456	addServiceMonitor starts a goroutine to monitor the process created by the process .
4457	removeServiceMonitor is a long running routine that monitors the service map .
4458	List returns a map of all services
4459	Command returns the exec . Cmd object
4460	call makes a HTTP request
4461	DeleteInteractions deletes all interactions
4462	AddInteraction adds an Interaction to the mock service
4463	WritePact calls the mocked service
4464	ExpectsToReceive is a mock
4465	WithMetadata sets the metadata for the message
4466	AsType sets the Message as a type .
4467	UserLogin handles the user login request .
4468	Region returns the region of the S3 endpoint .
4469	New creates a new S3 .
4470	Bucket returns a bucket with the given name .
4471	PutWriter returns an io . WriteCloser that writes to the bucket .
4472	url creates a new URL for the bucket .
4473	SetLogger sets the output level of the logger
4474	InstanceKeys gets the instance keys
4475	EnvKeys returns the Keys for the AWS environment
4476	Sign signs the given request .
4477	getAWSKeys gets the AWS keys and instance keys
4478	homeDir returns the home directory
4479	ACL sets the xamz - ACL header
4480	putPart is used to upload a part
4481	abort aborts a multipart upload
4482	growPartSize checks if the size is larger than putz .
4483	CheckDisallowed returns an error if the spec is not allowed .
4484	Process parses the spec and returns an error if any .
4485	MustProcess is like Process but panics .
4486	toTypeDescription returns the description of a reflect . Type .
4487	Usage prints the usage for the given spec
4488	Usagef generates the usage for the spec
4489	Usaget is a wrapper around go - kit package .
4490	Scan implements the Scanner interface .
4491	Value implements the driver . Valuer interface .
4492	NewTime returns a new Time object
4493	TimeFromPtr creates a new Time from a pointer .
4494	ValueOrZero returns the value of t if valid .
4495	MarshalJSON implements the json . Marshaler interface for Time .
4496	SetValid sets the time value
4497	Ptr returns a pointer to t .
4498	NewBool creates a new bool
4499	BoolFromPtr creates a new bool from a pointer
4500	UnmarshalJSON implements the json . Unmarshaler interface for Bool .
4501	UnmarshalText implements the encoding . TextUnmarshaler interface .
4502	MarshalJSON implements the json . Marshaler interface .
4503	SetValid sets the boolean value
4504	NewString creates a new String
4505	UnmarshalJSON implements json . Unmarshaler for String .
4506	MarshalText implements the encoding . TextMarshaler interface .
4507	UnmarshalText implements the encoding . TextUnmarshaler interface .
4508	SetValid sets the String field s value .
4509	StringFromPtr creates a new String from a pointer
4510	MarshalJSON implements json . Marshaler .
4511	NewInt creates a new Int
4512	IntFromPtr creates a new Int from a pointer to a int64
4513	UnmarshalJSON implements json . Unmarshaler for Int .
4514	MarshalText implements the encoding . TextMarshaler interface .
4515	SetValid sets the value of the int64
4516	UnmarshalText implements the encoding . TextUnmarshaler interface .
4517	MarshalText implements the encoding . TextMarshaler interface .
4518	SetValid sets the float value
4519	MarshalJSON implements the json . Marshaler interface for Time .
4520	UnmarshalJSON parses the JSON representation of a Float
4521	UnmarshalText parses a float from text .
4522	MarshalJSON implements json . Marshaler .
4523	newGossipChannel creates a new gossip channel
4524	GossipUnicast sends a message to the given peer .
4525	GossipBroadcast sends an update to all peers .
4526	Send a GossipData
4527	Sends down the given GossipData
4528	gobEncode returns the gob encoding of the given items .
4529	newTokenBucket returns a new instance of tokenBucket .
4530	wait waits for all unspent tokens to be spent .
4531	capacityToken returns the expiration time for a token bucket .
4532	PrefixRangeEnd returns the end of a range of bytes .
4533	newLocalPeer returns a new local peer
4534	getConnections returns the set of connections
4535	createConnection creates a new TCP connection
4536	doAddConnection is used to add a new connection
4537	startLocalConnection starts a new local connection .
4538	SendProtocolMsg sends a protocol message
4539	NewStatus returns a Status populated with the given router .
4540	makePeerStatusSlice creates a list of peers
4541	makeUnicastRouteStatusSlice returns a slice of unicast routes .
4542	makeBroadcastRouteStatusSlice returns a slice of broadcastRouteStatus .
4543	makeLocalConnectionStatusSlice returns a slice of local connections
4544	makeTrustedSubnetsSlice converts a slice of IPNet to a slice of strings
4545	Range implements the Store interface .
4546	Put implements the Store interface .
4547	DeleteRange implements the Store interface .
4548	Txn is part of the Store interface .
4549	Compact is not implemented .
4550	proposeInternalRaftRequest tries to propose an internal Raft request .
4551	applyCompare performs the comparison of Compare .
4552	Describes all known peers
4553	OnGC add a callback to be called when garbage collection is garbage collection .
4554	OnInvalidateShortIDs registers callback function to be called when all short IDs are invalid .
4555	chooseShortID chooses a random short id from the list of peers .
4556	fetchWithDefault adds a new peer to the list of peers .
4557	Fetch returns a peer given its name
4558	fetchAndAddRef returns the reference count for the given peer .
4559	FetchByShortID fetches a peer by its short ID .
4560	GarbageCollect is used to garbage collect all peers .
4561	newRoutes creates a new Routes object .
4562	OnChange adds a callback function to be called when a change occurs .
4563	Unicast returns the route name for the given peer name .
4564	UnicastAll returns the route name for the given peer name .
4565	Broadcast returns the list of peers for the given peer name .
4566	BroadcastAll returns all known peers for the given peer name .
4567	NewPeer creates a new peer .
4568	Register the given Gossip .
4569	ReadFrom implements io . ReaderFrom .
4570	WriteTo sends a packet to the given destination .
4571	LocalAddr returns the address of the peer .
4572	OnGossip is called when a Gossip message is received .
4573	OnGossipBroadcast is called when a gossip packet is received .
4574	OnGossipUnicast is called when a gossip message is received .
4575	NewDefaultServer creates a default mesh server
4576	PeerNameFromUserInput extracts peer name from a user input string
4577	bytes returns the bytes representation of a PeerName
4578	NewRouter creates a new Router
4579	sendAllGossip sends all gossips to all peers
4580	Send all gossip down to the given connection .
4581	broadcastTopologyUpdate sends the update to the topology .
4582	OnGossipUnicast is called when a gossip message is received .
4583	OnGossipBroadcast implements the OnGossipBroadcast interface .
4584	Gossip returns the state of the current node
4585	OnGossip applies the given update to the topology
4586	Encode serializes the gossip data into a byte slice .
4587	newState returns a new state
4588	Merge merges the state into this state .
4589	mergeReceived merges the set of peers into the state .
4590	mergeComplete returns the complete state for the given set
4591	OnGossipBroadcast implements the SossipBroadcast interface
4592	OnGossip is called when a new update is received
4593	generateKeyPair generates and private key pair
4594	Forms a shared secret key
4595	newTCPCryptoState initializes a new crypto state .
4596	Send implements the gob - encoder interface .
4597	Send sends a message to the TCP socket .
4598	Send sends the given message to the secure peer .
4599	Receive waits for the TCP connection to be received and returns the message .
4600	Receive reads the length prefix of a TCP packet .
4601	Receive tries to decrypt the encrypted TCP message .
4602	newPeer returns a new peer .
4603	incr increments the current counter .
4604	Gossip returns the current state of this peer .
4605	OnGossipUnicast is called when a GossipUnicast message is received .
4606	makeRaftPeer creates a raft . Peer from the given address .
4607	String returns a string representation of a peer
4608	For each connected peer
4609	parsePeerUID parses the given string as a PeerUID
4610	Swap implements the sort . Interface .
4611	Less implements sort . Interface .
4612	doIntro performs the introspection of the server .
4613	filterV1Features returns a copy of the introspection version of the introspection .
4614	newConnectionMaker creates a new connection maker .
4615	connectionAborted marks the given address as failed .
4616	newGossipSender returns a new GossipSender
4617	Send a GossipData
4618	Broadcast a GossipData
4619	Flush the send queue
4620	Sender returns a new gossipSender instance
4621	Flush sends a flush to all peers
4622	findMainPath is the main entry point for testing .
4623	Create creates a new channel .
4624	Send sends a message to the application .
4625	SendJSON sends the given value to the client .
4626	remapError converts an error to an internal error .
4627	NamespacedContext returns a new context with the given namespace .
4628	protoToItem converts a MemcacheGetResponse_Item to a Item .
4629	singleError returns the first error if any .
4630	Get returns the cached item for the given key .
4631	GetMulti calls memcache . Get .
4632	Delete removes the document with the given key .
4633	DeleteMulti deletes the given key .
4634	Increment increments the counter by delta .
4635	IncrementExisting increments the given value by delta .
4636	set sets the value for a given item .
4637	Get returns the item with the given key .
4638	Stats returns statistics about the memcache .
4639	Flush deletes all memory caches .
4640	RunInBackground runs f in a background .
4641	List returns the list of all modules .
4642	SetNumInstances sets the number of instances for a given module .
4643	Versions returns the versions for the given module .
4644	DefaultVersion returns the default version for the given module .
4645	Start starts a module .
4646	Stop stops the given module .
4647	Ancestor sets the ancestors of the query .
4648	EventualConsistency sets the eventual consistency of the query .
4649	Project adds a projection to the query .
4650	Distinct specifies the SELECT clause .
4651	DistinctOn adds a distinct ON clause to the query .
4652	KeysOnly adds the keys only to the query .
4653	Limit sets the LIMIT clause of the query .
4654	Offset sets the offset for the query .
4655	BatchSize sets the size of the query .
4656	Start sets the start position .
4657	End sets the end to the end of the query .
4658	Count runs the query .
4659	Run runs the query .
4660	Next retrieves the next key from the iterator and stores the result into the dst interface .
4661	Cursor returns a Cursor for the current query .
4662	String returns the string representation of the cursor .
4663	DecodeCursor decodes a Cursor from a string .
4664	saveEntity saves the given struct to a protobuf entity .
4665	Namespace returns a new context with the given namespace .
4666	typeof returns the typeof for the given name .
4667	dot returns the dot of a type .
4668	joinFunc joins two strings .
4669	validPropertyName returns true if the name is a valid property name .
4670	getStructCodec returns the codec for a given type .
4671	LoadStruct loads a property into dst .
4672	SaveStruct is a convenience function to save the properties of a struct .
4673	ServingURL returns the URL for the image .
4674	DeleteServingURL deletes the specified blob .
4675	CurrentOAuth returns the current user .
4676	OAuthConsumerKey returns the OAuth consumer key .
4677	String implements the Stringer interface for User .
4678	LoginURL returns a login URL that can be used to login a user .
4679	LoginURLFederated creates a new login URL for a user .
4680	LogoutURL creates a URL that can be used to redirect the user to the specified destination URL .
4681	insertContext inserts ctx if ctx is nil .
4682	NewClient returns a new Client .
4683	NewContext returns a new context derived from parent context .
4684	NewRemoteContext creates a new context .
4685	Debugf logs a message with severity ERROR .
4686	guestbookKey returns a datastore key for guestbook .
4687	toRetryParameters converts a RetryOptions to a TaskQueueRetryParameters .
4688	NewPOSTTask creates a new task
4689	ParseRequestHeaders parses the request headers from the HTTP request headers .
4690	Add adds a task to the task queue .
4691	AddMulti adds tasks to the task queue .
4692	Delete deletes a task .
4693	DeleteMulti deletes a set of tasks .
4694	Lease blocks until maxTasks is reached .
4695	LeaseByTag leases a set of tasks with the given tag .
4696	Purge queues a task queue .
4697	ModifyLease modifies the task queue
4698	QueueStats calls taskqueueStats API .
4699	IsTimeoutError returns true if the error is a timeout error
4700	Func registers a new function .
4701	Task implements function .
4702	RequestHeaders returns the taskqueue . RequestHeaders stored in the context .
4703	WithContext returns a copy of the given request .
4704	WithAPICallFunc returns a context with the given function .
4705	APICall calls the given service method .
4706	ModuleHostname returns the hostname of a module .
4707	AccessToken returns an access token and expiry time .
4708	PublicCertificates returns the public certificates for the application .
4709	ServiceAccount returns the service account name .
4710	SignBytes signs the bytes with the given bytes .
4711	fetch reads data from the blobstore .
4712	seek moves the cursor to the next read .
4713	multiKeyToProto converts a list of keys to a protobuf message
4714	referenceValueToKey converts a PropertyValue_Reference to a Key
4715	keyToReferenceValue converts a Key to a protobuf PropertyValue .
4716	Put calls PutMulti . PutMulti .
4717	PutMulti stores the given src into the datastore .
4718	Delete deletes the given key .
4719	DeleteMulti deletes the given keys .
4720	deploy deploys the given command
4721	Next returns the next record .
4722	protoToAppLogs converts log lines to AppLogs
4723	protoToRecord converts a RequestLog to a Record .
4724	Run executes the query .
4725	Run performs a read operation
4726	Current returns information about the current user .
4727	IsAdmin returns true if the user is admin
4728	isErrFieldMismatch returns true if the error is ErrFieldMismatch .
4729	Stat returns the blob info for the given blobKey .
4730	Send adds the given blobKey to the response writer .
4731	UploadURL returns the URL for the blobstore .
4732	Delete removes the given blobKey .
4733	DeleteMulti deletes a blob .
4734	NewReader returns a new reader for the given blobKey .
4735	Handle registers a new message route .
4736	Send sends a message .
4737	Invite sends an invite request .
4738	Send sends a presence message .
4739	GetPresence returns the presence of a message .
4740	GetPresenceMulti issues a GetPresence API call to GetPresence .
4741	newStructFLS returns a FieldLoadSaver .
4742	SaveStruct is similar to SaveStruct but returns the Field objects .
4743	Namespaces returns a list of all available names .
4744	Kinds returns a list of all known kinds .
4745	RunInTransaction runs f in a transaction .
4746	imports returns true if the given file is imported .
4747	importSpec returns the import spec for the given import path .
4748	declImports returns true if the given path is a import path .
4749	isPkgDot reports whether t is a top - level dot .
4750	isTopName returns true if n is a top name .
4751	isName returns true if n is a identifier .
4752	isCall returns true if t is a call expression .
4753	referencesTo returns true if n is a member of n .
4754	isEmptyString returns true if n is an empty string .
4755	countUses returns the number of uses for the given expression .
4756	assignsTo returns true if x is assigned to the given expression .
4757	newPkgDot returns a dot expression .
4758	renameTop renames top - level top name to new one .
4759	matchLen returns the length of x and y .
4760	deleteImport removes the given import spec from f .
4761	rewriteImport rewrites the import path to the given file
4762	DefaultTicket returns the default ticket .
4763	flushLog returns true if any of the pending log entries are flushed .
4764	withDeadline returns a copy of parent context with deadline set to zero . If deadline is set the deadline is zero .
4765	KeepAlive closes the socket
4766	applyTransaction applies the transaction to the given transaction .
4767	analyze runs the main and returns an app .
4768	buildContext creates a build context for the build .
4769	sy synthesizes the main file for the app_main
4770	findInGopath tries to find a package in gopath
4771	copyTree copies all files recursively to dstDir .
4772	copyFile copies a file to the tar writer .
4773	checkMain returns true if the context is a main package .
4774	isMain returns true if f is a main function .
4775	readFile returns true if the file is a main .
4776	initField initializes a field at a given index
4777	loadEntity loads the entity properties from src to dst .
4778	validIndexNameOrDocID returns true if s is a valid index name .
4779	Open opens an index .
4780	Put adds the given src to the index .
4781	Get retrieves the document identified by id .
4782	Delete removes the document identified by id .
4783	DeleteMulti implements the Indexer interface .
4784	Search searches the index for a given query .
4785	fetchMore fetches the next available results .
4786	Next fetches the next document from the list of results and stores the result in dst .
4787	Facetets returns the facets result .
4788	DefaultBucketName returns the default bucket name .
4789	valid returns true if the key is valid .
4790	Equal returns true if two keys are equal
4791	root returns the root key .
4792	marshal writes the Key to b .
4793	String returns a string representation of the key .
4794	Encode returns the base64 encoded version of the key
4795	DecodeKey decodes a base64 encoded key .
4796	NewIncompleteKey creates a new Key for the given kind .
4797	NewKey creates a new Key .
4798	AllocateIDs allocates a list of ids for a specific kind .
4799	IsOverQuota returns true if the error indicates that the given error is due to an allocation .
4800	ClassicContextFromContext creates an appengine context from a context . Context .
4801	Send sends a message .
4802	SendToAdmins sends a message to admins .
4803	Failures returns the number of failed failures
4804	decodeFieldNumberAndTyp3 decodes the field number and typ3 from bz .
4805	checkTyp3 returns an error if rt is not a Typ3 .
4806	decodeTyp3 decodes the typ3 value .
4807	NewPrefixBytes creates a new PrefixBytes from a byte slice .
4808	Get length string
4809	collectImplementers_nolock collects all implementations of the interface info
4810	checkConflictsInPrio_nolock checks if the given type is already in priority list
4811	constructConcreteType constructs the concrete type for the given type .
4812	MarshalBinaryLengthPrefixedWriter implements the encoding . BinaryMarshaler interface .
4813	MarshalBinaryBare marshals the given object into a byte slice .
4814	UnmarshalBinaryLengthPrefixed decodes a msg - length prefixed with msg - length prefix .
4815	UnmarshalBinaryBare decodes bz into ptr .
4816	MustMarshalJSON is the same as MarshalJSON but panics .
4817	MustUnmarshalJSON is like UnmarshalJSON but panics on error .
4818	MarshalJSONIndent implements json . Marshaler .
4819	newDataReader returns a new internalDataReader .
4820	Read bytes into data
4821	ListenAndServeTLS acts like ListenAndServe except that it can be used to serve TLS requests .
4822	Produce calls Producer
4823	PromoteHandlerFunc returns a new handler that can be used to promote multiple processes .
4824	Serve accepts incoming connections on the listener .
4825	Serve accepts incoming connections on the listener .
4826	Fail exits the parser with the given msg .
4827	WriteUsage writes the usage information to the given io . Writer
4828	WriteHelp writes the help message to w .
4829	MustParse parses the configuration and returns a Parser
4830	Parse parses the command line arguments and returns an error if any .
4831	walkFields recursively visits all fields in v .
4832	Parse parses the command line arguments .
4833	setSlice takes a slice of strings and parses them into dest .
4834	canParse returns true if the given type can be parsed .
4835	isBoolean reports whether t is a boolean .
4836	NewFromMap creates a Tree from a map .
4837	Insert inserts a value into the tree .
4838	Delete deletes a node from the tree
4839	DeletePrefix returns the number of nodes that match the given string .
4840	deletePrefix is used to delete a node with a prefix
4841	Get returns the value for the given string
4842	Get the longest prefix of s
4843	Minimum returns the minimum value of the tree .
4844	WalkPrefix traverses the tree rooted at prefix
4845	recursiveWalk performs fn on all nodes in the tree .
4846	ToMap converts the tree to a map .
4847	checkip returns the iptype and ipindex for the given ip
4848	read uint32
4849	read uint64
4850	load an IP2Location record
4851	Printrecord formats an IP2Locationrecord struct
4852	Main is the main entry point .
4853	SaveToPdfFile saves a PDF document
4854	CubicCurveTo adds a cubic curve to the current path
4855	ArcTo adds an arc to the current path
4856	String returns a string representation of the path
4857	VerticalFlip flips the vertices of the path
4858	NewGlyphCache creates a new cacheImp
4859	Fetch fetches a glyph from the cache .
4860	renderGlyph is used to render a glyph
4861	Copy returns a copy of the Glyph
4862	Fill fills the Glyph with the given coordinates .
4863	Main is the main entry point .
4864	Draw draws a line at the specified point .
4865	Paint paints a set of spans .
4866	SetColor sets the current color .
4867	NewPainter returns a new Painter .
4868	GetStringBounds returns the bounds of the string
4869	recalc recalculates the current font size .
4870	SetFont sets the current font .
4871	ClearRect draws a rectangle .
4872	drawString draws a string
4873	newGroup creates a new group
4874	newMask creates a new Mask
4875	embedSvgFont embeds the given text into the current font .
4876	TraceQuad performs a linear linear interpolation of quad curves .
4877	GetFontName returns the font name
4878	NewStackGraphicContext creates a new GraphicContext .
4879	NewFolderFontCache creates a new instance of FolderFontCache
4880	NewSyncFolderFontCache creates a new instance of SyncFolderFontCache
4881	Main runs the gopher2 renderer .
4882	NewPdf creates a new PDF document
4883	clearRect clears a rectangle .
4884	NewGraphicContext creates a GraphicContext .
4885	Clear clears the current page .
4886	GetStringBounds returns the bounds of the string
4887	CreateStringPath draws a string at the specified position .
4888	FillStringAt fills a string at the specified point at the specified point .
4889	SetStrokeColor sets the stroke color .
4890	SetFillColor sets the fill color .
4891	SetLineDash sets the line dash pattern .
4892	SetLineWidth sets the line width .
4893	Main is the main entry point .
4894	Draw draws the given text .
4895	SaveToPngFile saves the image to png .
4896	LoadFromPngFile loads a png from a file .
4897	Resource returns the full path of a resource
4898	Output returns the path to a PDF file .
4899	Main is the main entry point for the captcha .
4900	Draw is a convenience method to render a pc image .
4901	Main draws a geometry .
4902	Cubic draws a Bubble
4903	Dash draws a dash line at the specified point
4904	CubicCurve draws a cubic curve .
4905	FillStroke fills a stroke with the specified dimensions .
4906	FillStyle fills the specified color with the specified dimensions .
4907	PathTransform is used to transform a path to a path
4908	Star draws a star .
4909	Draw draws the specified width and height .
4910	ConvertPath converts a path to a PDF
4911	Main is the main entry point for the line cap .
4912	Draw draws a point at the specified point .
4913	DrawContour draws the contour of the specified points
4914	Flatten recursively flattens the segments of a path
4915	Clear clears the current image .
4916	ClearRect fills the current color with the current color .
4917	DrawImage applies a transform transform to the given image .
4918	Main is the main entry point for rendering
4919	Draw draws a PNG
4920	Draw draws a point at the specified point .
4921	ChecksumString32S computes the checksum of a string using a seed .
4922	ChecksumString64S computes the checksum of s using a seed .
4923	NewS32 returns a new instance of XXHash32 .
4924	NewS64 returns a new XXHash64 with the given seed .
4925	round64 rounds a 64 - bit value to h .
4926	Checksum32S computes the checksum of the input
4927	Checksum64S computes the checksum of the input .
4928	getStage returns the next stage of the daemon stage .
4929	New creates a new glg instance .
4930	Get returns a Glg instance
4931	SetMode sets the mode of glog .
4932	SetPrefix sets the prefix for the global logger .
4933	GetCurrentMode returns the current mode for the given level .
4934	Initialize the logger
4935	SetWriter set the logger writer
4936	SetLevelColor sets the log level for the given level .
4937	SetLevelWriter set a writer to the specified writer
4938	AddStdLevel adds log level to glg
4939	EnableColor enable color
4940	EnableLevelColor enable color mode
4941	DisableLevelColor disables the log level
4942	RawString returns raw string
4943	TagStringToLevel returns the LEVEL value for the given tag
4944	Println prints a value .
4945	Fatal prints a fatal message .
4946	Fatalf logs a message and exits the program .
4947	isModeEnable returns true if mode is enabled
4948	Capture metrics
4949	get returns the value at the given key .
4950	Save to the given writer
4951	SaveToFile to a file
4952	Load loads the data from the given reader
4953	Load from a file
4954	Key returns the key id
4955	Retrieve the value of id
4956	Delete deletes a node at the specified key
4957	Set sets the version .
4958	Compare returns an integer indicating whether v is greater than or equal to versionB .
4959	Slice returns the version as a slice of integers .
4960	BumpMajor sets the major to 0 .
4961	BumpMinor sets the minor to 0 .
4962	BumpPatch increments the patch count .
4963	validateIdentifier returns an error if the identifier is invalid .
4964	newStream returns a new Stream .
4965	addSubscriber adds a subscriber to the stream .
4966	New creates a new Server .
4967	Close closes all streams .
4968	CreateStream creates a new stream for the given ID .
4969	RemoveStream removes a stream from the server .
4970	StreamExists checks if a stream exists
4971	Publish publishes an event .
4972	NewClient returns a new Client .
4973	Subscribe subscribes to the given event stream .
4974	SubscribeChan adds events to the given channel .
4975	SubscribeRaw allows you to subscribe to a message .
4976	Unsubscribe unregisters the given channel .
4977	NewEventStreamReader returns a new EventStreamReader .
4978	ReadEvent returns the next event from the stream
4979	HTTPHandler returns an event stream
4980	Add adds an event to the log .
4981	Replay to the event log .
4982	readKey reads a key
4983	writeKey writes the given key to the given path .
4984	anyKey creates a new ecdsa . Signer for the given filename . If the key is not found it will create a new one .
4985	sameDir returns the same directory of existing files .
4986	printAccount prints a tabular summary of the account .
4987	tmpl parses a template and writes it to w .
4988	printUsage writes the usage to w .
4989	FromRequest returns X - Real - IP address from the request
4990	Do executes the clear command .
4991	Do executes the disable command .
4992	Do removes the storage item .
4993	Do sets the storage item .
4994	Do executes a push message .
4995	Do executes the synchronisation sync event .
4996	Do executes the inspect worker .
4997	Do executes the force update on page load .
4998	Do executes the skip - waiting command .
4999	Do executes the start worker .
5000	Do runs the command to stop all workers .
5001	Do executes the stop worker .
5002	Do unregister a device .
5003	Do updates the registration .
5004	Do executes bind parameters .
5005	Do runs the unbind command .
5006	Error returns the string representation of the ExceptionDetails
5007	Do releases the animations .
5008	Do seeks to the current animations .
5009	Do sets the paused state .
5010	Do sets the playback rate .
5011	Do sets the timing information .
5012	Do executes the PrepareForakDetection parameters .
5013	Do retrieves the JavaScript session .
5014	Do sets the pressure notification .
5015	Do executes the simulate request .
5016	WithSamplingInterval adds the SamplingInterval to the startSamplingParams params
5017	WithSuppressRandomness sets the SuppressRandomness field of start sampling params
5018	Do starts the sampling process .
5019	Do executes the stop sampling command .
5020	Do runs the command to clear the device orientation override .
5021	Do sets the device orientation override .
5022	Do starts the violation report .
5023	Do executes the stop violation report .
5024	String returns the string representation of a Modifier .
5025	WithNodeID adds the nodeID to the get partial accessibility tree params
5026	WithBackendNodeID adds the BackendNodeID to the get partial accessibility tree params
5027	WithObjectID adds the objectID to the get partial accessibility tree params
5028	WithFetchRelatives adds the FetchRelatives to the get partial accessibility tree params
5029	Do sets the time domain .
5030	WithClipRect returns a copy of the profile snapshot params
5031	Do executes the delete snapshot .
5032	Do executes the delete operation .
5033	Do deletes a database .
5034	Do runs the delete operation .
5035	WithKeyRange adds the KeyRange to the request data params
5036	Do executes the set sampling interval .
5037	Do executes the start command .
5038	WithCallCount adds the callCount to the start precise coverage params
5039	WithDetailed adds the detailed coverage params
5040	Do starts the precise code coverage .
5041	Do runs the command to start a profile .
5042	Do executes the precise coverage command .
5043	Do executes the stop type profile .
5044	Do sets the ignore certificate errors .
5045	Do adds the specified heap object to the stack .
5046	Do executes the collect garbage collection .
5047	WithSamplingInterval adds the SamplingInterval to the startSamplingParams params
5048	Do starts the trackingHeapObjects request .
5049	WithReportProgress adds the reportProgress to the stop tracking objects params
5050	Do executes the stop trackingHeapObjects request .
5051	WithReportProgress adds the reportProgress to the TakeHeapSnapshot params
5052	Do executes the snapshot action .
5053	WithBrowserContextID adds the BrowserContextID to the grant permissions params
5054	Do executes the grant - permissions command .
5055	WithBrowserContextID adds the BrowserContextID to reset permissions params
5056	Do runs the command to reset permissions .
5057	Do executes the crash command .
5058	Do executes the crashGpuProcess command .
5059	WithQuery adds the Query to the get histograms params
5060	WithTargetID adds the targetID to the get window for target params
5061	Do sets the window size .
5062	WithImage adds the image to the set dock tile params
5063	Do sets the dock tile .
5064	Do executes the delete cache command .
5065	Do deletes an entry .
5066	WithPathFilter adds the pathFilter to the request entries params
5067	Do executes the discard search results .
5068	Do displays the focus .
5069	Do executes the undo operation .
5070	WithIncludeUserAgentShadowDOM sets the IncludeUserAgentShadowDOM field of perform search params
5071	Do executes the redo command .
5072	Do removes the specified attribute .
5073	Do removes a node .
5074	Do executes the requested child nodes .
5075	WithNodeID adds the nodeID to the resolve node params
5076	WithBackendNodeID adds the BackendNodeID to the resolve node params
5077	WithExecutionContextID adds the ExecutionContextID to the resolve node params
5078	Do sets the attribute value .
5079	WithName adds the Name to the SetAttributesAsText params
5080	Do sets the attributes as text .
5081	Do sets the file input files .
5082	Do gets the inspected node .
5083	Do sets the node value .
5084	Do executes the set HTML markup .
5085	Do performs the undo operation .
5086	Do executes a pseudo - pseudo - pseudo - pseudo - state .
5087	Do sets the property value for the specified node .
5088	Do executes the start rule usage tracking parameters .
5089	Do executes the close command .
5090	Do executes the clear data for origin .
5091	Do executes the tracking storage for origin .
5092	Do runs the command to track indexes .
5093	Do executes the uninstall operation .
5094	Do removes the indexedDBForOrigin params .
5095	Do runs the HideHighlightParams command .
5096	Do executes the highlight function .
5097	WithNodeID adds the nodeID to the highlight node params
5098	WithBackendNodeID adds the BackendNodeID to the highlight node params
5099	WithObjectID adds the objectID to the highlight node params
5100	WithSelector adds the selector to the highlight node params
5101	Do highlights a node .
5102	Do highlights a quad .
5103	Do runs the highlight function .
5104	WithHighlightConfig adds the HighlightConfig to the set inspect mode params
5105	Do sets the inspect mode .
5106	Do sets the show adlights params .
5107	WithMessage adds the message to the setPausedInDebuggerMessage params
5108	Do sets the pause in debug mode .
5109	Do sets the show debug borders .
5110	Do sets the FPS counter .
5111	Do runs the show paint rects params .
5112	Do sets the scroll bottleneck rects parameters .
5113	Do sets the show - hit test borders .
5114	Do sets the window size on the server .
5115	Do executes the command to clear the browser cache .
5116	Do executes the command to clear browser cookies .
5117	WithErrorReason adds the ErrorReason to the continue intercepted request params
5118	WithRawResponse adds the rawResponse to the continue intercepted request params
5119	WithURL adds the URL to the continue intercepted request params
5120	WithMethod adds the method to the continue intercepted request params
5121	WithPostData adds the postData to the continue intercepted request params
5122	WithHeaders adds the headers to the continue intercepted request params
5123	WithAuthChallengeResponse adds the authChallengeResponse to the continue intercepted request params
5124	Do executes the request .
5125	WithURL adds the URL to the delete cookies params
5126	WithDomain adds the domain to the delete cookies params
5127	WithPath adds the path to the delete cookies params
5128	Do deletes cookies .
5129	WithConnectionType adds the ConnectionType to the EmulateNetworkConditions params
5130	Do executes the simulate command .
5131	Do executes EnableParams with disabled parameters .
5132	WithUrls adds the urls to the get cookies params
5133	Do executes the remote XHR request .
5134	Do sets the blocked URL parameters .
5135	Do executes the set bypass service worker .
5136	Do sets cache disabled .
5137	WithURL adds the URL to the set cookie params
5138	WithDomain adds the domain to the set cookie params
5139	WithPath adds the path to the set cookie params
5140	WithSecure adds the secure to set cookie params
5141	WithHTTPOnly adds the HTTPOnly field to set cookie params
5142	WithSameSite adds the SameSite to set CookieSameSite params
5143	WithExpires sets the Expires field of the set cookie params
5144	Do sets the cookies .
5145	Do sets the data size limits for test .
5146	Do sets the extra HTTP headers .
5147	Do sets the interception .
5148	Do runs the command to clear device metrics override .
5149	Do executes the command to clear the location override .
5150	Do executes the requested page scale factor .
5151	Do sets the focused mode .
5152	Do sets the CPU throttling rate .
5153	WithColor adds the color to the set default background color override params
5154	Do sets the default background color override .
5155	WithScale adds the scale to the set device metrics override params
5156	WithDontSetVisibleSize adds the dontSetVisibleSize to the set deviceMetricsOverride params
5157	WithScreenOrientation adds the ScreenOrientation to the set deviceMetricsOverride params
5158	Do sets the device metrics override .
5159	Do sets the scrollbars hidden parameters .
5160	Do sets the document cookie disabled .
5161	Do sets the touch events for a mouse .
5162	Do sets the mocked media .
5163	WithLatitude adds the latitude to the set geolocationOverride params
5164	WithLongitude adds the longitude to the set geolocationOverride params
5165	WithAccuracy adds the Accuracy to the set geolocationOverride params
5166	Do sets the location override .
5167	Do sets the page scale factor .
5168	Do sets the script execution disabled .
5169	WithMaxTouchPoints adds the maxTouchPoints to the set touchEmulationEnabled params
5170	Do sets the touch emulation enabled .
5171	WithBudget adds the budget to the set virtual time policy params
5172	WithMaxVirtualTimeTaskStarvationCount sets the MaxVirtualTimeTaskStarvationCount field s value .
5173	WithWaitForNavigation adds the WaitForNavigation to the set virtual time policy params
5174	WithAcceptLanguage adds the acceptLanguage to the set user agent override params
5175	WithPlatform adds the platform to the set user agent override params
5176	Do sets the user agent override .
5177	Do executes the dispatching key event .
5178	Do inserts a text .
5179	WithButtons adds theButtons property to the click event params
5180	Do executes the mouse event .
5181	Do executes a touch event .
5182	Do executes the simulated touch from mouse event .
5183	Do sets the ignore input events .
5184	Do executes the touch gesture .
5185	WithXOverscroll sets the XOverscroll optional argument .
5186	WithYOverscroll sets the YOverscroll optional argument .
5187	Do executes the scroll gesture .
5188	Do executes the tap gesture .
5189	Domain returns the domain part of the method type .
5190	WithDepth adds the depth to the get event listeners params
5191	Do removes a DOM breakpoint .
5192	WithTargetName adds the targetName to the remove event listener breakpoint params
5193	Do removes a breakpoint .
5194	Do removes the specified breakpoint .
5195	Do removes a breakpoint .
5196	Do sets the DOM breakpoint .
5197	Do sets the breakpoint .
5198	Do sets the breakpoint .
5199	Do sets the XPath breakpoint .
5200	WithExecutor returns a new context with the given executor installed .
5201	Execute calls Execute on the context .
5202	AttributeValue returns the value of the named attribute .
5203	xpath returns the path to the node .
5204	String returns the string representation of a NodeType .
5205	Do sets the sink to use .
5206	Do executes the requested tab mirroring operation .
5207	Do executes the stop cast operation .
5208	Do starts the session with the specified parameters .
5209	Do executes the stop observing operation .
5210	Do sets the recording .
5211	Do executes the clear events request .
5212	WithObjectID adds the objectID to the call function on params
5213	WithArguments adds the arguments to the call function on params
5214	WithExecutionContextID adds the ExecutionContextID to the call function on params
5215	WithObjectGroup adds the objectGroup to the call function on params
5216	Do executes the get console command .
5217	WithContextID adds the contextID to the evaluate params
5218	WithOwnProperties adds the OwnProperties to the get properties params
5219	WithGeneratePreview adds the GeneratePreview to the get properties params
5220	WithExecutionContextID adds the ExecutionContextID to the global lexical scope names params
5221	WithObjectGroup adds the objectGroup to query objects params
5222	Do executes the release command .
5223	Do executes the delete object group .
5224	Do executes the command to execute a remote debugger .
5225	Do sets the custom formatter enabled .
5226	Do sets the maximum call stack sizeToCapture params .
5227	Do runs the command to terminate execution .
5228	Do adds a binding .
5229	Do removes a binding .
5230	Do executes the command .
5231	Do executes the scheduled clock sync marker .
5232	WithBufferUsageReportingInterval sets the BufferUsageReportingInterval field of start params
5233	WithNoDisplayUpdates adds the NoDisplayUpdates to the begin frame params
5234	WithScreenshot adds the screenshot to the begin frame params
5235	Do executes the bring - to frontend .
5236	WithClip adds the Clip to the CaptureScreenshot params
5237	WithFromSurface adds the FromSurface to the CaptureScreenshot params
5238	WithWorldName adds the worldName to the create isolated world params
5239	WithGrantUniveralAccess adds the GrantUniveralAccess to the create world params
5240	Do executes the requested navigation history .
5241	WithPromptText adds the PromptText to the handleJavaScriptDialog params
5242	Do executes the dialog request .
5243	WithReferrer adds the Referrer to the Navigate params
5244	WithTransitionType adds the transitionType to the Navigate params
5245	WithFrameID adds the frameID to the Navigate params
5246	Do executes the navigate to history entry .
5247	WithLandscape returns a copy of the printToPDFar params
5248	WithDisplayHeaderFooter adds the display header to the printToPDFar params
5249	WithPrintBackground adds the PrintBackground property to the printToPDFar params
5250	WithScale adds the scale to the printToPDFar params
5251	WithPaperWidth returns a new copy of the paper width property .
5252	WithPaperHeight adds the paper height to the printToPDFar params
5253	WithIgnoreInvalidPageRanges sets the IgnoreInvalidPageRanges field to true .
5254	WithFooterTemplate adds the footer to the printToPDFar params
5255	WithPreferCSSPageSize adds the preferredCSSPageSize to the printToPDFar params
5256	WithScriptToEvaluateOnLoad sets the ScriptToEvaluateOnLoad field of reload params
5257	Do executes the reload command .
5258	Do removes the script to be evaluated .
5259	Do executes the screencast frame .
5260	Do sets the advertising enabled parameters .
5261	Do executes the set bypass request .
5262	Do sets the font families .
5263	Do sets the font sizes .
5264	Do sets the document s content .
5265	WithDownloadPath adds the downloadPath to the set download behavior params
5266	Do sets the download behavior .
5267	Do sets the lifecycle events enabled .
5268	WithFormat adds the format to the startscreencast params
5269	WithMaxWidth adds the MaxScreencast params to the startScreencast params
5270	WithMaxHeight adds the MaxScreencast params to startScreencast params
5271	WithEveryNthFrame returns a pointer to a start screencast params
5272	Do starts the screencast notification .
5273	Do executes the stop loading operation .
5274	Do sets the webhookecycle state .
5275	Do stops the screencast notification .
5276	Do executes the produce compilation cache .
5277	Do adds the compilation cache to disk .
5278	Do executes the command to clear compilation cache .
5279	WithGroup adds the group to the generate test report params
5280	Do executes the remote debugger command .
5281	Do activates a target .
5282	WithBindingName adds the bindingName to the exposeDevToolsProtocol params
5283	Do executes the showDevToolsProtocol request .
5284	WithBrowserContextID adds the BrowserContextID to the create target params
5285	WithSessionID adds the sessionID to the detach from target params
5286	Do executes the detach from target .
5287	Do executes the destroy browser context .
5288	WithSessionID adds the sessionID to the send message to the send message params
5289	Do sends a message to target .
5290	Do sets the auto attach parameters .
5291	Do sets the discover targets .
5292	Do sets the remote locations .
5293	WithPatterns adds the patterns to enable params
5294	WithHandleAuthRequests sets the HandleAuthRequests field of enable params
5295	Do executes the fail request .
5296	WithBody adds the body to the fulfilled request params
5297	WithResponsePhrase adds the responsePhrase to the request params
5298	Do sends the request to the confirm request .
5299	WithURL adds the URL to the continue request params
5300	WithMethod adds the method to the continue request params
5301	WithPostData adds the postData to the continue request params
5302	WithHeaders adds the headers to the continue request params
5303	Do executes the request .
5304	Do executes the command with auth .
5305	Do executes the next request to the specified location .
5306	WithIncludeCommandLineAPI sets the IncludeCommandLineAPI field s value .
5307	Do executes the pause command .
5308	Do executes the pause on asynchronous call .
5309	Do removes a breakpoint .
5310	Do executes the resume command .
5311	Do executes the async call stack .
5312	Do sets the blackbox patterns .
5313	Do sets the blackboxed ranges .
5314	WithURL adds the URL to the set breakpointByURL params
5315	WithURLRegex adds the URLRegex to the set breakpointByURL params
5316	WithScriptHash adds the scriptHash to set breakpointByURL params
5317	WithColumnNumber adds the columnNumber to the set breakpointByURL params
5318	WithCondition adds the condition to the set breakpoint on function call params
5319	Do sets the breakpoints active .
5320	Do executes a pause on exceptions .
5321	Do executes the set return value .
5322	WithDryRun adds the dryRun to the set script source params
5323	Do runs the set skip operation .
5324	Do sets the variable value .
5325	WithBreakOnAsyncCall sets the BreakOnAsyncCall field of stepInto params
5326	Do executes the step in step .
5327	Do executes the step out command .
5328	Do executes the step over parameters .
5329	Listen calls the listener .
5330	ListenClose implements the ListenCloseF interface .
5331	Connected calls ConnectedF .
5332	Disconnected calls the notification function .
5333	OpenedStream calls the wrapped stream .
5334	ClosedStream is defined on the notifyBundle interface .
5335	WithNoDial returns a new context with NoDial set
5336	GetNoDial returns the value of NoDial if any .
5337	WithDialPeerTimeout returns a context with the timeout set
5338	Open opens a connection
5339	Prevpos get prevpos
5340	Last returns the last index in the buffer
5341	DeleteMostRecentBytes delete n bytes from the buffer
5342	NewFloat64RingBuf return a new Float64RingBuf
5343	TwoContig return two floats .
5344	Earliest return the oldest value in the buffer
5345	Values returns a slice of float64 values
5346	NewAtomicFixedSizeRingBuf return a new instance of AtomicFixedSizeRingBuf
5347	Reset reset the buffer
5348	NewPointerRingBuf returns a pointer to a pointer ring buffer .
5349	TwoContig returns two slices of pointers .
5350	NumPage returns the number of pages .
5351	Font returns a font with the given name .
5352	Width returns the width of the font
5353	Encoder returns the encoding for this font
5354	Interpret interprets strm as a string .
5355	Open opens the given file .
5356	NewReader returns a new Reader reading from f .
5357	NewReaderEncrypted creates a new io . Reader at the specified size .
5358	Trailer returns the trailer s trailer .
5359	Kind returns the Kind of v .
5360	newBuffer returns a new buffer .
5361	Paginate returns a pagination info about the results
5362	CascadeDelete deletes all documents from a collection
5363	cascadeDeleteWithConfig is used to cascade the model with the given config
5364	cascadeSaveWithConfig is used to cascade the given document with the given config
5365	Map from cascade properties
5366	Connect to mongo
5367	lowerFirst returns the first letter of a string
5368	Find returns a ResultSet for the given query .
5369	RawInformationQuery performs a raw query request
5370	NewClient creates a new Client .
5371	Close closes the connection .
5372	startTLSIfRequired performs a startTLS if required .
5373	Start the stream .
5374	IsEncrypted returns true if the client is encrypted .
5375	Recv gets a chat message .
5376	Send message .
5377	SendOrg sends an org to the server
5378	SendKeepAlive sends a keep - alive message to the server .
5379	SendHtml sends a message to a chat .
5380	nextStart returns the next XML start element
5381	JoinProtectedMUC is used to join the presence of a message in the server .
5382	LeaveMUC is used to leave the presence of a MUC
5383	AttachBuffer adds a buffer to the message .
5384	Attach attaches to the given file .
5385	Inline attaches a file to the current message .
5386	AddHeader adds a new header
5387	Toxist returns a list of all To recipients
5388	Bytes returns the serialized message
5389	Send a message
5390	GetHeader returns the header value for the given header .
5391	GetHeaderValues returns a slice of values for a given header .
5392	SetHeader adds a header to the envelope .
5393	AddHeader adds a new header to the envelope .
5394	DeleteHeader deletes a single header
5395	AddressList returns the address list for the given key .
5396	Clone returns a deep copy of the envelope .
5397	ReadEnvelope reads an envelope from r .
5398	EnvelopeFromPart creates an Envelope from a part .
5399	parseTextOnlyBody parses the Content - only Content - Type header .
5400	Parse multipart body
5401	matchHTMLBodyPart returns true if the part is a valid HTML markup .
5402	ensureCommaDelimitedAddresses ensures that the given string contains a comma delimited address .
5403	Date sets the date .
5404	From sets the From header .
5405	Subject sets the email message subject .
5406	To adds an email address to the list of recipients .
5407	ToAddrs configures the list of recipients to send to .
5408	CC adds a CC email address to the list .
5409	CCAddrs sets the addresses of the email addresses .
5410	ReplyTo sets the reply to the email address .
5411	Header adds a new header to the message .
5412	AddAttachment adds a part to the mail message .
5413	AddFileAttachment adds an attachment to the email buffer .
5414	AddInline adds an inline part to the mail message .
5415	Equals returns true if this mailBuilder equals the other
5416	Encode encodes the part .
5417	encodeHeader encodes the part s header .
5418	encodeContent encodes the part into b .
5419	selectTransferEncoding returns the transfer encoding for the given content .
5420	setParamValue is used to set a single string value
5421	NewBase64Cleaner creates a new Base64Cleaner
5422	Helper function to decode the header
5423	parseMediaType parses a media type string .
5424	fixMangledMediaType replaces the MIME media type with the given separator .
5425	Detect multipart message
5426	detectBinaryBody returns true if the body is a binary body .
5427	BreadthMatchFirst returns the first part of a part .
5428	Reads all parts that match the given matcher .
5429	DepthMatchFirst returns the first part of a part .
5430	DepthMatchAll returns all parts that match the given matcher .
5431	ToASCII converts a string to NFC .
5432	NewPart returns a new Part object .
5433	AddChild adds a child to p .
5434	TextContent returns true if the part is a text content type .
5435	setupHeaders parses the MIME parts and adds them to the part .
5436	setupContentHeaders parses the Content - Type header .
5437	convertFromDetectedCharset attempts to convert the charset to a reader . If the charset is not detected an error is returned .
5438	Clone returns a deep copy of p .
5439	ReadParts reads the parts from the given io . Reader .
5440	Parse parts into parent Part struct
5441	UUID returns a random UUID
5442	NewQPCleaner creates a new QPCleaner
5443	Error returns the string representation of the error
5444	addError adds an error
5445	addWarning adds a warning .
5446	Wrap takes a slice of strings and breaks up to max bytes .
5447	ConvertToUTF8String converts a byte slice to a string
5448	JoinAddress joins a slice of email addresses
5449	Printf is fmt . Printf
5450	EnvelopeToMarkdown writes the given envelope to the given writer .
5451	FormatPart formats a part .
5452	newBoundaryReader returns a new boundaryReader .
5453	Read implements the io . Reader interface .
5454	Next returns true if the boundary ends in the boundary .
5455	Parse parses the given buffer at offset .
5456	Assign a value to the symbol .
5457	NewRClient creates a new RClient
5458	NewRClientWithAuth creates a new RClient
5459	Register registers a custom generator .
5460	Fuzz fuzzes all fields in e
5461	findFakeFunctionFor returns a function that can be used to find a fake function .
5462	Apply applies the given options .
5463	ToOption converts options to an Option .
5464	waitThenClose blocks until the channel is closed .
5465	send sends the event to the channel .
5466	NewMovingAverage creates a new MovingAverage with the given age
5467	Set sets the value of the EWMA .
5468	calcKeys50 is used to calculate the kdf - kdf - vdf - vdf - 1 kdf - 1
5469	getKeys get the keys from disk
5470	checkPassword checks if the password is valid
5471	parseFileEncryptionRecord parses a file encryption record .
5472	parseEncryptionBlock parses a single encryption block .
5473	newArchive50 creates a new fileBlockReader .
5474	Read implements io . Reader interface .
5475	ReadByte reads a single byte from the stream .
5476	newCipherBlockReader returns a new cipherBlockReader .
5477	newAesDecryptReader returns a new cipherBlockReader .
5478	limitByteReader returns a limited byte reader .
5479	Mode returns the file s mode bits .
5480	nextBlockInFile returns the next block in the packed file .
5481	next returns the next block .
5482	Read implements the io . Reader interface .
5483	Read implements io . Reader
5484	Next returns the next file header .
5485	NewReader creates a new Reader reading from r .
5486	OpenReader opens a new volume .
5487	getV3Filter returns a v3 filter from the given code .
5488	init initializes the decoder .
5489	readBlockHeader reads the block header .
5490	readCodeLengthTable reads the code length table from the bitReader .
5491	rewrite states into states
5492	expandStates returns a slice of states that can be used to create new states .
5493	pushByte pushes a byte to the heap .
5494	successByte returns the next byte in the state .
5495	accContext returns a context for the next state .
5496	calcAes30Params calculates the key and iv salt for a passphrase .
5497	parseDosTime converts a 32 - bit integer to a time . Time .
5498	decodeName extracts the name from buf .
5499	readExtTimes reads the extension time of a file .
5500	readBlockHeader reads a block header from the archive .
5501	newArchive15 returns a new fileBlockReader .
5502	readFilter5Data reads the filter5 data .
5503	writeByte writes a byte c to the buffer .
5504	copyBytes copies bytes from the buffer .
5505	read reads from the window .
5506	queueFilter adds a new filter block to the queue .
5507	processFilters processes the next filter .
5508	fill fills the decoder from the decoder .
5509	Read implements the io . Reader interface .
5510	readFull is a wrapper around io . ReadFull
5511	findSig returns the signature version of br .
5512	execute executes the given command .
5513	newVM creates a new VM from memory .
5514	limitBitReader returns a bit reader that reads n bytes from the given bit reader .
5515	readUint32 reads a uint32
5516	Step3 step 3 .
5517	Stem stemmed words from a word .
5518	step6 performs step 6 step step .
5519	step5 performs step 5 .
5520	step2a performs step2a step step .
5521	Step 4 . 3
5522	Stem converts a word to a stemmed string .
5523	step1c is step1c .
5524	step3 performs step 3 step step .
5525	isStopWord returns true if the word is a stop word .
5526	capitalizeYUI capitalizes the words in a word .
5527	step2 performs step step step .
5528	step3 performs step 3 .
5529	step0 performs step step step .
5530	VnvSuffix returns the index of the first vowel in a word
5531	step1 performs step step step .
5532	Step2a step step step .
5533	removePerfectiveGerundEnding removes the stem from the stemring
5534	removeAdjectivalEnding removes the first end of the word .
5535	Step2b is the step2 step step step .
5536	Step 4 .
5537	step5 performs step 5 .
5538	Stem stem word .
5539	Stem stem word .
5540	isStopWord returns true if the word is stop word
5541	isStopWord returns true if the word is a stop word
5542	New creates a new SnowballWord from a string
5543	Remove last n runes
5544	resetR1R2 resets the R1 start of the word
5545	Slice returns a slice of runes from the word .
5546	FitsInR1 checks if the word is in the R1
5547	FitsInR2 checks if the word is in the R2 start
5548	FitsInRV returns true if the word is in the set .
5549	FirstPrefix finds the first prefix of the word .
5550	HasSuffixRunes returns true if the word ends with the given suffix runes .
5551	FirstSuffixIfIn is like FirstSuffixWord but returns the longest suffix runes in the slice .
5552	RemoveFirstSuffixIfIn is like RemoveSuffix but returns the longest suffix runes and suffix runes .
5553	RemoveFirstSuffix removes the first suffix of the word
5554	FirstSuffix returns the first suffix of the word .
5555	Preprocess words in a word
5556	step0 is step .
5557	step1b performs step 1 step .
5558	Step2b is step2b step step .
5559	capitalizeYs takes a word and capitalizes it .
5560	unapitalizeYs modifies the words in a word
5561	stemSpecialWord returns the stemmed word .
5562	isShortWord checks if a word is a short word
5563	step1a performs step 1 step .
5564	Set adds a value to the global map .
5565	Get returns the value associated with the given key .
5566	Cleanup removes all data associated with the current goroutine .
5567	getValues returns the values for the current goroutine .
5568	linkGRs links parent goroutines to parent goroutines
5569	unlinkGRs removes all goroutines associated with this goroutine .
5570	AppUri generates an app uri for an app
5571	CurlAppWithTimeout is a wrapper around curl . CurlAppWithTimeout
5572	CurlApp is a wrapper around curl . CurlAndWait
5573	CurlAppRoot is the same as CurlApp except it returns the full path to the app .
5574	GetTags returns a slice of tags with the given prefix and terminator .
5575	GetTagsAsUniqueStrings returns a slice of unique tags with the given prefix .
5576	isTerminator returns true if the rune is in the list of terminators .
5577	uniquify removes duplicate elements from an array
5578	New creates a new location middleware .
5579	Get returns the value associated with the context .
5580	GenerateRSAKeyPair generates a RSA private key pair
5581	Verify checks that the signature is valid .
5582	Encrypt encrypts the given data using rsa .
5583	Sign implements rsa . SignPKCS1 .
5584	GetPublic returns the public key
5585	Decrypt decrypts the given data using RSA private key
5586	UnmarshalRsaPrivateKey unmarshals a RSA private key .
5587	GenerateKeyPair generates and returns new private key pair .
5588	GenerateKeyPairWithReader generates a new key pair with the given type and bits .
5589	GenerateEKeyPair generates an ECDSA private key pair
5590	UnmarshalPublicKey unmarshals a public key .
5591	MarshalPublicKey encodes a PubKey into a protobuf message .
5592	UnmarshalPrivateKey unmarshals a PrivateKey .
5593	MarshalPrivateKey encodes a private key into a protobuf format .
5594	KeyEqual returns true if the two keys are equal .
5595	GenerateECDSAKeyPair generates a new private key and public key pair .
5596	GenerateECDSAKeyPairWithCurve generates a new private key pair with the given curve .
5597	ECCDSAKeyPairFromKey converts an ECDSA private key to a PrivateKey
5598	UnmarshalECDSAPrivateKey unmarshals a private key
5599	UnmarshalECDSAPublicKey unmarshals a public key
5600	Equals returns true if the two keys are equal
5601	Sign signs the data with the given data .
5602	Equals returns true if the two keys are equal
5603	Verify returns true if the data is a valid signature .
5604	GenerateSecp256k1Key generates a new secp256k1 private key pair .
5605	UnmarshalSecp256k1PrivateKey unmarshals a secp256k1 private key .
5606	UnmarshalSecp256k1PublicKey unmarshals a secp256k1 public key .
5607	Equals returns true if the two keys are equal
5608	Sign signs the data using the secp256k1 private key .
5609	Equals returns true if the two keys are equal
5610	Verify returns true if the data is valid .
5611	Raw returns the copy of this private key
5612	Sign implements the ed25519 signature .
5613	Equals returns true if the two keys are equal
5614	Verify returns true if data is a valid signature .
5615	UnmarshalEd25519PublicKey unmarshals a public key
5616	UnmarshalEd25519PrivateKey returns an Ed25519 private key .
5617	EditScriptForStrings is similar to EditScriptForStrings except that it applies backtrace .
5618	EditScriptForMatrix returns the script for the given matrix .
5619	WriteMatrix writes a matrix to a writer
5620	New returns a new Lockfile instance
5621	GetOwner returns the owner of the lockfile .
5622	TryLock tries to lock the given lockfile . If the lockfile already exists it is overwritten .
5623	Unlock unlocks the lockfile .
5624	NewBase creates a new Base with the given configs .
5625	SetFallbackLogger sets the fallback logger
5626	AddLogger adds a logger
5627	LogWithTime logs a message with the specified timestamp and timestamp .
5628	Log sends a message to the log with the given parameters .
5629	Warnm is a wrapper for Warnm .
5630	NewTemplateWithFuncMap returns a new template with the given funcMap .
5631	Execute executes the template with the given message .
5632	NewTemplateMsg creates a new template message
5633	NewLogAdapterFor returns a new LogAdapter for the given base and attrs .
5634	SetAttr sets a key - value pair
5635	LogWithTime implements the LogAdapter interface .
5636	Log implements the LogAdapter interface .
5637	Dbgm is a wrapper around Debugm
5638	NewAttrsFromMap creates a new Attrs from a map
5639	NewAttrsFromAttrs returns a new Attrs object .
5640	MergeAttrs merges the given attributes into this Attrs object .
5641	SetAttr sets a value for a given key .
5642	GetAttr returns a value for a given key
5643	RemoveAttr removes an attribute
5644	Attrs returns a copy of the attributes .
5645	Debugm is the same as Debugm .
5646	Infom is an alias for Infom .
5647	Warningm is the same as Warningm .
5648	Errm is the same as Errorm but allows you to pass a message to Errorm .
5649	Errorm is a custom error message
5650	Fatalm is a convenience wrapper around fmt . Fatalm
5651	Dief is a convenience wrapper around the standard library .
5652	Diem is a convenience wrapper around Diem .
5653	ToLogLevel converts a string to LogLevel .
5654	CallErr calls f in a separate goroutine
5655	New creates a new stackdriver hook
5656	Fire starts the logrus logrus .
5657	Levels is an Option to set the log levels to use .
5658	ProjectID specifies the project ID .
5659	EntriesService is an Option to set the entries service
5660	LoggingService is an Option to set the logging service
5661	ErrorService is an Option to set the error reporting service
5662	HTTPClient returns an Option that sets the HTTP client to use .
5663	MonitoredResource sets the monitored resource .
5664	ErrorReportingLogName is an Option to set the name of the error logging log
5665	Labels sets the labels for the hook
5666	PartialSuccess is an Option to set the success flag .
5667	GoogleComputeCredentials returns an Option that sets the Google Cloudstack metadata for the given service account .
5668	NewEncoder returns an encoder that writes to w .
5669	NewDecoder returns a new decoder .
5670	NewStreamEncoder returns a new StreamEncoder .
5671	NewStreamDecoder returns a new StreamDecoder .
5672	Register registers a custom codec for the given mimetype .
5673	Unregister removes a custom mimetype .
5674	Lookup returns the codec for the given mimetype .
5675	Codecs returns a map of registered codecs .
5676	Type returns the string representation of the error
5677	Install registers an adapter .
5678	AdapterOf returns the adapter for the given type .
5679	AppendDuration appends d to b .
5680	fmtInt formats a uint64 into buf .
5681	NewDecoder creates a new decoder .
5682	NewStreamDecoder creates a new StreamDecoder .
5683	Unmarshal parses b and stores the result in v .
5684	String returns the string representation of the type .
5685	zeroValueOf returns the zero value of t .
5686	NewValueParser creates a new ValueParser
5687	ParseTag parses a tag string .
5688	NewEncoder returns an encoder that writes to w .
5689	NewStreamEncoder creates a new stream encoder
5690	NewPrettyEncoder returns an encoder that writes to w .
5691	NewPrettyStreamEncoder returns a new StreamEncoder .
5692	Marshal encodes v into a byte slice .
5693	NewEncoder creates a new Encoder .
5694	EncodeArray encodes an array .
5695	EncodeMap encodes a map .
5696	NewStreamEncoder creates a new stream encoder
5697	Open initializes the encoder .
5698	Close closes the encoder .
5699	Encode encodes v into the stream .
5700	newStructType creates a new struct type .
5701	lookup returns the cached structType for the given type .
5702	clear removes all keys from the cache .
5703	CheckUint64Bounds returns an error if the uint64 overflowed .
5704	CheckInt64Bounds returns an error if the int64 overflows .
5705	NewDecoder creates a new Decoder .
5706	Decode decodes the given value into v .
5707	DecodeArray decodes an array value .
5708	DecodeMap decodes a map value .
5709	NewStreamDecoder returns a new StreamDecoder .
5710	Len returns the number of bytes written .
5711	Err returns the last error encountered .
5712	Decode reads a value from the stream .
5713	Encoder creates a new stream encoder .
5714	Init the default flags
5715	LevelFromString returns the Level from a string
5716	NewBackend returns a new instance of the backend .
5717	callsite returns the file and line number of the call stack
5718	print writes a log message to the standard logger .
5719	Logger returns a logger that implements the Backend interface .
5720	Trace logs a message at level Trace .
5721	Tracef prints a trace message .
5722	Debug logs a message .
5723	Debugf prints a debug log message .
5724	Info logs a message at level Info .
5725	Infof logs a message at level INFO .
5726	Warn logs a message at level Warn .
5727	Warnf logs a message at level Warn .
5728	Error logs an error message .
5729	Errorf logs a message at ERROR level .
5730	Critical logs a message at the critical level .
5731	Criticalf logs a message at the critical level .
5732	Level returns the log level .
5733	SetLevel sets the log level .
5734	Concat concatenates two Permission objects
5735	HasPermission returns true if the permission is allowed by the given roles
5736	ConcatPermissioner combines multiple Permissioners into a single Permissioner
5737	HasPermission returns true if the given permission is in the list of roles
5738	Register a checker
5739	NewPermission creates a new Permission
5740	Get returns a Checker by name
5741	isPtrFromHeap returns true if the given address is pointer to the heap .
5742	IsPtr returns true if the given address is a pointer to a pointer .
5743	FindObject finds the object at a given address
5744	ForEachObject iterates over all objects in the process .
5745	ForEachRoot iterates over all roots and calls fn for each root .
5746	Addr converts x to core . Address
5747	Size returns the size of the heap .
5748	Type returns the type of the object .
5749	ForEachRootPtr calls fn for each root of the given root .
5750	Edges1 calls fn for each element in r .
5751	setHeapPtr sets the heap pointer to the given address
5752	findHeapInfo returns the heapInfo for the given address .
5753	allocHeapInfo returns the heapInfo for the given address .
5754	runtimeName returns the runtime name for the type .
5755	readRuntimeConstants reads the runtime constants from the process .
5756	add adds a function to the table .
5757	sort sorts the entries in the table .
5758	find finds the function with pc .
5759	read reads the value from the core .
5760	read varint
5761	useLine returns the use line for a command
5762	commandPath returns the full path of a command
5763	readCore reads and parses a core . Process from the config .
5764	typeName returns the type name for x .
5765	fieldName returns a field name for the specified offset .
5766	typeFieldName returns the field name for the given type .
5767	FindFunc finds a function by pc .
5768	Core parses a core . Process .
5769	Address returns the address of the region .
5770	Int returns the value of the region .
5771	Uintptr returns the uint64 value of the region .
5772	Cast returns the region with the given type .
5773	Deref returns a copy of the region .
5774	Uint64 returns the uint64 value of the region .
5775	Uint32 returns the current uint32 as a uint32 .
5776	Int32 returns the int32 value of the region .
5777	Uint16 returns the uint16 value of the region .
5778	Uint8 returns the uint8 value of the region .
5779	String returns the string value of the region .
5780	SlicePtr returns a copy of the region .
5781	SliceLen returns the length of the slice .
5782	Field returns the region with the given field f .
5783	ReadUint8 returns the uint8 value at the given address
5784	ReadUint16 returns the uint16 at the given address .
5785	ReadUint32 reads a uint32 from the core file .
5786	ReadUint64 returns a uint64 value at the given address .
5787	ReadInt8 reads an int8 from the address
5788	ReadInt16 reads an int16 from the address
5789	ReadInt32 reads an int32 from the address
5790	ReadInt64 reads an int64 from the address
5791	ReadUintptr reads a uint64 from the process .
5792	ReadPtr returns the address at the given address
5793	ReadCString reads a string from the address
5794	Source returns the name of the source file .
5795	findMapping returns the mapping for a given address
5796	Max returns the maximum of two addresses
5797	Min returns the minimum of two addresses
5798	Align returns the address of x .
5799	initialize initializes the dom node .
5800	calculate iterates over all vertices in the tree .
5801	eval evaluates v .
5802	compress adds a version of v to d .
5803	link adds v to the current ancestor chain .
5804	reverse reverses the order of the dom .
5805	calcSize calculates the size of a virtual node .
5806	objField returns a field name for the object at offset off .
5807	Readable returns true if the address is readable .
5808	ReadableN returns true if n bytes can be read .
5809	splitMappingsAt splits mappings at a given address .
5810	DynamicType returns the type of the interface at the given address .
5811	Create implements btrfs . Filesystem .
5812	Resolve resolves an IPv6 address
5813	Equal returns true if two tokens are the same .
5814	newDefaultClassifier creates a new token classifier .
5815	Next returns the next token
5816	NewTokenizer creates a new Tokenizer
5817	Split splits a string into words
5818	Between returns the string between left and right
5819	BetweenF is a convenience wrapper around Between
5820	Camelize returns a copy of the given string
5821	Capitalize capitalizes a string .
5822	CharAt returns the character at the specified index .
5823	CharAtF returns a func that can be used to get the string at the given index .
5824	ChompLeft removes the prefix from the string
5825	ChompLeftF is a function that returns a function that accepts strings .
5826	ChompRight removes suffix from s
5827	ChompRightF returns a function that removes characters from the given string .
5828	ClassifyF returns a func for Classify
5829	Clean a string
5830	Dasherize a string
5831	EscapeHTML is used to escape HTML
5832	DecodeHTMLEntities reverses the unescaping of a string
5833	EnsurePrefixF returns a function that adds the prefix to the given string .
5834	EnsureSuffixF returns a function that adds the given suffix to the given string .
5835	Humanize returns a human - readable version of the string
5836	Iif returns true if the given condition is true otherwise false
5837	IndexOf returns the index of needle in s or - 1 if not found .
5838	IsLower returns true if the string is lowercase .
5839	IsUpper returns true if the string s is a uppercase letter .
5840	Left returns the last n characters of the string
5841	LeftF is a wrapper for LeftF
5842	Al Letters converts a string to a slice of strings
5843	Lines returns a slice of all the lines in s .
5844	Map iterates over the elements of an array and returns a new slice .
5845	Match returns true if s matches pattern
5846	tasks is the main entry point for godoc .
5847	Pad a string to the length of the string
5848	PadF returns a function that pads the given string with n bytes .
5849	PadLeft pad the string with n characters
5850	PadLeftF is a wrapper around PadLeft .
5851	PadRightF returns a function that can be padded to the given string .
5852	Pipe takes a string and passes it to the given string
5853	QuoteItems is a wrapper around strconv . QuoteItems
5854	ReplaceF returns a function that replaces all occurrences of old string
5855	ReplacePatternF is a wrapper around ReplacePattern .
5856	Reverse reverses the given string
5857	RightF returns a function that can be used as a string .
5858	Slice returns a slice of strings from the string slice .
5859	SliceF is a wrapper for Slice .
5860	SliceContains checks if a given string is contained in a slice
5861	SliceIndexOf returns the index of a given string or - 1 if not found
5862	Slugify converts a string to a slug
5863	StripPunctuation removes leading and trailing whitespace characters .
5864	StripTags removes all tags from the string
5865	Substr returns the string at index n .
5866	SubstrF returns a function that can be used to create a string slice of strings .
5867	TemplateWithDelimiters is similar to TemplateWithDelimiters but accepts a map of strings
5868	ToArgv converts a string to a list of arguments
5869	ToBool converts a string to a boolean
5870	ToBoolOr convert string to bool
5871	ToIntOr cast string to int
5872	ToFloat32Or convert string to float32
5873	ToFloat64Or convert string to float64
5874	UnescapeHTML unescapes the given string .
5875	WrapHTML wraps the given string with HTML tags .
5876	WrapHTMLF returns a func that wraps HTML with the given tag .
5877	ReapChildren reaps all children of pids to pids
5878	SdNotify sends a systemd notification to the system
5879	NewAuthenticator creates a new Authenticator
5880	Endpoint returns an http . Handler that responds with the given prefix
5881	Unique removes duplicates from ids
5882	Contains returns true if the given object id exists in the list
5883	Includes returns true if all elements in a subset are included in the subset .
5884	Require adds flags to the given model .
5885	Enqueue enqueues a job
5886	A authorizer
5887	Run returns an Authorizer for the given enforcer .
5888	And combines two enforcer s and b .
5889	Or returns an authorizer that matches the authorizer
5890	Enqueue adds a job to the queue .
5891	Callback creates a callback for the queue
5892	NewWatcher creates a new Watcher
5893	Add a stream
5894	Action returns a fire . Action that calls fire .
5895	Write returns true if the operation is a write operation .
5896	String returns the string representation of the operation .
5897	Query returns a query that matches the filters
5898	Respond sends the response to the ResponseWriter .
5899	EnsureApplication ensures the application is valid
5900	EnsureFirstUser ensures that the user exists in the store
5901	Callback returns a fire . callback
5902	OpenStream opens a stream .
5903	Close closes the stream
5904	AddTokenIndexes adds tokens index indexes to the indexer .
5905	GetTokenData returns token data
5906	Sets token data
5907	ValidSecret returns true if the secret matches the given secret hash .
5908	HashSecret hashes the secret .
5909	ValidPassword returns true if the given password matches the given password .
5910	HashPassword hashes the password .
5911	MustCreateStore is like CreateStore but panics if an error occurs .
5912	CreateStore creates a new store
5913	C returns the collection for the model .
5914	NewAssetServer creates a new asset server
5915	DefaultGrantStrategy is the default strategy .
5916	DefaultTokenData returns the default token data for the resource owner .
5917	GenerateToken generates a signed JWT token .
5918	ParseToken parses a token from the policy
5919	E adds a new rule to a firewall rule .
5920	MustGet is like Get but panics if the field is not found .
5921	MustSet set value to given value .
5922	NewGroup creates a new group
5923	Add adds controllers to the controller .
5924	Endpoint returns an http . Handler for the group
5925	Add adds an index to the indexer .
5926	AddRaw adds an index to the indexer
5927	Ensure ensures that all indexes exist .
5928	NewCatalog creates a new Catalog .
5929	Add adds a model to the catalog .
5930	All returns all the models in the catalog .
5931	Visualize generates a visualization of the Catalog .
5932	NewErrorReporter returns a function that writes to the given writer .
5933	EnsureIndexes ensures that all indices exist .
5934	E error message
5935	Compose returns an http . Handler that invokes the last item in the chain .
5936	Includes checks whether all items in a subset are included in the subset .
5937	Intersect returns a list of strings that are contained in listA .
5938	E creates a new error
5939	RootTracer is a middleware that tags all request requests
5940	NewTracerFromRequest creates a new Tracer from an HTTP request .
5941	NewTracer creates a new tracer
5942	Push adds a new span to the stack
5943	Last returns the last span .
5944	Tag adds a tag to the last trace
5945	Log a key value pair
5946	Context returns a new context with the last span added .
5947	Pop removes the last span .
5948	Finish finalizes all accumulated spans .
5949	NewPool creates a new empty pool
5950	Add a new task to the pool
5951	Run the pool
5952	NewBodyLimiter creates a new BodyLimiter
5953	LimitBody overrides the original body of the request .
5954	C creates a new callback .
5955	Only returns a Matcher that matches any of the given operations
5956	BasicAuthorizer returns a callback that can be used to access HTTP requests .
5957	ModelValidator returns an callback that can be used to validate the model .
5958	TimestampValidator is a callback that can be used when creating a new model .
5959	RelationshipValidator returns a callback that can be used to validate models
5960	Inspect the number of workers
5961	NewRule creates a new Rule
5962	AddUnmatch adds a regular expression to the list of unmatchions .
5963	Run the given content
5964	NewSecret creates a new secret
5965	NewObject returns a new object
5966	SetMetadata sets metadata for given key
5967	GetMetadata returns the value associated with the given key .
5968	GetMetadataAll returns a map of metadata key value pairs
5969	SetRule sets the regexp rule
5970	SetObject sets the object
5971	SetNline sets the nline number
5972	SetContent sets the content of an exception .
5973	Run returns true if the exception matches the given secret .
5974	AddRule adds a new rule to the list
5975	LoadRulesFromFile loads rules from a file
5976	LoadRulesFromDir loads rules from a given directory
5977	DefaultRulesPath returns the default rules path
5978	EnableRule enables the given rule .
5979	DisableRule disables the given rule .
5980	Enable rule by regexp
5981	Disable rule by regexp
5982	LoadObjects loads the list of objects from the source
5983	Group objects by metadata
5984	GroupObjectsByPrimaryKeyHash returns a map of group objects
5985	AddException adds an exception
5986	LoadExceptionsFromFile loads all exceptions from a file
5987	Print plain strings
5988	printJsonResults prints results to stdout
5989	NewXor64Source creates a new Xor64Source with a seed .
5990	xor64 returns the uint64 value of x .
5991	next returns the next uint64 value .
5992	Seed initializes the Xor64Source with a seed .
5993	NewFrameSet creates a new FrameSet from a frange .
5994	handleMatch parses a set of strings into a FrameSet .
5995	Index returns the index of the frame in the set .
5996	Frame returns the frame at the given index .
5997	HasFrame returns true if the frame is in the set .
5998	FrameRangePadded returns a padded string of all frames in the set .
5999	Normalize returns a new FrameSet with the contents of s .
6000	FramesToFrameRange converts a slice of frames to a string
6001	frameRangeMatches returns a slice of strings that match the given frange .
6002	toRange returns a range of integers from start to end .
6003	NewWorkManager returns a new workManager
6004	processSources is a thread - safe version of processSources .
6005	isInputDone returns true if all inputs have been processed .
6006	closeInputs closes the input directories .
6007	load loads tasks from the given paths .
6008	loadRecursive recursively load all the files in the given paths
6009	preparePaths takes a list of paths and returns a set of filenames
6010	PadFrameRange takes a string representation of a frame and pads it with padding
6011	zfillString fills z with zeros z with z .
6012	zfill int with zeros
6013	NewInclusiveRange creates a new InclusiveRange
6014	String returns a string representation of the InclusiveRange .
6015	End returns the end of the range .
6016	Len returns the number of bytes in the range .
6017	Min returns the minimum value of the range .
6018	Max returns the maximum value in the range .
6019	Contains returns true if the given value is in the range .
6020	closestInRange returns the closest value closest to the given value .
6021	Index returns the index of the given value
6022	String returns a string representation of the InclusiveRanges .
6023	Len returns the number of blocks in the list .
6024	Start returns the index of the first block in the list .
6025	End returns the index of the end of the list .
6026	Min returns the minimum value in the range .
6027	Max returns the maximum value in the list .
6028	numRanges returns the number of valid ranges .
6029	rangeAt returns the inclusiveRange at the given index .
6030	Append adds an inclusive range to the list .
6031	AppendUnique adds a new range to the list .
6032	Contains returns true if the given value contains the given value .
6033	Index returns the index of the first value in the list .
6034	FrameRange returns the frame range of the sequence .
6035	FrameRangePadded returns the first frame in the sequence .
6036	Index returns the file at idx .
6037	SetDirname sets the directory name
6038	SetPadding sets the padding for the sequence
6039	SetPaddingStyle sets the padding for the sequence .
6040	SetExt sets the file extension .
6041	SetFrameRange sets the frame range .
6042	Len returns the number of frames in the sequence .
6043	String returns a string representation of this FileSequence .
6044	Copy returns a copy of the sequence
6045	NewClient returns a new client
6046	UnmarshalXML implements xml . Unmarshaler interface .
6047	UnmarshalXML implements xml . Unmarshaler for Body .
6048	Call sends an HTTP request to the API .
6049	JSONDoc loads a swagger json document
6050	AddLoader adds a loader to the spec .
6051	JSONSpec parses a JSON document and returns the parsed document .
6052	Embedded creates a Document from a JSON document .
6053	Spec loads a document
6054	Analyzed parses the swagger spec and returns a Document
6055	Expanded expands the document
6056	ResetDefinitions resets the spec definitions
6057	Pristine returns the original document
6058	OpenDb opens a database from the specified files .
6059	GetOrg returns the org name for the given ip
6060	GetRegion returns the country code for the given IP address .
6061	GetRegionName returns the region name for the country code .
6062	GetCountry returns the country code for the given IP address .
6063	NewRotatingFileHandler creates a new RotatingFileHandler
6064	Close closes the file
6065	String returns the string representation of the level .
6066	New creates a new Logger .
6067	Close closes the logger .
6068	SetLevelByName sets the log level by name .
6069	Output implements the Logger interface .
6070	OutputJson writes JSON body to the logger .
6071	Print calls Output to print to the standard logger . Arguments are handled in the manner of fmt . Print .
6072	Println calls Output to print to the standard logger . Arguments are handled in the manner of fmt . Println .
6073	Debug calls Output to print to the standard logger . Arguments are handled in the manner of fmt . Print .
6074	Debugln calls Output to print to the standard logger . Arguments are handled in the manner of fmt . Println .
6075	Error calls log . Output . Arguments are handled in the manner of fmt . Print .
6076	Errorln calls Output to print to the standard logger . Arguments are handled in the manner of fmt . Println .
6077	Info calls Output to print to the standard logger . Arguments are handled in the manner of fmt . Print .
6078	Infoln logs with args . Arguments are handled in the manner of fmt . Println .
6079	Warn calls Output to print to the standard logger . Arguments are handled in the manner of fmt . Print .
6080	Warnln calls Output to print to the standard logger . Arguments are handled in the manner of fmt . Println .
6081	NewStreamHandler creates a new StreamHandler .
6082	Right pad string to string
6083	New returns a new RSAPI instance .
6084	setupMetadata creates a map of resource names to Resource .
6085	recordTypes recursively recursively recursively recursively calculates the type name and field types .
6086	appendSorted appends the parameters to the list of action parameters .
6087	parseDataType returns the data type for the given path
6088	parseParam parses a single action param from the given path
6089	newParam creates a new ActionParam .
6090	toGoReturnTypeName returns the name of the return type .
6091	toGoTypeName returns the name of a Go type .
6092	prefixify returns a string representation of an object
6093	isBuiltInType returns true if the name is a builtin type
6094	MatchHref returns true if the given href matches any of the action patterns .
6095	Substitute takes a set of variables and returns a new pattern and a slice of variables that are missing .
6096	MarshalJSON implements json . Marshaler
6097	writeMultipartParams writes the given payload to the multipart writer .
6098	PerformRequest sends an HTTP request to the API .
6099	PerformRequestWithContext is used to perform a request with a context
6100	LoadResponse takes an http . Response and parses the Location header
6101	ScheduleLocator creates a new schedule locator .
6102	TemplateLocator returns a new instance of TemplateLocator .
6103	fetchDetails populates sshConfig structs with the specified environment details
6104	buildAliases builds the aliases for the SSHConfig .
6105	serverArray retrieves a single server array
6106	server returns the server with the given name
6107	toPackageName converts a version string to a package name .
6108	loadFile loads the given file .
6109	Main entry point
6110	Run the given command line
6111	CreateJSONResponse creates an http . Response from a byte array
6112	AccountLocator creates a new account locator
6113	AccountGroupLocator creates a new AccountGroupLocator .
6114	AlertLocator creates a new AlertLocator .
6115	AlertSpecLocator creates a new AlertSpecLocator .
6116	AuditEntryLocator creates a new AuditEntryLocator
6117	BackupLocator creates a BackupLocator .
6118	ChildAccountLocator creates a new ChildAccountLocator .
6119	CloudLocator creates a cloud locator .
6120	CloudAccountLocator creates a cloud account locator .
6121	CookbookLocator returns a new instance of CookbookLocator .
6122	CookbookAttachmentLocator creates a new CookbookAttachmentLocator .
6123	CredentialLocator creates a new CredentialLocator .
6124	DatacenterLocator creates a new DatacenterLocator
6125	DeploymentLocator creates a DeploymentLocator .
6126	HealthCheckLocator returns a new instance of HealthCheckLocator .
6127	IdentityProviderLocator creates a new IdentityProviderLocator
6128	ImageLocator creates a new image locator
6129	InputLocator returns a new InputLocator .
6130	InstanceLocator creates a new instance locator .
6131	InstanceTypeLocator creates a new instance type locator .
6132	IpAddressLocator creates a new IP address locator .
6133	IpAddressBindingLocator creates a new IP address binding locator
6134	MonitoringMetricLocator creates a new MonitoringMetricLocator .
6135	MultiCloudImageLocator creates a new multi cloud image locator .
6136	MultiCloudImageMatcherLocator creates a new instance of MultiCloudImageMatcherLocator .
6137	MultiCloudImageSettingLocator creates a LocationLocator for a multi - cloud image setting .
6138	NetworkLocator creates a new network locator .
6139	NetworkGatewayLocator creates a new network gateway locator .
6140	NetworkOptionGroupLocator creates a new network option group locator
6141	NetworkOptionGroupAttachmentLocator creates a new instance of NetworkOptionGroupAttachmentLocator .
6142	Oauth2Locator creates a new Oauth2Locator .
6143	PermissionLocator returns a PermissionLocator for the given URL .
6144	PlacementGroupLocator creates a new PlacementGroupLocator .
6145	PreferenceLocator creates a new PreferenceLocator .
6146	PublicationLocator creates a new instance of a publicationLocator .
6147	PublicationLineageLocator creates a new publicationLineageLocator .
6148	RecurringVolumeAttachmentLocator creates a new RecurringVolumeAttachmentLocator .
6149	RepositoryLocator creates a new RepositoryLocator .
6150	RepositoryAssetLocator creates a RepositoryAssetLocator .
6151	ResourceGroupLocator creates a new resource group locator .
6152	RightScriptLocator returns a locator for the right script
6153	RightScriptAttachmentLocator returns a locator for the right script attachment
6154	RouteLocator creates a new RouteLocator
6155	RouteTableLocator creates a new RouteTableLocator .
6156	RunnableBindingLocator returns a new instance of RunnableBindingLocator .
6157	SchedulerLocator creates a new SchedulerLocator .
6158	SecurityGroupLocator creates a SecurityGroupLocator .
6159	SecurityGroupRuleLocator creates a SecurityGroupRuleLocator .
6160	ServerLocator returns a new ServerLocator .
6161	ServerArrayLocator creates a new ServerArrayLocator .
6162	ServerTemplateLocator creates a new ServerTemplateLocator .
6163	ServerTemplateMultiCloudImageLocator creates a new server - cloud image locator .
6164	SessionLocator creates a new session locator .
6165	SshKeyLocator creates a new SshKeyLocator .
6166	SubnetLocator creates a SubnetLocator .
6167	TagLocator returns a TagLocator .
6168	TaskLocator creates a new TaskLocator .
6169	UserLocator creates a new UserLocator .
6170	UserDataLocator creates a new UserDataLocator .
6171	VolumeLocator creates a new VolumeLocator .
6172	VolumeAttachmentLocator creates a new VolumeAttachmentLocator .
6173	VolumeSnapshotLocator creates a new VolumeSnapshotLocator .
6174	VolumeTypeLocator creates a VolumeTypeLocator .
6175	RegisterCommands registers the actioncommands
6176	ShowCommandHelp displays help for the given command
6177	ShowAPIActions lists API actions
6178	ShowHelp displays the help for the command
6179	ParseCommandAndFlags parses the given command and flags and returns a CommandTarget and flags .
6180	validateFlagValue returns an error if the value is invalid
6181	buildQuery builds a APIParams from a list of APIParams
6182	buildPayload takes a list of APIParams and normalizes it into a APIParams object .
6183	shortenPattern takes a pattern and returns a copy of the pattern and a bool indicating if it matches the pattern
6184	cleanDescription removes all required security information from the doc
6185	fileExists checks if a given file exists
6186	AnalysisSnapshotLocator creates a new AnalysisSnapshotLocator .
6187	BudgetAlertLocator creates a new BudgetAlertLocator .
6188	CloudBillLocator creates a new CloudBillLocator .
6189	CloudBillMetricLocator creates a CloudBillMetricLocator .
6190	CurrentUserLocator returns a new instance of CurrentUserLocator .
6191	InstanceCombinationLocator creates a new instance locator .
6192	InstanceMetricLocator creates a new instance metric locator .
6193	InstanceUsagePeriodLocator creates a new instance usage period locator .
6194	PatternLocator creates a new PatternLocator .
6195	ReservedInstanceLocator creates a new ReservedInstanceLocator .
6196	ReservedInstancePurchaseLocator creates a new ReservedInstancePurchaseLocator .
6197	ScenarioLocator creates a new ScenarioLocator .
6198	ScheduledReportLocator creates a new ScheduledReportLocator .
6199	TempInstancePriceLocator creates a new TempInstancePriceLocator .
6200	UserSettingLocator creates a UserSettingLocator .
6201	readAllAsync wraps ioutil . ReadAll for ioutil . ReadAll .
6202	extractArg extracts the value from the args
6203	write writes b to the output file .
6204	AppliedPolicyLocator creates a new applied policy locator .
6205	ApprovalLocator creates a new ApprovalLocator .
6206	In IncidentLocator creates a new IncidentLocator .
6207	PolicyTemplateLocator creates a new instance of PolicyTemplateLocator .
6208	PublishedTemplateLocator creates a new instance of publishedTemplateLocator .
6209	DebugCookbookPathLocator returns a new DebugCookbookPathLocator .
6210	DockerControlLocator creates a DockerControlLocator .
6211	EnvLocator creates a new Locator .
6212	LoginControlLocator creates a LoginControlLocator .
6213	ProcLocator creates a new instance of ProcLocator .
6214	Rl10Locator creates a new Rl10Locator .
6215	TSSLocator creates a TSSocator .
6216	TSSControlLocator creates a new TSSControlLocator .
6217	TSSPluginLocator creates a new TSSPluginLocator .
6218	NewAngularWriter creates a new angular writer
6219	WriteResource renders the given resource .
6220	path returns the full path pattern
6221	mandatory returns true if the param is mandatory
6222	New returns a new API instance .
6223	FromCommandLine creates a new client from the given command line arguments .
6224	CanAuthenticate returns true if the user is authenticated .
6225	Encrypt encrypts the given text using AES - 256 .
6226	Decrypt a plaintext from a string
6227	guessType guesses the type based on the refID
6228	addType adds a new type to the api .
6229	extractCmdLineParams recursively extracts all the parameters of a ActionParam .
6230	NewMetadataWriter creates a new MetadataWriter .
6231	WriteHeader writes the header to w .
6232	WriteMetadata writes the metadata to the given writer .
6233	location returns the location for the action .
6234	New returns a new API instance .
6235	fromAPI is used to create a new api object
6236	BuildRequest builds an HTTP request for the given resource name and href .
6237	setupMetadata is used to setup the metadata
6238	NewDisplayer creates a new Displayer from a http . Response .
6239	ApplySingleExtract is similar to ApplyExtract but takes a JSON string .
6240	ApplyExtract applies the given selector to the Displayer .
6241	ApplyHeaderExtract applies the given header to the response .
6242	Output returns the output of the Displayer .
6243	NewAPIAnalyzer creates a new APIAnalyzer
6244	Analyze returns an APIDescriptor for all resources .
6245	AnalyzeAliases analyzes the aliases for the API
6246	LocatorFunc returns the Locator function for the given attributes .
6247	ParseRoute returns a list of paths for the given route .
6248	isDeprecated returns true if the given path is deprecated .
6249	isQueryParam returns true if a param is a query parameter
6250	isPathParam returns true if the given path pattern matches any of the patterns
6251	Fetch audit entries
6252	formatTime formats a time . Time .
6253	printAudits prints audit entries
6254	extractUnique returns the entries that are not in the old entries
6255	getHref returns the href of the audit entry
6256	fail adds a new line to the message .
6257	param parameters
6258	ParamsInitializer generates the initializer for the params declaration
6259	commandLine returns the command line
6260	toVerb converts a verb string to a verb
6261	escapeBackticks escapes backticks with backticks .
6262	AccountPreferenceLocator creates a new AccountPreferenceLocator .
6263	ApplicationLocator creates a new instance of ApplicationLocator .
6264	EndUserLocator returns a new EndUserLocator .
6265	NotificationRuleLocator creates a new NotificationRuleLocator .
6266	UserPreferenceLocator creates a UserPreferenceLocator .
6267	UserPreferenceInfoLocator creates a UserPreferenceInfoLocator .
6268	LoadConfig loads a ClientConfig from a JSON file .
6269	CreateConfig is used to create a config file
6270	fromAPI creates a new api from an rsapi . API .
6271	HostFromLogin creates a host from a given login string
6272	AnalyzeParam generates an ActionParam from a parameter
6273	AnalyzeAttribute extracts an ActionParam from an attribute map
6274	AnalyzeType checks if the type is valid
6275	CreateType creates an object for the given query and attributes .
6276	Ref returns the definition for the given reference
6277	Type returns the type of the object
6278	Required returns the required fields
6279	ID returns the ID of this reference
6280	Service returns the service name of the endpoint .
6281	Method returns the method name of the endpoint
6282	NewTypeRegistry creates a new TypeRegistry .
6283	GetNamedType gets the named type from the registry
6284	CreateNamedType creates a new named type
6285	CreateInlineType registers an inline type with the given name .
6286	FinalizeTypeNames adds all the named type names to the API .
6287	Merge merges another APIDescriptor into another APIDescriptor .
6288	FinalizeTypeNames sets the TypeNames field in the given map .
6289	uniqueTypeName returns a unique identifier for a given prefix
6290	mandatory params
6291	HasOptionalParams returns true if any of the parameters are present .
6292	MakeUniq takes a base string and a slice of strings and returns a unique name .
6293	NewClientWriter creates a new client writer
6294	WriteHeader writes the header .
6295	WriteResourceHeader writes a header to w .
6296	WriteType writes the type to the writer
6297	WriteResource writes the resource to the given writer .
6298	WithTrail returns a new evalCtx with the trailing added to the context .
6299	AnalyzeEndpoint analyzes an endpoint .
6300	NetworkInterfaceLocator creates a new network interface locator .
6301	NetworkInterfaceAttachmentLocator creates a new network attachment locator
6302	UnmarshalJSON implements the json . Unmarshaler interface
6303	ExecutionLocator creates a new instance of LocationLocator .
6304	NotificationLocator creates a new notification locator .
6305	OperationLocator creates a new LocationLocator .
6306	ScheduledActionLocator creates a new ScheduledActionLocator .
6307	NewBasicAuthenticator returns an Authenticator that authenticates the given username and password .
6308	NewSSAuthenticator returns an Authenticator that uses the given auther .
6309	newCookieSigner returns an Authenticator that will sign the given accountID .
6310	Sign adds the given request to the signed request .
6311	CanAuthenticate implements the InstanceSigner interface .
6312	refresh is used to refresh the cookie .
6313	Sign adds the token to the request .
6314	Sign adds the authentication header
6315	Sign signs the given request with a new session .
6316	SetHost sets the host of the auther .
6317	CanAuthenticate checks if the given host is valid .
6318	extractRedirectURL extracts the redirect URL from the response .
6319	buildURL builds a URL from a host and path
6320	GetAction gets an action by name
6321	HasLink returns true if the resource has the specified name
6322	findMatches finds all path patterns that match the given href .
6323	NewPB creates a new HTTPClient .
6324	newVariableDumpClient returns a HTTPClient that uses the given http . Client .
6325	newRawClient creates a raw HTTP client with no redirect options .
6326	DoHidden performs the given HTTP request .
6327	Do performs a HTTP request .
6328	doImp is used to do a HTTP request
6329	getClientWithoutTimeout returns a new http . Client without timeout
6330	dumpRequest is used to dump the HTTP request
6331	writeHeaders writes headers to buffer .
6332	Copy hidden headers
6333	validateCommandLine validates the command line arguments
6334	APIClient returns a CommandClient for the given name and command line
6335	RegisterClientCommands registers client commands to kingpin
6336	Interactive activates the standard logger
6337	toPattern converts verb and path into a pathPattern .
6338	WithClientIP returns a new context with the given ip .
6339	ClientIP returns the client IP from the context .
6340	NewProducer creates a new producer
6341	StartProducer creates a new producer
6342	Start starts the producer .
6343	Stop stops the producer .
6344	Publish message to topic
6345	PublishTo sends a message to the specified topic
6346	NewLocalEngine returns a new LocalEngine .
6347	validate the consumer configuration
6348	defaults sets defaults for ConsumerConfig
6349	NewConsumer creates a new consumer
6350	StartConsumer creates a new consumer
6351	Start starts the consumer .
6352	RateLimit is used to rate limit messages from a channel .
6353	Write writes the raw response .
6354	ReadResponse reads the response from the buffer
6355	backoff returns an exponential backoff for the given attempt .
6356	String returns the string representation of the frame type .
6357	NewConsulEngine returns a new instance of ConsulEngine .
6358	ParseMessageID parses a MessageID from a string .
6359	WriteTo implements io . WriterTo interface
6360	NewMessage creates a new message
6361	Finish marks the message as finished .
6362	Requeue enqueues the message to the given timeout .
6363	ReadCommand parses a single command .
6364	funcMapMaker returns a FuncMap
6365	Funcs is used to register the template functions .
6366	Execute renders the given template using the given obj .
6367	RegisterPath registers a path
6368	Asset returns the contents of a file
6369	Glob implements the AssetFileSystem interface .
6370	NameSpace returns the AssetFileSystem interface
6371	New creates a new Render instance
6372	RegisterViewPath register the given paths
6373	SetAssetFS set asset filesystem
6374	Layout returns a new instance of a template
6375	Funcs returns a new template with the given funcMap
6376	Execute renders a template
6377	RegisterFuncMap register a func map
6378	Asset return the asset
6379	NewPlainClient creates a new plain client .
6380	Create creates a new uploader
6381	Open returns a ReadCloser for the given URL .
6382	Sign signs the request using the DefaultService .
6383	Sign adds the signature header to the request .
6384	Readdir implements the http . FileReader interface .
6385	Find searches the x and returns the children of x .
6386	Lex lexes the given xpath
6387	MustParseXML is like ParseXML but panics if an error occurs .
6388	ParseXML parses the XML from r and returns the node .
6389	Call calls the wrapped function
6390	Parse parses a XPath string into an XPath expression .
6391	MustParse is like Parse but panics on error
6392	Exec executes the given XPath .
6393	ExecBool implements XPath . Exec
6394	ExecNum returns the result as a number .
6395	ExecNode executes a XPath expression and returns the result set .
6396	MustExec is like Exec but panics .
6397	ParseExec parses an XPath string and returns the result .
6398	CreateNode creates a new XMLNode
6399	GetChildren returns the children of this element .
6400	GetAttrs returns the node s attributes .
6401	ResValue implements the ResValue interface .
6402	Parse parses an XPath expression .
6403	GetToken returns the token
6404	ResValue returns the value of an XMLNode
6405	Exec is a wrapper around the xpFilt function
6406	String returns a string representation of n .
6407	Num converts the string to a Num .
6408	BuildNS returns a list of NS elements for the given element .
6409	GetAttribute gets an attribute from a node
6410	GetAttributeVal returns the value of a node .
6411	GetAttrValOrEmpty returns the attribute value or an empty string if not found
6412	FindNodeByPos is similar to FindNodeByPos .
6413	Marshal converts a Tree to an io . Writer .
6414	MarshalStr returns a string representation of a node .
6415	NewLexer creates a new Lexer .
6416	NewLexerString creates a Lexer from a string
6417	Split splits a string into a slice of strings .
6418	Register a new ErrDescriptor
6419	Get returns the ErrDescriptor for the given code .
6420	GetAll returns all registered errors .
6421	From creates an error from an error
6422	Descriptor returns a ErrDescriptor based on an error .
6423	GetAttributes returns the attributes of the error if any .
6424	HTTPStatusCode returns the http status code for the type
6425	HTTPStatusCode returns the HTTP status code of the error if any .
6426	HTTPStatusToType returns the Type corresponding to the given HTTP status code .
6427	ToHTTP converts an error to an http . ResponseWriter
6428	toImpl converts an error into an impl .
6429	MetadataFromIncomingContext extracts metadata from incoming context .
6430	MetadataFromOutgoingContext extracts metadata from the outgoing context .
6431	TokenFromMetadata extracts the token from metadata .
6432	TokenFromIncomingContext extracts a token from the given context
6433	OutgoingContextWithToken returns a new context with the given token set .
6434	KeyFromMetadata extracts the key from metadata .
6435	KeyFromIncomingContext extracts the key from the context
6436	OutgoingContextWithKey returns a new context with the given key set .
6437	IDFromMetadata extracts the ID from the metadata .
6438	IDFromIncomingContext extracts the ID from the incoming context
6439	OutgoingContextWithID returns a new context with the given ID .
6440	ServiceInfoFromMetadata extracts service information from metadata .
6441	ServiceInfoFromIncomingContext extracts the service name and network version from the context .
6442	OutgoingContextWithServiceInfo returns a new context with service name and service version .
6443	LimitFromMetadata extracts the limit from metadata .
6444	OffsetFromMetadata extracts the offset from the metadata .
6445	LimitAndOffsetFromIncomingContext retrieves limit and offset from the context .
6446	OutgoingContextWithLimitAndOffset returns a new context with limit and offset set
6447	before returns true if i is before j .
6448	New returns a new ErrDescriptor with the given attributes .
6449	WithNamespace adds namespace field to the log context .
6450	Wrap returns a new instance of Namespaced .
6451	WithField returns a new logger with the given key and value .
6452	WithFields returns a copy of the namespaced interface .
6453	Format returns a formatted message with the given attributes
6454	fix the value of v .
6455	GRPCCode returns the grpc code for the type .
6456	GRPCCodeToType converts a gRPC code into a Type .
6457	GRPCCode returns the gRPC code for the error if any .
6458	FromGRPC creates an error from a gRPC error .
6459	ToGRPC converts an error to a grpc error
6460	IsEnabled returns true if the namespace is enabled .
6461	Set sets the namespaces .
6462	Cause returns the cause if any .
6463	parseCode parses a string into a Code
6464	UnaryServerInterceptor returns a new unary server interceptor for unary requests
6465	StreamServerInterceptor converts a ConvertFunc into a gRPC stream server interceptor
6466	UnaryClientInterceptor returns a new unary client interceptor for a ConvertFunc
6467	StreamClientInterceptor returns a new streaming client interceptor that converts from a ConvertFunc .
6468	Interceptor returns a new streaming client interceptor .
6469	Wrap wraps logrus . Logrus . Wrap
6470	NewCounter creates a counter
6471	NewRedisCounter returns a new Counter
6472	NewLimiter creates a Limiter .
6473	WithInsecure returns a copy of the TokenCredentials with the token set to true .
6474	WithTokenFunc returns a TokenCredentials object with the given tokenFunc .
6475	GetRequestMetadata gets the metadata for the outgoing request
6476	FieldsFromIncomingContext extracts fields from incoming context
6477	String returns the string representation of the type .
6478	UnmarshalText implements the encoding . TextUnmarshaler interface .
6479	fromString returns the error type .
6480	Start starts the stats loop
6481	NewSimple creates a new empty queue .
6482	Wrap wraps the given logger with the given filters .
6483	WithFilters returns a new filtered copy of the filtered object .
6484	WithField implements the Filtered interface .
6485	WithFields implements the Filtered interface .
6486	FilterSensitive returns a filter that removes elements from sensitive .
6487	SliceFilter returns a Filter that filters elements based on a filter .
6488	MapFilter returns a Filter that filters elements based on the filter .
6489	RestrictFilter passes the given filter to the given filter .
6490	LowerCaseFilter returns a new Filter based on a filter .
6491	newBatchPoints creates a new influxdb . BatchPoints object .
6492	NewSinglePointWriter creates a new SinglePointPointsWriter
6493	Write writes a point to the writer .
6494	WithScalingInterval is a functional option for BatchingWriter .
6495	NewBatchingWriter creates a BatchingWriter .
6496	Write is used to add a point to the writer
6497	MustParseLevel is like ParseLevel but panics on error
6498	New creates a new Stream
6499	SetLogger sets the logger .
6500	CloseRecv closes the buffer .
6501	Stats returns the number of messages sent to the stream .
6502	Run starts streaming .
6503	ServerOptions returns gRPC server options
6504	ClientOptions returns gRPC options for ttnlog
6505	UnaryServerInterceptor returns a new unary server interceptor
6506	StreamServerInterceptor returns a new streaming server interceptor for logging
6507	UnaryClientInterceptor returns a new unary client interceptor .
6508	StreamClientInterceptor returns a new streaming client interceptor for streaming RPCs
6509	set defaults to config
6510	Flush is used to flush the batch .
6511	New creates a new handler .
6512	HandleLog implements the Handler interface .
6513	New creates a new TTNRandom interface
6514	Names returns the names of the uri template .
6515	String returns a string representation of the PerfDatum .
6516	RenderPerfdata renders perfdata as a string
6517	Exit prints the given status and message
6518	NewCheckWithOptions creates a new check with the given options .
6519	AddResult adds a new result to the check .
6520	AddResultf adds a new result to the check .
6521	String returns the string representation of the check .
6522	Exitf records the given status with the given status .
6523	Criticalf is a shim
6524	Unknownf is used to exit with an UNKNOWN status code .
6525	NewDefaultStatusPolicy returns a default status policy .
6526	NewStatusPolicy creates a status policy from a list of statuses .
6527	ParseRange parses a Range from a string
6528	Check checks if the value is within the range
6529	CheckInt checks if the int is in the range .
6530	CheckUint64 checks if the given uint64 is in the range .
6531	NewClient creates a new Client .
6532	GetKeyMeta gets the metadata for a path
6533	GetKeysInDirMeta returns all the keys in a directory
6534	GetKeyContent returns the content of a key file at path
6535	GetJobSummariesForProject returns all the jobs for a project .
6536	GetJobsForProject gets all the jobs for a project
6537	GetJob returns details of a job .
6538	CreateJob imports a job .
6539	CreateOrUpdateJob adds a job to the server .
6540	DeleteJob deletes a job
6541	JobSummary returns a JobSummary from the result .
6542	GetSystemInfo returns information about the system
6543	DateTime converts the timestamp to a time . Time .
6544	GetAllProjects returns a list of all projects .
6545	GetProject returns a project by name .
6546	CreateProject creates a new project .
6547	DeleteProject deletes a project
6548	SetProjectConfig sets the config for a project .
6549	NewClient returns a new Client .
6550	NewClientbyToken creates a new Client instance .
6551	SetDepth sets the depth of the torrent .
6552	ListDatacenters returns a list of all the datacenters
6553	CreateDatacenter creates a new datacenter
6554	GetDatacenter gets a single datacenter
6555	UpdateDataCenter updates a specific datacenter .
6556	DeleteDatacenter deletes a datacenter
6557	WaitTillProvisioned blocks until the timeout expires
6558	ListFirewallRules lists all firewall rules for a given network
6559	GetFirewallRule gets a firewall rule
6560	CreateFirewallRule adds a firewall rule
6561	UpdateFirewallRule updates a firewall rule
6562	DeleteFirewallRule deletes a firewall rule
6563	ListLoadbalancers lists all loadbalancers
6564	GetLoadbalancer gets a loadbalancer
6565	UpdateLoadbalancer updates a loadbalancer
6566	DeleteLoadbalancer deletes a loadbalancer
6567	ListBalancedNics returns a list of all NICs
6568	AssociateNic associates a nic with the given NIC
6569	GetBalancedNic gets a single NIC
6570	DeleteBalancedNic removes a balancer
6571	ListLans returns a list of LANs
6572	GetLan retrieves a lan object
6573	DeleteLan deletes a single lan
6574	ListNics returns a list of all NICs
6575	CreateNic adds a nic
6576	GetNic retrieves a single nic
6577	UpdateNic updates a nic
6578	DeleteNic removes a nic
6579	List all snapshots
6580	Get a single snapshot
6581	Delete a snapshot by ID
6582	UpdateSnapshot updates a snapshot
6583	ListIPBlocks returns a list of all IP blocks
6584	ReserveIPBlock reserves a new IP block
6585	GetIPBlock returns a single IP block
6586	UpdateIPBlock updates an existing IP block .
6587	ReleaseIPBlock releases an IP block
6588	ListVolumes lists all volumes for a given DC
6589	GetVolume gets a volume by ID
6590	UpdateVolume updates a specific volume
6591	CreateVolume creates a new volume
6592	DeleteVolume deletes a volume
6593	CreateSnapshot creates a new snapshot
6594	RestoreSnapshot is used to restore a snapshot
6595	List servers
6596	GetServer retrieves a single server by ID
6597	DeleteServer deletes a server
6598	ListAttachedCdroms returns an array of images for the specified server
6599	AttachCdrom attaches a cdid cdid to the server
6600	GetAttachedCdrom returns the attached cdid
6601	DetachCdrom detaches a cdrom from the server
6602	ListAttachedVolumes returns a list of volumes for the specified server
6603	AttachVolume attaches a volume to a specific server
6604	GetAttachedVolume gets attached volume
6605	DetachVolume detaches a volume
6606	StartServer starts a new server
6607	ListLocations returns a list of all locations
6608	GetRegionalLocations returns the locations for the given regid
6609	GetLocation retrieves a Location
6610	GetContractResources returns a list of all contracts
6611	List all images
6612	GetImage returns a single image
6613	PrintHeaders print response
6614	ListGroups returns a list of all groups
6615	Retrieve a group
6616	CreateGroup creates a new group
6617	UpdateGroup updates a group
6618	DeleteGroup deletes a group
6619	List shares a user s share
6620	Retrieve a share
6621	AddShare adds a share
6622	UpdateShare updates a share
6623	DeleteShare removes a share
6624	List all users in a group
6625	AddUserToGroup adds a user to a group
6626	DeleteUserFromGroup deletes user from group
6627	List all users
6628	Retrieve a single user by ID
6629	CreateUser posts a user
6630	UpdateUser updates a user
6631	DeleteUser deletes a user by id
6632	List all resources
6633	GetResourceByType gets a resource by its id
6634	List all resources
6635	ListRequests lists all the requests
6636	GetRequest fetches a single request by ID
6637	Gets the status of the given HTTP request
6638	Close closes the log file
6639	GetSerializableArgument gets the serializable argument
6640	BoolVar implements the BoolFlag interface .
6641	Bool adds a bool flag to the global flag .
6642	IntVar implements the IntVar interface .
6643	Int adds an int flag to the global flag .
6644	Int64Var implements the Int64Flag interface .
6645	Int64 adds an int64 to the global flag set .
6646	UintVar implements the uintflag . FlagSet interface .
6647	Uint adds an uint flag to the global flag .
6648	Uint64Var implements the uint64Flag interface .
6649	Uint64 adds an uint64 flag to a uint64 flag .
6650	StringVar implements the StringVar interface .
6651	String returns a pointer to a string flag with specified name default value and usage string .
6652	Float64Var implements the Float64Flag interface .
6653	Float64 adds a float64 flag to the global flag .
6654	DurationVar adds a time . Duration flag to the global flag .
6655	Duration defines a time . Duration flag with specified name default value and usage string .
6656	Parse parses the environment variables .
6657	WriteStringToFile writes a string to a file
6658	ReadFileToString returns the contents of a file
6659	LineReader returns a channel of lines read from r .
6660	LineReaderFrom returns a channel of lines read from a file or an error if the file does not exist .
6661	FileExists checks if a given file exists
6662	FileExistsInPath checks if a given file exists
6663	GetPathParts returns directory name and absolute path parts of path
6664	GetThisPathParts gets the absolute path parts of this executable
6665	RandomString generates a random string
6666	ParseAddress returns the protocol and path from the given address .
6667	HomeDir returns the home directory
6668	IsTCPPortAvailable returns true if the port is available .
6669	RandomTCPPort returns a random TCP port
6670	HashString returns the hash of the given string .
6671	Context returns the session associated with the context .
6672	Token creates an oauth2 . Token from the session .
6673	NewDaemon creates a new Daemon
6674	Close closes the daemon .
6675	NewAccessTokenContext returns a new context with the given access token .
6676	AccessTokenFromContext extracts the token from the context if any .
6677	RandomAccessToken generates a random access token
6678	Init creates a new zap logger .
6679	Load loads a dictionary .
6680	Start starts a new session .
6681	Get returns a session from the database .
6682	List returns a list of all sessions .
6683	Exists checks if a row exists .
6684	Abandon removes the session .
6685	SetValue sets a value for a given access token .
6686	Delete removes all sessions from the database .
6687	Setup initializes the database .
6688	TearDown deletes the schema .
6689	initJaeger creates a new Jaeger Tracer
6690	Usage prints the usage for the bot
6691	Build builds a DoubleArray from a list of keywords .
6692	Read reads a DoubleArray .
6693	Get returns the node at the given index .
6694	ExternalNodes returns the list of external nodes that are listen on .
6695	GetOther returns the node that matches the given accessToken .
6696	GoString returns a string representation of the cluster
6697	Scan scans the data source into the bag
6698	Value returns the gob encoding of the bag .
6699	Returns true if the given key exists .
6700	WriteTo writes the index table to w .
6701	ReadIndexTable reads the index table .
6702	New creates a new action bar
6703	Register an action to the global action
6704	Actions add actions to the actionbar
6705	Render the template
6706	FuncMap generate func map
6707	EditMode checks if the user is edit mode
6708	SwitchMode switch mode
6709	InlineEdit runs inline edit
6710	Error returns the string representation of the error
6711	ParseFile parses and returns a slice of Machine objects .
6712	FindMachine finds a machine by name
6713	New creates a new Kace .
6714	Camel converts a string to CamelCase
6715	Pascal converts s to PascalCase .
6716	Snake converts a string to snake case
6717	SnakeUpper converts a string to snake case
6718	Kebab converts the given string to keb .
6719	KebabUpper converts a string to upper case
6720	isPathSafe checks if the given path is in the whitelist .
6721	Start implements the http . Request interface .
6722	ParseAuthHeaders parses auth headers from HTTP request
6723	Tracer is a functional option for Client .
6724	HTTPClient is a Client option to set the HTTP client .
6725	BasicAuth sets the HTTP Basic Authentication header .
6726	BearerAuth sets the bearer token for the client
6727	CookieJar is used to set the cookie jar
6728	SanitizerEnabled is a Client option to set whether or not sanitizer is enabled .
6729	OpenFile opens a file at the specified endpoint .
6730	RoundTrip executes the given function .
6731	SetAuthHeader sets the Authorization header
6732	FileName returns the filename s filename .
6733	newBuffersFromFiles creates a slice of file buffers from a slice of files .
6734	newFileBuffer creates a new file buffer
6735	rewind discards the contents of the internal buffer .
6736	ConvertResponse converts http response to response
6737	Set sets the option value .
6738	WriteAnswer implements the flag . Value interface
6739	String returns the string representation of a BoolOption .
6740	TriggerIncidentKey triggers an incident
6741	TriggerWithDetails triggers the given details .
6742	TriggerIncidentKeyWithDetails triggers an incident key
6743	Merge merges src into dst .
6744	setSource sets the source for the given value .
6745	convertString convert src to dst
6746	Do runs f in a transaction .
6747	NewFile creates a new io . Writer
6748	Internal loop
6749	String returns a string representation of a row
6750	Tabulate returns a row of results
6751	AmazonRequest performs a request to the Amazon API .
6752	WriteTabularData writes the results to the io . Writer
6753	Reduce sorts the result set by the given interval
6754	NewSemaphore creates a new Semaphore .
6755	Release releases the semaphore .
6756	Resize resizes the semaphore .
6757	AddOutput adds an output to the benchmark .
6758	Run benchmark .
6759	parseBool parses a boolean value .
6760	checkInteger checks if the passed in byte is a valid integer .
6761	parseInt64 parses an int64 from a byte slice .
6762	parseInt32 parses an int32 .
6763	parseBigInt parses a big . Int .
6764	parseBitString parses a bit string .
6765	parseObjectIdentifier parses an object IDENTIFIER from a byte array .
6766	parseBase128Int parses a base 128 - bit unsigned integer .
6767	parseGeneralizedTime attempts to parse the serialized time .
6768	parsePrintableString parses a printable string .
6769	isPrintable returns true if b is a printable character .
6770	parseSequenceOf attempts to parse a sequence of bytes .
6771	invalidLength returns true if the offset is invalid .
6772	setDefaultValue sets the default value for a field .
6773	UnmarshalWithParams unmarshals val into val .
6774	parseFieldParameters parses a string into a fieldParameters struct
6775	getUniversalType returns the tag number for the given type .
6776	DecodeString decodes a base32 encoded string .
6777	MailNotifier gets the mail notifier from database
6778	SaveMailNotifier save mail notifier
6779	RegisterProvider registers an auth provider
6780	InitDb initializes MongoDB
6781	Until loops until stopCh is closed .
6782	Log panic
6783	Return a user from MongoDB
6784	Users returns all users that match filter
6785	SaveUser saves a user
6786	DeleteUser removes a user from MongoDB
6787	LoadCACertFile loads a CertPool from a file
6788	NewAuth returns a new Auth object
6789	ValidateRequest validates the TLS handshake
6790	Process validates the request
6791	ValidateCN returns an error if the certificate matches the allowed CN .
6792	ValidateOU returns an error if the certificate matches the allowed OU .
6793	KeyLen returns the number of bytes required to encode x .
6794	DefaultConfig returns the default config
6795	New creates a new certificate signer
6796	New creates a VaultFactory .
6797	DefaultServiceConfig returns the default service config
6798	NewService creates a new Vault Service .
6799	Delete implements Service .
6800	IsNoVaultHandlerDefined returns true if the error caused by an error .
6801	New creates a new Vault Service .
6802	Create creates a new role
6803	CreateJob returns a Config with default values .
6804	Run the config
6805	Creates a new Watcher
6806	Start the watcher
6807	Stop the watcher
6808	Active returns true if the watcher is active .
6809	Add a list of paths
6810	This is a thread - safe version of the watcher
6811	Watchs returns a list of all watched files .
6812	State returns the current state of the watcher .
6813	Store stores the error in the request context
6814	Get returns the error if any .
6815	Catch returns a middleware that invokes the given function .
6816	Try returns an http . Handler that calls the given handler .
6817	Recover is a middleware that recovers panics from the request
6818	This is the main entry point .
6819	SyncHandler returns an http . Handler that can be used to sync connections
6820	connect connects to the transport .
6821	send sends an update .
6822	NumConnections returns the number of active connections .
6823	Push queues up the state of the push queue .
6824	gopush sends the state to the state .
6825	NewOutForward creates a new instance of OutForward .
6826	Run starts the inTail file
6827	New creates a new instance of Fluent .
6828	Close closes the connection .
6829	IsReconnecting returns true if the connection is reconnecting .
6830	connect connects to the given server .
6831	Notification returns a new Notifier
6832	NullNotification returns a new Notifier instance .
6833	New creates a new identity .
6834	Issue creates a new identity
6835	Subject sets the subject name
6836	PrivateKey is an Option to set the private key used by the server .
6837	NotBefore returns an Option that sets the time when the query was created .
6838	NotAfter returns an Option that sets the time that the server should not be updated .
6839	IssuingCertificateURL is an Option to set the issuing certificate URL .
6840	OSPServer is an Option to set the ocs server
6841	New creates a new TelegramBotAPI instance .
6842	NewWithWebhook creates a new TelegramBotAPI with the given webhookURL and certificate .
6843	Close terminates the API .
6844	GetMe gets the current user .
6845	RunBot runs the bot .
6846	RunBotOnWebhook runs the bot with the given name and public key .
6847	NewOutgoingMessage creates a new OutgoingMessage object .
6848	NewOutgoingLocation creates a new OutgoingLocation object .
6849	NewOutgoingVenue creates a new OutgoingVenue message
6850	NewOutgoingVideo creates a new OutgoingVideo instance .
6851	NewOutgoingVideoResend creates a new OutgoingVideo instance .
6852	NewOutgoingPhoto creates a new OutgoingPhoto instance .
6853	NewOutgoingPhotoResend creates a new OutgoingPhoto instance .
6854	NewOutgoingSticker creates a new outgoingSticker instance .
6855	NewOutgoingStickerResend creates a new outgoingSticker .
6856	NewOutgoingVoice creates a new outgoingVoice object .
6857	NewOutgoingVoiceResend creates a new outgoing voice request .
6858	NewOutgoingAudio creates a new OutgoingAudio instance .
6859	NewOutgoingAudioResend creates a new OutgoingAudio instance .
6860	NewOutgoingDocument creates a new OutgoingDocument instance .
6861	NewOutgoingDocumentResend creates a new OutgoingDocument .
6862	NewOutgoingForward creates a new OutgoingForward message .
6863	NewOutgoingChatAction creates a new OutgoingChatAction object .
6864	NewOutgoingUserProfilePhotosRequest creates a new OutgoingUserProfilePhotosRequest .
6865	NewOutgoingKickChatMember creates a new OutgoingKickChatMember instance .
6866	NewOutgoingUnbanChatMember creates a new OutgoingUnbanChatMember instance .
6867	NewOutgoingCallbackQueryResponse creates a new OutgoingCallbackQueryResponse .
6868	NewInlineQueryAnswer creates a new inline query answer
6869	Type returns the type of the message .
6870	Type returns the type of update .
6871	MarshalJSON implements json . Marshaler
6872	queryString returns the URL as a querystring
6873	Get base query string
6874	getBaseQueryString returns the base query string for the outgoingMessageBase
6875	queryString returns the url query string
6876	queryString returns the url query string for the photo
6877	queryString builds a querystring for the OutgoingUserProfilePhotosRequest .
6878	querystring returns the url query string
6879	querystring returns the url query string
6880	NewInlineQueryResultArticle creates a new inline query article .
6881	NewInlineQueryResultPhoto creates a new inline query photo .
6882	NewInlineQueryResultGif creates a new inline query GIF .
6883	NewInlineQueryResultMpeg4Gif creates a new inline query result Mpeg4Gif .
6884	NewInlineQueryResultVideo creates a new inline query result .
6885	Send sends the OutgoingUserProfilePhotos request .
6886	Send sends the outgoing chat action .
6887	Send sends the inline query .
6888	Send sends the member to the server .
6889	Send unban the user .
6890	Send sends the callback to the api .
6891	NewAPIClient creates a new APIClient
6892	BeforeInsert is part of the TimeStamp interface .
6893	ColumnName is used to quote a column name
6894	New creates a new DB .
6895	From creates a From from a struct
6896	Where creates a new WHERE condition
6897	OrderBy creates a new ORDER BY condition .
6898	Limit creates a new LIMIT condition .
6899	Offset creates an Offset condition .
6900	Join creates a join condition .
6901	Count generate number of columns
6902	Update updates the record with the primary key
6903	Delete deletes all records that match the given object .
6904	Begin starts a transaction .
6905	Commit closes the database .
6906	Quote quotes a string
6907	SetLogOutput sets the logger output for the database .
6908	selectToSlice returns a slice of reflect . Value from a struct .
6909	selectToValue scans the first row of rows into a reflect . Value
6910	fieldIndexByName finds the index of a field by name .
6911	columns generates column names for the given columns .
6912	tagsFromField returns the options for the field .
6913	hasSkipTag returns true if the field has the skip tag .
6914	hasPKTag returns true if the field has a pk tag .
6915	isAutoIncrementable returns true if the field is autoincrementable .
6916	collectFieldIndexes collects all field indexes for a given type .
6917	findPKIndex returns the index of the PK index of the given type .
6918	sizeFromTag returns the size of the given tag .
6919	columnFromTag returns the named column from the tag .
6920	defaultFromTag returns the DEFAULT tag from the struct field .
6921	Where adds a WHERE condition .
6922	And adds an AND condition to the current condition .
6923	Or adds an OR condition .
6924	Like adds a LIKE condition .
6925	Between adds a BETWE clause .
6926	OrderBy sets the ORDER BY clause .
6927	Limit condition .
6928	Offset adds an Offset condition .
6929	SetFormat is used to parse the current template .
6930	Print writes the given query to the log .
6931	Implementation of Logger interface
6932	Quote quotes a string
6933	SQLType returns the name of the SQL type
6934	New archive
6935	Disconnect disconnects the host .
6936	nextNetworkAdapterID returns the next available network adapter ID
6937	totalNetworkAdapters returns the number of network adapters
6938	RemoveAllNetworkAdapters removes all network adapters
6939	RemoveNetworkAdapter removes the specified network adapter from the VM .
6940	NetworkAdapters returns a slice of network adapters .
6941	newArchive creates a new archive with the given path and password .
6942	GetFileReader returns an io . ReadCloser for the given file .
6943	ExtractToWriter extracts a file from an archive .
6944	ExtractToFile extracts an archive to a file at the specified path .
6945	SharedFoldersParentDir returns the guest folders parent directory .
6946	Name returns the name of the snapshot .
6947	Description returns the description of the snapshot .
6948	cleanupSnapshot cleans up a snapshot .
6949	BusTypeFromID returns the bus type from the given ID .
6950	Read the virtual machine model
6951	Write writes the model to disk .
6952	NewVirtualMachine creates a new VM object
6953	Vcpus returns the number of vcpus supported by this VM .
6954	VmxPath returns the VM s VMX path .
6955	MemorySize returns the size of the VM .
6956	ReadOnly returns whether the VM is read - only .
6957	InVMTeam returns true if the VM is in a team .
6958	PowerState returns the power state of the VM .
6959	ToolsState returns the current guest tools state .
6960	IsRunning returns true if the VM is running .
6961	GuestOS returns the guest OS for this VM .
6962	Cleanup the VM .
6963	updateVMX updates the vmx configuration for the VM .
6964	SetMemorySize sets the size of the VM .
6965	SetNumberVcpus sets the number of vcpus required for this VM .
6966	SetDisplayName sets the display name of the VM .
6967	SetAnnotation sets the annotation on the VM .
6968	SetVirtualHwVersion sets the virtual machine version
6969	Error returns a string representation of the error
6970	Errorf wraps fmt . Errorf
6971	Error implements the error interface .
6972	string returns a string representation of the stackFrame .
6973	newStackFrame returns a stack frame for the given pc .
6974	captureStack captures stack trace information .
6975	parseFuncName returns packagePath and signature from function name .
6976	Stack prints the stack trace
6977	StackWithCaller is the same as StackWithCaller
6978	Write calls the wrapped writer .
6979	ResponseStatus returns the status of the http response .
6980	httpResponseStruct returns the http . ResponseWriter struct of v .
6981	SetDetectedContentType tries to detect the Content - Type header if it is not already set .
6982	New returns a new ServerError
6983	New creates a new DBError
6984	New creates a new validation error
6985	New creates a new NotFoundError
6986	StrLength validates a string with length n
6987	StrLenIn validates if p is a valid string
6988	StrIn validates if p is a member of the list
6989	GetEmail validates a email
6990	MostSpecificType returns the most specific type of the given types .
6991	FullTypeHierarchy returns the full type hierarchy for the given highestLevel
6992	SortTypes sorts the given list of types .
6993	Delete a value from the store
6994	Set sets the value for the given key .
6995	refresh sets session values for a session
6996	Get a session by ID
6997	Destroy removes session from redis .
6998	UpExpire sets the session s session expiration .
6999	Use adds a router handler to the stack
7000	ServeHTTP implements the http . Handler interface .
7001	Use adds middleware to router
7002	Group creates a new router group
7003	Run starts the server .
7004	create creates a new router
7005	Redirect sends a redirect to the given URL
7006	Ok responds to http . ResponseWriter
7007	Fail logs the error
7008	ResStatus writes the response status code .
7009	Next the next handler
7010	GetSession get session data
7011	GetBodyJSON get request body
7012	SetSession sets a session id and session id
7013	FreshSession refreshes the session with the given key
7014	DeleteSession deletes session from session
7015	Write is part of the http . ResponseWriter interface .
7016	WriteHeader is part of the http . ResponseWriter interface .
7017	New returns a new instance of Client .
7018	setAllowLargeResults configures the client to allow large results .
7019	connect creates a bigquery service from Google CloudQuery .
7020	InsertRow inserts a row into BigQuery .
7021	AsyncQuery performs a async query for the specified dataset .
7022	Query performs a query for the specified dataset and query string .
7023	stdPagedQuery executes a bigquery query
7024	largeDataPagedQuery performs a large dataPagedQuery
7025	pagedQuery is a helper function that performs a paged query
7026	pageOverJob iterates over all the results of a job .
7027	Count returns the number of rows in a given dataset .
7028	Actual work
7029	subworker run a job
7030	Main worker
7031	Supervisor loop
7032	Run the pool
7033	Add a job to the pool
7034	Wait waits for a pipe to finish
7035	Returns all results from the pool
7036	WaitForJob waits until the result has finished or returns nil
7037	Returns the status of the pool
7038	WrapHTTPHandlerFunc wraps an http . HandlerFunc
7039	WebSocketHandlerFunc wraps a function in a websocket . HandlerFunc .
7040	StaticFile returns a new staticFile object
7041	PreloadFile loads a file from a file
7042	InitHtmlTemplates initialize html templates
7043	InitTextTemplates initializes the text templates
7044	Html creates an HTML template
7045	Text creates a text template
7046	InitWatcher initializes fsnotify watcher
7047	CloseWatcher closes all watchers
7048	Find finds a route
7049	Add adds a new view
7050	NewRouters creates a new router instance .
7051	NewServerMux returns a new ServerMux .
7052	err calls ErrorHandle if set .
7053	HandleFunc adds a HandlerFunc to the Mux .
7054	handleError handles an error
7055	Redirect redirects the response with status code
7056	InitPProf registers the pprof handlers for the given prefix
7057	StartSession starts a new session
7058	Returns a channel of all the elements in a slice of ints
7059	Returns a channel that lists all duplicates in the list
7060	Returns a channel of all elements in a list of elements in the list .
7061	Returns a channel of all the permutations of the list .
7062	gformat a string into a format string
7063	Errorm wraps fmt . Errorf
7064	Similar to fmt . Fprintm
7065	Similar to fmt . Printm
7066	Sprintf is fmt . Sprintf
7067	Validate checks the password requirements against the given password .
7068	MakeRequirements creates a set of requirements for a given password .
7069	sanityCheck validates the password strength requirements .
7070	password generates a new password for the given requirements .
7071	NewPassword creates a new password
7072	NewPasswords takes a set of password strength requirements and returns a slice of n words .
7073	addNums adds numDigits to a string
7074	punctuation
7075	Deprecated .
7076	Param adds a new parameter to the set
7077	Parse parses the configuration file
7078	Unmarshal unmarshals parameters into v .
7079	GetDefaultHTTPClient get default http client
7080	DeviceInfo gets the device information for the given deviceID .
7081	DevicePresence returns the presence of the given devices .
7082	NotificationStatus retrieves the status of a push notification .
7083	DeleteNotification deletes a notification
7084	NotifyDevice sends a notification request to the device
7085	Assert asserts that b is true .
7086	CreateFile creates a file with the given size .
7087	AddError adds an error to the form
7088	AddFieldError adds an error to the form
7089	HasErrors returns true if the FormErrors field is set .
7090	NewError creates a new form error
7091	NewFieldError creates a new form error for the given field and error
7092	ChainHandlers chains multiple handlers
7093	FinalHandler returns a middleware that wraps the given http . Handler .
7094	Hash returns the MD5 hash of the given reader .
7095	IsHash returns true if the given string is a valid MD5 hash .
7096	WithBaseDir sets the base directory to the given directory
7097	WithFileFindFunc returns an Option that sets the function to be used for testing .
7098	WithTemplateFromFiles adds a template file to the list of templates
7099	WithTemplatesFromFiles sets the templates from a map
7100	WithTemplateFromStrings adds a template name to the list of strings
7101	WithTemplatesFromStrings configures a map of strings to strings
7102	WithFunction adds a function to the map
7103	WithFunctions adds custom functions to the template
7104	WithDelims sets the delimiter used by the client
7105	New creates a new instance of the templates
7106	RespondWithStatus renders a template with given status code and status .
7107	RespondTemplate writes a response with status code 200 .
7108	Respond writes a response with status code 200 .
7109	RenderTemplate renders a template
7110	New creates a new Server
7111	ServeUDP implements the http . Server interface .
7112	Shutdown closes the server .
7113	QuicHeadersHandler is a middleware that sets Quic headers
7114	GetRequestIPs returns IPs of the request
7115	DomainRedirectHandler redirects the given domain to the specified domain .
7116	New returns a new Server
7117	Add adds a new server to the list .
7118	TCPAddr returns the TCP address associated with the given name .
7119	UDPAddr returns the UDPAddr for the given server name .
7120	Close closes all servers
7121	Shutdown shuts down all servers
7122	Accept implements the Accept method of the Listener interface .
7123	NewStaticFilesHandler returns a handler that serves static files with the given prefix .
7124	ServeHTTP implements the http . Handler interface .
7125	MarshalJSON implements json . Marshaler .
7126	UnmarshalJSON implements the json . Unmarshaler interface .
7127	MarshalYAML implements the yaml . Marshaler interface .
7128	UnmarshalYAML implements the yaml . Unmarshaler interface
7129	NewHandler wraps the given http . Handler with the given logger .
7130	WithPanicResponse sets the body of the request
7131	WithPanicResponseHandler is an Option to set the panic handler
7132	New creates a new handler .
7133	ServeHTTP handles HTTP requests
7134	NewContextFunc returns a context func for the given map
7135	NewMapErrorRegistry creates a new MapErrorRegistry .
7136	AddError adds an error to the registry .
7137	AddMessageError adds an error to the registry .
7138	MustAddError is like AddError but panics if an error occurs .
7139	MustAddMessageError is similar to AddMessageError but panics .
7140	AddHandler adds a handler to the registry .
7141	MustAddHandler is like AddHandler but panics if an error occurs .
7142	Handler returns the handler for the given error code .
7143	New creates a new Client .
7144	Request sends an HTTP request .
7145	JSONContext performs a JSON request with the given context .
7146	StreamContext performs a streaming request with the given context .
7147	Stream performs a streaming request
7148	JSONUnmarshal parses json - encoded data and stores the result in the value pointed to by v .
7149	ServeTCP serves incoming connections on the listener .
7150	ServeTCP implements the Server interface .
7151	Shutdown gracefully shuts down the server .
7152	HandleMethods is used to handle HTTP requests
7153	NewSetHeadersHandler sets a set of headers
7154	New creates a new server
7155	HashedPath returns the full path for the given file .
7156	New creates a new service .
7157	HTMLHandler implements the http . Handler interface .
7158	Status returns the status of the service .
7159	StatusHandler returns the status of the server .
7160	OnHandler is the main entry point for monitoring .
7161	OffHandler is used to stop the maintenance of the backend .
7162	MarshalJSON method of PostIRCMessageRequest
7163	MarshalJSON implements the json . Marshaler interface for PostArtifactRequest
7164	MarshalJSON method of PostArtifactResponse
7165	MarshalJSON method of HookChangedMessage
7166	MarshalJSON method of TriggerHookRequest
7167	MarshalJSON method of TriggerHookResponse
7168	UnmarshalJSON implements the json . Unmarshaler interface for TriggerHookResponse .
7169	MarshalJSON implements the json . Marshaler interface for LaunchInfo
7170	MarshalJSON implements json . Marshaler
7171	MarshalJSON implements the json . Marshaler interface
7172	MarshalJSON implements the json . Marshaler interface
7173	MarshalJSON implements the json . Marshaler interface for Time .
7174	UnmarshalJSON implements the json . Unmarshaler interface .
7175	Write implements io . Writer
7176	Seek implements io . Seeker
7177	Read implements io . Reader .
7178	MarshalJSON method of LaunchSpecsResponse
7179	MarshalJSON implements json . Marshaler
7180	GenerateCode generates Go code
7181	postPopulate populates the schema url
7182	CreateTemporaryCredentials attempts to create a new Credentials object with the specified duration .
7183	setURL is used to parse the URL
7184	Sign a http . Request
7185	APICall performs the actual HTTP request
7186	SignedURL generates a signed URL for the given route and query parameters .
7187	MarshalJSON implements the json . Marshaler interface
7188	mw256 computes the 32 - bit digest of the input .
7189	NewTubeHash creates a new cube hash
7190	cubehash256 computes the hash of the given data .
7191	Sum returns the hash of the given data .
7192	sweze takes a slice of state and puts them into out .
7193	reducedSqueeRow0 is used to reduce the state of a row .
7194	reducedDuplexRow1 is the inverse of reducedDuplexRow1 .
7195	NewReaderByteCodeLoader creates a new ReaderByteCodeLoader .
7196	LoadReader loads a bytecode from a reader .
7197	NewV3 creates a new UUID based on the given namespace and name .
7198	txLiteral sets the literal value as a literal .
7199	txFetchSymbol fetches the current symbol .
7200	txMarkRaw marks the state as a raw string .
7201	txUnmarkRaw marks the state as unmarkRaw .
7202	TxPrint is used to print a string
7203	txPrintRaw is used to print a raw message .
7204	NewLoopVar returns a new LoopVar
7205	txMakeArray is a helper function that panics if an array is invalid .
7206	TxFunCallOmni is a wrapper around txFuncs
7207	DumpAST sets the state of the AST to true .
7208	DumpByteCode sets the output flag to true .
7209	Optimize tries to optimize the instructions in a byte array .
7210	NewFuncDepot creates a new funcDepot
7211	Get retrieves a value from the depot
7212	Set a value into the depot
7213	NewFileTemplateFetcher creates a new FileTemplateFetcher
7214	LastModified returns the last modification time .
7215	Reader returns an io . Reader
7216	Bytes returns the contents of the file .
7217	NewState returns a new state .
7218	PushFrame pushes a new frame onto the stack .
7219	PopFrame removes the last frame from the stack .
7220	CurrentFrame returns the top frame of the stack .
7221	Warnf records a warning message .
7222	AppendOutputString appends a string to the output .
7223	Popmark removes an int from the markstack .
7224	CurrentMark returns the current mark .
7225	LoadByteCode loads a bytecode from the state .
7226	Reset resets the state to zero .
7227	DeclareVar adds a variable to the stack .
7228	GetLvar returns the value at i i
7229	SetLvar implements the SetLvar interface .
7230	NewByteCode creates a new byte code
7231	Append a op to the list
7232	AppendOp creates a new Op with the given type and args .
7233	String returns a string representation of the bytecode
7234	NewCachedByteCodeLoader creates a new CachedByteCodeLoader .
7235	Load loads a bytecode from the cache
7236	NewFileCache creates a new instance of FileCache
7237	GetCachePath returns cache path
7238	Get loads the entity from the cache
7239	Set stores the entity in the cache
7240	Delete removes the file from the cache
7241	Get returns the value for a given key
7242	Set stores the entity in the cache
7243	Delete removes the key from the cache
7244	NewStringLexer creates a Lexer from a string
7245	NewReaderLexer creates a new parser .
7246	NewV4 returns a new UUID .
7247	Parse parses the given template as a template
7248	ParseReader creates an AST from a reader
7249	Visit returns a channel on which nodes are sent .
7250	String returns a string representation of the AST .
7251	Run runs the VM with the given vars .
7252	DefaultParser is the default parser
7253	DefaultLoader sets the default loader for the transaction
7254	DefaultVM sets the default vm
7255	Get returns the value for the given key .
7256	NewHTTPSource creates a new HTTPSource from an http . Response
7257	NewStringByteCodeLoader creates a StringByteCodeLoader .
7258	LoadString parses a string into a bytecode
7259	Get returns the value for the given key
7260	NewOp creates a new op .
7261	MarshalBinary serializes the op into a byte slice .
7262	UnmarshalBinary decodes binary data into op .
7263	ArgInt returns the arg as an int .
7264	ArgString returns the argument as a string .
7265	AppendOp is a variant of AppendOp .
7266	Compile the given AST .
7267	NewV5 creates a new UUID based on a namespace UUID .
7268	Sort sorts a list of symbols
7269	Less implements the sort . Interface .
7270	Swap implements sort . Interface .
7271	Copy copies all symbols
7272	Set sets symbol .
7273	GetSortedList returns the sorted list
7274	Top returns the top element of the stack
7275	Resize resizes the stack to size .
7276	Extend extends the stack
7277	Grow resizes the stack to min .
7278	Get returns the element at index i
7279	Set sets the value at index i
7280	Push a value to the stack
7281	Pop pops the top element from the stack
7282	String returns the string representation of the stack
7283	GetHostIPs returns a slice of IPv6 IP addresses .
7284	GetPrivateHostIPs returns a list of all private IP addresses
7285	IsPrivate returns true if the given IP is a private IP
7286	Environ returns a slice of environment variables
7287	getenv returns the value of the named environment variable
7288	flagAsEnv converts a flag name to a variable name .
7289	NewPolicy returns a default policy .
7290	CreateRandom returns a slice of random bytes
7291	Shuffle random bytes
7292	Generate generates a random password using the specified policy .
7293	ExecutableFolder returns the folder of the executable
7294	Ignore sets the list of errors to ignore .
7295	Sigs is an Option to set the signals to shutdown .
7296	Logf is a functional option for Sentinel .
7297	Errorf is a functional option to set the error message .
7298	New creates a new Sentinel .
7299	Run starts the Sentinel .
7300	Shutdown shuts down all registered servers .
7301	ShutdownIgnore returns true if the given error should be ignored .
7302	Register adds a new Sentinel to the Sentinel server .
7303	Mux returns a new net . net . net . Listener .
7304	HTTP starts an HTTP server .
7305	IgnoreError returns true when the given error is ignored .
7306	IgnoreNetOpError returns true if err is ignored .
7307	convertAndAppendContextFuncs takes a slice of functions and appends them to the original slice .
7308	helper function to initialize the gtg router
7309	buildInfoHandler returns the build - info page .
7310	Encode encodes v into JSON data .
7311	Json returns a handler that maps JSON data to a struct
7312	validateAndMap invokes martini . Validate and maps it to errors
7313	Count returns the total number of errors
7314	Header creates a map of CORS headers .
7315	PreflightHeader returns a map of headers that are allowed to be allowed to be allowed .
7316	IsOriginAllowed checks if origin matches any of the allowed origins .
7317	Allow returns an http . HandlerFunc that applies the specified options .
7318	Renderer returns a Handler that maps the given options to the router .
7319	String returns a human - readable version of AcceptLanguages .
7320	Languages returns a map of AcceptLanguage headers
7321	Prefix returns a handler that removes all paths from the request
7322	Basic defines basic auth middleware
7323	UpdateUser updates the user in the session .
7324	Get a user by id
7325	AddressToAccountId converts an address to an xdr . AccountId .
7326	MutateChangeTrust modifies the ChangeTrustOp
7327	MutateChangeTrust is part of the xdr . ChangeTrustOp interface .
7328	Trust creates a change for a credit asset
7329	RemoveTrust creates a new change trust builder
7330	MutatePayment parses a CreditAmount object from a PaymentOp
7331	MutatePayment modifies the destination .
7332	MutatePayment modifies the native amount of a native amount
7333	MutatePayment modifies the payment operation
7334	MutateAccountMerge modifies the AccountMergeBuilder interface .
7335	MustParse is like Parse but panics if an error occurs .
7336	Parse parses a string into an xdr . Int64 .
7337	String converts xdr . Int64 to a string .
7338	CreateOffer creates a new OffererBuilder .
7339	CreatePassiveOffer creates a passive offer .
7340	UpdateOffer creates a ManageOffer .
7341	DeleteOffer deletes an offer .
7342	ManageOffer creates a new ManageOfferBuilder
7343	Mutate applies the given mutators to the ManageOfferBuilder .
7344	MutateManageOffer parses the amount of an offer operation .
7345	MutateManageOffer implements the ManagedOfferOp interface .
7346	MutateManageOffer parses the parameters of an operation .
7347	MutateOperation implements xdr . Opener
7348	String returns a string representation of the price .
7349	Transaction creates a new transaction builder .
7350	Mutate applies a transaction to the builder .
7351	Hash returns the hash of the transaction
7352	HashHex returns the hash of the transaction .
7353	Sign returns a new transactionEnvelope with the given signers .
7354	MutateTransaction adds the allowTrustBuilder to the transaction builder .
7355	MutateTransaction adds the ChangeTrustBuilder to the transactionBuilder .
7356	MutateTransaction modifies the transaction to create a new account
7357	MutateTransaction populates the TransactionBuilder with sane defaults .
7358	MutateTransaction adds the transaction to the transactionBuilder .
7359	MutateTransaction adds a ManagedDataBuilder to the transaction .
7360	MutateTransaction modifies the transactionBuilder to create the transaction
7361	MutateTransaction adds the MemoHash to the transaction
7362	MutateTransaction adds a MemoID to the transaction .
7363	MutateTransaction adds the MemoReturn to the transaction
7364	MutateTransaction adds the MemoText to the transaction .
7365	MutateTransaction mutates the transaction
7366	MutateTransaction modifies the transaction builder s body
7367	MutateTransaction modifies the TransactionBuilder .
7368	MutateTransaction sets the sequence number
7369	MutateTransaction adds the source account to the transaction .
7370	Scan implements the sql . Scanner interface .
7371	InitialState returns the initial state for the given LedgerKey
7372	Changes returns the set of changes for the given target key .
7373	StateAfter returns the state after the given opidx .
7374	changes returns all changes that match the given target .
7375	MustDecode is like Decode but panics if an error occurs .
7376	Encode encodes src into a base32 encoded string
7377	MustEncode is like Encode but panics if an error occurs .
7378	checkValidVersionByte returns nil if the version is valid
7379	Checksum returns the checksum of data
7380	Validate checks the checksum of data against the expected checksum .
7381	LedgerKey returns the LedgerKey for the change .
7382	checkPlossible checks that the base32 prefix is valid .
7383	Address returns the account id as a string
7384	Equals returns true if this AccountId is equal to other .
7385	SetAddress sets the given address .
7386	ToXdrObject converts an Asset to an xdr . Asset .
7387	Through adds an asset to the PayWithPath
7388	PayWith returns a PayWithPath for the asset
7389	continuatedFraction is the same as continuedFraction .
7390	Mutate applies the given mutators to the transaction envelope .
7391	MutateTX applies the given mutators to this envelope .
7392	Bytes returns the encoded bytes of the transaction envelope .
7393	Base64 returns the base64 encoded bytes
7394	MutateTransactionEnvelope mutates the transaction envelope
7395	MutateSetOptions implements the SetOptionsOp interface .
7396	MutateSetOptions updates the InflationDest field of an InflationDest struct .
7397	MutateSetOptions implements the MutableSetOptions interface .
7398	MutateSetOptions modifies the Signer s Signer .
7399	SetThresholds creates a new thresholds struct
7400	MutateSetOptions mutates a SetOptionsOp
7401	MutateSetOptions modifies the SetFlagsOp
7402	MutateSetOptions modifies the set flags .
7403	MutateCreateAccount modifies the CreateAccountOp field of a CreateAccountOp .
7404	MutateCreateAccount applies the initial amount to create a new account .
7405	Random generates a random key from the seed
7406	Master returns the master key of the given password .
7407	Parse parses an address from a string .
7408	MustParse is like Parse but panics if an error occurs .
7409	MutateAllowTrust is part of the AllowTrustOp interface .
7410	MutateAllowTrust implements the AllowTrustAsset interface .
7411	MutateAllowTrust updates the AllowTrust fields of an AllowTrustOp
7412	ToAsset converts an AllowTrustOpAsset into an Asset .
7413	SetNative sets the native asset .
7414	String returns the string representation of an asset .
7415	Equals returns true if asset is equal to other .
7416	MustExtract is like Extract but panics if error
7417	Unmarshal is a wrapper around xdr . Unm . Unmarshal .
7418	Marshal writes v to w .
7419	ValidEnum returns true if the crypto key type is valid
7420	NewPublicKey creates a PublicKey type
7421	MustEd25519 returns the Ed25519 value or panics if not set .
7422	NewNodeId generates a new node id
7423	NewAccountId creates a new AccountId
7424	ValidEnum returns true if the asset type is valid .
7425	armForSwitch returns the arm name for the switch
7426	NewAsset creates a new asset
7427	MustAlphaNum4 returns the AssetAlphaNum4 property if not set .
7428	GetAlphaNum4 returns the alpha number of the asset s alpha number .
7429	MustAlphaNum12 returns the asset s AlphaNum12 property or panics if not set .
7430	GetAlphaNum12 returns the alphaNum12 value of the asset .
7431	ValidEnum returns true if the threshold index is valid .
7432	ValidEnum returns true if the entry is a valid enum value
7433	ValidEnum returns true if the AccountFlags is valid
7434	NewAccountEntryExt creates a new AccountEntryExt
7435	ValidEnum returns whether the trust line flags is valid
7436	NewTrustLineEntryExt creates a new TrustLineEntryExt
7437	ValidEnum returns true if the offer entry flags is valid .
7438	NewOfferEntryExt creates a new offer entry ext .
7439	NewDataEntryExt creates a new DataEntryExt .
7440	NewLedgerEntryData creates a new LedgerEntryData instance
7441	NewLedgerEntryExt creates a new LedgerEntryExt
7442	ValidEnum returns true if the envelope type is valid .
7443	ValidEnum returns true if the operation type is valid .
7444	armForSwitch implements the ActForSwitchAsset interface .
7445	NewAllowTrustOpAsset creates a new AllowTrustOpAsset from an asset type
7446	MustAssetCode4 returns the assetCode4 value or panics if not set .
7447	GetAssetCode4 returns the asset code 4 .
7448	MustAssetCode12 returns assetCode12 if not set .
7449	GetAssetCode12 returns the asset code12 for the given type .
7450	NewOperationBody creates a new OperationBody object
7451	MustCreateAccountOp returns the CreateAccountOp if not set .
7452	GetCreateAccountOp returns the CreateAccountOp field of the operation .
7453	MustPaymentOp returns the PaymentOp if not set .
7454	GetPaymentOp returns the payment operation s payment operation .
7455	MustPathPaymentOp returns the PathPaymentOp if not set .
7456	GetPathPaymentOp returns the path payment operation .
7457	MustManageOfferOp returns the ManageOfferOp if not set .
7458	GetManageOfferOp returns the ManageOfferOp for the switch type .
7459	MustCreatePassiveOfferOp returns the CreatePassiveOfferOp if not set .
7460	GetCreatePassiveOfferOp returns the CreatePassiveOfferOp field of the operation .
7461	MustSetOptionsOp returns the SetOptionsOp if not set .
7462	GetSetOptionsOp returns the set options operation .
7463	MustChangeTrustOp returns the ChangeTrustOp if not set .
7464	GetChangeTrustOp returns the ChangeTrustOp value of the switch .
7465	MustAllowTrustOp returns the AllowTrustOp if not set .
7466	GetAllowTrustOp returns the value of AllowTrustOp .
7467	MustDestination returns the destination value if not set .
7468	GetDestination returns the destination id of the operation
7469	MustManageDataOp returns the ManageDataOp if not set .
7470	GetManageDataOp returns the current ManageDataOp if any .
7471	ValidEnum returns true if the MemoType is valid
7472	ArmForSwitch returns a human - readable string for the given switch
7473	NewMemo creates a new Memo instance .
7474	MustText returns the contents of the Memo . If not set it panics .
7475	GetText returns the string value for the switch
7476	MustId returns the Id of the Memo
7477	GetId returns the id for the switch
7478	MustHash returns the hash value or panics if not set .
7479	GetHash returns the hash of the current arm
7480	MustRetHash returns the RetHash value panics if not set
7481	NewTransactionExt creates a new TransactionExt
7482	ValidEnum returns true if the CreateAccountResultCode is valid
7483	ArmForSwitch returns a string for the switch status code
7484	NewCreateAccountResult creates a new CreateAccountResult with the given code and value .
7485	ValidEnum returns true if the payment result code is valid
7486	ArmForSwitch returns a string for the switch status code
7487	NewPaymentResult creates a new PaymentResult instance
7488	ValidEnum returns true if the result code is valid
7489	armForSwitch returns a string that can be used to switch to the given status code
7490	NewPathPaymentResult creates a new PathPaymentResult instance
7491	MustNoIssuer returns the NoIssuer value if not set .
7492	GetNoIssuer returns the asset if any .
7493	ValidEnum returns true if the result code is valid
7494	ValidEnum returns true if the effect value is valid .
7495	armForSwitch returns the arm status for the switch
7496	NewManageOfferSuccessResultOffer creates a new ManageOfferSuccess result
7497	ArmForSwitch returns the switch status code for the switch
7498	NewManageOfferResult creates a new ManageOfferResult from the given code and value
7499	ValidEnum returns true if the result code is valid
7500	ArmForSwitch returns the arm for the switch status code
7501	NewSetOptionsResult creates a new SetOptionsResult instance
7502	ValidEnum returns true if the ChangeTrustResultCode is valid
7503	ArmForSwitch returns a string indicating whether the change was a change or not .
7504	NewChangeTrustResult creates a new ChangeTrustResult instance
7505	ValidEnum returns true if the AllowTrustResultCode is valid
7506	armForSwitch returns true if the switch is in the allowed state
7507	NewAllowTrustResult creates a new AllowTrustResult with the given code and value .
7508	ValidEnum returns true if the AccountMergeResultCode is valid
7509	ArmForSwitch returns the switch status code for the switch .
7510	NewAccountMergeResult creates a new AccountMergeResult instance
7511	MustSourceAccountBalance returns the source account balance field if not set .
7512	GetSourceAccountBalance returns the source account balance for the switch .
7513	ValidEnum returns true if the InflationResultCode is valid
7514	ArmForSwitch returns true if the state is in the state
7515	NewInflationResult creates a new InflationResult
7516	MustPayouts returns the slice of InflationPayouts if not set .
7517	GetPayouts returns the Payouts for the switch .
7518	ValidEnum returns true if the result code is valid
7519	ArmForSwitch returns the arm status code for the switch
7520	NewManageDataResult creates a new ManageDataResult with the given code and value .
7521	ValidEnum returns true if the result code is valid
7522	armForSwitch returns the arm type string for the given operation type .
7523	NewOperationResultTr creates a new OperationResultTr object
7524	MustCreateAccountResult returns the CreateAccountResult field if not set .
7525	GetCreateAccountResult returns the type of CreateAccountResult .
7526	MustPaymentResult returns the PaymentResult field panics if not set
7527	GetPaymentResult gets the payment result from the switch .
7528	MustPathPaymentResult returns the PathPaymentResult or panics if not set .
7529	GetPathPaymentResult returns the current path payment result .
7530	MustManageOfferResult is a helper method that panics if not set .
7531	GetManageOfferResult returns the currently managed offer result .
7532	MustCreatePassiveOfferResult implements the CreatePassiveOfferResult interface .
7533	MustSetOptionsResult - panics if SetOptionsResult is not set .
7534	GetSetOptionsResult returns the set options result .
7535	MustChangeTrustResult returns the ChangeTrustResult value or panics if not set .
7536	GetChangeTrustResult returns the change trust result .
7537	MustAllowTrustResult returns the AllowTrustResult value if set .
7538	GetAllowTrustResult returns the AllowTrustResult as bool
7539	MustAccountMergeResult returns the AccountMergeResult if set .
7540	GetAccountMergeResult gets the account merge result from the switch .
7541	MustInflationResult returns the InflationResult or panics if not set .
7542	GetInflationResult returns the current InflationResult .
7543	MustManageDataResult returns the ManageDataResult if set or panics .
7544	GetManageDataResult returns the current ManagedDataResult .
7545	ArmForSwitch returns the arm string for the given status code .
7546	NewOperationResult creates a new OperationResult
7547	MustTr returns the Tr field if set .
7548	GetTr returns the tr value of the switch .
7549	ValidEnum returns true if the transaction result code is valid
7550	armForSwitch returns a string for the switch status code
7551	NewTransactionResultResult creates a new TransactionResult from a code and value
7552	MustResults returns a slice of OperationResults if not set .
7553	GetResults returns the results for the switch .
7554	NewTransactionResultExt initializes a new TransactionResultExt .
7555	NewStellarValueExt creates a new StellarValueExt object .
7556	NewLedgerHeaderExt creates a new LedgerHeaderExt
7557	ValidEnum returns true if the LedgerUpgradeType is valid .
7558	armForSwitch returns a string that can be used for switch upgrade .
7559	NewLedgerUpgrade creates a new LedgerUpgrade object
7560	MustNewLedgerVersion is the same as NewLedgerVersion but panics if not set .
7561	GetNewLedgerVersion returns the new version for the switch
7562	MustNewBaseFee is a helper method that panics if not set .
7563	GetNewBaseFee gets the current base fee for the switch
7564	MustNewMaxTxSetSize returns the new max tx set size if not set .
7565	GetNewMaxTxSetSize gets the new max tx set size .
7566	armForSwitch returns a human - readable string for the switch
7567	NewLedgerKey creates a new LedgerKey
7568	ValidEnum returns true if the entry is valid .
7569	ArmForSwitch returns the switch name for the switch
7570	NewBucketEntry creates a new bucket entry
7571	MustLiveEntry returns the LedgerEntry if not set
7572	GetLiveEntry returns the LedgerEntry value of the LedgerEntry
7573	MustDeadEntry returns the LedgerKey value or panics if not set
7574	GetDeadEntry returns the LedgerKey value of the switch .
7575	NewTransactionHistoryEntryExt creates a new TransactionHistoryEntryExt .
7576	armForSwitch returns a human - readable string for the switch
7577	NewTransactionHistoryResultEntryExt creates a new TransactionHistoryResultEntryExt .
7578	NewLedgerHeaderHistoryEntryExt creates a new LedgerHeaderHistoryEntryExt
7579	NewScpHistoryEntry creates a new ScpHistoryEntry
7580	ValidEnum returns true if the entry change type is valid .
7581	armForSwitch returns the arm type string for the switch
7582	NewLedgerEntryChange creates a new LedgerEntryChange
7583	MustCreated returns the created value or panics if not set .
7584	GetCreated returns the LedgerEntryChange value
7585	MustUpdated returns the updated value or panics if not set .
7586	GetUpdated returns the updated value
7587	MustRemoved returns the removed value or panics if not set .
7588	GetRemoved returns the removed value of the LedgerEntryChange
7589	MustState returns the current state of the LedgerEntry
7590	GetState returns the LedgerEntry value for the switch
7591	NewTransactionMeta initializes a TransactionMeta
7592	MustOperations is part of the TransactionMeta interface .
7593	GetOperations returns the operation metadata for the switch
7594	ValidEnum returns true if the error code is valid
7595	ValidEnum returns true if the IP address type is valid .
7596	ArmForSwitch returns the ip address for the given switch
7597	NewPeerAddressIp creates a new PeerAddressIp from a type
7598	MustIpv4 returns the IPv4 address as IPv4 or panics .
7599	GetIpv4 returns the ipv4 address for the switch
7600	MustIpv6 returns the IPv6 field if not set .
7601	GetIpv6 returns the ipv6 address for the switch
7602	ValidEnum returns true if the message type is valid .
7603	armForSwitch returns the arm type name for a swarm message .
7604	NewStellarMessage creates a StellarMessage from a Message type .
7605	MustError returns the error if not set .
7606	GetError returns the error of the stellar message .
7607	MustHello is the same as GetHello but panics if not set .
7608	GetHello returns the Hello value of the message .
7609	MustAuth returns the Auth object panics if not set .
7610	GetAuth returns the auth value for the switch
7611	MustDontHave returns the DontHave field if not set .
7612	GetDontHave returns the DontHave field of the switch
7613	MustPeers returns the slice of peers
7614	Get peer addresses
7615	MustTxSetHash returns the TxSetHash field if not set .
7616	GetTxSetHash returns the tx set hash of the message .
7617	MustTxSet returns the TransactionSet field panics if not set .
7618	GetTxSet returns the TransactionSet field of the switch .
7619	MustTransaction returns the stellar message if not set .
7620	GetTransaction returns the transaction envelope of the stellar message .
7621	MustQSetHash returns the QSetHash value or panics if not set .
7622	GetQSetHash returns the QSetHash of the message .
7623	MustQSet returns the ScpQuorumSet field if not set .
7624	GetQSet returns the SCPQuorumSet value .
7625	MustEnvelope returns the envelope value or panics if not set .
7626	GetEnvelope returns the envelope of the message
7627	MustGetScpLedgerSeq returns the getScpLedgerSeq value if not set .
7628	GetGetScpLedgerSeq returns the getScpLedgerSeq value for the switch
7629	ArmForSwitch returns true if the switch is in the switch mode .
7630	NewAuthenticatedMessage creates a new AuthenticatedMessage
7631	ValidEnum returns true if the ScpStatementType is valid
7632	armForSwitch returns the arm for the switch
7633	NewScpStatementPledges creates a new ScpStatementPledges object
7634	MustPrepare returns the Prepare field if set .
7635	GetPrepare gets the Prepare status for the switch
7636	MustConfirm is a helper function that panics if not set
7637	GetConfirm returns the bool value for the switch
7638	MustExternalize returns the Externalize field if set .
7639	GetExternalize returns the externalize flag for the switch
7640	MustNominate returns the ScpNnominate value if set
7641	GetNominate gets the nominate of the switch
7642	SafeUnmarshalBase64 decodes base64 encoded data into dest
7643	SafeUnmarshal is used to unmarshal data into dest .
7644	SendAmount returns the total amount of payment
7645	LoadAccount loads an account by ID .
7646	SequenceForAccount returns the sequence number for the given accountID .
7647	SubmitTransaction submit a transaction
7648	Equals compares two LedgerKey objects .
7649	SetAccount sets the account id
7650	SetData sets data
7651	SetOffer sets the offer id and id
7652	SetTrustline sets the trust line for an account
7653	Add adds a key value pair to the set .
7654	tryHash is a helper function that tries to add a hash to the bucket . It returns true if there are duplicate keys .
7655	HashIndexFromKey returns the hash index of the given key .
7656	ReadInt from the slice
7657	Read reads a CHD from r .
7658	Get returns the value for the given key .
7659	Iterate returns an iterator for all keys .
7660	Write writes the CHD to the given io . Writer .
7661	RegisterDatasources is used to register the datasources at the specified path .
7662	RegisterFonts registers the fonts at the specified path .
7663	New returns a new Map pointer .
7664	NewSized returns a new Map instance .
7665	Load a map .
7666	Resize changes the size of the map
7667	Free frees the map .
7668	SRS returns the SRS of the map .
7669	ZoomAll zoom_all zoom_all
7670	ZoomTo sets the zoom to the world .
7671	Render renders a map .
7672	RenderImage renders the map as a PNG image .
7673	RenderToFile renders the map to the specified path .
7674	SetBufferSize sets the size of the map
7675	Search returns a list of search responses .
7676	Get returns the next available connection from the pool . If the pool is empty a new one will be created .
7677	put adds the given connection back to the pool .
7678	MonoToStereoF32 converts the audio buffer to a float32 buffer .
7679	BitCrush transforms a bit buffer into a bit buffer .
7680	NormalizeMax normalizes the values of the audio buffer
7681	G Gain multiplies the audio buffer by the given multiplier .
7682	MonoDownmix performs the downmix of the buffer .
7683	Quantize quantizes the audio buffer according to the given bitDepth .
7684	PCMScale converts audio buffer to PCM scale .
7685	StereoPan sets the stereo value of the buffer . Panics if the buffer is invalid .
7686	Leader returns the current leader .
7687	IsLeader returns if the candidate is leader .
7688	NewResponse creates a new Response .
7689	GetRequestID gets the request id from the context
7690	Log writes to the monitorableWriter .
7691	SendMailSSL is used to connect to an SMTP server
7692	Send sends a mail message
7693	WaitForIt waits for the given TCP to connect to the given host .
7694	Get loads a configuration from source
7695	initConfig is used to initialize the configuration
7696	WritePluginResultsToDatabase writes plugin results to database
7697	NewAuthController creates a new auth controller
7698	Authenticate handles the authentication of a user
7699	NewOAuth2Controller creates a new OAuth2Controller
7700	Refresh is used to refresh the refresh token
7701	Token retrieves the token from the OAuth2 flow
7702	Logging is a middleware that logs the request
7703	SingleFile returns a handler that serves a single file
7704	Write implements the http . ResponseWriter interface .
7705	Hijack implements the http . Hijacker interface .
7706	NewMongo creates a new instance of MongoDB
7707	Disconnect disconnects from Mongo
7708	New creates a new table with the given fields .
7709	PrintTable prints a table
7710	PrintHorizontal prints a map
7711	PrintRow prints a single row of fields
7712	AddRow adds a row to the table
7713	Print the table
7714	String returns a string representation of the table
7715	getHead returns the head of the table .
7716	rowString returns a string representation of a row .
7717	fieldString returns the string representation of a field
7718	stringTableDash returns the table dash - style dash .
7719	printMarkdownDash prints all the fields of the table .
7720	stringMarkdownDash returns a string markdown as a string .
7721	HashPassword hashes a password using scrypt .
7722	EncodeOAuth2Code encodes the OAuth2 code and returns the JWT token
7723	DecodeOAuth2Code decodes OAuth2 code .
7724	NewServer creates a new server
7725	Start starts the lunarc server
7726	Stop stops the lunarc server .
7727	NewLoggingServeMux returns a new LoggingServeMux .
7728	Handler returns a handler for the given request .
7729	Handle registers a logging handler for the given pattern .
7730	HandleFunc registers a handler for the given pattern .
7731	Init initializes the database
7732	WaitForConnection tries to connect to Elasticsearch
7733	StoreFileInfo stores the file info
7734	StorePluginResults stores the plugin results
7735	CamelCase converts src to CamelCase
7736	getOpt gets the value of an env variable
7737	getopts checks if userInput is set
7738	GetSHA256 returns the SHA256 of a file
7739	RunCommand runs the given command and returns the output .
7740	RemoveDuplicates removes duplicates
7741	Unzip unzips a zip archive
7742	SliceContainsString checks if a string is contained in a list
7743	NewSMTP creates a new SMTP instance
7744	SendMail send a mail message
7745	GetEnvironment returns the configuration for the given environment
7746	GetSMTP gets an SMTP configuration from source
7747	GetConfig loads a configuration from a source .
7748	GetEnvironment returns the configuration for the given environment
7749	GetMongo loads a configuration from a source .
7750	TokenHandler returns the JWT token from the request .
7751	Receive receives a raw message .
7752	Send sends an OutMsg .
7753	allBoshReleaseNames returns a list of all the release names in the given release .
7754	AddedProperty adds a new property to the delta job .
7755	RemovedProperty adds a removed property to the list .
7756	AddDeltaJob adds a new DeltaJob to the result
7757	Concat concatenates two result objects .
7758	Read returns an io . ReadCloser for the given release location .
7759	Pull pulls a release
7760	BuildJob creates a new job
7761	LoadBoshRelease loads a BoshRelease from the specified path
7762	readBoshRelease reads a BoshRelease from an io . Reader
7763	readBoshRelease reads a BoshRelease from rr .
7764	readBoshJob reads a job manifest from the given io . Reader
7765	NewRequest is used to create a new request
7766	PushCloudConfig sends a cloud config to BOSH
7767	Generate a job manifest
7768	CreateNewRecord creates a new Record
7769	NewShowCmd returns a new instance which can be used to issue a ShowCmd .
7770	All prints all the versions of the given release
7771	GetDefaultTaskImageResource returns the default image resource for the pipeline
7772	AddRawJob adds a raw job to the pipeline
7773	AddGroup adds a new group to the pipeline
7774	GetResourceByName returns the resource config with the given name
7775	AddRawResource adds a raw resource to the pipeline
7776	AddResource adds a new resource to the pipeline
7777	AddGithubResource adds a Github resource to the pipeline
7778	AddBoshIOResource adds a BoshIOResource to the pipeline
7779	AddBoshDeploymentResource adds a BoshDeploymentResource to the pipeline
7780	AddGitResource adds a new resource to the pipeline
7781	allJobNames returns the names of all the jobs in the differ .
7782	NewDeploymentManifestFromFile returns a new DeploymentManifest .
7783	NewDeploymentManifest returns a new DeploymentManifest
7784	AddRemoteRelease adds a new release to the manifest
7785	AddRemoteStemcell adds a new stemcell to the manifest
7786	Tag returns the tag for the given key
7787	RemoveTag removes a tag from the manifest
7788	LoadPivnetRelease loads a PivnetRelease from the specified path .
7789	BoshReleaseOrEmpty returns an existing BoshRelease if it exists
7790	readPivnetRelease populates the BoshRelease for the given path
7791	decodeYaml decodes a YAML reader into v .
7792	NewZipWalker returns a new zipWalker
7793	NewDiffCmd returns a new instance which can be used to issue a diff command .
7794	All returns the differences between two releases .
7795	Job diffs two releases
7796	New returns a differ that compares two releases .
7797	StructName returns the struct name for the record
7798	TypeName returns the type name for a record
7799	NewTgzWalker returns a new Walker
7800	NewBackoff creates a new backoff with the given strategy and limit .
7801	Reset resets the backoff state to zero .
7802	NewExponential creates a new backoff with the given start and limit .
7803	NewExponentialFullJitter creates a new backoff with the given start and limit .
7804	NewLinear creates a new backoff with the given start and limit .
7805	Get line size
7806	Get max size
7807	compute appends new lines to output
7808	WithTimeout adds the timeout to the post apps params
7809	WithContext adds the context to the post apps params
7810	WithHTTPClient adds the HTTPClient to the post apps params
7811	WithBody adds the body to the post apps params
7812	WithTimeout adds the timeout to the get apps app params
7813	WithContext adds the context to the get apps app params
7814	WithHTTPClient adds the HTTPClient to the get apps app params
7815	WithApp adds the app to the get apps app params
7816	UnmarshalBinary decodes binary representation of a RouteWrapper
7817	WithTimeout adds the timeout to the get apps params
7818	WithContext adds the context to the get apps params
7819	WithHTTPClient adds the HTTPClient to the get apps params
7820	WithTimeout adds the timeout to the delete apps app params
7821	WithContext adds the context to the delete apps app params
7822	WithHTTPClient adds the HTTPClient to the delete apps app params
7823	WithApp adds the app to the delete apps app params
7824	WithTimeout adds the timeout to the patch app routes route params
7825	WithContext adds the context to the patch apps app routes route params
7826	WithHTTPClient adds the HTTPClient to the patch apps app routes route params
7827	WithApp adds the app to the patch apps routes route params
7828	WithBody adds the body to the patch apps app routes route params
7829	WithRoute adds the route to the patch apps routes route params
7830	WithTimeout adds the timeout to the post app routes params
7831	WithContext adds the context to the post app routes params
7832	WithHTTPClient adds the HTTPClient to the post app routes params
7833	WithApp adds the app to the post apps routes params
7834	WithBody adds the body to the post app routes params
7835	WithTimeout adds the timeout to the put app routes route params
7836	WithContext adds the context to the put app routes route params
7837	WithApp adds the app to the put apps routes route params
7838	WithBody adds the body to the put app routes route params
7839	WithRoute adds the route to the put app routes route params
7840	WithTimeout adds the timeout to the get apps app routes params
7841	WithContext adds the context to the get apps app routes params
7842	WithHTTPClient adds the HTTPClient to the get apps app routes params
7843	WithApp adds the app to the get apps app routes params
7844	WithTimeout adds the timeout to the patch apps app params
7845	WithContext adds the context to the patch apps app params
7846	WithHTTPClient adds the HTTPClient to the patch apps app params
7847	WithApp adds the app to the patch apps app params
7848	WithBody adds the body to the patch apps app params
7849	WithTimeout adds the timeout to the put apps app params
7850	WithContext adds the context to the put apps app params
7851	WithApp adds the app to the put apps app params
7852	WithBody adds the body to the put apps app params
7853	UnmarshalJSON deserializes into a Task
7854	MarshalJSON method of Task
7855	Validate validates this task
7856	GetRanges returns a slice of IPv6 addresses
7857	WithTimeout adds the timeout to the get app routes route params
7858	WithContext adds the context to the get app routes route params
7859	WithHTTPClient adds the HTTPClient to the get apps app routes route params
7860	WithApp adds the app to the get apps routes route params
7861	WithRoute adds the route to the get app routes route params
7862	New creates a new function client
7863	SetTransport sets the transport
7864	WithTimeout adds the timeout to the delete app routes route params
7865	WithContext adds the context to the delete app routes route params
7866	WithHTTPClient adds the HTTPClient to the delete apps app routes route params
7867	WithApp adds the app to the delete apps routes route params
7868	WithRoute adds the route to the delete app routes route params
7869	WithTimeout adds the timeout to the get tasks params
7870	WithContext adds the context to the get tasks params
7871	WithHTTPClient adds the HTTPClient to the get tasks params
7872	NewValueStore returns a new value store .
7873	Close shuts down the store .
7874	SetBackend sets the backend
7875	Ring returns the ring
7876	GetLocalID returns the local id
7877	GetListenAddr returns the address of the local node
7878	Startup is part of the ReplGroupStore interface .
7879	shutdownFinished waits for the shutdown to finish .
7880	Stop the server
7881	Exit the server
7882	SelfUpgrade is used to upgrade the version
7883	SoftwareVersion returns the current version
7884	Shutdown shuts down the store
7885	Rant gets the Rant with the given ID .
7886	Profile gets the user s profile information .
7887	Search searches for a given term .
7888	Surprise returns the survey model .
7889	WeekweekRants returns a list of all Rants
7890	get user id
7891	Shutdown shuts down all stores
7892	FExists checks if the named file exists
7893	outbound reads messages from the channel .
7894	Parse messages from the pool
7895	Group creates a new Group
7896	Groups retrieves all the groups associated with the domain .
7897	GetGroup gets a group by name .
7898	Reticence truncates the given string to the given length .
7899	CheckPassword validates a password
7900	CleanUrl check url
7901	NewParameter creates a new Parameter
7902	MakeParams creates a new set of parameters .
7903	Parse parses the given reflect . Value
7904	Email returns the email address
7905	Forwarder creates a new forwarder .
7906	Forwarders gets all the forwarders for the domain .
7907	GetForwarder returns a forwarder for the domain name .
7908	New creates a new CGP struct
7909	EscapeCommaSeparated escapes a comma - separated list of strings .
7910	Alias returns an aliased alias .
7911	Email returns the email address
7912	Aliases returns all aliases for the account .
7913	RealName returns the real name for the account .
7914	Email returns email address
7915	Account returns a Account with the given name .
7916	Accounts returns all accounts for a domain .
7917	Exists checks if the domain exists .
7918	Aliases returns the list of aliases for the domain .
7919	Domain returns a Domain with the given name .
7920	Domains returns a list of domains
7921	New returns a new Err
7922	Wrap wraps WrapErr with wrapErr
7923	mergeIn merges the contents of the info into e with the publicMsgParts .
7924	wrapErrStr returns the wrapped error string
7925	concatln args
7926	MailingList creates a MailingList with the given name .
7927	Subscriber creates a new subscriber
7928	Subscribers returns a list of registered subscribers .
7929	MailingLists returns a list of mailing lists .
7930	NewByteKeyItem returns a pointer to a new byte slice .
7931	CompareBytes compares two bytes .
7932	CompareInt compares two integers .
7933	Alloc allocates memory for memory allocation l
7934	Free frees memory memory .
7935	Stats returns the stats of memory .
7936	FreeOSMemory frees OS memory .
7937	Add adds a new item to the segment .
7938	NewSegment creates a new segment .
7939	Assemble builds a skiplist from the given segments .
7940	CompareNodeTable is the same as CompareNodeTable .
7941	New creates a NodeTable .
7942	Stats returns statistics about the node .
7943	MemoryInUse returns the amount of memory in bytes .
7944	Gets the value associated with the key .
7945	Update updates the node with the given key in the node table .
7946	Remove deletes the node with the given key from the cache .
7947	Close closes the node table .
7948	MemoryInUse returns the total amount of memory in bytes
7949	debugMarkFree marks the node as free .
7950	Seek moves the iterator to the next item in the database .
7951	Next advances the iterator .
7952	Refresh refreshes the contents of the iterator .
7953	Close frees the underlying iterator .
7954	NewIterator creates a new iterator over the given snapshot .
7955	SeekFirst moves the iterator to the first element in the iterator .
7956	Next moves the iterator to the next item .
7957	Seek moves the iterator to the next iterator .
7958	Keys returns the list of keys in the list .
7959	Remove removes a node from the list .
7960	Add adds a new node to the list .
7961	NewWithConfig creates a new skiplist with the given config .
7962	FreeNode frees a node
7963	MakeBuf creates a new ActionBuffer .
7964	Size returns the number of items in n .
7965	NewLevel returns a new ziplist level
7966	Insert adds a new item to the skiplist .
7967	Insert2 inserts a new item into the skiplist .
7968	Insert3 inserts a new node at the specified position in the skiplist .
7969	Delete is used to delete a path
7970	DeleteNode is used to delete a node
7971	GetRangeSplitItems returns a slice of items that are split into nways .
7972	Bytes returns a copy of the item .
7973	ItemSize returns the size of the item in bytes .
7974	KVFromBytes returns the KV from the given byte slice .
7975	CompareKV compares two KV values .
7976	Emit sends an event to all handlers
7977	UnregisterHandler unregisters a handler
7978	IsHandlerRegistered returns true if the handler is registered
7979	CompareNitro returns 0 if they are equal
7980	DefaultConfig returns the default configuration .
7981	Delete bytes from the underlying io . Writer
7982	GetNode returns the skiplist node from the store .
7983	SetKeyComparator sets the key comparator
7984	UseMemoryMgmt is used to configure memory mgmt .
7985	NewWithConfig creates a new instance of Nitro
7986	MemoryInUse returns total amount of memory in bytes
7987	Close shuts down all nodes .
7988	NewWriter creates a new writer
7989	SnapshotSize returns the size of a snapshot .
7990	Encode writes the encoded snapshot to w .
7991	Decode reads the snapshot from the given buffer .
7992	Open returns true if the snapshot is open .
7993	CompareSnapshot compares two snapshots .
7994	GC runs garbage collector .
7995	GetSnapshots returns a slice of snapshots
7996	MemoryInUse returns the total amount of memory in bytes
7997	CompareBS returns - 1 if this is less than or equal to another .
7998	Acquire returns the barrier session or nil if it is active .
7999	Release adds a barrier to the free queue .
8000	FlushSession resets the barrier session .
8001	Apply applies the given stats to the given report .
8002	AddInt64 adds a int64 to the stats .
8003	AddUint64 adds a uint64 to the stats .
8004	Merge merges the stats into s . Stats .
8005	GetStats returns a copy of the skiplist .
8006	NewIterator creates a new skiplist iterator
8007	SeekFirst sets the first element in the iterator .
8008	SeekWithCmp seeks to the iterator with the specified condition .
8009	Seek moves the iterator to the next position of the iterator .
8010	Valid returns true if the iterator is valid false otherwise .
8011	Delete the iterator .
8012	Next moves the iterator to the next item .
8013	Init initializes SkuM1SmallBuilder
8014	FromURL returns a copy of the given URL
8015	ToURL converts a folder name to a URL
8016	Size returns the number of bytes in the tuple header .
8017	WriteTo implements io . WriterTo interface .
8018	Static serves a static file
8019	Read reads the configuration from the file .
8020	Del deletes a key from the configuration
8021	WriteTo writes the configuration to filename .
8022	checkSection checks if a section is section .
8023	checkLine parses a line of key = value pair
8024	checkComment returns true if the line contains a comment .
8025	NewResponseWrapper returns a new ResponseWrapper
8026	Hijack implements the http . Hijacker interface .
8027	CloseNotify implements the http . ResponseWriter interface .
8028	DateFormat specifies the default date format .
8029	Logger is a middleware that logs the HTTP response
8030	GetAvailableInventory returns a map of SKU to SKU
8031	Expiration sets the token expiration time .
8032	Claimer is a functional option that sets the claimer .
8033	Issuer specifies the issuer of the token .
8034	User specifies the user to use .
8035	Password sets the password used for authentication .
8036	Extractor returns a TokenOpt that sets a custom Extractor .
8037	TokenGenerator returns a token handler that uses the given authenticator .
8038	Token retrieves the token from the request context .
8039	Claims returns the JWT claims associated with the request context .
8040	String returns the string representation of the token .
8041	NewLexer creates a new Lexer .
8042	run runs the lexer .
8043	emit emits a token
8044	Skip whitespace .
8045	next returns the next unicode character .
8046	LineNum returns the number of lines in the input .
8047	Offset returns the offset of the current line
8048	errorf is used to handle an error token .
8049	lexText is the lexer implementation of the lexer interface .
8050	lexComment scans a comment .
8051	New returns a new tuple type .
8052	AddVersion adds a version to the tuple .
8053	Contains returns true if the field contains the given field .
8054	Offset returns the offset for the specified field .
8055	Versions returns a slice of version numbers .
8056	SetPrivateMeta sets the private meta data for a task
8057	SetPublicMeta sets the meta data for a task
8058	GetRedactedVersion returns a structured version of the task .
8059	Equal returns true if two tasks are equal
8060	HTTP adds a handler to the given handler .
8061	PutUint8 appends a uint8 value to the buffer .
8062	PutInt8 appends an int8 value to the buffer .
8063	PutUint16 appends a uint16 value to the buffer .
8064	PutInt16 appends an int16 value to the buffer .
8065	PutUint32 appends a uint32 value to the buffer .
8066	PutInt32 appends a int32 value to the buffer .
8067	PutUint64 appends a uint64 value to the buffer .
8068	PutInt64 appends an int64 value to the buffer .
8069	NewPackageList returns a PackageList .
8070	PutFloat32 appends a float32 value to the buffer .
8071	Classic creates a classic Martini with Martini .
8072	Languages specifies the languages to use .
8073	Session returns an Option that sets the session
8074	Data returns the context s context value .
8075	URL returns the URL with the given prefix and prefix .
8076	Size returns the size of the terminal
8077	GetRequestIDFromTaskResponse get request id from task response
8078	PutString appends a string value to the buffer .
8079	LoadDirectory loads all files in a directory
8080	LoadFile loads a package .
8081	LoadPackage loads a package .
8082	NewDecoder returns a new decoder for the given reader .
8083	NewDecoderSize returns a new decoder for the given reader .
8084	Panic is a middleware that recovers panics .
8085	DeployVApp deploys a fake vapp
8086	UnDeployVApp un - deploy a vapp
8087	Auth returns fake auth
8088	QueryTemplate gets a fake vapp template record
8089	NewEncoder returns a new encoder that writes to w .
8090	Getter returns an Option that sets a nonceGetter .
8091	Setter sets the nonce setter .
8092	Age is an option that sets the age of the cache .
8093	Nonce generates a new nonce based on the given options .
8094	NonceValueFromRequest returns the nonce status of the request if any .
8095	StoreNonce stores the nonce in the context .
8096	PutFloat32Array appends a float32 value to the buffer .
8097	PutFloat64Array appends a float64 value to the buffer .
8098	Do sends the request .
8099	NewLease creates a new Lease
8100	Delete deletes a lease
8101	Post creates a new lease
8102	ReStock creates a new SKU task
8103	Procurement creates a task
8104	InitFromHTTPRequest initializes the lease object
8105	Is returns true if this tuple is the same .
8106	Offset returns the offset value of the specified field .
8107	WriteTo writes the tuple to w .
8108	PutTuple adds a tuple to the buffer .
8109	WriteString write string
8110	NotFound returns a 404 response
8111	Run starts the agent
8112	NewWaitGroup creates a new WaitGroup .
8113	Add adds the wait group to the wait group .
8114	Wait blocks until all outstanding requests have completed .
8115	Gzip returns an http . Handler that applies the Accept - Encoding header .
8116	New creates a new InnkeeperClient
8117	Error sends a HTTP response with status code .
8118	Renderer returns a Handler for Render .
8119	NewClient creates a new PDClient .
8120	GetTask get task response
8121	WriteImageToHTTP writes an image to http . ResponseWriter .
