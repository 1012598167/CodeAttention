0	NewSTM creates a new STM transaction .
1	first returns the revision of rs .
2	cmps returns a list of conditions that are equal to the given revision .
3	NewSTMRepeatable creates a new TxM transaction .
4	NewSTMSerializable creates a new STM transaction .
5	NewSTMReadCommitted creates a new STM transaction .
6	NewCertPool creates a new CertPool from CAFiles
7	NewCert creates a new tls . Certificate
8	Pause pauses the peer .
9	Resume resumes the peer .
10	pick picks a message from the peer .
11	post performs an HTTP POST request .
12	newTxnResp creates a TxnResponse .
13	applyCompare performs a compare against the provided Compare .
14	OpCompact creates a new CompactOp .
15	NewPriorityQueue creates a new priority queue
16	Enqueue adds the given value to the queue .
17	NewLeaderStats creates a new LeaderStats struct
18	Succ updates the number of successes
19	Fail increments the fail counter
20	delete removes a watcher from the broadcasts map
21	startStreamWriter starts a streamWriter .
22	checkStreamSupport checks if a version is supported by the given version
23	maybeUpdate updates the current state of the match .
24	IsPaused returns true if the progress is paused
25	needSnapshotAbort returns true if the progress should be aborted .
26	add adds an inflight to the buffer .
27	growBuf grows the buffer of inflight .
28	freeTo frees the buffer from the buffer
29	SaveDBFrom saves the database snapshot to disk
30	DBFilePath returns the file path to the snapshotter .
31	Set converts a comma separated string into values .
32	NewUniqueStringsValue creates a new UniqueStringsValue
33	UniqueStringsFromFlag looks up the value of a UniqueStringsValue in the given FlagSet .
34	UniqueStringsMapFromFlag returns a map of unique strings values for a given flag .
35	Percentiles takes a slice of float64s and returns a slice of percentiles .
36	VerifyBootstrap verifies that the initial bootstrap is valid
37	VerifyJoinExisting checks if the initial cluster is valid
38	hasLocalMember returns an error if there is a member of the cluster config
39	advertiseMatchesCluster verifies that the initial peer URLs match .
40	ReqTimeout returns the timeout for the request
41	getStatus returns the current status of the raft .
42	GetDefaultHost returns the default host name .
43	getIfaceAddr gets the interface address associated with the given idx .
44	getIfaceLink retrieves the interface associated with the given interface index .
45	LSCommandFunc implements the ls command .
46	printLs prints a list of nodes
47	rPrint prints a node
48	NewLeaseRenewerCommand returns a new instance of lease renewer command
49	Read reads a snapfile from disk
50	GetCipherSuite returns the cipher suite associated with the given string .
51	post sends the given data to the cluster .
52	send adds a message to the raft .
53	sendHeartbeat sends a heartbeat message to the raft log .
54	bcastAppend broadcasts all progress updates to the cluster .
55	bcastHeartbeat is used to send a request to the cluster .
56	tickElection is invoked when the leader is elected .
57	tickHeartbeat triggers heartbeats heartbeats heartbeats .
58	stepCandidate takes a message and processes it .
59	restore is used to restore a snapshot
60	Promporable returns true if the raft node is active .
61	checkQuorumActive checks if the current quorum is active .
62	increaseUncommittedSize increases the number of uncommitted entries .
63	reduceUncommittedSize decreases the uncommitted size of the given list of entries .
64	newPeriodic creates a new Periodic .
65	Pause sets the periodic state .
66	Resume resumes the periodic state .
67	Lock locks the mutex
68	NewLocker returns a new lock .
69	NewFIFOScheduler creates a new fifo scheduler
70	Schedule adds a job to the fifo .
71	Stop stops the fifo .
72	NewServer creates a new server
73	StartServe starts the server
74	Stop stops the server .
75	Transport implements rpcpb . Transport .
76	RegisterInterruptHandler registers a new interrupt handler
77	HandleInterrupts handles SIGINT SIGTERM .
78	OpGet creates a new range operation .
79	OpDelete creates a delete operation .
80	OpPut creates a Put operation .
81	OpTxn creates a new op .
82	WithFromKey returns an OpOption that sets the key .
83	withTop is an option that sets the top level of the top of the target .
84	Exist checks if a directory exists .
85	searchIndex returns the index of the WAL file .
86	isValidSeq verifies that the WAL file is valid .
87	NewListener creates a new net . Listener
88	cafiles returns a list of trusted CA files
89	ServerConfig returns the TLS configuration for the server .
90	ClientConfig returns a TLS configuration for the client .
91	newTLSKeepaliveListener creates a new TLSKeepaliveListener
92	Apply a request
93	NewRoleCommand returns a new cobra command
94	RoleAddCommandFunc executes a role add command
95	RoleGetCommandFunc executes a role get command
96	Role grant permissions
97	Role revoke permission
98	NewCluster creates a new cluster .
99	NewClusterByConfig creates a new cluster with the given config .
100	HTTPMembers returns a list of client members
101	waitLeader waits for the leader to become leader
102	waitNoLeader waits until the leader is closed .
103	isMembersEqual checks if two slices are equal
104	listenGRPC starts listening on the grpc listener .
105	NewClientV3 creates a new gRPC client
106	Clone clones a member
107	Close closes the member .
108	Stop stops the member .
109	checkLeaderTransition checks if the current leader is in the current leader
110	Restart restarts the member .
111	Terminate terminates the member .
112	Metric retrieves a single metric
113	InjectPartition injects the other member to the other .
114	RecoverPartition reinitializes the members of the members .
115	NewClusterV3 creates a new ClusterV3
116	Parse with defaults
117	Parse the options from optMap
118	Key returns the key of the JWT .
119	fill fills the fields in the response header .
120	add adds a new watcher to the broadcast .
121	Watch starts watching for changes .
122	newFileEncoder creates a new encoder .
123	purgeFile is used to purge a file
124	Set converts a string to stringsValue
125	NewStringsValue creates a new StringsValue .
126	StringsFromFlag looks up the value of a StringFlag by name .
127	Cluster converts a string to a string
128	NewPageWriter creates a new PageWriter .
129	watch returns a watcher for the given key .
130	notify sends the event to all watchers .
131	clone creates a deep copy of the watcherHub .
132	isHidden checks if a path is hidden
133	createEtcdLogFile creates a new etcd log file
134	runEtcd runs the etcd command .
135	stopEtcd stops the etcd command .
136	Handles SIGQUIT and SIGQUIT and SIGQUIT
137	LimitListener wraps a net . Listener and returns a wrapped net . Listener .
138	allowMethod checks if a method is allowed to allow a request
139	NewWatchServer creates a new watch server
140	FiltersFromRequest converts the WatchCreateRequest to mvcc . FilterFunc
141	newPipelineHandler creates a new handler for the given Raft node .
142	checkClusterCompatibilityFromHeader checks if the X - Server - From header is valid .
143	KeyExists checks if a key exists
144	KeyMissing returns true if the key is missing
145	ValidateSecureEndpoints validates the given list of endpoints .
146	putNewKV creates a new key - value pair .
147	newUniqueEphemeralKey creates a new ephemeral key .
148	NewUpdateDirCommand implements the cli command
149	updatedirCommandFunc is used to update a directory
150	handleBackup is used to create a backup snapshot
151	saveDB saves the database to destDB .
152	NewWatchCommand creates a new watch command
153	NewV3 creates a new v3 manager .
154	Save is part of the Manager interface .
155	Status returns the status of the snapshot .
156	Restore is part of the interface .
157	NewAuthStore creates a new auth store
158	NewTokenProvider creates a new TokenProvider .
159	Resume a remote peer
160	removePeer removes a peer from the transport .
161	ActivePeers returns the number of active peers
162	resolveTCPAddrDefault attempts to resolve the address in the default resolver .
163	resolveTCPAddrs takes a slice of strings and returns a new slice of URLs .
164	urlsEqual returns true if two URLs are equal .
165	URLStringsEqual returns true if two URLs are equal .
166	NewLeaseCommand returns a new instance of Lease command
167	NewLeaseGrantCommand returns a new lease grant command
168	leaseGrantCommandFunc is part of the lease grant command
169	NewLeaseRevokeCommand returns a new lease revoke command
170	leaseRevokeCommandFunc is used to revoke a lease
171	NewLeaseTimeToLiveCommand returns a new instance of LeaseTimeToLiveCommand
172	leaseTimeToLiveCommandFunc is part of the leasetime interface
173	NewLeaseListCommand returns a new lease list command
174	leaseListCommandFunc implements the OpenShift cli command
175	NewLeaseKeepAliveCommand returns a new instance of lease keep - alive command
176	leaseKeepAliveCommandFunc executes a lease keep - alive command
177	NewAlarmCommand creates a new cobra command
178	AlarmDisarmCommandFunc runs the alarm command
179	alarmListCommandFunc is used to handle alarm list commands
180	Flags returns the flags of the etcd .
181	EmbedConfig returns an embed . Config for etcd
182	PProfHandlers returns a map of pprof handlers
183	NewBackendQuota creates a new Quota
184	NewClusterProxy creates a ClusterServer
185	NewHandler returns a new http . Handler
186	TimeToLiveHTTP sends a request to the lease .
187	newWatcherBatch creates a watcherBatch with the given events .
188	add adds a watcher to the group .
189	contains returns true if the given key exists in the group .
190	delete removes a watcher from the list and returns true if the watcher was removed .
191	choose returns a new watcherGroup with the given maxWatchers .
192	WatcherSetByKey returns a set of watcher set matching the given key .
193	Compare compares two intervals .
194	successor returns the successor node of x .
195	updateMax updates the max value of the node .
196	visit recursively visits the intervals node .
197	Delete deletes an IntervalTree from the tree .
198	Insert inserts an element into the tree .
199	rotateLeft rotates the left of the left node .
200	replaceParent sets the parent node to the root node .
201	MaxHeight returns the maximum height of the tree .
202	Visit implements the Tree interface .
203	find returns the next node in the tree .
204	Find returns the first occurrence of an IntervalTree .
205	Intersects reports whether the given interval is within the tree .
206	Contains returns true if the interval is in the tree .
207	Ath returns all the intervals in the tree .
208	Union inserts the given IntervalTree into the tree
209	NewExactReadCloser returns an io . ReadCloser that reads from rc .
210	NewElection creates a new election
211	ResumeElection creates a new election
212	Propclaim adds the current leader to the election .
213	Resign resets the current leader .
214	Leader returns the current leader .
215	Observe starts a goroutine to receive events .
216	check checks if r is available
217	NewExecWatchCommand creates a new exec watch command
218	Execute watch command
219	NewListener creates a new listener
220	NewRoundTripper creates a new http . RoundTripper
221	createPostRequest creates an HTTP POST request
222	checkPostResponse checks if the status code is valid
223	serverVersion extracts the X - Server - Server - Version from the HTTP header .
224	checkVersionCompatibility returns the local version and local version of the local cluster .
225	setPeerURLsHeader sets the X -PeerURLs header .
226	addRemoteFromRequest adds a remote from the HTTP request
227	NewKeysAPIWithPrefix creates a new KeysAPI .
228	TTLDuration returns the TTL of the node
229	SetPflagsFromEnv sets all flags in the specified environment .
230	FlagToEnv converts a flag name to a string
231	expect returns the abbreviated string of the given string .
232	passConfChange returns true if the entry is a ConfChange
233	printInternalRaftRequest prints the internal Raft request .
234	listEntriesType prints the list of entries for the given entrytype .
235	newLog creates a new raftLog instance .
236	newLogWithSize creates a new raftLog instance .
237	findConflict returns the index of the given entries .
238	nextEnts returns the next entries in the log .
239	allEntries returns all entries in the log .
240	slice returns a slice of entries in the store .
241	NewSession creates a new session
242	Close the session
243	WithTTL sets the TTL of the session
244	WithLease sets the lease ID
245	addRequest adds a request to the queue .
246	recvAck returns the number of pending messages in the pending read index .
247	advance scans all pending messages and returns them .
248	lastPendingRequestCtx returns the context of the request context
249	Start starts the etcd server
250	start starts the etcd server
251	Process implements the EtcdServer interface .
252	ReportSnapshot reports snapshot status .
253	MoveLeader moves the current leader to the current leader
254	TransferLeadership is part of the EtcdServer interface .
255	configure is used to apply a configuration change
256	sync sends a synchronous request
257	publish publishes the local member to the cluster
258	applyEntryNormal applies the raft entry to the raft server .
259	applyConfChange is used to apply a ConfChange
260	monitorVersions monitors the etcd versions of etcd
261	goAttach runs f on the server .
262	NewRoundrobinBalanced creates a picker .
263	Pick implements the balancer interface .
264	NewTLSListener creates a new TLS listener
265	acceptLoop is a long running routine to accept connections
266	SetEndpoints sets the endpoints of the resolver group .
267	Target returns the full URL of the endpoint group .
268	Target is a helper function to create a new URL based on the given id and endpoint .
269	Build creates a new resolver .
270	Handle handles the request
271	NewElectionCommand returns a new instance of the election command
272	nodeToMember converts a NodeExternable NodeExternable .
273	NewTmpBackend creates a new database backend with the given batchInterval
274	newRevision creates a new revision
275	Run starts the auto - compaction .
276	Pause pauses the revision .
277	Resume resumes the revision .
278	VoteRespMsgType converts a message type to a vote response type .
279	DescribeMessage returns a human readable description of a message .
280	DescribeEntry returns a human readable description of an entry .
281	DescribeEntries returns a human - readable description of the given list of entries .
282	SetLogger sets gRPC logger
283	GetLogger returns the current logger .
284	maybeFirstIndex returns the first index of the snapshot .
285	maybeLastIndex returns the last index of the last entry .
286	maybeTerm returns the term s term .
287	reloadEntriesArray shrinks the slice of entries to grow .
288	SaveSnap saves the snapshot to the WAL .
289	New creates a new Client .
290	NewCtxClient creates a new Client with the given context .
291	NewFromURL creates a new Client with the given URL .
292	Close closes the client
293	Endpoints returns the endpoints of the client .
294	SetEndpoints sets the endpoints of the client .
295	Sync updates the client endpoints .
296	dialSetupOpts is used to setup the GRPC connection options
297	Dial establishes a connection to a GRPC connection .
298	dialWithBalancer establishes a GRPC connection to the cluster .
299	dial creates a GRPC client connection .
300	WithRequireLeader returns a context with the metadata required for the context
301	roundRobinQuorumBackoff returns a backoffFunc that attempts to retry the quorum .
302	isHaltErr returns true if the given error is a fatal error .
303	NewLease creates a new Lease
304	IsCreate returns true if the event is created
305	Err is part of the WatchResponse interface .
306	IsProgressNotify returns true if the WatchResponse is a progress notification
307	RequestProgress requests progress for the watcher .
308	nextResume returns the next watcher stream .
309	dispatchEvent is used to dispatch an event to the server
310	broadcastResponse sends the given watch response to all subscribed channels .
311	unicastResponse sends a response to the client .
312	joinSubstreams joins all substreams and resuming them .
313	toPB converts the watchRequest to a protobuf message .
314	toPB converts the progress request to a watch request .
315	Contains implements the unsafeSet interface .
316	ContainsAll implements the unsafeSet interface .
317	Equals compares two sets .
318	Values implements the unsafeSet interface .
319	Copy returns a copy of the unsafe set .
320	Sub returns a shallow copy of this set .
321	v2MembersURL is a helper method that returns a copy of the endpoint URL .
322	NewMigrateCommand creates a new cobra command
323	publishEntries publishes the given entries to the cluster .
324	openWAL creates a new WAL .
325	replayWAL reads the WAL from the WAL .
326	stop shuts down the node .
327	NewWatchCommand creates a new watch command
328	InitialState is part of the storage . Storage interface .
329	SetHardState sets the hard state of the storage
330	Entries returns the entries in the store .
331	Term returns the term s term .
332	LastIndex returns the last index of the store .
333	FirstIndex returns the first index in the store .
334	Snapshot returns the snapshot
335	ApplySnapshot applies the snapshot to the store .
336	Compact implements the storage . Storage interface .
337	unachable marks the URL as unreachable .
338	NewEndpointCommand returns a new instance of endpoint subcommand
339	Endpoints health check
340	NewElectCommand returns a new instance ofElectCommand
341	NewDefragCommand creates a new command
342	RegisterBuilder registers a new balancer builder .
343	Build creates a new balancer .
344	recordTransition updates the state of the connectivity state for the given state .
345	doSerialize tries to get the AuthInfo from chk
346	send sends events to the watcher .
347	post sends a watcher to the watcher
348	OriginAllowed checks if the origin is allowed
349	IsHostWhitelisted checks if a host is whitelisted
350	Valids returns a sorted list of values .
351	NewSelectiveStringsValue returns a new SelectiveStringsValue .
352	NewKV creates a new KV backend
353	NewURLsValue returns a new URLsValue .
354	URLSFromFlag looks up the URLs value of a flag .
355	serve peers
356	NewStore creates a new lease store .
357	appendMarkTombstone appends MarkTombstoneMark to b .
358	IsDirWriteable checks if dir exists
359	TouchDirAll creates a directory at the given directory .
360	CreateDirAll creates a new directory .
361	ZeroToEnd moves the file to the end of the file .
362	Open opens the file .
363	NewRaftLoggerFromZapCore creates a new raft . Logger that implements zapcore . Core .
364	NewConfig creates a new client configuration
365	RegisterElectionHandler registers the http handlers for serviceElection to mux . The handlers forward requests to the grpc endpoint over conn .
366	UpdateCapability updates the capabilities for the current version .
367	NewLockCommand creates a new instance of the lock command
368	tick is part of the raft interface .
369	advanceTicks forwards ticks to the ticker .
370	NewAuthCommand returns a new instance of auth command
371	authEnableCommandFunc executes auth enable command
372	authDisableCommandFunc is used to disable auth disable command
373	RetryKVClient creates a new KV client
374	RetryLeaseClient creates a new Lease client
375	RetryClusterClient creates a new cluster client
376	RetryMaintenanceClient creates a new MaintenanceClient
377	RetryAuthClient creates a new auth client
378	NewSetDirCommand creates a new setdir command
379	Enter enters the barrier
380	Leave the barrier
381	HandleBasic is the handler for the Etcd server .
382	WriteError writes an error to the client .
383	MemberByName returns a Member with the given name .
384	PeerURLs returns a list of all known peers .
385	ValidateConfigurationChange validates the configuration change .
386	AddMember adds a member to the cluster
387	RemoveMember removes a member from the cluster .
388	ValidateClusterAndAssignIDs validates the Raft cluster and assigns it to the Raft cluster
389	Keep returns a set of keys in the tree .
390	closeRequireLeader closes all holders in the cache .
391	resetRecv starts a new LeaseKeepAliveClient .
392	recvKeepAlive processes a LeaseKeepAliveResponse
393	deadlineLoop stops the keepalives and closes the keepalives .
394	sendKeepAliveLoop sends a new LeaseKeepAliveClient .
395	NewKV returns a new lease .
396	rescinds lease
397	LeaseValue is a compare function for Lease value
398	ValueBytes returns the value of compare_Value
399	WithRange adds the range to the cmp query
400	WithPrefix adds the prefix to the query .
401	mustInt64 returns the val as an int64 or panics .
402	mustInt64orLeaseID converts an interface to a LeaseID .
403	Next returns the latest updates of the watcher .
404	getJournalWriteSyncer returns a new zapcore . WriteSyncer
405	newKV creates a new KV
406	newDir creates a new directory
407	Read returns the value of the node .
408	Write is part of the Node interface .
409	List returns a list of child nodes .
410	GetChild returns a child node .
411	Add adds a child node
412	Remove removes the node .
413	Compare returns whether the node matches the previous index .
414	Clone creates a deep copy of the node .
415	isConnectedToQuorumSince returns true if the cluster is connected to the given list .
416	isConnectedSince returns true if the given time is connected to
417	numConnectedSince returns the number of connected members
418	longestConnected is used to find the longest connection id
419	isTornEntry checks if the data is a valid segment .
420	StartMockServersOnNetwork starts a mock server on the specified network .
421	StartAt starts the server at the specified index .
422	StopAt stops the server at the specified index .
423	Stop stops all servers
424	NewCheckCommand returns a new instance of the command
425	NewCheckPerfCommand creates a new instance of Etcdctl command
426	NewCheckDatascaleCommand returns a new instance of the command
427	NewGetCommand creates a new command
428	NewGetCommand creates a new cli get command
429	PickPeerURL picks a random peer URL
430	HandleMetricsHealth registers the health handler for the given etcd server .
431	NewRemoveCommand creates a new command
432	rmCommandFunc handles a rm command
433	checkIntervals takes a list of request operations and attempts to parse them .
434	ReportEventReceived reports the received number of received events .
435	RegisterKVHandler registers the http handlers for Etcd to mux . The handlers forward requests to the grpc endpoint over conn .
436	RegisterWatchHandler registers the http handlers to mux . The handlers forward requests to the grpc endpoint over conn .
437	RegisterLeaseHandler registers the http handlers for service Lease to mux . The handlers forward requests to the grpc endpoint over conn .
438	RegisterClusterHandler registers the http handlers for service Clients to mux . The handlers forward requests to the grpc endpoint over conn .
439	RegisterMaintenanceHandler registers the http handlers for service MaintenanceHandler to mux . The handlers forward requests to the grpc endpoint over conn .
440	RegisterAuthHandler registers the http handlers to mux . The handlers forward requests to the grpc endpoint over conn .
441	startEtcd starts the embed .
442	identifyDataDirOrDie checks if the given directory exists and if it does not exist .
443	openLast opens the WAL file at the given directory .
444	gotLeader is called when a leader is received .
445	lostNotify returns a channel that is closed when the leader is lost .
446	newGRPCProxyCommand returns a new cli - proxy command
447	NewMemberCommand returns a command for member subcommands
448	NewMemberAddCommand returns a new cobra command
449	NewMemberRemoveCommand returns a new instance of a member remove command
450	NewMemberUpdateCommand returns a new instance of a member update command
451	NewMemberListCommand returns a new instance of member list command
452	memberAddCommandFunc runs a member add command
453	memberRemoveCommandFunc is a member remove command
454	memberUpdateCommandFunc is used to update a member update
455	memberListCommandFunc is part of the command
456	Open creates a new WAL .
457	OpenForRead opens and opens a WAL .
458	Verify verifies that the given wal is valid .
459	Close closes the WAL .
460	notify sends an event to the event channel .
461	Remove stops the watcher .
462	mkPathDepth creates a new path for the given node .
463	mkV2Node creates a v2store . NodeExtern .
464	prevKeyFromPuts returns the previous prevKv in responsePut
465	NewWeightedReport creates a new instance of WeightedReport
466	Creates a new URLsMap from a map of strings
467	String returns a string representation of the URLsMap .
468	URLURL returns a sorted list of URLs sorted by name .
469	Parse parses a string into a map .
470	NewClientHandler creates a new client handler .
471	writeKeyEvent writes the given event to the client
472	writeKeyError writes an error to the client .
473	getUint64 returns uint64 value from form .
474	get bool value from form
475	waitDeletes waits for deleted deletes
476	AddOutputPaths adds the provided output paths to the config .
477	NewConfig creates a new config
478	PeerURLsMapAndToken returns a list of URLs that can be used to connect to the cluster
479	GetDNSClusterNames returns a list of DNS cluster names
480	checkBindURLs returns an error if the bind is not bindable .
481	GetCluster returns a list of cluster nodes
482	GetClient returns a new SRV client
483	GetSRVService returns SRV service name
484	ReadDir reads a directory named by path .
485	compact compacts the given revision .
486	defrag flushes the given endpoint .
487	NewUserCommand returns a new cobra command
488	userAddCommandFunc handles user add command
489	userGetCommandFunc executes user get command
490	User change password
491	addEvent adds an event to the event history
492	scan returns the next event matching the given index .
493	clone creates a copy of the event history
494	openSnapshotBackend opens a snapshot backend .
495	openBackend opens the backend and opens it .
496	recoverSnapshotBackend attempts to open a snapshot of the snapshot .
497	NewUpdateCommand implements the cli . Command interface
498	UpdateCommandFunc updates a single key value
499	frontAndBack returns the front and the front of the queue .
500	Insert adds a RequestStats to the queue .
501	Rate returns the rate of items in the queue
502	Clear clears the stats queue
503	UniqueStrings creates a slice of unique strings with n random elements .
504	RandomStrings returns a slice of random strings
505	IsKeyNotFound returns true if the error is a KeyNotFound error .
506	IsRoleNotFound returns true if the given error is a role not found error .
507	IsUserNotFound returns true if the given error is a user not found error .
508	JoinCluster joins cluster
509	GetCluster is used to get cluster information
510	newProxyFunc returns a proxy function that uses the given proxy .
511	isSafeRetry returns true if the given error is a transient error .
512	withRetryPolicy sets the retry policy
513	withAuthRetry is used to configure a retry option .
514	withMax sets the maximum number of retries .
515	withBackoff returns a retry option that sets the backoff function used by the retry function .
516	RecvAppendReq adds a request to the server stats .
517	SendAppendReq is used to send a request
518	merge merges two bucket buffers .
519	deleteRevKey deletes the given key .
520	isMemberBootstrapped checks if a member is bootstrapped
521	GetClusterFromRemotePeers retrieves a Raft cluster from the given urls .
522	getClusterFromRemotePeers retrieves a Raft cluster from the given urls .
523	getRemotePeerURLs returns a list of remote peer URLs
524	getVersions returns the version of the raft cluster .
525	determineClusterVersion determines the version of the cluster version .
526	getVersion retrieves the version information for a member .
527	NewTimeoutDetector creates a new TimeoutDetector .
528	Reset resets all timeouts
529	Observe returns true if the timer has been observed .
530	NewPeerHandler returns a new http . Handler for the etcd server .
531	put adds a new entry to the key index .
532	tombstone adds a tombstone to the key index .
533	get returns the revision and revision of the key index .
534	since returns the revisions of the given rev .
535	keep removes the generation at the given index .
536	findGeneration returns the most recent generation for the given rev .
537	cancelWatcher removes a watcher from the store .
538	syncWatchersLoop is a long running goroutine that keeps track of watchers
539	syncVictimsLoop is a long running goroutine that keeps track of the victims .
540	moveVictims moves the victims to the watched state .
541	kvsToEvents takes a set of keys and attempts to unmarshal them .
542	notify sends events to the watcher .
543	isOpFuncCalled checks if the passed op is a function call .
544	UnsafePut adds a key - value pair .
545	UnsafeSeqPut puts a value in the bucket .
546	UnsafeRange is the same as unsafe but panics on error .
547	UnsafeDelete deletes the given key .
548	UnsafeForEach iterates over all keys and calls the visitor function for each key - value pair .
549	Commit is part of the Transaction interface .
550	CommitAndStop is part of the Transaction interface .
551	Renew is used to renew the lease
552	Attach implements the Lessor interface .
553	revokeExpiredLeases is used to revoke expired leases .
554	checkpointScheduledLeases ensures that the lease is scheduled .
555	expireExists deletes the lease if it exists .
556	findExpiredLeases returns a list of leases that have expired .
557	refresh updates the expiry time .
558	Forever stops the lease .
559	Keys returns all the keys in the map .
560	Remaining returns the duration of the lease .
561	NewCompactionCommand returns a new instance of the compaction command
562	CompactionCommandFunc executes compaction command
563	NewPutCommand returns a new instance of put command
564	putCommandFunc is a wrapper around put command
565	NewHandler creates a new proxy handler
566	NewReadonlyHandler creates a new readonly handler .
567	NewSetCommand creates a new set command
568	setCommandFunc is used to set a value
569	waitOnLastRev waits for the given key to be deleted .
570	GetDefaultInterfaces returns a map of default interfaces .
571	NewSnapshotCommand returns a new instance of SnapshotCommand
572	NewMoveLeaderCommand returns a new instance of the move - leader command
573	moveLeadershipCommandFunc is used to move - leader - leader command
574	OpenDir opens a directory at the specified path .
575	NewRemoveDirCommand creates a new command to remove a directory
576	RmdirCommandFunc implements the rm command .
577	NewDelCommand creates a new cobra command
578	delCommandFunc calls delete command
579	NewExpect creates a new ExpectProcess .
580	NewExpectWithEnv creates a new ExpectProcess with the given arguments .
581	ExpectFunc waits for the given function and returns the result .
582	Expect checks if the string matches the given string
583	LineCount returns the number of lines in the process .
584	Signal sends a signal to the process .
585	keyFunc encodes a RangeRequest .
586	Add adds a RangeRequest to the cache .
587	Get implements the Cache interface .
588	Invalidate invalidates the cache with the given endkey .
589	Compact modifies the cache .
590	NewUniqueURLsWithExceptions creates a new UniqueURLs object
591	UniqueURLsFromFlag returns a slice of unique URLs from the flagset .
592	UniqueURLsMapFromFlag returns a map of unique URLs for the given flag .
593	Hold locks the barrier .
594	Release releases the barrier
595	Wait waits for the barrier to finish .
596	NewLockRacerCommand returns a new instance of LockRacerCommand
597	election timeout
598	DialEtcdGRPCServer establishes a gRPC connection to the etcd cluster
599	CreateEtcdClientConfig creates etcd client config
600	CreateEtcdClient creates a new etcd client
601	CheckCompact checks if the given revision is compact .
602	Defrag flushes the etcd client to etcd .
603	RevHash returns the revision and hash of the member .
604	Rev returns the revision of the member .
605	Compact compacts the node with the given revision .
606	IsLeader returns true if the etcd cluster is leader
607	WriteHealthKey writes the health key
608	SaveSnapshot is part of the Etcd interface .
609	RestoreSnapshot is used to restore a snapshot
610	NewWatcher creates a new watcher with prefix
611	NewRawNode creates a new raw node .
612	Campaign implements the raft . Node interface .
613	Propose implements the RawNode interface .
614	ProposeConfChange is part of the raft . Node interface .
615	ApplyConfChange applies a ConfChange to the raft node .
616	Step implements the raft . Node interface .
617	Ready returns a deep copy of the raw node .
618	WithProgress implements the RawNode interface .
619	ReportUnreachable is part of the raft . Node interface .
620	ReportSnapshot reports snapshot status .
621	TransferLeader is part of the raft . Node interface .
622	ReadIndex is part of the raft . Node interface .
623	printcURL prints the request to stdout .
624	StartNode starts a raft node
625	RestartNode creates a new raft node
626	Tick executes the ticker .
627	MustSync compares the changesnum and returns true if they are equal .
628	NewGRPC17Health creates a new instance of GRPC17Health .
629	NeedUpdate returns true if the server has already been updated .
630	dflSignal sends a signal to a syscall .
631	New creates a new store
632	Index returns the current index .
633	Get implements the Etcd interface .
634	Create creates a new entry
635	Set implements the Etcd interface .
636	getCompareFailCause is a helper function to get the cause for the comparison .
637	Delete implements the Etcd interface .
638	walk walks the tree rooted at the given path .
639	internalGet is used to retrieve a node from the store .
640	DeleteExpiredKeys removes keys from the store .
641	checkDir checks if the given directory exists .
642	Save implements the Store interface .
643	Recovery restores the state of the store
644	Next returns a unique unique identifier .
645	NewMakeMirrorCommand returns a new cobra command
646	NewZapCoreLoggerBuilder creates a new config builder .
647	NewSyncer creates a new syncer
648	DropPort removes a port
649	SetLatency sets the latency delay of all interfaces .
650	RemoveLatency removes latency latency from all interfaces .
651	NewTxnCommand creates a new cobra command
652	txnCommandFunc executes a transaction command
653	New creates a compactor .
654	printResponseKey prints the response .
655	RegisterLockHandler registers the http handlers for service Lock to mux . The handlers forward requests to the grpc endpoint over conn .
656	goroutine handler
657	addCORSHeader adds CORS headers
658	fallback is used to fall back to the txn . Op .
659	IDFromString creates an ID from a string .
660	release releases the lock
661	EncodedSize returns the size of the encoded value .
662	Decode decodes a value into a struct .
663	NewMergeIterator returns a new MergeIterator .
664	initHeap initializes the heap .
665	Valid returns true if the iterator is valid .
666	Key returns the current key .
667	Value returns the current value of the iterator .
668	Next moves the iterator to the next iterator .
669	Seek moves the iterator to the given key .
670	Close closes the iterator .
671	Encode serializes the valuePointer into b .
672	Decode decodes the header from buf .
673	encodeEntry encodes an entry into buf .
674	SetEntry adds a new entry to the batch .
675	Set adds an entry to the batch .
676	Set with TTL
677	Delete deletes the given key .
678	commit commits the current transaction to the database .
679	Flush is part of the Writer interface .
680	Error returns the current error .
681	getMemTables returns a list of all tables .
682	writeRequests writes requests to vlog .
683	ensureRoomForWrite ensures that the write lock is held
684	writeLevel0Table writes the table to the given writer .
685	handleFlushTask handles a flushTask .
686	flushMemtable flushes the memtable to disk .
687	calculateSize calculates the total size of the file .
688	Size returns the lsm and vlog size of the database .
689	Next returns the next value in the sequence .
690	Release releases the sequence .
691	KeySplits returns a sorted list of keys that match the given prefix .
692	Flatten flushes all tables .
693	Mmap is an alias for Mmap
694	Madvise implements the madvise interface .
695	setDiscardTs is used to set the discard timestamp .
696	hasConflict returns true if the transaction exists in the database .
697	Set sets the given key .
698	SetWithMeta adds a new entry to a transaction .
699	Delete removes an entry .
700	Get retrieves an item from the database .
701	CommitWith is part of the Transaction interface .
702	View wraps a function in the DB .
703	Update performs an update on the database .
704	Seek moves the iterator to the given key .
705	SeekToLast moves the iterator to the next block iterator .
706	parseKV parses the next key in the block .
707	NewIterator creates an iterator over the table .
708	seekFrom moves the iterator to the given key .
709	seekForPrev moves the iterator to the previous iterator .
710	Value returns the current value .
711	Seek moves the iterator to the given key .
712	NewConcatIterator returns a new ConcatIterator .
713	Valid returns true if the iterator is valid .
714	Next moves the cursor to the next iterator .
715	Close closes the iterator .
716	OpenExistingFile opens an existing file
717	Copy returns a copy of a slice of bytes .
718	KeyWithTs appends the timestamp to the given key .
719	ParseTs parses the timestamp of a key .
720	ParseKey extracts the key from the given key .
721	SameKey returns true if src is the same key .
722	FixedDuration returns a string representation of a time . Duration
723	NewCloser creates a new Closer
724	NewThrottle creates a new Throttle
725	Do implements the Throttle interface .
726	Done implements Throttle .
727	Finish stops the throttling .
728	SetDiscardTs sets the GCard timestamp .
729	openReadOnly opens the file for reading .
730	iterate calls fn for each entry in the log file .
731	sortedFids returns a sorted list of filenames that have been deleted .
732	write writes the request to disk .
733	populateDiscardStats populates the lfDiscard stats from the store .
734	Backup is part of the DB . Backup interface .
735	ToList converts an iterator to a KV list .
736	produceRanges generates the range of keys in the database .
737	produceKVs produces a list of KVs .
738	Generate is used to construct the kvstore
739	NewStream creates a new stream .
740	NewStreamAt creates a new stream with readTs .
741	DecrRef decrements the reference count .
742	ParseFileID parses a file id .
743	PrintHistogram prints histograms for the given key prefix .
744	newSizeHistogram creates a new sizeHistogram
745	buildHistogram creates a new sizeHistogram from the given key prefix .
746	printHistogram prints the histogram data .
747	Init initializes the watermark
748	Begin marks the given index .
749	BeginMany marks the given indices .
750	Done marks the given index as done .
751	DoneMany marks the given indices as done .
752	SetDoneUntil sets the watermark field of the watermark .
753	WaitForMark blocks until the given index is reached .
754	Encode writes the header to b .
755	Decode decodes the header from buf .
756	NewTableBuilder creates a new table builder .
757	keyDiff returns the difference between the base and new key .
758	Add implements the Block interface .
759	blockIndex returns the block index of the block .
760	Finish finishes the current block .
761	Errorf logs an error message .
762	Infof logs a message .
763	DecrRef decrements the reference count .
764	NewSkiplist creates a new skiplist .
765	Put adds a value to the list .
766	Get returns the value for the given key .
767	Key returns the current key .
768	Value returns the current value .
769	Next moves the iterator to the next element .
770	Prev moves the iterator to the previous value .
771	Seek moves the iterator to the target .
772	SeekForPrev sets the next item in the list .
773	NewUniIterator creates a new ui iterator
774	Next moves the iterator to the next iterator .
775	Seek moves the iterator to the next key .
776	asChanges converts the contents of the manifest to protobuf .
777	rewrite the manifest file
778	validate returns nil if there is no tables .
779	acquireDirectoryLock acquires a directory lock on the given directory .
780	release releases the lock
781	AssertTruef panics if the given bool is false .
782	Wrapf wraps an error with debug mode .
783	Initialize tables .
784	deleteTables deletes tables .
785	tryAddLevel0Table adds a table to the list .
786	getTableForKey returns the tables for the given key .
787	get returns the highest value for the given key .
788	overlapTables returns the number of tables in the given key range .
789	String returns the string representation of the item .
790	KeyCopy copies the key .
791	ValueSize returns the size of the item .
792	NewKeyIterator returns an iterator over the given key .
793	Valid returns true if the iterator is valid .
794	ValidForPrefix returns true if the iterator contains the given prefix .
795	Close closes the iterator .
796	Parse item
797	Seek moves the iterator to the next key .
798	GetMergeOperator returns a new MergeOperator .
799	Get retrieves the data stored in the database .
800	compareAndAdd compares the current compact definition and adds it to the list .
801	newArena creates a new Arena .
802	putNode adds a new node to the buffer .
803	getNode returns the node at the given offset .
804	getKey returns the key at the given offset .
805	getVal returns a value at the given offset .
806	getNodeOffset returns the offset of the node .
807	Initialize the number of badgers
808	revertToManifest removes all tables in the manifest
809	dropTree removes all levels that have been deleted .
810	dropPrefix drops all tables with the given prefix .
811	isLevel0Compactable returns true if there is no compact tables .
812	doCompact runs compaction .
813	get returns the value for the given key
814	seekTotal returns a list of accounts that match the number of accounts .
815	findFirstInvalidTxn is used to find the first violation of the transaction at the given point .
816	Create creates a new snapshot sink
817	List returns all snapshot metadata
818	Open returns the snapshot metadata and the contents of the snapshot .
819	Write implements the io . Writer interface
820	NewFileSnapshotStoreWithLogger creates a new instance of FileSnapshotStore .
821	NewFileSnapshotStore creates a new instance of FileSnapshotStore
822	snapshotName returns the name of the snapshot .
823	Create creates a new snapshot sink
824	List returns snapshot metadata
825	getSnapshots returns the snapshot metadata for the snapshot
826	readMeta reads the metadata from the snapshot .
827	Open returns the snapshot metadata for the given id .
828	ReapSnapshots deletes all snapshots
829	Write implements the io . Writer interface .
830	Close closes the snapshot .
831	Cancel closes the snapshot .
832	finalize flushes the snapshot to the state file .
833	writeMeta writes meta data to file .
834	NewNetworkTransportWithConfig creates a new instance of NetworkTransport .
835	setupStreamContext is used to setup the stream context
836	getStreamContext returns the current context .
837	SetHeartbeatHandler sets the heartbeat handler .
838	CloseStreams closes all active connections
839	Close the transport
840	getPooledConn returns a connection to the pool
841	getConnFromAddressProvider attempts to get a netconn connection based on the provided id and target address .
842	getConn returns a connection to the pool .
843	returns a connection to the pool
844	listen listens for incoming connections
845	handleConn is used to handle an incoming connection .
846	handleCommand handles an RPC command .
847	decodeResponse decodes the response into resp .
848	sendRPC is used to send an RPC to the server
849	newNetPipeline creates a new netPipeline .
850	decodeResponses reads responses from the pipeline .
851	AppendEntries implements netPipeline . Append interface .
852	Close closes the netPipeline
853	NewObserver creates a new observer with the given filter function .
854	RegisterObserver registers an observer with the given id .
855	DeregisterObserver removes an observer from the raft node .
856	Observe sends observations to the observer .
857	NewInmemStore creates a new in - memory store
858	FirstIndex returns the lowest index .
859	LastIndex returns the highest index .
860	GetLog retrieves the log at the given index .
861	StoreLog stores a log
862	StoreLogs stores the logs in the store
863	DeleteRange deletes a range of logs
864	Set sets the value for the given key .
865	Get retrieves the value associated with the given key .
866	SetUint64 sets a uint64 value
867	GetUint64 gets a uint64 value
868	NewLogCache creates a new LogCache .
869	Connect connects to the given peer .
870	Disconnect removes a peer from the transport
871	DisconnectAll disconnects all peers
872	Respond sends a response to the response .
873	Open returns the snapshot metadata and an error .
874	Vote increments the vote count .
875	notifyAll is called when a follower is received .
876	cleanNotify removes the result from the list .
877	LastContact returns last contact .
878	setLastContact sets last contact
879	replicate is used to replicate a follower .
880	pipelineReplicate is called when a follower is received .
881	pendingSend is used to send an appendingEntries to the cluster
882	decodeDecode decodes the pipeline and updates the pipeline .
883	setupAppendEntries is used to setup the append entries for a raft replica .
884	setPreviousLog sets the previous log entry for the log .
885	setNewLogs adds new log entries to the request .
886	appendStats records stats for the given peer
887	handleStaleTerm is used to stop the follower replication .
888	AppendEntries implements the Transport interface .
889	RequestVote is part of raft . Transport interface .
890	InstallSnapshot is part of raft . Transport interface .
891	EncodePeer implements the Transport interface .
892	DecodePeer implements raft . Transport .
893	AppendEntries is part of the raft . Handler interface .
894	ReadPeersJSON reads a list of peers .
895	ReadConfigJSON reads a configuration file
896	NewTCPTransport creates a new TCP transport
897	NewTCPTransportWithLogger creates a new TCP transport .
898	NewTCPTransportWithConfig creates a new TCPTransport with the given config .
899	Dial implements the net . Conn interface .
900	Accept implements the net . Listener interface .
901	Addr returns the address of the TCP connection .
902	restoreSnapshot is used to restore the snapshot .
903	BootstrapCluster initializes a bootstrap cluster .
904	Leader returns the current leader address .
905	Apply implements the raft . Apply interface .
906	Barrier implements the raft . Raft interface .
907	VerifyLeader verifies that the Raft leader is valid .
908	AddVoter adds a new Raft node to the raft cluster .
909	RemoveServer removes a Raft node from the raft cluster .
910	Shutdown implements the Raft interface .
911	Snapshot is part of the Raft interface .
912	Restore is part of raft . Raft interface .
913	String implements the Stringer interface for Raft .
914	LastContact is part of the Raft interface .
915	Logf logs a message
916	containsNode checks if a node exists in the list
917	LeaderPlus implements the Cluster interface .
918	WaitTilUptoDate is like WaitUntilUptoDate but does not wait for the last update .
919	assertLogEntryEqual asserts that the log entries are equal .
920	runFSM is part of the Raft interface .
921	Clone returns a copy of the configuration
922	Clone returns a deep copy of the configurations .
923	hasVote returns true if the given server has a vote .
924	checkConfiguration verifies that the configuration is valid .
925	nextConfiguration computes the next configuration based on the current configuration .
926	encodePeers encodes the given configuration to the given transport .
927	decodePeers decodes a list of peers from a message .
928	encodeConfiguration is used to encode a Configuration struct
929	decodeConfiguration decodes a configuration from a binary representation .
930	goFunc starts a goroutine in the raft state .
931	getLastIndex returns the last index in the raft state .
932	getLastEntry returns the last entry of the raft state .
933	checkRPCHeader returns an error if the RPC is not supported .
934	setLeader sets the current leader .
935	requestConfigChange sends a request to the Raft configuration change .
936	run runs the Raft node .
937	runFollower is used to run the Raft leader
938	liveBootstrap initializes the Raft cluster with the given configuration .
939	runCandidate is used to run a Candidate
940	runLeader is used to start the raft leader
941	startStopReplication starts a follower .
942	configurationChangeChIfStable returns a channel that can be used to change the current configuration change .
943	verifyLeader sets the leader to the leader .
944	checkLeaderLease checks if the current leader is in the raft cluster .
945	restoreUserSnapshot is used to restore a user snapshot
946	appendConfigurationEntry adds a new configuration entry to the raft cluster .
947	dispatchLogs is used to dispatch a batch of log futures .
948	processLogs processes the log at the given index .
949	processLog processes a log entry .
950	processRPC processes an RPC request .
951	processHeartbeat is invoked when a heartbeat is received
952	setLastContact sets the last contact .
953	persistVote is used to persist a vote .
954	setCurrentTerm sets the current term of the raft state .
955	setState sets the raft state of the raft node .
956	getCommitIndex returns the current commit index .
957	recalculate recalculates the current state of the set of matches .
958	randomTimeout returns a channel that will be closed when a timeout is reached .
959	generateUUID generates a new UUID
960	decodeMsgPack decodes a MsgPack
961	encodeMsgPack encodes a struct into a bytes . Buffer
962	backoff is a helper method that rounds backoff backoff backoff to a given limit .
963	newApplySource creates a new apply source .
964	reset resets the internal state .
965	DefaultConfig returns a config with sane defaults .
966	ValidateConfig validates the config .
967	runSnapshots is a long running routine that runs the Raft snapshot .
968	shouldSnapshot checks if the Raft log is older than the Raft threshold .
969	takeSnapshot is used to create a snapshot of the raft cluster
970	compactLogs compacts the Raft log entries at the given index .
971	WebpackCheck checks if the webpack file exists .
972	New creates a new generator
973	UnixSocket creates a Listener
974	Get returns the appropriate error handler for the given status .
975	PanicHandler is a middleware that handles panics .
976	partialFeeder finds the feeder for the given filename
977	New creates a new engine .
978	WriteTo writes the receiver to the given writer .
979	Send a message
980	NewSMTPSender creates a new SMTP sender
981	Param returns the value associated with the given key .
982	Set a value
983	Return value by key
984	Redirect sends a redirect to the given URL .
985	File returns a file from the request
986	MarshalJSON implements the json . Marshaler interface .
987	New creates a new template
988	New creates a new Revel instance
989	DeprecrationsCheck verifies that deprecations are deprecated .
990	List is not implemented .
991	Render implements the Renderer interface .
992	Save the session
993	GetOnce gets value from session
994	Set a value
995	Clear removes all values from the session .
996	getSession returns a new session for the given request
997	New generates a generator
998	New generates a new Generator
999	New creates a generator
1000	NewMessage creates a new Message with the given settings .
1001	Reset clears the contents of the message .
1002	SetHeader sets a single header field .
1003	SetHeaders sets the headers of the message .
1004	SetAddressHeader sets an address header field .
1005	FormatAddress formats an address .
1006	SetDateHeader sets a date header field .
1007	FormatDate formats a date
1008	SetBody sets the body of the message .
1009	SetPartEncoding sets the encoding of the part .
1010	SetHeader sets the header for the file
1011	SetCopyFunc sets the copy function for the file .
1012	AttachReader adds a file to the message .
1013	Attach adds a file to the message .
1014	EmbedReader adds an embedded file to the stream .
1015	Embed adds a file to the message .
1016	ValidateTemplates runs each of the given template validators .
1017	PlushValidValidator checks if a file is plush valid
1018	Validate validates the options .
1019	LoadPlugins loads plugins
1020	WriteHeader implements the http . ResponseWriter interface .
1021	Write writes bytes to the response .
1022	Flush implements the http . Flusher interface .
1023	CloseNotify implements the http . ResponseWriter interface .
1024	Run runs the updater .
1025	onlyRelevantFiles returns nil if the file is not a file or directory
1026	GoTemplateEngine parses the given input and returns the result
1027	GET adds a route to the router
1028	Redirect redirects the route with the given status .
1029	ANY adds a route to the router
1030	buildRouteName builds a route name for the given path
1031	New generates a mail file
1032	NewDialer returns a new instance of Dialer .
1033	Dial establishes a connection to a SMTP server .
1034	DialAndSend is a convenience method to connect to the server .
1035	Set sets the data for the given key .
1036	Add a value to the flash
1037	persist writes the flash data to the session .
1038	newFlash creates a new flash
1039	Get a cookie by name
1040	Set sets a cookie in the response
1041	SetWithExpirationTime sets a cookie with the given name .
1042	Delete a cookie
1043	NewMessage creates a new message
1044	NewFromData creates a new message from data
1045	New creates a new message .
1046	CloseNotify implements the EventSource interface .
1047	NewEventSource creates a new EventSource
1048	NewSimpleWithContext creates a new logger with a context
1049	Register a new handler
1050	Start starts the background worker
1051	Stop stops the Simple background
1052	Perform a job
1053	PerformAt runs the given job with the given time .
1054	PerformIn runs the given job with the given duration .
1055	String returns a string representation of RouteInfo .
1056	Alias adds aliases to the route .
1057	Name adds a route name to the route
1058	BuildPathHelper builds a RouteHelperFunc from the RouteInfo .
1059	New generates a new yaml file
1060	New creates a generator .
1061	RegisterCustomDecoder registers a custom decoder .
1062	Replace replaces the middleware in the stack .
1063	Routes returns the route list .
1064	WrapBuffaloHandler wraps a new http . Handler into a new http . Handler
1065	PackageJSONCheck checks if the package has the package .
1066	match matches the given importpath
1067	Send sends multiple messages .
1068	Last returns true if the last argument is the last name .
1069	Stop stops the application .
1070	DepEnsure runs the depEnsure command
1071	String returns the string representation of the build .
1072	New creates a new Generator
1073	AddBody adds a body to the message .
1074	AddBodies adds a body to the message .
1075	AddAttachment adds an attachment to the message .
1076	AddEmbedded adds an attachment to the message .
1077	SetHeader sets a header value for the given field .
1078	New creates a new group
1079	New creates a new template generator
1080	New generates a new generator for the given options .
1081	Cleanup cleans the files in the directory
1082	MDTemplateEngine renders a Markdown template
1083	Update updates a configmap
1084	FilterChanges takes a set of changes and returns a set of configMaps that can be used to filter changes .
1085	getLabelsFromREMatches returns a list of labels that match the regex
1086	getLabelsFromGenericMatches takes a list of arguments and returns a list of labels that match them .
1087	Start starts a goroutine that starts a goroutine .
1088	Subscribe registers a new DeltaChan
1089	Config returns the current agent configuration .
1090	Set updates the current configuration .
1091	IsMember returns true if the user is a member of the org .
1092	ListIssueComments lists issue comments
1093	ListPullRequestComments returns a list of comments for a pull request .
1094	ListReviews returns a list of review .
1095	ListIssueEvents returns a list of issue events
1096	CreateComment creates a fake issue comment
1097	CreateReview creates a new review .
1098	CreateCommentReaction creates a CommentReaction
1099	CreateIssueReaction creates a fake issue reaction
1100	DeleteComment deletes issue comment
1101	DeleteStaleComments deletes issue comments
1102	GetPullRequest returns a pull request by number
1103	GetPullRequestChanges returns a pull request changes
1104	GetRef returns a fake reference
1105	DeleteRef is a mock
1106	GetSingleCommit returns a single commit
1107	CreateStatus adds a new status to the fake client .
1108	ListStatuses returns the statuses for the given ref .
1109	GetCombinedStatus returns the combined status for the given ref .
1110	GetRepoLabels returns fake repository labels
1111	GetIssueLabels returns a list of issue labels .
1112	AddLabel adds a label to the fake client .
1113	RemoveLabel removes a label from the client .
1114	FindIssues is a mock
1115	AssignIssue is a mock
1116	GetFile returns the contents of a file
1117	ListTeams lists teams
1118	ListTeamMembers lists members of a team
1119	IsCollaborator checks if the given login is a collaborator
1120	ListCollaborators lists all collaborators
1121	ClearMilestone clears the milestone
1122	SetMilestone sets the milestone
1123	ListMilestones is a mock
1124	ListPRCommits returns a list of commits for the given repository .
1125	GetRepoProjects returns the projects for the given repository .
1126	GetOrgProjects returns the projects for the given org .
1127	GetProjectColumns returns project columns for given project ID
1128	CreateProjectCard creates a project card
1129	DeleteProjectCard deletes the project card card .
1130	MoveProjectCard moves a project card to the fake client card .
1131	CreateDatabaseClient creates an InfluxDB client
1132	Push sends a point to influxdb
1133	NewProwJobWithAnnotation creates a new Prow job with the given spec and annotations
1134	NewProwJob creates a new Prow job
1135	NewPresubmit creates a new Prow API .
1136	PresubmitSpec creates a Prow job spec from the config .
1137	PostsubmitSpec creates a Prow job spec from config .
1138	PeriodicSpec creates a ProwJobSpec from the config .
1139	BatchSpec creates a PatchJobSpec from the config .
1140	PartitionActive partitions the pending state of pings .
1141	ProwJobFields creates a logrus . Fields from the Prow API .
1142	ClusterToCtx returns the alias for the cluster
1143	AddCommand adds a command
1144	Get takes name of the prowJob and returns the corresponding prowJob object and an error if there is any .
1145	Watch returns a watch . Interface that watches the requested prowJobs .
1146	Delete takes name of the prowJob and deletes it . Returns an error if one occurs .
1147	Patch applies the patch and returns the patched prowJob .
1148	MergeMethod returns the merge method for the given repository .
1149	Query returns a string representation of the query .
1150	ForRepo returns true if the given org and repository belongs to .
1151	OrgExceptionsAndRepos returns a map of org exceptions and repos in the list of repositories .
1152	QueryMap creates a new QueryMap
1153	ForRepo returns all queries for the given organization and repository .
1154	Validate validates the policies
1155	GetTideContextPolicy creates a TraideContextPolicy from the given branch and config options .
1156	IsOptional checks if a context is present in the context
1157	MissingRequiredContexts returns the list of contexts that are not in the context
1158	ValidateWebhook validates the webhook .
1159	HelpProvider returns the help provider for needing rebase labels
1160	HandleEvent handles a pull request event
1161	HandleAll is the main entry point for GitHub .
1162	NewDryRunProwJobClient creates a new DryRunProwJobClient
1163	Create a new Prow job
1164	Update a Prow job
1165	UpdateStatus updates the dryRun job
1166	Delete does nothing
1167	DeleteCollection does nothing
1168	Get is a mock
1169	List lists all Prow jobs .
1170	Watch is part of the dryRunJob interface .
1171	Patch patches a Prow job
1172	hasSynced checks if there are synced jobs .
1173	Run starts the controller .
1174	runWorker is a long running goroutine that processes the workqueue .
1175	fromKey extracts the key from the given key .
1176	enqueueKey is used to enqueue an object
1177	finalState returns true if the Prow job has been processed .
1178	description returns the description of the condition .
1179	prowJobStatus returns the Prow status of the pipeline run status .
1180	pipeMeta returns the ObjectMeta for the pipeline .
1181	sourceURL returns the source URL for the given Prow job .
1182	makePipelineGitResource creates a pipeline resource .
1183	makePipelineRun creates a new PipelineRun .
1184	matchingConfigs filters all configs in all configs and returns them .
1185	SuggestCodeChange computes the line change for the given problem .
1186	ServeExternalPluginHelp serves the external plugin help handler
1187	protect is used to protect the repository
1188	UpdateOrg updates an existing repository
1189	UpdateRepo updates the repository with the given name and repository name .
1190	UpdateBranch updates the branch s protection policy
1191	LoadConfig loads the options from the given config .
1192	Run starts the controller .
1193	Start starts the agent
1194	reloadSecret reloads a secret file
1195	GetSecret is used to retrieve a secret
1196	setSecret sets a secret
1197	GetTokenGenerator is used to generate a token generator
1198	New creates a new History instance
1199	Record records a history record
1200	ServeHTTP implements the http . Handler interface .
1201	Flush writes the history to GCS .
1202	AllRecords returns all the records in the history .
1203	MakeCommand creates a new cobra command
1204	CheckFlags checks if any of the patterns match .
1205	ReceiveComment returns a set of points for a given comment .
1206	NewController creates a new controller
1207	Run starts the controller .
1208	runWorker runs the controller .
1209	New creates a new local git repo
1210	MakeFakeRepo creates a new repo in the local repository .
1211	AddCommit adds the given files to the repository .
1212	Checkout new branch
1213	Checkout will checkout the given branch in the local repository .
1214	RevParse returns the revision information for the given commit .
1215	CleanAll removes all resources for the given region
1216	optionsForRepo returns the lgtm options for the given org and repository .
1217	getChangedFiles returns a list of file names for the given number of commits .
1218	loadReviewers returns a set of authorizations for the given filenames .
1219	NewController creates a new controller
1220	SaveLastSync saves the last sync timestamp
1221	Sync ensures that the controller has changed
1222	AddFlags adds flags related to the command
1223	CheckFlags ensures that all registered plugins are registered
1224	ReceiveIssueEvent checks if the issue event matches the issue event
1225	Upload uploads all the objects in the bucket .
1226	FileUploadWithMetadata creates a new UploadFunc using the provided metadata .
1227	DataUploadWithMetadata returns a UploadFunc that uploads data to the provided data .
1228	HasLabel returns true if the given issue contains the given label .
1229	ImageTooBig returns true if the image is too large .
1230	LevelFromPermissions returns the permission level for the given permissions
1231	PermissionsFromLevel converts the given permission level to a permission set .
1232	newProwJobs returns a ProwJobs
1233	GetApplicable returns a slice of Blockers that can be applied to the given repository .
1234	serve starts the server
1235	NewCountPlugin creates a new Command instance
1236	ReceiveComment is part of the Plugin interface .
1237	updateMetrics updates disk usage metrics
1238	LogStatus logs current resources
1239	SyncConfig synchronizes the resource with the given config .
1240	Metric returns a metric for the given type
1241	FormatURL formats a DogImage .
1242	runAndSkipJobs runs the provided requests and runs the provided jobs .
1243	validateContextOverlap returns an error if there is any conflicts
1244	RunRequested takes a pull request and builds them
1245	skipRequested adds skipped jobs to the pull request .
1246	Match returns true if the event matches the given label .
1247	Match returns true if the event is unlabeled
1248	AddFlags adds flags to the specified FlagSet .
1249	AddFlagsWithoutDefaultGitHubTokenPath adds flags to the specified FlagSet .
1250	Validate validates the GitHub options .
1251	GithubClientWithLogFields creates a new GitHub client with the given credentials .
1252	Gets GitHub client
1253	GitClient returns a GitHub client configured for GitHub .
1254	toMap converts a CoverageList to a map .
1255	findChanges returns the coverage changes for the coverage .
1256	CreateDatabase creates a new MySQL database
1257	ShouldReport returns true if the Prow job should report .
1258	Report is used to report a Prow job .
1259	MarkComplete implements the Set interface .
1260	NewJobAgent creates a new JobAgent
1261	Start the job agent
1262	Returns all the jobs in the agent .
1263	ProwJobs returns a slice of prow jobs
1264	GetProwJob gets a Prow job by ID
1265	GetJobLog retrieves the logs for the specified job .
1266	unionStrings returns the union of two strings .
1267	Apply returns a copy of the given policy .
1268	GetOrg returns the org with the given name
1269	GetRepo retrieves a repository by name
1270	GetBranch retrieves a branch by name
1271	GetPolicy returns the policy for the given branch .
1272	UpdateIssueEvents updates issue events
1273	enqueueKey enqueues the given object to the worker .
1274	prowJobStatus returns the Prow status for the build .
1275	buildEnv returns the environment variables for the build
1276	defaultArguments adds default arguments to the template instantiation spec
1277	defaultEnv adds the provided environment variables to the container .
1278	injectSource injects the source to the build .
1279	injectedSteps is a helper function that injects the container to be injected into the container
1280	determineTimeout returns the timeout for the build spec
1281	makeBuild creates a new build object from the Prow job spec .
1282	newLabels creates a new sql . Label with the given issue and repository name .
1283	newAssignees creates a list of assignees from issueID
1284	NewIssueComment creates a new sql . Comment
1285	messageFilter returns a pjil . Filter that matches the given conditions .
1286	IsSuccess returns true if the build succeeded
1287	IsFailure indicates whether this build is a failure .
1288	IsAborted returns true if the build was aborted
1289	ProwJobID returns the job id
1290	BuildID returns the build ID
1291	CrumbRequest is used to request a crumb request
1292	Measure is used to measure a request
1293	GetSkipMetrics retrieves metrics for the given path .
1294	Get issues a GET request
1295	request performs an HTTP request .
1296	Do an HTTP request
1297	getJobName returns the name of the job .
1298	getBuildPath returns the path to the Jenkins build
1299	GetJobInfo retrieves information about the job .
1300	JobParameterized returns true if the job is parameterized
1301	EnsureBuildableJob creates a buildable job .
1302	LaunchBuild launches a build
1303	Build takes a ProwJob and builds it
1304	BuildFromSpec creates a build from a spec
1305	GetEnqueuedBuilds retrieves a set of build objects from the queue .
1306	Abort stops the build .
1307	PresubmitToJobSpec converts a Presubmit job to a job spec
1308	PostsubmitToJobSpec converts a Postsubmit job into a JobSpec
1309	PeriodicToJobSpec creates a downward API job spec
1310	GetBuildID retrieves the build ID for the given name .
1311	listGCSObjects lists all objects in a bucket
1312	FindBaseProfile returns the base profile for the build
1313	sortBuilds takes a slice of strings and returns a sorted slice of build numbers
1314	GetAll returns all region names
1315	NewEventClient creates a new event client
1316	PruneComments deletes issue comments for the given issue
1317	FormatResponse returns a human readable string representation of a response
1318	FormatSimpleResponse is a helper function to generate a simple simple response
1319	FormatICResponse returns a string representation of an IssueComment .
1320	FormatResponseRaw returns a string representation of the response .
1321	Validate validates the provided options .
1322	Encode options to json string
1323	RegisterIssueHandler registers a new issue handler
1324	RegisterIssueCommentHandler registers a new issue comment handler
1325	RegisterPullRequestHandler registers a new pull request handler .
1326	RegisterStatusEventHandler registers a new status event handler .
1327	RegisterPushEventHandler registers a push event handler
1328	RegisterReviewEventHandler registers a new review event handler
1329	RegisterReviewCommentEventHandler registers a handler for review comment events .
1330	RegisterGenericCommentHandler registers a generic comment handler
1331	NewAgent creates a new Agent
1332	InitializeCommentPruner creates a new comment pruner
1333	CommentPruner is part of the Agent interface .
1334	Load reads the configuration from the given path .
1335	Config returns the current configuration .
1336	Set sets the current configuration .
1337	Start starts the config agent
1338	GenericCommentHandlers returns a map of generic comment handlers for the given repository .
1339	IssueHandlers returns a map of issue handlers for the given repository .
1340	IssueCommentHandlers returns a map of issue comment handlers for the given repository .
1341	PullRequestHandlers returns a map of pull request handlers .
1342	ReviewEventHandlers returns all the review event handlers for the given repository .
1343	ReviewCommentEventHandlers returns a map of review comments for the given repository .
1344	StatusEventHandlers returns all registered status events .
1345	PushEventHandlers returns a map of push event handlers for the given repository .
1346	EventsForPlugin returns a list of events for the given plugin
1347	insertLink inserts a new view into the viewstore .
1348	HelpProvider is a helper function that provides the basic information about the crck plugin .
1349	getPatch returns the patch for the given target branch .
1350	releaseNoteFromParentPR extracts a release note from the given body .
1351	ValidatePayload verifies that the payload is valid .
1352	PayloadSignature calculates the signature of a payload
1353	updateString returns true if the have already been set .
1354	updateBool returns true if the two bool pointers are equal .
1355	configureOrgMeta configures the org metadata
1356	configureTeamRepos configures the repos for the given team
1357	ShouldReport reports whether the given Prow job should report .
1358	Run uploads the specified job to the GCS .
1359	Format implements the Logrus . Formatter interface .
1360	FindLabels returns all labels that match the given regexp .
1361	AddFlags adds command line flags to the specified FlagSet .
1362	NewAgent creates a new Agent
1363	HandleLogin returns an http . HandlerFunc
1364	HandleLogout returns an http . HandlerFunc
1365	serverError is used to log an error .
1366	FromItem creates a resource config object from a given item
1367	GetItems returns the items in the ResourcesConfigCollection
1368	SetItems sets the ItemsConfigObject
1369	UnmarshalText implements the encoding . TextUnmarshaler interface for RepoPermissionLevel .
1370	IsAssignee returns true if the given login is a member of the issue .
1371	IsAuthor returns true if the issue is authorized .
1372	HasLabel returns true if the given label matches the given label .
1373	Branch returns the branch of the push event .
1374	truncate returns the length of the string .
1375	reportStatus creates a status for the given Prow job .
1376	Parse issue comments
1377	createComment creates a comment for a test .
1378	Config returns the lens config for this lens .
1379	Callback is a mock
1380	FormatRecord formats a record .
1381	Namespace creates a new client with the given namespace .
1382	NewFakeClient creates a new Client with the given deck URL
1383	NewClientInCluster creates a new kubernetes cluster client
1384	NewClientFromFile creates a new client from the given file .
1385	NewClient creates a new Kubernetes client
1386	ReplaceConfigMap replaces a ConfigMap with the given name .
1387	GetDiskUsage returns the number of bytes free for the specified path .
1388	GetATime gets the file at path
1389	RegisterLens registers a new lens .
1390	GetLens returns the lens by name .
1391	LastNLines returns the last N lines of the artifact
1392	NewClient creates a new Slack client
1393	WriteMessage write a message
1394	MarkAndSweep deletes all NATGateways
1395	ListAll lists all NATGateways
1396	NewClient creates a new client
1397	Acquire acquires a resource
1398	AcquireWait is used to acquire a resource
1399	AcquireByState acquires a set of resources for the given state
1400	ReleaseAll releases resources
1401	ReleaseOne releases a resource
1402	UpdateAll updates all resources in the cluster .
1403	SyncAll syncs all resources
1404	UpdateOne updates a single resource
1405	Metric returns a single metric with the given type
1406	HasResource returns true if the resource exists
1407	DialContext dials the dialer with the given context .
1408	NewDashboardAgent creates a new dashboard agent
1409	QueryPullRequests queries the GitHub API for GitHub .
1410	GetHeadContexts returns the context for the given PullRequest .
1411	ConstructSearchQuery constructs a query for the search query .
1412	NewBundledStates creates a new BundledStates instance
1413	ReceiveEvent is used to receive an event
1414	age age returns the age of all states that have been active .
1415	Percentile returns the age at the given time .
1416	NewMetrics creates a new Metrics struct
1417	NewDiskCache creates a new http . RoundTripper with the specified cache size .
1418	NewMemCache creates a new http . RoundTripper
1419	NewFromCache creates a new http . RoundTripper that wraps an httpcache . RoundTripper .
1420	ProwV1 retrieves the ProwV1Client
1421	Prow retrieves the ProwV1Client
1422	NewOwners creates a new Owners struct
1423	GetApprovers returns a map of approval IDs
1424	GetAllPotentialApprovers returns a list of potential approvers
1425	GetReverseMap - returns a map of owners files
1426	tempporaryUnapprovedFiles returns the unapproved unapproved files
1427	KeepCoveringApprovers is a helper function that returns a set of approver names that can be found in the repository
1428	GetSuggestedApprovers returns a set of approver names that can be used to find the approval
1429	GetOwnersSet returns a set of owners
1430	GetShuffledApprovers will return a random list of approps
1431	String returns a string representation of approval .
1432	IntersectSetsCase returns a subset of two sets .
1433	NewApprovers creates a new Approvers
1434	AddLGTMer adds a new approval to the approval list
1435	RemoveApprover removes an approval from the map .
1436	AddAssignees adds the user to the approval list
1437	GetCurrentApproversSetCased returns the current approval set
1438	GetFilesApprovers returns a set of files and their permissions
1439	NoIssueApprovers returns a set of Approvers
1440	UnapprovedFiles returns a set of unapproved files
1441	GetFiles returns a list of files that are approved .
1442	IsApproved returns true if the approval has been granted
1443	ListApprovals returns a list of Approvers
1444	ListNoIssueApprovals returns a list of Approvers
1445	GenerateTemplate is used to generate a message
1446	writeTemplate writes the given template to outputPath .
1447	Labels returns all the labels in the configuration .
1448	LabelsForTarget returns a slice of labels that match the target .
1449	LoadConfig reads a YAML configuration file
1450	loadLabels retrieves labels for the given repositories .
1451	kill kills a label
1452	create creates a new update .
1453	classifyLabels takes a list of labels and creates a new map of required labels .
1454	linkify converts a text string to lower case .
1455	NewCache creates a new instance of Cache
1456	KeyToPath returns the path to the cache
1457	ensureDir ensures that dir exists
1458	Put writes content to the cache
1459	Get retrieves a file from the cache
1460	Delete deletes the key
1461	NewGCSArtifact creates a new GCSArtifact
1462	Size returns the size of the artifact .
1463	ReadAll reads the contents of the artifact .
1464	ReadTail reads the tail of the artifact
1465	gzipped returns true if the artifact is gzipped
1466	optionsForRepo returns a list of options for the given org and repository .
1467	List lists all ProwJobs in the indexer .
1468	ProwJobs returns an object that can list and get ProwJobs .
1469	List lists all ProwJobs in the indexer for a given namespace .
1470	RunsAgainstAllBranch returns true if all branches are run
1471	Intersects returns true if the two branches are the same .
1472	ShouldRun determines whether the RegexpChangeMatcher should be run
1473	RunsAgainstChanges returns true if the changes match .
1474	CouldRun returns true if the postsubmit is run
1475	ShouldRun implements Postsubmit .
1476	CouldRun returns true if the plugin should run
1477	ShouldRun checks if the changes should be run
1478	GetPresubmit returns the Presubmit for the given repository and job name .
1479	SetPresubmits configures a list of Presubmits
1480	SetPostsubmits sets the list of postsubmits
1481	AllPresubmits returns all the Presubmits in the job config .
1482	AllPostsubmits returns all postsubmits for given repositories .
1483	AllPeriodics returns all Periodics
1484	ClearCompiledRegexes clears all compiled compiled expressions .
1485	Empty returns true if the SimpleConfig is empty .
1486	NewClient creates a new repo client
1487	ExpandAlias expands an alias for the given repo .
1488	ExpandAliases expands aliases in the repository .
1489	ParseFullConfig parses a YAML bytes into a FullConfig object .
1490	ParseSimpleConfig parses a YAML byte slice into a SimpleConfig object
1491	decodeOwnersMdConfig decodes the metadata from the metadata file .
1492	findOwnersForFile returns the most recent owner of the given path .
1493	FindApproverOwnersForFile finds the repository owned by the given path
1494	FindReviewersOwnersForFile finds the repository owned by the given file .
1495	FindLabelsForFile returns the set of labels for the given path .
1496	IsNoParentOwners returns true if the given path exists
1497	Ratio returns the ratio of stmt .
1498	FromPayload initializes PeriodicProwJobEvent
1499	ToMessage converts PeriodicProwJobEvent to Pubsub .
1500	UnmarshalText implements the encoding . TextUnmarshaler interface .
1501	compileApplicableBlockades compiles all blocked blocks in the given repository and compiles any blocked blocks .
1502	calculateBlocks returns a summary of blocks that have been blocked .
1503	MergeMultipleProfiles merges multiple profiles into one .
1504	AddFlags adds flags related to the specified FlagSet .
1505	processNextItem processes the next item in the queue
1506	handleErr is used to handle errors .
1507	AggregateFilter takes a list of filters and aggregates them together .
1508	FilterPresubmits takes a list of presubmit and filters them based on the conditions provided .
1509	MakeCommand creates a new cobra command
1510	Push adds an IssueEvent to the heap .
1511	Pop implements the heap . Interface interface .
1512	NewFakeOpenPluginWrapper creates a new FakeOpenPluginWrapper
1513	ReceiveIssue implements the plugin . Issue interface
1514	Validate validates the given options .
1515	Complete populates the options from the command line arguments
1516	Set parses the orgRepoFormat and updates it .
1517	ensure returns an error if the given binary exists .
1518	output returns the stdout of the command
1519	projects returns a list of projects .
1520	selectProject is used to select a project
1521	createCluster creates a new cluster
1522	createContext creates a new GKE cluster
1523	contextConfig returns a client config loader and an error .
1524	selectContext selects a single context
1525	applyCreate runs the create command
1526	determineSkippedPresubmits returns a set of presubmit that can be skipped
1527	Dispatch is a goroutine - dispatches to the database
1528	CreateIssue creates a new issue
1529	CreateStatus creates a status for the given ref .
1530	ForEachPR iterates over all commits in the repository .
1531	GetCollaborators returns a list of collaborators for the given repository .
1532	GetCombinedStatus gets the combined status for a given ref .
1533	GetIssues returns all issues in the given repository .
1534	GetRepoLabels returns a list of all labels in the given repository .
1535	GetUser retrieves a user by username .
1536	checkConfigValidity verifies that the config is valid
1537	createSystemdLogfile creates a log file for the systemd daemon
1538	createFullSystemdLogfile creates a full log file at the given path
1539	createSystemdLogfiles creates logs for systemd logs
1540	prepareLogfiles creates logfiles based on the current node
1541	writeSuccessMarkerFile writes the marker file to GCS
1542	MakeCommand creates a new cobra command
1543	warnDeprecated checks if the current time is older than the given frequency .
1544	Describe returns a human readable description of the requirement
1545	TriggerFor returns a trigger for the given org and repository .
1546	EnabledReposForPlugin returns the repositories for the given plugin
1547	EnabledReposForExternalPlugin returns a list of repositories for the specified plugin
1548	SetDefaults sets the defaults for the ConfigUpdater
1549	validatePlugins returns an error if the plugins are invalid .
1550	ShouldReport reports whether a Prow job should report it .
1551	Run clones the given refs
1552	PathForRefs returns the absolute path for the given refs .
1553	gitCtxForRefs returns a git context for the given refs .
1554	commandsForBaseRef returns the commands for the given refs .
1555	gitTimestampEnvs returns the environment variables for the given timestamp
1556	gitRevParse returns the revision of the git repo
1557	commandsForPullRefs returns the commands for the given refs .
1558	ProduceCovList creates a CoverageList from a list of profiles .
1559	popRandom removes random elements from set
1560	resolve is used to resolve the kubeconfig options
1561	ProwJobClientset returns the clientset for the given namespace .
1562	ProwJobClient returns a new instance of ProwJobClient
1563	InfrastructureClusterClient returns a kubernetes cluster client
1564	BuildClusterClients returns a list of kubernetes cluster clients for the specified namespace .
1565	Age returns the age of the active state
1566	ReceiveEvent returns the state of an active state
1567	ReceiveEvent returns the active state for the given event .
1568	Active returns true if all the states have been active .
1569	Age returns the age of all states that are older than t .
1570	ReceiveEvent implements Recorder .
1571	ProwJobs returns a ProwJobInformer .
1572	ItemToResourcesConfig converts an item to ResourcesConfig
1573	Copy makes a copy of this TypeToResources
1574	MakeCommand creates a new cobra . Command instance
1575	incrementNumPendingJobs increments the number of pending jobs .
1576	Sets previous report states
1577	SyncMetrics updates the pprof metrics
1578	DumpProfile writes a profile to writer .
1579	blocksEqual compares two profile blocks .
1580	NewProwJobInformer constructs a new informer for ProwJob type . Always prefer using an informer factory to get a shared informer instead of getting an independent one . This reduces memory footprint and number of connections to the server .
1581	NewFilteredProwJobInformer constructs a new informer for Prow jobs type . Always prefer using an informer factory to get a shared informer instead of getting an independent one . This reduces memory footprint and number of connections to the server .
1582	New creates a new spyglass instance
1583	Lenses returns a list of entries that match the match cache
1584	JobPath returns the path to the job .
1585	RunPath takes a source path and attempts to translate it into a path
1586	ExtraLinks returns a list of extra links that have been started .
1587	needDemux returns a list of plugins that match the source repository
1588	DemuxExternal dispatches the event to the handler .
1589	dispatch performs an HTTP POST request .
1590	AddFlags adds flags
1591	CheckFlags ensures that the plugin is valid
1592	ReceiveIssueEvent takes a IssueEvent and returns a slice of points .
1593	Load is used to load the config
1594	loadConfig loads the configuration from the given file .
1595	yaml to yaml
1596	ReadFileMaybeGZIP reads a file and returns it .
1597	finalizeJobConfig sets the default values for the config
1598	validateComponentConfig validates the Planks API configuration .
1599	ConfigPath returns the default config path
1600	ValidateController validates the controller .
1601	defaultJobBase sets the default values for the JobBase
1602	SetPresubmitRegexes sets rerun regexes for all jobs
1603	setBrancherRegexes computes the regexp regexes for all branches .
1604	SetPostsubmitRegexes sets the regexp regexes for all postsubmit expressions
1605	Body takes a set of artifacts and returns it as a string
1606	NewBoskosHandler creates a new http . ServeMux
1607	ErrorToStatus converts an error to a status code
1608	DumpProfile dumps profile to destination
1609	LoadProfile loads profiles from stdin
1610	NewClient creates a new git client
1611	SetCredentials sets the credentials for the client
1612	Checkout checks the given commit with the given commit .
1613	CheckoutNewBranch creates a new branch .
1614	Merge merges the given commit into the repository
1615	CheckoutPullRequest fetches a pull request from the repository .
1616	Config updates the git config
1617	retryCmd runs the command with the given arguments .
1618	LabelsAndAnnotationsForSpec takes a ProwJobSpec and returns a map of labels that can be added to the pod .
1619	ProwJobToPod creates a pod based on a pod spec
1620	CloneLogPath returns the path to the log file path
1621	cloneEnv creates a clone of the Kubernetes cli environment variables
1622	sshVolume returns a volume mount point for the SSH keys
1623	InjectEntrypoint adds an entrypoint to the container
1624	PlaceEntrypoint creates a new container container
1625	kubeEnv returns a sorted list of environment variables .
1626	Client returns a new Kubernetes client
1627	handle is used to handle an event
1628	SendHook sends an event to the given address .
1629	janitorClean deletes the given resource
1630	janitor
1631	Run starts the pull server
1632	specToStarted converts a job spec to a gcs . Started object
1633	Run clones the given options .
1634	hasPRChanged returns true if the pull request has changed
1635	UpdateIssues updates all issues in the database
1636	handleReviewEvent handles review events .
1637	findAssociatedIssue returns the number of issues associated with the given org .
1638	optionsForRepo returns the approval options for the given org and repository .
1639	localOnlyMain is a middleware that serves local - only HTTP requests .
1640	summarize summarizes coverage list
1641	Subset returns a CoverageList with the specified prefix .
1642	ListDirectories returns a list of all directories
1643	readRequest reads an admission request from r .
1644	handle handles a request
1645	writeResponse writes the response to the writer .
1646	onlyUpdateStatus checks if the status update is updated
1647	convertSuiteMeta converts gcs . SuiteMeta to resultstore
1648	NewHealth creates a new instance of Health
1649	ServeReady serves the healthz endpoint
1650	NewController creates a new controller
1651	newExpectedContext creates a new context
1652	contextsToStrings converts a list of contexts to a string
1653	filterSubpools takes a set of sub - pools and filters them with proutines .
1654	filterSubpool returns a shallow copy of the subpool with the pruned pruned pruned pruned pruned pruned prune pruned prunes pruned prunes pruned pruned prunes prunes prune prunes prunes prunes prunes prunes prunes prunes prunes prunes prunes prune prunes prunes prunes prunes prunes prunes prunes prunes prune prunes prunes prunes prune prunes prunes prune prunes prunes prunes prunes prune prunes prunes prunes prunes prunes pruned prunes pruned pr
1655	poolPRMap returns a map of pull requests for the given subpool map .
1656	unsuccessfulContexts takes a list of ContextChecker and returns a list of contexts that are missing .
1657	Makes a set of presubmitted jobs and returns them as well as the results .
1658	tryMerge tries to merge the given mergeFunc with the given mergeFunc .
1659	prChanges returns a config . ChangedFilesProvider that retrieves changes for the pull request .
1660	prune is used to prune the change cache
1661	DividePool divides a pull request into a subpool
1662	AggregateProfiles takes a list of profiles and aggregates them together .
1663	countToBoolean returns a new set of profiles in the profile .
1664	NewStorage creates a new Storage instance
1665	AddResource adds a single resource
1666	DeleteResource deletes a resource
1667	UpdateResource updates a single resource
1668	GetResource retrieves a resource by name .
1669	GetResources returns all resources in the storage .
1670	SyncResources synchronizes resources
1671	ParseConfig parses a YAML configuration from a YAML file .
1672	problemsInFiles returns a set of problems in the given files .
1673	NewPodLogArtifact creates a new PodLogArtifact
1674	CanonicalLink returns the canonical link for this PodLogArtifact
1675	ReadAt implements the io . ReaderAt interface .
1676	ReadAll returns the contents of the pod log .
1677	ReadAtMost implements the PodLogArtifact interface .
1678	ReadTail returns the tail of the pod log .
1679	newProblems takes a set of comments and returns a map of Problem objects .
1680	problemsInFiles returns a map of lines in the given files .
1681	undoPreset removes all environment variables in the pod .
1682	undoPresubmitPresets undo a set ofPresubmitPresets
1683	YamlBytesStripNulls strips null comments from yaml bytes
1684	monitorDiskAndEvict periodically polls the disk usage for the disk and evicts them .
1685	difference returns a new config with duplicates in c2
1686	union returns the union of two orgRepoConfig .
1687	clearStaleComments removes stale comments from the pull request .
1688	determineReleaseNoteLabel extracts the release notes from the body .
1689	getReleaseNote extracts the release note from the body .
1690	NewClient creates a new client
1691	Acquire acquires a resource
1692	ReleaseOne releases a resource
1693	UpdateAll updates the state of all channels .
1694	GetGitHubClient returns a new GitHub API client
1695	GetUsername returns the user s username
1696	CreateTokenHandler creates a token handler
1697	CreateTokenHandlers creates tokens handlers
1698	String returns a string representation of the indentifier .
1699	TerminateOlderPresubmitJobs terminates a list of pending jobs .
1700	PushMetrics pushes metrics to the metrics collector
1701	RateLimiter creates a new rate limiter .
1702	checkExistingStatus returns the current status of the given pull request
1703	checkExistingLabels returns true if the issue labels exist in the given repository .
1704	handle checks to see if a comment is in the repository .
1705	MarkdownSHAList formats a list of GitCommits
1706	PathForSpec returns the path for the given job spec
1707	AliasForSpec returns the alias for the given job spec
1708	RootForSpec returns the root directory for the given job spec
1709	NewSingleDefaultRepoPathBuilder creates a new repository path builder .
1710	NewExplicitRepoPathBuilder creates a new RepoPathBuilder
1711	RegisterSourceOrDie registers a new IssueSource with the given name .
1712	CreateAndSync creates new issues and syncing issues
1713	loadCache initializes the cache and updates the cache
1714	setIntersect returns the set of elements removed from a and removed elements .
1715	sync returns true if the given issue is closed .
1716	GetAWSCreds extracts the credentials from the resource .
1717	Stropper returns a channel that will be closed when SIGTERM is received .
1718	newPipelineConfig creates a new pipeline config
1719	KubeClient returns a Kubernetes client
1720	ProwJobClient is part of the Kubernetes client interface .
1721	resolveSymLink returns the absolute path of the given symLink
1722	readJSON reads a JSON object from a bucket .
1723	List all subdirectories
1724	List all keys in a bucket
1725	List build IDs
1726	FilterProfilePaths filters profiles by regexp
1727	LoadSecrets loads the secrets from the given paths .
1728	LoadSingleSecret loads a single secret from the given path .
1729	Set sets the value of a bool
1730	NewOpener creates a new gcp client
1731	IsNotExist returns true if the given error is a NotExist error .
1732	LogClose closes the connection
1733	Writer opens a GCS file at the given path .
1734	InitGitHubOAuthConfig initializes the GitHubOAuthConfig
1735	DeltaDisplayed returns a human - readable representation of the coverage change .
1736	makeTable returns a table of changes .
1737	ContentForGitHubPost generates a line summary for the Git GitHub API .
1738	AddFlags adds flags related to the command line
1739	CheckFlags makes sure client flags are set
1740	Gets github client
1741	limit limitsCheckAndWait tries to wait for a token limit .
1742	FetchIssues fetches issues and sends them to channel
1743	hasID returns true if the event has the given id .
1744	FetchIssueEvents fetches issue events from given issue .
1745	isPRChanged returns true if the pull request has changed .
1746	NewFetcher creates a new Fetcher
1747	fetchRecentIssues fetches the issues channel and pushes them to the channel
1748	fetchRecentEventsAndComments fetches issue events and comments from the database .
1749	Fetch fetches the events from the database
1750	Issues returns all the issues in the flaky job .
1751	Title returns a human readable version of the FlakyJob .
1752	Labels returns a list of labels for the test .
1753	ReadHTTP reads an HTTP response from the given URL .
1754	String returns a string representation of the lines sorted by timestamp .
1755	NewJobSpec creates a new job spec
1756	ResolveSpecFromEnv loads the JobSpec from the environment .
1757	EnvForSpec returns the environment variables for the job spec
1758	EnvForType returns the environment variables for the given job type .
1759	getRevisionFromRef get revision from refs
1760	GetRevisionFromSpec returns the revision of a job spec
1761	helpProvider returns the plugin help provider .
1762	load parses a single file into a list of directories .
1763	loadPaths loads the paths from r .
1764	Match returns true if the given path matches the path .
1765	CreateDatabase creates a new InfluxDB instance .
1766	mergeTags merges default tags with extra tags .
1767	tagsToWhere converts a set of tags to a WHERE clause .
1768	Push adds a point to the database .
1769	ifactArtifact returns a PodLogArtifact representing the pod log .
1770	serve serves Prometheus metrics
1771	This is a long running goroutine that periodically sends metrics to the controller .
1772	makeRequest creates a BranchProtectionRequest from the given policy .
1773	makeReviews creates a github . RequiredPullRequestReviews from the given review policy .
1774	Header returns the header for the layer
1775	Callback is the entry point for lens .
1776	logLinesAll reads the log lines and returns them as a string .
1777	executeTemplate executes the given template
1778	DeepCopyObject returns a deep copy of the receiver .
1779	FromItem converts a common . Item into a ResourceObject
1780	SetItems sets the Items object
1781	DeepCopyObject returns a deep copy of the resource collection .
1782	useContext is used to configure kubectl config
1783	currentContext returns current context
1784	command returns an exec . Cmd with the given arguments .
1785	describeCluster returns information about the cluster
1786	Set implements the strslice interface .
1787	parseXML parses an object and returns a gcsDir object .
1788	Render render gcs directory
1789	Render renders a record
1790	Render renders a prefix
1791	Printf implements the Logger interface .
1792	NewClient creates a new gRPC client
1793	SetReview sets a review to Gerrit .
1794	GetBranchRevision returns the revision of the given branch .
1795	queryAllChanges retrieves changes for all projects .
1796	NewTypeFilterWrapperPlugin creates a new TypeFilterWrapperPlugin
1797	AddFlags adds flags
1798	CheckFlags returns an error if the type filters are not allowed
1799	AddFlags adds flags related to Kubernetes client to the specified FlagSet .
1800	Validate validates the Kubernetes client options
1801	Client returns a new Kubernetes client for the given type .
1802	newCRDClient creates a new CRD client
1803	createRESTConfig creates a rest . Config with the given kubeconfig .
1804	registerResource creates a new CustomResourceDefinition
1805	newDummyClient creates a new dummy client
1806	Update adds an object to the client
1807	TrustedPullRequest checks if a pull request is trusted
1808	buildAll runs all pending jobs in the given PullRequest .
1809	Run runs the provided options .
1810	AddConfig adds a new resource config
1811	DeleteConfig deletes a config
1812	UpdateConfig updates a resource config
1813	GetConfig retrieves a config from storage
1814	GetConfigs returns all the known resources .
1815	SyncConfigs updates configs with new configs
1816	addKnownTypes adds known types to the scheme .
1817	NewController creates a new controller
1818	Run runs the controller .
1819	addedBlockingPresubmits adds any previous presubmit to the new set of previous presubmit
1820	removedBlockingPresubmits removes any non - blocking presubmitted presubmitted presubmit .
1821	migratedBlockingPresubmits merges the previous presubmit in the previous presubmit .
1822	Load loads the configuration from the given environment variable .
1823	canExecuteConcurrently checks if a Prow job can be started .
1824	getJenkinsJobs builds a slice of JenkinsJobs from a slice of prowjobs .
1825	terminateDupes is used to cancel duplicate jobs
1826	Throttle is used to throttle a burst of hourly tokens
1827	NewClientWithFields creates a new Github client
1828	NewClient creates a new GraphQL client
1829	NewDryRunClient creates a new DryRun client
1830	NewFakeClient creates a new mock client
1831	request makes a request and unmarshals the response .
1832	requestRaw performs a raw request and returns the status code and an error .
1833	getUserData fetches the user data
1834	readPaginatedResultsWithValues reads the paginated results from the given URL .
1835	UpdatePullRequest updates a pull request .
1836	getLabels retrieves a list of labels from the server .
1837	stateCannotBeChangedOrOriginalError returns the original error if any .
1838	IsMergeable checks if a pull request has been merged with the given SHA .
1839	Token returns an oauth2 . Token
1840	ListArtifacts returns a list of artifact names
1841	KeyToJob returns the job name and build id and build id
1842	prowToGCS returns the GCS src url for the probe .
1843	FetchArtifacts fetches and returns a list of artifact objects
1844	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new DecorationConfig .
1845	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new GCSConfiguration .
1846	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new JenkinsSpec .
1847	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new ProwJob .
1848	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new ProwJobList .
1849	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new ProwJobSpec .
1850	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new ProwJobStatus .
1851	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new Pull .
1852	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new Refs .
1853	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new UtilityImages .
1854	upload uploads the given Invocation and target .
1855	ApplyDefault returns a new DecorationConfig with default values
1856	Validate validates the DecorationConfig .
1857	ApplyDefault returns a copy of u .
1858	ApplyDefault returns a copy of GCSConfiguration with default values
1859	Validate validates the GCS_path_strategy .
1860	ClusterAlias returns the cluster alias
1861	NewResource creates a new Resource
1862	NewResourcesFromConfig creates a list of resources from a resource entry
1863	UserDataFromMap creates a UserData from a map .
1864	Set implements the flag . Value interface .
1865	UnmarshalJSON implements json . Unmarshaler interface
1866	Extract unmarshals a user data from the given id
1867	Set stores the data in a UserData
1868	Update the given UserData with empty values
1869	ToMap converts the UserData to a UserDataMap
1870	FromMap creates a UserData from a UserDataMap
1871	ItemToResource converts an item into a Resource .
1872	Run clones the given options
1873	Add SSH keys
1874	Issues returns all the issues in the project .
1875	loadClusters creates clusters from JSON data
1876	Parse triage data
1877	topClusters returns the most recent clusters in the slice of clusters .
1878	topJobsFailed returns a slice of jobs in the cluster .
1879	Title returns a human - readable summary of the cluster .
1880	Labels returns a list of labels for the cluster
1881	New creates a new cron agent
1882	Queue jobs
1883	HasJob checks if a job exists
1884	addJob adds a job to the list .
1885	removeJob removes a job from the list .
1886	UpdateComments updates issue comments
1887	GatherProwJobMetrics collects metrics for a job
1888	optionOrDefault returns the option or the default value if the option is zero .
1889	newGCSJobSource creates a new GCSJobSource .
1890	artifacts returns a list of artifacts for the given job .
1891	canonicalLink returns the canonical version of the source .
1892	jobPath returns the path to the job .
1893	targetURL returns the target URL for the pull request .
1894	newBuildConfig creates a new build config
1895	NewClient creates a new Github API client
1896	retry attempts to execute the given action function .
1897	depaginate performs a depaginate on the specified options .
1898	NewHelpAgent creates a new HelpAgent
1899	GeneratePluginHelp generates the help for the given plugin
1900	getPullCommitHash extracts the commit hash from the given string .
1901	listJobBuilds lists all builds for the given job prefixes .
1902	getPRBuildData returns the build data for the given jobs .
1903	getGCSDirsForPR returns a set of GCS directories for the given repository .
1904	imageDeleteFromDisk deletes the image file
1905	doNetworksCreate creates a network
1906	networkLoadByName loads a network by name .
1907	Transaction executes a transaction with the given function .
1908	ForLocalInspectionWithPreparedStmts creates a new cluster with prepared query parameters
1909	SetDefaultTimeout sets default context timeout
1910	Transaction performs a transaction on the cluster .
1911	EnterExclusive creates an exclusive lock on the cluster
1912	ExitExclusive releases the exclusive lock on the cluster .
1913	Close closes the cluster .
1914	TxCommit is part of the sql . Transaction interface .
1915	ParseRemote parses a remote or returns an error if any .
1916	GetContainerServer returns a lxd . ContainerServer given a remote name .
1917	GetImageServer returns a lxd . ImageServer for the specified remote name .
1918	initAppArmor initializes the apparmor_parser .
1919	appArmorCanStack returns true if the apparmor flags are supported .
1920	containerDeviceAdd adds a device to the container .
1921	profileDeviceAdd adds a device to a profile
1922	ensureImageAliases ensures that all existing images exist .
1923	GetExistingAliases returns a list of aliases that match the provided list of aliases .
1924	String returns the string representation of the status code .
1925	ImagesGetExpired returns a list of images matching the given expiry time .
1926	ImageSourceInsert inserts a new image source .
1927	ImageSourceGet gets an image source by ID
1928	ImageExists checks if an image exists in the cluster
1929	ImageGet returns the image with the specified name .
1930	ImageGetFromAnyProject gets the image by fingerprint
1931	imageFill fills the properties of an image .
1932	ImageLocate locates the node with the given fingerprint .
1933	ImageAssociateNode associates a node with the given image .
1934	ImageDelete deletes an image .
1935	ImageAliasesGet returns the list of aliases for the given project .
1936	ImageAliasGet returns the image alias for the given project and name .
1937	ImageAliasRename renames an existing alias .
1938	ImageAliasDelete deletes an image alias
1939	ImageAliasesMove moves the alias to the destination .
1940	ImageAliasAdd adds a new alias to the database .
1941	ImageAliasUpdate updates an existing alias .
1942	ImageLastAccessUpdate updates the last_use_date
1943	ImageLastAccessInit initializes the cache with the given fingerprint .
1944	ImageUpdate updates an image .
1945	ImageInsert inserts a new image .
1946	ImageGetPools returns a list of pools for a given node
1947	ImageGetPoolNamesFromIDs returns the pool names for a given pool id
1948	ImageUploadedAt updates an existing image .
1949	ImagesGetOnCurrentNode returns all images in the cluster .
1950	ImagesGetByNodeID returns a map of images by node ID
1951	ImageGetNodesWithImage returns a list of nodes with the given fingerprint .
1952	ImageGetNodesWithoutImage returns a list of nodes with the given fingerprint .
1953	Add adds a new task to the group .
1954	Start starts the goroutine .
1955	zfsIsEnabled checks if zfs is enabled
1956	zfsToolVersionGet gets the version of zfs tool
1957	zfsModuleVersionGet returns the current zfs module version
1958	zfsPoolVolumeCreate creates a new zfs pool volume
1959	zfsPoolVolumeExists checks if the specified dataset exists
1960	NetworkIDsNotPending returns all networks in the cluster .
1961	NetworkConfigAdd adds a config node to the cluster .
1962	NetworkNodeJoin joins a node in the cluster .
1963	NetworkCreatePending creates a new network
1964	NetworkCreated sets the state of a network
1965	NetworkErrored sets the state of the cluster .
1966	NetworkGet retrieves a network by name
1967	networkNodes returns a list of nodes matching the given networkID .
1968	NetworkGetInterface gets the network interface by name
1969	NetworkConfigGet returns the network configuration for the given network .
1970	NetworkCreate creates a new network .
1971	NetworkUpdate updates a network .
1972	NetworkUpdateDescription updates the network s description .
1973	NetworkConfigClear clears the config data for the given network .
1974	NetworkDelete deletes a network
1975	NetworkRename renames a network
1976	GetContainers returns a list of all containers
1977	GetContainersFull returns a list of all containers in the cluster .
1978	GetContainer retrieves a container by name .
1979	CreateContainerFromBackup creates a container
1980	CreateContainer creates a container
1981	CreateContainerFromImage creates a container from an image server .
1982	UpdateContainer updates a container
1983	RenameContainer renames a container
1984	ExecContainer executes a container
1985	GetContainerFile retrieves a file from a container
1986	CreateContainerFile creates a container file
1987	DeleteContainerFile deletes a file at the specified path .
1988	GetContainerSnapshotNames returns a list of snapshots for the specified container
1989	GetContainerSnapshots returns a list of snapshots for the specified container
1990	GetContainerSnapshot retrieves a snapshot of a container
1991	CreateContainerSnapshot creates a snapshot of a container
1992	MigrateContainerSnapshot migrates a snapshot
1993	UpdateContainerSnapshot updates a snapshot of a container
1994	GetContainerState retrieves the state of a container
1995	UpdateContainerState updates the state of a container
1996	GetContainerLogfiles retrieves the logfiles of a container
1997	GetContainerLogfile retrieves the logs of a container
1998	GetContainerMetadata retrieves the metadata of a container
1999	SetContainerMetadata updates the metadata of a container
2000	GetContainerTemplateFiles returns a list of files for the specified container
2001	CreateContainerTemplateFile creates a template file
2002	DeleteContainerTemplateFile deletes a template file
2003	ConsoleContainer creates a console .
2004	GetContainerConsoleLog returns a stream of console logs
2005	DeleteContainerConsoleLog deletes a console log
2006	GetContainerBackups returns the backups for the specified container
2007	GetContainerBackup retrieves a backup of a container
2008	CreateContainerBackup creates a backup of a container
2009	RenameContainerBackup renames a backup of a container
2010	DeleteContainerBackup deletes a backup of a container
2011	GetContainerBackupFile gets the backup file for a container
2012	RsyncSend is a wrapper around rsyncSend
2013	patchesGetNames returns the names of all patches .
2014	PatchRenameCustomVolumeLVs renames existing volume volumes
2015	PatchLvmNodeSpecificConfigKeys patches the lvm config keys in the daemon
2016	GetHTTPClient returns the HTTP client
2017	do executes the given request .
2018	RawQuery performs a raw query request
2019	RawWebsocket creates a new websocket connection
2020	RawOperation is a convenience method to perform a raw operation .
2021	ProfileToAPI converts a profile into an api . Profile struct
2022	Profiles returns a list of profiles for the given project
2023	ProfileGet gets a profile by name .
2024	ProfilesGet gets a profile by name .
2025	ProfileConfig returns the profile information for a given project .
2026	ProfileConfigClear clears the config settings for the given profile .
2027	ProfileConfigAdd inserts a profile config into the database .
2028	ProfileContainersGet returns a map of containers with the specified profile .
2029	ProfileCleanupLeftover deletes all existing profiles
2030	ProfilesExpandConfig expands the given profiles and returns the expanded config
2031	ProfilesExpandDevices takes a list of profiles and converts them into a slice of Devices
2032	GetServer retrieves the server .
2033	UpdateServer updates a server
2034	HasExtension checks if the given extension exists
2035	GetServerResources retrieves the resources associated with the server .
2036	UseProject creates a new container server with the given name
2037	sqliteOpen opens a sqlite database connection
2038	Rebal balances the current Raft nodes .
2039	Promote promotes a node to the database
2040	Purge deletes a node
2041	List returns a list of nodes in the cluster .
2042	Count returns the number of nodes in the cluster .
2043	Enabled returns true if the Raft node is enabled .
2044	membershipCheckNodeStateForBootstrapOrJoin checks if the cluster is bootstrap or not .
2045	membershipCheckClusterStateForBootstrapOrJoin checks if the cluster is bootstrap or not .
2046	membership membership check .
2047	membershipCheckClusterStateForLeave checks if the given node is empty
2048	membershipCheckNoLeftoverClusterCert returns an error if the cluster certificate is not left leftover
2049	ConfigLoad loads the node config .
2050	Replace replaces the config with the given values .
2051	Patch returns a new config with the given values .
2052	HTTPSAddress returns the HTTPS address of the node .
2053	CertificatesGet returns all the certificates in the cluster .
2054	CertificateGet retrieves a certificate by fingerprint .
2055	CertSave saves a certificate .
2056	CertDelete deletes a certificate with the given fingerprint .
2057	CertUpdate updates a certificate .
2058	createDevLxdlListener creates a new socket listener
2059	Servers implements the Instance interface .
2060	Shutdown shuts down the Raft instance
2061	raftNetworkTransport creates a raft . Transport for the given address .
2062	raftConfig returns a raft . Config with sane defaults .
2063	raftMaybeBootstrap is used to bootstrap a raft cluster
2064	CPUResource returns api . ResourcesCPU
2065	MemoryResource returns information about the memory usage of the process .
2066	GetOperationUUIDs returns a list of UUIDs
2067	GetOperations returns all supported operations
2068	GetOperation retrieves an operation by UUID .
2069	GetOperationWebsocket returns a websocket connection
2070	tryMount attempts to mount a syscall . Mount
2071	LxdUsesPool checks if the storage pools exists in the cluster
2072	ProjectURIs returns the URIs for the given Project .
2073	ProjectList returns a list of projects matching the given filter .
2074	ProjectGet returns a project by name
2075	ProjectExists checks if a project exists
2076	ProjectCreate creates a project .
2077	ProjectUsedByRef returns the projects used by a ProjectFilter .
2078	ProjectRename renames a project .
2079	ProjectDelete deletes a project by name .
2080	PasswordCheck checks if the given secret is correct
2081	LoadCert loads a certificate from the given directory .
2082	WriteCert writes a certificate to the given directory .
2083	NewDaemon creates a new daemon
2084	DefaultDaemon returns a new Daemon with default values
2085	AllowProjectPermission checks if the user has permission for the given feature
2086	checkTrustedClient is used to check if the client is authenticated
2087	Authenticate checks if the request is authenticated
2088	State returns the daemon state .
2089	UnixSocket returns the path to the unix socket
2090	Stop stops the daemon
2091	setupExternalAuthentication creates a new external authentication client
2092	initializeDbObject initializes the local database object .
2093	WriteJSON writes the given body to the response .
2094	EtagHash returns the etag of data
2095	EtagCheck checks if the request matches the given data
2096	HTTPClient returns a new http client
2097	IsRecursionRequest checks if the request is a recursion request
2098	GetListeners returns a list of listeners
2099	internalSQLGet is used to query the SQL database .
2100	internalSQLPost posts a SQL query
2101	PublicKey returns the public key
2102	PrivateKey returns the private key
2103	Fingerprint returns the certificate fingerprint .
2104	GenCert generates a new cert
2105	PrintServerInfo prints the environment information .
2106	LaunchContainers launches containers
2107	CreateContainers creates a container
2108	GetContainers returns a list of all containers .
2109	StartContainers starts containers .
2110	setQueryParam replaces the query parameter with the given value .
2111	GetImages returns a list of all images
2112	GetImageFile gets an image file
2113	GetImageSecret retrieves the secret associated with the given fingerprint .
2114	GetPrivateImage retrieves a private image
2115	GetPrivateImageFile gets the private image file
2116	GetImageAliases returns a list of all image aliases
2117	tryCopyImage attempts to create a new remote operation .
2118	CopyImage copies an image to the server
2119	UpdateImage updates an image
2120	DeleteImage deletes an image
2121	RefreshImage refreshes the image with the given fingerprint .
2122	CreateImageAlias creates a new image alias
2123	Update an existing alias
2124	RenameImageAlias renames an image .
2125	DeleteImageAlias deletes an image alias
2126	Open opens a database connection .
2127	EnsureSchema ensures that the local db schema exists in the database .
2128	FilesystemDetect attempts to detect the filesystem type .
2129	Schema creates a new schema .
2130	updateFromV37 updates the Raft version of the Raft configuration .
2131	Arch ArchitectureGetLocal returns the architecture s architecture .
2132	NewController creates a new controller .
2133	CreateContainer creates a container
2134	DefinedContainer returns true if the container is defined in the container .
2135	UpdateContainer updates an existing container .
2136	RenameContainer renames a container
2137	DeleteContainer deletes a container
2138	Add adds an update to the schema .
2139	ensureSchemaTableExists ensures the schema table exists .
2140	queryCurrentVersion retrieves the current version of the cluster .
2141	ensureUpdatesAreApplied ensures that the given updates are correct .
2142	checkSchemaVersionsHaveNoHoles returns an error if any missing updates are missing .
2143	checkAllUpdatesAreApplied verifies that all the migrations are applied .
2144	formatSQL formats SQL statements
2145	GetAllXattr gets extended attributes for the extended attribute .
2146	GetErrno returns the errno for the given error .
2147	Uname returns the uname name of the system .
2148	RegisterStmt registers the given SQL statement .
2149	PrepareStmts returns a map of prepared statements .
2150	NewGateway creates a new gateway
2151	DialFunc returns a dqlite . DialFunc that connects to the gateway .
2152	Shutdown shuts down the database gateway
2153	Sync writes the database to disk
2154	Reset shuts down the Raft node .
2155	LeaderAddress returns the leader address of the node .
2156	waitLeadership waits for the cluster to connect to .
2157	currentRaftNodes returns the current Raft nodes .
2158	cachedRaftNodes returns a list of Raft nodes .
2159	dqliteMemoryDial returns a dqlite . DialFunc that connects to the given listener .
2160	DqliteLog implements dqlite . Dqlite .
2161	MetadataAsMap returns the metadata as a map
2162	MetadataAsOperation returns the metadata as an operation .
2163	MetadataAsStringSlice returns the metadata as a slice of strings
2164	MetadataAsStruct unmarshals the response into a struct
2165	Load the CSV file
2166	Write a CSV file
2167	AddRecord adds a record
2168	LoadConfig loads the configuration from the given path .
2169	SaveConfig saves the configuration to disk
2170	Get retrieves the contents of the ChrootLoader
2171	ConfigPath returns the full path to the config directory .
2172	ServerCertPath returns the path to the CA cert .
2173	NewConfig creates a new config with default remotes
2174	checkForPreDumpSupport checks if we have pre - dump enabled pre - dump enabled .
2175	preDumpLoop is the main entry point for the container
2176	newRoot creates a new cobra command
2177	APIExtensionsCount returns the number of API extensions
2178	SelectURIs executes the given statement using the given function .
2179	SelectStrings is an alias for Select .
2180	scanSingleColumn is an alias for scan .
2181	LazyHandler returns a Handler that invokes the given handler .
2182	Callers allocates and returns a new trace object .
2183	name returns the name of the call .
2184	TrimBelow returns a copy of the stack with the given pc .
2185	TrimAbove returns a copy of the stack with the given pc .
2186	TrimBelowName returns a slice of Trace with the given name .
2187	TrimAboveName trims the trace with the given name .
2188	TrimRuntime removes the runtime from the runtime .
2189	GetCaps returns the capabilities for the given path .
2190	SetCaps sets the capabilities for the given path .
2191	Read implements io . Reader
2192	Supported checks if the given path is supported
2193	GetProject returns the project id for the given path
2194	SetProject sets the project id
2195	DeleteProject deletes a project
2196	GetProjectUsage returns the project usage for the given path .
2197	SetProjectQuota sets the quota for the given path .
2198	backupLoadByName loads a backup by name .
2199	backupCreate creates a backup object
2200	Rename renames the backup
2201	Delete deletes the backup .
2202	backupFixStoragePool updates the storage pool .
2203	Count returns the number of rows that match the given conditions .
2204	CountAll counts all tables in the database .
2205	InitTLSConfig returns a TLS config with default values .
2206	copyContainerThinpool creates a snapshot of the container
2207	copyContainerLv copies the container to target .
2208	copyContainer copies the container to target container
2209	copyVolume copies a volume
2210	GetPrivateImage is a mock
2211	GetPrivateImageFile is unsupported
2212	GetImageAliasNames returns a list of all image aliases
2213	ProtoRecv reads the next message from the websocket .
2214	ProtoSend sends a proto message .
2215	ProtoSendControl sends a migration control message .
2216	Read implements the io . Reader interface .
2217	doContainersGetFromNode get containers from node
2218	Retry attempts to retry the database .
2219	IsRetriableError returns true if the given error is a retryable error .
2220	AppArmorProfile returns the application profile .
2221	StoragePoolVolumeCreate creates a new storage volume
2222	ContainerStorageReady implements storageBtrfs .
2223	ContainerCreateFromImage creates a new btrfs storage volume
2224	ContainerSnapshotRename renames the snapshot container
2225	ContainerSnapshotCreateEmpty creates a snapshot of a snapshot
2226	btrfsSubVolumesDelete deletes all subvolumes
2227	isBtrfsSubVolume checks if the given path is a btrfs subvolume .
2228	SelectConfig retrieves a set of keys from a table .
2229	UpdateConfig updates an existing config .
2230	deleteConfig deletes the config with the given keys .
2231	FormatSection creates a section of a section
2232	GetProjects returns a list of projects .
2233	GetProject retrieves a project by name .
2234	CreateProject creates a project
2235	UpdateProject updates a project .
2236	RenameProject renames a project
2237	Read implements io . Reader
2238	Write implements io . Writer
2239	NewCanceler creates a new canceller
2240	Cancelable returns true if the canceller is canceled
2241	Cancel cancels the operation
2242	CancelableDownload is used to cancel a request
2243	Get the current cluster configuration .
2244	clusterGetMemberConfig retrieves all the members of the cluster
2245	remove the cluster
2246	tryClusterRebalance attempts to rebal the cluster
2247	internalClusterPostRebalance is invoked when the cluster is active .
2248	internalClusterPostPromote posts a Raft node to the cluster .
2249	Filters returns a list of filters that match the entity .
2250	Parse returns a mapping for the named struct .
2251	findStruct looks up a struct type by name
2252	parseStruct parses a struct .
2253	Get profile names
2254	GetProfiles returns a list of profiles
2255	GetProfile retrieves a profile by name .
2256	CreateProfile creates a new profile
2257	UpdateProfile updates a profile
2258	RenameProfile renames a profile
2259	Load creates a new Map with the given schema .
2260	Dump returns a copy of the schema
2261	GetRaw returns the value of a key
2262	GetString gets a string value by name .
2263	GetBool gets a bool value from the map
2264	GetInt64 returns the value of a named key as a int64 .
2265	update updates the map with the given values .
2266	set sets the value of the named key . If the value already exists it returns true .
2267	DoesSchemaTableExist checks if a schema table exists .
2268	selectSchemaVersions retrieves all schema versions in the database .
2269	selectTablesSQL retrieves all tables in the database .
2270	createSchemaTable creates a table in the database .
2271	insertSchemaVersion inserts a new version in the database .
2272	NewState returns a new State object
2273	containerLXCUnload unload the containerLXC object .
2274	containerLXCInstantiate creates a new containerLXC instance .
2275	initStorage initializes the storage .
2276	OnNetworkUp is called when a network is created
2277	setupHostVethDevice sets the host_name property of the device
2278	getLxcState returns the Lxc state of the container .
2279	StorageStartSensitive is part of the CSI interface implementation .
2280	deviceExistsInDevicesFolder checks if a device exists in the devices folder
2281	createDiskDevice creates a disk device
2282	setNetworkRoutes sets the network routes
2283	Path returns the full path of the container lXC .
2284	maasInterfaces returns a list of maas . Container interface .
2285	getSystemHandler returns the system handler for the given syslog string .
2286	findNvidiaMinor attempts to find the device minor version of the GPU .
2287	GetLogger creates a new logger based on syslog and custom handler
2288	SetLogger replaces the current logger .
2289	WaitRecord waits for a record to be received .
2290	AddContext adds a context to the logger
2291	NewDottedVersion creates a new DottedVersion
2292	Parse parses a string representation of a version
2293	String returns a string representation of the version .
2294	Compare returns an integer indicating whether the version is equal to other .
2295	projectCreateDefaultProfile creates a default profile for a project .
2296	projectChange is used to update the features .
2297	projectIsEmpty returns true if project is empty
2298	GetCertificateFingerprints returns a list of certificate fingerprints
2299	GetCertificates returns a list of certificates
2300	GetCertificate retrieves a certificate by fingerprint .
2301	CreateCertificate creates a new certificate
2302	UpdateCertificate updates a certificate
2303	DeleteCertificate deletes a certificate
2304	get container metadata templates
2305	handle metadata templates
2306	remove metadata templates .
2307	getContainerTemplatePath returns the full path of a template file
2308	Error implements the Error interface .
2309	Error implements the error interface .
2310	add adds an Error to the list .
2311	UpdateSchema updates the database schema .
2312	doProfileUpdateCluster updates the profile information in the cluster
2313	doProfileUpdateContainer updates a container .
2314	getProfileContainersInfo retrieves container information for a given profile .
2315	GetNetworkNames returns a list of network names
2316	GetNetworks returns a list of networks
2317	GetNetwork retrieves a network by name .
2318	GetNetworkLeases queries the network leases for a network
2319	GetNetworkState retrieves the network state for the given name .
2320	CreateNetwork creates a new network
2321	UpdateNetwork updates a network
2322	RenameNetwork renames a network
2323	Open opens a database connection .
2324	URLEncode encodes the given path into a URL string .
2325	IsUnixSocket returns true if path is a socket file
2326	HostPath returns the path to the hostfs path .
2327	FileMove moves a file
2328	DirCopy copies a directory .
2329	StringMapHasStringKey checks if a map contains a map key
2330	TextEditor sets the contents of a text editor
2331	WriteTempFile creates a temporary file
2332	RenderTemplate renders the given template .
2333	Every creates a schedule based on an interval
2334	StoragePoolMount is used to mount a storage pool
2335	Dump dumps the given schema .
2336	dumpTable returns a string representation of a table .
2337	ProjectHasProfiles checks if a project with the given name exists .
2338	ProjectNames returns a list of all projects in the cluster .
2339	ProjectMap returns all projects in the cluster .
2340	ProjectHasImages checks if the project has images enabled
2341	ProjectUpdate updates a project .
2342	GetCluster retrieves the current cluster .
2343	UpdateCluster updates a cluster
2344	GetClusterMemberNames returns a list of all cluster members
2345	GetClusterMembers returns a list of all cluster members
2346	GetClusterMember retrieves a member by name
2347	RenameClusterMember renames a member
2348	Disconnect disconnects the listener
2349	CompareVersions compares two schemas .
2350	HasClientCertificate returns true if the client certificate exists
2351	GenerateClientCertificate creates a client certificate
2352	LoadModule load module
2353	Parse parses a Go package .
2354	PprofAddress returns the address of the pprof address .
2355	PprofUpdateAddress updates pprof address
2356	NewMethod creates a new method
2357	Generate writes method to buf .
2358	fillSliceReferenceField is a helper method to fill a field in a slice .
2359	StoragePoolID returns the id of a storage_pool
2360	StoragePoolIDsNotPending returns all the pools that are currently pending .
2361	StoragePoolNodeJoin is used to join a node
2362	StoragePoolNodeJoinCeph adds a node to the cluster
2363	StoragePoolConfigAdd adds a config node to a storage pool .
2364	StoragePoolCreatePending creates a new storage pool
2365	StoragePoolCreated sets the state of a storage pool
2366	StoragePoolErrored sets the state of the storage pool .
2367	StoragePoolNodeConfigs returns a map of storage pools configs
2368	StoragePoolsGetDrivers returns a list of registered driver drivers
2369	StoragePoolGetID gets the id of a storage_pool
2370	StoragePoolGet retrieves a storage pool by name
2371	storagePoolNodes returns a list of nodes matching the given poolID .
2372	StoragePoolConfigGet gets the storage_pools_config values for a given pool
2373	StoragePoolCreate creates a new storage pool
2374	storagePoolConfigAdd adds a storage pool config to the database .
2375	StoragePoolUpdate updates a storage pool
2376	StoragePoolConfigClear clears the storage_pools_config data for a given pool .
2377	StoragePoolDelete deletes a storage pool
2378	StoragePoolVolumesGetNames returns a list of volume names for a given pool
2379	StoragePoolVolumesGet returns a list of storage volumes for a given pool .
2380	StoragePoolNodeVolumesGet returns a list of storage volumes for a node
2381	storagePoolVolumesGet returns a list of storage volumes for the specified pool
2382	StoragePoolVolumesGetType gets the volume type of storage volumes
2383	StoragePoolVolumeSnapshotsGetType returns the volume snapshot type of a volume
2384	StoragePoolNodeVolumesGetType gets the volume type of a node
2385	StoragePoolVolumeGetType gets the type of a volume
2386	StoragePoolNodeVolumeGetType gets the type of a volume
2387	StoragePoolNodeVolumeGetTypeByProject returns the volume type of a volume
2388	StoragePoolVolumeUpdate updates the volume pool
2389	StoragePoolVolumeDelete deletes a volume volume
2390	StoragePoolVolumeRename renames a volume volume .
2391	storagePoolVolumeReplicateIfCeph replaces the existing volume with the given volume type .
2392	StoragePoolVolumeCreate creates a new storage pool volume
2393	StoragePoolVolumeGetTypeID returns the volume ID of a volume
2394	StoragePoolNodeVolumeGetTypeID gets the ID of a volume
2395	StoragePoolVolumeTypeToName maps volume type to name
2396	DevicesAdd adds devices to the database .
2397	Devices returns a list of devices for the given project .
2398	Patches returns a list of patches .
2399	PatchesMarkApplied marks the given patch as applied .
2400	entityType returns the name of the entity .
2401	entityPost returns the post name for the given entity
2402	stmtCodeVar returns the statement code variable for the given entity type
2403	destFunc returns the generated code for a slice of fields .
2404	CompareConfigs compares two configs and returns an error if any .
2405	CopyConfig returns a shallow copy of the given config
2406	NewNotifier creates a new NotifyNotifier
2407	Events creates a function that updates the events in the cluster .
2408	eventsConnect creates a listener for the event listener
2409	StoragePoolInit initializes the storage pool .
2410	getAAProfileContent returns the profile content for the container
2411	AALoadProfile reloads an apparmor profile .
2412	AADestroy removes the apparmor namespace
2413	AaparseProfile parses an apparmor profile .
2414	getSystemHandler returns nil if syslog is set .
2415	NotifyUpgradeCompleted is called when the upgrade is completed .
2416	KeepUpdated returns a function that periodically updates the current state .
2417	maybeUpdate checks if the cluster is outdated or not .
2418	NewServer creates a new server
2419	StartStatusCheck starts a goroutine that periodically updates the status cache .
2420	SyncProjects synchronizes all projects and updates them .
2421	AddProject adds a new project
2422	DeleteProject deletes a project by ID .
2423	RenameProject renames a project .
2424	IsAdmin returns true if the given username is admin
2425	HasPermission returns true if the user has permission for the given project .
2426	rsyncSend sends a remote command to the remote server
2427	rsyncSendSetup is used to setup a remote connection to the remote process
2428	tlsClientConfig returns a tls . Config for the client
2429	tlsCheckCert checks if the TLS certificate is valid
2430	Internal implementation of internalClusterContainerMovedPost
2431	containerPostCreateContainerMountPoint creates the mount point for the container
2432	Contains returns true if the given device exists in the list .
2433	Update merges two lists of devices
2434	DeviceNames returns a sorted list of names .
2435	Infof log message
2436	Debugf log message
2437	Warnf logs a message
2438	Errorf log message
2439	Critf logs a critical message
2440	eventForward sends an event to the node .
2441	StorageProgressReader creates an io . ReadCloser with the given operation and description .
2442	StorageProgressWriter returns an io . WriteCloser that writes progress information to the given operation .
2443	GetLSBRelease returns a map of OS - release strings
2444	Reset resets the generated code .
2445	Append appends a snippet to target file
2446	ContainerToArgs creates a ContainerArgs from a Container .
2447	ContainerNames returns a list of containers for the given project .
2448	ContainerNodeAddress returns the node address of a container
2449	ContainersListByNodeAddress returns a list of all containers in the cluster .
2450	ContainerListExpanded returns a list of all containers in the cluster
2451	ContainersByNodeName returns a map of containers for the given project .
2452	SnapshotIDsAndNames returns a map of snapshot IDs .
2453	ContainerNodeList lists all containers in the cluster .
2454	ContainerNodeProjectList lists all containers in the cluster .
2455	ContainerRemove removes a container .
2456	ContainerProjectAndName returns the project and name of a container .
2457	ContainerConfigClear clears the config data for the given container .
2458	ContainerConfigGet gets the value of a container .
2459	ContainerConfigRemove deletes a container config .
2460	ContainerSetStateful sets the stateful stateful for the container
2461	ContainerProfilesInsert inserts a profile into the database .
2462	ContainerProfiles returns a list of profiles for a container
2463	ContainerConfig returns the container s config .
2464	ContainerSetState sets the state of a container
2465	ContainerUpdate updates a container .
2466	ContainerLastUsedUpdate updates the last_use_date of a container
2467	ContainerGetSnapshots returns a list of all snapshots of a container
2468	ContainerGetSnapshotsFull returns a list of snapshots with the specified name .
2469	ContainerNextSnapshot returns the next snapshot of a container
2470	ContainerPool returns the name of the storage pool .
2471	ContainerGetBackup gets information about a container .
2472	ContainerGetBackups returns a list of backups for a given project and name .
2473	ContainerBackupCreate creates a new container backup
2474	ContainerBackupRemove deletes a container backup
2475	ContainerBackupRename renames a container backup
2476	ContainerBackupsGetExpired returns a list of backups created in the cluster .
2477	DefaultOS returns a new instance of the default OS
2478	Init initializes the OS
2479	GetWebsocket returns a websocket connection for the operation .
2480	Refresh refreshes the operation .
2481	CancelTarget cancels the operation
2482	GetTarget is part of the operation . RemoteOperation interface .
2483	up initializes the endpoints
2484	Down shuts down all endpoints
2485	serveHTTP starts the HTTP server for the given kind .
2486	closeListener removes the listener associated with the given kind .
2487	ActivatedListeners returns a map of net . Listener based on systemdListeners
2488	CandidServer returns the candid server
2489	RBACServer returns the RBAC server
2490	AutoUpdateInterval returns the auto update interval
2491	MAASController returns the MAAS controller .
2492	OfflineThreshold returns the number of offline connections
2493	ConfigGetString gets a string value by key .
2494	ConfigGetBool gets a bool value for a given key
2495	ConfigGetInt64 gets an int64 from a cluster
2496	ClusterAddress returns the address of the endpoint .
2497	Debug logs a debug message
2498	RestServer returns a new http server
2499	projectParam returns the project name from the request .
2500	queryParam returns the value of a query parameter
2501	newDb creates a new cobra command
2502	Description returns a human readable description of the operation type .
2503	Permission returns the permission for the operation
2504	OperationsUUIDs returns the UUIDs associated with the node .
2505	OperationNodes returns a list of nodes in the cluster .
2506	OperationByUUID returns the operation by UUID .
2507	OperationAdd adds a node to the database .
2508	OperationRemove deletes an existing operation .
2509	operations returns all operations matching the given query .
2510	expireLogsTask is used to expire log files
2511	absPath returns the absolute path of the given path
2512	Keys returns a sorted list of keys .
2513	Defaults returns the default values of the schema .
2514	mustGetKey panics if the key does not exist .
2515	assertKeyType panics if the given key exists .
2516	validate validates the given value .
2517	GetStoragePoolVolumes returns a list of volumes for the specified pool
2518	GetStoragePoolVolume retrieves a storage volume by name
2519	CreateStoragePoolVolume creates a new storage volume
2520	CreateStoragePoolVolumeSnapshot creates a volume snapshot
2521	GetStoragePoolVolumeSnapshots returns a list of snapshots for the specified volume type .
2522	GetStoragePoolVolumeSnapshot retrieves a snapshot of a volume snapshot
2523	UpdateStoragePoolVolumeSnapshot updates a volume snapshot
2524	MigrateStoragePoolVolume migrates a volume volume
2525	MoveStoragePoolVolume moves a volume to a storage volume
2526	UpdateStoragePoolVolume updates the storage pool volume
2527	DeleteStoragePoolVolume deletes a volume
2528	RenameStoragePoolVolume renames a volume
2529	doStoragePoolCreateInternal creates a new storage pool
2530	containerGetParentAndSnapshotName returns the parent and snapshot name of the container .
2531	containerLoadFromAllProjects loads all containers in the cluster .
2532	containerLoadNodeAll loads all the nodes in the cluster .
2533	containerLoadNodeProjectAll loads all containers in the cluster .
2534	heartbeatNode is used to send a raft node to the cluster
2535	dotPrefixMatch returns true if the short matches the full string .
2536	ContainerMount mounts a container
2537	ContainerStorageReady checks if the container is ready
2538	AskChoice will ask a question to ask for a list of strings
2539	AskInt asks the question for a given question and returns it as an int64
2540	AskString asks the user to ask for a string
2541	AskPassword asks the user to enter a password
2542	AskPasswordOnce asks the user to read from the terminal
2543	askQuestion is used to ask a question for a question
2544	readAnswer reads a single line from stdin
2545	profilePost posts a profile
2546	delete a profile
2547	IsRootDiskDevice checks if the device is a root device
2548	GetRootDiskDevice returns the root device and a map of root devices
2549	ForwardedResponse returns a new response for the given request .
2550	ForwardedResponseIfTargetIsRemote returns a response if the target node is remote or not
2551	ForwardedResponseIfContainerIsRemote is used to forward a response to a remote cluster
2552	ForwardedOperationResponse is used to create a new response for the operation .
2553	Done marks the given message as done .
2554	Update updates the progress bar
2555	Warn implements the ProgressRend interface .
2556	UpdateProgress updates the progress bar .
2557	UpdateOp implements the ProgressRenderer interface .
2558	updateFromV6 deletes the current version of the zfs config
2559	localCreateListener creates a local listener
2560	NewStmt creates a new Stmt
2561	Generate writes the statement to buf .
2562	register writes the statement to buf .
2563	sslLXD creates a new LXD server
2564	IsActive returns true if the container is active .
2565	RaftNodeAddress returns the address of the raft node with the given id .
2566	RaftNodeFirst sets the raft node id of the raft node .
2567	RaftNodeAdd adds the given address to the raft node .
2568	RaftNodeDelete deletes the node with the given id .
2569	RaftNodesReplace deletes the given Raft nodes .
2570	initCGroup initializes the cgroup flags
2571	sqliteDirectAccess enables access to the given SQLite connection .
2572	ContainerGet returns a container by name
2573	ContainerID gets the container ID of a given container .
2574	ContainerExists checks if a container exists
2575	ContainsFields returns true if the mapping contains the given fields .
2576	FieldByName returns a single field by name .
2577	FieldColumnName returns the column name of a field .
2578	FilterFieldByName returns a field by name .
2579	ColumnFields returns a list of fields that match the given names .
2580	ScalarFields returns a list of fields for the mapping .
2581	RefFields returns a list of fields that match the mapping .
2582	Column returns the name of the field .
2583	ZeroValue returns the zero value of the field .
2584	FieldColumns returns a comma separated list of fields .
2585	FieldArgs returns a comma separated string of fields .
2586	FieldParams returns a comma separated string of fields .
2587	FieldCriteria returns a comma separated string of fields
2588	initDataClusterApply applies the config to the container server
2589	JsonFormatEx returns a FormatFunc representation of the record .
2590	formatLogfmtValue returns the logfmt value .
2591	ResolveTarget returns the address of a member
2592	Write implements io . Writer
2593	updateNodeVersion updates the node version .
2594	selectNodesVersions retrieves all nodes in the database .
2595	GetArchitectures returns a list of architecture architectures .
2596	RuntimeLiblxcVersionAtLeast returns true if the given version is compatible with the runtime lxc version .
2597	GetExecPath returns the executable executable path
2598	Connect connects to the LXD server .
2599	ConnectIfContainerIsRemote connects to a container with the given name .
2600	ConnectIfVolumeIsRemote connects to the given volume with the given volume name and cert .
2601	SetupTrust establishes a trust connection to the target cluster
2602	GetStoragePools returns a list of available storage pools
2603	GetStoragePool retrieves a storage pool by name .
2604	CreateStoragePool creates a new storage pool
2605	Update a storage pool
2606	Delete a storage pool
2607	GetStoragePoolResources retrieves the resources associated with the given name .
2608	initDirs initializes the directories
2609	Config returns the current node config .
2610	UpdateConfig updates the node s config .
2611	Config returns the current config .
2612	UpdateConfig updates the config .
2613	storagePoolClusterConfigForEtag returns a shallow copy of the storage pool config .
2614	GetEvents retrieves the event listener
2615	LogfmtFormat returns a log . Format suitable for logging .
2616	StorageVolumeNodeAddresses returns a list of node addresses associated with a given pool .
2617	StorageVolumeNodeGet returns the node name of a volume .
2618	StorageVolumeConfigGet returns the volume config for a given volume .
2619	StorageVolumeDescriptionGet gets the description of a volume
2620	StorageVolumeIsAvailable checks if a storage volume is available
2621	StorageVolumeDescriptionUpdate updates the description of a volume .
2622	StorageVolumeConfigAdd inserts a new volume config into the database .
2623	StorageVolumeConfigClear clears the config data for a given volume .
2624	storageVolumeIDsGet returns a list of storage ids for a given volume type .
2625	StorageVolumeCleanupImages deletes all the images in the cluster .
2626	StorageVolumeMoveToLVMThinPoolName deletes the thinpool_name
2627	L prints the given format .
2628	code returns the source code
2629	Pretty marshals input to a string
2630	NetworkPublicKey returns the public key of the endpoint .
2631	NetworkPrivateKey returns the private key .
2632	NetworkCert returns the network certificate .
2633	NetworkAddress returns the address of the listener .
2634	NetworkUpdateAddress updates the address of the endpoint .
2635	NetworkUpdateCert updates the cert for the endpoint
2636	networkCreateListener creates a new net . Listener
2637	Accept implements net . Listener .
2638	Config updates the TLS configuration .
2639	IsOffline returns true if the node is offline .
2640	NodeByAddress returns the node with the given address .
2641	NodePendingByAddress returns the node with the given address .
2642	NodeByName retrieves a node by name .
2643	NodeName returns the name of the node .
2644	NodeAddress returns the address of the node .
2645	NodeIsOutdated checks if the node exists in the cluster .
2646	NodesCount returns the number of nodes in the cluster .
2647	NodeRename renames a node .
2648	nodes returns a list of nodes in the cluster .
2649	NodeAdd adds a node .
2650	NodePending sets the status of a node .
2651	NodeUpdate updates a node .
2652	NodeRemove deletes node with given id .
2653	NodeHeartbeat updates the node heartbeat with the given address .
2654	NodeIsEmpty checks if the node is empty
2655	NodeClear clears all containers in the cluster .
2656	NodeOfflineThreshold returns the number of node offline connections
2657	NodeUpdateVersion updates the node with the given id .
2658	Transaction starts a transaction .
2659	rollback rolls back a transaction .
2660	ProfileURIs returns the URIs for the given profile .
2661	ProfileGet gets a profile by name
2662	ProfileExists checks if a profile exists
2663	ProfileConfigRef returns the profile config referenced by a profile filter .
2664	ProfileUsedByRef returns the profile used by the given filter .
2665	ProfileCreate creates a new profile .
2666	ProfileRename renames a profile .
2667	ProfileDelete deletes a profile .
2668	ServerTLSConfig creates a TLS config based on the given cert .
2669	NetworkInterfaceAddress returns the IP address of the network interface .
2670	IsAddressCovered checks if two addresses are the same .
2671	SelectObjects executes the given statement using the given arguments .
2672	DeleteObject deletes an object with the given id .
2673	loop runs the task .
2674	IsTerminal returns true if the given file descriptor is a terminal .
2675	socketUnixListen creates a unix socket listening on the given path .
2676	socketUnixRemoveStale removes the unix socket from the given path .
2677	socketUnixSetPermissions sets the permissions on the local socket
2678	socketUnixSetOwnership sets the ownership of the local socket
2679	cephOSDPoolExists checks if the specified pool exists
2680	cephOSDPoolDestroy destroys the specified pool
2681	cephRBDVolumeExists checks if a volume exists
2682	cephRBDSnapshotProtect is used to protect a volume
2683	cephRBDCloneCreate creates a clone of the cluster
2684	cephRBDSnapshotListClones returns a list of clones that are currently attached to the cluster .
2685	cephRBDVolumeMarkDeleted marks the volume as deleted
2686	cephRBDVolumeUnmarkDeleted marks the volume as deleted
2687	cephRBDVolumeRename renames a volume
2688	cephRBDVolumeSnapshotRenameRenameRenameRenameRenameRenameRenameRenameRenameRenameRenameRenameRenameRenameRenameRenameRenameRename
2689	cephRBDSnapshotDelete deletes a snapshot
2690	cephRBDVolumeCopy copies an existing volume to a new volume
2691	cephRBDVolumeListSnapshots lists all snapshots for a volume
2692	getRBDSize returns the size of RBDS storage volume
2693	getRBDFilesystem returns the filesystem filesystem based on the volume config
2694	copyWithoutSnapshotsFull copies the source container to target container .
2695	copyWithoutSnapshotsSparse creates a sparse copy of the source container
2696	GetConfigCmd returns a command to get config settings
2697	SetConfigCmd returns a cobra command for setting config
2698	NewSharder creates a new sharder
2699	NewRouter creates a new router
2700	renewUserCredentials renews user credentials
2701	NewLocalClient creates a new client
2702	AddSpanToAnyExisting is like AddSpanToAnyExisting but returns a new span .
2703	InstallJaegerTracerFromEnv installs jaeger tracer from environment variables .
2704	UnaryClientInterceptor returns a new unary client interceptors
2705	StreamClientInterceptor returns a new StreamClientInterceptor
2706	UnaryServerInterceptor returns a new unary server interceptor for OpenTracing .
2707	StreamServerInterceptor returns a new grpc . StreamServerInterceptor
2708	CloseAndReportTraces closes all traces and closes them
2709	newWriter creates a new Writer
2710	For implements ConstantBackoff .
2711	Log implements Logger interface
2712	Format implements the Formatter interface .
2713	NewGRPCLogWriter creates a new logger
2714	Read reads the configuration from the config file .
2715	Write writes the config to disk
2716	Read implements the io . Reader interface .
2717	Write writes a protobuf message to the stream .
2718	NewReadWriter returns a new ReadWriter .
2719	RunGitHookServer starts a git hook server
2720	newLoggingPipe creates a new logging pipe
2721	Read implements the io . Reader interface .
2722	Write implements the io . Writer interface .
2723	Accept returns a new connection
2724	Close the listener
2725	errorf creates a new hash tree error .
2726	InitWithKube creates a new ServiceEnv with the given configuration .
2727	GetEtcdClient returns a new etcd client
2728	GetKubeClient returns kubernetes client
2729	NewHasher creates a new instance of Hasher
2730	HashJob hashes a job ID
2731	HashPipeline hashes a pipeline name
2732	Status returns a list of worker status
2733	Cancel all workers
2734	Conns returns the grpc client connections
2735	Clients returns a list of registered clients
2736	NewClient creates a new GRPC client
2737	RunFixedArgs returns a function that runs numArgs .
2738	RunBoundedArgs returns a function that logs arguments in the cobra . Command .
2739	Run creates a cobra command
2740	ErrorAndExit is the same as ErrorAndExit except that it exits and exits .
2741	ParseCommit parses a commit into a pfs . Commit struct
2742	ParseBranch parses a branch from a git branch .
2743	ParseFile parses a file into a pfs . File struct
2744	Set implements the flag . Value interface .
2745	SetDocsUsage sets the documentation for the command
2746	makeCronCommits creates commits and deletes commits .
2747	Writer creates a new writer
2748	Reader returns an io . Reader
2749	Delete deletes an object
2750	Walk invokes the Trace method .
2751	Exists checks if the object exists
2752	GetBlock returns a new block with the given hash .
2753	Health implements the Health interface .
2754	split splits the given path into the directory and returns the cleaned directory .
2755	ValidatePath validates a path
2756	MatchDatum checks if the data file matches the given data
2757	NewCacheServer creates a new cache server
2758	authorizePipelineOp authorizes pipeline operation
2759	sudo runs the superuser
2760	setPipelineDefaults sets default values for the pipeline
2761	incrementGCGeneration increments the GC generation counter .
2762	NewDebugServer creates a new debug server
2763	Health is part of the APIClient interface .
2764	newObjBlockAPIServer creates a new BlockAPI server
2765	watchGC watches for GC generation number
2766	splitKey splits a block key into a string .
2767	NewWriter creates a new Writer with the given header .
2768	Write implements the io . Writer interface .
2769	PrintRepoHeader prints the repo header
2770	PrintRepoInfo prints the repo info to w .
2771	PrintDetailedRepoInfo prints a repo info .
2772	PrintBranch writes a branch to w .
2773	PrintCommitInfo prints the commit info .
2774	PrintDetailedCommitInfo prints a printableCommitInfo
2775	PrintFileInfo prints the file info to w .
2776	PrintDetailedFileInfo prints the file info .
2777	Add adds a string to a string
2778	RetryNotify executes the operation with the given backoff .
2779	Get retrieves an object from the cache .
2780	Delete removes an entry from the cache .
2781	PrintJobInfo prints the job info to w .
2782	PrintPipelineInfo prints the pipeline info .
2783	PrintWorkerStatus prints the worker status to w .
2784	PrintDetailedJobInfo prints information about a job .
2785	PrintDetailedPipelineInfo prints the pipeline info .
2786	PrintDatumInfo prints the datum info to w .
2787	PrintDetailedDatumInfo prints information about a datum .
2788	PrintFile prints a single file
2789	ShorthandInput returns a human - readable form of a pfsclient . Input .
2790	Retrieve retrieves credentials from vault
2791	IsExpired returns true if credentials are expired
2792	NewBranch creates a new branch .
2793	NewCommit creates a new instance of pfs . Commit
2794	NewCommitProvenance creates a new CommitProvenance
2795	NewFile creates a new pfs . File
2796	CreateRepo creates a new Repository
2797	InspectRepo returns information about a repository .
2798	ListRepo lists repositories
2799	DeleteRepo deletes a repository
2800	BuildCommit creates a new commit object
2801	StartCommitParent starts a new commit
2802	FinishCommit is part of the PFSAPI interface .
2803	InspectCommit returns information about a commit
2804	BlockCommit returns the commit info for the given commit .
2805	ListCommit lists commits
2806	ListCommitF is part of the PFS API interface .
2807	ListCommitByRepo lists all commits in given repository
2808	CreateBranch creates a new branch
2809	InspectBranch retrieves information about a branch .
2810	ListBranch lists branches .
2811	SetBranch creates a new branch
2812	DeleteBranch deletes a branch .
2813	DeleteCommit deletes a commit
2814	FlushCommit is part of the PFS API .
2815	FlushCommitF flushes the given commits .
2816	FlushCommitAll flushes all commits in the given commits .
2817	SubscribeCommit creates a new CommitInfoStream
2818	SubscribeCommitF subscribes to the given function .
2819	PutObjectAsync is part of the APIClient interface .
2820	PutObject is part of the APIClient interface .
2821	PutObjectSplit is part of the APIClient interface .
2822	GetObject retrieves the object with the given hash .
2823	GetObjectReader retrieves an object from the given hash .
2824	GetObjects retrieves objects from the given hashes .
2825	TagObject tags an object with the given tags .
2826	ListObject is part of the APIClient interface .
2827	InspectObject retrieves the object with the given hash .
2828	GetTag retrieves a tag by name .
2829	GetTagReader is part of the APIClient interface .
2830	ListTag is part of the APIClient interface .
2831	Compact compacts objects
2832	NewPutFileClient creates a new PutFileClient
2833	PutFileOverwrite writes the contents of a file to the server .
2834	Close is part of the Client interface .
2835	CopyFile copies a file
2836	GetFile retrieves a file from the repository .
2837	GetFileReader is part of the APIClient interface .
2838	GetFileReadSeeker returns an io . ReadSeeker
2839	InspectFile returns a FileInfo for the given path .
2840	ListFile lists all files in the repository .
2841	ListFileHistory lists file history for given commit
2842	ListFileF is part of the PFS API interface .
2843	Walk calls the given WalkFn with the given path .
2844	DeleteFile deletes a file
2845	Write implements the PutObjectWriteCloser interface .
2846	Close implements the PutObjectWriteCloser interface .
2847	PrettyPrintVersionNoAdditional returns a pretty printed version of the version .
2848	Recursive block quotes
2849	errMissingField is used to create a missing field
2850	validateFields returns an error if any of the fields in the request is unknown .
2851	putConfig writes the given config to the backend .
2852	getConfig retrieves the configuration from the storage .
2853	Serve runs the given server options .
2854	NewPuller creates a new puller
2855	PullTree pulls objects from a hash tree
2856	Push pushes a commit to the given commit .
2857	PushObj pushes an object to the given commit .
2858	PushFile pushes a file to the given io . Writer
2859	Dump dumps debug information
2860	Profile sends a profile to the provided writer .
2861	Binary sends a binary representation of the binary representation of the binary .
2862	RegisterCacheStats registers the cache stats
2863	wait waits for n times .
2864	RunWorkload runs the worker
2865	createRepo creates a new repo and starts it .
2866	advanceCommit will advance the commit to the next commit .
2867	RandString returns a random string
2868	NewReader returns a new io . Reader with the given number of bytes .
2869	iterDir iterates over all the keys in the given path .
2870	FPize returns the size of the hash tree .
2871	Diff performs a deep diff of a hash tree
2872	Serialize writes the database hash tree to the given writer .
2873	Deserialize reads the database hash tree from the database .
2874	Copy returns a copy of the hash tree .
2875	Destroy closes the database hash tree .
2876	PutFileOverwrite implements the HashTree interface .
2877	PutDirHeaderFooter adds a file header to the hash tree .
2878	PutFileHeaderFooter implements the HashTree interface .
2879	deleteDir is used to delete a directory
2880	NewReader returns a new Reader reading from r .
2881	Read reads the next node .
2882	NewWriter returns a new Writer .
2883	Write implements the io . Writer interface .
2884	Copy implements io . Reader
2885	Index returns the serialized index entries .
2886	GetRangeFromIndex returns the range of keys in the given index .
2887	NewFilter creates a new filter that matches numTrees .
2888	PathToTree maps the given path to numTrees .
2889	Merge merges a set of nodes into w .
2890	Hash hashes the contents of the hash tree .
2891	IsGlob checks if a string is a glob pattern
2892	GlobLiteralPrefix returns the prefix of the given pattern .
2893	GetHashTreeObject returns the hash tree for the given tree
2894	GetHashTreeTag returns the hash tree for the given tag .
2895	PutHashTree creates a hash tree with the given tags .
2896	NewChildCursor creates a new child cursor
2897	Next moves the cursor to the next node .
2898	NewOrdered creates a new Ordered node .
2899	MkdirAll creates a new directory
2900	PutDir adds a directory to the ordered list .
2901	Serialize writes the tree to the given writer .
2902	NewUnordered creates a new unordered tree .
2903	Ordered creates a new ordered list of unordered files
2904	revokeUserCredentials revoke user credentials
2905	NewAPIServer creates a new APIServer
2906	String returns a string representation of a version
2907	Get the pipeline info
2908	removeStr removes s from ss .
2909	PublicCertToPEM returns a PEM - encoded certificate
2910	GenerateSelfSignedCert generates a new certificate for the given address .
2911	ActivateCmd creates a new cobra command
2912	DeactivateCmd returns an instance of deactivate command
2913	LoginCmd returns a cobra command for login
2914	LogoutCmd returns a command to logout
2915	WhoamiCmd returns a cobra command
2916	CheckCmd returns a cobra command for check command
2917	GetCmd returns the cobra command for get command
2918	SetScopeCmd returns the set scope command
2919	ListAdminsCmd returns a command to list admins
2920	ModifyAdminsCmd returns an instance of ModifyAdmins command
2921	GetAuthTokenCmd returns a command to get auth token
2922	UseAuthTokenCmd returns a cobra command for use - auth token
2923	Cmds returns a list of cobra command
2924	ParseScope parses a string into a Scope .
2925	IsErrNotActivated returns true if the given error is a NotActivated error .
2926	IsErrPartiallyActivated returns true if the given error is a partial activation error .
2927	IsErrNotSignedIn checks if the given error is an ErrNotSignedIn .
2928	IsErrBadToken returns true if the given error is an ErrBadToken .
2929	IsErrNotAuthorized checks if the given error is a NotAuthorized message .
2930	IsErrInvalidPrincipal returns true if the error is invalid .
2931	IsErrTooShortTTL returns true if the given error is too short than the given TTL
2932	NewDatumFactory creates a DatumFactory
2933	NewCollection creates a new collection .
2934	Path returns the full path to the collection .
2935	getIndexPath returns the path to the given value .
2936	getMultiIndexPaths returns the index paths for the given field .
2937	Upsert adds a value to the collection .
2938	get is used to get a single value
2939	List implements the Collection interface .
2940	Watch implements the watcher interface .
2941	WatchByIndex returns a watcher for the given index .
2942	WatchOne returns a watcher for the given key .
2943	WatchOneF watches for the given key .
2944	Get returns a reader for the given key .
2945	Keys returns a sorted list of sorted keys .
2946	Clear removes all keys from the cache
2947	NewHTTPServer creates a new server
2948	NewDeployServer creates a new deploy server
2949	Export exports assets to the given writer
2950	Import imports an image from an io . Reader
2951	DatumTagPrefix returns the prefix of the datum tag .
2952	NewPFSInput creates a new pfs . Input
2953	NewPFSInputOpts creates a new pfs . Input
2954	NewJobInput creates a new JobInput struct
2955	NewPipelineInput creates a new pipeline input
2956	CreateJob creates a new job
2957	ListJob lists all jobs
2958	ListJobF is part of the APIClient interface .
2959	FlushJob flushes the given commits .
2960	FlushJobAll flushes all the commits in the given commits .
2961	DeleteJob deletes a job
2962	StopJob stops a running job
2963	RestartDatum restarts a datumapoint
2964	ListDatum is part of the APIClient interface .
2965	ListDatumF is part of the APIClient interface .
2966	InspectDatum is part of the APIClient interface .
2967	Next moves the cursor to the next message .
2968	InspectPipeline retrieves information about the pipeline .
2969	ListPipeline is part of the APIClient interface .
2970	DeletePipeline deletes a pipeline
2971	StartPipeline creates a new pipeline
2972	StopPipeline stops the pipeline .
2973	RerunPipeline removes the pipeline .
2974	CreatePipelineService creates a new service
2975	GetDatumTotalTime returns the total time of the process stats
2976	Mount mounts a mountpoint
2977	NewBufPool creates a new BufPool .
2978	StorageRootFromEnv returns the storage root of the environment variable
2979	BlockPathFromEnv returns the path to the block under the given block .
2980	NewGoogleClient creates a new Google Cloud Storage client .
2981	NewGoogleClientFromSecret creates a new Google Cloud Storage client from a secret file .
2982	NewGoogleClientFromEnv creates a new Google Cloud Storage client from the environment .
2983	NewMicrosoftClientFromSecret creates a new Microsoft client from a secret file .
2984	NewMicrosoftClientFromEnv creates a new Microsoft client from the environment variables .
2985	NewMinioClientFromSecret creates a minio client from a secret file .
2986	NewMinioClientFromEnv creates a new minio client from the given environment variables .
2987	NewAmazonClientFromSecret creates a new client from a secret file
2988	NewAmazonClientFromEnv creates a new client from an environment variable .
2989	NewClientFromURLAndSecret creates a new client from an ObjectStoreURL
2990	ParseURL parses a URL string into an ObjectStoreURL .
2991	NewClientFromEnv creates a new client based on the environment variable
2992	NewExponentialBackOffConfig creates an exponential backoff .
2993	Close closes the underlying reader
2994	Close closes the writer
2995	IsRetryable returns true if the error is retryable
2996	RunStdin runs the command with the given stdin .
2997	RunIODirPath runs the command with the given arguments
2998	NewAuthServer creates a new auth server
2999	expiredClusterAdminCheck checks if the user has a Pachyd Enterprise token .
3000	getOneTimePassword returns the OTP password for the given username and expiration time .
3001	Hash a token
3002	getAuthToken extracts the token from the context
3003	canonicalizeSubjects takes a list of subjects and canonicalizes them .
3004	Matches checks if the actual string matches the expected match .
3005	OneOfMatches tests if the actual string matches exactly one of the actual strings .
3006	Equal checks if two values are equal .
3007	NotEqual checks if two objects are equal .
3008	oneOfEquals returns true if two slices are equal .
3009	NoneEquals checks if two values are equal .
3010	NoError fails if the given error is not nil .
3011	NoErrorWithinT is like NoError but panics on error .
3012	NoErrorWithinTRetry is the same as NoErrorWithinTRetry but with the given duration .
3013	YesError logs an error if the given error is not nil .
3014	NotNil asserts that the given object is not nil .
3015	Nil panics if the given object is not nil .
3016	False asserts that the given value is false .
3017	NewSTM creates a new STM .
3018	NewDryrunSTM is like NewDryrun but returns an error .
3019	newSTMRepeatable creates a new STM operation .
3020	newSTMSerializable creates a new stm serializable .
3021	newSTMReadCommitted creates a new STM operation .
3022	commit closes the stm .
3023	Pipelines returns a collection of pipeline collections
3024	Jobs returns a new instance of EtcdJob
3025	NewTicker creates a new ticker
3026	nodeToMap converts an etcd node to a map
3027	ServiceAccount returns a service account object
3028	ClusterRole returns a ClusterRole
3029	RoleBinding returns the role binding
3030	Gets environment variables
3031	PachdService returns a Service .
3032	GithookService returns the Kubernetes service
3033	EtcdDeployment creates an etcd deployment
3034	EtcdStorageClass returns the storage class type .
3035	EtcdVolume creates a PersistentVolume
3036	EtcdNodePortService returns a new etcd service
3037	EtcdHeadlessService creates an instance of Etcd .
3038	EtcdStatefulSet creates an Etcd stateful set
3039	DashDeployment creates a Deployment
3040	DashService returns a service .
3041	WriteSecret writes a secret to an object .
3042	GoogleSecret creates a Google Cloud Storage secret .
3043	WriteDashboardAssets writes the AssetOpts to the encoder .
3044	WriteLocalAssets writes the local assets to the given path .
3045	WriteCustomAssets - writes custom assets
3046	WriteAmazonAssets writes the Amazon S3 assets to the specified bucket .
3047	WriteGoogleAssets - writes the assets to the specified bucket .
3048	WriteMicrosoftAssets writes the assets to the container
3049	Images returns a list of images for the asset
3050	AddRegistry adds the registry to the registry
3051	withCanonicalRandomizationFactor sets the RandomizationFactor to use .
3052	Reset implements the Backoff interface .
3053	incrementCurrentInterval updates the current interval based on the current value .
3054	NewBlockAPIServer returns a new instance of BlockAPIServer
3055	LocalStorage creates a local storage client
3056	deleteJob deletes a job
3057	writeXML is used to write an XML response
3058	clean1_7HashtreePath cleans up the given path
3059	NewFromAddress creates a new client from the given address .
3060	getUserMachineAddrAndOpts returns the user machine address and options for the user agent .
3061	NewInCluster creates a new instance of an APIClient
3062	Close closes the API connection
3063	DeleteAll deletes all services
3064	SetMaxConcurrentStreams sets the maximum number of concurrent streams .
3065	WithCtx returns a copy of the APIClient with the provided context .
3066	NewDLock creates a new instance of Lockerock
3067	DatumID returns a unique id for the datum
3068	runUserErrorHandlingCode runs the user error handling code .
3069	HashDatum returns a sha256 hash of data
3070	HashDatum15 computes the SHA256 hash of data
3071	Status is part of the APIServer interface .
3072	Cancel cancels a request
3073	mergeStats merges two process stats .
3074	mergeChunk merges chunk data into chunk cache .
3075	IsCommitNotFoundErr returns true if the error is a commit not found error .
3076	IsCommitDeletedErr returns true if the given error is a commit deleted .
3077	IsCommitFinishedErr returns true if the error is a commitFinished error .
3078	IsRepoNotFoundErr returns true if the error is a repo not found error .
3079	IsBranchNotFoundErr returns true if the error is a branch not found error .
3080	IsFileNotFoundErr returns true if the error is a file not found error .
3081	Version returns the version of the APIClient .
3082	validateRepoName returns an error if the repo name is invalid .
3083	newDriver creates a new driver
3084	inspectCommit inspects the commit
3085	scratchCommitPrefix returns the prefix of the given commit .
3086	scratchFilePrefix returns the full path prefix for the given file .
3087	getTreeForFile returns the hash tree for the given file .
3088	provenantOnInput returns true if there is any provenant in the input list
3089	nodeToFileInfo converts a node into a FileInfo struct
3090	fileHistory iterates over a file and calls f for each file in the path .
3091	upsertPutFileRecords adds new records for the given file .
3092	ReadRow reads a single row
3093	NewReporter creates a new Reporter
3094	ReportUserAction is used to report the user action .
3095	FinishReportAndFlushUserAction is like FinishReportAndFlushUserAction but returns a function that can be used to report the user action .
3096	Read implements the io . Reader interface .
3097	ActivateCmd returns a cobra . Command for Activate
3098	GetStateCmd returns a command to get state command
3099	Cmds returns a list of cobra command commands
3100	NewConfiguration creates a new configuration object
3101	Repos returns a new RepoInfo
3102	Return a new collection of PFS records
3103	Commits returns a collection of commits
3104	Returns a collection of branches for the given repo
3105	OpenCommits returns a collection of open commits
3106	NewDAG creates a new DAG .
3107	NewNode adds a node to the DAG .
3108	Sorted returns the DAG of the DAG .
3109	Leaves returns all the nodes in the DAG .
3110	Ancestors returns a list of ancestor nodes that match the provided IDs .
3111	Descendants returns the list of nodes in the DAG .
3112	Gather returns the children of the DAG .
3113	NewPortForwarder creates a new instance of PortForwarder
3114	Run starts a port forward
3115	RunForDaemon starts the port forwarder for the specified port .
3116	RunForSAMLACS is like RunForSAMLACS
3117	RunForDashUI starts the dash UI .
3118	RunForDashWebSocket starts the dash web socket for the dashboard
3119	RunForPFS starts the port forwarder for pachd
3120	RunForS3Gateway starts the port forwarder for S3 gateway .
3121	Lock locks the port forwarder
3122	Close stops the port forwarder .
3123	Unmarshal unmarshals the event into val .
3124	UnmarshalPrev unmarshals the previous key to the previous value .
3125	MakeWatcher creates a new watcher
3126	CheckType returns an error if the template is not valid .
3127	NewPool creates a new Pool
3128	Do calls f on each connection .
3129	Closes all connections
3130	buildImage builds a docker image
3131	pushImage pushes a Docker image to the registry
3132	newMinioClient creates minio client
3133	newMinioClientV2 - initializes minio client .
3134	newMinioWriter creates a new minio writer
3135	Close closes the writer
3136	PipelineRepo creates a repository for the pipeline
3137	PipelineRcName returns the pipeline rc name
3138	GetRequestsResourceListFromPipeline gets the resource list from the pipeline
3139	GetLimitsResourceListFromPipeline gets resource list from the pipeline
3140	getNumNodes returns the number of parallel nodes
3141	GetExpectedNumWorkers returns the expected number of expected num nodes in parallelismSpec
3142	GetExpectedNumHashtrees returns the expected number of expected number of hashes
3143	FailPipeline creates a pipeline
3144	JobInput converts PipelineInfo to Pipeline .
3145	PipelineReqFromInfo creates a CreatePipelineRequest from a PipelineInfo
3146	NewPipelineManifestReader creates a new pipelineManifestReader
3147	NextCreatePipelineRequest returns the next CreatePipelineRequest
3148	DescribeSyntaxError takes an error and returns the original error .
3149	UpdateJobState update job state
3150	New returns a new uuid
3151	Code returns the HTTP status code .
3152	NewHTTPError creates a new HTTPError .
3153	NewStorage creates a new storage backend
3154	DeleteAll deletes all objects in the storage
3155	Chunk splits data into chunks
3156	ChunkReader reads data from r .
3157	NewStreamingBytesReader creates a new streaming bytes reader
3158	WriteToStreamingBytesServer writes data to the streaming bytes server
3159	WriteFromStreamingBytesClient reads data from streaming bytes
3160	NewSidecarAPIServer creates a new sidecar API server
3161	NewEnterpriseServer creates a new Enterprise server
3162	validateActivationCode validates the activation code .
3163	Activate activates the given activation code
3164	Deactivate deactivates the ephemeral data
3165	lookExtensions takes a path and returns the full path .
3166	Start starts the process .
3167	CombinedOutput runs the command and returns the combined standard output .
3168	StdinPipe returns an io . WriteCloser that wraps the command s stdin .
3169	StdoutPipe returns an io . ReadCloser that sets the command s stdout pipe .
3170	dedupEnvCase removes duplicate keys from environment variables .
3171	InputName returns the name of the input input .
3172	SortInput recursively sorts the inputs
3173	InputBranches returns a list of all branch branches .
3174	ValidateGitCloneURL validates the given URL .
3175	containsEmpty checks if a slice contains empty strings
3176	NewAPIServer creates a new API server
3177	Goo converts a timestamp to a human - readable string .
3178	TimeDifference returns the time difference between two timestamps .
3179	Duration converts a duration to a human readable string .
3180	InspectCluster returns cluster information
3181	Extract - extracts operations from the admin API .
3182	ExtractAll returns all operations in the cluster .
3183	ExtractWriter is a wrapper around the APIClient interface .
3184	ExtractURL extracts a structured protobuf message from the given URL
3185	ExtractPipeline is part of the Admin API .
3186	Restore restarts operations
3187	RestoreReader restarts a restore operation
3188	RestoreFrom is part of the admin client
3189	RestoreURL restarts a restore
3190	IgnoreTypes is an option that accepts a list of types .
3191	AppendEllipsis implements the TextList interface .
3192	IsType checks if t is a type .
3193	NameOf returns the name of v .
3194	PointerOf returns a pointer to a pointer
3195	String returns a string representation of EditScript .
3196	stats returns statistics for the EditScript .
3197	connect adds the path to the path .
3198	EquateNaNs returns cmp . Options that are equal to NaNs
3199	Index returns the current PathStep .
3200	Key returns the index of the slice .
3201	String returns the string representation of the diff .
3202	FormatType formats reflect . Type
3203	formatMapKey formats a map key
3204	formatString returns a quoted string with quoted quotes .
3205	formatHex converts a uint64 to a hex string .
3206	formatPointer formats the pointer to a human - readable string .
3207	Visit adds a pointer to the map
3208	retrieveUnexportedField returns the unmodified value of v .
3209	insert inserts a new field tree .
3210	matchPrefix returns true if the field tree matches the given path .
3211	canonicalName returns the names of the named field .
3212	FilterPath returns an Option that applies a filter function to the given function .
3213	normalizeOption normalizes the given Option .
3214	flattenOptions flattens src to destination .
3215	CanFormatDiffSlice returns true if the value is valid .
3216	formatASCII converts a string to a string .
3217	coalesceAdjacentEdits coalesces two edits together .
3218	SortKeys sorts the keys in vs .
3219	FormatDiff returns a text - representation of the diff .
3220	coalesceAdjacentRecords takes a reportRecord and returns the diffStats .
3221	Diff returns the difference of two values .
3222	statelessCompare implements stateless . StatelessCompare .
3223	sanitizeValue sanitizes a reflect . Value .
3224	Check checks that the given path is in the list of paths .
3225	makeAddressable creates a new reflect . Value .
3226	Marshal implements the Visitor interface for Field .
3227	String returns the string representation of the field .
3228	Set sets the tag .
3229	Inject is part of the TextMapWriter interface .
3230	Extract implements the Extractor interface
3231	ToLogRecord converts the LogData to a LogRecord .
3232	New creates a new MockTracer
3233	StartSpan starts a new span
3234	RegisterInjector registers an injector for the given format .
3235	RegisterExtractor registers a new extractor for the given format .
3236	Inject injects a new MockSpanContext
3237	Extract is a mock
3238	ContextWithSpan returns a new context with the given span .
3239	Set adds a uint32 value to the span .
3240	Set adds a uint16 value to the span .
3241	Set sets a bool value
3242	SetString implements opentracing . Span interface
3243	EmitString emits a mock value
3244	EmitLazyLogger implements the MockKeyValue interface
3245	RunAPIChecks runs the APIChecks suite
3246	CheckBaggageValues returns an APICheckOption that can be used to set the baggage values .
3247	CheckExtract returns an APICheckOption that can be used to check whether or not .
3248	CheckInject specifies whether the check should be injected .
3249	CheckEverything returns an APICheckOption that can be used to check the API
3250	UseProbe sets the probe to use .
3251	WithBaggageItem creates a new mock span context
3252	Tags returns the tags of the span .
3253	Tag returns the value associated with the span .
3254	Logs returns a copy of this span .
3255	Context returns the span context
3256	SetTag adds a tag to the span context
3257	SetBaggageItem adds a baggage item to the span context
3258	BaggageItem returns the value associated with the span .
3259	Finish records the span .
3260	FinishWithOptions implements the Span interface .
3261	String returns a string representation of the MockSpan
3262	LogFields is part of the span . Span interface .
3263	logFieldsWithTimestamp creates a log record with the given timestamp .
3264	LogKV logs a single key value
3265	LogEvent logs an event
3266	LogEventWithPayload logs an event with the given payload .
3267	SetOperationName sets the operation name
3268	registersDirPath returns the directory path to the system registry
3269	loadAndMergeConfig loads a registry configuration from the given directory .
3270	ParseReference parses a reference to an ImageReference .
3271	NewReference creates a new OpenShift reference from an image reference
3272	CheckAuth checks if credentials are valid
3273	doHTTP performs an HTTP request
3274	detectPropertiesHelper tries to detect the properties of the docker client
3275	detectProperties is a helper function that tries to detect a Docker container .
3276	getExtensionsSignatures retrieves the signature signatures for the given manifest .
3277	NewTransport creates a new http . Transport
3278	readRegistryConf reads the config from the registry
3279	GetRegistries returns a list of registered registries
3280	GetInsecureRegistries returns a list of insecure registries
3281	RegistryConfPath returns the path to the system registries configuration
3282	NewOptionalBool creates a new OptionalBool
3283	changeState changes the state of the current policy context .
3284	Destroy destroys the policy context
3285	policyIdentityLogName returns the log name for the image reference
3286	requirementForImageRef returns the policy requirements for the given image reference
3287	ParseImageName parses an image name .
3288	BlobInfoFromOCI1Descriptor creates a BlobInfo from an OCSP spec
3289	OCI1FromManifest creates an OCI object from a JSON blob
3290	OCI1FromComponents creates an OCI implementation from the OCI spec
3291	newReference creates a new DockerReference .
3292	tagOrDigest returns the digest of the given reference .
3293	updateEmbeddedDockerReference ensures that the manifest has already been overwritten .
3294	isTTY returns true if w is a terminal .
3295	copyUpdatedConfigAndManifest copies the updated config and returns a copy of the updated image .
3296	createProgressBar creates a progress bar
3297	copyConfig copies the config blob into the container .
3298	diffIDComputationGoroutine computes the DiffID of the layer stream .
3299	computeDiffID computes the digest for the given stream .
3300	compressGoroutine copies src to dest .
3301	newDockerClient creates a new docker client
3302	defaultPolicyPath returns the path to the default policy .
3303	NewPolicyFromFile creates a policy from a file .
3304	NewPolicyFromBytes creates a new policy from data .
3305	newPolicyRequirementFromJSON creates a PolicyRequirement from JSON data
3306	newPRSignedBy creates a new instance of PRSignedBy .
3307	newPRSignedByKeyPath creates a new PRSignedBy object with the given keyPath
3308	NewPRSignedByKeyPath creates a new PolicyRequirement with the given keyPath
3309	newPRSignedByKeyData creates a new PRSignedBy object with the given key data .
3310	NewPRSignedByKeyData creates a new PolicyRequirement with the given key data
3311	IsValid returns true if the key type is valid
3312	newPRSignedBaseLayer creates a new instance of PRSignedBaseLayer .
3313	newPolicyReferenceMatchFromJSON creates a PolicyReferenceMatch from JSON data
3314	newPRMExactReference creates a new prmExactReference .
3315	newPRMExactRepository creates a new policy repository .
3316	newImageSource creates a new storage image source .
3317	getBlobAndLayerID returns an io . ReadCloser for the given blob info .
3318	computeID computes the unique ID for a manifest .
3319	PutManifest stores the manifest blob in the registry .
3320	PutSignatures stores the signatures in the storage
3321	newImage creates a new storage image
3322	newImageSource creates a new image source
3323	LoadManifestDescriptor loads the manifest from an image reference
3324	Closes the temporary directory
3325	append adds a string to the set .
3326	isMultiImage returns true if the given image is multi - image type .
3327	Lock the given path .
3328	unlockPath releases the lock for the given path .
3329	view is used to open a database view
3330	update is used to update the database .
3331	uncompressedDigest returns the decompressed digest for the given key .
3332	appendReplacementCandidates adds replacement candidates to the cache .
3333	indexExists checks if the index exists
3334	createSignature creates a signature for the given manifest
3335	ParseReference parses a reference into an ImageReference
3336	NewReference creates a new image reference
3337	getIndex retrieves the index from the reference
3338	LoadManifestDescriptor loads the manifest descriptor from an image reference
3339	blobPath returns the full path to the blob directory .
3340	SignDockerManifest signs the manifest with the given digest .
3341	VerifyDockerManifestSignature verifies the signature of the given unverifiedSignature .
3342	newOpenshiftClient creates a new OpenShift client
3343	doRequest makes a request
3344	getImage retrieves information about an image stream
3345	convertDockerImageReference converts a docker reference to a string representation
3346	ensureImageIsResolved ensures that the image stream has been resolved
3347	newImageDestination creates a new instance of OpenShift imageDestination .
3348	newUntrustedSignature creates a new untrustedSignature .
3349	MarshalJSON marshals the untrustedSignature into a JSON string
3350	UnmarshalJSON implements the json . Unmarshaler interface .
3351	verifyAndExtractSignature verifies that the signature is signed by the given signature .
3352	RewriteReference replaces the given reference with the given prefix .
3353	getV1Registries creates a list of registry entries from the config file
3354	getConfigPath returns the path to the system registry config
3355	GetRegistries returns a list of registered registries
3356	readRegistryConf reads the config from the given path .
3357	Manifest returns the contents of the image .
3358	ConfigUpdate updates the config
3359	parseImageAndDockerReference parses the Docker reference and returns the combined Docker reference and an error .
3360	parseDockerReferences parses two Docker images and returns the same name as a reference .
3361	ListNames returns the names of all registered transports .
3362	NewReference creates a new ImageReference .
3363	signaturePath returns the path to the signature file .
3364	ValidateImageName validates the image name .
3365	SplitPathAndImage splits the image and returns the original image and image name .
3366	ValidateOCIPath validates the OCI path
3367	ValidateScope returns an error if the scope is invalid .
3368	BlobInfoFromSchema2Descriptor creates a BlobInfo from a Schema2Descriptor
3369	Schema2FromManifest creates a Schema2 from a manifest
3370	Schema2FromComponents creates a Schema2 representation of a Schema2 .
3371	SetAuthentication sets the authentication credentials for the given registry
3372	RemoveAuthentication removes authentication from the docker config
3373	RemoveAllAuthentication removes credentials from the system
3374	readJSONFile reads a file from a file
3375	modifyJSON modifies the user s config file .
3376	findAuthentication attempts to find the auth credentials for the given path . If the credentials are found an empty string is returned .
3377	NewDestination creates a new Destination .
3378	AddRepoTags adds repository tags to the repository .
3379	writeLegacyLayerMetadata writes the layer metadata to disk .
3380	sendSymlink creates a symlink
3381	sendBytes sends the given bytes to the destination .
3382	sendFile copies a file into the destination tar file .
3383	Commit closes the destination .
3384	imageMatchesRepo returns true if the given image exists in the registry .
3385	resolveImage attempts to resolve a reference to an image .
3386	Transport returns the image transport .
3387	StringWithinTransport returns a string representation of the storage reference
3388	PolicyConfigurationNamespaces returns the namespaces for the policy reference
3389	GzipDecompressor returns an io . ReadCloser
3390	Bzip2Decompressor returns an io . ReadCloser that returns an io . ReadCloser .
3391	XzDecompressor returns an io . ReadCloser that returns an io . ReadCloser .
3392	DetectCompression detects the decompressor and returns the decompressor and an io . Reader .
3393	newImageDestination creates a new DockerImageDestination .
3394	mountBlob attempts to mount a blob from a repository .
3395	bicTransportScope creates a BICTransportScope from the given reference .
3396	newBICLocationReference creates a new BICLocationReference .
3397	parseBICLocationReference parses a BICLocationReference from a BICLocationReference .
3398	NewSourceFromStream creates a new source from an io . Reader
3399	readTarComponent reads a tar component
3400	ensureCachedDataIsPresent checks if the source is present in the source .
3401	loadTarManifest reads and parses a tar manifest .
3402	Close removes the tar file
3403	newImageDestination creates a new instance of the docker - daemon .
3404	imageLoadGoroutine is used to load an image from a pipe
3405	NewReference creates a new image reference
3406	createOCIRef creates a new OCI reference
3407	createUntarTempDir creates a temp directory from an image reference
3408	unstructivelyPrioritizeReplacementCandidatesWithMax takes a slice of candidates and inserts them into a slice of CandidateWithTime .
3409	newImageDestination creates a new ImageDestination .
3410	resolveExistingPathToFullyExplicit resolves path to absolute path
3411	newImageDestination creates a new imageDestination .
3412	isDirEmpty returns true if the given directory exists .
3413	removeDirContents removes the contents of the given directory
3414	GetRepositoryTags returns a list of tags for the given image reference .
3415	DefaultCache returns the BlobInfoCache for the given system .
3416	uncompressedDigestLocked returns the digest for the given uncompressed digest .
3417	Closes the temporary directory .
3418	PutManifest overwrites the contents of the manifest
3419	Commit writes the image to disk .
3420	tarDirectory copies the contents of src to dst .
3421	ParseStoreReference parses a reference into a storageReference .
3422	chooseDigestFromManifestList returns the digest for the given image .
3423	ChooseManifestInstanceFromManifestList picks an instance from a manifest list .
3424	manifestSchema1FromComponents creates a genericManifest .
3425	manifestDigest returns the digest of the manifest if present otherwise it returns an error .
3426	deleteImage deletes an image .
3427	Schema1FromComponents creates a Schema1 from a list of components .
3428	initialize initializes the Schema1 .
3429	ToSchema2Config converts Schema1 to config
3430	Digest returns the digest of a manifest
3431	MatchesDigest returns true if the digest matches the expected digest .
3432	NormalizedMIMEType returns the normalized MIMEType of a type
3433	FromBlob creates a manifest from a manifest .
3434	NewReference creates a new reference for the given path .
3435	layerPath returns the path to the layer s layer path .
3436	signaturePath returns the path to the signature file .
3437	New creates a new pool
3438	NewFunc creates a new pool .
3439	ProcessTimed adds a job to the pool .
3440	SetSize sets the size of the pool
3441	GetSize returns the number of workers in the pool
3442	TL returns the TL of the rectangle .
3443	BR returns the left corner of the rectangle .
3444	CVBox returns the CvBox2D .
3445	Points returns the points of the box .
3446	FOURCC computes the FOURCC FOURCC
3447	Merge merges two colors together .
3448	Split computes a copy of the image .
3449	AddWeighted adds the weights of src to dst .
3450	And computes the difference between two images .
3451	AndWithMask computes the intersection of src2 .
3452	AndScalar computes the scalar of scalar with the given scalar value .
3453	AndScalarWithMask computes the scalar with the given scalar value .
3454	Or computes the union of two images .
3455	OrWithMask computes the intersection of src2 .
3456	OrScalarar - OrScalar
3457	OrScalarWithMask computes the value of scalar with the given value .
3458	AddWithMask adds src to dst .
3459	AddScalar adds a scalar value to the image .
3460	AddScalarWithMask adds a scalar value to src .
3461	Subtract performs a Subtract with the given sources .
3462	SubtractWithMask subtracts from src to dst
3463	SubScalar subtracts scalar from src to dst
3464	SubScalarWithMask subtracts value from src to dst .
3465	SubScalarRev removes a scalar value from src to dst .
3466	SubScalarWithMaskRev subtracts value from src to dst
3467	AbsDiff computes the difference between two images .
3468	AbsDiffScalar computes the absolute difference between src and dst .
3469	MeanStdDevWithMask returns the mean deviation of src .
3470	CreateSeq creates a new sequence .
3471	Push adds an element to the queue .
3472	Pop removes element from seq .
3473	PushFront inserts element at the end of seq .
3474	PopFront removes element from seq .
3475	GetElemAt returns the element at the given index .
3476	RemoveAt removes the element at the given index .
3477	Delay is an Option that sets the amount of time to wait before sending .
3478	BackOffDelay computes the backoff delay based on n bits .
3479	Error implements the error interface .
3480	Arguments adds arguments to the request
3481	BodyString defines the request body .
3482	BodyBytes defines the request body .
3483	Body sets the request body .
3484	Option adds an option to the request
3485	Header adds a header to the request
3486	Send sends the command and returns the response .
3487	Exec sends the request and decodes it into res .
3488	Next returns the next message
3489	Cancel closes the subscription
3490	FileList lists the contents of a file
3491	Cat executes a command on the given path .
3492	List lists the contents of the given path .
3493	Pin pins a directory
3494	Pins returns a map of pinned pins
3495	Version returns the version and commit string .
3496	SwarmPeers returns a list of connected peers
3497	SwarmConnect connects to a remote address
3498	DagPutOptions creates a DagPutSettings with the given options .
3499	Pin sets the DagPut option .
3500	Kind sets the DagPut option .
3501	Hash sets the hash of the file .
3502	AddDir adds a directory to the shell .
3503	Publish publishes a node
3504	PublishWithDetails publishes the given content hash
3505	ResolveValue returns the value of the PlanValue .
3506	GenerateQuery generates a query based on the query parameters .
3507	EncodeValue encodes a BindVariable to a buffer .
3508	Lex scans the next token
3509	skipStatement skips statements
3510	reset resets the tokenizer
3511	Pre Preview returns the index of the statement .
3512	NewPlanValue builds a PlanValue from an Expr .
3513	StringIn check if a string is in a list of strings
3514	NewTrackedBuffer creates a new TrackedBuffer .
3515	NewStringArena creates a new instance of StringArena .
3516	NewString returns a new string representation of b .
3517	SpaceLeft returns the number of space left in the buffer
3518	ParseStrictDDL parses a DDL statement .
3519	ParseNext parses the next token .
3520	Append appends a SQLNode to a buffer .
3521	ExprFromValue converts a sql . Value to an Expr .
3522	Backtick converts a string to a backtick
3523	NewValue creates a new Value .
3524	String returns the string representation of the Value .
3525	EncodeSQL encodes Value to BinWriter .
3526	EncodeSQL implements the SQL interface for InsertValues .
3527	EncodeSQL encodes the tupleEqualityList .
3528	WalkStatement is part of the ast . Expression interface
3529	WalkSelect normalizes a SQLNode
3530	BindVariablesEqual compares two bind variables .
3531	New creates a new JWTMiddleware
3532	HandlerWithNext checks if the request is valid
3533	FromAuthHeader extracts the token from the Authorization header .
3534	FromParameter returns a TokenExtractor that extracts token from the request
3535	FromFirst returns a TokenExtractor that extracts tokens from the request .
3536	getHelloPacket creates a new RPC packet
3537	NewFloodsubWithProtocols creates a new instance of the FloodSub router .
3538	NewFloodSub creates a new instance of FloodSub .
3539	NewLRUBlacklist creates a new Blacklist .
3540	NewRandomSub creates a new pubsub router
3541	NewGossipSub creates a new GossipSub router
3542	NewPubSub creates a new PubSub server
3543	WithValidateThrottle sets the ThrottleThrottle option .
3544	WithBlacklist sets the blacklist to use .
3545	handleRemoveSubscription is used to cancel a subscription
3546	handleAddSubscription creates a new subscription
3547	announce sends a message to all peers .
3548	notifySubs sends a message to all subscribed channels .
3549	seenMessage returns true if the given message id already exists .
3550	Returns true if the given message is subscribed to
3551	msgID returns a unique identifier for a message
3552	pushMsg is invoked when a message is received .
3553	validate checks if the given message is valid .
3554	validateSingleTopic is used to validate a single message
3555	getValidators returns the set of validators for the given message .
3556	Subscribe to given topic
3557	SubscribeByTopicDescriptor creates subscription for given topic descriptor .
3558	GetTopics returns a list of all topics .
3559	Publish a message
3560	ListPeers returns a list of all known peers .
3561	WithValidatorTimeout sets the timeout for validator
3562	WithValidatorConcurrency sets the maximum number of concurrent goroutines .
3563	RegisterTopicValidator registers a validator .
3564	UnregisterTopicValidator unregisters validator
3565	DefaultMetricPrefix returns a metric prefix with the given name and tags .
3566	MetricWithPrefix creates a metric with the given prefix and tags .
3567	NewClient creates a new client
3568	Call makes an RPC call .
3569	CallPeer makes a RPC call to a remote peer
3570	CallSC makes a RPC call to the subchannel .
3571	ReadResponse reads a response from an ArgReadable .
3572	write headers
3573	ResponseWriter creates a new http . ResponseWriter
3574	ReadHeaders reads a set of headers
3575	NewTCPRawRelay creates a new Relay
3576	NewClient creates a new client
3577	Advertise starts the client .
3578	Handle handles incoming request .
3579	Start starts the server
3580	Port returns the port of the server
3581	SetStrategy sets the score of all peers .
3582	Add adds a new peer to the list .
3583	GetNew returns the next peer in the list .
3584	Get returns the next peer in the list
3585	Remove removes a peer from the list .
3586	Copy returns a copy of the peer list
3587	Len returns the number of peers in the list .
3588	exists returns the score of a peer with the given hostPort .
3589	getPeerScore returns the score of a peer .
3590	onPeerChange is called when a peer is updated .
3591	updatePeer updates the peer s score .
3592	getConn returns the connection with the given index .
3593	GetConnection returns a connection to the peer .
3594	getConnectionRelay returns the active connection .
3595	canRemove returns true if the peer has been removed .
3596	addConnection adds a connection to the peer .
3597	removeConnection removes a connection from the list .
3598	connectionCloseStateChange is called when a connection is closed .
3599	Connect connects to the remote peer .
3600	BeginCall creates a new outbound call
3601	NumConnections returns the number of connections in the peer .
3602	NumPendingOutbound returns the number of pending outbound connections .
3603	isEphemeralHostPort returns true if the hostPort is ephemeral .
3604	Get returns the value for the given key .
3605	Set sets a single key .
3606	ClearAll clears all keys
3607	NewChannel creates a new channel
3608	Serve starts the ChannelClient .
3609	ListenAndServe starts listening on the given port .
3610	Register adds a handler to the channel .
3611	PeerInfo returns local peer information .
3612	GetSubChannel returns a SubChannel with the given options .
3613	serve listens for incoming connections
3614	Ping sends a ping to the channel
3615	StatsTags returns a set of tags for this channel .
3616	Connect to the channel
3617	ReceiveUpdated is called whenever a peer has been updated
3618	updatePeer is called when a peer is updated .
3619	addConnection adds a connection to the channel
3620	removeClosedConn removes a connection from the channel .
3621	connectionCloseStateChange is called when a connection is closed .
3622	State returns the current state of the channel .
3623	NewReader returns a new instance of Reader .
3624	ReadUint16 from the reader
3625	ReadString reads a string from the reader
3626	ReadLen16String from the reader
3627	Register implements the TChannel interface .
3628	Run runs the behavior
3629	Get returns a new relay timer
3630	Put adds a timer to the pool .
3631	Start starts the timer .
3632	Release releases the timer .
3633	NewLogger creates a new logger with the given fields .
3634	NewTCPFrameRelay creates a new TCP Relay
3635	t tallyTags returns a map of tags for the known tags .
3636	Isolated is used to trigger the isolated peer
3637	Isolated returns true if the subchannel is isolated
3638	Register registers a handler for the given method .
3639	GetHandlers returns all registered handlers
3640	StatsTags returns stats tags for this SubChannel .
3641	registerNewSubChannel registers a new SubChannel with the given serviceName .
3642	get a SubChannel by name
3643	getOrAdd creates a new SubChannel with the given service name .
3644	Discover is used to query a host port
3645	Start starts the server
3646	listen creates a new listener
3647	WriteRequest serializes an HTTP request .
3648	ReadRequest creates an http . Request from the arguments .
3649	NewReadBufferWithSize creates a new ReadBuffer with the given size .
3650	ReadByte implements the io . Reader interface .
3651	ReadBytes reads n bytes from the buffer .
3652	ReadString reads n bytes
3653	ReadUint16 reads a uint16 from the buffer
3654	ReadUint32 reads a uint32 from the buffer
3655	ReadUint64 reads a uint64 from the buffer
3656	ReadUvarint from the buffer
3657	ReadLen8String from the buffer
3658	ReadLen16String from the buffer
3659	FillFrom implements io . ReaderFrom interface .
3660	Wrap implements the ReadBuffer interface .
3661	WriteSingleByte implements the io . Writer interface .
3662	WriteBytes writes the given bytes to the buffer .
3663	WriteUint16 writes a uint16 to the buffer .
3664	WriteUint32 writes a uint32 to the buffer .
3665	WriteUint64 writes a uint64 to the buffer
3666	WriteUvarint writes a uint64 to the buffer .
3667	WriteString writes a string to the buffer .
3668	WriteLen8String writes a string to the buffer .
3669	WriteLen16String writes a string to the buffer .
3670	DeferByte returns the next byte in the buffer .
3671	DeferBytes returns a BytesRef that writes to the buffer .
3672	FlushTo flushes the buffer to the given writer .
3673	Reset resets the contents of the buffer .
3674	Wrap implements the io . Writer interface .
3675	Update updates the value of the uint16 reference
3676	Update updates the value of the uint32 reference
3677	Update updates the value of the uint64
3678	Update updates the contents of b .
3679	UpdateString updates a string value
3680	ArgReader returns an argument reader .
3681	finish updates the checksum .
3682	newWritableChunk creates a new writable chunk .
3683	writeAsFits adds the given bytes to the chunk .
3684	newFragmentingWriter returns a new fragmentingWriter .
3685	ArgWriter is part of the Writer interface .
3686	BeginArgument is part of the Writer interface .
3687	Write implements io . Writer interface .
3688	Flush flushes the current chunk .
3689	Close implements the io . Writer interface .
3690	handleCallRes handles a call frame
3691	Arg2Reader returns an ArgReader for the call .
3692	handleError processes an error frame
3693	doneReading is called when a response is received .
3694	Creates a new fragment .
3695	Flush the fragment .
3696	failure is used to shutdown the writer
3697	arg1Reader returns an argReader .
3698	arg2Reader returns an argReader .
3699	arg3Reader returns an ArgReader that returns an ArgReader .
3700	argReader returns a new argReader .
3701	RecvNextFragment reads the next fragment and returns the next fragment .
3702	releasePreviousFragment releases the previous fragment .
3703	failed is called when a request has been completed .
3704	ParseInboundFragment parses an inbound fragment into a readable fragment .
3705	NewContext creates a new TChannel .
3706	WithHeaders returns a new context with the given headers
3707	healthCheck performs a health check .
3708	SetTimeout sets the timeout
3709	AddHeader adds a new header to the context
3710	SetHeaders sets the headers of the request
3711	SetConnectTimeout sets the connection timeout
3712	SetRetryOptions sets the retry options
3713	SetTimeoutPerAttempt sets the timeoutPerAttempt
3714	SetParentContext sets the parent context
3715	Build creates a ContextWithHeaders
3716	overrideHeaders overrides the default set of options .
3717	Read implements the io . Reader interface .
3718	ReadJSON reads the next argument from the argument
3719	NewArgWriter creates a new ArgWriteHelper
3720	Write implements the io . Writer interface .
3721	WriteJSON writes data to writer
3722	Register registers a new http . HandlerFunc .
3723	Count returns the number of items in the list
3724	Get retrieves a relay item by id .
3725	Add adds a relay item to the list .
3726	Entomb adds a relay item to the list .
3727	NewRelayer creates a new Relayer
3728	Relay implements the Relay interface .
3729	Receive sends a frame to the server .
3730	handleNonCallReq handles a non - call request
3731	addRelayItem creates a new relay item
3732	failRelayItem attempts to fail the given relay item .
3733	WriteStruct writes a Thrift . TStruct to the writer .
3734	ReadStruct reads a Thrift . TStruct from the reader .
3735	EnsureEmpty returns an error if the stream is empty .
3736	NewServer creates a new Server
3737	Advertise activates a hyperbahn
3738	handleCallReqContinue handles a call request
3739	dispatchInbound processes an incoming call
3740	CallOptions returns the CallOptions for the InboundCall .
3741	Response returns the response .
3742	Sends an error to the call .
3743	SetApplicationError sets the application error .
3744	Arg2Writer returns a new ArgWriter
3745	doneSending is used to cancel the span .
3746	newState creates a new State from Thrift .
3747	rootType returns the root type for the given thrift type .
3748	checkInclude checks whether the given Thrift type is a member of the type .
3749	isResultPointer returns true if the thrift type is a pointer pointer pointer .
3750	goType returns the name of the Go type .
3751	goTypePrefix returns the Go type name for the given thrift type .
3752	NewContext creates a new context .
3753	newIncomingContext creates a new context .
3754	CurrentCall returns the current call .
3755	New returns a new rand . rand . Rand
3756	Health implements the metaHandler interface .
3757	Headers returns the request headers .
3758	ResponseHeaders returns the response headers .
3759	SetResponseHeaders sets the response headers .
3760	Child returns a child context with the current context .
3761	Wrap wraps a context . ContextWithHeaders .
3762	WrapWithHeaders returns a new context with the given headers
3763	WithoutHeaders returns a new context with no headers set
3764	Notify implements the Notifier interface .
3765	Forward a single frame
3766	Receive a single frame
3767	Receive a single frame .
3768	Shutdown the message exchange .
3769	newMessageExchangeSet creates a new messageExchangeSet .
3770	add an existing messageExchange
3771	Create a new message exchange
3772	deleteExchange deletes an existing exchange from the set .
3773	Remove an existing exchange from the set .
3774	expireExchange removes an existing exchange from the set .
3775	Forward a peer frame
3776	copyExchanges returns a copy of the set of exchanges .
3777	Stops all exchanges .
3778	NewFrame creates a new frame
3779	ReadBody reads a single frame
3780	WriteOut writes the frame to w .
3781	CanRetry returns true if the given error is retryable
3782	HasRetries returns true if the given error is retried
3783	SinceStart returns the duration since the start of the request
3784	AddSelectedPeer adds a new selected peer
3785	RunWithRetry runs the given function with the retry options
3786	ChecksumSize returns the size of the checksum type .
3787	New returns a new Checkum instance .
3788	ParseTemplates parses a list of templates .
3789	NewStringSliceFlag creates a new string slice flag .
3790	withStateFuncs returns a copy of the template .
3791	IntrospectOthers returns information about all channels in the channel .
3792	ReportInfo is part of the Channel interface .
3793	IntrospectState returns a map of PeerRuntimeState
3794	IntrospectState returns the runtime runtime runtime runtime information .
3795	IntrospectState returns the runtime runtime runtime information
3796	IntrospectState is part of the Connection interface .
3797	IntrospectState returns the RelayerRuntimeState of the Relayer .
3798	IntrospectState returns a RelayItemSetState representation of the relay items .
3799	IntrospectState returns an ExchangeSetRuntimeState
3800	NewContext creates a new TChannel .
3801	WriteResponse writes the response to the response .
3802	Wrap wraps an InboundCall to a TChannelHandler .
3803	initFromOpenTracing injects the span into the span context
3804	startOutboundSpan starts a span in the outgoing call .
3805	intToIP4 converts an int to a net . IP
3806	servicePeerToHostPort converts a ServicePeer to a hostname
3807	NewStatsdReporter creates a new statsd reporter
3808	UnmarshalText implements the encoding . TextUnmarshaler interface .
3809	Push implements the heap . Interface .
3810	Pop implements the heap . Interface .
3811	updatePeer adds the peer to the heap .
3812	removePeer removes a peer from the heap .
3813	pushPeer adds a new peer to the heap .
3814	addPeer adds a peer to the heap .
3815	NewClient creates a new TChanClient
3816	Add adds a new peer to the list
3817	Get returns the peer with the given hostPort
3818	WithTimeout sets the timeout
3819	Methods returns all registered methods .
3820	InheritedMethods returns a sorted list of registered methods
3821	Arguments returns the arguments for this method .
3822	ArgList returns a comma separated list of arguments .
3823	CallList returns a comma separated list of arguments
3824	RetType returns the type of the method .
3825	WrapResult adds a result variable to the result
3826	ReturnWith returns the result with the given name and error .
3827	Declaration returns the string representation of the field .
3828	startIdleSweep starts a sweepSweep .
3829	start starts the idle connections .
3830	Stop stops the sweep .
3831	ResolveWithGoPath returns the file path to the given filename
3832	setExtends sets the extends service
3833	register a handler
3834	NewClient creates a new Client .
3835	ListenIP returns the address of the listen address .
3836	Close closes the listener .
3837	ReadArgsV2 reads the arguments from the ArgReadable .
3838	WriteArgs writes the arguments to the response .
3839	Call is a wrapper around TChannel . Call .
3840	CallSC is an alias for CallSC
3841	CallV2 makes an RPC call .
3842	NewRealRelay creates a new Relay
3843	NewServer creates a new server
3844	RegisterHealthHandler registers a health handler .
3845	Handle handles a request .
3846	MetricsKey returns a metric key for the system error
3847	NewSystemError creates a new system error .
3848	NewWrappedSystemError creates a new system error with a wrapped error .
3849	Error implements the error interface .
3850	GetContextError converts an error to ErrRequestCanceled .
3851	GetSystemErrorCode returns system error code .
3852	ping sends a ping to the server .
3853	handlePingRes handles a ping response
3854	handlePingReq processes a ping request
3855	SendSystemError sends an error message .
3856	connectionError logs the connection error .
3857	withStateLock runs the given function with the lock held .
3858	withStateRLock executes the given function with the state lock .
3859	Read frames from the connection pool
3860	Write frames
3861	hasPendingCalls returns true if the connection is pending .
3862	checkExchanges ensures that the connection has changed .
3863	closeNetwork closes the network connection
3864	Get last activity
3865	Validate validates the given service .
3866	logFailedRegistrationRetry logs a client registration failure .
3867	initialAdvertise attempts to connect to the hyperbahn .
3868	Service returns the service name .
3869	TTL returns the duration of the request .
3870	SetTTL sets the TTL of the request
3871	finishesCall returns true if the call was called .
3872	Flat returns a sorted list of unique strings .
3873	Map applies the provided function to the platform strings .
3874	MapSlice implements the map . MapSlice interface .
3875	GetProtoConfig returns the proto config from the given config .
3876	MapExprStrings returns a new bzl . Expr .
3877	FlattenExpr flattens a bzl . Expr .
3878	makePlatformStringsExpr creates a bzl . Expr from a list of platform strings .
3879	String returns a string representation of the platform .
3880	Find returns the path to the workspace directory
3881	runGazLe runs the gazlde command
3882	restoreBuildFilesInRepo restores all build files in the current directory .
3883	FixLoads modifies the rules defined in the rules .
3884	fixLoad modifies the load .
3885	newLoadIndex returns the index of the rules that match the rules .
3886	removeLegacyGoRepository removes all go_ repositories from the rule .
3887	Compare compares two versions .
3888	ParseVersion parses a version string into a Version .
3889	EmptyFile creates a new empty file .
3890	LoadWorkspaceFile loads the workspace data from the given path .
3891	LoadMacroFile loads a Macro from a file .
3892	EmptyMacroFile creates a new file with the given path .
3893	LoadData loads data from the given data .
3894	LoadWorkspaceData loads workspace data .
3895	LoadMacroData loads a file with the given data .
3896	ScanAST returns the AST AST for the given file .
3897	ScanASTBody scans the body and parses it .
3898	MatchBuildFileName matches the build file name in the given directory .
3899	SyncMacroFile adds macros to the file .
3900	MacroName returns the macro name .
3901	Sync syncs all the files in the file .
3902	Format formats the file into bz format .
3903	Save writes the file to the given path .
3904	HasDefaultVisibility returns true if the rule has the default_visibility attribute set .
3905	NewLoad creates a Load statement .
3906	Symbols returns a sorted list of all symbols .
3907	Has returns true if symbol exists in the map .
3908	Add adds a symbol to the loader .
3909	Remove removes the symbol .
3910	Insert adds a Load to the file .
3911	NewRule creates a new Rule .
3912	SetKind sets the rule
3913	AttrKeys returns a sorted list of sorted attribute names .
3914	Attr returns a bzl . Expr .
3915	AttrString returns the string value of the rule .
3916	AttrStrings returns the list of strings associated with the given key .
3917	DelAttr deletes an attribute
3918	SetAttr assigns an attribute to the rule
3919	PrivateAttrKeys returns a sorted list of private keys
3920	SetPrivateAttr sets the private attribute
3921	Insert adds a rule to the rule .
3922	IsEmpty returns true if the rule is empty .
3923	CheckInternalVisibility takes a relative path and adds it to the internal list
3924	New creates a new Label
3925	Rel returns a copy of the Label with the same name .
3926	Equal compares two Label objects .
3927	Contains returns true if the other Label contains the same prefix .
3928	generateFromPath generates Go code for the given root path .
3929	shouldCall returns whether or not updateRirs should be called .
3930	shouldUpdate returns true if we should update the given relabel
3931	shouldVisit returns true if the given rel should be visited .
3932	SquashRules squashes src to dst .
3933	runClient connects to the unix socket
3934	UpdateRepo updates the repository with the given importPath .
3935	NewRemoteCache creates a new RemoteCache .
3936	Remote returns the remote repository for the given root .
3937	get returns the value for the given key .
3938	ensure adds a value to the cache if it doesn t already exist .
3939	RelBaseName returns the base name of a relative path .
3940	Clone creates a deep copy of the config
3941	IsValidBuildFileName returns true if the build file name is valid .
3942	check checks if the tagLine is valid .
3943	fileNameInfo returns information about the file name .
3944	otherFileInfo returns the file info for the given file .
3945	protoFileInfo extracts the file info from a proto file .
3946	AddRule adds a rule to the index .
3947	Finish collects all rules in the index .
3948	buildImportIndex creates the index map from the rules .
3949	IsSelfImport returns true if the source is self import
3950	applyKindMappings merges a list of loadKinds .
3951	appendOrMergeKindMapping adds a Kind to the list .
3952	RuleName returns the name of the rule .
3953	buildPackages builds a list of packages from the given proto file .
3954	selectPackage returns a single package from the given map .
3955	generateProto creates a rule for the given package .
3956	generateEmpty returns the rules that match the regular files .
3957	ImportRepoRules imports rules into repo cache .
3958	MergeRules merges rules into existing rules .
3959	GenerateRule generates a rule based on the repo .
3960	FindExternalRepo returns the path to the external repository .
3961	ListRepositories returns a list of repositories in the rule .
3962	migrateLibraryEmbed migrates the library attribute from the rules .
3963	migrateGrpcCompilers migrates gRPC rules .
3964	squashCgoLibrary ensures that cgo_library rules are allowed .
3965	removeLegacyProto removes a proto file .
3966	removeLegacyGazLe removes any load balancer rule .
3967	selectPackage selects a single package from the given directory
3968	AddBuiltin adds a resolver to the meta resolver .
3969	MappedKind adds a MappedKind to the resource .
3970	Resolver returns the Resolver for the given rule .
3971	sortExprLabels sorts the labels in the list .
3972	checkRulesGoVersion checks if the rules_go is valid
3973	preprocessTags adds generic tags to the config
3974	setBuildTags validates the build tags .
3975	splitValue splits a comma separated string into a slice of strings
3976	copyGoModToTemp copies the file to a temporary directory
3977	findGoTool returns the path to the go tool
3978	isBuildable returns true if the package is buildable .
3979	startServer starts the server
3980	watchDir watches the directory rooted at root
3981	listDirs returns a list of directories .
3982	shouldIgnore returns true if the given path should be ignored .
3983	recordWrite records a write
3984	getAndClearWrittenDirs returns all written directories
3985	CombineHandlers concatenates multiple http handlers
3986	VerifyContentType returns a new http . HandlerFunc that checks the Content - Type header .
3987	VerifyMimeType returns an http . HandlerFunc that verifies the given MIME type .
3988	VerifyBasicAuth returns a new http . HandlerFunc that verifies the given username and password .
3989	VerifyJSONRepresenting verifies that the given object is marshaled .
3990	VerifyFormKV creates a new http . HandlerFunc
3991	RespondWithProto returns a new http . HandlerFunc that responds with a protobuf message .
3992	RegisterFailHandlerWithT registers a Gomega fail handler .
3993	EventuallyWithOffset creates an AsyncAssertion with the given offset .
3994	ConsistentlyWithOffset creates an AsyncAssertion with the given offset .
3995	Expect creates an Assertion .
3996	Eventually asserts that the expected value is greater than the provided intervals .
3997	Consistently is part of the Assertion interface .
3998	TimeoutCloser returns an io . Closer that wraps the given io . Closer .
3999	TimeoutReader returns an io . Reader that reads from r .
4000	TimeoutWriter returns an io . Writer that writes to w .
4001	Nested returns a nested nested error .
4002	SetMockService sets the mock service
4003	FindMachineByIdOrAddress finds a machine by id
4004	Write implements the io . Writer interface .
4005	Hijack implements the http . Hijacker interface .
4006	ListDeploys returns a list of deployments matching filter .
4007	AddAll registers all routes for the given version and path .
4008	samlRequestTimeout parses the SAML request_timeout parameter
4009	RegisterHandler registers a new http . Handler for the given path and method .
4010	RegisterHandlerVersion registers a new http . Handler for the given version .
4011	Check executes all registered checkers .
4012	DiscoverRepositoryPath returns the repository path to the given directory
4013	OpenRepository opens a repository at the given path .
4014	RemoteURL returns the remote URL for the given name .
4015	List lists all apps in the indexer .
4016	Apps returns an object that can list and get Apps .
4017	List lists all apps in the indexer for a given namespace .
4018	StreamJSONResponse streams the JSON response to the given io . Writer .
4019	DropDatabase drops a database .
4020	Collection returns a new Collection instance
4021	SetLogger sets the logger
4022	Error logs a message .
4023	Errorf logs a message .
4024	Fatal logs a message .
4025	Debugf logs to target .
4026	GetStdLogger returns the logger s logger
4027	Namespace returns the namespace of the cluster
4028	recreateContainers creates a new container with the specified nodes .
4029	checkProvisioner checks if the provisioner exists .
4030	checkDocker validates the docker config
4031	checkScheduler ensures that the scheduler is running
4032	checkRouter validates the default router configuration .
4033	Available returns true if the Unit is available .
4034	Get returns the provisioner with the given name .
4035	Registry returns a list of registered provisioners .
4036	Error implements the Error interface .
4037	validateVersion returns true if the supported version is supported
4038	ReadTarget reads the target from the environment .
4039	WriteTarget writes the target file
4040	WriteOnTargetList writes label to target file
4041	Creates a new storage connection
4042	Apps returns the storage collection .
4043	PoolsConstraints returns a collection of pool_constraints .
4044	Users returns a storage collection for users .
4045	SAMLRequests returns a storage . Collection that stores the SAML requests .
4046	AppLogCollection implements storage . Storage .
4047	CreateAppLogCollection creates a new storage collection for an app .
4048	LogsCollections returns all the collections in the database .
4049	ArchiveBuildCmds returns the build cmds for the build
4050	ArchiveDeployCmds returns the command to deploy the deployment
4051	DeployCmds returns the command line arguments for the unit agent
4052	runWithAgentCmds runs tsur agent command
4053	newApps returns a Apps
4054	Commit commits the container
4055	processTags takes a slice of tags and returns them .
4056	aggregateContainersBy aggregates containers by matcher
4057	chooseNodeToAdd attempts to choose a node to be chosen .
4058	chooseContainerToRemove returns a container id that can be used to remove a container
4059	Get returns a router by name .
4060	Default returns the router name .
4061	Store stores a router app
4062	TsuruV1 retrieves the TsuruV1Client
4063	Tsuru retrieves the TsuruV1Client
4064	NewAppInformer constructs a new informer for App type . Always prefer using an informer factory to get a shared informer instead of getting an independent one . This reduces memory footprint and number of connections to the server .
4065	NewFilteredAppInformer constructs a new informer for Tsuru type . Always prefer using an informer factory to get a shared informer instead of getting an independent one . This reduces memory footprint and number of connections to the server .
4066	Watch returns a watch . Interface that watches the requested apps .
4067	Patch applies the patch and returns the patched app .
4068	NewSharedInformerFactory constructs a new SharedInformerFactory .
4069	NewFilteredSharedInformerFactory creates a new sharedInformerFactory .
4070	Proxy is a mock
4071	UnbindUnit is part of the interface .
4072	Create creates a new plan
4073	Remove removes a plan .
4074	ensureDefault adds the default plans to the storage .
4075	DeleteInstance deletes a service instance
4076	ToInfo returns information about the service instance .
4077	Update updates the service instance .
4078	BindApp binds an application .
4079	BindUnit binds a unit to the service instance
4080	UnbindApp unbinds an application .
4081	Status returns the status of the service .
4082	ProxyInstance is used to proxy a resource
4083	Inc increments the quota for the specified application .
4084	SetLimit sets the limit for an app
4085	Set sets the quota for an application
4086	Get retrieves quota by name
4087	RemoveImage removes an image from the registry .
4088	RemoveAppImages removes all images from docker registry
4089	Create creates a platform .
4090	List all platforms
4091	FindByName returns a platform by name .
4092	Update updates a platform
4093	Remove a platform
4094	Rollback a platform image
4095	GetPoolByName returns a Pool by name
4096	Manager returns the RepositoryManager
4097	Register registers a repository with the given name .
4098	start starts the sync syncer .
4099	Shutdown implements bindSyncer .
4100	GetForProvisioner returns the builder for the provisioner
4101	get returns the builder by name .
4102	Registry returns all registered builders .
4103	RegisterQueueTask registers a task to the queue .
4104	Apps returns a AppInformer .
4105	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new App .
4106	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new AppList .
4107	DeepCopy is an autogenerated deepcopy function copying the receiver creating a new AppSpec .
4108	Write implements the io . Writer interface .
4109	ResetPassword is used to reset a password
4110	addKnownTypes adds known types to the scheme .
4111	Register registers a Shutdownable
4112	Do shuts down all registered shutdown handlers .
4113	ListImagesOrDefault lists the images for a platform .
4114	MigrateAppsCRDs migrates CRDs
4115	Register registers a migration .
4116	RegisterOptional registers a MigrateFunc with optional name .
4117	Run runs the given command .
4118	Units returns all units associated with the application .
4119	MarshalJSON returns the JSON representation of an App
4120	AcquireApplicationLockWait acquires an application lock .
4121	ReleaseApplicationLock releases the application lock
4122	GetByName returns an app by name .
4123	AddUnits adds n units to the application .
4124	SetUnitStatus sets the status of the given unit .
4125	UpdateNodeStatus updates node status
4126	available returns true if the application is available .
4127	Grant grants access to an app .
4128	Revoke revokes an app .
4129	GetTeams returns all teams
4130	setEnv sets the environment variable
4131	getEnv retrieves an environment variable from the app .
4132	validateNew validates a new app .
4133	validate validates the config
4134	InstanceEnvs returns the environment variables for the given service instance .
4135	Run runs a command
4136	GetUnits returns all units in the application .
4137	GetUUID returns the uuid of the app
4138	Envs returns a map of environment variables .
4139	SetEnvs sets the environment variables .
4140	UnsetEnvs unsets the environment variables .
4141	AddCName adds cnames to the app .
4142	Log adds a log entry to the database .
4143	LastLogs returns the last log of the applog
4144	List lists apps .
4145	Swap swaps two routes .
4146	Start starts an app .
4147	GetDbDriver returns a database driver by name .
4148	GetCurrentDbDriver returns the current database driver
4149	NewForConfig creates a new client for the given config
4150	GetAppFromUnitID returns the application by unitID
4151	NewPipeline creates a new pipeline
4152	Result returns the next action .
4153	DecodeJsonPayload decodes the request body into v .
4154	UrlFor returns the base url for the given path .
4155	GetCorsInfo - returns CorsInfo object
4156	MiddlewareFunc adds CORS headers
4157	MiddlewareFunc is a middleware middleware middleware .
4158	WriteHeader implements the http . ResponseWriter interface .
4159	MakeRouter creates a new Revel instance
4160	AppFunc returns a handler function for the route
4161	escapePath returns the escaped path for the given URL
4162	EscapePathExp returns the escaped path string
4163	start initializes the router .
4164	ofFirstDefinedRoute finds the first matching route in the list of matched routes .
4165	findRouteFromURL finds the first route matching the given url .
4166	MiddlewareFunc adds Content - Type header .
4167	CloseNotify implements the http . ResponseWriter interface .
4168	MiddlewareFunc adds a handler to the AccessLogApache middleware .
4169	executeTextTemplate executes the text template
4170	RemoteUser returns the remote user
4171	ApacheQueryString returns the url query string
4172	StartTime returns the start time .
4173	ApacheRemoteAddr returns the remote address of the Apache server
4174	ResponseTime returns the time elapsed time .
4175	MiddlewareFunc adds middleware to the middleware .
4176	EncodeJson implements the json . Encoder interface
4177	WriteHeader implements the http . ResponseWriter interface .
4178	MakePath returns a string representation of the route .
4179	MiddlewareFunc adds panics to the middleware
4180	WrapMiddlewares wraps a slice of middlewares
4181	MiddlewareFunc adds a gzip middleware to the request .
4182	WriteHeader is a wrapper around http . ResponseWriter
4183	Hijack implements the http . Hijacker interface .
4184	Write the data to the underlying writer
4185	MiddlewareFunc adds basic auth header to the middleware .
4186	printDebug prints the node tree .
4187	AddRoute adds a new route
4188	printDebug prints debug information about the tree .
4189	FindRoutes returns a list of matched routes
4190	FindRoutesAndPathMatched finds all routes matching method and path
4191	FindRoutesForPath finds all routes matching the given path
4192	Use adds middlewares
4193	MakeHandler creates a new http . Handler
4194	MiddlewareFunc adds the powered - by header to the handler .
4195	MiddlewareFunc adds the status code to the middlewares .
4196	GetStatus returns the current status
4197	MiddlewareFunc adds a Jsonp middleware
4198	Flush implements the http . Flusher interface .
4199	MiddlewareFunc adds a middleware to the request .
4200	Fetch fetches an object from S3 .
4201	sanityCheck is used to check if the environment is valid
4202	release releases the listener
4203	fetchLoop is a long running routine that keeps track of changes .
4204	spawnLoop runs the fork loop .
4205	Initialize the file
4206	Fetch reads the contents of the file .
4207	Fetch performs a HEAD request .
4208	NewConfig returns a new config with default values .
4209	Validate validates the config .
4210	NewClient creates a new client .
4211	AsyncClose closes the partition consumer
4212	Close implements the Consumer interface .
4213	MarkOffset adds an offset to the partition .
4214	NewConsumer creates a new consumer
4215	MarkOffsets sets the OffsetStash for the given OffsetStash .
4216	ResetOffset resets the offset of a given message
4217	Close closes the Consumer .
4218	hbLoop is a long running goroutine that runs a heartbeat .
4219	twLoop is a long running goroutine that keeps track of topics .
4220	cmLoop is a long running goroutine to commit offsets .
4221	fetchOffsets fetches offsets for the given topics .
4222	MarkOffset sets the offset for a given message and metadata
4223	ResetOffset resets the offset for a given message
4224	Offsets returns the set of offsets in the set .
4225	Actual returns a copy of the InstanceGroup
4226	Expected returns a copy of the InstanceGroup
4227	Delete deletes an InstanceGroup
4228	GetReconciler returns the reconciler for the given cluster .
4229	GetVersion returns Kubicorn version
4230	GetVersionJSON returns the version
4231	Actual takes a ResourceGroup and returns a new ResourceGroup and an error .
4232	Expected creates a new resource group and returns the updated cluster .
4233	CreateCmd creates a new cobra command
4234	NewUbuntuCluster creates a new Ubuntu cluster
4235	ProviderConfig returns the control plane configuration
4236	SetProviderConfig sets the controlPlane provider configuration
4237	MachineProviderConfigs returns all provider configs
4238	SetMachineProviderConfigs sets the provider configs
4239	NewCluster creates a new cluster
4240	DeployControllerCmd returns a Command instance for DeployController
4241	NewRetrier creates a new Retrier
4242	RunRetry runs the retry logic
4243	MustGenerateRandomBytes returns random bytes .
4244	ExplainCmd creates a new cobra command
4245	TimeOrderedUUID generates a random UUID
4246	GetConfigCmd returns a cobra command for getconfig command
4247	RunAnnotated runs the given task with the given symbol and symbol .
4248	ListCmd creates a new cobra command
4249	NewUbuntuCluster creates a new Ubuntu cluster
4250	EditCmd creates a new cli edit command
4251	RemoveKey removes the given public key .
4252	RemoveKeyUsingFile removes a key from the keyring
4253	Actual returns the actual firewall information
4254	Expected is used to create a new cluster
4255	Apply is a helper function to apply a new Firewall request
4256	Delete deletes a resource
4257	DeleteCmd creates a Kubernetes cli delete command
4258	NewStateStore returns a new state store based on options
4259	Commit persists the cluster
4260	ApplyCmd returns the Kubernetes cli apply command
4261	ExpandPath expands the given path
4262	CompletionCmd returns an instance of Completion command
4263	AdoptCmd returns the cobra command
4264	StrEnvDef returns the string value of the environment variable
4265	IntEnvDef returns the value of the environment variable or the default value if it exists .
4266	BoolEnvDef returns the boolean value of the given environment variable or the default if it exists .
4267	readFromFS reads the contents of a file
4268	VersionCmd returns the cobra command
4269	NewSignalHandler creates a new handler for the given signal .
4270	Register the handler
4271	NewUbuntuCluster creates a new Ubuntu cluster
4272	BeginningOfHour returns the beginning of the current time .
4273	BeginningOfDay returns the beginning of the current time .
4274	BeginningOfWeek returns the beginning of the current week .
4275	BeginningOfMonth returns the beginning of the current month
4276	BeginningOfQuarter returns the beginning of the current time .
4277	BeginningOfYear returns the beginning of the current time .
4278	EndOfMinute returns the end of the current time .
4279	EndOfHour returns the end of the current time .
4280	EndOfDay returns the end of the current time .
4281	EndOfWeek returns the end of the week .
4282	EndOfMonth returns the end of the current time .
4283	EndOfQuarter returns the end of the current time .
4284	EndOfYear returns the end of the current time .
4285	MustParse is like Parse but panics on error .
4286	Between returns true if the current time is within the current time .
4287	ParseInLocation returns a new time . Time object with the given locs .
4288	MustParse is like Parse except it takes a slice of strings .
4289	MustParseInLocation is like Parse except that it panics .
4290	Between returns true if the current time is within the current time
4291	NewChannelMemoryBackend creates a new channel memory backend
4292	Start starts the backend
4293	Flush implements the backend . Flush interface .
4294	Stop stops the backend
4295	Formatted returns the string representation of the record .
4296	Message returns the string representation of the record .
4297	SetBackend sets the logger used by the logger .
4298	MustGetLogger is like GetLogger but panics on error .
4299	Reset resets the logger with default values
4300	IsEnabledFor returns true if the logger is enabled for the given log level .
4301	Criticalf logs with critical level
4302	Warningf logs with WARNING level
4303	Noticef logs with ERROR level
4304	Infof logs with INFO level .
4305	SetFormatter sets the formatter .
4306	MustStringFormatter is like NewStringFormatter but panics .
4307	formatFuncName returns the function name for the function name .
4308	Log implements the Log interface .
4309	LogLevel returns the log level for the given string .
4310	AddModuleLevel creates a new module level backend
4311	GetLevel returns the level for the given module
4312	SetLevel sets the log level for the given module .
4313	IsEnabledFor returns true if the given level is enabled for the given module .
4314	MultiLogger creates a new logger
4315	Log implements the Logger interface .
4316	GetLevel returns the level for the given module
4317	SetLevel sets the level of all loggers
4318	IsEnabledFor returns true if the given level is enabled
4319	ConvertColors converts a slice of colors to a string
4320	NewSyslogBackend creates a new syslog backend
4321	NewSyslogBackendPriority creates a new syslog backend
4322	SetBackend is the same as SetBackend .
4323	NewCommander creates a new Command instance
4324	Execute executes the command
4325	explain prints the command line information .
4326	explainGroup prints a description of the command group .
4327	explain prints the command line flags .
4328	Deal with aliases
4329	Execute calls the DefaultCommander .
4330	LoadFromData creates a new ConfigFile from data .
4331	LoadFromReader creates a new ConfigFile from an io . Reader
4332	ReloadData reloads the contents of the config file
4333	AppendFiles appends the given files to the config file .
4334	GetKeyList returns a list of all keys in the given section .
4335	Save config data
4336	SaveConfigFile writes a config file to a file .
4337	Find returns a new Selection object containing the matched elements .
4338	FindByXPath returns a Selection object that matches the given selector .
4339	FindByLink returns a new Selection object containing the matched elements .
4340	FindByLabel returns a new Selection object that matches the given label .
4341	FindByName returns a new Selection object with the given name .
4342	FindByClass returns a new Selection object containing the matched elements .
4343	FindByID returns a new Selection object that matches the given id .
4344	First returns a new Selection object containing the matched elements .
4345	FirstByXPath returns a new Selection object that matches the given selector .
4346	FirstByLink returns a new Selection object containing the matched elements .
4347	FirstByLabel returns a new Selection that matches the given label .
4348	FirstByName returns a new Selection object with the given name .
4349	All returns a new MultiSelection with the given selector .
4350	AllByXPath returns a new MultiSelection that matches the given selector .
4351	AllByLink returns a new MultiSelection that matches the given text .
4352	AllByLabel returns a new MultiSelection that matches the given label .
4353	AllByName returns a new MultiSelection with the given name .
4354	AllByClass returns a new MultiSelection that matches the specified classes .
4355	AllByID returns a new MultiSelection that matches the given id .
4356	FindForAppium returns a new Selection object that matches the given selector .
4357	Timeout is an Option that sets the number of seconds in seconds .
4358	ChromeOptions adds a Chrome option to the server
4359	JoinPage creates a new page with the given options
4360	Destroy destroys the session .
4361	Reset resets the page .
4362	Navigate sets the current URL to the current page .
4363	GetCookies returns the cookies in the current page .
4364	SetCookie sets the cookie in the session .
4365	DeleteCookie deletes a cookie
4366	ClearCookies deletes all cookies .
4367	URL returns the URL of the page .
4368	Size sets the size of the page .
4369	Screenshot returns a screenshot of the page
4370	Title returns the title of the page .
4371	HTML returns the content of the page .
4372	PopupText returns the popup text .
4373	EnterPopupText enters the popup text .
4374	ConfirmPopup confirms the popup .
4375	CancelPopup cancels the popup .
4376	SwitchToParentFrame switches the current frame to the parent frame .
4377	SwitchToRootFrame changes the root frame to the original frame
4378	NextWindow moves next window
4379	CloseWindow closes the active window .
4380	WindowCount returns the number of available windows .
4381	LogTypes returns a list of log types .
4382	MoveMouseBy moves the cursor to the mouse
4383	DoubleClick moves the page .
4384	Click performs a click action .
4385	Click clicks all elements in the Selection .
4386	DoubleClick moves the elements of each element in the selection .
4387	Fill the elements in the set of matched elements .
4388	Tap sends a touch event to the set of matched elements .
4389	Touch sets the elements of each element in the Selection .
4390	FlickFinger touches the elements of each element in the Selection .
4391	ScrollFinger scrolls the finger to the current element .
4392	NewCapabilities creates a new Capabilities object
4393	JSON returns the capabilities as a string .
4394	HaveTitle returns a matcher that matches the given title
4395	HaveURL returns a matcher that matches the given URL
4396	HavePopupText returns a matcher that matches the provided text .
4397	HaveLoggedError returns a matcher that matches the given messages .
4398	Text returns the first element of the Selection object .
4399	Active returns true if the current selection matches the current element .
4400	Attribute gets the first element of the Selection object .
4401	CSS gets the CSS property of each element in the Selection object .
4402	Selected returns true if the current selection is selected .
4403	Visible returns true if the set of elements are visible .
4404	Enabled returns true if each element is enabled .
4405	HaveCount returns a matcher that matches the number of elements
4406	HaveAttribute returns a matcher that matches the given attribute
4407	EdgeDriver creates a new EdgeDriver
4408	Sseendroid creates a new instance of Selendroid
4409	SwitchToFrame changes the current frame to the current frame .
4410	Count returns the number of matched elements .
4411	EqualsElement returns true if two Selection objects are equal .
4412	MouseToElement moves the cursor to the given element .
4413	loggingMiddleware is a middleware that prints debug messages
4414	chainHandlers creates a middleware chain of middlewares
4415	HTTPReverseProxy starts a reverse proxy server
4416	CheckInstallation verifies that the version of the binary is installed .
4417	CheckVersion returns nil if the version is within the given version
4418	GetVersionForBinary returns the version for the given binary
4419	getUser retrieves a user by ID
4420	login is used to login a user
4421	loginHandler is used to login the user
4422	logoutHandler removes the authenticated user from the server .
4423	Views the login page .
4424	Run starts the user service
4425	WithRequest sets the interaction on the interaction .
4426	WillRespondWith sets the response to the interaction .
4427	isJSONFormattedObject checks if a string is a JSON formated object
4428	ByUsername returns a user by username
4429	ByID returns a user by ID .
4430	UserLogin handles a login request
4431	newClient creates a new client
4432	NewClient creates a new mock client
4433	ListServers lists all servers
4434	UpdateMessagePact adds a message to the swarm
4435	PublishPacts publishes pacts
4436	getPort returns the port for the given URL
4437	getAddress returns the address of the host
4438	sanitise RubyResponse sanitizes the response and sanitizes it .
4439	Publish a given request
4440	FindPortInRange finds a port in a range
4441	EachLike returns a matcher that matches elements of content .
4442	Term returns a matcher that matches the given pattern .
4443	UnmarshalJSON implements the json . Unmarshaler interface
4444	objectToString converts an object to a string
4445	match returns a matcher matching the src type .
4446	Add a message
4447	AddInteraction add a new interaction
4448	Teardown shuts down the server
4449	Verify calls the mocked service
4450	stateHandlerMiddleware is a middleware that invokes the provider state handler .
4451	VerifyMessageProviderRaw is the same as VerifyMessageProvider except that it returns a response .
4452	VerifyMessage consumer
4453	VerifyProvider is a mock
4454	NewService creates a new mock service
4455	Setup starts the service manager
4456	addServiceMonitor is a long running routine to monitor the process
4457	removeServiceMonitor monitors the process and removes it from the process map .
4458	List returns all registered processes
4459	Command returns the exec . Cmd
4460	call is a mock
4461	DeleteInteractions deletes interactions
4462	AddInteraction adds an interaction
4463	WritePact creates a mock file
4464	ExpectsToReceive is a mock
4465	WithMetadata sets the Metadata field of the message
4466	AsType sets the receiver to the given type .
4467	UserLogin handles the login request
4468	Region returns the AWS region of the AWS domain .
4469	New creates a new S3 .
4470	Bucket creates a bucket with the given name .
4471	PutWriter creates a writer for the given path .
4472	url constructs a URL from a bucket .
4473	SetLogger sets the logger with the given prefix and flag .
4474	InstanceKeys returns the keys of the instance .
4475	EnvKeys returns the keys in the environment
4476	Sign adds the request to the bucket .
4477	getAWSKeys returns the AWS keys stored in s3r .
4478	homeDir returns the home directory .
4479	ACL adds an ACL to the header .
4480	putPart adds a part to the server .
4481	aborts a multipart upload
4482	growPartSize returns true if the chunk size is larger than putz .
4483	CheckDisallowed returns an error if the spec is not allowed .
4484	Process parses the spec and returns an error if any .
4485	MustProcess is like Process but panics .
4486	toTypeDescription returns a human - readable description of reflect . Type .
4487	Usage prints the usage for the given spec .
4488	Usagef generates usage information for the specified spec .
4489	Usaget is a helper function that renders information about the given spec .
4490	Scan implements the Scanner interface .
4491	Value implements the Valuer interface .
4492	NewTime returns a new Time instance
4493	TimeFromPtr creates a new Time from a pointer .
4494	ValueOrZero returns the time . Time value .
4495	MarshalJSON implements the json . Marshaler interface
4496	SetValid sets the time
4497	Ptr returns a pointer to a pointer .
4498	NewBool creates a new Bool
4499	BoolFromPtr creates a new Bool from a pointer .
4500	UnmarshalJSON implements the json . Unmarshaler interface for Bool .
4501	UnmarshalText implements the encoding . TextUnmarshaler interface .
4502	MarshalJSON implements the json . Marshaler interface .
4503	SetValid sets the value of Bool
4504	NewString creates a new String
4505	UnmarshalJSON implements the json . Unmarshaler interface .
4506	MarshalText implements the encoding . TextMarshaler interface .
4507	UnmarshalText implements the encoding . TextUnmarshaler interface .
4508	SetValid sets the String field s value .
4509	StringFromPtr creates a new String from a pointer
4510	MarshalJSON implements the json . Marshaler interface
4511	NewInt creates a new Int
4512	IntFromPtr creates a new Int from a pointer .
4513	UnmarshalJSON implements the json . Unmarshaler interface for Int .
4514	MarshalText implements the encoding . TextMarshaler interface .
4515	SetValid sets the value of the int64
4516	UnmarshalText implements the encoding . TextUnmarshaler interface .
4517	MarshalText implements the encoding . TextMarshaler interface .
4518	SetValid sets the value of float64
4519	MarshalJSON implements the json . Marshaler interface .
4520	UnmarshalJSON implements json . Unmarshaler interface
4521	UnmarshalText implements the encoding . TextUnmarshaler interface .
4522	MarshalJSON implements the json . Marshaler interface .
4523	newGossipChannel creates a new gossip channel
4524	GossipUnicast sends a message to the remote peer .
4525	GossipBroadcast broadcasts the given update to the peer .
4526	Send a GossipData
4527	Sends down to the channel
4528	gobEncode returns a byte slice of the given items .
4529	newTokenBucket creates a new token bucket
4530	wait waits for the next unspent token .
4531	capacityToken returns the current capacity token .
4532	PrefixRangeEnd returns the end of a range of prefixes
4533	newLocalPeer creates a new local peer
4534	getConnections returns a set of connections
4535	createConnection creates a new connection
4536	doAddConnection is used to add a connection
4537	startLocalConnection starts a new local connection
4538	SendProtocolMsg sends a protocol message .
4539	NewStatus creates a new Status with the given router .
4540	makePeerStatusSlice creates a slice of PeerStatus
4541	makeUnicastRouteStatusSlice returns a slice of unicast routes .
4542	makeBroadcastRouteStatusSlice returns a slice of RouteStatus for all routes .
4543	makeLocalConnectionStatusSlice returns a slice of LocalConnectionStatus .
4544	makeTrustedSubnetsSlice converts a slice of net . IPNet to a slice of strings
4545	Range implements the Store interface .
4546	Put implements the Store interface .
4547	DeleteRange implements the EtcdServer interface .
4548	Txn is part of the Store interface .
4549	Compact is not implemented .
4550	proposeInternalRaftRequest is used to propose an internal Raft request .
4551	applyCompare implements the Compare interface .
4552	Describes all known peers
4553	OnGC adds a callback function to be called when garbage collection is deleted .
4554	OnInvalidateShortIDs registers callback function to be called when the peer is invalid .
4555	chooseShortID chooses a random peer short id from the list of peers .
4556	fetchWithDefault adds a new peer to the list .
4557	Fetch a peer by name
4558	FetchAndAddRef fetches a reference count by name .
4559	FetchByShortID fetches a peer by short ID .
4560	GarbageCollect deletes all peers .
4561	newRoutes creates a new Routes
4562	OnChange registers a function to be called when the routes are registered .
4563	Unicast returns the route name for the given name .
4564	UnicastAll returns the route name for the given peer name .
4565	Broadcast looks up the routes for the given peer .
4566	BroadcastAll returns all routes for the given peer .
4567	NewPeer creates a new peer
4568	Register registers a new mesh .
4569	ReadFrom implements the net . Conn interface .
4570	WriteTo sends a message to the peer .
4571	LocalAddr returns the local address of the peer .
4572	OnGossip implements the Gossip interface .
4573	OnGossipBroadcast is called when a message is received
4574	OnGossipUnicast is called when a gossip message is received
4575	NewDefaultServer creates a new mesh server
4576	PeerNameFromUserInput creates a PeerName from a user input string
4577	bytes converts the PeerName to a byte slice .
4578	NewRouter creates a new router
4579	Send all gossip channels
4580	sendAllGossipDown sends all gossip messages down to the given connection .
4581	broadcastTopologyUpdate broadcasts a set of peers to all peers .
4582	OnGossipUnicast implements the OnGossipUnicast interface
4583	OnGossipBroadcast implements the OnGossipBroadcast interface
4584	Gossip returns the GossipData for the current node .
4585	OnGossip applies the given update to the topology .
4586	Encode serializes the topology data into a byte slice .
4587	newState creates a new state
4588	Merge merges the given GossipData into this state .
4589	mergeReceived takes a set of peers and returns the updated state .
4590	mergeComplete returns the complete state with the given set .
4591	OnGossipBroadcast implements the SossipGossipMsg interface
4592	OnGossip returns the GossipData for the given update
4593	generateKeyPair returns a new public key pair .
4594	Formates a shared secret key .
4595	newTCPCryptoState creates a new tcpCryptoState .
4596	Send sends a message to the sender .
4597	Send sends a message to the sender .
4598	Send sends a message to the sender .
4599	Receive implements the Pipe interface .
4600	Receive reads a TCP message from the server .
4601	Receive receives a TCP message and decodes it .
4602	newPeer creates a new peer
4603	incr increments the current state of the peer .
4604	Gossip returns the current state of this peer .
4605	OnGossipUnicast is called when a GossipUnicast is received
4606	makeRaftPeer creates a raft . Peer from the given address .
4607	String returns a string representation of a peer
4608	forEachConnectedPeer iterates through all connected peers .
4609	parsePeerUID parses a string representation of a PeerUID
4610	Swap swaps two peers .
4611	Less compares two peers .
4612	doIntro executes introspection introspection .
4613	filterV1Features returns a copy of the protocol version of the protocol version .
4614	newConnectionMaker creates a new connection maker
4615	connectionAborted marks the connection as failed .
4616	newGossipSender creates a new gossipSender
4617	Send a GossipData
4618	Broadcast a message
4619	Flush the gossip sink
4620	Sender creates a new gossip sender
4621	Flush flush all peers
4622	findMainPath returns the path to the main file .
4623	Create creates a new channel
4624	Send sends a message .
4625	SendJSON sends a JSON - encoded response .
4626	Removes an error from an internal API error .
4627	NamespacedContext returns a new context with the given namespace
4628	protoToItem converts a MemcacheGetResponse_Item to a Item
4629	singleError returns the first error if any .
4630	Get returns the item for the given key .
4631	GetMulti returns a map of keys .
4632	Delete deletes the given key .
4633	DeleteMulti deletes the given keys .
4634	Increment increments a value by delta .
4635	IncrementExisting increments a value by delta .
4636	set sets a MemcacheSetRequest .
4637	Get retrieves the value for the given key .
4638	Stats returns statistics about the memcache .
4639	Flush flushes all of the cache
4640	RunInBackground runs the given function .
4641	List returns a list of all modules
4642	SetNumInstances sets the number of instances for the given module .
4643	Versions returns the versions of the given module .
4644	DefaultVersion returns the default version
4645	Start starts a module
4646	Stop stops a module
4647	Ancestor sets the ancestor of the query .
4648	EventualConsistency sets the eventual consistency of the query .
4649	Project sets the projection to use .
4650	Distinct sets the SELECT clause .
4651	DistinctOn adds distinct columns to the query .
4652	KeysOnly sets the keys only .
4653	Limit sets the number of records that match the query .
4654	Offset sets the offset of the query .
4655	BatchSize sets the size of the batch .
4656	Start sets the start position of the query .
4657	End sets the end of the query .
4658	Count runs the query .
4659	Run runs the query .
4660	Next retrieves the next key from the iterator .
4661	Cursor returns a cursor for the current query .
4662	String returns the string representation of the cursor .
4663	DecodeCursor decodes a Cursor from a string .
4664	saveEntity is a helper method to save an EntityProto struct
4665	Namespace returns a new context with the given namespace .
4666	typeof returns the typeof for the given type .
4667	dot returns the dot of a type .
4668	joinFunc joins two functions .
4669	validPropertyName returns true if the name is valid .
4670	getStructCodec returns the codec for the given type .
4671	LoadStruct loads a struct into dst .
4672	Save a struct to a struct
4673	ServingURL returns the URL of the image .
4674	DeleteServingURL deletes the serving URL .
4675	CurrentOAuth returns the current user .
4676	OAuthConsumerKey returns the OAuth signature of the user
4677	String returns the user s email address .
4678	LoginURL returns a login URL that can be used to login to the user .
4679	LoginURLFederated creates a new login URL
4680	LogoutURL creates a logout URL for the user
4681	insertContext inserts a context to the call .
4682	NewClient creates a new Client .
4683	NewContext returns a new context with the given parent .
4684	NewRemoteContext creates a new context .
4685	Debugf logs a message .
4686	guestbookKey returns a new datastore key for the guestbook .
4687	toRetryParameters converts the RetryOptions to a TaskQueueRetryParameters .
4688	NewPOSTTask creates a new task
4689	Parse request headers
4690	Add adds a task to the task queue
4691	AddMulti adds multiple tasks .
4692	Delete deletes the given task .
4693	DeleteMulti deletes tasks .
4694	Lease blocks until maxTasks is reached
4695	LeaseByTag creates a list of tasks with the specified tag .
4696	Purge deletes a queue
4697	ModifyLease modifies the lease
4698	QueueStats retrieves statistics about the specified queues
4699	IsTimeoutError returns true if the error is a timeout error
4700	Func registers a new function .
4701	Task implements function .
4702	RequestHeaders returns the taskqueue . RequestHeaders .
4703	WithContext returns a new context with the given request .
4704	WithAPICallFunc returns a context with the given call override .
4705	APICall calls the given RPC method .
4706	ModuleHostname returns the hostname of a module .
4707	AccessToken returns the access token for the application .
4708	PublicCertificates returns a list of public certificates for the application .
4709	ServiceAccount returns the service account name .
4710	SignBytes signs the given bytes
4711	fetch reads data from the blobstore .
4712	seek moves the cursor to the next read .
4713	multiKeyToProto converts a slice of Key to a protobuf message .
4714	referenceValueToKey converts a ReferenceValue to a Key
4715	keyToReferenceValue converts a Key to a protobuf PropertyValue .
4716	Put stores the data in src .
4717	PutMulti writes the data to the datastore .
4718	Delete deletes the given key .
4719	DeleteMulti deletes the given keys .
4720	deploy deploys the given command
4721	Next returns the next record .
4722	protoToAppLogs converts a proto message to a slice of AppLogs
4723	protoToRecord converts a RequestLog to a Record .
4724	Run executes the query .
4725	Run executes the log service
4726	Current returns the current user .
4727	IsAdmin checks if the user is an admin
4728	isErrFieldMismatch returns true if the error is ErrFieldMismatch .
4729	Stat returns the BlobInfo for the given blobKey .
4730	Send adds the given blobKey to the response writer .
4731	UploadURL creates a new blobstore URL .
4732	Delete deletes the blob .
4733	DeleteMulti deletes a blob .
4734	NewReader returns a new reader .
4735	Handle registers a new message .
4736	Send sends a message .
4737	Invite sends an invite request
4738	Send sends a presence message
4739	GetPresence returns the presence of a presence
4740	GetPresenceMulti is a helper function to get the presence of a given user .
4741	newStructFLS creates a new FieldLoadSaver .
4742	SaveStruct is a helper function to save struct fields
4743	Namespaces returns a list of all namespace names .
4744	Kinds returns a list of all known kinds .
4745	RunInTransaction runs the f function f with the f function f .
4746	imports returns true if the given file is imported .
4747	importSpec returns the import spec for the given file .
4748	declImports returns true if the given path is an import path .
4749	isPkgDot reports whether t is a dot .
4750	isTopName checks if the given expression is a top name .
4751	isName returns true if the given expression is a name .
4752	isCall reports whether t is a call expression .
4753	reformsTo returns true if n is a member of the node .
4754	isEmptyString returns true if the given expression is an empty string .
4755	countUses returns the number of uses for the given expression .
4756	assignsTo returns true if the given expression evaluates to the given expression .
4757	newPkgDot returns a selector expression .
4758	renameTop renames the top level of the top of a file .
4759	matchLen returns the length of two strings .
4760	deleteImport deletes the given import spec .
4761	rewriteImport rewrites import path .
4762	DefaultTicket returns the default ticket .
4763	flushLog is used to flush the pending log messages
4764	withDeadline returns a new context with the deadline set .
4765	KeepAlive keeps the socket alive
4766	applyTransaction applies the given transaction to the transaction .
4767	analyze analyzes the given tags and returns them .
4768	buildContext creates a build context for the build .
4769	symbolizeMain generates an app_main file for the given appFiles .
4770	findInGopath returns the path to the given directory .
4771	copyTree copies files recursively into a tar . Writer .
4772	copyFile copies a file
4773	checkMain checks if the build is a valid command line .
4774	isMain returns true if f is a main function .
4775	readFile reads a file .
4776	initField returns a reflect . Value at the given index .
4777	loadEntity loads an EntityProto from src to dst .
4778	validIndexNameOrDocID returns true if the given string is valid .
4779	Open opens a new index .
4780	Put adds the given src to the index .
4781	Get retrieves the document from the index .
4782	Delete removes the document with the given id .
4783	DeleteMulti deletes the specified documents .
4784	Search returns an iterator over the given query .
4785	FetchMore fetches the list of results .
4786	Next fetches the next document from the list .
4787	Facets returns a list of facets .
4788	DefaultBucketName returns the default bucket name .
4789	valid returns true if the key is valid .
4790	Equal returns true if two Keys are equal
4791	root returns the root key .
4792	marshal marshals Key to bytes .
4793	String returns the string representation of the key .
4794	Encode returns a base64 encoded representation of this Key
4795	DecodeKey decodes a key from encoded string .
4796	NewIncompleteKey creates a new Key with the given kind .
4797	NewKey creates a new Key .
4798	AllocateIDs allocates a new set of ids in the datastore .
4799	IsOverQuota returns true if the given error is a quota error .
4800	ClassicContextFromContext creates an appengine context from a context
4801	Send sends a message .
4802	SendToAdmins sends a message to admins
4803	Failures returns the number of failed failures
4804	decodeFieldNumberAndTyp3 decodes a field number and type number .
4805	checkTyp3 returns an error if the reflect type is not the expected type .
4806	decodeTyp3 decodes a Typ3 byte slice .
4807	NewPrefixBytes creates a new PrefixBytes
4808	getLengthStr returns a string representation of the type
4809	collectImplementers_nolock collects all implementations of the interface info .
4810	checkConflictsInPrio_nolock checks if the interface is already in the priority list
4811	constructConcreteType constructs the concrete type for the given type .
4812	MarshalBinaryLengthPrefixedWriter implements the encoding . BinaryMarshaler interface .
4813	MarshalBinaryBare marshals an object into a byte slice .
4814	UnmarshalBinaryLengthPrefixed implements the encoding . BinaryUnmarshaler interface .
4815	UnmarshalBinaryBare unmarshals bytes into ptr .
4816	MustMarshalJSON is like Marshal but panics on error .
4817	MustUnmarshalJSON is like UnmarshalJSON but panics on error .
4818	MarshalJSONIndent implements the json . Marshaler interface .
4819	newDataReader returns a new internal data reader
4820	Read reads data from the buffer
4821	ListenAndServeTLS listens for TLS connections
4822	Produce implements the Producer interface .
4823	PromoteHandlerFunc creates a new HandlerFunc with the given arguments .
4824	Serve serves incoming requests on the listener
4825	Serve listens for incoming connections
4826	Fail prints the given error message and exits .
4827	WriteUsage writes the usage information to w .
4828	WriteHelp writes the help text to w .
4829	MustParse creates a new Parser with the given arguments .
4830	Parse parses the given command line arguments and returns an error if any .
4831	walkFields recursively visits all fields in v .
4832	Parse parses the given command line arguments .
4833	setSlice sets a slice of strings to dest .
4834	canParse returns true if the given type can be parsed .
4835	isBoolean reports whether t is a boolean .
4836	NewFromMap constructs a Tree from a map .
4837	Insert inserts the given value into the tree .
4838	Delete deletes a value from the tree
4839	DeletePrefix deletes the prefix of s .
4840	deletePrefix deletes the node with the given prefix .
4841	Get returns the value for the given string
4842	LongestPrefix returns the longest longest prefix of s
4843	Minimum returns the minimum value of the tree
4844	WalkPrefix walks the tree rooted at the given prefix .
4845	recursiveWalk performs a recursive traversal of the tree rooted at n .
4846	ToMap converts the tree to a map .
4847	checkip parses ip and returns the iptype and ipindex .
4848	read uint32
4849	read uint64
4850	load message
4851	Printrecord prints the IP2Location record
4852	Main is the main entry point .
4853	SaveToPdfFile writes a PDF document to a file
4854	CubicCurveTo adds a cubic curve to the current path .
4855	ArcTo adds an arc to the current path
4856	String returns a string representation of the path .
4857	VerticalFlip flips the vertices of the current path .
4858	NewGlyphCache creates a new GlyphCacheImp
4859	Fetch fetches the given glyph from the cache .
4860	renderGlyph is a helper method to render a glyph
4861	Copy returns a copy of the Glyph
4862	Fill fills the Glyph with the given position .
4863	Main is the main entry point .
4864	Draw draws a line at the specified point .
4865	Paint paints a set of spans .
4866	SetColor sets the current color .
4867	NewPainter creates a new Painter .
4868	GetStringBounds returns the bounds of a string
4869	recalc recalculates the current font size .
4870	SetFont sets the current font .
4871	ClearRect draws a rectangle .
4872	drawString draws a string
4873	newGroup creates a new group
4874	newMask creates a new Mask
4875	embedSvgFont embeds the given text to SVG .
4876	TraceQuad performs a linear interpolation of quad curves .
4877	GetFontName returns the font name
4878	NewStackGraphicContext creates a new context stack
4879	NewFolderFontCache creates a new instance of FolderFontCache
4880	NewSyncFolderFontCache creates a new instance of SyncFolderFontCache
4881	Main is the main entry point for the gopher2 renderer .
4882	NewPdf creates a new Fpdf .
4883	clearRect draws a rectangle .
4884	NewGraphicContext creates a new GraphicContext
4885	Clear clears the current page .
4886	GetStringBounds returns the bounds of the string
4887	CreateStringPath draws a string at the specified position .
4888	FillStringAt fills the given string at the given position .
4889	SetStrokeColor sets the stroke color .
4890	SetFillColor sets the fill color .
4891	SetLineDash sets the line dash pattern .
4892	SetLineWidth sets the line width
4893	Main is the main entry point .
4894	Draw draws the given text .
4895	SaveToPngFile saves a png image .
4896	LoadFromPngFile loads png from png file
4897	Resource returns the resource for the given folder and filename .
4898	Output returns the full path to the output file .
4899	Main is the main entry point .
4900	Draw is a convenience method to draw the given image .
4901	Main is the main entry point for drawing .
4902	Cubic draws a Bubble
4903	Dash draws a dash line .
4904	CubicCurve draws a cubic curve .
4905	FillStroke fills a stroke with a stroke .
4906	FillStyle fills the fill style with the given width and height .
4907	PathTransform is a convenience method to transform a path to a path
4908	Star draws a star .
4909	Draw draws the given width and height .
4910	ConvertPath converts a path to a PDF
4911	Main is a shortcut for drawing a line cap
4912	Draw draws the given line with the given offset .
4913	DrawContour draws a circle of the specified points .
4914	Flatten flattens a path to a line
4915	Clear clears the current context .
4916	ClearRect clears the current fill color .
4917	DrawImage draws a transform .
4918	Main is the main entry point for drawing image .
4919	Draw draws the given png with the specified margin .
4920	Draw draws the specified point .
4921	ChecksumString32S computes the checksum of s .
4922	ChecksumString64S computes the checksum of s .
4923	NewS32 creates a new XXHash32 .
4924	NewS64 returns a new XXHash64 .
4925	round64 rounds a 64 - bit value to h .
4926	Checksum32S calculates the checksum of a slice of bytes
4927	Checksum64S computes the checksum of a slice of bytes .
4928	getStage returns the stage of the daemon stage .
4929	New creates a new glg instance
4930	Get creates a new Glg instance
4931	SetMode set mode mode
4932	SetPrefix sets the prefix for the GLINT level .
4933	GetCurrentMode returns the current mode for the given level .
4934	Initialize logger
4935	SetWriter set logger
4936	SetLevelColor sets the color of the logger .
4937	SetLevelWriter sets the writer for the given level .
4938	AddStdLevel adds a standard logger to the glg logger .
4939	EnableColor enable color mode
4940	EnableLevelColor enable color
4941	DisableLevelColor disable color mode
4942	RawString returns the raw string as a string
4943	TagStringToLevel returns the LEVEL value for the given tag
4944	Println prints the given values .
4945	Fatal outputs a fatal message .
4946	Fatalf prints a formatted message .
4947	isModeEnable returns true if the mode is enabled
4948	CaptureMetrics is a convenience method to capture metrics for the request
4949	get returns the value at the given key .
4950	Save writes the data to the given writer
4951	SaveToFile writes the data to a file
4952	Load data from in reader
4953	LoadFromFile loads the data from a file
4954	Key returns the key for the given id .
4955	Retrieves the value of the element id
4956	Delete deletes a node by key
4957	Set sets the version .
4958	Compare returns an integer indicating whether the version is greater than or equal to versionB .
4959	Slice returns the version of the version .
4960	BumpMajor sets the major to 0 .
4961	BumpMinor sets the minor to 0 .
4962	BumpPatch increments the patch .
4963	validateIdentifier validates the given identifier .
4964	newStream creates a new Stream .
4965	addSubscriber adds a subscriber to the stream .
4966	New creates a new Server
4967	Close closes the server
4968	CreateStream creates a new stream
4969	RemoveStream removes a stream from the server
4970	StreamExists checks if a stream exists
4971	Publish publishes an event .
4972	NewClient creates a new client
4973	Subscribe subscribes to the given event stream .
4974	SubscribeChan subscribes to the given stream .
4975	SubscribeRaw subscribes to the given handler .
4976	Unsubscribe removes the given event from the server .
4977	NewEventStreamReader creates a new EventStreamReader
4978	ReadEvent reads the next event from the stream
4979	HTTPHandler is used to stream events
4980	Add adds an event to the log .
4981	Replay causes the event to replay the event log .
4982	readKey reads a private key from the given path .
4983	writeKey writes a PEM - encoded private key
4984	anyKey tries to read a key from the file . If gen is not nil it will return an error .
4985	sameDir returns the full path to the named file .
4986	printAccount prints information about an account .
4987	tmpl renders the template with the given data .
4988	printUsage prints the usage for the command line .
4989	FromRequest returns the X - Real IP address of the request
4990	Do executes the clear command .
4991	Do executes the disable command .
4992	Do removes the storage item .
4993	Do sets the storage item .
4994	Do executes a push message .
4995	Do executes the DispatchSync event .
4996	Do executes the inspect worker .
4997	Do executes the update on page .
4998	Do executes the skip waiting request .
4999	Do executes the command .
5000	Do executes the command to stop all workers .
5001	Do executes the specified command .
5002	Do executes the unregister command .
5003	Do executes the update registration .
5004	Do executes bind parameters .
5005	Do executes the unbind command .
5006	Error implements the Error interface .
5007	Do executes the release animation .
5008	Do executes the seek animation .
5009	Do sets the paused state .
5010	Do sets the playback rate .
5011	Do executes the set timing command .
5012	Do executes the PrepareForLeakDetection parameters .
5013	Do purges the memory .
5014	Do sets the pressure notifications suppressed .
5015	Do executes the simulate pressure notification .
5016	WithSamplingInterval adds the samplingInterval to the start sampling params
5017	WithSuppressRandomness sets the suppressRandomness field of start sampling params
5018	Do executes the StartSamplingParams .
5019	Do executes the stop sampling command .
5020	Do clears the orientation override .
5021	Do sets the device orientation override .
5022	Do starts the violation report .
5023	Do executes the stopViolations report .
5024	String returns the string representation of a Modifier .
5025	WithNodeID adds the nodeID to the get partialAXTree params
5026	WithBackendNodeID adds the BackendNodeID to the get partial accessibility tree params
5027	WithObjectID adds the objectID to the get partial accessibility tree params
5028	WithFetchRelatives adds the FetchRelatives to the get partial accessibility tree params
5029	Do sets the time domain .
5030	WithClipRect adds the clip rectangle to the profile snapshot params
5031	Do executes the release snapshot .
5032	Do executes the delete operation .
5033	Do deletes a database .
5034	Do deletes an object store entry .
5035	WithKeyRange adds the KeyRange to the request data params
5036	Do executes the set sampling interval .
5037	Do executes the StartParams .
5038	WithCallCount adds the call count to the start precise coverage params
5039	WithDetailed adds the detailed information to the start precise coverage params
5040	Do executes precise coverage .
5041	Do starts the profile .
5042	Do executes the precise coverage .
5043	Do executes the stop type profile .
5044	Do executes the set ignore certificate errors .
5045	Do adds the specified heap object .
5046	Do executes collect garbage collection .
5047	WithSamplingInterval adds the samplingInterval to the start sampling params
5048	Do executes the start trackingHeapObjects parameters .
5049	WithReportProgress adds the reportProgress to the stop trackingHeapObjects params
5050	Do executes the stop trackingHeapObjects parameters .
5051	WithReportProgress adds the report to the takeHeapSnapshotParams params
5052	Do executes the snapshot of the snapshot .
5053	WithBrowserContextID adds the BrowserContextID to the grant permissions params
5054	Do executes the grant - permissions request .
5055	WithBrowserContextID adds the BrowserContextID to the reset permissions params
5056	Do performs the requested permissions .
5057	Do executes a crash command .
5058	Do executes the command .
5059	WithQuery adds the query to the get histograms params
5060	WithTargetID adds the targetID to the get window .
5061	Do sets the window size .
5062	WithImage adds the image to the set dock tile parameters
5063	Do sets the dock tile .
5064	Do deletes the cache .
5065	Do executes the delete entry .
5066	WithPathFilter adds the pathFilter to the requestEntries params
5067	Do executes the Discard search results .
5068	Do executes the focus command .
5069	Do executes the undo command .
5070	WithIncludeUserAgentShadowDOM adds the IncludeUserAgentShadowDOM to the perform search params
5071	Do executes the redo command .
5072	Do removes an attribute .
5073	Do executes the delete command .
5074	Do executes the requested child nodes .
5075	WithNodeID adds the nodeID to the resolve node params
5076	WithBackendNodeID adds the BackendNodeID to the resolve node params
5077	WithExecutionContextID adds the ExecutionContextID to the resolve node params
5078	Do sets the attribute value .
5079	WithName adds the name to the setAttributesAsText params
5080	Do sets the attributes as text .
5081	Do sets the file input files .
5082	Do sets the inspected node .
5083	Do sets the node value .
5084	Do sets the HTML markup .
5085	Do executes the undo command .
5086	Do executes the force command .
5087	Do sets the property value for the specified node .
5088	Do starts the rule usage tracking .
5089	Do executes the close command .
5090	Do executes ClearDataForOriginParams .
5091	Do executes the cache storage for the given origin .
5092	Do executes the command on origin .
5093	Do executes the delete cache storage for the given origin .
5094	Do executes the command - line action .
5095	Do executes the Hide highlight request .
5096	Do executes the highlighted frame .
5097	WithNodeID adds the nodeID to the highlight node params
5098	WithBackendNodeID adds the BackendNodeID to the highlight node params
5099	WithObjectID adds the objectID to the highlight node params
5100	WithSelector adds the selector to the highlight node params
5101	Do executes the requested node .
5102	Do executes the query .
5103	Do executes the highlighted rectangle .
5104	WithHighlightConfig adds the HighlightConfig to the set inspect mode params
5105	Do sets the inspect mode .
5106	Do sets the show adlights .
5107	WithMessage adds the message to the setPausedInDebuggerMessage params
5108	Do sets the pause in debug mode .
5109	Do sets the debug borders .
5110	Do sets the FPS counter .
5111	Do executes the show paint rects .
5112	Do executes the show scroll bottleneck rects .
5113	Do executes the show hit test .
5114	Do sets the size of the viewport .
5115	Do executes the clear browser cache .
5116	Do executes the clear browser cookies .
5117	WithErrorReason adds the ErrorReason to the continue intercepted request params
5118	WithRawResponse adds the raw response to the continue intercepted request params
5119	WithURL adds the URL to the continue intercepted request params
5120	WithMethod adds the method to the continue intercepted request params
5121	WithPostData adds the post data to the continue intercepted request params
5122	WithHeaders adds the headers to the continue intercepted request params
5123	WithAuthChallengeResponse adds the authChallengeResponse to the continue intercepted request params
5124	Do executes the request .
5125	WithURL adds the URL to the delete cookies params
5126	WithDomain adds the domain to the delete cookies params
5127	WithPath adds the path to the delete cookies params
5128	Do deletes the specified cookies .
5129	WithConnectionType adds the ConnectionType to the EmulateNetworkConditions params
5130	Do executes the specified network conditions .
5131	Do executes EnableParams .
5132	WithUrls adds the urls to the get cookies params
5133	Do executes the request .
5134	Do sets the blocked URL parameters .
5135	Do executes the set bypass service worker .
5136	Do sets the cache disables .
5137	WithURL adds the URL to the set cookie params
5138	WithDomain adds the domain to the set cookie params
5139	WithPath adds the path to the set cookie params
5140	WithSecure adds the Secure to the set cookie params
5141	WithHTTPOnly adds the HTTPOnly field to the set cookie params
5142	WithSameSite adds the SameSite to the set cookie params
5143	WithExpires adds the Expires to the set cookie params
5144	Do sets the cookies .
5145	Do sets the data sizeLimits for the test .
5146	Do sets the extra HTTP headers .
5147	Do sets the request interceptors .
5148	Do clears the settings override .
5149	Do clears the location override .
5150	Do executes the page scale factor .
5151	Do sets the focused mode .
5152	Do sets the CPU throttling rate .
5153	WithColor adds the color to the set default background color override params
5154	Do sets the default background color override .
5155	WithScale adds the scale to the set device metrics override params
5156	WithDontSetVisibleSize adds the dontSetVisibleSize to the set deviceMetricsOverride params
5157	WithScreenOrientation adds the screen orientation to the set deviceMetricsOverride params
5158	Do sets the settings override .
5159	Do sets the scrollbars hidden parameters .
5160	Do sets the document cookie .
5161	Do sets the touch events for the mouse .
5162	Do sets the media .
5163	WithLatitude adds the latitude to the set geolocationOverride params
5164	WithLongitude adds the longitude to the set geolocationOverride params
5165	WithAccuracy adds the Accuracy to the setGeolocationOverride params
5166	Do sets the location override parameters .
5167	Do sets the page scale factor .
5168	Do sets the script execution disabled .
5169	WithMaxTouchPoints adds the MaxTouchPoints to the set touchEmulationEnabled params
5170	Do sets the touch emulation enabled .
5171	WithBudget adds the budget to the set virtual time policy params
5172	WithMaxVirtualTimeTaskStarvationCount sets the MaxVirtualTimeTaskStarvationCount field s value .
5173	WithWaitForNavigation adds the WaitForNavigation to the set virtual time policy params
5174	WithAcceptLanguage adds the AcceptLanguage to the set user agent override params
5175	WithPlatform adds the platform to the set user agent override params
5176	Do sets the user agent .
5177	Do executes the command .
5178	Do executes insert text .
5179	WithButtons adds the ability to the dispatch mouse event params
5180	Do executes the mouse event .
5181	Do executes the touch event .
5182	Do executes the touch event .
5183	Do sets the ignore input events .
5184	Do executes the touch gesture .
5185	WithXOverscroll adds the XOverscroll to the SynthesizeScrollGesture params
5186	WithYOverscroll adds the YOverscroll to the SynthesizeScrollGesture params
5187	Do executes the SynthesizeScrollGestureParams .
5188	Do executes the touch gesture .
5189	Domain returns the domain part of the method type .
5190	WithDepth adds the DepthListeners to the get event listeners params
5191	Do removes the breakpoint .
5192	WithTargetName adds the target name to the remove event listener breakpoint params
5193	Do removes the breakpoint .
5194	Do removes the breakpoint .
5195	Do removes the breakpoint .
5196	Do sets the breakpoint .
5197	Do sets the breakpoint .
5198	Do sets the breakpoint .
5199	Do sets the breakpoint .
5200	WithExecutor adds the executor to parent context .
5201	Execute is part of the Executor interface .
5202	AttributeValue returns the value of a node .
5203	xpath returns the path to the node .
5204	String returns the string representation of NodeType .
5205	Do sets the sink to use .
5206	Do executes the command .
5207	Do executes the stop cast command .
5208	Do executes the StartObservingParams .
5209	Do executes the delete operation .
5210	Do sets the recording .
5211	Do executes clear events .
5212	WithObjectID adds the objectID to the call function on params
5213	WithArguments adds the arguments to the call function on params
5214	WithExecutionContextID adds the ExecutionContextID to the call function on params
5215	WithObjectGroup adds the object group to the call function on params
5216	Do executes the command to get console entries .
5217	WithContextID adds the ContextID to the Evaluate params
5218	WithOwnProperties adds the OwnProperties to the get properties params
5219	WithGeneratePreview adds the GeneratePreview to the get properties params
5220	WithExecutionContextID adds the ExecutionContextID to the GlobalLexicalScopeNames params
5221	WithObjectGroup adds the object group to the query params
5222	Do executes the release object .
5223	Do executes the delete object group .
5224	Do executes the command .
5225	Do sets the custom formatter enabled .
5226	Do sets the maximum call stack sizeToCapture params .
5227	Do executes the command .
5228	Do adds a new binding .
5229	Do removes the binding .
5230	Do executes the command .
5231	Do executes the scheduled clock sync marker .
5232	WithBufferUsageReportingInterval adds the bufferUsageReportingInterval to the start params
5233	WithNoDisplayUpdates adds the NoDisplayUpdates field to the begin frame params
5234	WithScreenshot adds the screenshot to the begin frame params
5235	Do executes the BringToFrontParams .
5236	WithClip adds the clip to the capture screenshot params
5237	WithFromSurface adds the FromSurface to the capture screenshot params
5238	WithWorldName adds the worldName to the create isolated world params
5239	WithGrantUniveralAccess adds the grantUniveralAccess to the create isolated world params
5240	Do performs the reset navigation history .
5241	WithPromptText adds the PromptText to the handleJavaScriptDialog params
5242	Do executes the dialog .
5243	WithReferrer adds the referrer to the Navigate params
5244	WithTransitionType adds the transitionType to the Navigate params
5245	WithFrameID adds the frameID to the Navigate params
5246	Do executes the navigation action .
5247	WithLandscape adds the Landscape property to the printTo PDFPParams params
5248	WithDisplayHeaderFooter adds the display header footer to the print2p params
5249	WithPrintBackground adds the printBackground to the printToPDf params
5250	WithScale adds the scale to the printToPDFarams params
5251	WithPaperWidth adds the paper width to the printToPDFarams params
5252	WithPaperHeight adds the paper height to the printToPDFarams params
5253	WithIgnoreInvalidPageRanges adds the IgnoreInvalidPageRanges to the printToPDFarams params
5254	WithFooterTemplate adds the footer to the printToPDFarams params
5255	WithPreferCSSPageSize adds the preferredCSSPageSize to the print options .
5256	WithScriptToEvaluateOnLoad adds the scriptToEvaluateOnLoad to the reload params
5257	Do executes the reload command .
5258	Do executes the remove script to remove .
5259	Do executes the screencast frame .
5260	Do sets the advertising enabled parameters .
5261	Do executes the set bypass credential .
5262	Do sets the font families .
5263	Do sets the font sizes .
5264	Do sets the content of the document .
5265	WithDownloadPath adds the download path to the set download behavior params
5266	Do sets the download behavior .
5267	Do sets the lifecycle events enabled .
5268	WithFormat adds the Format field to the startscreencast params
5269	WithMaxWidth adds the MaxScreencast params to the startScreencast params
5270	WithMaxHeight adds the MaxHeight to the startscreencast params
5271	WithEveryNthFrame adds the EveryNthFrame to the start screencast params
5272	Do starts the screencast .
5273	Do executes the command .
5274	Do sets the webhookecycle state .
5275	Do executes the stopscreen command .
5276	Do sets the compilation cache .
5277	Do adds the compilation cache .
5278	Do clears the compilation cache .
5279	WithGroup adds the group to the generate test report params
5280	Do executes the command .
5281	Do activates the target .
5282	WithBindingName adds the binding name to the ExposeDevToolsProtocol params
5283	Do executes the specified command .
5284	WithBrowserContextID adds the BrowserContextID to the create target params
5285	WithSessionID adds the sessionID to the detach from target params
5286	Do executes the detach from target .
5287	Do executes the destroy browser context .
5288	WithSessionID adds the sessionID to the send message to target params
5289	Do sends a message to target .
5290	Do sets the attach parameters .
5291	Do sets the discover targets .
5292	Do sets the remote locations .
5293	WithPatterns adds the patterns to enable params
5294	WithHandleAuthRequests adds the handler to the enable params
5295	Do executes the fail request .
5296	WithBody adds the body to the response params
5297	WithResponsePhrase adds the responsePhrase to the responsePhrase params
5298	Do executes the request .
5299	WithURL adds the URL to the continue request params
5300	WithMethod adds the method to the continue request params
5301	WithPostData adds the post data to the continue request params
5302	WithHeaders adds the headers to the continue request params
5303	Do executes the request .
5304	Do executes the command .
5305	Do executes the specified command .
5306	WithIncludeCommandLineAPI adds the IncludeCommandLineAPI to the EvaluateOnCallFrame params
5307	Do executes the pause command .
5308	Do executes the pause on asynchronous call .
5309	Do removes the breakpoint .
5310	Do executes the resume command .
5311	Do sets the call stack depth .
5312	Do sets the blackbox patterns .
5313	Do sets the blackboxedRanges .
5314	WithURL adds the URL to the set breakpointByURL params
5315	WithURLRegex adds the URLRegex to the set breakpointByURL params
5316	WithScriptHash adds the script hash to the set breakpoint by URL params
5317	WithColumnNumber adds the column number to the set breakpointByURL params
5318	WithCondition adds the condition to the set breakpointOn function call params
5319	Do sets the breakpoints active .
5320	Do sets up pauses on exceptions .
5321	Do executes the set return value .
5322	WithDryRun adds the dryRun to the set script source params
5323	Do implements the SetSkipAllPausesParams interface .
5324	Do sets the variable value .
5325	WithBreakOnAsyncCall adds the breakOnAsyncCall to the stepInto params
5326	Do executes the step in step .
5327	Do executes the stepout command .
5328	Do executes the command .
5329	Listen implements the notifyBundle interface .
5330	ListenClose implements the ListenCloseFunc interface .
5331	Connected is part of the Bundler interface .
5332	Disconnected implements the notifyBundle interface .
5333	OpenedStream calls the wrapped StreamF .
5334	ClosedStream implements the notifyBundle interface .
5335	WithNoDial returns a new context with no Dial set
5336	GetNoDial returns the value of NoDial if any .
5337	WithDialPeerTimeout returns a context with the timeout set
5338	Open is part of the Driver interface .
5339	Prevpos - prevpos
5340	Last returns the last read in the buffer
5341	DeleteMostRecentBytes deletes the most recent bytes in the buffer
5342	NewFloat64RingBuf creates a new Float64RingBuf
5343	TwoContig get two slices of float64 slices
5344	Earliest returns the oldest value in the buffer
5345	Values returns a slice of float64 values
5346	NewAtomicFixedSizeRingBuf creates a new instance of AtomicFixedSizeRingBuf
5347	Reset resets the buffer
5348	NewPointerRingBuf creates a pointer to a pointer ring buffer .
5349	TwoContig returns the two slices of two slices .
5350	NumPage returns the number of pages .
5351	Font returns the font with the given name .
5352	Width returns the width of the font
5353	Encoder returns the encoding of the font .
5354	Interpret parses the given string and calls the given function .
5355	Open returns a new Reader for the given file .
5356	NewReader returns a new Reader with the given size .
5357	NewReaderEncrypted creates a new io . Reader at the given size .
5358	Trailer returns the current trailer .
5359	Kind implements Value .
5360	newBuffer returns a new buffer with the given offset .
5361	Paginate returns pagination information about the results .
5362	CascadeDelete deletes all documents in the collection
5363	cascadeDeleteWithConfig is used to cascade the model with the given config
5364	cascadeSaveWithConfig is used to cascade the given document with the given properties
5365	MapFromCascadeProperties takes a list of cascade properties and converts them into a map
5366	Connect to mongo
5367	lowerInitial returns the first letter of a string
5368	Find returns a ResultSet .
5369	RawInformationQuery performs a raw query
5370	NewClient creates a new client
5371	Close closes the connection .
5372	startTLSIfRequired performs a startTLS handshake with the given options .
5373	startStream starts a stream .
5374	IsEncrypted returns true if client is encrypted
5375	Recv receives a message from the server .
5376	Send a chat message
5377	SendOrg sends an org to the server
5378	Send keep alive
5379	SendHtml sends an HTML message .
5380	nextStart returns the next xml . StartElement
5381	JoinProtectedMUC is used to join a plain text member with the given parameters
5382	LeaveMUC is used to leave a member
5383	AttachBuffer attaches a file to the message .
5384	Attach attaches a file to the message .
5385	Inline adds a file to the message .
5386	AddHeader adds a new header
5387	Nolist returns a list of recipients
5388	Bytes returns the serialized form of the message .
5389	Send a message
5390	GetHeader returns the value of the named header .
5391	GetHeaderValues returns a slice of values for a given header .
5392	SetHeader sets a single header value .
5393	AddHeader adds a new header value to the envelope .
5394	DeleteHeader deletes a header by name .
5395	AddressList returns the addresses associated with the given key .
5396	Clone creates a deep copy of the envelope .
5397	ReadEnvelope reads an envelope from an io . Reader
5398	EnvelopeFromPart creates an Envelope from a part .
5399	ParseTextOnlyBody parses the Content - Type header .
5400	Parse multipart body
5401	matchHTMLBodyPart returns true if the HTML body part matches the content type .
5402	ensureCommaDelimitedAddresses ensures the comma delimited addresses are comma delimited .
5403	Date sets the date field .
5404	From sets the From field name .
5405	Subject sets the email subject
5406	To adds an email address to the list .
5407	ToAddrs sets the recipients to use .
5408	CC adds a CC header to the recipients .
5409	CCAddrs sets the recipients to use .
5410	ReplyTo sets the reply to use .
5411	Header adds a header to the MailBuilder .
5412	AddAttachment adds a part to the mailBuilder .
5413	AddFileAttachment adds an attachment to the mail .
5414	AddInline adds an inline part to the mail .
5415	Equals compares two MailBuilder objects .
5416	Encode writes the part to the writer .
5417	Encode a multipart header .
5418	encodeContent writes the content of the part to the buffer .
5419	selectTransferEncoding returns the transfer encoding for the given content .
5420	setParamValue sets the value of a param
5421	NewBase64Cleaner creates a new Base64Cleaner
5422	decodeToUTF8Base64Header decodes a base64 encoded string into a string
5423	Parse media type .
5424	fixMangledMediaType replaces the MIME media type with the given separator .
5425	Detect multipart message
5426	detectBinaryBody detects if a multipart body is a binary body .
5427	BearthMatchFirst returns the first child part of the p that matches the given matcher .
5428	BearthMatchAll returns a slice of parts that match the given matcher .
5429	DepthMatchFirst returns the deepest child part of the part .
5430	DepthMatchAll returns all parts that match the given matcher .
5431	ToASCII converts a string to UTF - 8 .
5432	NewPart creates a new part with the given content type .
5433	AddChild adds a child to p .
5434	TextContent returns true if the part is a text content type .
5435	setupHeaders reads the MIME parts of r .
5436	Parse the media type .
5437	convertFromDetectedCharset attempts to convert the charset to a charset .
5438	Clone returns a deep copy of p .
5439	ReadParts reads the multipart parts of an io . Reader
5440	parseParts populates the parts of the given reader
5441	UUID returns a random UUID
5442	NewQPCleaner creates a new QPCleaner
5443	Error implements the Error interface .
5444	addError adds an error to the list .
5445	addWarning adds a warning message .
5446	Wrap takes a slice of strings and appends them to the given slice .
5447	ConvertToUTF8String converts a byte slice to UTF - 8 encoded string .
5448	JoinAddress joins a list of mail addresses
5449	Printf implements the fmt . Printf interface .
5450	EnvelopeToMarkdown writes an envelope to w .
5451	FormatPart writes an enmime . Part to w .
5452	newBoundaryReader creates a new boundary reader .
5453	Read reads the next boundary from the buffer
5454	Next reads a single line from the reader and returns true if the boundary ends .
5455	Parse parses an object into an object
5456	Assign assigns a value to an array of bytes .
5457	Create a new RClient
5458	NewRClientWithAuth creates a new RClient
5459	Register registers a custom generator .
5460	Fuzz fuzzes struct fields
5461	findFakeFunctionFor returns a function that looks for the given fmo .
5462	Apply applies the provided options .
5463	ToOption converts options to an option
5464	waitThenClose waits until the event channel is closed .
5465	send sends an event to the channel .
5466	NewMovingAverage creates a MovingAverage with the given values .
5467	Set sets the value of the variable
5468	calcKeys50 takes a salt and a salt and computes them .
5469	getKeys - get the set of keys
5470	checkPassword verifies that the password is valid .
5471	parseFileEncryptionRecord parses a file encryption record
5472	parseEncryptionBlock parses an encryption block .
5473	newArchive50 creates a new fileBlockReader
5474	Read implements the io . Reader interface .
5475	ReadByte implements the io . Reader interface .
5476	newCipherBlockReader returns a new cipherBlockReader .
5477	newAesDecryptReader returns a new instance of a cipherBlockReader .
5478	limitByteReader returns a new instance of limitedByteReader .
5479	Mode returns the file mode of the file .
5480	nextBlockInFile reads the next block in the packfile .
5481	next returns the next file block .
5482	Read implements the io . Reader interface .
5483	Read implements io . Reader
5484	Next returns the next file header
5485	NewReader creates a new Reader from r .
5486	OpenReader opens a new volume .
5487	getV3Filter returns the v3 filter from the given code .
5488	init initializes the decoder .
5489	readBlockHeader reads the block header .
5490	readCodeLengthTable reads the codeLength table from the bitReader .
5491	Replace a slice of states
5492	expandStates expands the current state of the current state .
5493	pushByte adds a byte to the heap .
5494	successByte returns the next successor of i .
5495	successContext returns the current context for the given state .
5496	calcAes30Params is a helper function that takes a salt and salt and returns the key and IV .
5497	parseDosTime returns a time . Time from a Unix timestamp .
5498	decodeName decodes a name from buf .
5499	readExtTimes reads the extensions of a file .
5500	readBlockHeader reads a block header from the archive .
5501	newArchive15 creates a new fileBlockReader
5502	readFilter5Data reads the filter5 data
5503	writeByte writes a single byte to the buffer .
5504	copyBytes copies the contents of the window to the buffer .
5505	read reads data from the window .
5506	queueFilter adds a new filter block to the buffer .
5507	processFilters processes filters from the input stream .
5508	fill reads filters from the decoder .
5509	Read reads data from the stream .
5510	readFull is the same as io . ReadFull .
5511	findSig reads the signature from br .
5512	execute executes the command .
5513	newVM creates a new VM from memory .
5514	limitBitReader returns a bitReader that limits the number of bits to n .
5515	readUint32 reads a 32 bit integer
5516	Step 3 . 3
5517	Stem stem word
5518	Step 6
5519	Step 5 . 5
5520	Step 2
5521	Step 4 . 3
5522	Stem stemmed words from a word .
5523	Step 1
5524	step3 performs step 3 .
5525	isStopWord checks if a word is a stop word
5526	capitalizeYUI takes a word and capitalizes it .
5527	step2 performs step step .
5528	step3 step 3
5529	step0 is the step number of words .
5530	VnvSuffix returns the longest suffix of a word .
5531	step1 performs step step step .
5532	step2a step step
5533	removePerfectiveGerundEnding removes the longest suffix
5534	removeAdjectivalEnding removes trailing suffix entries
5535	Step2b takes a word and step number and attempts to move the wordball word .
5536	Step 4 . 3
5537	Step 5 . 5
5538	Stem stem word
5539	Stem stem word
5540	isStopWord returns true if the given word is a stop word .
5541	isStopWord checks if a word is a stop word
5542	New creates a new SnowballWord
5543	RemoveLastNRunes removes n runes
5544	resetR1R2 resets the R2R2 start to the R2R2
5545	Slice returns a slice of runes in the word .
5546	FitsInR1 checks if r is in R1
5547	FitsInR2 checks if r is in R2
5548	FitsInRV returns true if the word is in the set .
5549	FirstPrefix finds the first prefix of the word .
5550	HasSuffixRunes returns true if the word ends with suffixRunes .
5551	FirstSuffixIfIn is like FirstSuffix but returns the longest suffix runes in the startPos .
5552	RemoveFirstSuffixIfIn is the same as Remove but with suffixes
5553	RemoveFirstSuffix removes the first suffix of the word .
5554	FirstSuffix returns the first suffix of the word .
5555	Preprocess a word
5556	step0 performs step step step .
5557	step1b is the step number of words
5558	step2b takes a word and moves it to the previous step .
5559	capitalizeYs takes a word and capitalizes it .
5560	unapitalizeYs modifies the words of a word .
5561	stemSpecialWord converts a word to a stemmed string .
5562	isShortWord checks if a Snowball word is a short word
5563	Step 1
5564	Set sets a value for the given key .
5565	Get returns the value associated with the given key .
5566	Cleanup removes all goroutines associated with the current goroutine .
5567	getValues returns the values for the current goroutine .
5568	linkGRs links the child goroutine to the parent data .
5569	unlinkGRs removes all goroutines associated with the current goroutine .
5570	AppUri constructs an app uri for the given application .
5571	CurlAppWithTimeout executes an app with the given timeout and waits for it to finish .
5572	CurlApp runs a curl command with the given arguments .
5573	CurlAppRoot is the same as CurlApp except it returns the full path to the root .
5574	GetTags returns a slice of tags with the given prefix .
5575	GetTagsAsUniqueStrings returns the unique tags for the given prefix .
5576	isTerminator returns true if the rune is a non - empty string .
5577	uniquify duplicates a slice of strings
5578	New creates a new gin . Handler .
5579	Get returns the value from the gin context .
5580	GenerateRSAKeyPair generates an RSA private key pair
5581	Verify verifies that signature is valid .
5582	Encrypt encrypts data using RSA public key
5583	Sign signs a message with the given message .
5584	GetPublic returns the public key
5585	Decrypt decrypts data using RSA private key
5586	UnmarshalRsaPrivateKey unmarshals a private key from a private key .
5587	GenerateKeyPair generates a new private key pair .
5588	GenerateKeyPairWithReader generates and returns a new private key pair .
5589	GenerateEKeyPair is used to generate a new EKey pair
5590	UnmarshalPublicKey unmarshals a public key
5591	MarshalPublicKey marshals a public key to a protobuf message .
5592	UnmarshalPrivateKey unmarshals a private key
5593	MarshalPrivateKey encodes a private key .
5594	KeyEqual returns true if two Keys are equal
5595	GenerateECDSAKeyPair generates and returns a new private key pair .
5596	GenerateECDSAKeyPairWithCurve creates a new private key pair with the given curve .
5597	ECCDSAKeyPairFromKey creates a new ecdsa private key pair
5598	UnmarshalECDSAPrivateKey unmarshals a private key
5599	UnmarshalECDSAPublicKey unmarshals a public key
5600	Equals returns true if two keys are equal
5601	Sign signs data with the given data .
5602	Equals checks if two keys are equal
5603	Verify verifies that the signature is valid .
5604	GenerateSecp256k1Key generates a new Secp256k1 private key pair .
5605	UnmarshalSecp256k1PrivateKey unmarshals a secp256k1 private key .
5606	UnmarshalSecp256k1PublicKey unmarshals a secp256k1 public key .
5607	Equals returns true if the two keys are equal .
5608	Sign computes the signature of data .
5609	Equals returns true if two secp256k1 public keys are equal
5610	Verify verifies that the data is valid .
5611	Raw returns a copy of the private key .
5612	Sign implements the ed25519 interface .
5613	Equals returns true if two keys are equal
5614	Verify verifies that the data is valid .
5615	UnmarshalEd25519PublicKey unmarshals a ed25519 public key
5616	UnmarshalEd25519PrivateKey unmarshals an ed25519 private key .
5617	EditScriptForStrings is an alias for EditScript .
5618	EditScriptForMatrix returns an EditScript for the given matrix .
5619	WriteMatrix writes matrix to writer
5620	New creates a new Lockfile instance
5621	GetOwner returns the owner of the lockfile .
5622	TryLock attempts to lock the given lockfile .
5623	Unlock unlocks the lockfile .
5624	NewBase creates a new Base with the given configs .
5625	SetFallbackLogger sets the fallback logger
5626	AddLogger adds a new logger
5627	LogWithTime implements the Logger interface .
5628	Log logs a message with the given message .
5629	Warnm is the same as Warnm .
5630	NewTemplateWithFuncMap creates a new template with the given function map .
5631	Execute executes the template with the given message .
5632	NewTemplateMsg creates a new template message
5633	NewLogAdapterFor creates a new LogAdapter for the given base .
5634	SetAttr sets a key value pair .
5635	LogWithTime implements the LogAdapter interface .
5636	Log implements the Log interface .
5637	Dbgm is part of the Logger interface .
5638	NewAttrsFromMap creates a new Attrs from a map .
5639	NewAttrsFromAttrs creates a new Attrs with the given attributes .
5640	MergeAttrs merges the given attributes into this attribute .
5641	SetAttr sets a value for a given key .
5642	GetAttr returns the value associated with the given key .
5643	RemoveAttr removes an attribute
5644	Attrs returns a map of attributes .
5645	Debugm is part of the curDefault interface .
5646	Infom is an alias for Infom .
5647	Warningm is a convenience function for adding a warning message .
5648	Errm is an alias for Errorm .
5649	Errorm is the same as Errorm .
5650	Fatalm is part of the curDefault interface .
5651	Dief is a convenience wrapper around the current process .
5652	Diem is an alias for Diem .
5653	ToLogLevel converts a string to a LogLevel
5654	CallErr calls the given function and returns the error .
5655	New creates a new instance of StackdriverHook
5656	Fire starts the logrus logrus .
5657	Levels is an Option to set the log levels to use .
5658	ProjectID specifies the project ID
5659	EntriesService sets the logging entries service
5660	LoggingService creates an Option that sets the logging service .
5661	ErrorService sets the error service
5662	HTTPClient returns an Option that sets the HTTP client for the HTTP client .
5663	MonitoredResource is an Option to set the monitored resource .
5664	ErrorReportingLogName is an Option to set the name of the error logging log .
5665	Labels is an Option to set the labels on the stack
5666	PartialSuccess is an Option to set whether or not the hook was successful .
5667	GoogleComputeCredentials returns an Option that sets the Google Cloudstack credentials for the given service account .
5668	NewEncoder creates a new Encoder using the given codec .
5669	NewDecoder returns a new decoder for the given reader .
5670	NewStreamEncoder returns a new StreamEncoder .
5671	NewStreamDecoder returns a new StreamDecoder .
5672	Register registers a custom codec .
5673	Unregister removes a mimetype .
5674	Lookup returns the codec for the given mimetype .
5675	Codecs returns a map of registered codecs .
5676	Type returns the string representation of the error .
5677	Install registers an adapter .
5678	AdapterOf returns an adapter for the given type .
5679	AppendDuration appends a time . Duration to a byte slice .
5680	fmtInt formats a uint64 to a string .
5681	NewDecoder creates a new decoder .
5682	NewStreamDecoder creates a new StreamDecoder .
5683	Unmarshal unmarshals data into v .
5684	String returns the string representation of the type .
5685	zeroValueOf returns the zero value of the given type .
5686	NewValueParser creates a new ValueParser
5687	ParseTag parses a tag string .
5688	NewEncoder creates a new Encoder .
5689	NewStreamEncoder creates a new stream encoder .
5690	NewPrettyEncoder returns a new encoder .
5691	NewPrettyStreamEncoder returns a new StreamEncoder .
5692	Marshal marshals v to a byte slice
5693	NewEncoder creates a new Encoder .
5694	EncodeArray encodes an array of arrays .
5695	EncodeMap encodes a map .
5696	NewStreamEncoder creates a new StreamEncoder .
5697	Open initializes the stream .
5698	Close closes the stream .
5699	Encode implements the Encoder interface .
5700	newStructType creates a new struct type .
5701	lookup looks up a struct type by t .
5702	clear removes all registered types .
5703	CheckUint64Bounds returns an error if the value overflows .
5704	CheckInt64Bounds returns an error if the int64 is overflowed .
5705	NewDecoder creates a new decoder .
5706	Decode decodes the data into v .
5707	DecodeArray decodes an array value .
5708	DecodeMap decodes a map value .
5709	NewStreamDecoder creates a new StreamDecoder .
5710	Len returns the number of bytes in the stream .
5711	Err returns the last error encountered .
5712	Decode decodes the data into v .
5713	Encoder creates a new stream encoder .
5714	Initialize the default flags
5715	LevelFromString creates a Level from a string
5716	NewBackend creates a new instance of the backend .
5717	callsite returns the file name and line number of calls .
5718	Print writes a message to the log .
5719	Logger returns a new logger with the given subsystem tag .
5720	Trace logs a message .
5721	Tracef logs a message at level Trace level .
5722	Debug logs a message .
5723	Debugf prints a debug message .
5724	Info implements Logger .
5725	Infof prints a formatted log message .
5726	Warn implements Logger interface
5727	Warnf logs a message at level Warn level .
5728	Error logs an error message .
5729	Errorf prints a message to the logger .
5730	Critical logs a message .
5731	Criticalf prints a critical log message .
5732	Level returns the current log level .
5733	SetLevel sets the log level .
5734	Concat concatenates two Permission
5735	HasPermission returns true if permission is allowed
5736	ConcatPermissioner concatenates multiple Permissioners
5737	HasPermission returns true if the given permission exists in the list
5738	Register a checker
5739	NewPermission creates a new Permission
5740	Get returns a Checker by name
5741	isPtrFromHeap checks if the given address is a pointer to a pointer
5742	IsPtr returns true if the given address is a pointer to a pointer .
5743	FindObject returns the object at the given address .
5744	ForEachObject iterates over all objects in the process .
5745	ForEachRoot calls fn for each root in the process .
5746	Addr converts an address to core . Address
5747	Size returns the size of the heap .
5748	Type returns the type of the object .
5749	ForEachRootPtr calls fn for each root of the root .
5750	edge1 calls fn for each node in r .
5751	setHeapPtr sets the heap pointer to the heap .
5752	findHeapInfo returns the heap info for the given address .
5753	allocHeapInfo allocates the heap info for the given address .
5754	runtimeName returns the runtime name for the runtime .
5755	readRuntimeConstants reads the runtime constants .
5756	add adds a function to the table .
5757	sort sorts the function funcs .
5758	find finds the function with pc .
5759	read reads the value of pc .
5760	readVarint reads a varint
5761	useLine returns the usage line for the command
5762	commandPath returns the path to the command
5763	readCore reads and returns a copy of the core . Process .
5764	typeName returns the name of the type .
5765	fieldName returns a field name for a field .
5766	typeFieldName returns the field name for the type field .
5767	FindFunc finds a function by address
5768	Core creates a process from a core . Process .
5769	Address returns the address of the region .
5770	Int returns the value of the region .
5771	Uintptr returns the current value of the region .
5772	Cast returns a copy of the region .
5773	Deref returns a copy of r .
5774	Uint64 returns the current value of the region .
5775	Uint32 returns the uint32 value of the region .
5776	Int32 returns the int32 value of the region .
5777	Uint16 returns the current value of the region .
5778	Uint8 returns the uint8 value of the region .
5779	String returns the string value of the region .
5780	SlicePtr returns a copy of the region .
5781	SliceLen returns the length of the slice .
5782	Field returns the region with the specified name .
5783	ReadUint8 returns the uint8 value at the given address .
5784	ReadUint16 returns the uint16 at the given address .
5785	ReadUint32 returns the uint32 at the given address .
5786	ReadUint64 returns the uint64 value at the given address .
5787	ReadInt8 reads an int8 from the address
5788	ReadInt16 reads an int16 from the address
5789	ReadInt32 reads a 32 - bit integer from the address .
5790	ReadInt64 reads a 64 - bit integer from the address .
5791	ReadUintptr reads a uint64 from the address
5792	ReadPtr reads a pointer to a pointer
5793	ReadCString reads a CString from the address
5794	Source returns the name of the file .
5795	findMapping returns the mapping for a given address
5796	Max returns the largest address
5797	Min returns the smallest address
5798	Align returns the address of x .
5799	initialize initializes the node tree .
5800	calculate iterates over all vertices in the tree .
5801	eval computes the vName for the given v .
5802	compress adds v to d .
5803	link adds a node to the dom .
5804	reverse reverses the order of the idempotent .
5805	calcSize computes the size of the node .
5806	objField returns a string representation of a field .
5807	Readable returns true if the address is readable
5808	ReadableN returns true if n is readable .
5809	splitMappingsAt splits the mappings at the given address .
5810	DynamicType returns the type of the given type .
5811	Create creates a new btrfs file
5812	Resolve returns the IP address of a given URL .
5813	Equal returns true if two tokens are equal
5814	newDefaultClassifier creates a new token classifier
5815	Next returns the next token
5816	NewTokenizer creates a new Tokenizer
5817	Split splits a string into a slice of strings .
5818	Between returns the string between left and right
5819	BetweenF is a convenience wrapper around Between .
5820	Camelize converts a string to camel case
5821	Capitalize capitalizes a string .
5822	CharAt returns the char at the given index .
5823	CharAtF returns a function that returns the string at the given index .
5824	ChompLeft removes the beginning of the given prefix
5825	ChompLeftF returns a function that returns a function that removes characters from the beginning of the given prefix .
5826	ChompRight removes suffix from s
5827	ChompRightF returns a function that removes characters from the given suffix .
5828	ClassifyF takes a string and converts it to Classify
5829	Clean replaces spaces with spaces
5830	Dasherize sanitizes a string
5831	EscapeHTML returns a copy of the given string .
5832	DecodeHTMLEntities unescapes the given string .
5833	EnsurePrefixF creates a function that returns a function that adds prefix to the string .
5834	EnsureSuffixF creates a function that returns a function that adds the suffix to the string .
5835	Humanize returns a human - readable version of the string .
5836	Iif returns true if the given condition is true otherwise false
5837	IndexOf returns the index of needle in s or - 1 if not found .
5838	IsLower returns true if the given string is lower case letter .
5839	IsUpper returns true if the string is an upper case letter .
5840	Left removes n characters from string
5841	LeftF returns a function that takes a number of characters left to right
5842	Al Letters converts a string to a slice of strings
5843	Lines converts a string to a slice of strings
5844	Map iterates over a slice of strings
5845	Match returns true if the pattern matches the pattern .
5846	tasks is the main entry point for the project
5847	Pad returns the length of s with c .
5848	PadF is like Pad but returns a function that takes care of n times .
5849	PadLeft pad string to string
5850	PadLeftF is like PadLeft but returns a function that wraps the given string .
5851	PadRightF is like PadRight but returns a function that takes care of n times .
5852	Pipe returns a copy of the given string
5853	QuoteItems quotes an array of strings
5854	ReplaceF returns a function that returns a function that replaces all occurrences of new strings with the same name .
5855	ReplacePatternF is like ReplacePattern but accepts a replacement string .
5856	Reverse reverses a string
5857	RightF returns a function that invokes the right number of characters .
5858	Slice returns the string slice of the string slice .
5859	SliceF creates a new slice with a slice of strings .
5860	SliceContains checks if a slice contains the given value .
5861	SliceIndexOf returns the index of the first element in a slice or - 1 if it exists .
5862	Slugify sanitizes a string and returns its slug
5863	StripPunctuation removes punctuation from a string
5864	StripTags removes tags from string
5865	Substr returns the portion of the string at the given index .
5866	SubstrF returns a function that returns a function that invokes the specified number of characters .
5867	TemplateWithDelimiters is similar to TemplateWithDelimiters but with a delimiters
5868	ToArgv converts a string to a list of arguments
5869	ToBool converts a string to bool
5870	ToBoolOr converts a string to a bool or returns the default value if it fails .
5871	ToIntOr converts a string to an int or returns the default value .
5872	ToFloat32Or converts a string to float32
5873	ToFloat64Or converts a string to float64
5874	UnescapeHTML unescapes the given string
5875	WrapHTML wraps the given string with HTML tags .
5876	WrapHTMLF wraps an HTML string with the given tag .
5877	ReapChildren is used to reap the children of the process .
5878	SdNotify sends a systemd notification to the system
5879	NewAuthenticator creates a new authenticator
5880	Endpoint returns an http . Handler for the given prefix
5881	Unique returns a copy of the given slice of ids .
5882	Contains returns true if the given object id exists in the list
5883	Includes returns true if all of the objects in the subset are included in the subset .
5884	Require modifies the specified modules .
5885	Enqueue enqueues a job
5886	A creates an Authorizer
5887	Run creates a new authorizer
5888	And combines two authorizer and returns an authorizer
5889	Or returns an authorizer that matches the authorizer
5890	Enqueue adds a job to the queue .
5891	Callback enqueues a callback
5892	NewWatcher creates a new Watcher
5893	Add a stream
5894	Action creates a fire . Action
5895	Write returns true if the operation is a write operation
5896	String returns the string representation of the operation .
5897	Query returns the filters that match the filters
5898	Respond writes the given value to the response .
5899	EnsureApplication creates a new application
5900	EnsureFirstUser creates a new user in the store
5901	Callback returns a fire . Callback
5902	OpenStream opens a stream .
5903	Close closes the stream .
5904	AddTokenIndexes adds tokens to the indexer
5905	GetTokenData returns token data
5906	Sets token data
5907	ValidSecret returns true if the given secret is valid .
5908	HashSecret hashes the application secret .
5909	ValidPassword returns true if the given password is valid .
5910	HashPassword hashes the password and clears it .
5911	MustCreateStore is like CreateStore but panics on error .
5912	CreateStore creates a new store
5913	C returns the mongo collection for the given model .
5914	NewAssetServer returns a new http . Handler that serves assets
5915	Default grant strategy
5916	DefaultTokenData returns the default token data .
5917	GenerateToken generates a token for the given policy .
5918	ParseToken parses a JWT token from the policy .
5919	E creates a new enforcer rule
5920	MustGet gets a value from the model .
5921	MustSet panics if the field does not exist .
5922	NewGroup creates a new controller
5923	Add adds controllers to the group .
5924	Endpoint returns an http . Handler for the group
5925	Add adds an index to the database .
5926	AddRaw adds an index to the index
5927	Ensure creates all indexes in the store .
5928	NewCatalog creates a new Catalog .
5929	Add adds models to the catalog .
5930	All returns all the models in the Catalog .
5931	Visualize returns a visualization of the Catalog .
5932	NewErrorReporter returns a function that writes the error to the given writer .
5933	EnsureIndexes creates indexes for the given store
5934	E returns an error with the given format .
5935	Compose creates a new http . Handler from the given chain .
5936	Includes returns true if a subset contains all elements in the subset .
5937	Intersect returns a list of elements that are in the listA .
5938	E creates an error .
5939	RootTracer creates a new tracer for the request
5940	NewTracerFromRequest creates a new Tracer from an HTTP request
5941	NewTracer creates a new tracer
5942	Push starts a new span
5943	Last returns the last span .
5944	Tag adds a tag to the stack
5945	Log implements the Logger interface
5946	Context returns a new context with the last span added .
5947	Pop removes the span from the stack
5948	Finish closes all spans
5949	NewPool creates a new Pool
5950	Add a new task
5951	Run the pool
5952	NewBodyLimiter creates a new BodyLimiter
5953	LimitBody overrides the original body of the request .
5954	C creates a new Callback with the given matcher .
5955	Only returns a matcher that matches the given operations .
5956	BasicAuthorizer creates a callback that can be used to authenticate the request .
5957	ModelValidator is called when a model is valid .
5958	TimestampValidator is called when creating a new model .
5959	RelationshipValidator returns a callback function that validates models for the given model
5960	Inspect all workers
5961	NewRule creates a Rule
5962	AddUnmatch adds a unmatch expression to the rule .
5963	Run the content of the rule
5964	NewSecret creates a secret object
5965	NewObject returns a pointer to a new object .
5966	SetMetadata sets metadata for given key .
5967	GetMetadata returns the value associated with the given key .
5968	GetMetadataAll returns all metadata values associated with this object .
5969	SetRule sets the rule
5970	SetObject sets the Object field of Exception .
5971	SetNline sets the nline of Exception
5972	SetContent sets the content of the exception
5973	Run returns true if the exception matches the given secret .
5974	AddRule add rule
5975	LoadRulesFromFile load rules from file
5976	LoadRulesFromDir loads rules from directory
5977	DefaultRulesPath returns the default rules path
5978	EnableRule enables a rule
5979	DisableRule disables a rule
5980	EnableRuleByRegexp enables rule by regexp
5981	DisableRuleByRegexp disables rule by regexp
5982	LoadObjects loads all objects from source
5983	GroupObjectsByMetadata groups objects by metadata
5984	Groups by primary key
5985	Add an exception
5986	LoadExceptionsFromFile loads the exceptions from a file
5987	Print plain results
5988	printJsonResults prints results to stdout
5989	NewXor64Source creates a new Xor64Source .
5990	xor64 takes a 64 bit integer and returns the result .
5991	next returns the next uint64 value .
5992	Seed creates a new XorSource with the given seed .
5993	NewFrameSet creates a new FrameSet from a string .
5994	handleMatch parses a set of strings and adds it to the set .
5995	Index returns the position of a frame in the set .
5996	Frame returns the frame at the given index .
5997	HasFrame returns true if the frame is in the set .
5998	FrameRangePadded returns the string representation of the frame set .
5999	Normalize returns a new FrameSet .
6000	FramesToFrameRange converts a slice of frames to a string
6001	frameRangeMatches returns a slice of strings that match the given frange .
6002	toRange converts start to a slice of ints
6003	NewWorkManager creates a new work manager
6004	processSources is a long running routine to process files
6005	isInputDone returns true if all inputs have been processed .
6006	close inputs
6007	load loads the given paths .
6008	loadRecursive takes a list of paths and adds them to the output channel .
6009	preparePaths takes a list of paths and returns a list of filenames and a list of filenames .
6010	PadFrameRange takes a string representation of a frame and returns a padded string .
6011	zfillString replaces z with z with z .
6012	zfillInt returns a string with zeros zeros z .
6013	NewInclusiveRange creates a new InclusiveRange
6014	String returns a string representation of the InclusiveRange .
6015	End returns the end of the range .
6016	Len returns the number of items in the range .
6017	Min returns the minimum value of the range
6018	Max returns the maximum value of the range
6019	Contains returns true if the given value is within the range .
6020	clestInRange returns the closest value closest to the given value .
6021	Index returns the index for the given value
6022	String returns the string representation of the InclusiveRanges .
6023	Len returns the number of blocks in the list .
6024	Start returns the start of the range .
6025	End returns the index of the end of the range .
6026	Min returns the minimum value in the range .
6027	Max returns the maximum value in the range .
6028	numRanges returns the number of ranges in the range .
6029	rangeAt returns the inclusiveRange at the given index .
6030	Append adds a new range to the list .
6031	AppendUnique adds a unique range to the list .
6032	Contains returns true if the given value contains the given value .
6033	Index returns the index of the first occurrence of the given value .
6034	FrameRange returns the range of frames .
6035	FrameRangePadded returns the first line range in the sequence .
6036	Index returns the file at the given index .
6037	SetDirname sets the directory name .
6038	SetPadding sets the pad character of the sequence
6039	SetPaddingStyle sets the padding for the sequence
6040	SetExt sets the file extension .
6041	SetFrameRange sets the frames in the sequence .
6042	Len returns the number of frames in the sequence .
6043	String returns a string representation of the FileSequence .
6044	Copy returns a copy of this FileSequence
6045	NewClient creates a new client
6046	UnmarshalXML unmarshals a header from an XML stream .
6047	UnmarshalXML implements xml . Unmarshaler interface .
6048	Call performs a soap action
6049	JSONDoc reads a JSON document from the given path .
6050	AddLoader adds a loader to the list .
6051	JSONSpec parses the JSON spec and returns the parsed document
6052	Embedded creates a new Document
6053	Spec loads a Document from the given path .
6054	Analyzed creates a Document from JSON data .
6055	Expanded expands the raw document
6056	ResetDefinitions resets the schema definitions
6057	Pristine analyzes the raw document .
6058	OpenDb opens a GeoIP database .
6059	GetOrg returns the org name for the given IP
6060	GetRegion returns the country code for the given IP address .
6061	GetRegionName returns the region name for the country code .
6062	Gets country code by IP address .
6063	NewRotatingFileHandler creates a new RotatingFileHandler
6064	Close closes the file descriptor
6065	String returns the string representation of the Level .
6066	New creates a new logger .
6067	Close closes the logger .
6068	SetLevelByName sets the log level by name .
6069	Output implements the Logger interface .
6070	Output JSON to the logger .
6071	Print calls go log . Output . Arguments are handled in the manner of fmt . Print .
6072	Println calls go log . Output . Arguments are handled in the manner of fmt . Println .
6073	Debug calls Output . Arguments are handled in the manner of fmt . Print .
6074	Debugln calls Output . Arguments are handled in the manner of fmt . Println .
6075	Error calls Output . Arguments are handled in the manner of fmt . Print .
6076	Errorln calls Output . Arguments are handled in the manner of fmt . Println .
6077	Info calls Output . Arguments are handled in the manner of fmt . Print .
6078	Infoln logs with args . Arguments are handled in the manner of fmt . Println .
6079	Warn logs with args . Arguments are handled in the manner of fmt . Print .
6080	Warnln calls go log . Arguments are handled in the manner of fmt . Println .
6081	NewStreamHandler creates a new StreamHandler .
6082	Right appends a string to the right
6083	New creates a new RSAPI client
6084	setupMetadata creates a set of resource metadata for ssd .
6085	recordTypes recursively recursively recursively recursively recursively recursively .
6086	appendSorted appends a new ActionParam to params
6087	Parse data type
6088	parseParam parses a parameter into a ActionParam
6089	newParam creates a new ActionParam from a path .
6090	toGoReturnTypeName returns the type of the return type .
6091	toGoTypeName converts a Go type name to a Go type name .
6092	prettyify returns a string representation of an object .
6093	isBuiltInType returns true if the given type is a built - in type .
6094	MatchHref returns true if the action matched by the action pattern
6095	Substitute takes a slice of variables and returns a substituted string and a set of variables that are not found .
6096	MarshalJSON returns the JSON encoding of the FileUpload
6097	Write multipart params
6098	PerformRequest performs an HTTP request
6099	PerformRequestWithContext performs a request with a custom context
6100	LoadResponse unmarshals the response into a JSON object
6101	ScheduleLocator creates a new schedule locator
6102	TemplateLocator creates a new TemplateLocator
6103	fetchDetails fetches the details of the environment details from the environment .
6104	buildAliases builds a list of aliases for the SSH config
6105	serverArray retrieves a list of servers by name
6106	server returns the server with the given name
6107	toPackageName converts a version to a package name .
6108	loadFile reads the given file .
6109	This is the main entry point for testing
6110	Run the command line
6111	CreateJSONResponse creates an http . Response from a byte slice
6112	AccountLocator creates a new account locator
6113	AccountGroupLocator creates a new AccountGroupLocator
6114	AlertLocator creates a new AlertLocator .
6115	AlertSpecLocator creates a new AlertSpecLocator
6116	AuditEntryLocator creates a new AuditEntryLocator
6117	BackupLocator creates a new BackupLocator
6118	ChildAccountLocator creates a new ChildAccountLocator
6119	CloudLocator creates a new cloud locator .
6120	CloudAccountLocator creates a cloud account locator
6121	CookbookLocator creates a new instance of CookbookLocator .
6122	CookbookAttachmentLocator creates a new instance of CookbookAttachmentLocator .
6123	CredentialLocator creates a new CredentialLocator .
6124	DatacenterLocator creates a new DatacenterLocator
6125	DeploymentLocator creates a new DeploymentLocator .
6126	HealthCheckLocator creates a new health check locator
6127	IdentityProviderLocator creates a new IdentityProviderLocator
6128	ImageLocator creates a new instance of ImageLocator
6129	InputLocator creates a new InputLocator
6130	InstanceLocator creates a new instance locator .
6131	InstanceTypeLocator creates a new instance type locator
6132	IpAddressLocator creates a new IpAddressLocator
6133	IpAddressBindingLocator creates a new IpAddressBindingLocator
6134	MonitoringMetricLocator creates a new MonitoringMetricLocator
6135	MultiCloudImageLocator creates a new instance of MultiCloudImageLocator .
6136	MultiCloudImageMatcherLocator creates a new instance of MultiCloudImageMatcherLocator
6137	MultiCloudImageSettingLocator creates a new LocationLocator
6138	NetworkLocator creates a new network locator
6139	NetworkGatewayLocator creates a new network gateway locator
6140	NetworkOptionGroupLocator creates a new NetworkOptionGroupLocator
6141	NetworkOptionGroupAttachmentLocator creates a new NetworkOptionGroupAttachmentLocator
6142	Oauth2Locator creates a new Oauth2Locator
6143	PermissionLocator creates a PermissionLocator
6144	PlacementGroupLocator creates a new PlacementGroupLocator .
6145	PreferenceLocator creates a new PreferenceLocator .
6146	PublicationLocator creates a new publicationLocator
6147	PublicationLineageLocator creates a new publicationLineageLocator
6148	RecurringVolumeAttachmentLocator creates a new RecurringVolumeAttachmentLocator
6149	RepositoryLocator creates a new RepositoryLocator
6150	RepositoryAssetLocator creates a RepositoryAssetLocator
6151	ResourceGroupLocator creates a new resource group locator
6152	RightScriptLocator creates a new right script locator
6153	RightScriptAttachmentLocator creates a new location locator
6154	RouteLocator creates a new RouteLocator
6155	RouteTableLocator creates a new RouteTableLocator
6156	RunnableBindingLocator creates a new RunnableBindingLocator
6157	SchedulerLocator creates a new SchedulerLocator .
6158	SecurityGroupLocator creates a new SecurityGroupLocator
6159	SecurityGroupRuleLocator creates a SecurityGroupRuleLocator
6160	ServerLocator creates a new ServerLocator
6161	ServerArrayLocator creates a new ServerArrayLocator
6162	ServerTemplateLocator creates a new ServerTemplateLocator
6163	ServerTemplateMultiCloudImageLocator returns a new instance of ServerTemplateMultiCloudImageLocator .
6164	SessionLocator creates a new session locator
6165	SshKeyLocator creates a new SshKeyLocator
6166	SubnetLocator creates a SubnetLocator
6167	TagLocator creates a new TagLocator
6168	TaskLocator creates a new task locator
6169	UserLocator creates a new UserLocator
6170	UserDataLocator creates a new UserDataLocator
6171	VolumeLocator creates a new VolumeLocator .
6172	VolumeAttachmentLocator creates a VolumeAttachmentLocator .
6173	VolumeSnapshotLocator creates a new VolumeSnapshotLocator .
6174	VolumeTypeLocator creates a new VolumeTypeLocator
6175	RegisterCommands registers the actioncommands
6176	ShowCommandHelp displays the help for the given command
6177	ShowAPIActions shows API actions
6178	ShowHelp displays the help text for the command
6179	ParseCommandAndFlags parses a command and returns a CommandTarget and an error if any .
6180	validateFlagValue returns an error if the value is invalid .
6181	buildQuery builds a new APIParams from a list of values .
6182	buildPayload creates a new APIParams from a list of values .
6183	shortenPattern returns the longest pattern matching the given pattern and suffix .
6184	cleanDescription removes all required fields from the doc
6185	fileExists checks if a given file exists
6186	AnalysisSnapshotLocator creates a new AnalysisSnapshotLocator
6187	BudgetAlertLocator creates a new BudgetAlertLocator .
6188	CloudBillLocator creates a new CloudBillLocator .
6189	CloudBillMetricLocator creates a new CloudMetricLocator .
6190	CurrentUserLocator creates a new CurrentUserLocator
6191	InstanceCombinationLocator creates a new instanceCombinationLocator
6192	InstanceMetricLocator creates a new instance metric locator
6193	InstanceUsagePeriodLocator creates a new instance usage period locator
6194	PatternLocator creates a new PatternLocator
6195	ReservedInstanceLocator creates a new ReservedInstanceLocator .
6196	ReservedInstancePurchaseLocator creates a new ReservedInstancePurchaseLocator
6197	ScenarioLocator creates a new ScenarioLocator
6198	ScheduledReportLocator creates a new ScheduledReportLocator
6199	TempInstancePriceLocator creates a new TempInstancePriceLocator .
6200	UserSettingLocator creates a new UserSettingLocator
6201	readAllAsync reads data from the given io . Reader
6202	extractArg extracts the first argument from args
6203	write writes b to the output file .
6204	AppliedPolicyLocator creates a new AppliedPolicyLocator
6205	ApprovalLocator creates a new ApprovalLocator
6206	InidentLocator creates a new IncidentLocator
6207	PolicyTemplateLocator creates a new policy template locator
6208	PublishedTemplateLocator creates a new published template locator
6209	DebugCookbookPathLocator returns a new instance of DebugCookbookPathLocator .
6210	DockerControlLocator creates a DockerControlLocator
6211	EnvLocator creates a new environment locator .
6212	LoginControlLocator creates a login control locator
6213	ProcLocator creates a new ProcLocator
6214	Rl10Locator creates a new Rl10Locator .
6215	TSSLocator creates a TSSocator
6216	TSSControlLocator creates a new TSSControlLocator
6217	TSSPluginLocator creates a new TSSPluginLocator
6218	NewAngularWriter creates a new angular writer
6219	WriteResource renders an angular template
6220	path returns the full path of the action .
6221	mandatory returns true if the param is mandatory
6222	New creates a new API instance
6223	FromCommandLine creates a new client from the command line arguments
6224	CanAuthenticate returns true if the authenticated user is authenticated
6225	Encrypt encrypts a plaintext string and returns the ciphertext .
6226	Decrypt a plaintext string
6227	guessType guesses the type based on refID
6228	addType adds a new type to the api .
6229	extractCmdLineParams is a helper function to extract the parameters of the action param .
6230	NewMetadataWriter creates a new MetadataWriter
6231	WriteHeader writes the header to w .
6232	WriteMetadata writes metadata to writer
6233	location returns the location of the action .
6234	New creates a new instance of RSapi .
6235	fromAPI creates a new api object
6236	BuildRequest builds a request for an action .
6237	setupMetadata creates a new set of resources
6238	NewDisplayer creates a new Displayer from an http . Response .
6239	ApplySingleExtract applies the given Extract to the Displayer .
6240	ApplyExtract applies the given selector to the Displayer .
6241	ApplyHeaderExtract extracts the raw data from the response
6242	Output returns the output of the Displayer .
6243	NewAPIAnalyzer creates a new API analyzer
6244	Analyze analyzes the raw resources and returns it .
6245	AnalyzeAliases analyzes the aliases and maps them into aliases
6246	LocatorFunc returns the Locator for the given attributes .
6247	ParseRoute takes a list of routes and returns a list of paths that match the route .
6248	isDeprecated returns true if the given path is deprecated
6249	isQueryParam checks if a parameter is a query parameter
6250	isPathParam returns true if p is a parameter of path patterns
6251	Fetch audit entries
6252	formatTime formats a time . Time .
6253	Prints audit entries
6254	extractUnique removes duplicate entries from oldEntries
6255	getHref returns the link s href
6256	fail adds a new line to the message .
6257	params returns a comma separated string of parameters .
6258	paramsInitializer returns the initialised API declaration for the action .
6259	commandLine returns the command line arguments
6260	Convert a verb string to a verb
6261	escapeBackticks escapes backticks backticks
6262	AccountPreferenceLocator creates a new AccountPreferenceLocator
6263	ApplicationLocator creates a new ApplicationLocator .
6264	EndUserLocator creates a new EndUserLocator
6265	NotificationRuleLocator creates a new notification rule locator
6266	UserPreferenceLocator creates a new UserPreferenceLocator
6267	UserPreferenceInfoLocator creates a new UserPreferenceInfoLocator
6268	LoadConfig loads a client configuration from a file .
6269	CreateConfig creates a new client config
6270	fromAPI creates a new API from an rsapi . API .
6271	HostFromLogin creates a host name from a login string
6272	AnalyzeParam analyzes a parameter
6273	AnalyzeAttribute extracts an ActionParam from an attribute map .
6274	AnalyzeType analyzes the type of a type
6275	CreateType creates an object from a query string
6276	Ref returns the definition for the given reference .
6277	Type returns the type of the object
6278	Required returns a list of required fields .
6279	ID returns the ID of the ref .
6280	Service returns the service name of the endpoint .
6281	Method returns the method name of the endpoint
6282	NewTypeRegistry creates a new TypeRegistry
6283	GetNamedType returns the named type for the named type .
6284	CreateNamedType creates a new ObjectDataType
6285	CreateInlineType registers an object with the given name .
6286	FinalizeTypeNames sets the names of type names in the API .
6287	Merge merges two APIDescriptors together .
6288	FinalizeTypeNames normalizes the type names in rawTypes .
6289	uniqueTypeName returns a unique name for the given API type .
6290	MandatoryParams returns the parameters that are present in the Action .
6291	HasOptionalParams returns true if the action has any required parameters
6292	MakeUniq takes a base string and makes sure that it is unique
6293	NewClientWriter creates a new client writer
6294	WriteHeader writes a header to w .
6295	WriteResourceHeader writes a header to the client
6296	WriteType writes the type to the writer
6297	WriteResource writes resource to writer
6298	WithTrail returns a copy of this EvalCtx with a trailing string
6299	AnalyzeEndpoint analyzes an endpoint .
6300	NetworkInterfaceLocator creates a new NetworkInterfaceLocator
6301	NetworkInterfaceAttachmentLocator creates a new network attachment locator
6302	UnmarshalJSON implements the json . Unmarshaler interface
6303	ExecutionLocator creates a new instance of an ExecutionLocator
6304	NotificationLocator creates a new notification locator
6305	OperationLocator creates a new operation locator
6306	ScheduledActionLocator creates a new ScheduledActionLocator
6307	NewBasicAuthenticator creates a new Authenticator using the given username and password .
6308	NewSSAuthenticator creates a new SSHTAuthenticator
6309	newCookieSigner creates a new authenticator using the given accountID .
6310	Sign adds a login to the request .
6311	CanAuthenticate implements the Signer interface .
6312	refresh is used to refresh the cookie
6313	Sign adds the token to the request
6314	Sign adds the authentication secret
6315	Sign is used to sign a new session
6316	SetHost sets the host of the auther .
6317	CanAuthenticate returns true if the user is valid
6318	extractRedirectURL extracts the redirect URL from the response .
6319	buildURL constructs a URL for the given host and path .
6320	GetAction returns an action by name .
6321	HasLink returns true if the resource has the given name
6322	findMatches returns a list of paths that match the given href .
6323	NewPB returns a new instance of HTTPClient
6324	newVariableDumpClient creates a HTTPClient that uses the given http . Client .
6325	newRawClient creates a new http . Client with noCertCheck .
6326	DoHidden executes a request and returns the response .
6327	Do performs an HTTP request .
6328	doImp executes the HTTP request and returns the response .
6329	getClientWithoutTimeout returns a new http . Client with the given timeout
6330	dumpRequest is used to dump the HTTP request
6331	writeHeaders writes the headers to the buffer .
6332	Copy hidden headers
6333	validateCommandLine validates the command line arguments
6334	APIClient creates a new command client
6335	RegisterClientCommands registers client commands
6336	Interactive set the logger
6337	toPattern creates a PathPattern from the given verb and path .
6338	WithClientIP returns a context with the client IP set .
6339	ClientIP returns the client IP of the client .
6340	NewProducer creates a new producer
6341	StartProducer creates a new producer
6342	Start starts the producer
6343	Stop stops the producer .
6344	Publish a message
6345	PublishTo sends a message to the specified topic
6346	NewLocalEngine returns a new LocalEngine .
6347	validate makes sure the configuration is valid .
6348	defaults sets default values
6349	NewConsumer creates a new consumer .
6350	StartConsumer creates a new consumer
6351	Start starts the consumer .
6352	RateLimit takes a number of messages and returns them .
6353	Write writes the raw response .
6354	ReadResponse reads a response from r .
6355	backoff returns an exponential backoff for the given attempt number .
6356	String returns the string representation of the frame type .
6357	NewConsulEngine creates a new instance of ConsulEngine
6358	ParseMessageID parses a string representation of a MessageID .
6359	WriteTo implements io . WriterTo interface
6360	NewMessage creates a new message with the given id and body .
6361	Finish queues the message .
6362	Requeue queues a Requeue request .
6363	ReadCommand parses a command line .
6364	funcMapMaker create FuncMap
6365	Funcs overrides the template functions .
6366	Execute is the same as Execute .
6367	RegisterPath registers a file path
6368	Asset returns the contents of a file
6369	Glob implements the AssetFileSystem interface .
6370	NameSpace returns an instance of AssetFileSystem
6371	New creates a new Render instance
6372	RegisterViewPath register file paths
6373	SetAssetFS sets the asset filesystem
6374	Layout creates a new template
6375	Funcs returns a new template with the given function map .
6376	Execute executes a template
6377	RegisterFuncMap registers a function with the given name .
6378	Asset calls AssetFileSystem
6379	NewPlainClient creates a new plain text client
6380	Create creates a new uploader
6381	Open a GET request
6382	Sign signs the request with the given keys .
6383	Sign adds a signature to the request .
6384	Readdir implements the FileReader interface .
6385	Find returns the nodes that match the given path .
6386	Lex lexes the given xpath .
6387	MustParseXML is like ParseXML but panics on error .
6388	ParseXML parses the reader and returns an XML node .
6389	Call calls the wrapped function .
6390	Parse parses an XPath expression into an XPath expression .
6391	MustParse is like Parse but panics on error .
6392	Exec executes XPath .
6393	ExecBool is the same as Exec except it panics on error
6394	ExecNum is the same as Exec but returns the result as a number .
6395	ExecNode executes the XPath expression .
6396	MustExec is like Exec but panics on error
6397	ParseExec parses an XPath string and returns the result .
6398	CreateNode creates an XML node
6399	GetChildren returns the children of this node .
6400	GetAttrs returns the attributes of the node .
6401	ResValue returns the value of this node .
6402	Parse parses an XPath expression .
6403	GetToken returns the token
6404	ResValue returns the node s value
6405	Exec executes the given node and returns the result .
6406	String returns a string representation of n .
6407	Num converts s to float .
6408	BuildNS builds a list of namespace elements from an element .
6409	GetAttribute gets an attribute from an element
6410	GetAttributeVal returns the value of an attribute .
6411	GetAttrValOrEmpty returns the attribute value of a node .
6412	FindNodeByPos returns the node with the given position .
6413	Marshal marshals a node to w .
6414	MarshalStr returns a string representation of a node .
6415	NewLexer creates a new Lexer
6416	NewLexerString creates a new Lexer from a string
6417	Split splits a string into a slice of strings .
6418	Register adds an error to the registry .
6419	Get returns the ErrDescriptor for the given code .
6420	GetAll returns all registered errors .
6421	From converts an error to an Error .
6422	Descriptor returns an ErrDescriptor for the given error .
6423	GetAttributes returns the Attributes associated with the error .
6424	HTTPStatusCode returns the HTTP status code for the type
6425	HTTPStatusCode returns the HTTP status code of the error .
6426	HTTPStatusToType converts the HTTP status to a type .
6427	ToHTTP converts an error into an error .
6428	toImpl converts an error to an impl .
6429	MetadataFromIncomingContext extracts metadata from the given context .
6430	MetadataFromOutgoingContext extracts the metadata from the given context .
6431	TokenFromMetadata extracts the token from the metadata .
6432	TokenFromIncomingContext extracts the token from the given context
6433	OutgoingContextWithToken returns a new context with the given token set .
6434	KeyFromMetadata extracts the key from the metadata .
6435	KeyFromIncomingContext extracts the key from the given context
6436	OutgoingContextWithKey returns a new context with the given key .
6437	IDFromMetadata extracts the ID from the metadata .
6438	IDFromIncomingContext extracts the ID from the given context .
6439	OutgoingContextWithID returns a new context with the given ID .
6440	ServiceInfoFromMetadata extracts service - name information from metadata .
6441	ServiceInfoFromIncomingContext extracts the service metadata from the given context .
6442	OutgoingContextWithServiceInfo returns a shallow copy of the outgoing context with the given metadata .
6443	LimitFromMetadata extracts the limit from metadata .
6444	OffsetFromMetadata extracts the offset from the metadata .
6445	LimitAndOffsetFromIncomingContext returns the limit and offset for the given context
6446	OutgoingContextWithLimitAndOffset returns a new context with the given limit and offset .
6447	before returns true if i is before j .
6448	New implements the ErrDescriptor interface .
6449	WithNamespace returns a context with the namespace set
6450	Wrap returns a new Namespaced with the provided namespaces .
6451	WithField returns a new logger with the given name and value .
6452	WithFields returns a copy of the Namespaced interface with the given fields .
6453	Format returns a formatted message with the given attributes .
6454	fix returns a string representation of v .
6455	GRPCCode returns the grpc code for the type
6456	GRPCCodeToType converts a gRPC Code to a Type .
6457	GRPCCode converts an error to gRPC code .
6458	FromGRPC creates an error from a grpc error .
6459	ToGRPC converts an error to a grpc error .
6460	IsEnabled returns true if the namespace is enabled .
6461	Set sets the namespaces
6462	Cause returns the error if any .
6463	parseCode parses a string into a Code .
6464	UnaryServerInterceptor returns a new unary server interceptor for the given ConvertFunc .
6465	StreamServerInterceptor converts a ConvertFunc to a grpc . StreamServerInterceptor
6466	UnaryClientInterceptor creates a new unary client interceptors from a ConvertFunc
6467	StreamClientInterceptor creates a new StreamClientInterceptor from a ConvertFunc
6468	Interceptor creates a new stream client interceptor
6469	Wrap returns a log . Interface that wraps the given logger .
6470	NewCounter creates a new counter .
6471	NewRedisCounter creates a new RedisCounter
6472	NewLimiter creates a new Limiter
6473	WithInsecure returns a new TokenCredentials with an insecure token set .
6474	WithTokenFunc creates a new TokenCredentials object with the given function .
6475	GetRequestMetadata gets the token metadata from the request
6476	FieldsFromIncomingContext creates a structured fields from a context .
6477	String returns the string representation of the type .
6478	UnmarshalText implements the encoding . TextUnmarshaler interface .
6479	fromString converts a string representation of an error type to a type
6480	Start starts the stats loop
6481	NewSimple creates a new SimpleQueue .
6482	Wrap wraps the given logger with the given filters .
6483	WithFilters returns a new Filtered with the given filters .
6484	WithField implements the Filtered interface .
6485	WithFields implements the Filtered interface .
6486	FilterSensitive returns a filter that filters elements with the given keys .
6487	SliceFilter creates a new Filter based on the given filter .
6488	MapFilter creates a new Filter based on a filter .
6489	RestrictFilter restricts the given filter with the given filter .
6490	LowerCaseFilter creates a new Filter based on a filter .
6491	newBatchPoints creates a new instance of BatchPoints .
6492	NewSinglePointWriter creates a new SinglePointWriter .
6493	Write writes a point to the writer .
6494	WithScalingInterval creates a BatchWriterOption that sets the size of the batch .
6495	NewBatchingWriter creates a new BatchingWriter .
6496	Write adds a point to the writer .
6497	MustParseLevel is like ParseLevel but panics on error
6498	New creates a new Stream
6499	SetLogger sets the logger .
6500	CloseRecv closes the buffer .
6501	Stats returns the number of bytes sent in the stream
6502	Run starts the stream .
6503	ServerOptions returns a slice of grpc . ServerOptions
6504	ClientOptions returns a slice of gRPC client options
6505	UnaryServerInterceptor returns a new grpc . UnaryServerInterceptor that logs the RPCs .
6506	StreamServerInterceptor returns a new streaming server interceptor for streaming RPCs .
6507	UnaryClientInterceptor returns a grpc . UnaryClientInterceptor that logs the RPCs .
6508	StreamClientInterceptor returns a new streaming client interceptor for streaming RPCs .
6509	defaults sets default values
6510	Flush flushes the buffered data .
6511	New creates a new handler .
6512	HandleLog implements the Handler interface .
6513	New creates a new TTNRandom interface
6514	Names returns the names of the urls .
6515	String returns a string representation of the PerfDatum .
6516	RenderPerfdata returns a string representation of perfdata
6517	Exit prints the given status and message .
6518	NewCheckWithOptions creates a new Check with the given options .
6519	AddResult adds a new result to the check .
6520	AddResultf adds a new result to the check .
6521	String returns the string representation of the check .
6522	Exitf is an alias for Exit .
6523	Criticalf is like Critical but panics .
6524	Unknownf is an alias for Unknown .
6525	NewDefaultStatusPolicy creates a default status policy .
6526	NewStatusPolicy creates a new status policy .
6527	ParseRange parses a Range from a string
6528	Check checks if a value is within the range
6529	CheckInt returns true if the given int is valid .
6530	CheckUint64 returns true if the given uint64 is valid .
6531	NewClient creates a new client
6532	GetKeyMeta retrieves the key metadata for the given path
6533	GetKeysInDirMeta returns the keys in the given path
6534	GetKeyContent returns the public key content for the given path
6535	GetJobSummariesForProject returns the summaries for the given project .
6536	GetJobsForProject returns all the jobs for the given project .
6537	GetJob gets a job by ID .
6538	CreateJob creates a new job .
6539	CreateOrUpdateJob adds a job to the server .
6540	DeleteJob deletes a job by ID .
6541	JobSummary converts the result into a JobSummary
6542	GetSystemInfo returns information about the system .
6543	DateTime converts the timestamp to a time . Time .
6544	GetAllProjects returns all projects .
6545	GetProject gets a project by name .
6546	CreateProject creates a new project .
6547	DeleteProject deletes a project
6548	SetProjectConfig sets the config for the project .
6549	NewClient creates a new PBREST client .
6550	NewClientbyToken creates a new client with the given token .
6551	SetDepth sets the number of nodes in the cluster .
6552	ListDatacenters returns a list of datacenters
6553	CreateDatacenter creates a new datacenter
6554	GetDatacenter retrieves a datacenter by ID
6555	UpdateDataCenter updates a datacenter
6556	DeleteDatacenter deletes a datacenter
6557	WaitTillProvisioned waits for the provisioned API to complete
6558	ListFirewallRules lists firewall rules
6559	GetFirewallRule gets the firewall rule
6560	CreateFirewallRule creates a firewall rule
6561	UpdateFirewallRule updates a firewall rule
6562	DeleteFirewallRule deletes a firewall rule
6563	ListLoadbalancers lists all loadbalancers
6564	GetLoadbalancer gets a loadbalancer
6565	UpdateLoadbalancer updates a loadbalancer
6566	DeleteLoadbalancer deletes a loadbalancer
6567	ListBalancedNics lists all NICs
6568	AssociateNic associates a nic with a nic
6569	GetBalancedNic gets a single NIC
6570	DeleteBalancedNic deletes a balancer
6571	ListLans returns a list of LANs
6572	GetLan retrieves a lan object
6573	DeleteLan deletes a lan
6574	ListNics lists all NICs
6575	CreateNic creates a nic
6576	GetNic retrieves a nic
6577	Updates a nic
6578	DeleteNic deletes a nic
6579	ListSnapshots lists all snapshots
6580	Get a snapshot by ID
6581	DeleteSnapshot deletes a snapshot
6582	UpdateSnapshot updates a snapshot
6583	ListIPBlocks lists all IP blocks
6584	ReserveIPBlock creates a new IP block
6585	GetIPBlock retrieves an IP block by id
6586	Updates an IP block
6587	ReleaseIPBlock releases an IP block
6588	ListVolumes lists volumes
6589	GetVolume retrieves a volume by ID
6590	Updates a volume
6591	CreateVolume creates a volume
6592	DeleteVolume deletes a volume
6593	CreateSnapshot creates a new snapshot
6594	RestoreSnapshot restores a snapshot
6595	ListServers lists servers
6596	GetServer retrieves a server
6597	DeleteServer deletes a server
6598	ListAttachedCdroms returns a list of images attached to a server
6599	AttachCdrom attaches a cdrom to the server
6600	GetAttachedCdrom fetches an image from the server
6601	DetachCdrom detaches a cdrom from the server
6602	ListAttachedVolumes lists volumes
6603	AttachVolume attaches a volume to the server
6604	Gets an attached volume
6605	DetachVolume detaches a volume
6606	StartServer starts a server
6607	ListLocations lists all locations
6608	GetRegionalLocations returns the locations for the given regid .
6609	GetLocation retrieves a specific location
6610	GetContractResources retrieves all contracts
6611	ListImages lists all images
6612	GetImage retrieves an image by ID
6613	PrintHeaders print response
6614	ListGroups lists all groups
6615	Gets a group by ID
6616	CreateGroup creates a new group
6617	UpdateGroup updates a group
6618	DeleteGroup deletes a group
6619	ListShares returns a list of shares for a group
6620	Gets a share
6621	AddShare adds a share
6622	UpdateShare updates a share object
6623	DeleteShare deletes a share
6624	ListGroupUsers lists all users in a group
6625	AddUserToGroup adds a user to a group
6626	DeleteUserFromGroup deletes a user from a group
6627	ListUsers lists all users
6628	Gets a user by ID
6629	CreateUser creates a new user
6630	UpdateUser updates a user
6631	DeleteUser deletes a user
6632	ListResources lists all resources
6633	Gets a resource by id
6634	ListResourcesByType lists all resources for a given resource
6635	ListRequests lists all requests
6636	GetRequest retrieves a request by ID .
6637	Gets the status of a request
6638	Close closes the underlying file
6639	Get serializable argument
6640	BoolVar adds a bool flag to a bool flag .
6641	Bool adds a bool flag to the EnvironmentFlag .
6642	IntVar adds an int flag to the environment variable .
6643	Int returns an option that sets the value of an integer flag .
6644	Int64Var adds an int64 flag to the specified value .
6645	Int64 creates an int64 flag with specified name default value and usage string .
6646	UintVar adds a uint flag to a uint flag .
6647	Uint returns an option that sets the value of a uint flag with the given name and usage string .
6648	Uint64Var adds a uint64 flag to the specified value .
6649	Uint64 creates an option that sets the value of a uint64 flag .
6650	StringVar implements the StringVar interface .
6651	String returns a pointer to a string flag with specified name default value and usage string .
6652	Float64Var adds a float64 flag to a float64 variable
6653	Float64 adds a float64 flag to a float64 flag .
6654	DurationVar defines a time . DurationFlag as a time . DurationFlag .
6655	Duration returns an instance of time . DurationFlag
6656	Parse parses the environment variables from the environment .
6657	WriteStringToFile writes a string to a file
6658	ReadFileToString reads a file from a file
6659	LineReader returns a channel of lines read from r .
6660	LineReaderFrom returns a channel of lines read from the given path .
6661	FileExists checks if a file exists
6662	FileExistsInPath returns true if the given file exists
6663	GetPathParts returns the directory parts of the given path
6664	GetThisPathParts returns the absolute path parts of the executable
6665	RandomString returns a random string with the given length .
6666	ParseAddress parses an address string and returns the protocol and path .
6667	HomeDir returns the home directory .
6668	IsTCPPortAvailable checks if the port is available
6669	RandomTCPPort returns a random TCP port
6670	HashString hashes the given string key .
6671	Context is part of the Mnemosyner interface .
6672	Token creates an oauth2 . Token from the session
6673	NewDaemon creates a new daemon
6674	Close closes the daemon
6675	NewAccessTokenContext returns a new context with the given access token .
6676	AccessTokenFromContext extracts the access token from the context .
6677	RandomAccessToken generates a random access token
6678	Init creates a new zap logger .
6679	Load loads a dictionary from a zip file .
6680	Start creates a new session
6681	Get returns the session with the given access token .
6682	List returns a list of sessions .
6683	Exists checks if the database exists .
6684	Abandon deletes the session .
6685	SetValue sets a single value for a given session .
6686	Delete removes a session from the database .
6687	Setup initializes the database .
6688	TearDown deletes the database .
6689	initJaeger creates a new logger
6690	Usage prints the usage for this morphological analyzer .
6691	Build creates a DoubleArray from a list of keywords .
6692	Read from an io . Reader
6693	Get returns the node at the given index .
6694	ExternalNodes returns a list of nodes that have listen on .
6695	GetOther returns the node with the given access token .
6696	GoString returns a string representation of the cluster
6697	Scan populates the bag from src .
6698	Value returns the gob encoding of the bag .
6699	Determine if the given key exists
6700	WriteTo implements io . WriterTo interface .
6701	ReadIndexTable reads an index table from an io . Reader .
6702	New creates a new action bar
6703	Register a new action
6704	Actions add actions
6705	Render render action
6706	FuncMap generate function funcMap
6707	EditMode checks if the user is edit mode
6708	SwitchMode switch mode
6709	InlineEdit runs inline edit action .
6710	Error returns the string representation of the error .
6711	ParseFile parses the given file .
6712	FindMachine finds a machine by name
6713	New creates a new Kace
6714	Camel converts the given string to CamelCase
6715	Pascal converts a string to PascalCase
6716	Snake converts a string to snake case
6717	SnakeUpper converts a string to snake case
6718	Kebab converts a string to keb
6719	KebabUpper converts a string to CamelCase
6720	isPathSafe checks if a path is in the whitelist .
6721	Start the request
6722	ParseAuthHeaders parses auth headers and returns AuthCredentials
6723	Tracer is a functional option for Client .
6724	HTTPClient specifies the HTTP client to use .
6725	BasicAuth sets the username and password for the client
6726	BearerAuth sets the bearer token for the client
6727	CookieJar sets the cookie jar
6728	SanitizerEnabled sets whether or not sanitizer is enabled .
6729	OpenFile opens a file
6730	RoundTrip executes the given function .
6731	SetAuthHeader sets the Authorization header
6732	FileName returns the filename of the file .
6733	newBuffersFromFiles creates a new slice of file buffers .
6734	newFileBuffer creates a new file buffer
6735	rewind resets the contents of the file .
6736	ConvertResponse converts a response into a response
6737	Set sets the value of a BoolOption .
6738	WriteAnswer is part of the BoolOption interface .
6739	String returns the string representation of a BoolOption .
6740	TriggerIncidentKey triggers an incident key
6741	TriggerWithDetails triggers an incident .
6742	TriggerIncidentKeyWithDetails triggers an incident key .
6743	Merge merges src into dst .
6744	setSource sets the source for the given value .
6745	convertString converts src to dst
6746	Do executes the given function .
6747	NewFile creates a new io . Writer
6748	Internal loop
6749	String returns a string representation of a row
6750	Tabulate returns a tabular summary of results .
6751	AmazonRequest performs an HTTP request .
6752	WriteTabularData writes the results to the writer .
6753	Reduce sorts the result set by the given interval .
6754	NewSemaphore creates a new Semaphore .
6755	Release releases resources .
6756	Resize resizes the semaphore .
6757	AddOutput adds an output to the benchmark .
6758	RunBenchmarks runs the benchmark .
6759	parseBool parses a byte slice into a boolean .
6760	checkInteger returns an error if the given number is not a valid integer .
6761	parseInt64 parses an int64 from a byte slice .
6762	parseInt32 parses an int32 into an int32 .
6763	parseBigInt parses a big integer into a big . Int .
6764	parseBitString parses a bit string into an ASN1 . BitString .
6765	parseObjectIdentifier parses an object IDENTIFIFIER from a byte array .
6766	parseBase128Int parses an encoded base128 integer and returns the base64 encoded base64 and an error .
6767	parseGeneralizedTime parses the serialized bytes as a time . Time .
6768	parsePrintableString parses a serialized string into a string .
6769	isPrintable returns true if the byte is printable .
6770	parseSequenceOf takes a slice of bytes and returns a reflect . Value .
6771	invalidLength returns true if the offset is invalid .
6772	setDefaultValue sets the default value for a field .
6773	UnmarshalWithParams unmarshals val into val .
6774	Parse field parameters
6775	getUniversalType returns the tag number for the given type .
6776	DecodeString decodes a base32 encoded string .
6777	MailNotifier retrieves the mail notifier from the database
6778	Save mail notifier
6779	RegisterProvider registers a new auth provider
6780	InitDb initializes MongoDB
6781	Until loops until stopCh is closed .
6782	log panics
6783	Return a user by username
6784	Users returns all users matching the filter .
6785	SaveUser saves a user
6786	DeleteUser deletes a user by username
6787	LoadCACertFile loads a certificate from a file
6788	NewAuth creates a new Auth object
6789	ValidateRequest verifies that the request is valid
6790	Process validates the request
6791	ValidateCN verifies that the given certificate is valid
6792	ValidateOU verifies that the given certificate is valid .
6793	KeyLen returns the number of keys in x .
6794	DefaultConfig returns a new vault configuration
6795	New creates a new certificate signer
6796	New creates a VaultFactory
6797	DefaultServiceConfig returns a new Vault service config
6798	NewService creates a new Vault service
6799	Delete deletes the cluster
6800	IsNoVaultHandlerDefined returns true if the given error is a non - nil error .
6801	New creates a new Vault client
6802	Create creates a new role
6803	CreateJob creates a new config
6804	Run runs the config
6805	create new watcher
6806	Start the watcher
6807	Stop the watcher
6808	Active returns true if the watcher is active
6809	Add path to watched paths
6810	This is a thread - safe version of the watcher
6811	Watching returns a list of watched paths .
6812	State returns the current state of the watcher .
6813	Store stores an error in the request context .
6814	Get returns an error if any .
6815	Catch creates a middleware middleware .
6816	Try wraps an http . Handler with the given handler .
6817	Recover is a middleware that recovers panics
6818	This is the main entry point for sending events
6819	SyncHandler returns an http . Handler that sends requests to the given struct
6820	connect connects to the server .
6821	send sends an update .
6822	NumConnections returns the number of active connections .
6823	Push queues up the push queue .
6824	Gets the state of the state .
6825	NewOutForward creates a new instance of OutForward
6826	Run the inTail file
6827	New creates a new Fluent
6828	Close closes the connection .
6829	IsReconnecting returns true if the connection is reconnecting
6830	connect attempts to connect to the server .
6831	Notification creates a new GNotifier
6832	NullNotification creates a GNotifier .
6833	New creates a new identity .
6834	Issue creates a new identity
6835	Subject is an Option to set a subject name
6836	PrivateKey returns an Option that sets the private key used by the client .
6837	NotBefore returns an Option that sets the time before the time .
6838	NotAfter is an Option to set the time to time .
6839	IssuingCertificateURL is an Option to set the issuing certificate URL .
6840	OCSPServer is an Option to set the ocsp server
6841	New creates a new TelegramBotAPI instance
6842	NewWithWebhook creates a new TelegramBotAPI instance
6843	Close stops the bot .
6844	GetMe gets the current user .
6845	RunBot runs the bot with the given name and description .
6846	RunBotOnWebhook runs the bot on webhook .
6847	NewOutgoingMessage creates a new OutgoingMessage .
6848	NewOutgoingLocation creates a new OutgoingLocation
6849	NewOutgoingVenue creates a new OutgoingVenue
6850	NewOutgoingVideo creates a new outgoingVideo instance .
6851	NewOutgoingVideoResend creates a new OutgoingVideo .
6852	NewOutgoingPhoto creates a new outgoingPhoto
6853	NewOutgoingPhotoResend creates a new OutgoingPhoto
6854	NewOutgoingSticker creates a new outgoingSticker .
6855	NewOutgoingStickerResend creates a new outgoingSticker .
6856	NewOutgoingVoice creates a new outgoing voice object .
6857	NewOutgoingVoiceResend creates a new outgoing voice .
6858	NewOutgoingAudio creates a new outgoingAudio object .
6859	NewOutgoingAudioResend creates a new outgoingAudio .
6860	NewOutgoingDocument creates a new outgoingDocument .
6861	NewOutgoingDocumentResend creates a new outgoingDocument .
6862	NewOutgoingForward creates a new OutgoingForward
6863	NewOutgoingChatAction creates a new OutgoingChatAction
6864	NewOutgoingUserProfilePhotosRequest creates a new OutgoingUserProfilePhotosRequest .
6865	NewOutgoingKickChatMember creates a new outgoingKickChatMember
6866	NewOutgoingUnbanChatMember creates a new OutgoingUnbanChatMember
6867	NewOutgoingCallbackQueryResponse creates a new OutgoingCallbackQueryResponse
6868	NewInlineQueryAnswer creates a new inline query answer
6869	Type returns the type of the message
6870	Type returns the update type .
6871	MarshalJSON implements the json . Marshaler interface
6872	queryString returns the querystring form of the Webhook .
6873	getBaseQueryString returns the base query string for the outgoing request
6874	getBaseQueryString returns the base query string for the outgoingMessageBase
6875	queryString returns the querystring for the outgoing audio .
6876	queryString returns the querystring for the outgoing photo
6877	queryString returns the querystring for the OutgoingUserProfilePhotosRequest .
6878	querystring returns the querystring for the OutgoingVideo .
6879	querystring returns the querystring for the outgoing voice query
6880	NewInlineQueryResultArticle creates a new inline query article .
6881	NewInlineQueryResultPhoto creates a new inline query photo .
6882	NewInlineQueryResultGif creates a new inline query .
6883	NewInlineQueryResultMpeg4Gif creates a new inline query result .
6884	NewInlineQueryResultVideo creates a new inline query result .
6885	Send sends an outgoingUserProfilePhotos request .
6886	Send sends an outgoingChatAction .
6887	Send sends an inline query .
6888	Send sends the kickChat member .
6889	Send the unbanChatMember
6890	Send sends the response .
6891	NewAPIClient creates a new API client
6892	BeforeInsert sets CreatedAt
6893	ColumnName is used to quote a column name
6894	New creates a new database connection .
6895	From creates a new From struct
6896	Where creates a new condition .
6897	OrderBy creates a new ORDER BY condition .
6898	Limit creates a new condition .
6899	Offset creates an Offset condition .
6900	Join creates a join condition .
6901	Count calls count function .
6902	Update updates an existing record .
6903	Delete deletes the records in the database .
6904	Begin starts a transaction .
6905	Commit closes the database .
6906	Quote quotes a string
6907	SetLogOutput sets the logger for the database .
6908	selectToSlice returns a slice of reflect . Value .
6909	selectToValue populates a reflect . Value from rows .
6910	fieldIndexByName returns the index of a field by name .
6911	columns generates a comma separated list of columns .
6912	tagsFromField returns a slice of options for the field .
6913	hasSkipTag returns true if the field has skip tag .
6914	hasPKTag returns true if the struct field has a pk tag .
6915	isAutoIncrementable returns true if the field is autoincrementable .
6916	collectFieldIndexes collects indexes for a struct field .
6917	findPKIndex finds the index of the given struct type in the given slice .
6918	sizeFromTag returns the size of a struct field .
6919	columnFromTag returns the column name for a field .
6920	defaultFromTag extracts the default value from the struct field .
6921	Where adds a WHERE condition .
6922	And adds conditions to this condition .
6923	Or adds OR condition .
6924	Like adds a LIKE condition .
6925	Between compares two conditions .
6926	OrderBy adds an ORDER BY clause .
6927	Limit adds a LIMIT condition .
6928	Offset adds an Offset condition .
6929	SetFormat parses the format and parses it .
6930	Print is the same as fmt . Print .
6931	Print does nothing .
6932	Quote quoted string
6933	SQLType returns the SQL type for the given value .
6934	New creates a new archive .
6935	Disconnect disconnects the host .
6936	nextNetworkAdapterID returns the next available network adapter id
6937	totalNetworkAdapters returns the number of network adapters supported by this VM .
6938	RemoveAllNetworkAdapters removes all network adapters
6939	RemoveNetworkAdapter removes a network adapter
6940	NetworkAdapters returns a list of network adapters .
6941	newArchive creates a new archive with the given path .
6942	GetFileReader returns a reader for the given file .
6943	ExtractToWriter extracts a single file from an archive .
6944	ExtractToFile extracts a single file from an archive .
6945	SharedFoldersParentDir returns the guest folders parent directory .
6946	Name returns the name of the snapshot .
6947	Description returns the description of the snapshot .
6948	cleanupSnapshot removes the snapshot .
6949	BusTypeFromID returns the bus type from the given ID .
6950	Read the virtual machine .
6951	Write a VMX file
6952	NewVirtualMachine creates a new VM object
6953	Vcpus returns the number of vcpus
6954	VmxPath returns the path to the VM .
6955	MemorySize returns the size of the VM .
6956	ReadOnly returns true if the VM is read - only .
6957	InVMTeam returns true if the VM is in a team .
6958	PowerState returns the power state of the VM .
6959	ToolsState returns the current guest tools state .
6960	IsRunning returns true if the VM is running .
6961	GuestOS returns the guest OS .
6962	Cleanup the VM .
6963	updateVMX updates the vmx values of the VM .
6964	SetMemorySize sets the memory size of the VM .
6965	SetNumberVcpus sets the number of vcpus
6966	SetDisplayName sets the display name .
6967	SetAnnotation sets the annotation on the VM .
6968	SetVirtualHwVersion sets the virtual machine version
6969	Error implements the Error interface .
6970	Errorf is a convenience wrapper around fmt . Errorf
6971	Error implements the Error interface .
6972	string returns the string representation of the stack frame .
6973	newStackFrame returns a new stack frame .
6974	captureStack returns a slice of stack trace frames .
6975	Parse function name .
6976	Stack prints the stack trace
6977	StackWithCaller prints the stack trace for the given error
6978	Write calls the wrapped writer .
6979	ResponseStatus returns the status of the response .
6980	httpResponseStruct returns the http . ResponseWriter struct
6981	SetDetectedContentType returns the Content - Type header based on the content type .
6982	New creates a new ServerError
6983	New creates a new DBError
6984	New creates a new ValidationError
6985	New creates a new NotFoundError
6986	StrLength panics if n is not a valid string
6987	StrLenIn validates the string length of a string
6988	StrIn validates if p is in a slice of strings
6989	GetEmail - get email
6990	MostSpecificType returns the most specific type of a slice of types
6991	FullTypeHierarchy returns the full type hierarchy of the given highestLevel
6992	SortTypes sorts a slice of types .
6993	Delete a value from redis store
6994	Implements RedisStore interface
6995	Refresh the session in redis
6996	Get a session by id
6997	Destroy removes the session from redis .
6998	UpExpire sets the session s session in redis .
6999	Use adds a router handler to the stack
7000	ServeHTTP implements the Handler interface .
7001	Use add middleware
7002	Group creates a new router group
7003	Run starts the router
7004	create creates a new router
7005	Redirect sends a redirect to the given URL .
7006	Ok sends an OK response .
7007	Fail logs an error to the request .
7008	ResStatus writes the response with status code .
7009	Next call next handler
7010	GetSession returns the current session
7011	GetBodyJSON read request body
7012	SetSession creates a new session with the given key .
7013	FreshSession refreshes the session with the given key
7014	DeleteSession deletes the session
7015	Write is part of the http . ResponseWriter interface .
7016	WriteHeader implements the http . ResponseWriter interface .
7017	New creates a new Client with the given options .
7018	setAllowLargeResults is used to set the allowed results
7019	connect creates a new BigQuery service .
7020	InsertRow inserts a row into a table .
7021	AsyncQuery performs an async query with the specified dataset query string .
7022	Query is used to query the results of a dataset
7023	stdPagedQuery runs a single query with paginated results .
7024	largeDataPagedQuery performs a large query .
7025	pagedQuery performs a paginated query .
7026	pageOverJob fetches the results from the bigquery .
7027	Count returns the number of records in the given dataset .
7028	Actual work
7029	subworker run a job
7030	Perform a worker
7031	Supervisor loop
7032	Run the pool
7033	Add a new job
7034	Wait for working pipe
7035	Return a slice of jobs
7036	Wait for a job
7037	Returns the status of the pool
7038	WrapHTTPHandlerFunc wraps an http . HandlerFunc
7039	WebSocketHandlerFunc wraps a websocket . HandlerFunc
7040	StaticFile creates a new static file
7041	PreloadFile creates a preloaded file from a file
7042	InitHtmlTemplates initialize html templates
7043	InitTextTemplates initializes text templates
7044	Html creates a new HTML template
7045	Text creates a text template
7046	InitWatcher initializes fsnotify watcher
7047	CloseWatcher closes all watchers
7048	Find finds a route by path
7049	Add adds a new view .
7050	NewRouters creates a new router
7051	NewServerMux creates a new server mux
7052	err handles the error handler .
7053	HandleFunc adds a HandlerFunc to the mux .
7054	handleError handles an error .
7055	Redirect sets the response with status code
7056	InitPProf registers pprof handlers
7057	StartSession starts a new session
7058	Converts a list of elements to a channel .
7059	Return a channel of duplicates in the list .
7060	Returns a channel of permutations of a slice of elements .
7061	Returns a channel of all permutations of a slice of elements in the list .
7062	Generate a new format string .
7063	Errorm is a convenience wrapper around fmt . Errorf
7064	Similar to fmt . Fprintm
7065	Similar to fmt . Printm
7066	Sprintf is similar to fmt . Sprintf but with fmt . Sprintf .
7067	Validate validates a password against the requirements
7068	MakeRequirements creates a new PasswordStrengthRequirements from a string .
7069	sanityCheck validates the password strength requirements .
7070	password generates a new password based on the requirements requirements requirements
7071	NewPassword creates a new password password
7072	NewPasswords returns a slice of n words with the given requirements
7073	addNums adds numDigits to a string
7074	punctuation
7075	Deprecated .
7076	Param adds a parameter to the set .
7077	Parse parses a set of params
7078	Unmarshal unmarshals parameter data into v .
7079	GetDefaultHTTPClient return default HTTP client
7080	DeviceInfo retrieves information about the given device .
7081	DevicePresence returns the presence of the given devices .
7082	NotificationStatus returns the notification status for the given push .
7083	DeleteNotification deletes a notification
7084	NotifyDevice sends a notification to the device
7085	Assert calls Assert with the given message .
7086	CreateFile creates a new file
7087	Add an error
7088	AddFieldError adds an error to the form .
7089	HasErrors returns true if the FormErrors field has been set .
7090	NewError creates a new form error
7091	NewFieldError creates a new form error for the given field .
7092	ChainHandlers chains multiple handlers
7093	FinalHandler returns a final handler that wraps the given http . Handler .
7094	Hash returns the MD5 hash of the given reader .
7095	IsHash returns true if the given string is a valid hash .
7096	WithBaseDir returns an Option that sets the base directory to the given directory .
7097	WithFileFindFunc returns an Option that sets the file search function .
7098	WithTemplateFromFiles returns an Option that sets the templates for the given template .
7099	WithTemplatesFromFiles creates an Option that adds templates to the specified files .
7100	WithTemplateFromStrings creates an Option that sets the template name to strings .
7101	WithTemplatesFromStrings creates an option set of templates from a string map .
7102	WithFunction registers a function with the given name .
7103	WithFunctions adds custom functions to the template
7104	WithDelims sets the delimited delimiter and closes the delimiter .
7105	New creates a new Templates instance
7106	RespondWithStatus writes a response with status code .
7107	RespondTemplate writes a response with status code 200 .
7108	Respond writes a response with status code 200 .
7109	RenderTemplate renders a template
7110	New creates a new server
7111	ServeUDP implements the Server interface .
7112	Shutdown closes the server .
7113	QuicHeadersHandler sets the QUIC headers
7114	GetRequestIPs returns the IP addresses of the request
7115	DomainRedirectHandler returns a redirect handler that redirects to the given domain .
7116	New creates a new Servers
7117	Add adds a new server
7118	TCPAddr returns the TCP address associated with the given name .
7119	UDPPAddr returns the UDP address associated with the given name .
7120	Close closes all servers
7121	Shutdown shuts down all servers
7122	Accept accepts a TCP connection .
7123	NewStaticFilesHandler returns a new http . Handler that wraps a file system .
7124	ServeHTTP implements the http . Handler interface .
7125	MarshalJSON implements the json . Marshaler interface .
7126	UnmarshalJSON implements the json . Unmarshaler interface for Options .
7127	MarshalYAML marshals options to YAML
7128	UnmarshalYAML implements the yaml . Unmarshaler interface for Options .
7129	NewHandler wraps an http . Handler with the given logger .
7130	WithPanicResponse sets the panic response
7131	WithPanicResponseHandler sets the panic response handler
7132	New creates a new handler .
7133	ServeHTTP implements the http . Handler interface .
7134	NewContextFunc returns a context function that returns a context that maps to the given map .
7135	NewMapErrorRegistry creates a new mapErrorRegistry .
7136	AddError registers an error with the given code .
7137	AddMessageError registers an error with the given code and message .
7138	MustAddError adds an error to the registry .
7139	MustAddMessageError is like MustAddMessageError but panics .
7140	AddHandler registers a handler for the given error code .
7141	MustAddHandler is like AddHandler but panics .
7142	Handler returns the handler for the given error code .
7143	New creates a new Client .
7144	Request performs an HTTP request .
7145	JSONContext performs a JSON request with a custom context
7146	StreamContext performs a streaming request
7147	Stream performs a streaming request .
7148	JSONUnmarshal unmarshals json data into v .
7149	ServeTCP implements the http . Handler interface .
7150	ServeTCP implements the Server interface .
7151	Shutdown gracefully shuts down the server
7152	HandleMethods handles HTTP requests
7153	NewSetHeadersHandler creates a new set of headers
7154	New creates a new server
7155	HashedPath returns the absolute path of the file
7156	New creates a new service .
7157	HTMLHandler returns an http . Handler for the service .
7158	Status returns the status of the service .
7159	StatusHandler returns the status of the cluster .
7160	OnHandler is invoked when the backend is running
7161	OffHandler is the entrypoint of the backend .
7162	MarshalJSON method of PostIRCMessageRequest
7163	MarshalJSON method of PostArtifactRequest
7164	MarshalJSON method of PostArtifactResponse
7165	MarshalJSON method of HookChangedMessage
7166	MarshalJSON method of TriggerHookRequest
7167	MarshalJSON method of TriggerHookResponse
7168	UnmarshalJSON implements the json . Unmarshaler interface for TriggerHookResponse .
7169	MarshalJSON method of LaunchInfo
7170	MarshalJSON implements the json . Marshaler interface .
7171	MarshalJSON implements the json . Marshaler interface
7172	MarshalJSON implements the json . Marshaler interface
7173	MarshalJSON implements the json . Marshaler interface .
7174	UnmarshalJSON implements the json . Unmarshaler interface .
7175	Write implements io . Writer
7176	Seek implements io . Seeker
7177	Read implements the io . Reader interface .
7178	MarshalJSON method of LaunchSpecsResponse
7179	MarshalJSON method of RegionLaunchSpec
7180	GenerateCode generates code for API data
7181	postPopulate populates struct fields
7182	CreateTemporaryCredentials creates a new Credentials with the specified duration .
7183	Helper function to create a new URL
7184	Sign a request
7185	APICall makes an API call to the server .
7186	SignedURL constructs a signed URL for the given route .
7187	MarshalJSON method of the HawkSignatureResponse
7188	mww256 computes the 32 - bit hash of the input .
7189	NewCubeHash creates a new cubeHash
7190	converthash256 computes the hash of data
7191	Sum computes the hash of data .
7192	Flush a block to the out slice .
7193	reducedSqueezeRow0 is used to reduce the number of random elements
7194	reducedDuplexRow1 computes the state of a single row
7195	NewReaderByteCodeLoader creates a new ReaderByteCodeLoader .
7196	LoadReader parses the given reader and compiles the bytes .
7197	NewV3 creates a new UUID .
7198	txLiteral moves the literal to the current state .
7199	txFetchSymbol fetches the current symbol from the current state .
7200	txMarkRaw marks the given state as a raw string .
7201	txUnmarkRaw marks the state as raw .
7202	txPrint prints the given value .
7203	txPrintRaw is a helper function that prints a raw value .
7204	NewLoopVar returns a new LoopVar
7205	TxMakeArray creates a new array array .
7206	txFunCallOmni is called when a function is called .
7207	DumpAST marks the dump AST as dumpAST .
7208	DumpByteCode dumps the flag to the flag .
7209	Optimize takes a byte slice and optimizes it .
7210	NewFuncDepot creates a new FuncDepot
7211	Get retrieves a value from the depot
7212	Set stores a value in the depot
7213	NewFileTemplateFetcher creates a new FileTemplateFetcher
7214	LastModified returns the last modification time .
7215	Reader returns an io . Reader
7216	Bytes returns the contents of the file
7217	NewState creates a new state .
7218	PushFrame adds a new frame to the stack .
7219	PopFrame removes the topmost frame from the stack .
7220	CurrentFrame returns the current top frame .
7221	Warnf logs a warning message .
7222	AppendOutputString appends a string to the output .
7223	Popmark removes the current mark .
7224	CurrentMark returns the current mark .
7225	LoadByteCode loads a byte code from the state .
7226	Reset resets the state of the state .
7227	DeclareVar adds a variable to the stack .
7228	GetLvar returns the variable at index i .
7229	SetLvar sets the variable at index i .
7230	NewByteCode creates a new ByteCode
7231	Append appends an op to the list .
7232	AppendOp creates a new op .
7233	String returns a string representation of the generated code .
7234	NewCachedByteCodeLoader creates a new CachedByteCodeLoader
7235	Load returns the byte code for the given key
7236	NewFileCache creates a new instance of FileCache
7237	GetCachePath returns the file path for the given key
7238	Get retrieves an entity from the cache
7239	Set stores the entity with the given key
7240	Delete removes the file from the cache
7241	Get gets the entity by key
7242	Set stores the entity in the cache
7243	Delete deletes a value from the cache
7244	NewStringLexer creates a new Lexer for the given string .
7245	NewReaderLexer creates a new parser .
7246	NewV4 returns a new UUID .
7247	Parse parses the given template with the given template
7248	ParseReader parses an io . Reader from a reader
7249	Visit returns a channel of nodes .
7250	String returns a string representation of the AST .
7251	Run runs the VM .
7252	DefaultParser is the default parser
7253	DefaultLoader is the default loader function
7254	DefaultVM is the default VM implementation
7255	Get returns the value associated with the given key .
7256	NewHTTPSource creates a new HTTPSource from an http . Response
7257	NewStringByteCodeLoader creates a new StringByteCodeLoader .
7258	LoadString loads a string from the template
7259	Get returns the value of a variable .
7260	NewOp creates a new op .
7261	MarshalBinary marshals an op to binary .
7262	UnmarshalBinary implements the encoding . BinaryUnmarshaler interface .
7263	ArgInt returns the argument s value .
7264	ArgString returns the string argument .
7265	AppendOp creates an operation with the given arguments .
7266	Compile compiles the given AST .
7267	NewV5 returns a new UUID .
7268	Sort a list of lexicographical symbols
7269	Less implements sort . Interface .
7270	Swap swaps two symbols .
7271	Copy returns a copy of this set
7272	Set sets a symbol .
7273	GetSortedList returns the sorted list
7274	Top returns the top element of the stack
7275	Resize resizes the stack
7276	Extend extends the stack
7277	Grow resize the stack
7278	Get returns the element at the given index .
7279	Set sets the value at index i .
7280	Push adds a value to the stack .
7281	Pop removes the top element from the stack .
7282	String returns the string representation of the stack .
7283	GetHostIPs returns a list of host IP addresses .
7284	GetPrivateHostIPs returns a list of host IP addresses
7285	IsPrivate returns true if the given IP is a private IP address
7286	Environ returns a list of environment variables .
7287	getenv returns the value of the environment variable
7288	flagAsEnv returns the name of the environment variable name .
7289	NewPolicy creates a default policy
7290	CreateRandom returns a slice of random bytes
7291	Shuffle random bytes
7292	Generate generates a random password with the given policy .
7293	ExecutableFolder returns the path to the executable directory .
7294	Ignore returns an Option that can be used to ignore the Sentinel .
7295	Sigs is an Option to set the shutdown signals .
7296	Logf is an Option to set the log message .
7297	Errorf is an option to set the error message .
7298	New creates a new Sentinel .
7299	Run implements Sentinel interface .
7300	Shutdown gracefully shuts down all registered instances .
7301	ShutdownIgnore returns true if the given error is ignored .
7302	Register registers the server and shutdown function .
7303	Mux creates a new netmux listener
7304	HTTP registers an HTTP server with the given listener .
7305	IgnoreError returns true when an error is ignored .
7306	IgnoreNetOpError returns true if the error indicates that the error was caused .
7307	convertAndAppendContextFuncs converts multiple functions to a slice of functions .
7308	router creates a new mux router
7309	buildInfoHandler returns the build - info page .
7310	Encode implements json . Encoder
7311	Json creates a new martini handler
7312	validateAndMap invokes martini . ValidateAndMap and maps them to errors .
7313	The number of errors
7314	Header creates a map of origin headers .
7315	PreflightHeader returns a map of headers that are allowed to be included in the request .
7316	IsOriginAllowed checks if the origin is allowed
7317	Allow creates a new http . HandlerFunc
7318	Renderer creates a new martini handler
7319	String returns a string representation of the AcceptLanguages .
7320	Languages returns a martini handler
7321	Prefix returns a martini handler that removes the given prefix
7322	Basic returns an http . HandlerFunc that verifies the given username and password .
7323	UpdateUser adds a user to the session .
7324	Get a user by ID
7325	AddressToAccountId converts an address to an xdr . AccountId
7326	MutateChangeTrust mutates a ChangeTrust operation
7327	MutateChangeTrust is part of the ChangeTrust interface .
7328	Trust creates a new ChangeTrust builder
7329	RemoveTrust creates a new ChangeTrust builder
7330	MutatePayment modifies the amount of creditAmount
7331	MutatePayment is part of the Payment interface .
7332	MutatePayment parses a native amount into an object
7333	MutatePayment creates an xdr . PathPaymentOp
7334	MutateAccountMerge sets the AccountMerge fields of the AccountMergeBuilder .
7335	MustParse is like Parse but panics on error .
7336	Parse parses a string into an xdr . Int64 .
7337	String converts xdr . Int64 to a string .
7338	CreateOffer creates a new ManageOfferBuilder .
7339	CreatePassiveOffer creates a ManageOfferBuilder .
7340	UpdateOffer creates a new ManageOffer .
7341	DeleteOffer deletes an offer .
7342	ManageOffer creates a new ManageOfferBuilder
7343	Mutate implements ManageOfferBuilder interface .
7344	MutateManageOffer parses the Amount field of a ManagedOfferOp .
7345	MutateManageOffer implements the Mutable OfferID interface .
7346	MutateManageOffer implements the Mutable interface .
7347	MutateOperation is part of the xdr . Operation interface .
7348	String returns a string representation of the price .
7349	Transaction creates a new transaction builder .
7350	Mutate invokes the transaction builder .
7351	Hash returns the hash of the transaction
7352	HashHex returns the hash of the transaction .
7353	Sign creates a new transaction envelope with the given signers .
7354	MutateTransaction adds an AllowTrustBuilder to the transaction
7355	MutateTransaction adds the ChangeTrustBuilder to the transaction
7356	MutateTransaction adds a transaction to the transaction
7357	MutateTransaction makes sure the transaction is valid
7358	MutateTransaction adds an InflationBuilder to the transaction
7359	MutateTransaction is part of the TransactionBuilder interface .
7360	MutateTransaction is part of the TransactionBuilder interface .
7361	MutateTransaction adds a MemoHash to the transaction
7362	MutateTransaction adds a MemoID to the transaction
7363	MutateTransaction creates a new MemoReturn
7364	MutateTransaction modifies the MemoText .
7365	MutateTransaction adds the Network
7366	MutateTransaction modifies the transaction builder
7367	MutateTransaction adds a transaction to the transaction
7368	MutateTransaction sets the sequence number
7369	MutateTransaction mutates the source account
7370	Scan implements the sql . Scanner interface .
7371	InitialState returns the initial state of the LedgerEntry
7372	Changes returns the set of changes for the given target key .
7373	StateAfter returns the last state after the given operation .
7374	changes returns a list of changes that match the given target .
7375	MustDecode is like Decode but panics on error .
7376	Encode encodes src to base32 .
7377	MustEncode is like Encode but panics on error .
7378	checkValidVersionByte returns nil if the version is valid .
7379	Checksum checksum of data
7380	Validate checksum of data
7381	LedgerKey converts the LedgerEntryChange to a LedgerKey
7382	checkPlausible checks if the base32 alphabet is valid .
7383	Address returns the account id .
7384	Equals returns true if this AccountId is equal to other .
7385	SetAddress sets the account id
7386	ToXdrObject converts an asset to an xdr . Asset .
7387	Through adds an asset to the payload
7388	PayWith creates a new PayWithPath
7389	continuatedFraction computes the continued fraction of a given price .
7390	Mutate invokes the transactionEnvelopeBuilder .
7391	MutateTX implements the Builder interface .
7392	Bytes returns the serialized bytes of the transaction envelope .
7393	Base64 returns the base64 encoding of the transaction envelope
7394	MutateTransactionEnvelope mutates a transaction envelope
7395	MutateSetOptions implements the SetOptions interface .
7396	MutateSetOptions mutates an InflationDest struct
7397	MutateSetOptions mutates the master weight
7398	MutateSetOptions mutates the fields of the Signer .
7399	SetThresholds creates a new Thresholds struct
7400	MutateSetOptions mutates the values of a ThresholdsOp
7401	MutateSetOptions mutates the set flags
7402	MutateSetOptions mutates the set flags
7403	MutateCreateAccount is part of the CreateAccount interface .
7404	MutateCreateAccount is part of the CreateAccount interface .
7405	Random generates a random keyp seed
7406	Master returns a kpultr from the given network passphrase .
7407	Parse parses an address from a string .
7408	MustParse parses an address or panics .
7409	MutateAllowTrust is part of the AllowTrustOp interface .
7410	MutateAllowTrust implements the AllowTrust interface for AllowTrust .
7411	MutateAllowTrust updates the AllowTrust fields of an AllowTrust operation
7412	ToAsset converts AllowTrustOpAsset to an asset .
7413	SetNative sets the asset type
7414	String returns the string representation of an asset .
7415	Equals returns true if asset is equal to other .
7416	MustExtract calls Extract and panics on error
7417	Unmarshal reads data from r and stores the data into v .
7418	Marshal writes v to w .
7419	ValidEnum returns true if the crypto key type is valid
7420	NewPublicKey creates a new PublicKey
7421	MustEd25519 panics if the public key is not set .
7422	NewNodeId creates a new node id
7423	NewAccountId creates a new AccountId
7424	ValidEnum returns true if the asset type is valid .
7425	ArmForSwitch returns the arm for the given switch type .
7426	NewAsset creates a new asset
7427	MustAlphaNum4 returns the AssetAlphaNum field if not set .
7428	GetAlphaNum4 returns the AlphaNum4 value of the asset .
7429	MustAlphaNum12 returns the asset s AlphaNum12 value if not set .
7430	GetAlphaNum12 returns the asset s AlphaNum12 value .
7431	ValidEnum returns true if the threshold index is valid .
7432	ValidEnum returns true if the LedgerEntryType is valid .
7433	ValidEnum returns true if the AccountFlags is valid .
7434	NewAccountEntryExt creates a new AccountEntryExt
7435	ValidEnum returns true if the trustLineFlags is valid .
7436	NewTrustLineEntryExt creates a new TrustLineEntryExt
7437	ValidEnum returns true if the offer entry is valid .
7438	NewOfferEntryExt creates a new OfferEntryExt
7439	NewDataEntryExt creates a new DataEntryExt
7440	NewLedgerEntryData creates a new LedgerEntryData
7441	NewLedgerEntryExt creates a new LedgerEntryExt
7442	ValidEnum returns true if the envelope type is valid .
7443	ValidEnum returns true if the operation type is valid .
7444	ArmForSwitch implements the AllowTrustOpAsset interface .
7445	NewAllowTrustOpAsset creates a new AllowTrustOpAsset
7446	MustAssetCode4 returns asset code4 if not set .
7447	GetAssetCode4 returns asset code 4
7448	MustAssetCode12 returns asset code12 if not set .
7449	GetAssetCode12 returns asset code12
7450	NewOperationBody creates a new operation body
7451	MustCreateAccountOp returns CreateAccountOp if not set .
7452	Retrieve CreateAccountOp
7453	MustPaymentOp returns the PaymentOp if not set .
7454	GetPaymentOp returns the payment operation
7455	MustPathPaymentOp returns the PathPaymentOp if not set .
7456	GetPathPaymentOp returns the PathPaymentOp
7457	MustManageOfferOp returns the ManageOfferOp if not set .
7458	GetManageOfferOp returns the ManageOfferOp for the operation
7459	MustCreatePassiveOfferOp returns the CreatePassiveOfferOp if not set .
7460	GetCreatePassiveOfferOp returns the CreatePassiveOfferOp
7461	MustSetOptionsOp returns the SetOptionsOp if not set .
7462	GetSetOptionsOp returns the set options operation .
7463	MustChangeTrustOp returns the ChangeTrustOp if not set .
7464	Retrieve ChangeTrustOp
7465	MustAllowTrustOp returns the AllowTrustOp if not set .
7466	Retrieve AllowTrustOp
7467	MustDestination returns the AccountId if not set .
7468	GetDestination returns the destination id of the operation
7469	MustManageDataOp returns the ManageDataOp if not set .
7470	GetManageDataOp returns the ManageDataOp for the operation
7471	ValidEnum returns true if the MemoType is valid .
7472	ArmForSwitch returns a human - readable arm for the given switch
7473	NewMemo creates a new Memo instance
7474	MustText returns the value of the Memo .
7475	GetText returns the current state of the switch
7476	MustId panics if the Memo is not set .
7477	GetId returns the id of the arm
7478	MustHash returns the hash value or panics .
7479	GetHash returns the hash of the current arm
7480	MustRetHash panics if the Memo is not set .
7481	NewTransactionExt creates a new TransactionExt
7482	ValidEnum returns true if the CreateAccountResultCode is valid .
7483	ArmForSwitch returns the arm for the given switch
7484	NewCreateAccountResult creates a new CreateAccountResult instance
7485	ValidEnum returns true if the payment result code is valid
7486	ArmForSwitch returns the arm for the switch
7487	NewPaymentResult creates a new PaymentResult instance
7488	ValidEnum returns true if the PathPaymentResultCode is valid
7489	ArmForSwitch returns a human - readable string for the given path
7490	NewPathPaymentResult creates a new PathPaymentResult
7491	MustNoIssuer returns the value of NoIssuer if not set .
7492	GetNoIssuer returns the value of an asset
7493	ValidEnum returns true if the result code is valid .
7494	ValidEnum returns true if the ManageOfferEffect is valid .
7495	ArmForSwitch returns the arm for the specified switch .
7496	NewManageOfferSuccessResultOffer creates a new ManageOfferSuccessResult
7497	ArmForSwitch returns the arm for the specified switch
7498	NewManageOfferResult creates a new ManageOfferResult instance
7499	ValidEnum returns true if the SetOptionsCode is valid .
7500	ArmForSwitch returns the arm for the switch
7501	NewSetOptionsResult creates a new set options result .
7502	ValidEnum returns true if the ChangeTrustResultCode is valid .
7503	ArmForSwitch returns the arm for the given switch
7504	NewChangeTrustResult creates a new ChangeTrustResult instance
7505	ValidEnum returns true if the AllowTrustResultCode is valid .
7506	ArmForSwitch returns the arm for the given switch
7507	NewAllowTrustResult creates a new AllowTrustResult instance
7508	ValidEnum returns true if the AccountMergeResultCode is valid .
7509	ArmForSwitch returns the arm for the switch .
7510	NewAccountMergeResult creates a new AccountMergeResult instance
7511	MustSourceAccountBalance returns source account balance
7512	Gets the source account balance
7513	ValidEnum returns true if the InflationResultCode is valid .
7514	ArmForSwitch returns the arm for the given switch
7515	NewInflationResult creates a new InflationResult
7516	MustPayouts panics if not set
7517	GetPayouts returns an array of Payouts Payouts
7518	ValidEnum returns true if the result code is valid
7519	ArmForSwitch returns the arm for switch status code
7520	NewManageDataResult creates a new ManageDataResult
7521	ValidEnum returns true if the operation result code is valid .
7522	ArmForSwitch returns the arm for the given type
7523	NewOperationResultTr creates a new OperationResultTr
7524	MustCreateAccountResult panics if the CreateAccountResult is not set .
7525	GetCreateAccountResult returns the create account result
7526	MustPaymentResult returns the PaymentResult without panics .
7527	GetPaymentResult returns the payment result
7528	MustPathPaymentResult panics if PathPaymentResult is not set .
7529	GetPathPaymentResult returns the current PathPaymentResult
7530	MustManageOfferResult is part of the OperationResult interface .
7531	GetManageOfferResult returns the ManageOfferResult
7532	MustCreatePassiveOfferResult panics if not set .
7533	MustSetOptionsResult panics if the operation fails
7534	GetSetOptionsResult returns the set options result .
7535	MustChangeTrustResult panics if the OperationResult is not set .
7536	GetChangeTrustResult returns the ChangeTrustResult
7537	MustAllowTrustResult returns the AllowTrustResult if not set .
7538	GetAllowTrustResult returns the AllowTrustResult
7539	MustAccountMergeResult returns the AccountMergeResult if not set .
7540	Retrieve AccountMergeResult
7541	MustInflationResult returns the InflationResult if not set .
7542	GetInflationResult returns the InflationResult as an InflationResult
7543	MustManageDataResult returns the ManageDataResult if not set .
7544	GetManageDataResult returns the current ManageDataResult
7545	ArmForSwitch returns the arm for the given status code .
7546	NewOperationResult creates a new OperationResult
7547	MustTr returns the Tr field if not set .
7548	GetTr returns the Tr field of the switch .
7549	ValidEnum returns true if the transactionResultCode is valid .
7550	ArmForSwitch returns the arm for the given switch code
7551	NewTransactionResultResult creates a new TransactionResult from the given code and value .
7552	MustResults panics if the result is not set .
7553	GetResults returns the results of a TransactionResult
7554	NewTransactionResultExt creates a new TransactionResultExt .
7555	NewStellarValueExt creates a new StellarValueExt
7556	NewLedgerHeaderExt creates a new LedgerHeaderExt
7557	ValidEnum returns true if the LedgerUpgradeType is valid .
7558	ArmForSwitch returns an arm for the given switch type .
7559	NewLedgerUpgrade creates a new LedgerUpgrade object
7560	MustNewLedgerVersion panics if NewLedgerVersion is not set .
7561	GetNewLedgerVersion returns the current version of the switch
7562	MustNewBaseFee panics if the upgrade is not set .
7563	GetNewBaseFee gets the current base fee
7564	MustNewMaxTxSetSize returns the new maxTxSetSize if not set .
7565	GetNewMaxTxSetSize gets the current max tx set size
7566	ArmForSwitch returns the arm for the switch
7567	NewLedgerKey creates a new LedgerKey
7568	ValidEnum returns true if the bucket entry is valid .
7569	ArmForSwitch returns the arm type name for the switch
7570	NewBucketEntry creates a new bucket entry
7571	MustLiveEntry panics if not set
7572	Retrieves the LedgerEntry
7573	MustDeadEntry panics if not set .
7574	GetDeadEntry returns the LedgerKey
7575	NewTransactionHistoryEntryExt creates a new TransactionHistoryEntryExt
7576	ArmForSwitch implements TransactionHistory
7577	NewTransactionHistoryResultEntryExt creates a new TransactionHistoryResultEntryExt
7578	NewLedgerHeaderHistoryEntryExt creates a new LedgerHeaderHistoryEntryExt
7579	NewScpHistoryEntry creates a new ScpHistoryEntry
7580	ValidEnum returns true if the LedgerEntryChangeType is valid .
7581	ArmForSwitch returns the arm for the given switch type
7582	NewLedgerEntryChange creates a new LedgerEntryChange
7583	MustCreated panics if the LedgerEntryChange is not set .
7584	GetCreated returns the LedgerEntryChange value
7585	MustUpdated returns the updated value or panics if not set .
7586	GetUpdated returns the updated value of LedgerEntryChange
7587	MustRemoved returns the removed value or panics if not set .
7588	GetRemoved returns the removed value of LedgerEntryChange
7589	MustState panics if LedgerEntry is not set
7590	GetState returns the LedgerEntry value
7591	NewTransactionMeta creates a new TransactionMeta
7592	MustOperations is part of the TransactionMeta interface .
7593	GetOperations returns the operation metadata for the switch
7594	ValidEnum returns true if the error code is valid .
7595	ValidEnum returns true if the IP address type is valid .
7596	ArmForSwitch returns the arm address for the given switch
7597	NewPeerAddressIp creates a new PeerAddressIp
7598	MustIpv4 returns the value of PeerAddressIp
7599	GetIpv4 returns the ipv4 address
7600	MustIpv6 panics if the address is not set .
7601	GetIpv6 returns the ipv6 address
7602	ValidEnum returns true if the message type is valid .
7603	ArmForSwitch returns the arm type for the given switch
7604	NewStellarMessage creates a new stellar message from the given type and value .
7605	MustError returns the error if not set .
7606	GetError returns the error value of the message
7607	MustHello returns the current Hello object or panics .
7608	GetHello returns the Hello value of a StellarMessage
7609	MustAuth panics if the message is not set .
7610	GetAuth returns the Auth object associated with the message
7611	MustDontHave panics if not set
7612	GetDontHave returns the dontHave value of this message
7613	MustPeers returns a slice of peers
7614	Get peer addresses
7615	MustTxSetHash panics if not set .
7616	GetTxSetHash returns the transaction hash of the message
7617	MustTxSet returns the TransactionSet if not set .
7618	GetTxSet returns the transaction set as a transaction set
7619	MustTransaction panics if the message is not set .
7620	GetTransaction returns the transaction envelope
7621	MustQSetHash panics if the message is not set .
7622	GetQSetHash returns the QSetHash of the message
7623	MustQSet returns ScpQuorumSet if not set .
7624	GetQSet returns the scpQuorumSet of the message
7625	MustEnvelope returns the envelope or panics .
7626	GetEnvelope gets the envelope type
7627	MustGetScpLedgerSeq panics if the message is not set .
7628	GetGetScpLedgerSeq returns the getScpLedgerSeq value of the message
7629	ArmForSwitch returns a human - readable string for the switch
7630	NewAuthenticatedMessage creates a new AuthenticatedMessage
7631	ValidEnum returns true if the ScpStatementType is valid .
7632	ArmForSwitch returns the arm for the switch
7633	NewScpStatementPledges creates a new ScpStatementPledges object
7634	MustPrepare is part of the Prepare interface .
7635	GetPrepare returns the status of the switch
7636	MustConfirm returns the ScpStatementPledges property or panics .
7637	GetConfirm returns the status of the switch
7638	MustExternalize returns the underlying ScpStatementPledges if not set .
7639	GetExternalize returns the externalize type of the switch
7640	MustNominate returns ScpNnominate if set
7641	GetNominate gets the nominate type
7642	SafeUnmarshalBase64 unmarshals data into dest
7643	SafeUnmarshal unmarshals data into dest .
7644	SendAmount returns the total amount of payments
7645	LoadAccount loads an account by ID .
7646	SequenceForAccount returns the sequence number for the given account .
7647	SubmitTransaction submit a transaction
7648	Equals compares two LedgerKey objects .
7649	SetAccount sets the account id
7650	Set data
7651	SetOffer adds an offer to the LedgerKey
7652	SetTrustline sets the trust line
7653	Add adds a new value to the builder .
7654	tryHash is a helper method to add a hash to the chd hashed hash .
7655	HashIndexFromKey returns the hash index of the given key .
7656	ReadInt from the slice
7657	Read reads a CHD from r .
7658	Get returns the value for the given key .
7659	Iterate creates a new Iterator
7660	Write writes the CHD data to the given io . Writer .
7661	RegisterDatasources registers datasources
7662	RegisterFonts registers fonts
7663	New creates a new Map .
7664	NewSized creates a new map with the given width and height .
7665	Load the map .
7666	Resize the map
7667	Free frees the map .
7668	SRS returns the SRS representation of the maps .
7669	ZoomAll zoom_all zoom_all
7670	ZoomTo zoom to the map .
7671	Render renders the map .
7672	RenderImage renders the map .
7673	RenderToFile renders the map .
7674	SetMapSize sets the size of the map .
7675	Search performs a search request .
7676	Get returns a connection from the pool .
7677	put adds a connection to the pool .
7678	MonoToStereoF32 converts a float32 buffer to a float32 buffer
7679	BitCrush flushes a bit buffer to a bit buffer
7680	NormalizeMax normalizes the values of a buffer .
7681	G Gain multiplies the buffer with the given multiplier .
7682	MonoDownmix converts the audio buffer to a mono buffer .
7683	Quantize quantizes the audio buffer with the given bitDepth .
7684	PCMScale multiplies the audio buffer by the given bitDepth .
7685	StereoPan converts the audio buffer to an audio buffer
7686	Leader returns the current leader
7687	IsLeader returns true if the candidate is leader
7688	NewResponse creates a new response .
7689	GetRequestID returns the request id
7690	Log implements monitorableWriter interface .
7691	SendMailSSL is used to send a mail to a remote address
7692	Send sends a mail message
7693	WaitForIt waits for a connection to be established
7694	Get retrieves configuration from source
7695	initConfig is used to initialize the configuration
7696	WritePluginResultsToDatabase writes the results to the database
7697	NewAuthController creates a new auth controller
7698	Authenticate is used to authenticate a user
7699	NewOAuth2Controller creates a new OAuth2 controller
7700	Refresh refresh token
7701	Token retrieves an access token from the OAuth2 code .
7702	Logging is a convenience wrapper around http . Handler .
7703	SingleFile returns an http . Handler that serves a single file
7704	Write implements the io . Writer interface .
7705	Hijack implements the http . Hijacker interface
7706	NewMongo creates a new MongoDB instance
7707	Disconnect disconnects from MongoDB
7708	New creates a new table .
7709	PrintTable prints a table with the given fields .
7710	PrintHorizontal prints a map of keys
7711	PrintRow prints a single row of fields .
7712	AddRow adds a row to the table .
7713	Print the table
7714	String returns a string representation of the table
7715	getHead returns the head of the table .
7716	rowString returns a string representation of a row .
7717	fieldString returns a string representation of a field
7718	stringTableDash returns a dash separated string of the table .
7719	printMarkdownDash prints all fields in the table .
7720	stringMarkdownDash returns a string markdown markdown as a string .
7721	HashPassword hashes a password
7722	EncodeOAuth2Code encodes an OAuth2 code and returns a JWS response .
7723	DecodeOAuth2Code decodes an OAuth2 code .
7724	NewServer creates a new server
7725	Start starts the server
7726	Stop stops the lunarc server
7727	NewLoggingServeMux creates a new LoggingServeMux .
7728	Handler returns a handler for the given request .
7729	Handle registers a handler for logging requests
7730	HandleFunc registers a handler for the given pattern .
7731	Init initializes the database
7732	WaitForConnection tries to connect to Elasticsearch
7733	StoreFileInfo stores file information
7734	StorePluginResults stores the results in the database
7735	CamelCase converts src to CamelCase
7736	Getopt returns the value of an environment variable
7737	Getopts returns user input string if empty string otherwise
7738	GetSHA256 returns the SHA256 hash of a file
7739	RunCommand runs a command and returns its output .
7740	Remove duplicate elements
7741	Unzip unzip a zip archive
7742	SliceContainsString checks if a string contains a string
7743	NewSMTP creates a new SMTP instance
7744	SendMail is used to send a mail message
7745	GetEnvironment returns the configuration for the given environment
7746	GetSMTP gets the SMTP configuration from source
7747	GetConfig retrieves a configuration from source .
7748	GetEnvironment returns the configuration for the given environment
7749	GetMongo retrieves the config from source
7750	TokenHandler parses a JWT token and returns it .
7751	Receive receives a raw message from the server .
7752	Send sends an OutMsg .
7753	allBoshReleaseNames returns a list of all the release names in the diff .
7754	AddedProperty adds the added property to the DeltaJob
7755	RemovedProperty adds a removed property to the DeltaJob
7756	AddDeltaJob adds a delta job
7757	Concat concatenates two Result objects .
7758	Read returns an io . ReadCloser for the given release location .
7759	Pull pulls a release from the local cache
7760	BuildJob creates a new job
7761	LoadBoshRelease loads a BoshRelease from a release repository
7762	readBoshRelease reads a BoshRelease from an io . Reader
7763	readBoshRelease reads a BoshRelease from rr
7764	readBoshJob reads a job manifest from the given io . Reader
7765	NewRequest creates a new request .
7766	PushCloudConfig pushes cloud config to BOSH
7767	Generate creates a new object from a file .
7768	CreateNewRecord creates a new Record
7769	NewShowCmd returns a new instance which can be used to issue a ShowCmd .
7770	All prints all the versions of the command
7771	GetDefaultTaskImageResource returns the default image resource
7772	AddRawJob adds a raw job to the pipeline
7773	AddGroup adds a group to the pipeline
7774	GetResourceByName returns the resource config with the given name
7775	AddRawResource adds a raw resource to the pipeline
7776	AddResource adds a resource to the pipeline
7777	AddGithubResource adds a Github resource to the pipeline
7778	AddBoshIOResource adds a BoshIOResource to the pipeline
7779	AddBoshDeploymentResource adds a BoshDeploymentResource to the pipeline .
7780	AddGitResource adds a git resource to the pipeline
7781	allJobNames returns a list of all job names .
7782	NewDeploymentManifestFromFile creates a new DeploymentManifestManifest
7783	NewDeploymentManifest creates a new DeploymentManifest
7784	AddRemoteRelease adds a new release to the manifest
7785	AddRemoteStemcell adds a stemcell to the manifest
7786	Tag returns the tag of the manifest
7787	RemoveTag removes a tag from the manifest
7788	LoadPivnetRelease loads a PivnetRelease from the given path .
7789	BoshReleaseOrEmpty returns an existing BoshRelease or empty if not found
7790	readPivnetRelease reads a PoshRelease from the given path .
7791	decodeYaml decodes YAML data into v .
7792	NewZipWalker creates a new ZipWalker
7793	NewDiffCmd returns a new instance which can be used to issue a diff command .
7794	All prints the differences between two releases .
7795	Job computes the diff of two releases .
7796	New returns a new DifferDiffer for the given release repository .
7797	StructName returns the struct name for this record
7798	TypeName returns the name of the record .
7799	NewTgzWalker creates a new tgzWalker
7800	NewBackoff creates a new backoff with the given strategy and limit .
7801	Reset resets the backoff values
7802	NewExponential creates a new Backoff with the given start and limit .
7803	NewExponentialFullJitter creates a new Backoff with exponential backoff .
7804	NewLinear creates a new Backoff with the given start and limit .
7805	Get line size
7806	Get max size
7807	compute appends new lines to stdout
7808	WithTimeout adds the timeout to the post apps params
7809	WithContext adds the context to the post apps params
7810	WithHTTPClient adds the HTTPClient to the post apps params
7811	WithBody adds the body to the post apps params
7812	WithTimeout adds the timeout to the get apps app params
7813	WithContext adds the context to the get apps app params
7814	WithHTTPClient adds the HTTPClient to the get apps app params
7815	WithApp adds the app to the get apps app params
7816	UnmarshalBinary implements the encoding of RouteWrapper
7817	WithTimeout adds the timeout to the get apps params
7818	WithContext adds the context to the get apps params
7819	WithHTTPClient adds the HTTPClient to the get apps params
7820	WithTimeout adds the timeout to the delete apps app params
7821	WithContext adds the context to the delete apps app params
7822	WithHTTPClient adds the HTTPClient to the delete apps app params
7823	WithApp adds the app to the delete apps app params
7824	WithTimeout adds the timeout to the patch apps routes route params
7825	WithContext adds the context to the patch apps routes route params
7826	WithHTTPClient adds the HTTPClient to the patch apps routes route params
7827	WithApp adds the app to the patch apps routes route params
7828	WithBody adds the body to the patch apps routes route params
7829	WithRoute adds the route to the patch apps routes route params
7830	WithTimeout adds the timeout to the post apps app routes params
7831	WithContext adds the context to the post apps app routes params
7832	WithHTTPClient adds the HTTPClient to the post apps app routes params
7833	WithApp adds the app to the post apps routes params
7834	WithBody adds the body to the post apps app routes params
7835	WithTimeout adds the timeout to the put apps app routes route params
7836	WithContext adds the context to the put apps app routes route params
7837	WithApp adds the app to the put apps routes route params
7838	WithBody adds the body to the put apps appRoutes route params
7839	WithRoute adds the route to the put apps routes route params
7840	WithTimeout adds the timeout to the get apps app routes params
7841	WithContext adds the context to the get apps app routes params
7842	WithHTTPClient adds the HTTPClient to the get apps app routes params
7843	WithApp adds the app to the get apps routes params
7844	WithTimeout adds the timeout to the patch apps params
7845	WithContext adds the context to the patch apps app params
7846	WithHTTPClient adds the HTTPClient to the patch apps app params
7847	WithApp adds the app to the patch apps app params
7848	WithBody adds the body to the patch apps app params
7849	WithTimeout adds the timeout to the put apps app params
7850	WithContext adds the context to the put apps app params
7851	WithApp adds the app to the put apps app params
7852	WithBody adds the body to the put apps app params
7853	UnmarshalJSON handles deserialization of a Task
7854	MarshalJSON method of Task
7855	Validate validates this task
7856	Parse a list of IPv4 CIDRs
7857	WithTimeout adds the timeout to the get apps routes route params
7858	WithContext adds the context to the get apps app routes route params
7859	WithHTTPClient adds the HTTPClient to the get apps app routes route params
7860	WithApp adds the app to the get apps routes route params
7861	WithRoute adds the route to the get apps routes route params
7862	New creates a new cli functions
7863	SetTransport sets the transport
7864	WithTimeout adds the timeout to the delete apps app routes route params
7865	WithContext adds the context to the delete apps app routes route params
7866	WithHTTPClient adds the HTTPClient to the delete apps app routes route params
7867	WithApp adds the app to the delete apps routes route params
7868	WithRoute adds the route to the delete apps routes route params
7869	WithTimeout adds the timeout to the get tasks params
7870	WithContext adds the context to the get tasks params
7871	WithHTTPClient adds the HTTPClient to the get tasks params
7872	NewValueStore creates a new value store
7873	Close shuts down the store
7874	SetBackend sets the oort service
7875	Return the ring
7876	GetLocalID returns local id
7877	GetListenAddr returns the listen address
7878	Startup starts the replication server
7879	shutdownFinished waits for the shutdown to finish .
7880	Stop stops the server
7881	Exit the server
7882	SelfUpgrade is used to upgrade the version of the binary
7883	SoftwareVersion returns the current version
7884	Shutdown shuts down the store
7885	Rant retrieves the Rant with the given id and comments .
7886	Profile retrieves information about a user .
7887	Search searches for a given term
7888	Surprise returns a Surprise model
7889	WeekweeklyRants returns a list of Rants for the current user .
7890	getUserId returns user id for given username
7891	Shutdown shuts down the ReplValueStore .
7892	FExists checks if a file exists
7893	outbound handles incoming messages
7894	Parse parses incoming messages
7895	Group creates a new Group
7896	Groups returns a list of all the groups in the domain .
7897	Gets a group by name .
7898	Reticence returs a string with the given length .
7899	CheckPassword returns an error if the password is invalid .
7900	CleanUrl check url
7901	NewParameter creates a new Parameter
7902	MakeParams creates a new Params object .
7903	Parse takes a reflect . Value and adds it to the list .
7904	Email returns the email address .
7905	Forwarder creates a new forwarder
7906	Forwarders returns a list of registered forwarders .
7907	GetForwarder retrieves a new forwarder by name
7908	New creates a new CGP instance
7909	EscapeCommaSeparated escapes a comma separated string .
7910	Alias creates a new Alias .
7911	Email returns the alias for the alias .
7912	Aliases returns a list of Aliases .
7913	RealName returns the real name of the account .
7914	Email returns the account name
7915	Account creates a new account with the given name .
7916	Accounts returns a list of accounts for the domain .
7917	Exists checks if the domain exists .
7918	Aliases returns the aliases for the domain .
7919	Domain returns a domain with the given name .
7920	Domains returns a list of Domain objects .
7921	New returns a new Err with the given info .
7922	Wrap wraps an error with the given error .
7923	mergeIn merges the given info into an error .
7924	wrapErrStr returns the wrapped error .
7925	concatArgs concatenates the given arguments and returns a new string .
7926	MailingList creates a new MailingList .
7927	Subscriber creates a new subscriber
7928	Subscribers returns a list of subscribers .
7929	MailingLists returns a list of mailing lists .
7930	NewByteKeyItem returns a pointer to a pointer to a new pointer .
7931	CompareBytes compares two bytes .
7932	CompareInt compares two pointers .
7933	Malloc allocates a memory pointer to a memory pointer
7934	Free frees memory memory .
7935	Stats returns statistics about memory usage .
7936	FreeOSMemory frees the OS memory .
7937	Add adds an item to the Segment .
7938	NewSegment creates a new Segment .
7939	Assemble builds a Seiplist with the given segments .
7940	CompareNodeTable compares two node table tables .
7941	New creates a node table .
7942	Stats returns statistics about the node table .
7943	MemoryInUse returns the number of nodes in the node table .
7944	Get returns the value for the given key .
7945	Implements NodeTable interface .
7946	Remove deletes the node with the given key .
7947	Closes node table .
7948	MemoryInUse returns the number of nodes in the node
7949	debugMarkFree marks the node as free .
7950	Seek moves the iterator to the next item .
7951	Next advances the iterator .
7952	Refresh refreshes the current iterator .
7953	Close closes the iterator .
7954	NewIterator creates a new Iterator
7955	SeekFirst moves the iterator to the current iterator .
7956	Next moves the iterator to the current iterator .
7957	Seek moves the iterator to the current iterator .
7958	Keys returns the keys of the list .
7959	Remove removes the node with the given key .
7960	Add adds a new node to the list .
7961	NewWithConfig creates a new skiplist with the given config .
7962	FreeNode is used to mark a node
7963	MakeBuf creates a new ActionBuffer
7964	Size returns the number of items in n .
7965	NewLevel returns a new Level with a random number .
7966	Insert inserts an item into the skiplist .
7967	Insert2 inserts a new node into the skplist .
7968	Insert3 inserts a new node with the given value .
7969	Delete is used to delete a node
7970	DeleteNode is used to delete a node
7971	GetRangeSplitItems returns a slice of items that are split into nways .
7972	Get the item
7973	ItemSize returns the size of the given item .
7974	KVFromBytes returns the KV value of the given bytes .
7975	CompareKV compares two KV values .
7976	Emit emits an event
7977	UnregisterHandler removes the named handler .
7978	IsHandlerRegistered returns true if the handler is registered
7979	CompareNitro returns an integer indicating whether the objects are equal .
7980	DefaultConfig returns a config with default values .
7981	Delete implements io . Writer interface .
7982	GetNode returns the skiplist node at the given byte slice .
7983	SetKeyComparator sets the key comparator
7984	UseMemoryMgmt sets memory mgmt
7985	NewWithConfig creates a new instance of Nitro instance
7986	MemoryInUse returns total amount of memory in use
7987	Close deletes nodes
7988	NewWriter creates a new writer
7989	SnapshotSize returns the size of the snapshot .
7990	Encode writes the snapshot to the writer .
7991	Decode reads the snapshot from the given io . Reader .
7992	Open opens the snapshot .
7993	CompareSnapshot compares two snapshots .
7994	Garbage garbage collector
7995	GetSnapshots returns snapshot snapshots
7996	MemoryInUse returns the total number of instances in the database
7997	CompareBS compares two barrier sessions .
7998	Acquire acquires the barrier session and returns it .
7999	Release releases the barrier session
8000	FlushSession resets the barrier session .
8001	Apply updates the stats report
8002	AddInt64 adds an int64 to the stats .
8003	AddUint64 adds a uint64 to the source stats .
8004	Merge merges two stats together .
8005	GetStats returns a stats report
8006	NewIterator creates a new Iterator
8007	SeekFirst moves the iterator to the next item .
8008	SeekWithCmp seeks to the iterator with the given value .
8009	Seek moves the iterator to the given pointer .
8010	Valid returns true if the iterator is valid .
8011	Delete deletes an iterator
8012	Next moves the iterator to the next item .
8013	Init initializes skukeeper
8014	FromURL creates a URL from a URL string
8015	ToURL converts folder to URL
8016	Size returns the number of bytes in the tuple header .
8017	WriteTo implements io . WriterTo interface .
8018	Static returns a handler that serves static files .
8019	Read reads the configuration from the file .
8020	Del deletes a key
8021	WriteTo writes the configuration to the file .
8022	checkSection checks the section of a section .
8023	checkLine parses a line and returns the key and value .
8024	checkComment returns true if the line contains a comment .
8025	NewResponseWrapper creates a new mock ResponseWrapper
8026	Hijack implements the http . Hijacker interface .
8027	CloseNotify implements the http . ResponseWriter interface .
8028	DateFormat is an option to set the date format .
8029	Logger creates a new http . Handler
8030	GetAvailableInventory returns a set of available SKU plugins
8031	Expiration sets the token expiration time .
8032	Claimer returns a TokenOpt that sets the JWT claims .
8033	Issuer sets the issuer of the token .
8034	User specifies the user to use .
8035	Password sets the password used to authenticate the token .
8036	Extractor returns a TokenOpt that sets the provided Extractor .
8037	TokenGenerator creates a token middleware that uses the provided authenticator .
8038	Token returns the token associated with the request .
8039	Claims extracts the claims from the request context .
8040	String returns the string representation of the token .
8041	NewLexer creates a new Lexer .
8042	run runs the lexer .
8043	emit emits a token
8044	skipWhitespace skips whitespace
8045	next returns the next unicode character
8046	LineNum returns the number of lines in the input
8047	Offset returns the offset of the current line .
8048	errorf terminates the next token .
8049	lexText scans text
8050	lexComment scans the next comment .
8051	Creates a new tuple type .
8052	AddVersion adds a version to the tuple .
8053	Contains returns true if the given field exists in the tuple .
8054	Offset returns the offset of a tuple .
8055	Versions returns a slice of version numbers .
8056	SetPrivateMeta sets the private meta data
8057	SetPublicMeta sets the public meta data
8058	GetRedactedVersion returns a redacted version of this task
8059	Equal returns true if two tasks are equal
8060	HTTP adds a handler to the given handler .
8061	PutUint8 adds a uint8 value to the buffer
8062	PutInt8 adds an int8 to the buffer
8063	PutUint16 appends a uint16 value to the buffer
8064	PutInt16 appends an int16 value to the buffer
8065	PutUint32 appends a uint32 value to the buffer
8066	PutInt32 adds an int32 to the buffer
8067	PutUint64 appends a uint64 value to the buffer
8068	PutInt64 adds an int64 value to the buffer
8069	NewPackageList creates a PackageList .
8070	PutFloat32 appends a float32 value to the buffer
8071	Classic creates a classic martini
8072	Languages is an option to set the list of languages .
8073	Session returns an Option that sets the session
8074	Data returns the context s context value .
8075	URL adds a URL to the current context .
8076	Size returns the size of the terminal
8077	GetRequestIDFromTaskResponse get request id from task response
8078	PutString appends a string value to the buffer
8079	LoadDirectory reads the given directory and parses it into the parser .
8080	LoadFile loads a package from a file .
8081	LoadPackage loads a package from the given parser .
8082	NewDecoder returns a new decoder that reads from r .
8083	NewDecoderSize returns a new decoder that reads from r .
8084	Panic is a middleware that recovers panics .
8085	DeployVApp deploys a vapp
8086	UnDeployVApp un - deploys vapp
8087	Auth is a mock
8088	QueryTemplate is a mock
8089	NewEncoder returns a new encoder that writes to w .
8090	Getter is an Option that sets a nonceGetter .
8091	Setter sets a nonce setter .
8092	Age is an option that sets the age of the cluster
8093	Nonce generates a new nonce based on the provided options .
8094	NonceValueFromRequest returns the nonce status of the request .
8095	StoreNonce stores the nonce in the context .
8096	PutFloat32Array adds a float32 array to the buffer
8097	PutFloat64Array adds a float64 array to the buffer
8098	Do is part of the http . Client interface .
8099	NewLease creates a new lease
8100	Delete deletes a resource
8101	Post creates a new lease
8102	ReStock creates a new SKU task
8103	Procurement creates a task
8104	InitFromHTTPRequest initializes the lease object
8105	Is returns true if this tuple is the same .
8106	Offset returns the offset of a tuple .
8107	WriteTo implements io . WriterTo interface .
8108	PutTuple adds a tuple to the buffer .
8109	WriteString write string
8110	NotFound returns a 404 response
8111	Run starts the agent .
8112	NewWaitGroup creates a new WaitGroup .
8113	Add increments the number of outstanding requests .
8114	Wait waits for the outstanding requests to complete .
8115	Gzip returns a new http . Handler which encodes the Accept - Encoding header .
8116	New creates a new InnkeeperClient
8117	Error writes a response with status code .
8118	Renderer creates a new Handler .
8119	NewClient creates a new PDClient
8120	GetTask returns task response
8121	WriteImageToHTTP writes an image to the client .
